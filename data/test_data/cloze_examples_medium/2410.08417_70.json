{
  "paper_id": "http://arxiv.org/abs/2410.08417v1",
  "question": "You are given a paper with a placeholder \"**[MASKED_CITATION]**\" in its content. Your task is to select the most appropriate reference from the provided reference list to replace the mask.\n\n- The paper content is enclosed within <Paper> and </Paper>.\n- The reference list is enclosed within <References> and </References>, with each reference wrapped in <Candidate> and </Candidate>.\n- After selecting the best-suited reference, output the index of that reference in the following format:\n<answer>index</answer>.\n\n<Paper>\n\nBilinear MLPs enable weight-based mechanistic interpretability\n\nAbstract: A mechanistic understanding of how MLPs do computation in deep neural\nnetworks remains elusive. Current interpretability work can extract features\nfrom hidden activations over an input dataset but generally cannot explain how\nMLP weights construct features. One challenge is that element-wise\nnonlinearities introduce higher-order interactions and make it difficult to\ntrace computations through the MLP layer. In this paper, we analyze bilinear\nMLPs, a type of Gated Linear Unit (GLU) without any element-wise nonlinearity\nthat nevertheless achieves competitive performance. Bilinear MLPs can be fully\nexpressed in terms of linear operations using a third-order tensor, allowing\nflexible analysis of the weights. Analyzing the spectra of bilinear MLP weights\nusing eigendecomposition reveals interpretable low-rank structure across toy\ntasks, image classification, and language modeling. We use this understanding\nto craft adversarial examples, uncover overfitting, and identify small language\nmodel circuits directly from the weights alone. Our results demonstrate that\nbilinear layers serve as an interpretable drop-in replacement for current\nactivation functions and that weight-based interpretability is viable for\nunderstanding deep-learning models.\n\n\n## 1 Introduction\nMulti-layer perceptrons (MLPs) are an important component of many deep learning models, including transformers (**[MASKED_CITATION]**). Unfortunately, element-wise nonlinearities obscure the relationship between weights, inputs, and outputs, making it difficult to trace a neural network\u2019s decision-making process.\nConsequently, MLPs have previously been treated as undecomposable components in interpretability research (Elhage et al., [2021]).\n00footnotetext: Code at: [https://github.com/tdooms/bilinear-decomposition]\n\nWhile early mechanistic interpretability literature explored neural network weights (Olah et al., [2017]; [2020]); Voss et al., [2021]; Elhage et al., [2021]), activation-based approaches dominate contemporary research (Petsiuk et al., [2018]; Ribeiro et al., [2016]; Simonyan et al., [2014]; Montavon et al., [2018]). In particular, most recent studies on transformers use sparse dictionary learning (SDL) to decompose latent representations into an overcomplete basis of seemingly interpretable atoms\n(Cunningham et al., [2024]; Bricken et al., [2023b]; Marks et al., [2024]; Dunefsky et al., [2024]).\nHowever, SDL-based approaches only describe which features are present, not how they are formed or what their downstream effect is.\nPrevious work has approximated interactions between latent dictionaries using linear and gradient-based attribution (Marks et al., [2024]; Ge et al., [2024]), but these approaches offer weak guarantees of generalization. To ensure faithfulness, ideally, we would be able to capture nonlinear feature interactions in circuits that are grounded in the model weights.\n\nOne path to better circuit discovery is to use more inherently interpretable architectures. Previous work constrains the model into using human-understandable components or concepts (Koh et al., [2020]; Chen et al., [2019]), but this typically requires labeled training data for the predefined concepts and involves a trade-off in accuracy compared to learning the best concepts for performance (Henighan et al., [2023]). Ideally, we could more easily extract and interpret the concepts that models naturally learn rather than force the model to use particular concepts. To this end, Sharkey ( [2023])) suggested that bilinear layers of the form g\u200b(\ud835\udc99)=(\ud835\udc7e\u200b\ud835\udc99)\u2299(\ud835\udc7d\u200b\ud835\udc99)\ud835\udc54\ud835\udc99direct-product\ud835\udc7e\ud835\udc99\ud835\udc7d\ud835\udc99g({\\\\bm{x}})=({\\\\bm{W}}{\\\\bm{x}})\\\\odot({\\\\bm{V}}{\\\\bm{x}}) are intrinsically interpretable because their computations can be expressed in terms of linear operations with a third order tensor. This enables the use of tensor or matrix decompositions to understand the weights. Moreover, bilinear layers outperform ReLU-based transformers in language modeling (Shazeer, [2020]) and have performance only slightly below SwiGLU, which is prevalent in competitive models today (Touvron et al., [2023]).\n\nWe show that bilinear MLPs can be decomposed into functionally relevant, interpretable components by directly decomposing the weights, without using inputs. These decompositions reveal a low-rank structure in bilinear MLPs trained across various tasks. In summary, this paper demonstrates that bilinear MLPs are an interpretable drop-in replacement for ordinary MLPs in a wide range of settings. Our contributions are as follows:\n\n1. 1.\n\n\nIn [section 3]Analysis methods \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), we introduce several methods to analyze bilinear MLPs. One method decomposes the weights into a set of eigenvectors that explain the outputs along a given set of directions in a way that is fully equivalent to the layer\u2019s original computations.\n\n2. 2.\n\n\nIn [section 4]Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), we showcase the eigenvector decomposition across multiple image classification tasks, revealing an interpretable low-rank structure. Smaller eigenvalue terms can be truncated while preserving performance. Using the eigenvectors, we see how regularization reduces signs of overfitting in the extracted features and construct adversarial examples.\n\n3. 3.\n\n\nFinally, in [section 5]Language: finding interactions between SAE features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), we analyze how bilinear MLPs compute output features from input features, both derived from sparse dictionary learning (SDL). We highlight a small circuit that flips the sentiment of the next token if the current token is a negation (\u201cnot\u201d). We also find that many output features are well-correlated with low-rank approximations. This gives evidence that weight-based interpretability can be viable in large language models.\n\n## 2 Background\nThroughout, we use conventional notation as in Goodfellow et al. ( [2016]). Scalars are denoted by s\ud835\udc60s, vectors by \ud835\udc97\ud835\udc97{\\\\bm{v}}, matrices by \ud835\udc74\ud835\udc74{\\\\bm{M}}, and third-order tensors by \ud835\udc7b\ud835\udc7b{\\\\bm{\\\\mathsfit{T}}}. The entry in row i\ud835\udc56i and column j\ud835\udc57j of a matrix \ud835\udc74\ud835\udc74{\\\\bm{M}} is a scalar and therefore denoted as mi\u200bjsubscript\ud835\udc5a\ud835\udc56\ud835\udc57m\\_{ij}. We denote taking row i\ud835\udc56i or column j\ud835\udc57j of a matrix by \ud835\udc8ei:subscript\ud835\udc8e:\ud835\udc56absent{\\\\bm{m}}\\_{i:} and \ud835\udc8e:jsubscript\ud835\udc8e:absent\ud835\udc57{\\\\bm{m}}\\_{:j} respectively. We use \u2299direct-product\\\\odot to denote an element-wise product and \u22c5axissubscript\u22c5axis\\\\cdot\\_{\\\\text{axis}} to denote a product of tensors along the specified axis.\n\nDefining bilinear MLPs.\nModern Transformers (Touvron et al., [2023]) feature Gated Linear Units (GLUs), which offer a performance gain over standard MLPs for the same number of parameters (Shazeer, [2020]). GLU activations consist of the component-wise product of two linear up-projections, \ud835\udc7e\ud835\udc7e{\\\\bm{W}} and \ud835\udc7d\ud835\udc7d{\\\\bm{V}}, one of which is passed through a nonlinear activation function \u03c3\ud835\udf0e\\\\sigma( [Equation 1]Background \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")). We omit biases for brevity.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | g\u200b(\ud835\udc99)\ud835\udc54\ud835\udc99\\\\displaystyle g({\\\\bm{x}}) | =(\ud835\udc7e\u200b\ud835\udc99)\u2299\u03c3\u200b(\ud835\udc7d\u200b\ud835\udc99)absentdirect-product\ud835\udc7e\ud835\udc99\ud835\udf0e\ud835\udc7d\ud835\udc99\\\\displaystyle=({\\\\bm{W}}{\\\\bm{x}})\\\\odot\\\\sigma({\\\\bm{V}}{\\\\bm{x}}) |  | (1) |\n|  | GLU\u200b(\ud835\udc99)GLU\ud835\udc99\\\\displaystyle\\\\text{GLU}({\\\\bm{x}}) | =\ud835\udc77\u200b(g\u200b(\ud835\udc99))absent\ud835\udc77\ud835\udc54\ud835\udc99\\\\displaystyle={\\\\bm{P}}(g({\\\\bm{x}})) |  |\n\nA bilinear layer is a GLU variant that omits the nonlinear activation function \u03c3\ud835\udf0e\\\\sigma. Bilinear layers beat ordinary ReLU MLPs, and perform almost as well as SwiGLU on language modeling tasks (Shazeer, [2020]). We corroborate these findings in [Appendix G]Appendix G Bilinear transformers: a loss comparison \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), and show that bilinear layers achieve equal loss when keeping training time constant and marginally worse loss when keeping data constant.\n\nInteraction matrices and the bilinear tensor. A bilinear MLP parameterizes the pairwise interactions between inputs. One way to see this is by looking at how a single output g\u200b(x)a\ud835\udc54subscriptx\ud835\udc4eg(\\\\textbf{x})\\_{a} is computed.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | g\u200b(\ud835\udc99)\ud835\udc54\ud835\udc99\\\\displaystyle g({\\\\bm{x}}) | =(\ud835\udc7e\u200b\ud835\udc99)\u2299(\ud835\udc7d\u200b\ud835\udc99)absentdirect-product\ud835\udc7e\ud835\udc99\ud835\udc7d\ud835\udc99\\\\displaystyle=({\\\\bm{W}}{\\\\bm{x}})\\\\odot({\\\\bm{V}}{\\\\bm{x}}) |  |\n|  | g\u200b(\ud835\udc99)a\ud835\udc54subscript\ud835\udc99\ud835\udc4e\\\\displaystyle g({\\\\bm{x}})\\_{a} | =(\ud835\udc98a:T\u200b\ud835\udc99)\u200b(\ud835\udc97a:T\u200b\ud835\udc99)absentsuperscriptsubscript\ud835\udc98:\ud835\udc4eabsent\ud835\udc47\ud835\udc99subscriptsuperscript\ud835\udc97\ud835\udc47:\ud835\udc4eabsent\ud835\udc99\\\\displaystyle=({\\\\bm{w}}\\_{a:}^{T}{\\\\bm{x}})\\ ({\\\\bm{v}}^{T}\\_{a:}{\\\\bm{x}}) |  |\n|  |  | =\ud835\udc99T\u200b(\ud835\udc98a:\u200b\ud835\udc97a:T)\u200b\ud835\udc99absentsuperscript\ud835\udc99\ud835\udc47subscript\ud835\udc98:\ud835\udc4eabsentsuperscriptsubscript\ud835\udc97:\ud835\udc4eabsent\ud835\udc47\ud835\udc99\\\\displaystyle={\\\\bm{x}}^{T}({\\\\bm{w}}\\_{a:}{\\\\bm{v}}\\_{a:}^{T}){\\\\bm{x}} |  |\n\nWe call the matrix \ud835\udc98a:\u200b\ud835\udc97a:T=\ud835\udc69a::subscript\ud835\udc98:\ud835\udc4eabsentsuperscriptsubscript\ud835\udc97:\ud835\udc4eabsent\ud835\udc47subscript\ud835\udc69:\ud835\udc4e:{\\\\bm{w}}\\_{a:}{\\\\bm{v}}\\_{a:}^{T}={\\\\bm{B}}\\_{a::} an _interaction matrix_ since it defines how each pair of inputs interact for a given output dimension a\ud835\udc4ea.\n\nThe collection of interaction matrices across the output axis can be organized into the third-order _bilinear tensor_, \ud835\udc69\ud835\udc69{\\\\bm{\\\\mathsfit{B}}}, with elements ba\u200bi\u200bj=wa\u200bi\u200bva\u200bjsubscript\ud835\udc4f\ud835\udc4e\ud835\udc56\ud835\udc57subscript\ud835\udc64\ud835\udc4e\ud835\udc56subscript\ud835\udc63\ud835\udc4e\ud835\udc57b\\_{aij}=w\\_{ai}v\\_{aj}, illustrated in [Figure 1]Figure 1 \u2023 3.2 Output features \u2192 eigendecomposition \u2023 3 Analysis methods \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") A. The bilinear tensor allows us to easily find the interaction matrix for a specific output direction \ud835\udc96\ud835\udc96{\\\\bm{u}} of interest by taking a product along the output axis, \ud835\udc96\u22c5out\ud835\udc69subscript\u22c5out\ud835\udc96\ud835\udc69{\\\\bm{u}}\\ \\\\cdot\\_{\\\\text{out}}{\\\\bm{\\\\mathsfit{B}}}, equal to a weighted sum over the neuron-basis interaction matrices, \u2211aua\u200b\ud835\udc98a:\u200b\ud835\udc97a:Tsubscript\ud835\udc4esubscript\ud835\udc62\ud835\udc4esubscript\ud835\udc98:\ud835\udc4eabsentsuperscriptsubscript\ud835\udc97:\ud835\udc4eabsent\ud835\udc47\\\\sum\\_{a}u\\_{a}{\\\\bm{w}}\\_{a:}{\\\\bm{v}}\\_{a:}^{T}.\n\nSimplifications due to symmetry. Because an interaction matrix is always evaluated with two copies of the input \ud835\udc99\ud835\udc99{\\\\bm{x}}, it contains redundant information that does not contribute to the activation of a layer. Specifically, any square matrix can be expressed uniquely as the sum of a symmetric and an anti-symmetric matrix.\n\n|     |     |     |\n| --- | --- | --- |\n|  | \ud835\udc69a::=12\u200b(\ud835\udc69a::+\ud835\udc69a::T\u23df\ud835\udc69a::s\u200by\u200bm)+12\u200b(\ud835\udc69a::\u2212\ud835\udc69a::T\u23df\ud835\udc69a::a\u200bn\u200bt\u200bi)subscript\ud835\udc69:\ud835\udc4e:12subscript\u23dfsubscript\ud835\udc69:\ud835\udc4e:superscriptsubscript\ud835\udc69:\ud835\udc4e:\ud835\udc47superscriptsubscript\ud835\udc69:\ud835\udc4e:\ud835\udc60\ud835\udc66\ud835\udc5a12subscript\u23dfsubscript\ud835\udc69:\ud835\udc4e:superscriptsubscript\ud835\udc69:\ud835\udc4e:\ud835\udc47superscriptsubscript\ud835\udc69:\ud835\udc4e:\ud835\udc4e\ud835\udc5b\ud835\udc61\ud835\udc56\\\\displaystyle{\\\\bm{B}}\\_{a::}=\\\\dfrac{1}{2}(\\\\underbrace{{\\\\bm{B}}\\_{a::}+{\\\\bm{B}}\\_{a::}^{T}}\\_{{\\\\bm{B}}\\_{a::}^{sym}})+\\\\dfrac{1}{2}(\\\\underbrace{{\\\\bm{B}}\\_{a::}-{\\\\bm{B}}\\_{a::}^{T}}\\_{{\\\\bm{B}}\\_{a::}^{anti}}) |  |\n\nHowever, evaluating an anti-symmetric matrix \ud835\udc68\ud835\udc68{\\\\bm{A}} with identical inputs yields 0 and can be omitted:\n\n|     |     |     |\n| --- | --- | --- |\n|  | \ud835\udc99T\u200b\ud835\udc68\u200b\ud835\udc99=\ud835\udc99T\u200b(\u2212\ud835\udc68T)\u200b\ud835\udc99=\u2212(\ud835\udc99T\u200b\ud835\udc68\u200b\ud835\udc99)T=0.superscript\ud835\udc99\ud835\udc47\ud835\udc68\ud835\udc99superscript\ud835\udc99\ud835\udc47superscript\ud835\udc68\ud835\udc47\ud835\udc99superscriptsuperscript\ud835\udc99\ud835\udc47\ud835\udc68\ud835\udc99\ud835\udc470\\\\displaystyle{\\\\bm{x}}^{T}{\\\\bm{A}}{\\\\bm{x}}={\\\\bm{x}}^{T}(-{\\\\bm{A}}^{T}){\\\\bm{x}}=-({\\\\bm{x}}^{T}{\\\\bm{A}}{\\\\bm{x}})^{T}=0. |  |\n\nTherefore, only the symmetric part \ud835\udc69a::s\u200by\u200bmsuperscriptsubscript\ud835\udc69:\ud835\udc4e:\ud835\udc60\ud835\udc66\ud835\udc5a{\\\\bm{B}}\\_{a::}^{sym} contributes. From here on, we drop the \u22c5s\u200by\u200bmsuperscript\u22c5\ud835\udc60\ud835\udc66\ud835\udc5a\\\\cdot^{sym} superscript and assume the symmetric form for any interaction matrix or bilinear tensor (ba\u200bi\u200bj=12\u200b(wa\u200bi\u200bva\u200bj+wa\u200bj\u200bva\u200bi)subscript\ud835\udc4f\ud835\udc4e\ud835\udc56\ud835\udc5712subscript\ud835\udc64\ud835\udc4e\ud835\udc56subscript\ud835\udc63\ud835\udc4e\ud835\udc57subscript\ud835\udc64\ud835\udc4e\ud835\udc57subscript\ud835\udc63\ud835\udc4e\ud835\udc56b\\_{aij}=\\\\frac{1}{2}(w\\_{ai}v\\_{aj}+w\\_{aj}v\\_{ai})). Symmetric matrices have simpler eigendecompositions since the eigenvalues are all real-valued and the eigenvectors are orthogonal, by the spectral theorem.\n\nIncorporating biases. If a bilinear layer has biases, we can augment the weight matrices to adapt our approach.\nGiven activations of the form g\u200b(\ud835\udc99)=(W\u200b\ud835\udc99+\ud835\udc831)\u2299(\ud835\udc7d\u200b\ud835\udc99+\ud835\udc832)\ud835\udc54\ud835\udc99direct-product\ud835\udc4a\ud835\udc99subscript\ud835\udc831\ud835\udc7d\ud835\udc99subscript\ud835\udc832g({\\\\bm{x}})=(W{\\\\bm{x}}+{\\\\bm{b}}\\_{1})\\\\odot({\\\\bm{V}}{\\\\bm{x}}+{\\\\bm{b}}\\_{2}), define \ud835\udc7e\u2032=\\[\ud835\udc7e;\ud835\udc832\\]superscript\ud835\udc7e\u2032\ud835\udc7esubscript\ud835\udc832{\\\\bm{W}}^{\\\\prime}=\\[{\\\\bm{W}};{\\\\bm{b}}\\_{2}\\], \ud835\udc7d\u2032=\\[\ud835\udc7d;\ud835\udc832\\]superscript\ud835\udc7d\u2032\ud835\udc7dsubscript\ud835\udc832{\\\\bm{V}}^{\\\\prime}=\\[{\\\\bm{V}};{\\\\bm{b}}\\_{2}\\], and \ud835\udc99\u2032=\\[\ud835\udc99,1\\]superscript\ud835\udc99\u2032\ud835\udc991{\\\\bm{x}}^{\\\\prime}=\\[{\\\\bm{x}},1\\]. Then, g\u200b(\ud835\udc99)=(\ud835\udc7e\u2032\u200b\ud835\udc99\u2032)\u2299(\ud835\udc7d\u2032\u200b\ud835\udc99\u2032)\ud835\udc54\ud835\udc99direct-productsuperscript\ud835\udc7e\u2032superscript\ud835\udc99\u2032superscript\ud835\udc7d\u2032superscript\ud835\udc99\u2032g({\\\\bm{x}})=({\\\\bm{W}}^{\\\\prime}{\\\\bm{x}}^{\\\\prime})\\\\odot({\\\\bm{V}}^{\\\\prime}{\\\\bm{x}}^{\\\\prime}) in a bilinear layer with biases.\nIn [subsection 4.3]Comparing with ground truth: eigenvectors find computation \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), we study a toy classification task using a model trained with biases, illustrating how biases can be interpreted using the same framework.\nFor the rest of our experiments, we used models without biases for simplicity, as it did not harm performance. See [Appendix J]Appendix J Bilinear layers: a practical guide \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") for details.\n\n## 3 Analysis methods\nSince bilinear MLPs can be expressed in terms of a third-order tensor, \ud835\udc69\ud835\udc69{\\\\bm{\\\\mathsfit{B}}}, they can be flexibly analyzed using techniques from linear algebra, such as decompositions and transformations. The choice of analysis approach depends on what additional information, in terms of previously obtained input or output features, is provided.\n\n### 3.1 Input / output features \u2192\u2192\\\\rightarrow direct interactions\n\nIf we have already obtained meaningful sets of features for the bilinear MLP\u2019s inputs and outputs, for example, by training sparse autoencoders (SAEs), then we can directly study the interactions between these features. Using the feature dictionaries Dinsubscript\ud835\udc37inD\\_{\\\\text{in}} and Doutsubscript\ud835\udc37outD\\_{\\\\text{out}}, we can transform the bilinear tensor into the feature basis via b~a\u200bb\u200bc=\u2211i\u200bj\u200bkda\u200bi out\u200bbi\u200bj\u200bk\u200bdb\u200bj in\u200bdc\u200bk insubscript~\ud835\udc4f\ud835\udc4e\ud835\udc4f\ud835\udc50subscript\ud835\udc56\ud835\udc57\ud835\udc58subscriptsuperscript\ud835\udc51 out\ud835\udc4e\ud835\udc56subscript\ud835\udc4f\ud835\udc56\ud835\udc57\ud835\udc58subscriptsuperscript\ud835\udc51 in\ud835\udc4f\ud835\udc57subscriptsuperscript\ud835\udc51 in\ud835\udc50\ud835\udc58\\\\tilde{b}\\_{abc}=\\\\sum\\_{ijk}d^{\\\\text{\\ out}}\\_{ai}\\ b\\_{ijk}\\ d^{\\\\text{\\ in}}\\_{bj}\\ d^{\\\\text{\\ in}}\\_{ck}. For a given set of sparse input and output activations, only a small subset of the interactions (with a,b,c\ud835\udc4e\ud835\udc4f\ud835\udc50a,b,c all active) will contribute, and the statistics of these active interactions can be studied.\n\nIf, instead, we want to determine the output feature activations from the inputs, we would use the output SAE\u2019s encoder directions: b~a\u200bb\u200bc=\u2211i\u200bj\u200bkea\u200bi out\u200bbi\u200bj\u200bk\u200bdb\u200bj in\u200bdc\u200bk insubscript~\ud835\udc4f\ud835\udc4e\ud835\udc4f\ud835\udc50subscript\ud835\udc56\ud835\udc57\ud835\udc58subscriptsuperscript\ud835\udc52 out\ud835\udc4e\ud835\udc56subscript\ud835\udc4f\ud835\udc56\ud835\udc57\ud835\udc58subscriptsuperscript\ud835\udc51 in\ud835\udc4f\ud835\udc57subscriptsuperscript\ud835\udc51 in\ud835\udc50\ud835\udc58\\\\tilde{b}\\_{abc}=\\\\sum\\_{ijk}e^{\\\\text{\\ out}}\\_{ai}\\ b\\_{ijk}\\ d^{\\\\text{\\ in}}\\_{bj}\\ d^{\\\\text{\\ in}}\\_{ck}. In [section 5]Language: finding interactions between SAE features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), we use this approach to identify the top relevant interactions for features in a language model.\n\n### 3.2 Output features \u2192\u2192\\\\rightarrow eigendecomposition\n\n![Refer to caption]Figure 1: A) Two ways to represent a bilinear layer, via an elementwise product or the bilinear tensor. B) Diagram of the eigendecomposition technique. Multiplying the bilinear tensor by a desired output direction \ud835\udc96\ud835\udc96{\\\\bm{u}} produces an interaction matrix \ud835\udc78\ud835\udc78{\\\\bm{Q}} that can be decomposed into a set of eigenvectors \ud835\udc97\ud835\udc97{\\\\bm{v}} and associated eigenvalues \u03bbi.subscript\ud835\udf06\ud835\udc56\\\\lambda\\_{i}.\n\nGiven a set of meaningful features for the MLP outputs, we can identify the most important input directions that determine the output feature activations. The output features could come from a sparse autoencoder, from the unembedding layer (demonstrated in [section 4]Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")), or from a previous decompilation of the later layers.\n\nThe interaction matrix, \ud835\udc78=\ud835\udc96\u22c5out\ud835\udc69\ud835\udc78subscript\u22c5out\ud835\udc96\ud835\udc69{\\\\bm{Q}}={\\\\bm{u}}\\\\cdot\\_{\\\\text{out}}{\\\\bm{\\\\mathsfit{B}}} for a given output feature \ud835\udc96\ud835\udc96{\\\\bm{u}} can be decomposed into a set of eigenvectors ( [Figure 1]Figure 1 \u2023 3.2 Output features \u2192 eigendecomposition \u2023 3 Analysis methods \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")). Since \ud835\udc78\ud835\udc78{\\\\bm{Q}} can be considered symmetric without loss of generality (see [section 2]Background \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")), the spectral theorem gives\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc78=\u2211id\u03bbi\u200b\ud835\udc97i\u200b\ud835\udc97iT\ud835\udc78superscriptsubscript\ud835\udc56\ud835\udc51subscript\ud835\udf06\ud835\udc56subscript\ud835\udc97\ud835\udc56superscriptsubscript\ud835\udc97\ud835\udc56\ud835\udc47\\\\displaystyle{\\\\bm{Q}}=\\\\sum\\_{i}^{d}\\\\lambda\\_{i}\\ {\\\\bm{v}}\\_{i}{\\\\bm{v}}\\_{i}^{T} |  | (2) |\n\nwith a set of d\ud835\udc51d (rank of \ud835\udc7e\ud835\udc7e{\\\\bm{W}}, \ud835\udc7d\ud835\udc7d{\\\\bm{V}}) orthonormal eigenvectors \ud835\udc97isubscript\ud835\udc97\ud835\udc56{\\\\bm{v}}\\_{i} and real-valued eigenvalues \u03bbisubscript\ud835\udf06\ud835\udc56\\\\lambda\\_{i}. In the eigenvector basis, the output in the \ud835\udc96\ud835\udc96{\\\\bm{u}}-direction is\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc99T\u200b\ud835\udc78\u200b\ud835\udc99=\u2211id\u03bbi\u200b(\ud835\udc97iT\u200b\ud835\udc99)2\u23dfactivation for \u200b\ud835\udc97isuperscript\ud835\udc99\ud835\udc47\ud835\udc78\ud835\udc99superscriptsubscript\ud835\udc56\ud835\udc51subscript\u23dfsubscript\ud835\udf06\ud835\udc56superscriptsuperscriptsubscript\ud835\udc97\ud835\udc56\ud835\udc47\ud835\udc992activation for subscript\ud835\udc97\ud835\udc56\\\\displaystyle{\\\\bm{x}}^{T}{\\\\bm{Q}}{\\\\bm{x}}=\\\\sum\\_{i}^{d}\\\\underbrace{\\\\lambda\\_{i}\\ ({\\\\bm{v}}\\_{i}^{T}{\\\\bm{x}})^{2}}\\_{\\\\text{activation for }{\\\\bm{v}}\\_{i}} |  | (3) |\n\nwhere each term can be considered the activation for the eigenvector \ud835\udc97isubscript\ud835\udc97\ud835\udc56{\\\\bm{v}}\\_{i}. That is, the bilinear layer\u2019s outputs are quadratic in the eigenvector basis.\n\nThe eigenvector basis makes it easy to identify any low-rank structure relevant to \ud835\udc96\ud835\udc96{\\\\bm{u}}. The top eigenvectors by eigenvalue magnitude give the best low-rank approximation to the interaction matrix \ud835\udc78\ud835\udc78{\\\\bm{Q}} for a given rank. And since the eigenvectors diagonalize \ud835\udc78\ud835\udc78{\\\\bm{Q}}, there are no cross-interactions between eigenvectors that would complicate the interpretation of their contributions to \ud835\udc96\ud835\udc96{\\\\bm{u}}.\n\n### 3.3 No features \u2192\u2192\\\\rightarrow higher-order SVD\n\nIf we have no prior features available, it is still possible to determine the most important input and output directions of \ud835\udc69\ud835\udc69{\\\\bm{\\\\mathsfit{B}}} through a higher-order singular value decomposition (HOSVD). The simplest approach that takes advantage of the symmetry in \ud835\udc69\ud835\udc69{\\\\bm{\\\\mathsfit{B}}} is to reshape the tensor by flattening the two input dimensions to produce a dout\u00d7din2subscript\ud835\udc51outsuperscriptsubscript\ud835\udc51in2d\\_{\\\\text{out}}\\\\times d\\_{\\\\text{in}}^{2} shaped matrix and then do a standard singular value decomposition (SVD).\nSchematically, this gives\n\n|     |     |     |\n| --- | --- | --- |\n|  | \ud835\udc69out,in\u00d7in=\u2211i\u03c3i\u200b\ud835\udc96out(i)\u2297\ud835\udc92in\u00d7in(i)subscript\ud835\udc69outininsubscript\ud835\udc56tensor-productsubscript\ud835\udf0e\ud835\udc56subscriptsuperscript\ud835\udc96\ud835\udc56outsubscriptsuperscript\ud835\udc92\ud835\udc56inin\\\\displaystyle{\\\\bm{B}}\\_{\\\\text{out},\\\\text{in}\\\\times\\\\text{in}}=\\\\sum\\_{i}\\\\sigma\\_{i}\\ {\\\\bm{u}}^{(i)}\\_{\\\\text{out}}\\\\otimes{\\\\bm{q}}^{(i)}\\_{\\\\text{in}\\\\times\\\\text{in}} |  |\n\nwhere \ud835\udc92\ud835\udc92{\\\\bm{q}} can still be treated as an interaction matrix and further decomposed into eigenvectors as described above.\n\n## 4 Image classification: interpreting visual features\nWe consider models trained on the MNIST dataset of handwritten digits and the Fashion-MNIST dataset of clothing images. This is a semi-controlled environment that allows us to evaluate the interpretability of eigenvectors on a nontrivial task. This section analyses a shallow feedforward network (FFN) consisting of an embedding projection, a bilinear layer, and a classification head; see [Appendix F]Appendix F Experimental setups: a detailed description \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") for details.\n\nFirst, we qualitatively survey the eigenvectors and highlight the importance of regularization in feature quality. Second, we consider the consistency of eigenvectors across training runs and sizes. Third, we turn toward an algorithmic task on MNIST, where we compare the ground truth with the extracted eigenvectors. Lastly, we use these eigenvectors to construct adversarial examples, demonstrating their causal importance.\n\n### 4.1 Qualitative assessment: top eigenvectors appear interpretable\n\nThe eigenvectors are derived using the unembedding directions for the digits to obtain interaction matrices that are then decomposed following [subsection 3.2]Output features \u2192 eigendecomposition \u2023 3 Analysis methods \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"). We can visualize them by projecting them into the input space using the embedding weights. Because the activation of an eigenvector \ud835\udc97\ud835\udc97{\\\\bm{v}} with eigenvalue \u03bbisubscript\ud835\udf06\ud835\udc56\\\\lambda\\_{i} is quadratic in the input, \u03bb\u200b(\ud835\udc97T\u200b\ud835\udc99)2\ud835\udf06superscriptsuperscript\ud835\udc97\ud835\udc47\ud835\udc992\\\\lambda({\\\\bm{v}}^{T}{\\\\bm{x}})^{2}, the sign of the eigenvector \ud835\udc97\ud835\udc97{\\\\bm{v}} is arbitrary. The quadratic leads to XOR-like behavior where high overlap with an eigenvector\u2019s positive regions (blue) _or_ the negative regions (red)\u2014but not both\u2014leads to large activation magnitude, while the overall sign is determined by the eigenvalue ( [Figure 2]Figure 2 \u2023 4.1 Qualitative assessment: top eigenvectors appear interpretable \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") A).\n\nFor MNIST, the top positive eigenvector for each output class emphasizes a curve segment specific to its digit or otherwise resembles a prototypical class image ( [Figure 2]Figure 2 \u2023 4.1 Qualitative assessment: top eigenvectors appear interpretable \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") B). Top eigenvectors for FMNIST function as edge detectors, focusing on important edges for each clothing article, such as the leg gap for trousers. Edge detecting relies on the XOR-like behavior of the eigenvector\u2019s quadratic activation.\n\n![Refer to caption](a)\n\n![Refer to caption](b)\n\nFigure 2: A) Eigenvector activations are quadratic in the input and have a large magnitude if an input aligns with the positive (blue) regions _or_ the negative (red) regions, but not both. B) Top eigenvectors for single-layer MNIST and Fashion-MNIST models, revealing the most significant patterns learned for each class. In MNIST, eigenvectors represent components of the target class, while Fashion-MNIST eigenvectors function as edge detectors. Best viewed in color.![Refer to caption]Figure 3: The top four positive (top) and negative (bottom) eigenvectors for the digit 5, ordered from left to right by importance. Their eigenvalues are highlighted on the left. Only 20 positive and 20 negative eigenvalues (out of 512) are shown on the left images. Eigenvectors tend to represent semantically and spatially coherent structures.\n\nOnly a small fraction of eigenvalues have non-negligible magnitude ( [Figure 3]Figure 3 \u2023 4.1 Qualitative assessment: top eigenvectors appear interpretable \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")). Different top eigenvectors capture semantically different aspects of the class. For example, in the spectrum for digit 5, the first two positive eigenvectors detect the 5\u2019s horizontal top stroke but at different positions, similar to Gabor filters. The next two positive eigenvectors detect the bottom segment. The negative eigenvectors are somewhat less intuitive but generally correspond to features that indicate the digit is not a five, such as an upward curve in the top right quadrant instead of a horizontal stroke. In [Appendix C]Appendix C Explainability: a small case study with eigenvectors \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), we study this technique towards explaining an input prediction. Details of the training setup are outlined in [Appendix F]Appendix F Experimental setups: a detailed description \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") while similar plots for other digits can be found in [Appendix A]Appendix A Eigenspectra: showing eigenvectors across digits \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\").\n\nBecause we can extract features directly from model weights, we can identify overfitting in image models by visualizing the top eigenvectors and searching for spatial artifacts.\nFor instance, the eigenvectors of unregularized models focus on certain outlying pixels ( [Figure 4]Figure 4 \u2023 4.1 Qualitative assessment: top eigenvectors appear interpretable \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")).\nWe found adding dense Gaussian noise to the inputs (Bricken et al., [2023a]) to be an effective model regularizer, producing bilinear layers with more intuitively interpretable features.\nIncreasing the scale of the added noise results produces more digit-like eigenvectors and results in a lower-rank eigenvalue spectrum ( [Appendix D]Appendix D Sparsity: weight decay versus input noise \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")).\nThese results indicate that our technique can qualitatively help uncover overfitting or other unwanted behavior in models.\nFurthermore, it can be used to evaluate the effect of certain regularizers and augmentation techniques, as explored in [Appendix B]Appendix B Regularization & augmentation: ablations & observations \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\").\n\n![Refer to caption]Figure 4: Top eigenvector for models trained with varying Gaussian input noise. For reference, the norm of an average digit is about 0.3; adding noise with a norm of 1 results in a heavily distorted but discernible digit. Finally, the test accuracy for each model is shown at the top.\n\n### 4.2 Quantitative assessment: eigenvectors learn consistent patterns\n\nOne important question in machine learning is whether models learn the same structure across training runs (Li et al., [2016]) and across model sizes (Frankle & Carbin, [2019]). In this section, we study both and find that eigenvectors are similar across runs and behave similarly across model sizes. Furthermore, we characterize the impact of eigenvector truncation on classification accuracy.\n\n![Refer to caption](a)\n\n![Refer to caption](b)\n\nFigure 5: A) The similarity between ordered eigenvectors of the same model size averaged over all digits. This shows that equally sized models learn similar features. B) Resulting accuracy after only retaining the n\ud835\udc5bn most important eigenvalues (per digit). Both plots are averaged over 5 runs with the 90% confidence interval shown.\n\nBoth the ordering and contents of top eigenvectors are very consistent across runs. The cosine similarities of the top eigenvector are between 0.8 and 0.9 depending on size ( [Figure 5]Figure 5 \u2023 4.2 Quantitative assessment: eigenvectors learn consistent patterns \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")). Generally, increasing model sizes results in more similar top eigenvectors. Further, truncating all but the top few eigenvectors across model sizes yields very similar classification accuracy. This implies that, beyond being consistently similar, these eigenvectors have a comparable impact on classification. In [Appendix E]Appendix E Truncation & similarity: a comparison across sizes \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), we further study the similarity of eigenvectors between sizes and show that retaining only a handful of eigenvectors results in minimal accuracy drops (0.01%).\n\n### 4.3 Comparing with ground truth: eigenvectors find computation\n\nTo perform a ground-truth assessment of eigenvectors, we consider a task from a mechanistic interpretability challenge, where the goal was to determine the labeling function (training objective) from a model Casper ( [2023])). Specifically, the challenge required reverse-engineering a binary image classifier trained on MNIST, where the label is based on the similarity to a specific target image. The model predicted \u2018True\u2019 if the input has high cosine similarity to this target or high similarity to the complement of that target 111By complement, we mean one minus the grayscale value of the target. and \u2018False\u2019 otherwise. This target is chosen as an instance of a \u20181\u2019.\n\nPrevious work (Stefan Heimersheim, [2023]) reverse-engineered this through a combination of methods, all requiring careful consideration and consisting of non-trivial insights. Furthermore, the methods required knowledge of the original dataset and a hint of what to look for. While our method does not work on the original architecture, we show that we do not require such knowledge and can extract the original algorithm from the weights alone.\n\nWe perform our decomposition on the output difference (True\u2212FalseTrueFalse\\\\text{True}-\\\\text{False}) since this is the only meaningful direction before the softmax. This consistently reveals one high positive eigenvalue; the rest are (close to) zero ( [Figure 6]Figure 6 \u2023 4.3 Comparing with ground truth: eigenvectors find computation \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")). The most positive eigenvector is sufficient for completing the task; it computes the exact similarity we want. If the input is close to the target, the blue region will match; if it is close to the complement, the red will match; if both are active simultaneously, they will somewhat cancel out. The remaining two eigenvectors are separated as they seem to overfit the data slightly; the negative eigenvector seems to penalize diagonal structures.\n\nContrary to other models, this task greatly benefited from including biases. This arises from the fact that the model must not only compute similarity but also make its binary decision based on a learned threshold. If no bias is provided, the model attempts to find quadratic invariances in the data, which don\u2019t generalize well, especially given the important but sensitive role of this threshold in classification. Here, the bias (shown in the bottom corner of [Figure 6]Figure 6 \u2023 4.3 Comparing with ground truth: eigenvectors find computation \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")) represents a negative contribution. The role of biases in bilinear layers is further discussed in [Appendix J]Appendix J Bilinear layers: a practical guide \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\").\n\n![Refer to caption]Figure 6: Eigenvalues and eigenvectors of a model trained to classify based on similarity to a target. The most important eigenvector (top-left) is a generalizing solution; the other features sharpen the decision boundary based on the training dataset. The latter features disappear with increased regularization. On the right, the target digit is shown along with the learned bias from the model.\n\n### 4.4 Adversarial masks: general attacks from weights\n\nTo demonstrate the utility of weight-based decomposition, we construct adversarial masks for the MNIST model without training or any forward passes. These masks are added to the input, leading to misclassification as the adversarial digit. The effect is similar to steering, but the intervention is at the input instead of the model internals.\n\nWe construct the adversarial masks from the eigenvectors for specific digits. One complication is that the eigenvectors can have nontrivial cosine similarity with each other, so an input along a single eigenvector direction could potentially activate multiple eigenvectors across different digits. To help avoid this, we construct the mask \ud835\udc8eisubscript\ud835\udc8e\ud835\udc56{\\\\bm{m}}\\_{i} for a given eigenvector \ud835\udc97i:subscript\ud835\udc97:\ud835\udc56absent{\\\\bm{v}}\\_{i:} as the corresponding row of the pseudoinverse (\ud835\udc7d+)i:subscriptsuperscript\ud835\udc7d:\ud835\udc56absent({\\\\bm{V}}^{+})\\_{i:} for a set of eigenvectors \ud835\udc7d\ud835\udc7d{\\\\bm{V}} (specifically the top 10 positive). In an analogy to key-value pairs, the pseudoinverses effectively act like keys that activate with more specificity than the eigenvectors themselves, since \ud835\udc97j:\u22c5(\ud835\udc7d+)i:=\u03b4i\u200bj\u22c5subscript\ud835\udc97:\ud835\udc57absentsubscriptsuperscript\ud835\udc7d:\ud835\udc56absentsubscript\ud835\udeff\ud835\udc56\ud835\udc57{\\\\bm{v}}\\_{j:}\\\\cdot({\\\\bm{V}}^{+})\\_{i:}=\\\\delta\\_{ij}.\n\n![Refer to caption]Figure 7: Examples of an adversarial mask constructed from the given eigenvector along for models trained A) with Gaussian noise regularization (std 0.15) and B) without regularization. The average accuracy and the rate of misclassification as the adversarial digit show stronger effects for adversarial masks than random baselines. In B), the mask is only applied to the outer edge of pixels that are active on less than 1% of samples.\n\nWe construct an adversarial mask from an eigenvector for the digit 3 ( [Figure 7]Figure 7 \u2023 4.4 Adversarial masks: general attacks from weights \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") A). Even though the original eigenvector resembles the digit, the pseudoinverse-based mask does not (see [Appendix K]Appendix K Adversarial masks: additional figure \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") for more examples). The accuracy, averaged over masks from the top three eigenvectors, drops significantly more than the baseline of randomly permuting the mask, despite regularizing the model during training using dense Gaussian noise with a standard deviation of 0.15. The corresponding rise in misclassification indicates effective steering towards the adversarial digit.\n\nIlyas et al. ( [2019]) observe that adversarial examples can arise from predictive but non-robust features of the data, perhaps explaining why they often transfer to other models. Our construction can be seen as a toy realization of this phenomenon because the masks correspond to directions that are predictive of robust features but are not robust. We construct masks that only exploit the patterns of over-fitting found on the outer edge of the image for a model trained without regularization ( [Figure 7]Figure 7 \u2023 4.4 Adversarial masks: general attacks from weights \u2023 4 Image classification: interpreting visual features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") B). Since we can find this over-fitting pattern from the eigenvectors, in a general way, we can construct the mask by hand instead of optimizing it.\n\n## 5 Language: finding interactions between SAE features\nEach output of a bilinear layer is described by weighted pairwise interactions between their input features. Previous sections show that this can be successfully leveraged to trace between a bilinear layer\u2019s inputs and outputs. Here, we turn towards tracing between latent feature dictionaries obtained by training sparse autoencoders (SAEs) on the MLP inputs or outputs for a 6-layer bilinear transformer trained on TinyStories (Eldan & Li, [2023]) (see training details in [Appendix F]Appendix F Experimental setups: a detailed description \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")).\n\n### 5.1 Sentiment negation circuit\n\nWe focus on using the eigendecomposition to identify low-rank, single-layer circuits in a bilinear transformer. We cherry-pick and discuss one such circuit that takes input sentiment features and semantically negates them. Unlike previous work on sparse feature circuits (Marks et al., [2024]) that relies on gradient-based linear approximations, we identify nonlinear interactions grounded in the layer\u2019s weights that contribute to the circuit\u2019s computation.\n\nThe sentiment negation circuit computes the activation of two opposing output features in layer 4 (index 1882 and 1179) that form a fully linear subspace. The cosine similarity of their decoder vectors is -0.975. Based on their top activations, the output features activate on negation tokens (\u201cnot\u201d, \u201cnever\u201d, \u201cwasn\u2019t\u201d) and boosts either positive sentiment tokens (\u201cgood\u201d, \u201csafe\u201d, \u201cnice\u201d) or negative sentiment tokens (\u201cbad\u201d, \u201churt\u201d, \u201csad\u201d), so we denote the two features as the _not-good_ and the _not-bad_ features respectively. See [Appendix M]Appendix M Input features of the negation feature \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") for the top activations of all features mentioned.\n\n![Refer to caption]Figure 8: The sentiment negation circuit for computing the not-good and not-bad output features. A) The interaction submatrix containing the top 15 interactions. B) The top interacting features projected onto the top positive and negative eigenvectors using cosine similarity, with the symbols for different clusters matching the labels in A. Clusters coincide with the projection of meaningful directions such as the difference in \u201cbad\u201d vs \u201cgood\u201d token unembeddings and the MLP\u2019s input activations for input tokens \u201c\\[BOS\\] not\u201d. C) The not-good feature activation compared to its approximation by the top two eigenvectors.\n\nFocusing on the not-good feature, the top interactions for computing its activations resemble an AND-gate ( [Figure 8]Figure 8 \u2023 5.1 Sentiment negation circuit \u2023 5 Language: finding interactions between SAE features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") A). Input features that boost negative sentiment tokens (blue squares) have strong positive interactions with negation token features (green triangles), but both have negligible self-interactions. So both types of input features are needed to activate the not-good feature and flip the boosting from negative to positive sentiment. The one positive sentiment feature (orange downward triangle) has interactions with the opposite sign. The interactions shown are significantly larger than the typical cross-interactions with a standard deviation of 0.004 ( [Figure 24]Figure 24 \u2023 Appendix L Language: further details for feature circuits \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\").\n\nThe eigenvalue spectrum has one large positive (0.62) and one large negative value (-0.66) as outliers ( [Figure 24]Figure 24 \u2023 Appendix L Language: further details for feature circuits \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")). We can see the underlying geometry of the circuit computation by projecting the input features onto these eigenvectors ( [Figure 8]Figure 8 \u2023 5.1 Sentiment negation circuit \u2023 5 Language: finding interactions between SAE features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\")). By itself, a positive sentiment feature (blue squares) would equally activate both eigenvectors and cancel out, but if a negation feature is also present, the positive eigenvector is strongly activated. The activation based on only these two eigenvectors, following [Equation 3]Output features \u2192 eigendecomposition \u2023 3 Analysis methods \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"), has a good correlation (0.66) with the activation of the not-good feature, particularly at large activation values (0.76), conditioned on the not-good feature being active.\n\n![Refer to caption]Figure 9: Activation correlations with low-rank approximations. A) Average correlation over output features computed over all inputs before the SAE\u2019s non-linearity (TopK) is applied or only on inputs where the feature is active. B) The distribution of active-only correlations for approximations using the top two eigenvectors. C) Scatter plots for a random set of nine output features. Approximations use the top two eigenvectors.\n\n### 5.2 Low-rank approximations of output feature activations\n\nThe top eigenvectors can be used to approximate the activations of the SAE output features using a truncated form of [Equation 3]Output features \u2192 eigendecomposition \u2023 3 Analysis methods \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\"). To focus on the more meaningful tail of large activations, we compute the approximation\u2019s correlation conditioned on the output feature being active. For comparison, we also compute the approximation\u2019s correlation with the output feature activations before the SAE\u2019s nonlinearity (TopK) is applied. These correlations are generally lower because they are dominated by inputs with low activations.\n\nWe find that features are surprisingly low-rank, with the average active-only correlation starting at 0.67 for approximations by a single eigenvector and rising steadily with additional eigenvectors ( [Figure 9]Figure 9 \u2023 5.1 Sentiment negation circuit \u2023 5 Language: finding interactions between SAE features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") A). Most features (69%) have a high correlation (>0.75absent0.75>0.75) even when approximated by just two eigenvectors ( [Figure 9]Figure 9 \u2023 5.1 Sentiment negation circuit \u2023 5 Language: finding interactions between SAE features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") B). Scatter plots for a random sample of features show that the low-rank approximation often captures the tail dependence well ( [Figure 9]Figure 9 \u2023 5.1 Sentiment negation circuit \u2023 5 Language: finding interactions between SAE features \u2023 Bilinear MLPs enable weight-based mechanistic interpretability\") C). Overall these results suggest that the interactions that produce large output activations are low-rank, making their interpretability potentially easier.\n\n## 6 Discussion\nSummary.\nThis paper introduces a novel approach to weight-based interpretability that leverages the close-to-linear structure of bilinear layers. A key result is that, using an eigenvector decomposition, we can identify the most important input directions that explain the layer\u2019s output along a given direction. The top eigenvectors are often interpretable, for example for MNIST they function as edge-detectors for strokes specific to each digit. The lack of element-wise nonlinearity in bilinear MLPs allows us to transform their weights into interaction matrices that connect input to output features and then extract the low-rank structure. In language models, we find that many SAE output features are well-approximated by low-rank interaction matrices, particularly at large activations. We highlighted one example of an extracted low-rank circuit that flips the sentiment of the next token if the current token is a negation (\u201cnot\u201d). The behavior of this circuit can be easily understood in terms of the top eigenvectors, whereas finding a similar circuit in conventional MLPs would be more difficult. Overall, our results demonstrate that bilinear MLPs offer intrinsic interpretability that can aid in feature and circuit extraction.\n\nImplications.\nThe main implication of our work is that weight-based interpretability is viable, even for large language models. Bilinear MLPs can replace conventional MLPs in transformers with minimal cost while offering intrinsic interpretability due to their lack of element-wise nonlinearities and close-to-linear structure.\nCurrent circuit analysis techniques rely on gradient-based approximations (Syed et al., [2023]; Marks et al., [2024]) or use transcoders (Dunefsky et al., [2024]) to approximate MLPs. Both approaches depend on an input dataset, potentially leading to poor performance out-of-distribution, and they may not fully capture the nonlinear computations in MLPs. In contrast, bilinear MLPs can be transformed into explicit feature interaction matrices and decomposed in a way fully equivalent to the original computations. Extracting interactions more directly from the weights should lead to better, more robust circuits. Weight-based interpretability may also offer better safety guarantees since we could plausibly prove bounds on a layer\u2019s outputs based by quantifying the residual weights not captured in a circuit\u2019s interactions.\n\nLimitations. Application of our methods typically relies on having a set of meaningful output directions available. In shallow models, the unembedding directions can be used, but in deeper models, we rely on features derived from sparse autoencoders that are dependent on an input dataset. Another limitation is that, although the eigenvalue spectra are often low-rank and the top eigenvectors appear interpretable, there are no guarantees the eigenvectors will be monosemantic. We expect that for high-rank spectra, the orthogonality between eigenvectors may limit their interpretability. Applying sparse dictionary learning approaches to decompose the bilinear tensor may be a promising way to relax the orthogonality constraint and find interpretable features from model weights.</Paper>\n\n<References>\n<Candidate>Candidate [0]:\nThe lottery ticket hypothesis: Finding sparse, trainable neural networks, 2019.\n\n<Abstract>Abstract: Neural network pruning techniques can reduce the parameter counts of trained\nnetworks by over 90%, decreasing storage requirements and improving\ncomputational performance of inference without compromising accuracy. However,\ncontemporary experience is that the sparse architectures produced by pruning\nare difficult to train from the start, which would similarly improve training\nperformance.\n  We find that a standard pruning technique naturally uncovers subnetworks\nwhose initializations made them capable of training effectively. Based on these\nresults, we articulate the \"lottery ticket hypothesis:\" dense,\nrandomly-initialized, feed-forward networks contain subnetworks (\"winning\ntickets\") that - when trained in isolation - reach test accuracy comparable to\nthe original network in a similar number of iterations. The winning tickets we\nfind have won the initialization lottery: their connections have initial\nweights that make training particularly effective.\n  We present an algorithm to identify winning tickets and a series of\nexperiments that support the lottery ticket hypothesis and the importance of\nthese fortuitous initializations. We consistently find winning tickets that are\nless than 10-20% of the size of several fully-connected and convolutional\nfeed-forward architectures for MNIST and CIFAR10. Above this size, the winning\ntickets that we find learn faster than the original network and reach higher\ntest accuracy.</Abstract><Content>\n## 1 Introduction\nTechniques for eliminating unnecessary weights from neural networks\n( _pruning_) (LeCun et al., [1990]); Hassibi & Stork, [1993]); Han et al., [2015]); Li et al., [2016]))\ncan reduce parameter-counts by more than 90% without harming accuracy. Doing so\ndecreases the size (Han et al., [2015]); Hinton et al., [2015])) or energy consumption (Yang et al., [2017]); Molchanov et al., [2016]); Luo et al., [2017]))\nof the trained networks, making inference more efficient.\nHowever, if a network can be reduced in size, why do we not train this smaller architecture instead in the interest of making training more efficient as well?\nContemporary experience is that the architectures uncovered by pruning are harder to train from the start, reaching lower\naccuracy than the original networks.111\u201cTraining a pruned model from scratch performs worse than retraining a pruned model, which may\nindicate the difficulty of training a network with a small capacity.\u201d (Li et al., [2016])) \u201cDuring retraining, it is better to retain\nthe weights from the initial training phase for the connections\nthat survived pruning than it is to re-initialize the pruned layers\u2026gradient descent is able to find a good solution when the network is initially trained,\nbut not after re-initializing some layers and retraining them.\u201d (Han et al., [2015]))\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 1: The iteration at which early-stopping would occur (left)\nand the test accuracy at that iteration (right) of the Lenet architecture for MNIST and the Conv-2, Conv-4, and Conv-6\narchitectures for CIFAR10 (see Figure [2]Figure 2 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")) when trained starting at various sizes. Dashed lines are randomly sampled sparse networks\n(average of ten trials).\nSolid lines are winning tickets (average of five trials).\n\nConsider an example. In Figure [1]Figure 1 \u2023 1 Introduction \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), we randomly sample and train subnetworks\nfrom a fully-connected network for MNIST and convolutional networks for CIFAR10. Random sampling models the effect\nof the unstructured pruning used by LeCun et al. ( [1990])) and Han et al. ( [2015])). Across various levels of sparsity,\ndashed lines trace the iteration of minimum validation loss222As a proxy for the speed\nat which a network learns, we use\nthe iteration at which an early-stopping criterion would end training. The\nparticular early-stopping\ncriterion we employ\nthroughout this paper\nis the iteration of minimum validation loss during training. See Appendix [C]Appendix C Early Stopping Criterion \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") for more details on this choice.\nand the test accuracy at that iteration.\nThe sparser the network, the slower the learning and the lower the eventual test accuracy.\n\nIn this paper, we show that there consistently exist smaller subnetworks\nthat train from the start and learn at least as fast as their larger counterparts while reaching similar test accuracy.\nSolid lines in Figure [1]Figure 1 \u2023 1 Introduction \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") show networks that we find.\nBased on these results, we state _the lottery ticket hypothesis_.\n\n###### The Lottery Ticket Hypothesis.\n\nA randomly-initialized, dense neural network contains\na subnetwork that is initialized such that\u2014when trained in isolation\u2014it can match the test accuracy of the original network\nafter training for at most the same number of iterations.\n\nMore formally, consider a dense feed-forward neural network f\u200b(x;\u03b8)\ud835\udc53\ud835\udc65\ud835\udf03f(x;\\\\theta) with initial parameters \u03b8=\u03b80\u223c\ud835\udc9f\u03b8\ud835\udf03subscript\ud835\udf030similar-tosubscript\ud835\udc9f\ud835\udf03\\\\theta=\\\\theta\\_{0}\\\\sim\\\\mathcal{D}\\_{\\\\theta}.\nWhen optimizing with stochastic gradient descent (SGD) on a training set, f\ud835\udc53f reaches minimum validation\nloss l\ud835\udc59l at iteration j\ud835\udc57j with test accuracy a\ud835\udc4ea . In addition, consider training f\u200b(x;m\u2299\u03b8)\ud835\udc53\ud835\udc65direct-product\ud835\udc5a\ud835\udf03f(x;m\\\\odot\\\\theta) with a mask m\u2208{0,1}\\|\u03b8\\|\ud835\udc5asuperscript01\ud835\udf03m\\\\in\\\\{0,1\\\\}^{\\|\\\\theta\\|} on its parameters such that its\ninitialization is m\u2299\u03b80direct-product\ud835\udc5asubscript\ud835\udf030m\\\\odot\\\\theta\\_{0}. When optimizing with SGD on the same training set (with m\ud835\udc5am fixed),\nf\ud835\udc53f reaches minimum validation loss l\u2032superscript\ud835\udc59\u2032l^{\\\\prime} at iteration j\u2032superscript\ud835\udc57\u2032j^{\\\\prime} with test\naccuracy a\u2032superscript\ud835\udc4e\u2032a^{\\\\prime}. The lottery ticket hypothesis predicts that \u2203m\ud835\udc5a\\\\exists~{}m for which j\u2032\u2264jsuperscript\ud835\udc57\u2032\ud835\udc57j^{\\\\prime}\\\\leq j ( _commensurate training time_),\na\u2032\u2265asuperscript\ud835\udc4e\u2032\ud835\udc4ea^{\\\\prime}\\\\geq a\n( _commensurate accuracy_), and\n\u2225m\u22250\u226a\\|\u03b8\\|much-less-thansubscriptdelimited-\u2225\u2225\ud835\udc5a0\ud835\udf03\\\\lVert m\\\\rVert\\_{0}\\\\ll\\|\\\\theta\\| ( _fewer parameters_).\n\nWe find that a standard pruning technique automatically uncovers such trainable subnetworks\nfrom fully-connected and convolutional feed-forward networks.\nWe designate these trainable subnetworks, f\u200b(x;m\u2299\u03b80)\ud835\udc53\ud835\udc65direct-product\ud835\udc5asubscript\ud835\udf030f(x;m\\\\odot\\\\theta\\_{0}), _winning tickets_, since those that we find have won the initialization lottery\nwith a combination of weights and connections capable of learning.\nWhen their parameters\nare randomly reinitialized (f\u200b(x;m\u2299\u03b80\u2032)\ud835\udc53\ud835\udc65direct-product\ud835\udc5asubscriptsuperscript\ud835\udf03\u20320f(x;m\\\\odot\\\\theta^{\\\\prime}\\_{0}) where \u03b80\u2032\u223c\ud835\udc9f\u03b8similar-tosubscriptsuperscript\ud835\udf03\u20320subscript\ud835\udc9f\ud835\udf03\\\\theta^{\\\\prime}\\_{0}\\\\sim\\\\mathcal{D}\\_{\\\\theta}), our winning tickets no longer match the performance\nof the original network, offering evidence that these smaller networks do not train effectively unless they are appropriately initialized.\n\nIdentifying winning tickets. We\nidentify a winning ticket by training a network and pruning its smallest-magnitude weights.\nThe remaining, unpruned connections constitute\nthe architecture of the winning ticket. Unique to our work, each unpruned connection\u2019s value is then reset to\nits initialization from original network _before_ it was trained.\nThis forms our central experiment:\n\n1. 1.\n\n\nRandomly initialize a neural network f\u200b(x;\u03b80)\ud835\udc53\ud835\udc65subscript\ud835\udf030f(x;\\\\theta\\_{0}) (where \u03b80\u223c\ud835\udc9f\u03b8similar-tosubscript\ud835\udf030subscript\ud835\udc9f\ud835\udf03\\\\theta\\_{0}\\\\sim\\\\mathcal{D}\\_{\\\\theta}).\n\n2. 2.\n\n\nTrain the network for j\ud835\udc57j iterations, arriving at parameters \u03b8jsubscript\ud835\udf03\ud835\udc57\\\\theta\\_{j}.\n\n3. 3.\n\n\nPrune p%percent\ud835\udc5dp\\\\% of the parameters in \u03b8jsubscript\ud835\udf03\ud835\udc57\\\\theta\\_{j}, creating a mask m\ud835\udc5am.\n\n4. 4.\n\n\nReset the remaining parameters to their values in \u03b80subscript\ud835\udf030\\\\theta\\_{0}, creating the winning ticket f\u200b(x;m\u2299\u03b80)\ud835\udc53\ud835\udc65direct-product\ud835\udc5asubscript\ud835\udf030f(x;m\\\\odot\\\\theta\\_{0}).\n\n\nAs described, this pruning approach is _one-shot_: the network is trained\nonce, p%percent\ud835\udc5dp\\\\% of weights are pruned, and the surviving weights are reset. However, in this paper, we focus on _iterative pruning_, which repeatedly\ntrains, prunes, and resets the network over n\ud835\udc5bn rounds; each round prunes p1n%percentsuperscript\ud835\udc5d1\ud835\udc5bp^{\\\\frac{1}{n}}\\\\% of the weights that survive the previous round.\nOur results show that iterative pruning finds winning tickets that match the accuracy of the original network at smaller sizes than does one-shot pruning.\n\nResults. We identify winning tickets in a fully-connected\narchitecture for MNIST and convolutional architectures for CIFAR10 across several optimization strategies (SGD, momentum, and Adam) with\ntechniques like dropout, weight decay, batchnorm, and residual connections. We use an unstructured pruning technique, so these winning tickets are sparse.\nIn deeper networks, our pruning-based strategy for finding winning tickets is sensitive to\nthe learning rate: it requires warmup to find winning tickets at higher learning rates.\nThe winning tickets we find are 10-20% (or less) of the size of the original network ( _smaller size_).\nDown to that size,\nthey meet or exceed the original network\u2019s test accuracy ( _commensurate accuracy_) in at most the same number of iterations ( _commensurate training time_).\nWhen randomly reinitialized, winning tickets\nperform far worse, meaning structure alone cannot explain a winning ticket\u2019s success.\n\nThe Lottery Ticket Conjecture. Returning to our motivating question, we\nextend our hypothesis into an untested conjecture that\nSGD seeks out and trains a subset of well-initialized weights.\nDense, randomly-initialized networks are easier to train than the sparse networks that result from pruning because\nthere are more possible subnetworks from which training might recover a winning ticket.\n\nContributions.\n\n- \u2022\n\n\nWe demonstrate that pruning uncovers trainable subnetworks that reach test accuracy comparable to the original\nnetworks from which they derived in a comparable number of iterations.\n\n- \u2022\n\n\nWe show that pruning finds winning tickets that learn faster than the original network while reaching higher test accuracy and generalizing better.\n\n- \u2022\n\n\nWe propose the _lottery ticket hypothesis_ as a new perspective on the composition of neural networks to explain these findings.\n\n\nImplications. In this paper, we empirically study the lottery ticket hypothesis. Now that we have demonstrated the existence of winning tickets, we hope to exploit this knowledge to:\n\nImprove training performance. Since winning tickets can be trained from the start in isolation, a hope is that we can design training schemes that search for winning tickets and prune as early as possible.\n\nDesign better networks. Winning tickets reveal combinations of sparse architectures and initializations that are particularly adept at learning. We can take\ninspiration from winning tickets to design new architectures and initialization schemes with the same properties that are conducive to learning. We may even be able to transfer\nwinning tickets discovered for one task to many others.\n\nImprove our theoretical understanding of neural networks. We can study why randomly-initialized feed-forward\nnetworks seem to contain winning tickets and potential implications for theoretical study of\noptimization (Du et al., [2019])) and generalization (Zhou et al., [2018]); Arora et al., [2018])).\n\n## 2 Winning Tickets in Fully-Connected Networks\n| Network | Lenet | Conv-2 | Conv-4 | Conv-6 | Resnet-18 | VGG-19 |\n| --- | --- | --- | --- | --- | --- | --- |\n| Convolutions |  | 64, 64, pool | 64, 64, pool128, 128, pool | 64, 64, pool128, 128, pool256, 256, pool | 16, 3x\\[16, 16\\]3x\\[32, 32\\]3x\\[64, 64\\] | 2x64 pool 2x128pool, 4x256, pool4x512, pool, 4x512 |\n| --- | --- | --- | --- | --- | --- | --- |\n| FC Layers | 300, 100, 10 | 256, 256, 10 | 256, 256, 10 | 256, 256, 10 | avg-pool, 10 | avg-pool, 10 |\n| All/Conv Weights | 266K | 4.3M / 38K | 2.4M / 260K | 1.7M / 1.1M | 274K / 270K | 20.0M |\n| Iterations/Batch | 50K / 60 | 20K / 60 | 25K / 60 | 30K / 60 | 30K / 128 | 112K / 64 |\n| Optimizer | Adam 1.2e-3 | Adam 2e-4 | Adam 3e-4 | Adam 3e-4 | \u2190\u2190\\\\leftarrow SGD 0.1-0.01-0.001 Momentum 0.9 \u2192\u2192\\\\rightarrow |\n| Pruning Rate | fc20% | conv10% fc20% | conv10% fc20% | conv15% fc20% | conv20% fc0% | conv20% fc0% |\n\nFigure 2: Architectures tested in this paper.\nConvolutions are 3x3. Lenet is from LeCun et al. ( [1998])). Conv-2/4/6 are variants of VGG (Simonyan & Zisserman, [2014])). Resnet-18 is from He et al. ( [2016])). VGG-19 for CIFAR10 is\nadapted from Liu et al. ( [2019])). Initializations are\nGaussian Glorot (Glorot & Bengio, [2010])). Brackets denote residual connections around layers.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 3: Test accuracy on Lenet (iterative pruning) as training proceeds.\nEach curve is the average of five trials. Labels are Pmsubscript\ud835\udc43\ud835\udc5aP\\_{m}\u2014the fraction of weights remaining in the network\nafter pruning. Error bars are the minimum\nand maximum of any trial.\n\nIn this Section, we assess the lottery ticket hypothesis as applied to fully-connected networks trained on MNIST.\nWe use the Lenet-300-100 architecture (LeCun et al., [1998])) as described in Figure [2]Figure 2 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\").\nWe follow the outline from Section 1: after randomly initializing and training a network,\nwe prune the network and reset the remaining\nconnections to their original initializations.\nWe use a simple layer-wise pruning heuristic: remove a percentage of the weights with the lowest magnitudes within each layer (as in Han et al. ( [2015]))). Connections\nto outputs are pruned at half of the rate of the rest of the network. We explore other hyperparameters in\nAppendix [G]Appendix G Hyperparameter Exploration for Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), including learning rates, optimization strategies (SGD, momentum), initialization schemes, and\nnetwork sizes.\n\nNotation.Pm=\u2225m\u22250\\|\u03b8\\|subscript\ud835\udc43\ud835\udc5asubscriptdelimited-\u2225\u2225\ud835\udc5a0\ud835\udf03P\\_{m}=\\\\frac{\\\\lVert m\\\\rVert\\_{0}}{\\|\\\\theta\\|} is the sparsity of mask m\ud835\udc5am, e.g.,\nPm=25%subscript\ud835\udc43\ud835\udc5apercent25P\\_{m}=25\\\\% when 75% of weights are pruned.\n\nIterative pruning.\nThe winning tickets we find learn faster than the original network.\nFigure\n[3]Figure 3 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") plots the average test accuracy when training winning tickets\niteratively pruned to various\nextents. Error bars are the minimum and maximum of five runs.\nFor the first pruning rounds, networks learn faster and reach higher test accuracy the more they are pruned\n(left graph in Figure [3]Figure 3 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")).\nA winning ticket comprising 51.3% of the weights from the original network (i.e., Pm=51.3%subscript\ud835\udc43\ud835\udc5apercent51.3P\\_{m}=51.3\\\\%) reaches higher test accuracy faster than the original network but slower\nthan when Pm=21.1%subscript\ud835\udc43\ud835\udc5apercent21.1P\\_{m}=21.1\\\\%.\nWhen Pm<21.1%subscript\ud835\udc43\ud835\udc5apercent21.1P\\_{m}<21.1\\\\%, learning slows (middle graph). When Pm=3.6%subscript\ud835\udc43\ud835\udc5apercent3.6P\\_{m}=3.6\\\\%, a winning ticket regresses to the performance of the original network. A similar\npattern repeats throughout this paper.\n\nFigure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") a summarizes this behavior for all pruning levels when iteratively pruning by 20% per iteration (blue).\nOn the left is the iteration at which each network reaches minimum validation loss (i.e., when the early-stopping criterion would halt training)\nin relation to the percent of weights remaining after pruning; in the middle is test accuracy at that iteration. We use the iteration at which\nthe early-stopping criterion is met as a proxy for how quickly the network learns.\n\nThe winning tickets learn faster as Pmsubscript\ud835\udc43\ud835\udc5aP\\_{m} decreases from 100% to 21%, at which point\nearly-stopping occurs 38%percent3838\\\\% earlier than for the original network. Further pruning causes\nlearning to slow, returning to the early-stopping performance of the original network when Pm=3.6%subscript\ud835\udc43\ud835\udc5apercent3.6P\\_{m}=3.6\\\\%.\nTest accuracy increases with pruning, improving by more than 0.3 percentage points when Pm=13.5%subscript\ud835\udc43\ud835\udc5apercent13.5P\\_{m}=13.5\\\\%; after this point, accuracy decreases, returning to the level of the original network when Pm=3.6%subscript\ud835\udc43\ud835\udc5apercent3.6P\\_{m}=3.6\\\\%.\n\nAt early stopping, training accuracy (Figure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") a, right) increases with pruning in a similar pattern to test accuracy, seemingly implying that winning tickets\noptimize more effectively but do not generalize better. However, at iteration 50,000 (Figure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") b),\niteratively-pruned winning tickets still see a test accuracy improvement of up to 0.35 percentage points in spite of the fact that\ntraining accuracy reaches 100% for nearly all networks (Appendix [D]Appendix D Training Accuracy for Lottery Ticket Experiments \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), Figure [12]Figure 12 \u2023 Appendix D Training Accuracy for Lottery Ticket Experiments \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")). This means that the gap between\ntraining accuracy and test accuracy is smaller for winning tickets, pointing to improved generalization.\n\nRandom reinitialization. To measure the importance of a winning ticket\u2019s\ninitialization, we retain the structure of a winning ticket (i.e., the mask m\ud835\udc5am) but randomly sample a new initialization \u03b80\u2032\u223c\ud835\udc9f\u03b8similar-tosubscriptsuperscript\ud835\udf03\u20320subscript\ud835\udc9f\ud835\udf03\\\\theta^{\\\\prime}\\_{0}\\\\sim\\\\mathcal{D}\\_{\\\\theta}.\nWe randomly reinitialize each winning ticket three times, making 15 total per point in Figure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"). We find\nthat initialization is crucial for the efficacy of a winning ticket.\nThe right graph in Figure [3]Figure 3 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") shows this experiment for iterative pruning.\nIn addition to the original network and winning tickets at Pm=51%subscript\ud835\udc43\ud835\udc5apercent51P\\_{m}=51\\\\% and 21%percent2121\\\\% are the random reinitialization experiments.\nWhere the winning tickets learn faster as they are pruned, they learn progressively slower when randomly reinitialized.\n\nThe broader results of this experiment\nare orange line\nin Figure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") a.\nUnlike winning tickets, the reinitialized networks learn increasingly slower than the original network and lose test accuracy after little pruning.\nThe average\nreinitialized iterative winning ticket\u2019s test accuracy drops off from the original accuracy when Pm=21.1%subscript\ud835\udc43\ud835\udc5apercent21.1P\\_{m}=21.1\\\\%, compared to\n2.9% for the winning ticket. When Pm=21%subscript\ud835\udc43\ud835\udc5apercent21P\\_{m}=21\\\\%, the winning ticket reaches minimum validation loss\n2.51x faster than when reinitialized and is half a percentage point more accurate. All networks reach 100% training\naccuracy for Pm\u22655%subscript\ud835\udc43\ud835\udc5apercent5P\\_{m}\\\\geq 5\\\\%; Figure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") b therefore shows that the winning tickets generalize substantially better than when randomly reinitialized.\nThis experiment supports the lottery ticket hypothesis\u2019 emphasis\non initialization: the original initialization withstands and benefits from pruning, while\nthe random reinitialization\u2019s performance immediately suffers and diminishes steadily.\n\nOne-shot pruning.\nAlthough iterative pruning extracts smaller winning tickets, repeated training means they are costly\nto find.\nOne-shot pruning makes it possible to identify winning tickets without this repeated training.\nFigure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") c shows the results of one-shot pruning (green) and randomly reinitializing (red); one-shot pruning does indeed find winning tickets.\nWhen 67.5%\u2265Pm\u226517.6%percent67.5subscript\ud835\udc43\ud835\udc5apercent17.667.5\\\\%\\\\geq P\\_{m}\\\\geq 17.6\\\\%, the average winning tickets\nreach minimum validation accuracy earlier than the original network. When 95.0%\u2265Pm\u22655.17%percent95.0subscript\ud835\udc43\ud835\udc5apercent5.1795.0\\\\%\\\\geq P\\_{m}\\\\geq 5.17\\\\%, test accuracy is higher than the original network.\nHowever, iteratively-pruned winning tickets learn faster and reach higher\ntest accuracy at smaller network sizes.\nThe green and red lines in Figure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") c are reproduced on the logarithmic axes of Figure [4]Figure 4 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") a,\nmaking this performance gap clear.\nSince our goal is to identify the smallest possible winning tickets, we focus on iterative pruning throughout the rest of the paper.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n(a) Early-stopping iteration and accuracy for all pruning methods.\n\n![Refer to caption](b) Accuracy at end of training.\n\n![Refer to caption]\n\n![Refer to caption]\n\n(c) Early-stopping iteration and accuracy for one-shot pruning.\n\nFigure 4: Early-stopping iteration and accuracy of Lenet under one-shot and iterative pruning. Average of five trials; error\nbars for the minimum and maximum values. At iteration 50,000, training accuracy \u2248100%absentpercent100\\\\approx 100\\\\% for Pm\u22652%subscript\ud835\udc43\ud835\udc5apercent2P\\_{m}\\\\geq 2\\\\% for iterative winning tickets (see Appendix [D]Appendix D Training Accuracy for Lottery Ticket Experiments \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), Figure [12]Figure 12 \u2023 Appendix D Training Accuracy for Lottery Ticket Experiments \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")).\n\n## 3 Winning Tickets in Convolutional Networks\nHere, we apply the lottery ticket hypothesis to convolutional networks on CIFAR10,\nincreasing both the complexity of the learning problem and the size of the networks.\nWe consider the Conv-2, Conv-4, and Conv-6 architectures in Figure [2]Figure 2 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), which are scaled-down variants\nof the VGG (Simonyan & Zisserman, [2014])) family. The networks have two, four, or six convolutional layers followed by\ntwo fully-connected layers; max-pooling occurs after every two convolutional layers. The networks cover a range from near-fully-connected to\ntraditional convolutional networks, with less than 1% of parameters\nin convolutional layers in Conv-2 to nearly two thirds in Conv-6.333Appendix [H]Appendix H Hyperparameter Exploration for Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") explores other hyperparameters, including learning rates, optimization strategies (SGD, momentum),\nand the relative rates at which to prune convolutional and fully-connected layers.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 5: Early-stopping iteration and test and training accuracy of the Conv-2/4/6 architectures when iteratively pruned and when\nrandomly reinitialized.\nEach solid line is the average of five trials; each dashed line is the average of fifteen reinitializations\n(three per trial). The bottom right graph plots test accuracy of winning tickets at iterations corresponding to the last iteration of training for the original network (20,000 for Conv-2, 25,000 for Conv-4, and 30,000 for Conv-6); at this iteration, training accuracy \u2248100%absentpercent100\\\\approx 100\\\\% for Pm\u22652%subscript\ud835\udc43\ud835\udc5apercent2P\\_{m}\\\\geq 2\\\\% for winning tickets (see Appendix [D]Appendix D Training Accuracy for Lottery Ticket Experiments \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")).\n\nFinding winning tickets. The solid lines in Figure [5]Figure 5 \u2023 3 Winning Tickets in Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") (top) show the iterative lottery ticket experiment on\nConv-2 (blue), Conv-4 (orange), and Conv-6 (green) at the per-layer pruning rates from Figure [2]Figure 2 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"). The pattern\nfrom Lenet in Section [2]Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") repeats: as the network is pruned, it learns faster and test accuracy rises as compared to the original network.\nIn this case, the results are more pronounced.\nWinning tickets reach minimum validation loss at best 3.5x faster for Conv-2 (Pm=8.8%subscript\ud835\udc43\ud835\udc5apercent8.8P\\_{m}=8.8\\\\%), 3.5x for Conv-4 (Pm=9.2%subscript\ud835\udc43\ud835\udc5apercent9.2P\\_{m}=9.2\\\\%), and\n2.5x for Conv-6 (Pm=15.1%subscript\ud835\udc43\ud835\udc5apercent15.1P\\_{m}=15.1\\\\%). Test accuracy improves at best 3.4 percentage points for Conv-2 (Pm=4.6%subscript\ud835\udc43\ud835\udc5apercent4.6P\\_{m}=4.6\\\\%), 3.5\nfor Conv-4 (Pm=11.1%subscript\ud835\udc43\ud835\udc5apercent11.1P\\_{m}=11.1\\\\%), and 3.3 for Conv-6 (Pm=26.4%subscript\ud835\udc43\ud835\udc5apercent26.4P\\_{m}=26.4\\\\%). All three networks remain above their original average test accuracy when Pm>2%subscript\ud835\udc43\ud835\udc5apercent2P\\_{m}>2\\\\%.\n\nAs in Section [2]Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), training accuracy at the early-stopping iteration rises with test accuracy.\nHowever, at iteration 20,000 for Conv-2, 25,000 for Conv-4, and 30,000 for Conv-6 (the iterations corresponding to the final training iteration for the original network), training accuracy reaches 100% for all networks when Pm\u22652%subscript\ud835\udc43\ud835\udc5apercent2P\\_{m}\\\\geq 2\\\\% (Appendix [D]Appendix D Training Accuracy for Lottery Ticket Experiments \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), Figure [13]Figure 13 \u2023 Appendix D Training Accuracy for Lottery Ticket Experiments \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"))\nand winning tickets still maintain higher test accuracy (Figure [5]Figure 5 \u2023 3 Winning Tickets in Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") bottom right). This means that the gap between\ntest and training accuracy is smaller for winning tickets, indicating they generalize better.\n\nRandom reinitialization. We repeat the random reinitialization experiment from Section [2]Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), which appears as the dashed lines in Figure [5]Figure 5 \u2023 3 Winning Tickets in Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\").\nThese networks again take increasingly longer to learn upon continued pruning. Just as with Lenet on MNIST (Section [2]Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")), test accuracy drops off more\nquickly for the random reinitialization experiments. However, unlike Lenet, test accuracy at early-stopping time initially remains steady and even\nimproves for Conv-2 and Conv-4, indicating that\u2014at moderate levels of pruning\u2014the structure of the winning tickets alone may lead to better accuracy.\n\nDropout.\nDropout (Srivastava et al., [2014]); Hinton et al., [2012])) improves accuracy by randomly disabling a fraction of the units (i.e., randomly\nsampling a subnetwork) on each training iteration.\nBaldi & Sadowski ( [2013])) characterize dropout as simultaneously training the ensemble of all subnetworks.\nSince the lottery ticket hypothesis suggests that one of these subnetworks comprises a winning ticket, it is natural to ask whether dropout and our\nstrategy for finding winning tickets interact.\n\nFigure [6]Figure 6 \u2023 3 Winning Tickets in Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") shows the results of training Conv-2, Conv-4, and Conv-6 with a dropout rate of 0.5. Dashed lines are the network performance\nwithout dropout (the solid lines in Figure [5]Figure 5 \u2023 3 Winning Tickets in Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")).444We choose new learning rates for the networks as trained with\ndropout\u2014see Appendix [H.5]H.5 Learning Rates (Dropout) \u2023 Appendix H Hyperparameter Exploration for Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"). We\ncontinue to find winning tickets when training with dropout. Dropout increases initial test accuracy\n(2.1, 3.0, and 2.4 percentage points on average for Conv-2, Conv-4, and Conv-6, respectively), and iterative pruning increases it further (up to an additional\n2.3, 4.6, and 4.7 percentage points, respectively, on average).\nLearning becomes faster with iterative pruning as before, but less dramatically in the case of Conv-2.\n\nThese improvements suggest that our\niterative pruning strategy interacts with dropout in a complementary way.\nSrivastava et al. ( [2014])) observe that dropout induces sparse activations in the final network; it is possible that dropout-induced\nsparsity primes a network to be pruned. If so, dropout techniques that target weights (Wan et al., [2013])) or learn per-weight dropout\nprobabilities (Molchanov et al., [2017]); Louizos et al., [2018])) could make winning tickets even easier to find.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 6: Early-stopping iteration and test accuracy at early-stopping of Conv-2/4/6 when iteratively pruned and trained with dropout.\nThe dashed lines are the same networks trained without dropout (the solid lines in Figure [5]Figure 5 \u2023 3 Winning Tickets in Convolutional Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")). Learning rates are 0.0003 for\nConv-2 and 0.0002 for Conv-4 and Conv-6.\n\n## 4 VGG and Resnet for CIFAR10\nHere, we study the lottery ticket hypothesis on networks evocative of the architectures and techniques used in practice.\nSpecifically, we consider VGG-style deep convolutional networks (VGG-19 on CIFAR10\u2014Simonyan & Zisserman ( [2014]))) and residual\nnetworks (Resnet-18 on CIFAR10\u2014He et al. ( [2016]))).555See Figure [2]Figure 2 \u2023 2 Winning Tickets in Fully-Connected Networks \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") and Appendices [I]Appendix I Hyperparameter Exploration for VGG-19 and Resnet-18 on CIFAR10 \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") for details on the networks, hyperparameters, and training regimes.\nThese networks are trained with batchnorm, weight decay,\ndecreasing learning rate schedules, and augmented training data.\nWe continue to find winning tickets for all of these architectures; however, our method for finding them, iterative pruning,\nis sensitive to the particular learning rate used. In these experiments, rather than measure early-stopping time (which, for these\nlarger networks, is entangled with learning rate schedules), we plot accuracy at several moments during training to illustrate\nthe relative rates at which accuracy improves.\n\nGlobal pruning.\nOn Lenet and Conv-2/4/6, we prune each layer separately at the same rate.\nFor Resnet-18 and VGG-19, we modify this strategy slightly:\nwe prune these deeper networks _globally_, removing the lowest-magnitude weights collectively across all convolutional layers.\nIn Appendix [I.1]I.1 Global Pruning \u2023 Appendix I Hyperparameter Exploration for VGG-19 and Resnet-18 on CIFAR10 \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\"), we find that global pruning identifies smaller winning tickets for Resnet-18 and VGG-19. Our conjectured explanation for this behavior is as follows:\nFor these deeper networks, some layers have far more parameters than others.\nFor example, the first two convolutional layers of VGG-19 have 1728 and 36864 parameters, while the last has 2.35 million. When all layers are pruned at the same rate, these smaller layers become bottlenecks, preventing us from identifying the smallest possible winning tickets. Global pruning makes it possible to avoid this pitfall.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 7: Test accuracy (at 30K, 60K, and 112K iterations) of VGG-19 when iteratively pruned.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 8: Test accuracy (at 10K, 20K, and 30K iterations) of Resnet-18 when iteratively pruned.\n\nVGG-19. We study the variant VGG-19 adapted for CIFAR10 by Liu et al. ( [2019]));\nwe use the the same training regime and\nhyperparameters: 160 epochs (112,480 iterations)\nwith SGD with momentum (0.9) and decreasing the learning rate by a factor of 10 at 80 and 120 epochs.\nThis network has 20 million parameters.\nFigure [7]Figure 7 \u2023 4 VGG and Resnet for CIFAR10 \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") shows the results of iterative\npruning and random reinitialization on VGG-19 at two initial learning rates: 0.1 (used in Liu et al. ( [2019]))) and 0.01.\nAt the higher learning rate, iterative pruning does not find winning tickets, and performance\nis no better than when the pruned networks are randomly reinitialized.\nHowever, at the lower learning rate, the usual pattern reemerges, with\nsubnetworks that remain within 1 percentage point of the original accuracy while Pm\u22653.5%subscript\ud835\udc43\ud835\udc5apercent3.5P\\_{m}\\\\geq 3.5\\\\%.\n(They are not winning tickets, since they do not match the original accuracy.)\nWhen randomly reinitialized, the subnetworks lose accuracy as they are pruned in the same manner as other experiments throughout this paper.\nAlthough these subnetworks learn faster than the unpruned network early in training (Figure [7]Figure 7 \u2023 4 VGG and Resnet for CIFAR10 \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") left),\nthis accuracy advantage erodes later in training due to the lower initial learning rate. However, these\nsubnetworks still learn faster than when reinitialized.\n\nTo bridge the gap between the lottery ticket behavior of the lower learning rate and the accuracy advantage of the higher learning rate,\nwe explore the effect of linear learning rate warmup from 0 to the initial learning rate over k\ud835\udc58k iterations.\nTraining VGG-19 with warmup (k=10000\ud835\udc5810000k=10000, green line) at learning rate 0.1 improves the test accuracy of the unpruned network by about one percentage point.\nWarmup makes it possible to find winning tickets, exceeding this initial accuracy when Pm\u22651.5%subscript\ud835\udc43\ud835\udc5apercent1.5P\\_{m}\\\\geq 1.5\\\\%.\n\nResnet-18. Resnet-18 (He et al., [2016])) is a 20 layer convolutional network with residual connections designed for CIFAR10.\nIt has 271,000 parameters. We train the network for 30,000 iterations with SGD with momentum (0.9), decreasing\nthe learning rate by a factor of 10 at 20,000 and 25,000 iterations. Figure [8]Figure 8 \u2023 4 VGG and Resnet for CIFAR10 \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") shows the results\nof iterative pruning and random reinitialization at learning rates 0.1 (used in He et al. ( [2016]))) and 0.01. These results largely mirror those of VGG:\niterative pruning finds winning tickets at the lower learning rate but not the higher learning rate.\nThe accuracy of the best winning tickets at the lower learning rate (89.5% when 41.7%\u2265Pm\u226521.9%percent41.7subscript\ud835\udc43\ud835\udc5apercent21.941.7\\\\%\\\\geq P\\_{m}\\\\geq 21.9\\\\%) falls short of the original network\u2019s accuracy at the higher learning rate (90.5%).\nAt lower learning rate, the winning ticket again initially learns faster (left plots of Figure [8]Figure 8 \u2023 4 VGG and Resnet for CIFAR10 \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\")), but falls behind the unpruned network\nat the higher learning rate later in training (right plot).\nWinning tickets trained with warmup close the accuracy gap with the unpruned network at the higher learning rate,\nreaching 90.5% test accuracy with learning rate 0.03 (warmup, k=20000\ud835\udc5820000k=20000) at Pm=27.1%subscript\ud835\udc43\ud835\udc5apercent27.1P\\_{m}=27.1\\\\%. For these hyperparameters, we still\nfind winning tickets when Pm\u226511.8%subscript\ud835\udc43\ud835\udc5apercent11.8P\\_{m}\\\\geq 11.8\\\\%. Even with warmup, however, we could not find hyperparameters for which\nwe could identify winning tickets at the original learning rate, 0.1.\n\n## 5 Discussion\nExisting work on neural network pruning (e.g., Han et al. ( [2015]))) demonstrates that the function\nlearned by a neural network can often be represented with fewer parameters. Pruning typically proceeds by training the original network, removing connections, and further fine-tuning.\nIn effect, the initial training initializes the weights of the\npruned network so that it can learn in isolation during fine-tuning.\nWe seek to determine if similarly sparse networks can learn from the\nstart.\nWe find that the architectures studied in this paper reliably contain such trainable subnetworks, and the lottery ticket hypothesis proposes that this property applies in general.\nOur empirical study of the existence and nature of winning tickets invites a number of follow-up questions.\n\nThe importance of winning ticket initialization.\nWhen randomly reinitialized, a winning ticket learns more slowly and achieves lower test accuracy, suggesting\nthat initialization is important to its success. One\npossible explanation for this behavior is these initial weights are close to their\nfinal values after training\u2014that in the most extreme case, they are already trained. However,\nexperiments in Appendix [F]Appendix F Examining Winning Tickets \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") show the opposite\u2014that\nthe winning ticket weights move further\nthan\nother weights. This suggests that the benefit of the initialization is connected\nto the optimization algorithm, dataset, and model. For example,\nthe winning ticket initialization might land in a region of the loss landscape\nthat is particularly amenable to optimization by the chosen optimization algorithm.\n\nLiu et al. ( [2019])) find that pruned networks are indeed trainable when randomly reinitialized,\nseemingly contradicting conventional wisdom and our random reinitialization experiments.\nFor example, on VGG-19 (for which we share the same setup),\nthey find that networks pruned by up to 80% and randomly reinitialized match the accuracy of the original network.\nOur experiments in Figure [7]Figure 7 \u2023 4 VGG and Resnet for CIFAR10 \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") confirm these findings at this level of sparsity (below which [Liu et al.]) do not present data). However, after further pruning, initialization matters:\nwe find winning tickets when VGG-19 is pruned by up to 98.5%; when reinitialized, these tickets reach much lower accuracy.\nWe hypothesize that\u2014up to a certain level of sparsity\u2014highly overparameterized networks can be pruned, reinitialized, and retrained successfully; however, beyond this point, extremely pruned, less severely overparamterized networks only maintain\naccuracy with fortuitous initialization.\n\nThe importance of winning ticket structure.\nThe initialization that gives rise to a winning ticket is arranged in a particular sparse architecture.\nSince we uncover winning tickets through heavy use of training data, we hypothesize that the structure of\nour winning tickets encodes an inductive bias customized to the learning task at hand. Cohen & Shashua ( [2016])) show that\nthe inductive bias embedded in the structure of a deep network determines the kinds of data that it can\nseparate more parameter-efficiently than can a shallow network; although Cohen & Shashua ( [2016])) focus on the\npooling geometry of convolutional networks, a similar effect may be at play with the structure of winning tickets, allowing them\nto learn even when heavily pruned.\n\nThe improved generalization of winning tickets.\nWe reliably find winning tickets that generalize better, exceeding the test accuracy of the original\nnetwork while matching its training accuracy.\nTest accuracy increases and then decreases as we prune, forming an Occam\u2019s Hill(Rasmussen & Ghahramani, [2001])) where the original, overparameterized model has too much\ncomplexity (perhaps overfitting) and the\nextremely pruned model has too little.\nThe conventional view of the relationship between compression and generalization is that compact hypotheses\ncan better generalize (Rissanen, [1986])). Recent theoretical work shows a similar link for neural networks,\nproving tighter generalization bounds for networks that can be compressed further\n(Zhou et al. ( [2018])) for pruning/quantization and Arora et al. ( [2018])) for noise robustness). The lottery ticket hypothesis offers a\ncomplementary perspective on this relationship\u2014that larger networks might explicitly contain simpler representations.\n\nImplications for neural network optimization.\nWinning tickets can reach accuracy equivalent to that of the\noriginal, unpruned network, but with significantly fewer parameters.\nThis observation connects to recent work on the role of\noverparameterization in neural network training.\nFor example,\nDu et al. ( [2019])) prove that sufficiently overparameterized two-layer relu\nnetworks (with fixed-size second layers) trained with SGD converge to\nglobal optima. A key question, then, is whether the presence of a winning ticket is\nnecessary or sufficient for SGD to optimize a neural network to a\nparticular test accuracy. We conjecture (but do not empirically show) that\nSGD seeks out and trains a well-initialized subnetwork. By this\nlogic, overparameterized networks are easier to train because they have more\ncombinations of subnetworks that are potential\nwinning tickets.\n\n## 6 Limitations and Future Work\nWe only consider vision-centric classification tasks on smaller\ndatasets (MNIST, CIFAR10). We do not investigate larger datasets (namely Imagenet (Russakovsky et al., [2015]))): iterative pruning is computationally intensive, requiring training a network 15 or more times consecutively for multiple trials. In future work, we intend to explore more efficient methods for finding winning tickets that will make it possible to\nstudy the lottery ticket hypothesis in more resource-intensive settings.\n\nSparse pruning is our only method for finding winning tickets.\nAlthough we reduce parameter-counts, the resulting architectures are not optimized for modern libraries or hardware. In future work,\nwe intend to study other pruning methods from the extensive contemporary literature, such as structured pruning (which would produce networks optimized for contemporary hardware) and non-magnitude pruning methods (which could produce smaller winning tickets or\nfind them earlier).\n\nThe winning tickets we find have initializations that allow them to match the performance of the unpruned networks at sizes too small for\nrandomly-initialized networks to do the same. In future work, we intend to study the properties of these initializations that, in concert with the inductive\nbiases of the pruned network architectures, make these networks particularly adept at learning.\n\nOn deeper networks (Resnet-18 and VGG-19), iterative pruning is unable to find winning tickets unless we train the networks with learning rate warmup. In future work, we plan to explore why warmup is necessary and whether other improvements to our scheme for identifying winning tickets could obviate the need for these hyperparameter modifications.\n\n## 7 Related Work\nIn practice, neural networks tend to be dramatically overparameterized.\nDistillation (Ba & Caruana, [2014]); Hinton et al., [2015])) and pruning (LeCun et al., [1990]); Han et al., [2015]))\nrely on the fact that parameters can be reduced while preserving accuracy. Even with\nsufficient capacity to memorize training data, networks naturally learn simpler functions (Zhang et al., [2016]); Neyshabur et al., [2014]); Arpit et al., [2017])).\nContemporary experience (Bengio et al., [2006]); Hinton et al., [2015]); Zhang et al., [2016])) and Figure [1]Figure 1 \u2023 1 Introduction \u2023 The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks\") suggest\nthat overparameterized networks are easier to train.\nWe show that\ndense networks contain sparse subnetworks capable of learning on their own starting from their original\ninitializations.\nSeveral other research directions aim to train small or sparse networks.\n\nPrior to training.\nSqueezenet (Iandola et al., [2016])) and MobileNets (Howard et al., [2017]))\nare specifically engineered image-recognition networks that are an order of magnitude smaller\nthan standard architectures.\nDenil et al. ( [2013])) represent weight matrices as products of lower-rank factors.\nLi et al. ( [2018])) restrict optimization\nto a small, randomly-sampled subspace of the parameter space (meaning all parameters can still be updated); they successfully train networks under this restriction.\nWe show that one need not even update\nall parameters to optimize a network, and we find winning tickets through a principled\nsearch process involving pruning.\nOur contribution to this class of approaches is to demonstrate that sparse, trainable networks exist within larger networks.\n\nAfter training. Distillation (Ba & Caruana, [2014]); Hinton et al., [2015])) trains small networks to mimic the behavior of large networks; small networks are\neasier to train in this paradigm.\nRecent pruning work compresses large models to run with limited resources (e.g., on mobile devices).\nAlthough pruning is central to our experiments, we study\nwhy training needs the overparameterized networks that make pruning possible.\nLeCun et al. ( [1990])) and Hassibi & Stork ( [1993])) first explored pruning based on second derivatives.\nMore recently, Han et al. ( [2015])) showed per-weight magnitude-based\npruning substantially reduces the size of image-recognition networks.\nGuo et al. ( [2016])) restore pruned connections as they become relevant again. Han et al. ( [2017]))\nand Jin et al. ( [2016])) restore pruned connections to increase network capacity after small weights have been pruned and surviving weights fine-tuned.\nOther proposed pruning heuristics include pruning based\non activations (Hu et al., [2016])), redundancy (Mariet & Sra, [2016]); Srinivas & Babu, [2015a])), per-layer second derivatives (Dong et al., [2017])),\nand energy/computation efficiency (Yang et al., [2017]))\n(e.g., pruning convolutional filters (Li et al., [2016]); Molchanov et al., [2016]); Luo et al., [2017])) or channels (He et al., [2017]))).\nCohen et al. ( [2016])) observe that convolutional filters are sensitive to initialization (\u201cThe Filter Lottery\u201d); throughout training, they randomly reinitialize\nunimportant filters.\n\nDuring training.Bellec et al. ( [2018])) train with sparse networks and replace weights that reach zero with new random connections.\nSrinivas et al. ( [2017])) and Louizos et al. ( [2018])) learn gating variables that minimize the number of nonzero parameters.\nNarang et al. ( [2017])) integrate magnitude-based pruning into training.\nGal & Ghahramani ( [2016])) show that dropout approximates Bayesian inference in Gaussian processes.\nBayesian perspectives on dropout learn dropout probabilities during training (Gal et al., [2017]); Kingma et al., [2015]); Srinivas & Babu, [2016])).\nTechniques that learn per-weight, per-unit (Srinivas & Babu, [2016])), or structured dropout probabilities\nnaturally (Molchanov et al., [2017]); Neklyudov et al., [2017]))\nor explicitly (Louizos et al., [2017]); Srinivas & Babu, [2015b])) prune and sparsify networks during training as dropout probabilities for some weights\nreach 1. In contrast, we train networks at least once to find winning tickets. These techniques might also find\nwinning tickets, or, by inducing sparsity, might beneficially interact with our methods.\n</Content></Candidate>\n\n<Candidate>Candidate [1]:\nSparse Autoencoders Find Highly Interpretable Features in Language Models.\n\n<Abstract>Abstract: One of the roadblocks to a better understanding of neural networks' internals\nis \\textit{polysemanticity}, where neurons appear to activate in multiple,\nsemantically distinct contexts. Polysemanticity prevents us from identifying\nconcise, human-understandable explanations for what neural networks are doing\ninternally. One hypothesised cause of polysemanticity is\n\\textit{superposition}, where neural networks represent more features than they\nhave neurons by assigning features to an overcomplete set of directions in\nactivation space, rather than to individual neurons. Here, we attempt to\nidentify those directions, using sparse autoencoders to reconstruct the\ninternal activations of a language model. These autoencoders learn sets of\nsparsely activating features that are more interpretable and monosemantic than\ndirections identified by alternative approaches, where interpretability is\nmeasured by automated methods. Moreover, we show that with our learned set of\nfeatures, we can pinpoint the features that are causally responsible for\ncounterfactual behaviour on the indirect object identification task\n\\citep{wang2022interpretability} to a finer degree than previous\ndecompositions. This work indicates that it is possible to resolve\nsuperposition in language models using a scalable, unsupervised method. Our\nmethod may serve as a foundation for future mechanistic interpretability work,\nwhich we hope will enable greater model transparency and steerability.</Abstract><Content>\n## 1 Introduction\nAdvances in artificial intelligence (AI) have resulted in the development of highly capable AI systems that make decisions for reasons we do not understand. This has caused concern that AI systems that we cannot trust are being widely deployed in the economy and in our lives, introducing a number of novel risks (Hendrycks et al., [2023])), including potential future risks that AIs might deceive humans in order to accomplish undesirable goals (Ngo et al., [2022])). Mechanistic interpretability seeks to mitigate such risks through understanding how neural networks calculate their outputs, allowing us to reverse engineer parts of their internal processes and make targeted changes to them (Cammarata et al., [2021]); Wang et al., [2022]); Elhage et al., [2021])).\n\n00footnotetext: Code to replicate experiments can be found at [https://github.com/HoagyC/sparse\\_coding]\n\nTo reverse engineer a neural network, it is necessary to break it down into smaller units (features) that can be analysed in isolation. Using individual neurons as these units has had some success (Olah et al., [2020]); Bills et al., [2023])), but a key challenge has been that neurons are often polysemantic, activating for several unrelated types of feature (Olah et al., [2020])). Also, for some types of network activations, such as the residual stream of a transformer, there is little reason to expect features to align with the neuron basis (Elhage et al., [2023])).\n\nElhage et al. ( [2022b])) investigate why polysemanticity might arise and hypothesise that it may result from models learning more distinct features than there are dimensions in the layer. They call this phenomenon superposition. Since a vector space can only have as many orthogonal vectors as it has dimensions, this means the network would learn an overcomplete basis of non-orthogonal features. Features must be sufficiently sparsely activating for superposition to arise because, without high sparsity, interference between non-orthogonal features prevents any performance gain from superposition. This suggests that we may be able to recover the network\u2019s features by finding a set of directions in activation space such that each activation vector can be reconstructed from a sparse linear combinations of these directions. This is equivalent to the well-known problem of sparse dictionary learning (Olshausen & Field, [1997])).\n\nBuilding on Sharkey et al. ( [2023])), we train sparse autoencoders to learn these sets of directions. Our approach is also similar to Yun et al. ( [2021])), who apply sparse dictionary learning to all residual stream layers in a language model simultaneously. Our method is summarised in Figure [1]Figure 1 \u2023 1 Introduction \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") and described in Section [2]Taking Features out of Superposition with Sparse Dictionary Learning \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\").\n\nWe then use several techniques to verify that our learned features represent a semantically meaningful decomposition of the activation space. First, we show that our features are on average more interpretable than neurons and other matrix decomposition techniques, as measured by autointerpretability scores (Section [3]Interpreting Dictionary Features \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")) (Bills et al., [2023])). Next, we show that we are able to pinpoint the features used for a set task more precisely than other methods (Section [4]Identifying Causally-Important Dictionary Features for Indirect Object Identification \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")). Finally, we run case studies on a small number of features, showing that they are not only monosemantic but also have predictable effects on the model outputs, and can be used for fine-grained circuit detection. (Section [5]Case Studies \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")).\n\n![Refer to caption]Figure 1: An overview of our method. We a) sample the internal activations of a language model, either the residual stream, MLP sublayer, or attention head sublayer; b) use these activations to train a neural network, a sparse autoencoder whose weights form a feature dictionary; c) interpret the resulting features with techniques such as OpenAI\u2019s autointerpretability scores.\n\n## 2 Taking Features out of Superposition with Sparse Dictionary Learning\nTo take network features out of superposition, we employ techniques from _sparse dictionary learning_(Olshausen & Field, [1997]); Lee et al., [2006])). Suppose that each of a given set of vectors {\ud835\udc31i}i=1nvec\u2282\u211ddsuperscriptsubscriptsubscript\ud835\udc31\ud835\udc56\ud835\udc561subscript\ud835\udc5bvecsuperscript\u211d\ud835\udc51\\\\{\\\\mathbf{x}\\_{i}\\\\}\\_{i=1}^{n\\_{\\\\text{vec}}}\\\\subset\\\\mathbb{R}^{d} is composed of a sparse linear combination of unknown vectors {\ud835\udc20j}j=1ngt\u2282\u211ddsuperscriptsubscriptsubscript\ud835\udc20\ud835\udc57\ud835\udc571subscript\ud835\udc5bgtsuperscript\u211d\ud835\udc51\\\\{\\\\mathbf{g}\\_{j}\\\\}\\_{j=1}^{n\\_{\\\\text{gt}}}\\\\subset\\\\mathbb{R}^{d}, i.e. \ud835\udc31i=\u2211jai,j\u200b\ud835\udc20jsubscript\ud835\udc31\ud835\udc56subscript\ud835\udc57subscript\ud835\udc4e\ud835\udc56\ud835\udc57subscript\ud835\udc20\ud835\udc57\\\\mathbf{x}\\_{i}=\\\\sum\\_{j}a\\_{i,j}\\\\mathbf{g}\\_{j} where \ud835\udc1a\ud835\udc22subscript\ud835\udc1a\ud835\udc22\\\\mathbf{a\\_{i}} is a sparse vector. In our case, the data vectors {\ud835\udc31i}i=1nvecsuperscriptsubscriptsubscript\ud835\udc31\ud835\udc56\ud835\udc561subscript\ud835\udc5bvec\\\\{\\\\mathbf{x}\\_{i}\\\\}\\_{i=1}^{n\\_{\\\\text{vec}}} are internal activations of a language model, such as Pythia-70M (Biderman et al., [2023])), and {\ud835\udc20j}j=1ngtsuperscriptsubscriptsubscript\ud835\udc20\ud835\udc57\ud835\udc571subscript\ud835\udc5bgt\\\\{\\\\mathbf{g}\\_{j}\\\\}\\_{j=1}^{n\\_{\\\\text{gt}}} are unknown, ground truth network features. We would like learn a dictionary of vectors, called dictionary features, {\ud835\udc1fk}k=1nfeat\u2282\u211ddsuperscriptsubscriptsubscript\ud835\udc1f\ud835\udc58\ud835\udc581subscript\ud835\udc5bfeatsuperscript\u211d\ud835\udc51\\\\{\\\\mathbf{f}\\_{k}\\\\}\\_{k=1}^{n\\_{\\\\text{feat}}}\\\\subset\\\\mathbb{R}^{d} where for any network feature \ud835\udc20jsubscript\ud835\udc20\ud835\udc57\\\\mathbf{g}\\_{j} there exists a dictionary feature \ud835\udc1fksubscript\ud835\udc1f\ud835\udc58\\\\mathbf{f}\\_{k} such that \ud835\udc20j\u2248\ud835\udc1fksubscript\ud835\udc20\ud835\udc57subscript\ud835\udc1f\ud835\udc58\\\\mathbf{g}\\_{j}\\\\approx\\\\mathbf{f}\\_{k}.\n\nTo learn the dictionary, we train an autoencoder with a sparsity penalty term on its hidden activations. The autoencoder is a neural network with a single hidden layer of size dhid=R\u200bdinsubscript\ud835\udc51hid\ud835\udc45subscript\ud835\udc51ind\\_{\\\\text{hid}}=Rd\\_{\\\\text{in}}, where dinsubscript\ud835\udc51ind\\_{\\\\text{in}} is the dimension of the language model internal activation vectors111We mainly study residual streams in Pythia-70M and Pythia 410-M, for which the residual streams are of size din=512subscript\ud835\udc51in512d\\_{\\\\text{in}}=512 and din=1024subscript\ud835\udc51in1024d\\_{\\\\text{in}}=1024, respectively (Biderman et al., [2023])), and R\ud835\udc45R is a hyperparameter that controls the ratio of the feature dictionary size to the model dimension. We use the ReLU activation function in the hidden layer (Fukushima, [1975])). We also use tied weights for our neural network, meaning the weight matrices of the encoder and decoder are transposes of each other.222We use tied weights because (a) they encode our expectation that the directions which detect and define the feature should be the same or highly similar, (b) they halve the memory cost of the model, and\n(c) they remove ambiguity about whether the learned direction should be interpreted as the encoder or decoder direction. They do not reduce performance when training on residual stream data but we have observed some reductions in performance when using MLP data. Thus, on input vector \ud835\udc31\u2208{\ud835\udc31i}\ud835\udc31subscript\ud835\udc31\ud835\udc56\\\\mathbf{x}\\\\in\\\\{\\\\mathbf{x}\\_{i}\\\\}, our network produces the output \ud835\udc31^^\ud835\udc31\\\\mathbf{\\\\hat{x}}, given by\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n|  | \ud835\udc1c\ud835\udc1c\\\\displaystyle\\\\mathbf{c} | =\\\\displaystyle= | ReLU\u200b(M\u200b\ud835\udc31+\ud835\udc1b)ReLU\ud835\udc40\ud835\udc31\ud835\udc1b\\\\displaystyle\\\\mathrm{ReLU}(M\\\\mathbf{x}+\\\\mathbf{b}) |  | (1) |\n|  | \ud835\udc31^^\ud835\udc31\\\\displaystyle\\\\mathbf{\\\\hat{x}} | =\\\\displaystyle= | MT\u200b\ud835\udc1csuperscript\ud835\udc40\ud835\udc47\ud835\udc1c\\\\displaystyle M^{T}\\\\mathbf{c} |  | (2) |\n|  |  | =\\\\displaystyle= | \u2211i=0dhid\u22121ci\u200b\ud835\udc1fisuperscriptsubscript\ud835\udc560subscript\ud835\udc51hid1subscript\ud835\udc50\ud835\udc56subscript\ud835\udc1f\ud835\udc56\\\\displaystyle\\\\sum\\_{i=0}^{d\\_{\\\\text{hid}}-1}c\\_{i}\\\\mathbf{f}\\_{i} |  | (3) |\n\nwhere M\u2208\u211ddhid\u00d7din\ud835\udc40superscript\u211dsubscript\ud835\udc51hidsubscript\ud835\udc51inM\\\\in\\\\mathbb{R}^{d\\_{\\\\text{hid}}\\\\times d\\_{\\\\text{in}}} and \ud835\udc1b\u2208\u211ddhid\ud835\udc1bsuperscript\u211dsubscript\ud835\udc51hid\\\\mathbf{b}\\\\in\\\\mathbb{R}^{d\\_{\\\\text{hid}}} are our learned parameters, and M\ud835\udc40M is normalised row-wise333Normalisation of the rows (dictionary features) prevents the model from reducing the sparsity loss term \u2016\ud835\udc1c\u20161subscriptnorm\ud835\udc1c1\\|\\|\\\\mathbf{c}\\|\\|\\_{1} by increasing the size of the feature vectors in M\ud835\udc40M.. Our parameter matrix M\ud835\udc40M is our feature dictionary, consisting of dhidsubscript\ud835\udc51hidd\\_{\\\\text{hid}} rows of dictionary features \ud835\udc1fisubscript\ud835\udc1f\ud835\udc56\\\\mathbf{f}\\_{i}. The output \ud835\udc31^^\ud835\udc31\\\\mathbf{\\\\hat{x}} is meant to be a reconstruction of the original vector \ud835\udc31\ud835\udc31\\\\mathbf{x}, and the hidden layer \ud835\udc1c\ud835\udc1c\\\\mathbf{c} consists of the coefficients we use in our reconstruction of \ud835\udc31\ud835\udc31\\\\mathbf{x}.\n\nOur autoencoder is trained to minimise the loss function\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u2112\u200b(\ud835\udc31)=\u2016\ud835\udc31\u2212\ud835\udc31^\u201622\u23dfReconstruction loss+\u03b1\u200b\u2016\ud835\udc1c\u20161\u23dfSparsity loss\u2112\ud835\udc31subscript\u23dfsuperscriptsubscriptnorm\ud835\udc31^\ud835\udc3122Reconstruction losssubscript\u23df\ud835\udefcsubscriptnorm\ud835\udc1c1Sparsity loss\\\\mathcal{L}(\\\\mathbf{x})=\\\\underbrace{\\|\\|\\\\mathbf{x}-\\\\mathbf{\\\\hat{x}}\\|\\|\\_{2}^{2}}\\_{\\\\text{Reconstruction loss}}+\\\\underbrace{\\\\alpha\\|\\|\\\\mathbf{c}\\|\\|\\_{1}}\\_{\\\\text{Sparsity loss}} |  | (4) |\n\nwhere \u03b1\ud835\udefc\\\\alpha is a hyperparameter controlling the sparsity of the reconstruction. The \u21131superscript\u21131\\\\ell^{1} loss term on \ud835\udc1c\ud835\udc1c\\\\mathbf{c} encourages our reconstruction to be a sparse linear combination of the dictionary features. It can be shown empirically (Sharkey et al., [2023])) and theoretically (Wright & Ma, [2022])) that reconstruction with an \u21131superscript\u21131\\\\ell^{1} penalty can recover the ground-truth features that generated the data. For the further details of our training process, see Appendix [B]Appendix B Sparse Autoencoder Training and Hyperparameter Selection \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\").\n\n## 3 Interpreting Dictionary Features\n### 3.1 Interpretability at Scale\n\nHaving learned a set of dictionary features, we want to understand whether our learned features display reduced polysemanticity, and are therefore more interpretable. To do this in a scalable manner, we require a metric to measure how interpretable a dictionary feature is. We use the automated approach introduced in Bills et al. ( [2023])) because it scales well to measuring interpretability on the thousands of dictionary features our autoencoders learn. In summary, the autointerpretability procedure takes samples of text where the dictionary feature activates, asks a language model to write a human-readable interpretation of the dictionary feature, and then prompts the language model to use this description to predict the dictionary feature\u2019s activation on other samples of text. The correlation between the model\u2019s predicted activations and the actual activations is that feature\u2019s interpretability score. See Appendix [A]Appendix A Autointerpretation Protocol \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") and Bills et al. ( [2023])) for further details.\n\nWe show descriptions and top-and-random scores for five dictionary features from the layer 1 residual stream in Table [1]Table 1 \u2023 3.1 Interpretability at Scale \u2023 3 Interpreting Dictionary Features \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\"). The features shown are the first five under the (arbitrary) ordering in the dictionary.\n\n| Feature | Description (Generated by GPT-4) | Interpretability Score |\n| --- | --- | --- |\n| 1-0000 | parts of individual names, especially last names. | 0.33 |\n| 1-0001 | actions performed by a subject or object. | -0.11 |\n| 1-0002 | instances of the letter \u2018W\u2019 and words beginning with \u2018w\u2019. | 0.55 |\n| 1-0003 | the number \u20185\u2019 and also records moderate to low activation for personal names and some nouns. | 0.57 |\n| 1-0004 | legal terms and court case references. | 0.19 |\n\nTable 1: Results of autointerpretation on the first five features found in the layer 1 residual stream. Autointerpretation produces a description of what the feature means and a score for how well that description predicts other activations.\n\n### 3.2 Sparse dictionary features are more interpretable than baselines\n\nWe assess our interpretability scores against a variety of alternative methods for finding dictionaries of features in language models. In particular, we compare interpretability scores on our dictionary features to those produced by a) the default basis, b) random directions, c) Principal Component Analysis (PCA), and d) Independent Component Analysis (ICA). For the random directions and for the default basis in the residual stream, we replace negative activations with zeros so that all feature activations are nonnegative 444\nFor PCA we use an online estimation approach and run the decomposition on the same quantity of data we used for training the autoencoders. For ICA, due to the slower convergence times, we run on only 2GB of data, approximately 4 million activations for the residual stream and 1m activations for the MLPs..\n\n![Refer to caption]Figure 2: Average top-and-random autointerpretability score of our learned directions in the residual stream, compared to a number of baselines, using 150 features each. Error bars show 95% confidence intervals around means. The feature dictionaries used here were trained for 10 epochs using \u03b1=.00086\ud835\udefc.00086\\\\alpha=.00086 and R=2\ud835\udc452R=2.\n\nFigure [2]Figure 2 \u2023 3.2 Sparse dictionary features are more interpretable than baselines \u2023 3 Interpreting Dictionary Features \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") shows that our dictionary features are far more interpretable by this measure than dictionary features found by comparable techniques. We find that the strength of this effect declines as we move through the model, being comparable to ICA in layer 4 and showing minimal improvement in the final layer.\n\nThis could indicate that sparse autoencoders work less well in later layers but also may be connected to the difficulties of automatic interpretation, both because by building on earlier layers, later features may be more complex, and because they are often best explained by their effect on the output. Bills et al. ( [2023])) showed that GPT-4 is able to generate explanations that are very close to the average quality of the human-generated explanations given similar data. However, they also showed that current LLMs are limited in the kinds of patterns that they can find, sometimes struggling to find patterns that center around next or previous tokens rather than the current token, and in the current protocol are unable to verify outputs by looking at changes in output or other data.\n\nWe do show, in Section [5]Case Studies \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\"), a method to see a feature\u2019s causal effect on the output logits by hand, but we currently do not send this information to the language model for hypothesis generation. The case studies section also demonstrates a closing parenthesis dictionary feature, showing that these final layer features can give insight into the model\u2019s workings.\n\nSee Appendix [C]Appendix C Further Autointerpretation Results \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") for a fuller exploration of different learned dictionaries through the lens of automatic interpretability, looking at both the MLPs and the residual stream.\n\n## 4 Identifying Causally-Important Dictionary Features for Indirect Object Identification\n![Refer to caption]Figure 3: (Left) Number of features patched vs KL divergence from target, using various residual stream decompositions. We find that patching a relatively small number of dictionary features is more effective than patching PCA components and features from the non-sparse \u03b1=0\ud835\udefc0\\\\alpha=0 dictionary. (Right) Mean edit magnitude vs KL divergence from target as we increase the number of patched features. We find that our sparse dictionaries improve the Pareto frontier of edit magnitude vs thoroughness of editing. In both figures, the feature dictionaries were trained on the first 10,000 elements of the Pile (Gao et al., [2020])) (approximately 7 million activations) using the indicated \u03b1\ud835\udefc\\\\alpha and R\ud835\udc45R values, on layer 11 of Pythia-410M (see Appendix [F]Appendix F Editing IOI Behaviour on other Layers \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") for results on other layers).\n\nIn this section, we quantify whether our learned dictionary features localise a specific model behaviour more tightly than the PCA decomposition of the model\u2019s activations. We do this via activation patching, a form of causal mediation analysis (Vig et al., [2020])), through which we edit the model\u2019s internal activations along the directions indicated by our dictionary features and measure the changes to the model\u2019s outputs. We find that our dictionary features require fewer patches to reach a given level of KL divergence on the task studied than comparable decompositions (Figure [3]Figure 3 \u2023 4 Identifying Causally-Important Dictionary Features for Indirect Object Identification \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")).\n\nSpecifically, we study model behaviour on the Indirect Object Identification (IOI) task (Wang et al., [2022])), in which the model completes sentences like \u201cThen, Alice and Bob went to the store. Alice gave a snack to \u201d. This task was chosen because it captures a simple, previously-studied model behaviour. Recall that the training of our feature dictionaries does not emphasize any particular task.\n\n### 4.1 Adapting activation patching to dictionary features\n\nIn our experiment, we run the model on a counterfactual target sentence, which is a variant of the base IOI sentence with the indirect object changed (e.g., with \u201cBob\u201d replaced by \u201cVanessa\u201d); save the encoded activations of our dictionary features; and use the saved activations to edit the model\u2019s residual stream when run on the base sentence.\n\nIn particular, we perform the following procedure. Fix a layer of the model to intervene on. Run the model on the target sentence, saving the model output logits \ud835\udc32\ud835\udc32\\\\mathbf{y} and the encoded features \ud835\udc1c\u00af1,\u2026,\ud835\udc1c\u00afksubscript\u00af\ud835\udc1c1\u2026subscript\u00af\ud835\udc1c\ud835\udc58\\\\bar{\\\\mathbf{c}}\\_{1},...,\\\\bar{\\\\mathbf{c}}\\_{k} of that layer at each of the k\ud835\udc58k tokens. Then, run the model on the base sentence up through the intervention layer, compute the encoded features \ud835\udc1c1,\u2026,\ud835\udc1cksubscript\ud835\udc1c1\u2026subscript\ud835\udc1c\ud835\udc58\\\\mathbf{c}\\_{1},...,\\\\mathbf{c}\\_{k} at each token, and at each position replace the residual stream vector \ud835\udc31isubscript\ud835\udc31\ud835\udc56\\\\mathbf{x}\\_{i} with the patched vector\n\n|     |     |     |\n| --- | --- | --- |\n|  | \ud835\udc31i\u2032=\ud835\udc31i+\u2211j\u2208F(\ud835\udc1c\u00afi,j\u2212\ud835\udc1ci,j)\u200b\ud835\udc1fjsubscriptsuperscript\ud835\udc31\u2032\ud835\udc56subscript\ud835\udc31\ud835\udc56subscript\ud835\udc57\ud835\udc39subscript\u00af\ud835\udc1c\ud835\udc56\ud835\udc57subscript\ud835\udc1c\ud835\udc56\ud835\udc57subscript\ud835\udc1f\ud835\udc57\\\\mathbf{x}^{\\\\prime}\\_{i}=\\\\mathbf{x}\\_{i}+\\\\displaystyle\\\\sum\\_{j\\\\in F}(\\\\bar{\\\\mathbf{c}}\\_{i,j}-\\\\mathbf{c}\\_{i,j})\\\\mathbf{f}\\_{j} |  |\n\nwhere F\ud835\udc39F is the subset of the features which we intervene on (we describe the selection process for F\ud835\udc39F later in this section). Let \ud835\udc33\ud835\udc33\\\\mathbf{z} denote the output logits of the model when you finish applying it to the patched residual stream \ud835\udc311\u2032,\u2026,\ud835\udc31k\u2032subscriptsuperscript\ud835\udc31\u20321\u2026subscriptsuperscript\ud835\udc31\u2032\ud835\udc58\\\\mathbf{x}^{\\\\prime}\\_{1},...,\\\\mathbf{x}^{\\\\prime}\\_{k}. Finally, compute the KL divergence DK\u200bL(\ud835\udc33\\|\\|\ud835\udc32)D\\_{KL}(\\\\mathbf{z}\\|\\|\\\\mathbf{y}), which measures how close the patched model\u2019s predictions are to the target\u2019s. We compare these interventions to equivalent interventions using principal components found as in Section [3.2]Sparse dictionary features are more interpretable than baselines \u2023 3 Interpreting Dictionary Features \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\").\n\nTo select the feature subset F\ud835\udc39F, we use the Automated Circuit Discovery (ACDC) algorithm of Conmy et al. ( [2023])). In particular, we use their Algorithm 4.1 on our features, treating them as a flat computational graph in which every feature contributes an independent change to the DK\u200bLsubscript\ud835\udc37\ud835\udc3e\ud835\udc3fD\\_{KL} output metric, as described above and averaged over a test set of 50 IOI data points. The result is an ordering on the features so that patching the next feature usually results in a smaller DK\u200bLsubscript\ud835\udc37\ud835\udc3e\ud835\udc3fD\\_{KL} loss than each previous feature. Then our feature subsets F\ud835\udc39F are the first k\ud835\udc58k features under this ordering. We applied ACDC separately on each decomposition.\n\n### 4.2 Precise Localisation of IOI Dictionary Features\n\nWe show in Figure [3]Figure 3 \u2023 4 Identifying Causally-Important Dictionary Features for Indirect Object Identification \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") that our sparse feature dictionaries allow the same amount of model editing, as measured by KL divergence from the target, in fewer patches (Left) and with smaller edit magnitude (Right) than the PCA decomposition. We also show that this does not happen if we train a non-sparse dictionary (\u03b1=0\ud835\udefc0\\\\alpha=0). However, dictionaries with a larger sparsity coefficient \u03b1\ud835\udefc\\\\alpha have lower overall reconstruction accuracy which appears in Figure [3]Figure 3 \u2023 4 Identifying Causally-Important Dictionary Features for Indirect Object Identification \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") as a larger minimum KL divergence. In Figure [3]Figure 3 \u2023 4 Identifying Causally-Important Dictionary Features for Indirect Object Identification \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") we consider interventions on layer 11 of the residual stream, and we plot interventions on other layers in Appendix [F]Appendix F Editing IOI Behaviour on other Layers \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\").\n\n## 5 Case Studies\nIn this section, we investigate individual dictionary features, highlighting several that appear to correspond to a single human-understandable explanation (i.e., that are monosemantic). We perform three analyses of our dictionary features to determine their semantic meanings: (1) Input: We identify which tokens activate the dictionary feature and in which contexts, (2) Output: We determine how ablating the feature changes the output logits of the model, and (3) Intermediate features: We identify the dictionary features in previous layers that cause the analysed feature to activate.\n\n### 5.1 Input: Dictionary Features are Highly Monosemantic\n\nWe first analyse our dictionary directions by checking what text causes them to activate. An idealised monosemantic dictionary feature will only activate on text corresponding to a single real-world feature, whereas a polysemantic dictionary feature might activate in unrelated contexts.\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 4: Histogram of token counts for dictionary feature 556. (Left) For all datapoints that activate dictionary feature 556, we show the count of each token in each activation range. The majority of activations are apostrophes, particularly for higher activations. Notably the lower activating tokens are conceptually similar to apostrophes, such as other punctuation. (Right) We show which token predictions are suppressed by ablating the feature, as measured by the difference in logits between the ablated and unablated model. We find that the token whose prediction decreases the most is the \u201cs\u201d token. Note that there are 12k logits negatively effected, but we set a threshold of 0.1 for visual clarity.\n\nTo better illustrate the monosemanticity of certain dictionary features, we plot the histogram of activations across token activations. This technique only works for dictionary features that activate for a small set of tokens. We find dictionary features that only activate on apostrophes (Figure [4]Figure 4 \u2023 5.1 Input: Dictionary Features are Highly Monosemantic \u2023 5 Case Studies \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")); periods; the token \u201c the\u201d; and newline characters. The apostrophe feature in Figure [4]Figure 4 \u2023 5.1 Input: Dictionary Features are Highly Monosemantic \u2023 5 Case Studies \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") stands in contrast to the default basis for the residual stream, where the dimension that most represents an apostrophe is displayed in Figure [11]Figure 11 \u2023 D.1 Residual Stream Basis \u2023 Appendix D Qualitative Feature Analysis \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") in Appendix [D.1]D.1 Residual Stream Basis \u2023 Appendix D Qualitative Feature Analysis \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\"); this dimension is polysemantic since it represents different information at different activation ranges.\n\nAlthough the dictionary feature discussed in the previous section activates only for apostrophes, it does not activate on _all_ apostrophes. This can be seen in Figures [14]Figure 14 \u2023 D.2 Examples of Learned Features \u2023 Appendix D Qualitative Feature Analysis \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") and [15]Figure 15 \u2023 D.2 Examples of Learned Features \u2023 Appendix D Qualitative Feature Analysis \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") in Appendix [D.2]D.2 Examples of Learned Features \u2023 Appendix D Qualitative Feature Analysis \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\"), showing two other apostrophe-activating dictionary features, but for different contexts (such as \u201c\\[I/We/They\\]\u2019ll\u201d and \u201c\\[don/won/wouldn\\]\u2019t\u201d). Details for how we searched and selected for dictionary features can be found in Appendix [D.3]D.3 Feature Search Details \u2023 Appendix D Qualitative Feature Analysis \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\").\n\n### 5.2 Output: Dictionary Features have Intuitive Effects on the Logits\n\nIn addition to looking at which tokens activate the dictionary feature, we investigate how dictionary features affect the model\u2019s output predictions for the next token by ablating the feature from the residual stream555Specifically we use less-than-rank-one ablation, where we lower the activation vector in the direction of the feature only up to the point where the feature is no longer active.. If our dictionary feature is interpretable, subtracting its value from the residual stream should have a logical effect on the predictions of the next token. We see in Figure [4]Figure 4 \u2023 5.1 Input: Dictionary Features are Highly Monosemantic \u2023 5 Case Studies \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\") (Right) that the effect of removing the apostrophe feature mainly reduces the logit for the following \u201cs\u201d. This matches what one would expect from a dictionary feature that detects apostrophes and is used by the model to predict the \u201cs\u201d token that would appear immediately after the apostrophe in possessives and contractions like \u201clet\u2019s\u201d.\n\n### 5.3 Intermediate Features: Dictionary Features Allow Automatic Circuit Detection\n\nWe can also understand dictionary features in relation to the upstream and downstream dictionary features: given a dictionary feature, which dictionary features in previous layers cause it to activate, and which dictionary features in later layers does it cause to activate?\n\nTo automatically detect the relevant dictionary features, we choose a target dictionary feature such as layer 5\u2019s feature for tokens in parentheses which predicts a closing parentheses (Figure [5]Figure 5 \u2023 5.3 Intermediate Features: Dictionary Features Allow Automatic Circuit Detection \u2023 5 Case Studies \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")). For this target dictionary feature, we find its maximum activation M\ud835\udc40M across our dataset, then sample 20 contexts that cause the target feature to activate in the range \\[M/2,M\\]\ud835\udc402\ud835\udc40\\[M/2,M\\]. For each dictionary feature in the previous layer, we rerun the model while ablating this feature and sort the previous-layer features by how much their ablation decreased the target feature. If desired, we can then recursively apply this technique to the dictionary features in the previous layer with a large impact. The results of this process form a causal tree, such as Figure [5]Figure 5 \u2023 5.3 Intermediate Features: Dictionary Features Allow Automatic Circuit Detection \u2023 5 Case Studies \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\").\n\nBeing the last layer, layer 5\u2019s role is to output directions that directly correspond to tokens in the unembedding matrix. In fact, when we unembed feature 52027subscript520275\\_{2027}, the top-tokens are all closing parentheses variations. Intuitively, previous layers will detect all situations that precede closing parentheses, such as dates, acronyms, and phrases.\n\n![Refer to caption]Figure 5: Circuit for the closing parenthesis dictionary feature, with human interpretations of each feature shown. Edge thickness indicates the strength of the causal effect between dictionary features in successive residual stream layers, as measured by ablations. Many dictionary features across layers correspond to similar real-world features and often point in similar directions in activation space, as measured by cosine similarity.\n\n## 6 Discussion\n### 6.1 Related Work\n\nA limited number of previous works have learned dictionaries of sparsely-activating features in pre-trained models, including Yun et al. ( [2021])) and Sharkey et al. ( [2023])), the latter of which motivated this work. However, similar methods have been applied in other domains, in particular in understanding neurons in the visual cortex (Olshausen & Field, [2004]); Wright & Ma, [2022])).\n\nIn contrast to our approach, where we try to impose sparsity after training, many previous works have encouraged sparsity in neural networks via changes to the architecture or training process. These approaches include altering the attention mechanism (Correia et al., [2019])), adding \u21131superscript\u21131\\\\ell^{1} penalties to neuron activations (Kasioumis et al., [2021]); Georgiadis, [2019])), pruning neurons (Frankle & Carbin, [2018])), and using the softmax function as the non-linearity in the MLP layers (Elhage et al., [2022a])). However, training a state-of-the-art foundation model with these additional constraints is difficult (Elhage et al., [2022a])), and improvements to interpretability are not always realized (Meister et al., [2021])).\n\n### 6.2 Limitations and Future Work\n\nWhile we have presented evidence that our dictionary features are interpretable and causally important, we do not achieve 0 reconstruction loss (Equation [4]In 2 Taking Features out of Superposition with Sparse Dictionary Learning \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")), indicating that our dictionaries fail to capture all the information in a layer\u2019s activations. We have also confirmed this by measuring the perplexity of the model\u2019s predictions when a layer is substituted with its reconstruction. For instance, replacing the residual stream activations in layer 2 of Pythia-70M with our reconstruction of those activations increases the perplexity on the Pile (Gao et al., [2020])) from 25 to 40. To reduce this loss of information, we would like to explore other sparse autoencoder architectures and to try minimizing the change in model outputs when replacing the activations with our reconstructed vectors, rather than the reconstruction loss. Future efforts could also try to improve feature dictionary discovery by incorporating information about the weights of the model or dictionary features found in adjacent layers into the training process.\n\nOur current methods for training sparse autoencoders are best suited to the residual stream. There is evidence that they may be applicable to the MLPs (see Appendix [C]Appendix C Further Autointerpretation Results \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\")), but the training pipeline used to train the dictionaries in this paper is not able to robustly learn overcomplete bases in the intermediate layers of the MLP. We\u2019re excited by future work investigating what changes can be made to better understand the computations performed by the attention heads and MLP layers, each of which poses different challenges.\n\nIn Section [4]Identifying Causally-Important Dictionary Features for Indirect Object Identification \u2023 Sparse Autoencoders Find Highly Interpretable Features in Language Models\"), we show that for the IOI task, behaviour is dependent on a relatively small number of features. Because our dictionary is trained in a task-agnostic way, we expect this result to generalize to similar tasks and behaviours, but more work is needed to confirm this suspicion. If this property generalizes, we would have a set of features which allow for understanding many model behaviours using just a few features per behaviour. We would also like to trace the causal dependencies between features in different layers, with the overarching goal of providing a lens for viewing language models under which causal dependencies are sparse. This would hopefully be a step towards the eventual goal of building an end-to-end understanding of how a model computes its outputs.\n\n### 6.3 Conclusion\n\nSparse autoencoders are a scalable, unsupervised approach to disentangling language model network features from superposition. Our approach requires only unlabelled model activations and uses orders of magnitude less compute than the training of the original models. We have demonstrated that the dictionary features we learn are more interpretable by autointerpretation, letting us pinpoint the features responsible for a given behaviour more finely, and are more monosemantic than comparable methods. This approach could facilitate the mapping of model circuits, targeted model editing, and a better understanding of model representations.\n\nAn ambitious dream in the field of interpretability is enumerative safety (Elhage et al., [2022b])): producing a human-understandable explanation of a model\u2019s computations in terms of a complete list of the model\u2019s features and thereby providing a guarantee that the model will not perform dangerous behaviours such as deception. We hope that the techniques we presented in this paper also provide a step towards achieving this ambition.\n\n#### Acknowledgments\n\nWe would like to thank the OpenAI Researcher Access Program for their grant of model credits for the autointerpretation and CoreWeave for providing EleutherAI with the computing resources for this project. We also thank Nora Belrose, Arthur Conmy, Jake Mendel, and the OpenAI Automated Interpretability Team (Jeff Wu, William Saunders, Steven Bills, Henk Tillman,\nand Daniel Mossing) for valuable discussions regarding the design of various experiments. We thank Wes Gurnee, Adam Jermyn, Stella Biderman, Leo Gao, Curtis Huebner, Scott Emmons, and William Saunders for their feedback on earlier versions of this paper. Thanks to Delta Hessler for proofreading. LR is supported by the Long Term Future Fund. RH is supported by an Open Philanthropy grant. HC was greatly helped by the MATS program, funded by AI Safety Support.\n</Content></Candidate>\n\n<Candidate>Candidate [2]:\nAttention is All you Need.\n\n<Abstract>Abstract: The dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks in an encoder-decoder configuration. The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. We propose a new simple network architecture, the Transformer, based\nsolely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. Experiments on two machine translation tasks show these models to be\nsuperior in quality while being more parallelizable and requiring significantly\nless time to train. Our model achieves 28.4 BLEU on the WMT 2014\nEnglish-to-German translation task, improving over the existing best results,\nincluding ensembles by over 2 BLEU. On the WMT 2014 English-to-French\ntranslation task, our model establishes a new single-model state-of-the-art\nBLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction\nof the training costs of the best models from the literature. We show that the\nTransformer generalizes well to other tasks by applying it successfully to\nEnglish constituency parsing both with large and limited training data.</Abstract><Content>\n## 1 Introduction\nRecurrent neural networks, long short-term memory \\[ [13])\\] and gated recurrent \\[ [7])\\] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation \\[ [35]), [2]), [5])\\]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures \\[ [38]), [24]), [15])\\].\n\nRecurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states htsubscript\u210e\ud835\udc61h\\_{t}, as a function of the previous hidden state ht\u22121subscript\u210e\ud835\udc611h\\_{t-1} and the input for position t\ud835\udc61t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples.\nRecent work has achieved significant improvements in computational efficiency through factorization tricks \\[ [21])\\] and conditional computation \\[ [32])\\], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.\n\nAttention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences \\[ [2]), [19])\\]. In all but a few cases \\[ [27])\\], however, such attention mechanisms are used in conjunction with a recurrent network.\n\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.\n\n## 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU \\[ [16])\\], ByteNet \\[ [18])\\] and ConvS2S \\[ [9])\\], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions \\[ [12])\\]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section [3.2]Attention \u2023 3 Model Architecture \u2023 Attention Is All You Need\").\n\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations \\[ [4]), [27]), [28]), [22])\\].\n\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks \\[ [34])\\].\n\nTo the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution.\nIn the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as \\[ [17]), [18])\\] and \\[ [9])\\].\n\n## 3 Model Architecture\n![Refer to caption]Figure 1: The Transformer - model architecture.\n\nMost competitive neural sequence transduction models have an encoder-decoder structure \\[ [5]), [2]), [35])\\]. Here, the encoder maps an input sequence of symbol representations (x1,\u2026,xn)subscript\ud835\udc651\u2026subscript\ud835\udc65\ud835\udc5b(x\\_{1},...,x\\_{n}) to a sequence of continuous representations \ud835\udc33=(z1,\u2026,zn)\ud835\udc33subscript\ud835\udc671\u2026subscript\ud835\udc67\ud835\udc5b\\\\mathbf{z}=(z\\_{1},...,z\\_{n}). Given \ud835\udc33\ud835\udc33\\\\mathbf{z}, the decoder then generates an output sequence (y1,\u2026,ym)subscript\ud835\udc661\u2026subscript\ud835\udc66\ud835\udc5a(y\\_{1},...,y\\_{m}) of symbols one element at a time. At each step the model is auto-regressive \\[ [10])\\], consuming the previously generated symbols as additional input when generating the next.\n\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure [1]Figure 1 \u2023 3 Model Architecture \u2023 Attention Is All You Need\"), respectively.\n\n### 3.1 Encoder and Decoder Stacks\n\n##### Encoder:\n\nThe encoder is composed of a stack of N=6\ud835\udc416N=6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-wise fully connected feed-forward network. We employ a residual connection \\[ [11])\\] around each of the two sub-layers, followed by layer normalization \\[ [1])\\]. That is, the output of each sub-layer is LayerNorm\u200b(x+Sublayer\u200b(x))LayerNorm\ud835\udc65Sublayer\ud835\udc65\\\\mathrm{LayerNorm}(x+\\\\mathrm{Sublayer}(x)), where Sublayer\u200b(x)Sublayer\ud835\udc65\\\\mathrm{Sublayer}(x) is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension dmodel=512subscript\ud835\udc51model512d\\_{\\\\text{model}}=512.\n\n##### Decoder:\n\nThe decoder is also composed of a stack of N=6\ud835\udc416N=6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position i\ud835\udc56i can depend only on the known outputs at positions less than i\ud835\udc56i.\n\n### 3.2 Attention\n\nAn attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.\n\n#### 3.2.1 Scaled Dot-Product Attention\n\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure [2]Figure 2 \u2023 3.2.2 Multi-Head Attention \u2023 3.2 Attention \u2023 3 Model Architecture \u2023 Attention Is All You Need\")). The input consists of queries and keys of dimension dksubscript\ud835\udc51\ud835\udc58d\\_{k}, and values of dimension dvsubscript\ud835\udc51\ud835\udc63d\\_{v}. We compute the dot products of the query with all keys, divide each by dksubscript\ud835\udc51\ud835\udc58\\\\sqrt{d\\_{k}}, and apply a softmax function to obtain the weights on the values.\n\nIn practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q\ud835\udc44Q. The keys and values are also packed together into matrices K\ud835\udc3eK and V\ud835\udc49V. We compute the matrix of outputs as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Attention\u200b(Q,K,V)=softmax\u200b(Q\u200bKTdk)\u200bVAttention\ud835\udc44\ud835\udc3e\ud835\udc49softmax\ud835\udc44superscript\ud835\udc3e\ud835\udc47subscript\ud835\udc51\ud835\udc58\ud835\udc49\\\\mathrm{Attention}(Q,K,V)=\\\\mathrm{softmax}(\\\\frac{QK^{T}}{\\\\sqrt{d\\_{k}}})V |  | (1) |\n\nThe two most commonly used attention functions are additive attention \\[ [2])\\], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of 1dk1subscript\ud835\udc51\ud835\udc58\\\\frac{1}{\\\\sqrt{d\\_{k}}}. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.\n\nWhile for small values of dksubscript\ud835\udc51\ud835\udc58d\\_{k} the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of dksubscript\ud835\udc51\ud835\udc58d\\_{k}\\[ [3])\\]. We suspect that for large values of dksubscript\ud835\udc51\ud835\udc58d\\_{k}, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients 111To illustrate why the dot products get large, assume that the components of q\ud835\udc5eq and k\ud835\udc58k are independent random variables with mean 00 and variance 111. Then their dot product, q\u22c5k=\u2211i=1dkqi\u200bki\u22c5\ud835\udc5e\ud835\udc58superscriptsubscript\ud835\udc561subscript\ud835\udc51\ud835\udc58subscript\ud835\udc5e\ud835\udc56subscript\ud835\udc58\ud835\udc56q\\\\cdot k=\\\\sum\\_{i=1}^{d\\_{k}}q\\_{i}k\\_{i}, has mean 00 and variance dksubscript\ud835\udc51\ud835\udc58d\\_{k}.. To counteract this effect, we scale the dot products by 1dk1subscript\ud835\udc51\ud835\udc58\\\\frac{1}{\\\\sqrt{d\\_{k}}}.\n\n#### 3.2.2 Multi-Head Attention\n\nScaled Dot-Product Attention\n\n![Refer to caption]\n\nMulti-Head Attention\n\n![Refer to caption]\n\nFigure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.\n\nInstead of performing a single attention function with dmodelsubscript\ud835\udc51modeld\\_{\\\\text{model}}-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h\u210eh times with different, learned linear projections to dksubscript\ud835\udc51\ud835\udc58d\\_{k}, dksubscript\ud835\udc51\ud835\udc58d\\_{k} and dvsubscript\ud835\udc51\ud835\udc63d\\_{v} dimensions, respectively.\nOn each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding dvsubscript\ud835\udc51\ud835\udc63d\\_{v}-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure [2]Figure 2 \u2023 3.2.2 Multi-Head Attention \u2023 3.2 Attention \u2023 3 Model Architecture \u2023 Attention Is All You Need\").\n\nMulti-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | MultiHead\u200b(Q,K,V)MultiHead\ud835\udc44\ud835\udc3e\ud835\udc49\\\\displaystyle\\\\mathrm{MultiHead}(Q,K,V) | =Concat\u200b(head1,\u2026,headh)\u200bWOabsentConcatsubscripthead1\u2026subscriptheadhsuperscript\ud835\udc4a\ud835\udc42\\\\displaystyle=\\\\mathrm{Concat}(\\\\mathrm{head\\_{1}},...,\\\\mathrm{head\\_{h}})W^{O} |  |\n|  | where\u200bheadiwheresubscriptheadi\\\\displaystyle\\\\text{where}~{}\\\\mathrm{head\\_{i}} | =Attention\u200b(Q\u200bWiQ,K\u200bWiK,V\u200bWiV)absentAttention\ud835\udc44subscriptsuperscript\ud835\udc4a\ud835\udc44\ud835\udc56\ud835\udc3esubscriptsuperscript\ud835\udc4a\ud835\udc3e\ud835\udc56\ud835\udc49subscriptsuperscript\ud835\udc4a\ud835\udc49\ud835\udc56\\\\displaystyle=\\\\mathrm{Attention}(QW^{Q}\\_{i},KW^{K}\\_{i},VW^{V}\\_{i}) |  |\n\nWhere the projections are parameter matrices WiQ\u2208\u211ddmodel\u00d7dksubscriptsuperscript\ud835\udc4a\ud835\udc44\ud835\udc56superscript\u211dsubscript\ud835\udc51modelsubscript\ud835\udc51\ud835\udc58W^{Q}\\_{i}\\\\in\\\\mathbb{R}^{d\\_{\\\\text{model}}\\\\times d\\_{k}}, WiK\u2208\u211ddmodel\u00d7dksubscriptsuperscript\ud835\udc4a\ud835\udc3e\ud835\udc56superscript\u211dsubscript\ud835\udc51modelsubscript\ud835\udc51\ud835\udc58W^{K}\\_{i}\\\\in\\\\mathbb{R}^{d\\_{\\\\text{model}}\\\\times d\\_{k}}, WiV\u2208\u211ddmodel\u00d7dvsubscriptsuperscript\ud835\udc4a\ud835\udc49\ud835\udc56superscript\u211dsubscript\ud835\udc51modelsubscript\ud835\udc51\ud835\udc63W^{V}\\_{i}\\\\in\\\\mathbb{R}^{d\\_{\\\\text{model}}\\\\times d\\_{v}} and WO\u2208\u211dh\u200bdv\u00d7dmodelsuperscript\ud835\udc4a\ud835\udc42superscript\u211d\u210esubscript\ud835\udc51\ud835\udc63subscript\ud835\udc51modelW^{O}\\\\in\\\\mathbb{R}^{hd\\_{v}\\\\times d\\_{\\\\text{model}}}.\n\nIn this work we employ h=8\u210e8h=8 parallel attention layers, or heads. For each of these we use dk=dv=dmodel/h=64subscript\ud835\udc51\ud835\udc58subscript\ud835\udc51\ud835\udc63subscript\ud835\udc51model\u210e64d\\_{k}=d\\_{v}=d\\_{\\\\text{model}}/h=64.\nDue to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.\n\n#### 3.2.3 Applications of Attention in our Model\n\nThe Transformer uses multi-head attention in three different ways:\n\n- \u2022\n\n\nIn \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as \\[ [38]), [2]), [9])\\].\n\n- \u2022\n\n\nThe encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.\n\n- \u2022\n\n\nSimilarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to \u2212\u221e-\\\\infty) all values in the input of the softmax which correspond to illegal connections. See Figure [2]Figure 2 \u2023 3.2.2 Multi-Head Attention \u2023 3.2 Attention \u2023 3 Model Architecture \u2023 Attention Is All You Need\").\n\n\n### 3.3 Position-wise Feed-Forward Networks\n\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | FFN\u200b(x)=max\u2061(0,x\u200bW1+b1)\u200bW2+b2FFN\ud835\udc650\ud835\udc65subscript\ud835\udc4a1subscript\ud835\udc4f1subscript\ud835\udc4a2subscript\ud835\udc4f2\\\\mathrm{FFN}(x)=\\\\max(0,xW\\_{1}+b\\_{1})W\\_{2}+b\\_{2} |  | (2) |\n\nWhile the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output is dmodel=512subscript\ud835\udc51model512d\\_{\\\\text{model}}=512, and the inner-layer has dimensionality df\u200bf=2048subscript\ud835\udc51\ud835\udc53\ud835\udc532048d\\_{ff}=2048.\n\n### 3.4 Embeddings and Softmax\n\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension dmodelsubscript\ud835\udc51modeld\\_{\\\\text{model}}. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to \\[ [30])\\]. In the embedding layers, we multiply those weights by dmodelsubscript\ud835\udc51model\\\\sqrt{d\\_{\\\\text{model}}}.\n\n### 3.5 Positional Encoding\n\nSince our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodelsubscript\ud835\udc51modeld\\_{\\\\text{model}} as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed \\[ [9])\\].\n\nIn this work, we use sine and cosine functions of different frequencies:\n\n|     |     |     |\n| --- | --- | --- |\n|  | P\u200bE(p\u200bo\u200bs,2\u200bi)=s\u200bi\u200bn\u200b(p\u200bo\u200bs/100002\u200bi/dmodel)\ud835\udc43subscript\ud835\udc38\ud835\udc5d\ud835\udc5c\ud835\udc602\ud835\udc56\ud835\udc60\ud835\udc56\ud835\udc5b\ud835\udc5d\ud835\udc5c\ud835\udc60superscript100002\ud835\udc56subscript\ud835\udc51model\\\\displaystyle PE\\_{(pos,2i)}=sin(pos/10000^{2i/d\\_{\\\\text{model}}}) |  |\n|  | P\u200bE(p\u200bo\u200bs,2\u200bi+1)=c\u200bo\u200bs\u200b(p\u200bo\u200bs/100002\u200bi/dmodel)\ud835\udc43subscript\ud835\udc38\ud835\udc5d\ud835\udc5c\ud835\udc602\ud835\udc561\ud835\udc50\ud835\udc5c\ud835\udc60\ud835\udc5d\ud835\udc5c\ud835\udc60superscript100002\ud835\udc56subscript\ud835\udc51model\\\\displaystyle PE\\_{(pos,2i+1)}=cos(pos/10000^{2i/d\\_{\\\\text{model}}}) |  |\n\nwhere p\u200bo\u200bs\ud835\udc5d\ud835\udc5c\ud835\udc60pos is the position and i\ud835\udc56i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2\u200b\u03c02\ud835\udf0b2\\\\pi to 10000\u22c52\u200b\u03c0\u22c5100002\ud835\udf0b10000\\\\cdot 2\\\\pi. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k\ud835\udc58k, P\u200bEp\u200bo\u200bs+k\ud835\udc43subscript\ud835\udc38\ud835\udc5d\ud835\udc5c\ud835\udc60\ud835\udc58PE\\_{pos+k} can be represented as a linear function of P\u200bEp\u200bo\u200bs\ud835\udc43subscript\ud835\udc38\ud835\udc5d\ud835\udc5c\ud835\udc60PE\\_{pos}.\n\nWe also experimented with using learned positional embeddings \\[ [9])\\] instead, and found that the two versions produced nearly identical results (see Table [3]Table 3 \u2023 6.2 Model Variations \u2023 6 Results \u2023 Attention Is All You Need\") row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.\n\n## 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x1,\u2026,xn)subscript\ud835\udc651\u2026subscript\ud835\udc65\ud835\udc5b(x\\_{1},...,x\\_{n}) to another sequence of equal length (z1,\u2026,zn)subscript\ud835\udc671\u2026subscript\ud835\udc67\ud835\udc5b(z\\_{1},...,z\\_{n}), with xi,zi\u2208\u211ddsubscript\ud835\udc65\ud835\udc56subscript\ud835\udc67\ud835\udc56superscript\u211d\ud835\udc51x\\_{i},z\\_{i}\\\\in\\\\mathbb{R}^{d}, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata.\n\nOne is the total computational complexity per layer.\nAnother is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required.\n\nThe third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies \\[ [12])\\]. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types.\n\nTable 1:\nMaximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n\ud835\udc5bn is the sequence length, d\ud835\udc51d is the representation dimension, k\ud835\udc58k is the kernel size of convolutions and r\ud835\udc5fr the size of the neighborhood in restricted self-attention.\n\n| Layer Type | Complexity per Layer | Sequential | Maximum Path Length |\n| --- | --- | --- | --- |\n|  |  | Operations |  |\n| Self-Attention | O\u200b(n2\u22c5d)\ud835\udc42\u22c5superscript\ud835\udc5b2\ud835\udc51O(n^{2}\\\\cdot d) | O\u200b(1)\ud835\udc421O(1) | O\u200b(1)\ud835\udc421O(1) |\n| Recurrent | O\u200b(n\u22c5d2)\ud835\udc42\u22c5\ud835\udc5bsuperscript\ud835\udc512O(n\\\\cdot d^{2}) | O\u200b(n)\ud835\udc42\ud835\udc5bO(n) | O\u200b(n)\ud835\udc42\ud835\udc5bO(n) |\n| Convolutional | O\u200b(k\u22c5n\u22c5d2)\ud835\udc42\u22c5\ud835\udc58\ud835\udc5bsuperscript\ud835\udc512O(k\\\\cdot n\\\\cdot d^{2}) | O\u200b(1)\ud835\udc421O(1) | O\u200b(l\u200bo\u200bgk\u200b(n))\ud835\udc42\ud835\udc59\ud835\udc5csubscript\ud835\udc54\ud835\udc58\ud835\udc5bO(log\\_{k}(n)) |\n| Self-Attention (restricted) | O\u200b(r\u22c5n\u22c5d)\ud835\udc42\u22c5\ud835\udc5f\ud835\udc5b\ud835\udc51O(r\\\\cdot n\\\\cdot d) | O\u200b(1)\ud835\udc421O(1) | O\u200b(n/r)\ud835\udc42\ud835\udc5b\ud835\udc5fO(n/r) |\n\nAs noted in Table [1]Table 1 \u2023 4 Why Self-Attention \u2023 Attention Is All You Need\"), a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires O\u200b(n)\ud835\udc42\ud835\udc5bO(n) sequential operations.\nIn terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence length n\ud835\udc5bn is smaller than the representation dimensionality d\ud835\udc51d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece \\[ [38])\\] and byte-pair \\[ [31])\\] representations.\nTo improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of size r\ud835\udc5fr in the input sequence centered around the respective output position. This would increase the maximum path length to O\u200b(n/r)\ud835\udc42\ud835\udc5b\ud835\udc5fO(n/r). We plan to investigate this approach further in future work.\n\nA single convolutional layer with kernel width k<n\ud835\udc58\ud835\udc5bk<n does not connect all pairs of input and output positions. Doing so requires a stack of O\u200b(n/k)\ud835\udc42\ud835\udc5b\ud835\udc58O(n/k) convolutional layers in the case of contiguous kernels, or O\u200b(l\u200bo\u200bgk\u200b(n))\ud835\udc42\ud835\udc59\ud835\udc5csubscript\ud835\udc54\ud835\udc58\ud835\udc5bO(log\\_{k}(n)) in the case of dilated convolutions \\[ [18])\\], increasing the length of the longest paths between any two positions in the network.\nConvolutional layers are generally more expensive than recurrent layers, by a factor of k\ud835\udc58k. Separable convolutions \\[ [6])\\], however, decrease the complexity considerably, to O\u200b(k\u22c5n\u22c5d+n\u22c5d2)\ud835\udc42\u22c5\ud835\udc58\ud835\udc5b\ud835\udc51\u22c5\ud835\udc5bsuperscript\ud835\udc512O(k\\\\cdot n\\\\cdot d+n\\\\cdot d^{2}). Even with k=n\ud835\udc58\ud835\udc5bk=n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.\n\nAs side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences.\n\n## 5 Training\nThis section describes the training regime for our models.\n\n### 5.1 Training Data and Batching\n\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding \\[ [3])\\], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary \\[ [38])\\]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.\n\n### 5.2 Hardware and Schedule\n\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table [3]Table 3 \u2023 6.2 Model Variations \u2023 6 Results \u2023 Attention Is All You Need\")), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days).\n\n### 5.3 Optimizer\n\nWe used the Adam optimizer \\[ [20])\\] with \u03b21=0.9subscript\ud835\udefd10.9\\\\beta\\_{1}=0.9, \u03b22=0.98subscript\ud835\udefd20.98\\\\beta\\_{2}=0.98 and \u03f5=10\u22129italic-\u03f5superscript109\\\\epsilon=10^{-9}. We varied the learning rate over the course of training, according to the formula:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | l\u200br\u200ba\u200bt\u200be=dmodel\u22120.5\u22c5min\u2061(s\u200bt\u200be\u200bp\u200b\\_\u200bn\u200bu\u200bm\u22120.5,s\u200bt\u200be\u200bp\u200b\\_\u200bn\u200bu\u200bm\u22c5w\u200ba\u200br\u200bm\u200bu\u200bp\u200b\\_\u200bs\u200bt\u200be\u200bp\u200bs\u22121.5)\ud835\udc59\ud835\udc5f\ud835\udc4e\ud835\udc61\ud835\udc52\u22c5superscriptsubscript\ud835\udc51model0.5\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d\\_\ud835\udc5b\ud835\udc62superscript\ud835\udc5a0.5\u22c5\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d\\_\ud835\udc5b\ud835\udc62\ud835\udc5a\ud835\udc64\ud835\udc4e\ud835\udc5f\ud835\udc5a\ud835\udc62\ud835\udc5d\\_\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5dsuperscript\ud835\udc601.5lrate=d\\_{\\\\text{model}}^{-0.5}\\\\cdot\\\\min({step\\\\\\_num}^{-0.5},{step\\\\\\_num}\\\\cdot{warmup\\\\\\_steps}^{-1.5}) |  | (3) |\n\nThis corresponds to increasing the learning rate linearly for the first w\u200ba\u200br\u200bm\u200bu\u200bp\u200b\\_\u200bs\u200bt\u200be\u200bp\u200bs\ud835\udc64\ud835\udc4e\ud835\udc5f\ud835\udc5a\ud835\udc62\ud835\udc5d\\_\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d\ud835\udc60warmup\\\\\\_steps training steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We used w\u200ba\u200br\u200bm\u200bu\u200bp\u200b\\_\u200bs\u200bt\u200be\u200bp\u200bs=4000\ud835\udc64\ud835\udc4e\ud835\udc5f\ud835\udc5a\ud835\udc62\ud835\udc5d\\_\ud835\udc60\ud835\udc61\ud835\udc52\ud835\udc5d\ud835\udc604000warmup\\\\\\_steps=4000.\n\n### 5.4 Regularization\n\nWe employ three types of regularization during training:\n\n##### Residual Dropout\n\nWe apply dropout \\[ [33])\\] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of Pd\u200br\u200bo\u200bp=0.1subscript\ud835\udc43\ud835\udc51\ud835\udc5f\ud835\udc5c\ud835\udc5d0.1P\\_{drop}=0.1.\n\n##### Label Smoothing\n\nDuring training, we employed label smoothing of value \u03f5l\u200bs=0.1subscriptitalic-\u03f5\ud835\udc59\ud835\udc600.1\\\\epsilon\\_{ls}=0.1\\[ [36])\\]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n\n## 6 Results\n### 6.1 Machine Translation\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n\n| Model | BLEU |  | Training Cost (FLOPs) |\n| EN-DE | EN-FR |  | EN-DE | EN-FR |\n| ByteNet \\[ [18])\\] | 23.75 |  |  |  |  |\n| Deep-Att + PosUnk \\[ [39])\\] |  | 39.2 |  |  | 1.0\u22c51020\u22c51.0superscript10201.0\\\\cdot 10^{20} |\n| GNMT + RL \\[ [38])\\] | 24.6 | 39.92 |  | 2.3\u22c51019\u22c52.3superscript10192.3\\\\cdot 10^{19} | 1.4\u22c51020\u22c51.4superscript10201.4\\\\cdot 10^{20} |\n| ConvS2S \\[ [9])\\] | 25.16 | 40.46 |  | 9.6\u22c51018\u22c59.6superscript10189.6\\\\cdot 10^{18} | 1.5\u22c51020\u22c51.5superscript10201.5\\\\cdot 10^{20} |\n| MoE \\[ [32])\\] | 26.03 | 40.56 |  | 2.0\u22c51019\u22c52.0superscript10192.0\\\\cdot 10^{19} | 1.2\u22c51020\u22c51.2superscript10201.2\\\\cdot 10^{20} |\n| Deep-Att + PosUnk Ensemble \\[ [39])\\] |  | 40.4 |  |  | 8.0\u22c51020\u22c58.0superscript10208.0\\\\cdot 10^{20} |\n| GNMT + RL Ensemble \\[ [38])\\] | 26.30 | 41.16 |  | 1.8\u22c51020\u22c51.8superscript10201.8\\\\cdot 10^{20} | 1.1\u22c51021\u22c51.1superscript10211.1\\\\cdot 10^{21} |\n| ConvS2S Ensemble \\[ [9])\\] | 26.36 | 41.29 |  | 7.7\u22c51019\u22c57.7superscript10197.7\\\\cdot 10^{19} | 1.2\u22c51021\u22c51.2superscript10211.2\\\\cdot 10^{21} |\n| Transformer (base model) | 27.3 | 38.1 |  | 3.3\u22c5\ud835\udfcf\ud835\udfce\ud835\udfcf\ud835\udfd6bold-\u22c53.3superscript10183.3\\\\cdot 10^{18} |\n| Transformer (big) | 28.4 | 41.8 |  | 2.3\u22c51019\u22c52.3superscript10192.3\\\\cdot 10^{19} |\n\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table [2]Table 2 \u2023 6.1 Machine Translation \u2023 6 Results \u2023 Attention Is All You Need\")) outperforms the best previously reported models (including ensembles) by more than 2.02.02.0 BLEU, establishing a new state-of-the-art BLEU score of 28.428.428.4. The configuration of this model is listed in the bottom line of Table [3]Table 3 \u2023 6.2 Model Variations \u2023 6 Results \u2023 Attention Is All You Need\"). Training took 3.53.53.5 days on 888 P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models.\n\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.041.041.0, outperforming all of the previously published single models, at less than 1/4141/4 the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout rate Pd\u200br\u200bo\u200bp=0.1subscript\ud835\udc43\ud835\udc51\ud835\udc5f\ud835\udc5c\ud835\udc5d0.1P\\_{drop}=0.1, instead of 0.30.30.3.\n\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of 444 and length penalty \u03b1=0.6\ud835\udefc0.6\\\\alpha=0.6\\[ [38])\\]. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length + 505050, but terminate early when possible \\[ [38])\\].\n\nTable [2]Table 2 \u2023 6.1 Machine Translation \u2023 6 Results \u2023 Attention Is All You Need\") summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU 222We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively..\n\n### 6.2 Model Variations\n\nTable 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|  | N\ud835\udc41N | dmodelsubscript\ud835\udc51modeld\\_{\\\\text{model}} | dffsubscript\ud835\udc51ffd\\_{\\\\text{ff}} | h\u210eh | dksubscript\ud835\udc51\ud835\udc58d\\_{k} | dvsubscript\ud835\udc51\ud835\udc63d\\_{v} | Pd\u200br\u200bo\u200bpsubscript\ud835\udc43\ud835\udc51\ud835\udc5f\ud835\udc5c\ud835\udc5dP\\_{drop} | \u03f5l\u200bssubscriptitalic-\u03f5\ud835\udc59\ud835\udc60\\\\epsilon\\_{ls} | train | PPL | BLEU | params |\n|  | steps | (dev) | (dev) | \u00d7106absentsuperscript106\\\\times 10^{6} |\n| base | 6 | 512 | 2048 | 8 | 64 | 64 | 0.1 | 0.1 | 100K | 4.92 | 25.8 | 65 |\n| (A) |  |  |  | 1 | 512 | 512 |  |  |  | 5.29 | 24.9 |  |\n|  |  |  | 4 | 128 | 128 |  |  |  | 5.00 | 25.5 |  |\n|  |  |  | 16 | 32 | 32 |  |  |  | 4.91 | 25.8 |  |\n|  |  |  | 32 | 16 | 16 |  |  |  | 5.01 | 25.4 |  |\n| (B) |  |  |  |  | 16 |  |  |  |  | 5.16 | 25.1 | 58 |\n|  |  |  |  | 32 |  |  |  |  | 5.01 | 25.4 | 60 |\n| (C) | 2 |  |  |  |  |  |  |  |  | 6.11 | 23.7 | 36 |\n| 4 |  |  |  |  |  |  |  |  | 5.19 | 25.3 | 50 |\n| 8 |  |  |  |  |  |  |  |  | 4.88 | 25.5 | 80 |\n|  | 256 |  |  | 32 | 32 |  |  |  | 5.75 | 24.5 | 28 |\n|  | 1024 |  |  | 128 | 128 |  |  |  | 4.66 | 26.0 | 168 |\n|  |  | 1024 |  |  |  |  |  |  | 5.12 | 25.4 | 53 |\n|  |  | 4096 |  |  |  |  |  |  | 4.75 | 26.2 | 90 |\n| (D) |  |  |  |  |  |  | 0.0 |  |  | 5.77 | 24.6 |  |\n|  |  |  |  |  |  | 0.2 |  |  | 4.95 | 25.5 |  |\n|  |  |  |  |  |  |  | 0.0 |  | 4.67 | 25.3 |  |\n|  |  |  |  |  |  |  | 0.2 |  | 5.47 | 25.7 |  |\n| (E) |  | positional embedding instead of sinusoids |  | 4.92 | 25.7 |  |\n| big | 6 | 1024 | 4096 | 16 |  |  | 0.3 |  | 300K | 4.33 | 26.4 | 213 |\n\nTo evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the development set, newstest2013. We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table [3]Table 3 \u2023 6.2 Model Variations \u2023 6 Results \u2023 Attention Is All You Need\").\n\nIn Table [3]Table 3 \u2023 6.2 Model Variations \u2023 6 Results \u2023 Attention Is All You Need\") rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section [3.2.2]Multi-Head Attention \u2023 3.2 Attention \u2023 3 Model Architecture \u2023 Attention Is All You Need\"). While single-head attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n\nIn Table [3]Table 3 \u2023 6.2 Model Variations \u2023 6 Results \u2023 Attention Is All You Need\") rows (B), we observe that reducing the attention key size dksubscript\ud835\udc51\ud835\udc58d\\_{k} hurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings \\[ [9])\\], and observe nearly identical results to the base model.\n\n### 6.3 English Constituency Parsing\n\nTable 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)\n\n|     |     |     |\n| --- | --- | --- |\n| Parser | Training | WSJ 23 F1 |\n| Vinyals & Kaiser el al. (2014) \\[ [37])\\] | WSJ only, discriminative | 88.3 |\n| Petrov et al. (2006) \\[ [29])\\] | WSJ only, discriminative | 90.4 |\n| Zhu et al. (2013) \\[ [40])\\] | WSJ only, discriminative | 90.4 |\n| Dyer et al. (2016) \\[ [8])\\] | WSJ only, discriminative | 91.7 |\n| Transformer (4 layers) | WSJ only, discriminative | 91.3 |\n| Zhu et al. (2013) \\[ [40])\\] | semi-supervised | 91.3 |\n| Huang & Harper (2009) \\[ [14])\\] | semi-supervised | 91.3 |\n| McClosky et al. (2006) \\[ [26])\\] | semi-supervised | 92.1 |\n| Vinyals & Kaiser el al. (2014) \\[ [37])\\] | semi-supervised | 92.1 |\n| Transformer (4 layers) | semi-supervised | 92.7 |\n| Luong et al. (2015) \\[ [23])\\] | multi-task | 93.0 |\n| Dyer et al. (2016) \\[ [8])\\] | generative | 93.3 |\n\nTo evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input.\nFurthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes \\[ [37])\\].\n\nWe trained a 4-layer transformer with dm\u200bo\u200bd\u200be\u200bl=1024subscript\ud835\udc51\ud835\udc5a\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc591024d\\_{model}=1024 on the Wall Street Journal (WSJ) portion of the Penn Treebank \\[ [25])\\], about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences \\[ [37])\\]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.\n\nWe performed only a small number of experiments to select the dropout, both attention and residual (section [5.4]Regularization \u2023 5 Training \u2023 Attention Is All You Need\")), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length + 300300300. We used a beam size of 212121 and \u03b1=0.3\ud835\udefc0.3\\\\alpha=0.3 for both WSJ only and the semi-supervised setting.\n\nOur results in Table [4]Table 4 \u2023 6.3 English Constituency Parsing \u2023 6 Results \u2023 Attention Is All You Need\") show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar \\[ [8])\\].\n\nIn contrast to RNN sequence-to-sequence models \\[ [37])\\], the Transformer outperforms the BerkeleyParser \\[ [29])\\] even when training only on the WSJ training set of 40K sentences.\n\n## 7 Conclusion\nIn this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention.\n\nFor translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.\n\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video.\nMaking generation less sequential is another research goals of ours.\n\nThe code we used to train and evaluate our models is available at [https://github.com/tensorflow/tensor2tensor].\n\n##### Acknowledgements\n\nWe are grateful to Nal Kalchbrenner and Stephan Gouws for\ntheir fruitful comments, corrections and inspiration.\n</Content></Candidate>\n\n<Candidate>Candidate [3]:\nAdversarial examples are not bugs, they are features.\n\n<Abstract>Abstract: Adversarial examples have attracted significant attention in machine\nlearning, but the reasons for their existence and pervasiveness remain unclear.\nWe demonstrate that adversarial examples can be directly attributed to the\npresence of non-robust features: features derived from patterns in the data\ndistribution that are highly predictive, yet brittle and incomprehensible to\nhumans. After capturing these features within a theoretical framework, we\nestablish their widespread existence in standard datasets. Finally, we present\na simple setting where we can rigorously tie the phenomena we observe in\npractice to a misalignment between the (human-specified) notion of robustness\nand the inherent geometry of the data.</Abstract><Content>\n## 1 Introduction\nThe pervasive brittleness of deep neural\nnetworks \\[ [Sze+14]), [Eng+19a]), [HD19]), [Ath+18])\\] has attracted\nsignificant attention in recent years.\nParticularly worrisome is the phenomenon\nof adversarial examples\\[ [Big+13]), [Sze+14])\\],\nimperceptibly perturbed natural inputs that induce erroneous predictions in state-of-the-art classifiers.\nPrevious work has proposed a variety of explanations for this\nphenomenon, ranging from theoretical models\n\\[ [Sch+18]), [BPR18])\\] to arguments based on\nconcentration of measure in high-dimensions\n\\[ [Gil+18]), [MDM18]), [Sha+19])\\]. These\ntheories, however, are often unable to fully capture behaviors we observe\nin practice (we discuss this further in Section [5]Related Work \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\n\nMore broadly, previous work in the field tends to view adversarial examples\nas aberrations arising either from the high dimensional nature of the input\nspace or statistical fluctuations in the training\ndata \\[ [Sze+14]), [GSS15]), [Gil+18])\\].\nFrom this point of view, it is natural to treat adversarial robustness as a\ngoal that can be disentangled and pursued independently from maximizing\naccuracy \\[ [Mad+18]), [SHS19]), [Sug+19])\\],\neither through improved standard regularization\nmethods \\[ [TG16])\\] or\npre/post-processing of network\ninputs/outputs \\[ [Ues+18]), [CW17]), [He+17])\\].\n\nIn this work, we propose a new perspective on the phenomenon of adversarial examples.\nIn contrast to the previous models, we cast\nadversarial vulnerability as a fundamental consequence of the\ndominant supervised learning paradigm. Specifically, we claim that:\n\nAdversarial vulnerability is a direct result of\nour models\u2019 sensitivity to well-generalizing features in the data.\n\nRecall that we usually train classifiers to\nsolely maximize (distributional) accuracy. Consequently,\nclassifiers tend to use any available signal to do so, even those that look\nincomprehensible to humans. After all, the presence of \u201ca tail\u201d or\n\u201cears\u201d is no more natural to a classifier than any other equally\npredictive feature.\nIn fact, we find that standard ML datasets do\nadmit highly predictive yet imperceptible features.\nWe posit that our models learn to rely on these \u201cnon-robust\u201d features,\nleading to adversarial perturbations that exploit this dependence.222It is worth emphasizing that while our findings demonstrate that adversarial vulnerability does arise from non-robust features, they do not preclude the possibility of adversarial vulnerability also arising from other phenomena \\[ [TG16]), [Sch+18])\\]. For example, \\[ [Nak19])\\] constructs adversarial examples that do not exploit non-robust features (and hence do not allow one to learn a generalizing model from them). Still, the mere existence of useful non-robust features suffices to establish that without explicitly discouraging models from utilizing these features, adversarial vulnerability will remain an issue.\n\nOur hypothesis also suggests an explanation for adversarial transferability: the phenomenon that adversarial perturbations computed for one model often transfer to other,\nindependently trained models.\nSince any two models are likely to learn similar non-robust features, perturbations that manipulate such features will apply to both.\nFinally, this perspective establishes adversarial vulnerability as a\nhuman-centric phenomenon, since, from the standard supervised learning point\nof view, non-robust features can be as important as robust ones. It also\nsuggests that approaches aiming to enhance the interpretability of a given model by enforcing \u201cpriors\u201d for\nits\nexplanation \\[ [MV15]), [OMS17]), [Smi+17])\\] actually hide features that are \u201cmeaningful\u201d and predictive\nto standard models. As such, producing human-meaningful explanations that\nremain faithful to underlying models cannot be pursued independently from the\ntraining of the models themselves.\n\nTo corroborate our theory, we show that it is possible to disentangle robust from non-robust\nfeatures in standard image classification datasets.\nSpecifically, given any training dataset, we are able to construct:\n\n1. 1.\n\n\nA \u201crobustified\u201d version for robust classification\n(Figure [1(a)]In Figure 1 \u2023 1 Introduction \u2023 Adversarial Examples Are Not Bugs, They Are Features\"))333The corresponding datasets\nfor CIFAR-10 are publicly available at [http://git.io/adv-datasets]. .\nWe demonstrate that it is possible to\neffectively remove non-robust features from a dataset.\nConcretely, we create a training set (semantically similar to the original) on which standard\ntraining yields good robust accuracy on the original, unmodified test set.\nThis finding establishes that adversarial vulnerability is not necessarily\ntied to the standard training framework, but is also a property of the\ndataset.\n\n2. 2.\n\n\nA \u201cnon-robust\u201d version for standard classification\n(Figure [1(b)]In Figure 1 \u2023 1 Introduction \u2023 Adversarial Examples Are Not Bugs, They Are Features\"))22footnotemark: 2. We are also\nable to construct a training dataset for which the inputs are nearly identical to the originals,\nbut all appear incorrectly labeled. In fact, the inputs in the new training set are associated to their\nlabels only through small adversarial perturbations (and hence utilize only non-robust features).\nDespite the lack of any predictive human-visible information, training on this dataset\nyields good accuracy on the original, unmodified test set.\nThis demonstrates that adversarial perturbations can arise from flipping\nfeatures in the data that are useful for classification of correct inputs\n(hence not being purely aberrations).\n\n\nFinally, we present a concrete classification task where the\nconnection between adversarial examples and non-robust features can be studied rigorously.\nThis task consists of separating Gaussian distributions, and is loosely\nbased on the model presented in \\[ [Tsi+19])\\], while\nexpanding upon it in a few ways.\nFirst, adversarial vulnerability in our setting can be precisely quantified as\na difference between the intrinsic data geometry and that of the\nadversary\u2019s perturbation set.\nSecond, robust training yields a classifier which utilizes a geometry\ncorresponding to a combination of these two.\nLastly, the gradients of standard models can be significantly more\nmisaligned with the inter-class direction, capturing a phenomenon\nthat has been observed in practice in more complex scenarios \\[ [Tsi+19])\\].\n\n![Refer to caption](a)\n\n![Refer to caption](b)\n\nFigure 1: A conceptual diagram of the experiments of\nSection [3]Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\"). In (a) we disentangle features into\ncombinations of robust/non-robust features (Section [3.1]Disentangling robust and non-robust features \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\nIn (b) we construct a dataset\nwhich appears mislabeled to humans (via adversarial examples) but results\nin good accuracy on the original test set (Section [3.2]Non-robust features suffice for standard classification \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\n\n## 2 The Robust Features Model\nWe begin by developing a framework, loosely based on the setting proposed\nby \\[ [Tsi+19])\\], that enables us to rigorously refer to\n\u201crobust\u201d and \u201cnon-robust\u201d features. In particular, we present a set of\ndefinitions which allow us to formally describe our setup, theoretical\nresults, and empirical evidence.\n\n##### Setup.\n\nWe consider binary classification444Our framework can\nbe straightforwardly adapted though to the multi-class setting., where\ninput-label pairs (x,y)\u2208\ud835\udcb3\u00d7{\u00b11}\ud835\udc65\ud835\udc66\ud835\udcb3plus-or-minus1(x,y)\\\\in\\\\mathcal{X}\\\\times\\\\{\\\\pm 1\\\\} are sampled from a (data)\ndistribution \ud835\udc9f\ud835\udc9f\\\\mathcal{D}; the goal is to\nlearn a classifier C:\ud835\udcb3\u2192{\u00b11}:\ud835\udc36\u2192\ud835\udcb3plus-or-minus1C:\\\\mathcal{X}\\\\rightarrow\\\\{\\\\pm 1\\\\} which predicts a label y\ud835\udc66y corresponding\nto a given input x\ud835\udc65x.\n\nWe define a feature to be a function mapping from the\ninput space \ud835\udcb3\ud835\udcb3\\\\mathcal{X} to the real numbers, with the set of all features thus\nbeing \u2131={f:\ud835\udcb3\u2192\u211d}\u2131conditional-set\ud835\udc53\u2192\ud835\udcb3\u211d\\\\mathcal{F}=\\\\{f:\\\\mathcal{X}\\\\to\\\\mathbb{R}\\\\}. For convenience, we assume that\nthe features in \u2131\u2131\\\\mathcal{F} are shifted/scaled to be mean-zero and unit-variance\n(i.e., so that \ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[f\u200b(x)\\]=0subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]\ud835\udc53\ud835\udc650\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\[f(x)\\]=0 and \ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[f\u200b(x)2\\]=1subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]\ud835\udc53superscript\ud835\udc6521\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\[f(x)^{2}\\]=1), in order to make the following definitions\nscale-invariant555This restriction can be straightforwardly\nremoved by simply shifting/scaling the definitions.. Note that this formal\ndefinition also captures what we abstractly think of as features (e.g., we\ncan construct an f\ud835\udc53f that captures how \u201cfurry\u201d an image is).\n\n##### Useful, robust, and non-robust features.\n\nWe now define the key\nconcepts required for formulating our framework. To this end, we categorize\nfeatures in the following manner:\n\n- \u2022\n\n\n\u03c1\ud835\udf0c\\\\rho-useful features: For a given distribution \ud835\udc9f\ud835\udc9f\\\\mathcal{D}, we call a\nfeature f\ud835\udc53f\u03c1\ud835\udf0c\\\\rho-useful (\u03c1>0\ud835\udf0c0\\\\rho>0) if it is correlated with the true\nlabel in expectation, that is if\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[y\u22c5f\u200b(x)\\]\u2265\u03c1.subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]\u22c5\ud835\udc66\ud835\udc53\ud835\udc65\ud835\udf0c\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\[y\\\\cdot f(x)\\]\\\\geq\\\\rho. |  | (1) |\n\n\n\nWe then define \u03c1\ud835\udc9f\u200b(f)subscript\ud835\udf0c\ud835\udc9f\ud835\udc53\\\\rho\\_{\\\\mathcal{D}}(f) as the largest \u03c1\ud835\udf0c\\\\rho for which feature f\ud835\udc53f is\n\u03c1\ud835\udf0c\\\\rho-useful under distribution \ud835\udc9f\ud835\udc9f\\\\mathcal{D}. (Note that if a feature f\ud835\udc53f is negatively\ncorrelated with the\nlabel, then \u2212f\ud835\udc53-f is useful instead.) Crucially, a linear classifier trained on\n\u03c1\ud835\udf0c\\\\rho-useful features can attain non-trivial generalization performance.\n\n- \u2022\n\n\n\u03b3\ud835\udefe\\\\gamma-robustly useful features: Suppose we have a\n\u03c1\ud835\udf0c\\\\rho-useful feature f\ud835\udc53f (\u03c1\ud835\udc9f\u200b(f)>0subscript\ud835\udf0c\ud835\udc9f\ud835\udc530\\\\rho\\_{\\\\mathcal{D}}(f)>0). We refer to f\ud835\udc53f as a robust\nfeature (formally a \u03b3\ud835\udefe\\\\gamma-robustly useful feature for \u03b3>0\ud835\udefe0\\\\gamma>0) if,\nunder adversarial perturbation (for some specified set of valid\nperturbations \u0394\u0394\\\\Delta), f\ud835\udc53f remains \u03b3\ud835\udefe\\\\gamma-useful.\nFormally, if we have that\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[inf\u03b4\u2208\u0394\u200b(x)y\u22c5f\u200b(x+\u03b4)\\]\u2265\u03b3.subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]subscriptinfimum\ud835\udeff\u0394\ud835\udc65\u22c5\ud835\udc66\ud835\udc53\ud835\udc65\ud835\udeff\ud835\udefe\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\\\left\\[\\\\inf\\_{\\\\delta\\\\in\\\\Delta(x)}y\\\\cdot f(x+\\\\delta)\\\\right\\]\\\\geq\\\\gamma. |  | (2) |\n\n- \u2022\n\n\nUseful, non-robust features: A useful, non-robust feature\nis a feature which is \u03c1\ud835\udf0c\\\\rho-useful for some \u03c1\ud835\udf0c\\\\rho bounded away from zero,\nbut is not a \u03b3\ud835\udefe\\\\gamma-robust feature for any \u03b3\u22650\ud835\udefe0\\\\gamma\\\\geq 0. These features\nhelp with classification in the standard setting, but may hinder\naccuracy in the adversarial setting, as the correlation with the label can\nbe flipped.\n\n\n##### Classification.\n\nIn our framework, a classifier C=(F,w,b)\ud835\udc36\ud835\udc39\ud835\udc64\ud835\udc4fC=(F,w,b) is comprised of a set of features F\u2286\u2131\ud835\udc39\u2131F\\\\subseteq\\\\mathcal{F}, a weight\nvector w\ud835\udc64w, and a scalar bias b\ud835\udc4fb. For a given input x\ud835\udc65x, the classifier\npredicts the label y\ud835\udc66y as\n\n|     |     |     |\n| --- | --- | --- |\n|  | C\u200b(x)=sgn\u200b(b+\u2211f\u2208Fwf\u22c5f\u200b(x)).\ud835\udc36\ud835\udc65sgn\ud835\udc4fsubscript\ud835\udc53\ud835\udc39\u22c5subscript\ud835\udc64\ud835\udc53\ud835\udc53\ud835\udc65C(x)=\\\\text{sgn}\\\\left(b+\\\\sum\\_{f\\\\in F}w\\_{f}\\\\cdot f(x)\\\\right). |  |\n\nFor convenience, we denote the set of features learned by a classifier C\ud835\udc36C\nas FCsubscript\ud835\udc39\ud835\udc36F\\_{C}.\n\n##### Standard Training.\n\nTraining a classifier is performed by\nminimizing a loss function (via empirical risk minimization (ERM)) that\ndecreases with the correlation between the weighted combination of the features\nand the label. The simplest example of such a loss is\n666Just as for the other parts of this model, we use this loss\nfor simplicity only\u2014it is straightforward to generalize to more\npractical loss function such as logistic or hinge loss.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[\u2112\u03b8\u200b(x,y)\\]=\u2212\ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[y\u22c5(b+\u2211f\u2208Fwf\u22c5f\u200b(x))\\].subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]subscript\u2112\ud835\udf03\ud835\udc65\ud835\udc66subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]\u22c5\ud835\udc66\ud835\udc4fsubscript\ud835\udc53\ud835\udc39\u22c5subscript\ud835\udc64\ud835\udc53\ud835\udc53\ud835\udc65\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\\\left\\[\\\\mathcal{L}\\_{\\\\theta}(x,y)\\\\right\\]=-\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\\\left\\[y\\\\cdot\\\\left(b+\\\\sum\\_{f\\\\in F}w\\_{f}\\\\cdot f(x)\\\\right)\\\\right\\]. |  | (3) |\n\nWhen minimizing classification loss, no distinction exists between\nrobust and non-robust features: the only distinguishing factor of a feature\nis its \u03c1\ud835\udf0c\\\\rho-usefulness. Furthermore, the classifier will utilize any\u03c1\ud835\udf0c\\\\rho-useful feature in F\ud835\udc39F to decrease the loss of the classifier.\n\n##### Robust training.\n\nIn the presence of an adversary, any useful but\nnon-robust features can be made anti-correlated with the true label,\nleading to adversarial vulnerability. Therefore, ERM is no longer\nsufficient to train\nclassifiers that are robust, and we\nneed to explicitly account for the effect of the adversary on the\nclassifier. To do so, we use an adversarial loss function that can discern\nbetween robust and non-robust features \\[ [Mad+18])\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[max\u03b4\u2208\u0394\u200b(x)\u2061\u2112\u03b8\u200b(x+\u03b4,y)\\],subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]subscript\ud835\udeff\u0394\ud835\udc65subscript\u2112\ud835\udf03\ud835\udc65\ud835\udeff\ud835\udc66\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\\\left\\[\\\\max\\_{\\\\delta\\\\in\\\\Delta(x)}\\\\mathcal{L}\\_{\\\\theta}(x+\\\\delta,y)\\\\right\\], |  | (4) |\n\nfor an appropriately defined set of perturbations \u0394\u0394\\\\Delta. Since the\nadversary can exploit non-robust features to degrade classification\naccuracy, minimizing this adversarial loss (as in adversarial\ntraining \\[ [GSS15]), [Mad+18])\\]) can be viewed\nas explicitly preventing the classifier from learning a useful but\nnon-robust combination of features.\n\n##### Remark.\n\nWe want to note that even though the framework above enables\nus to formally describe and predict the outcome of our experiments, it does not\nnecessarily capture the\nnotion of non-robust features exactly as we intuitively might think of them. For\ninstance, in principle, our theoretical framework would allow for useful\nnon-robust features to arise as combinations of useful robust features and\nuseless non-robust features \\[ [Goh19a])\\]. These types of\nconstructions, however, are actually precluded by our experimental results (in\nparticular, the classifiers trained in Section [3]Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\") would not\ngeneralize). This shows that our experimental findings capture a stronger, more\nfine-grained statement than our formal definitions are able to express. We view\nbridging this gap as an interesting direction for future work.\n\n## 3 Finding Robust (and Non-Robust) Features\nThe central premise of our proposed framework is that there exist both robust and\nnon-robust features that constitute useful signals for standard classification. We now\nprovide evidence in support of this hypothesis by disentangling these two sets\nof features.\n\nOn one hand, we will construct a \u201crobustified\u201d dataset, consisting of samples that\nprimarily contain robust features. Using such a dataset, we are able\nto train robust classifiers (with respect to the standard test set) using\nstandard (i.e., non-robust) training.\nThis demonstrates that robustness can arise by removing certain features from\nthe dataset (as, overall, the new dataset contains less\ninformation about the original training set).\nMoreover, it provides evidence that adversarial vulnerability is caused by\nnon-robust features and is not inherently tied to the standard training framework.\n\nOn the other hand, we will construct datasets where the\ninput-label association is based purely on non-robust features (and thus\nthe corresponding dataset appears completely mislabeled\nto humans). We show that this dataset suffices to train a classifier with good\nperformance on the standard test set. This indicates that natural models use\nnon-robust features to make predictions, even in the presence of robust\nfeatures. These features alone are actually sufficient for non-trivial\ngeneralizations performance on natural images, which indicates that they are\nindeed valuable features, rather than artifacts of finite-sample overfitting.\n\nA conceptual description of these experiments can be found in\nFigure [1]Figure 1 \u2023 1 Introduction \u2023 Adversarial Examples Are Not Bugs, They Are Features\").\n\n![Refer to caption]\n\n(a)\n\n![Refer to caption](b)\n\nFigure 2: Left: Random samples from our variants of the\nCIFAR-10 \\[ [Kri09])\\] training set:\nthe original training set;\nthe robust training set\ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R}, restricted to features used by a\nrobust model; and\nthe non-robust training set\ud835\udc9f^N\u200bRsubscript^\ud835\udc9f\ud835\udc41\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{NR}, restricted to\nfeatures relevant to a standard model (labels appear incorrect to humans).\nRight: Standard and robust accuracy on the CIFAR-10\ntest set (\ud835\udc9f\ud835\udc9f\\\\mathcal{D}) for models trained with:\n(i) standard training (on \ud835\udc9f\ud835\udc9f\\\\mathcal{D}) ;\n(ii) standard training on \ud835\udc9f^N\u200bRsubscript^\ud835\udc9f\ud835\udc41\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{NR};\n(iii) adversarial training (on \ud835\udc9f\ud835\udc9f\\\\mathcal{D}); and\n(iv) standard training on \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R}.\nModels trained on \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R} and \ud835\udc9f^N\u200bRsubscript^\ud835\udc9f\ud835\udc41\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{NR} reflect\nthe original models used to create them: notably,\nstandard training on \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R}\nyields nontrivial robust accuracy. Results for\nRestricted-ImageNet \\[ [Tsi+19])\\] are in\n[D.8]D.8 Omitted Results for Restricted ImageNet \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\") Figure [12]Figure 12 \u2023 D.8 Omitted Results for Restricted ImageNet \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\").\n\n### 3.1 Disentangling robust and non-robust features\n\nRecall that the\nfeatures a classifier learns to rely on are based purely\non how useful these features are for (standard) generalization. Thus, under our conceptual framework,\nif we can ensure that only robust features are useful, standard training\nshould result in a robust classifier.\nUnfortunately, we cannot directly manipulate the features of very complex,\nhigh-dimensional datasets.\nInstead, we will leverage a robust model and modify\nour dataset to contain only the features that are relevant to that model.\n\nIn terms of our formal framework (Section [2]The Robust Features Model \u2023 Adversarial Examples Are Not Bugs, They Are Features\")), given a robust (i.e., adversarially trained \\[ [Mad+18])\\]) model C\ud835\udc36C we aim to construct a\ndistribution \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R} which satisfies:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c(x,y)\u223c\ud835\udc9f^R\u200b\\[f\u200b(x)\u22c5y\\]={\ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[f\u200b(x)\u22c5y\\]if \u200bf\u2208FC0otherwise,subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66subscript^\ud835\udc9f\ud835\udc45delimited-\\[\\]\u22c5\ud835\udc53\ud835\udc65\ud835\udc66casessubscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]\u22c5\ud835\udc53\ud835\udc65\ud835\udc66if \ud835\udc53subscript\ud835\udc39\ud835\udc360otherwise\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\widehat{\\\\mathcal{D}}\\_{R}}\\\\left\\[f(x)\\\\cdot y\\\\right\\]=\\\\begin{cases}\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\\\left\\[f(x)\\\\cdot y\\\\right\\]&\\\\text{if }f\\\\in F\\_{C}\\\\\\<br>0&\\\\text{otherwise},\\\\end{cases} |  | (5) |\n\nwhere FCsubscript\ud835\udc39\ud835\udc36F\\_{C} again represents the set of features utilized by C\ud835\udc36C.\nConceptually, we want features used by C\ud835\udc36C to be as useful as they were on the\noriginal distribution \ud835\udc9f\ud835\udc9f\\\\mathcal{D} while ensuring that the rest of the features are not\nuseful under \ud835\udc9f^N\u200bRsubscript^\ud835\udc9f\ud835\udc41\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{NR}.\n\nWe will construct a training set for \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R} via a one-to-one mapping x\u21a6xrmaps-to\ud835\udc65subscript\ud835\udc65\ud835\udc5fx\\\\mapsto x\\_{r} from the\noriginal training set for \ud835\udc9f\ud835\udc9f\\\\mathcal{D}.\nIn the case of a deep neural network, FCsubscript\ud835\udc39\ud835\udc36F\\_{C}\ncorresponds to exactly the set of activations in the penultimate layer\n(since these correspond to inputs to a linear classifier).\nTo ensure that features used by the model are equally useful under both training\nsets, we (approximately) enforce all features in FCsubscript\ud835\udc39\ud835\udc36F\\_{C} to have similar values for\nboth x\ud835\udc65x and xrsubscript\ud835\udc65\ud835\udc5fx\\_{r} through the following optimization:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minxr\u2061\u2016g\u200b(xr)\u2212g\u200b(x)\u20162,subscriptsubscript\ud835\udc65\ud835\udc5fsubscriptnorm\ud835\udc54subscript\ud835\udc65\ud835\udc5f\ud835\udc54\ud835\udc652\\\\min\\_{x\\_{r}}\\\\\\|g(x\\_{r})-g(x)\\\\\\|\\_{2}, |  | (6) |\n\nwhere x\ud835\udc65x is the original input and g\ud835\udc54g is the mapping from x\ud835\udc65x to the\nrepresentation layer.\nWe optimize this objective using gradient descent in\ninput space777We follow \\[ [Mad+18])\\] and normalize gradient steps\nduring this optimization. Experimental details are provided in\nAppendix [C]Appendix C Experimental Setup \u2023 Adversarial Examples Are Not Bugs, They Are Features\")..\n\nSince we don\u2019t have access to features outside\nFCsubscript\ud835\udc39\ud835\udc36F\\_{C}, there is no way to ensure that the expectation\nin ( [5]In 3.1 Disentangling robust and non-robust features \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")) is zero for all f\u2209FC\ud835\udc53subscript\ud835\udc39\ud835\udc36f\\\\not\\\\in F\\_{C}. To\napproximate this condition, we choose the starting point of gradient descent\nfor the optimization in ( [6]In 3.1 Disentangling robust and non-robust features \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\"))\nto be an input x0subscript\ud835\udc650x\\_{0} which is drawn from \ud835\udc9f\ud835\udc9f\\\\mathcal{D} independently of the label of x\ud835\udc65x\n(we also explore sampling x0subscript\ud835\udc650x\\_{0} from noise in\nAppendix [D.1]D.1 Detailed evaluation of models trained on \u201crobust\u201d dataset \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\nThis choice ensures that any feature present in that input will not be useful\nsince they are not correlated with the label in expectation over x0subscript\ud835\udc650x\\_{0}.\nThe underlying assumption here is that, when performing the optimization\nin ( [6]In 3.1 Disentangling robust and non-robust features \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")), features that are not being directly optimized (i.e.,\nfeatures outside FCsubscript\ud835\udc39\ud835\udc36F\\_{C}) are not affected.\nWe provide pseudocode for the construction in\nFigure [5]Figure 5 \u2023 C.4 Constructing a Robust Dataset \u2023 Appendix C Experimental Setup \u2023 Adversarial Examples Are Not Bugs, They Are Features\") (Appendix [C]Appendix C Experimental Setup \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\n\nGiven the new training set for \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R} (a few random samples are\nvisualized in Figure [2(a)]In Figure 2 \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")), we\ntrain a classifier using standard (non-robust) training. We then test this\nclassifier on the original test set (i.e. \ud835\udc9f\ud835\udc9f\\\\mathcal{D}). The results\n(Figure [2(b)]In Figure 2 \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")) indicate that the classifier learned\nusing the new dataset attains good accuracy in both standard and\nadversarial settings888In an attempt to explain the gap in\naccuracy between the model trained on \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R} and the original\nrobust classifier C\ud835\udc36C, we test distributional shift, by reporting results\non the \u201crobustified\u201d test set in\nAppendix [D.3]D.3 Performance of \u201crobust\u201d training and test set \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\").999In order to gain more confidence in the robustness of the resulting\nmodel, we attempt several diverse attacks in Appendix [D.2]D.2 Adversarial evaluation \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\")..\n\nAs a control, we repeat this methodology using a standard (non-robust) model for C\ud835\udc36C in\nour construction of the dataset. Sample images from the resulting\n\u201cnon-robust dataset\u201d \ud835\udc9f^N\u200bRsubscript^\ud835\udc9f\ud835\udc41\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{NR} are shown in Figure [2(a)]In Figure 2 \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")\u2014they\ntend to resemble more the source image of the optimization x0subscript\ud835\udc650x\\_{0} than the target\nimage x\ud835\udc65x. We find that training on this dataset leads to good standard\naccuracy, yet yields almost no robustness (Figure [2(b)]In Figure 2 \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")). We\nalso verify that this procedure is not simply a matter of encoding the\nweights of the original model\u2014we get the same results for both \ud835\udc9f^Rsubscript^\ud835\udc9f\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{R}\nand \ud835\udc9f^N\u200bRsubscript^\ud835\udc9f\ud835\udc41\ud835\udc45\\\\widehat{\\\\mathcal{D}}\\_{NR} if we train with different architectures than that of the\noriginal models.\n\nOverall, our findings corroborate the hypothesis that adversarial examples\ncan arise from (non-robust) features of the data itself. By\nfiltering out non-robust features from the dataset (e.g. by restricting the\nset of available features to those used by a robust model), one can train a\nsignificantly more robust model using standard training.\n\n### 3.2 Non-robust features suffice for standard classification\n\nThe results of the previous section show that by restricting the dataset to\nonly contain features that are used by a robust model, standard training results\nin classifiers that are significantly more robust. This suggests that when training on the standard\ndataset, non-robust features take on a large role in the resulting learned\nclassifier. Here we set out to show that this role is not merely incidental or\ndue to finite-sample overfitting. In particular, we demonstrate that\nnon-robust features alone suffice for standard generalization\u2014\ni.e., a model trained solely on non-robust features can perform well on\nthe standard test set.\n\nTo show this, we construct a dataset where the only features that\nare useful for classification are non-robust features (or in terms of\nour formal model from Section [2]The Robust Features Model \u2023 Adversarial Examples Are Not Bugs, They Are Features\"), all features f\ud835\udc53f that are \u03c1\ud835\udf0c\\\\rho-useful are\nnon-robust).\nTo accomplish this, we modify each input-label pair (x,y)\ud835\udc65\ud835\udc66(x,y) as follows.\nWe select a target class t\ud835\udc61t either (a) uniformly at random among\nclasses (hence features become uncorrelated with the labels) or (b)\ndeterministically according to the source class (e.g. using a fixed permutation\nof labels).\nThen, we add a small adversarial perturbation to x\ud835\udc65x in order to ensure it is\nclassified as t\ud835\udc61t by a standard model. Formally:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xa\u200bd\u200bv=arg\u200bmin\u2016x\u2032\u2212x\u2016\u2264\u03b5\u2061LC\u200b(x\u2032,t),subscript\ud835\udc65\ud835\udc4e\ud835\udc51\ud835\udc63subscriptargminnormsuperscript\ud835\udc65\u2032\ud835\udc65\ud835\udf00subscript\ud835\udc3f\ud835\udc36superscript\ud835\udc65\u2032\ud835\udc61x\\_{adv}=\\\\operatorname\\*{arg\\\\,min}\\_{\\\\\\|x^{\\\\prime}-x\\\\\\|\\\\leq\\\\varepsilon}\\ L\\_{C}(x^{\\\\prime},t), |  | (7) |\n\nwhere LCsubscript\ud835\udc3f\ud835\udc36L\\_{C} is the loss under a standard (non-robust) classifier C\ud835\udc36C and \u03b5\ud835\udf00\\\\varepsilon\nis a small constant. The resulting inputs are nearly indistinguishable\nfrom the originals (Appendix [D]Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\")\nFigure [9]Figure 9 \u2023 D.4 Classification based on non-robust features \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\"))\u2014to a human observer,\nit thus appears that the label t\ud835\udc61t assigned to the modified input is simply incorrect.\nThe resulting input-label pairs (xa\u200bd\u200bv,t)subscript\ud835\udc65\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc61(x\\_{adv},t) make up the new\ntraining set (pseudocode in Appendix [C]Appendix C Experimental Setup \u2023 Adversarial Examples Are Not Bugs, They Are Features\") Figure [6]Figure 6 \u2023 C.5 Non-robust features suffice for standard classification \u2023 Appendix C Experimental Setup \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\n\nNow, since \u2016xa\u200bd\u200bv\u2212x\u2016normsubscript\ud835\udc65\ud835\udc4e\ud835\udc51\ud835\udc63\ud835\udc65\\\\\\|x\\_{adv}-x\\\\\\| is small, by definition the robust features\nof xa\u200bd\u200bvsubscript\ud835\udc65\ud835\udc4e\ud835\udc51\ud835\udc63x\\_{adv} are still correlated with class y\ud835\udc66y (and not t\ud835\udc61t) in expectation\nover the dataset. After all, humans still recognize the original class.\nOn the other hand, since every xa\u200bd\u200bvsubscript\ud835\udc65\ud835\udc4e\ud835\udc51\ud835\udc63x\\_{adv} is strongly\nclassified as t\ud835\udc61t by a standard classifier, it must be that some of the\nnon-robust features are now strongly correlated with t\ud835\udc61t (in expectation).\n\nIn the case where t\ud835\udc61t is chosen at random, the robust features\nare originally uncorrelated with the label t\ud835\udc61t (in expectation), and after the\nadversarial perturbation can be only slightly correlated (hence being\nsignificantly less useful for classification than before)\n101010\\[ [Goh19])\\] provides an approach to quantifying this \u201crobust feature\nleakage\u201d and finds that one can obtain a (small) amount of test accuracy by\nleveraging robust feature leakage on \ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand}..\nFormally, we aim to construct a dataset \ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand} where\n111111Note that the optimization procedure we describe aims to merely\napproximate this condition, where we once again use trained models to simulate\naccess to robust and non-robust features.\n:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c(x,y)\u223c\ud835\udc9f^r\u200ba\u200bn\u200bd\u200b\\[y\u22c5f\u200b(x)\\]\u200b{>0if \u200bf\u200b non-robustly useful under \u200b\ud835\udc9f,\u22430otherwise.subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66subscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51delimited-\\[\\]\u22c5\ud835\udc66\ud835\udc53\ud835\udc65casesabsent0if \ud835\udc53 non-robustly useful under \ud835\udc9fsimilar-to-or-equalsabsent0otherwise.\\\\mathbb{E}\\_{(x,y)\\\\sim{\\\\widehat{\\\\mathcal{D}}\\_{rand}}}\\\\left\\[y\\\\cdot f(x)\\\\right\\]\\\\begin{cases}>0&\\\\text{if }f\\\\text{ non-robustly useful under }\\\\mathcal{D},\\\\\\<br>\\\\simeq 0&\\\\text{otherwise.}\\\\end{cases} |  | (8) |\n\nIn contrast, when t\ud835\udc61t is chosen deterministically based on y\ud835\udc66y, the robust\nfeatures actually point away from the assigned label t\ud835\udc61t.\nIn particular, all of the inputs labeled with class t\ud835\udc61t exhibit non-robust features correlated with t\ud835\udc61t, but robust features correlated\nwith the original class y\ud835\udc66y.\nThus, robust features on the original training set provide significant\npredictive power on the training set, but will actually hurt generalization\non the standard test set. Viewing this case again using the formal model,\nour goal is to construct \ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det} such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c(x,y)\u223c\ud835\udc9f^d\u200be\u200bt\u200b\\[y\u22c5f\u200b(x)\\]\u200b{>0if \u200bf\u200b non-robustly useful under \u200b\ud835\udc9f,<0if \u200bf\u200b robustly useful under \u200b\ud835\udc9f\u2208\u211dotherwise (f not useful under \ud835\udc9f)121212<br>Note that regardless how useful a feature is on ^Ddet, since it is<br>useless on D it cannot provide any generalization benefit on the<br>unaltered test set.<br>subscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66subscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61delimited-\\[\\]\u22c5\ud835\udc66\ud835\udc53\ud835\udc65casesabsent0if \ud835\udc53 non-robustly useful under \ud835\udc9fabsent0if \ud835\udc53 robustly useful under \ud835\udc9fabsent\u211dotherwise (f not useful under \ud835\udc9f)121212<br>Note that regardless how useful a feature is on ^Ddet, since it is<br>useless on D it cannot provide any generalization benefit on the<br>unaltered test set.<br>\\\\mathbb{E}\\_{(x,y)\\\\sim{\\\\widehat{\\\\mathcal{D}}\\_{det}}}\\\\left\\[y\\\\cdot f(x)\\\\right\\]\\\\begin{cases}>0&\\\\text{if }f\\\\text{ non-robustly useful under }\\\\mathcal{D},\\\\\\<br><0&\\\\text{if }f\\\\text{ robustly useful under }\\\\mathcal{D}\\\\\\<br>\\\\in\\\\mathbb{R}&\\\\text{otherwise ($f$ not useful under<br>$\\\\mathcal{D}$)}\\\\par\\\\end{cases} |  | (9) |\n\nWe find that standard training on these datasets\nactually generalizes to the original\ntest set, as shown in\nTable [1]Table 1 \u2023 3.2 Non-robust features suffice for standard classification \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\nThis indicates that non-robust\nfeatures are indeed useful for classification in the standard setting.\nRemarkably, even training on \ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det} (where all\nthe robust features are correlated with the wrong class),\nresults in a well-generalizing classifier.\nThis indicates that non-robust features can be picked up by models during\nstandard training,\neven in the presence of robust features that are predictive\n131313Additional results and analysis (e.g. training curves,\ngenerating \ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand} and \ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det} with a robust model, etc.) are in\nApp.  [D.6]D.6 Performance of ERM classifiers on relabeled test set \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\") and [D.5]D.5 Accuracy curves \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\")141414We\nalso show that the models trained on \ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand} and \ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det} generalize to\nCIFAR-10.1 \\[ [Rec+19])\\] in Appendix [D.7]D.7 Generalization to CIFAR-10.1 \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\")..\n\n![[Uncaptioned image]]\n\nFigure 3: Transfer rate of adversarial examples from a ResNet-50\nto different architectures alongside test set performance of\nthese architecture when trained on the dataset\ngenerated in Section [3.2]Non-robust features suffice for standard classification \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\"). Architectures more susceptible to transfer\nattacks also performed better on the standard test set supporting our\nhypothesis that adversarial transferability arises from utilizing similar\nnon-robust features.\n\n| Source Dataset | Dataset |\n| CIFAR-10 | ImageNetR |\n| \ud835\udc9f\ud835\udc9f\\\\mathcal{D} | 95.3% | 96.6% |\n| \ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand} | 63.3% | 87.9% |\n| \ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det} | 43.7% | 64.4% |\n\nTable 1: Test accuracy (on \ud835\udc9f\ud835\udc9f\\\\mathcal{D}) of classifiers trained on the\n\ud835\udc9f\ud835\udc9f\\\\mathcal{D}, \ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand}, and \ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det} training sets created using a standard\n(non-robust) model. For both \ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand} and\n\ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det}, only non-robust features correspond to useful features on both\nthe train set and \ud835\udc9f\ud835\udc9f\\\\mathcal{D}. These datasets are constructed using\nadversarial perturbations of x\ud835\udc65x towards a class t\ud835\udc61t (random for\n\ud835\udc9f^r\u200ba\u200bn\u200bdsubscript^\ud835\udc9f\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc51\\\\widehat{\\\\mathcal{D}}\\_{rand} and deterministic for \ud835\udc9f^d\u200be\u200btsubscript^\ud835\udc9f\ud835\udc51\ud835\udc52\ud835\udc61\\\\widehat{\\\\mathcal{D}}\\_{det});\nthe resulting images are relabeled as t\ud835\udc61t.\n\n### 3.3 Transferability can arise from non-robust features\n\nOne of the most intriguing\nproperties of adversarial examples is that they transfer across models\nwith different architectures and independently sampled\ntraining sets \\[ [Sze+14]), [PMG16]), [CRP19])\\].\nHere, we show that this phenomenon can in fact be viewed as\na natural consequence of the existence of non-robust features.\nRecall that, according to our main thesis, adversarial examples can arise as a\nresult of perturbing well-generalizing, yet brittle features.\nGiven that such features are inherent to the data distribution, different\nclassifiers trained on independent samples from that distribution are likely to\nutilize similar non-robust features.\nConsequently, an adversarial example constructed by exploiting the non-robust\nfeatures learned by one classifier will transfer to any other classifier\nutilizing these features in a similar manner.\n\nIn order to illustrate and corroborate this hypothesis, we train five\ndifferent architectures on the dataset generated in Section [3.2]Non-robust features suffice for standard classification \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")\n(adversarial examples with deterministic labels)\nfor a standard ResNet-50 \\[ [He+16])\\].\nOur hypothesis would suggest that\narchitectures which learn better from this training set (in\nterms of performance on the standard test set) are more likely to learn\nsimilar non-robust\nfeatures to the original classifier.\nIndeed, we find that the test accuracy of each\narchitecture is predictive of how often adversarial examples transfer from the\noriginal model to standard classifiers with that architecture\n(Figure [3]Figure 3 \u2023 3.2 Non-robust features suffice for standard classification \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")).\nIn a similar vein, \\[ [Nak19])\\] constructs a set of adversarial\nperturbations that is explicitly non-transferable and finds that these\nperturbations cannot be used to learn a good classifier.\nThese findings thus corroborate our hypothesis that adversarial\ntransferability arises when models learn similar brittle features of the\nunderlying dataset.\n\n## 4 A Theoretical Framework for Studying (Non)-Robust Features\nThe experiments from the previous section demonstrate that the conceptual\nframework of robust and non-robust features is strongly predictive of the\nempirical behavior of state-of-the-art models on real-world datasets.\nIn order to further strengthen our understanding of the phenomenon, we instantiate\nthe framework in a concrete setting that allows us to theoretically study\nvarious properties of the corresponding model.\nOur model is similar to that of \\[ [Tsi+19])\\] in the sense\nthat it contains a dichotomy between robust and non-robust features, but\nextends upon it in a number of ways:\n\n1. 1.\n\n\nThe adversarial vulnerability can be explicitly expressed as a\ndifference between the inherent data metric and the \u21132subscript\u21132\\\\ell\\_{2}\nmetric.\n\n2. 2.\n\n\nRobust learning corresponds exactly to learning a combination of these\ntwo metrics.\n\n3. 3.\n\n\nThe gradients of adversarially trained models align better with the\nadversary\u2019s metric.\n\n\n##### Setup.\n\nWe study a simple problem of maximum likelihood\nclassification between two Gaussian distributions. In particular, given samples\n(x,y)\ud835\udc65\ud835\udc66(x,y) sampled from \ud835\udc9f\ud835\udc9f\\\\mathcal{D} according to\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | y\u223cu.a.r.{\u22121,+1},x\u223c\ud835\udca9\u200b(y\u22c5\ud835\udf41\u2217,\ud835\udeba\u2217),formulae-sequencesuperscriptsimilar-tou.a.r.\ud835\udc6611similar-to\ud835\udc65\ud835\udca9\u22c5\ud835\udc66subscript\ud835\udf41subscript\ud835\udebay\\\\stackrel{{\\\\scriptstyle\\\\text{u.a.r.}}}{{\\\\sim}}\\\\{-1,+1\\\\},\\\\qquad x\\\\sim\\\\mathcal{N}(y\\\\cdot\\\\bm{\\\\mu}\\_{\\*},\\\\bm{\\\\Sigma}\\_{\\*}), |  | (10) |\n\nour goal is to learn parameters \u0398=(\ud835\udf41,\ud835\udeba)\u0398\ud835\udf41\ud835\udeba\\\\Theta=(\\\\bm{\\\\mu},\\\\bm{\\\\Sigma}) such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u0398=arg\u2061min\ud835\udf41,\ud835\udeba\u2061\ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[\u2113\u200b(x;y\u22c5\ud835\udf41,\ud835\udeba)\\],\u0398subscript\ud835\udf41\ud835\udebasubscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]\u2113\ud835\udc65\u22c5\ud835\udc66\ud835\udf41\ud835\udeba\\\\Theta=\\\\arg\\\\min\\_{\\\\bm{\\\\mu},\\\\bm{\\\\Sigma}}\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\\\left\\[\\\\ell(x;y\\\\cdot\\\\bm{\\\\mu},\\\\bm{\\\\Sigma})\\\\right\\], |  | (11) |\n\nwhere \u2113\u200b(x;\ud835\udf41,\ud835\udeba)\u2113\ud835\udc65\ud835\udf41\ud835\udeba\\\\ell(x;\\\\bm{\\\\mu},\\\\bm{\\\\Sigma}) represents the Gaussian negative log-likelihood (NLL)\nfunction. Intuitively, we find the parameters \ud835\udf41,\ud835\udeba\ud835\udf41\ud835\udeba\\\\bm{\\\\mu},\\\\bm{\\\\Sigma} which maximize the\nlikelihood of the sampled data under the given model. Classification under this\nmodel can be accomplished via likelihood test: given an unlabeled sample x\ud835\udc65x, we\npredict y\ud835\udc66y as\n\n|     |     |     |\n| --- | --- | --- |\n|  | y=arg\u2061maxy\u2061\u2113\u200b(x;y\u22c5\ud835\udf41,\ud835\udeba)=sign\u200b(x\u22a4\u200b\ud835\udeba\u22121\u200b\ud835\udf41).\ud835\udc66subscript\ud835\udc66\u2113\ud835\udc65\u22c5\ud835\udc66\ud835\udf41\ud835\udebasignsuperscript\ud835\udc65topsuperscript\ud835\udeba1\ud835\udf41y=\\\\arg\\\\max\\_{y}\\\\ell(x;y\\\\cdot\\\\bm{\\\\mu},\\\\bm{\\\\Sigma})=\\\\text{sign}\\\\left(x^{\\\\top}\\\\bm{\\\\Sigma}^{-1}\\\\bm{\\\\mu}\\\\right). |  |\n\nIn turn, the robust analogue of this problem arises from\nreplacing \u2113\u200b(x;y\u22c5\ud835\udf41,\ud835\udeba)\u2113\ud835\udc65\u22c5\ud835\udc66\ud835\udf41\ud835\udeba\\\\ell(x;y\\\\cdot\\\\bm{\\\\mu},\\\\bm{\\\\Sigma}) with the NLL under adversarial\nperturbation.\nThe resulting robust parameters \u0398rsubscript\u0398\ud835\udc5f\\\\Theta\\_{r} can be written as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u0398r=arg\u2061min\ud835\udf41,\ud835\udeba\u2061\ud835\udd3c(x,y)\u223c\ud835\udc9f\u200b\\[max\u2016\u03b4\u20162\u2264\u03b5\u2061\u2113\u200b(x+\u03b4;y\u22c5\ud835\udf41,\ud835\udeba)\\],subscript\u0398\ud835\udc5fsubscript\ud835\udf41\ud835\udebasubscript\ud835\udd3csimilar-to\ud835\udc65\ud835\udc66\ud835\udc9fdelimited-\\[\\]subscriptsubscriptnorm\ud835\udeff2\ud835\udf00\u2113\ud835\udc65\ud835\udeff\u22c5\ud835\udc66\ud835\udf41\ud835\udeba\\\\displaystyle\\\\Theta\\_{r}=\\\\arg\\\\min\\_{\\\\bm{\\\\mu},\\\\bm{\\\\Sigma}}\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathcal{D}}\\\\left\\[\\\\max\\_{\\\\\\|\\\\delta\\\\\\|\\_{2}\\\\leq\\\\varepsilon}\\\\ell(x+\\\\delta;y\\\\cdot\\\\bm{\\\\mu},\\\\bm{\\\\Sigma})\\\\right\\], |  | (12) |\n\nA detailed analysis of this setting is in Appendix [E]Appendix E Gaussian MLE under Adversarial Perturbation \u2023 Adversarial Examples Are Not Bugs, They Are Features\")\u2014here\nwe present a high-level overview of the results.\n\n##### (1) Vulnerability from metric misalignment (non-robust features).\n\nNote that in this model, one can\nrigorously make reference to an inner product (and thus a metric) induced\nby the features. In particular, one can view the learned parameters of a\nGaussian \u0398=(\ud835\udf41,\ud835\udeba)\u0398\ud835\udf41\ud835\udeba\\\\Theta=(\\\\bm{\\\\mu},\\\\bm{\\\\Sigma}) as defining an inner product over the input\nspace given by \u27e8x,y\u27e9\u0398=(x\u2212\ud835\udf41)\u22a4\u200b\ud835\udeba\u22121\u200b(y\u2212\ud835\udf41)subscript\ud835\udc65\ud835\udc66\u0398superscript\ud835\udc65\ud835\udf41topsuperscript\ud835\udeba1\ud835\udc66\ud835\udf41\\\\left\\\\langle{x},{y}\\\\right\\\\rangle\\_{\\\\Theta}=(x-\\\\bm{\\\\mu})^{\\\\top}\\\\bm{\\\\Sigma}^{-1}(y-\\\\bm{\\\\mu}). This in\nturn induces the Mahalanobis distance, which represents how a change in the\ninput affects the features learned by the classifier.\nThis metric is not necessarily aligned with the metric in which the adversary is\nconstrained, the \u21132subscript\u21132\\\\ell\\_{2}-norm.\nActually, we show that adversarial vulnerability arises exactly as a misalignment\nof these two metrics.\n\n###### Theorem 1(Adversarial vulnerability from misalignment).\n\nConsider an adversary whose perturbation is determined by the\n\u201cLagrangian penalty\u201d form of ( [12]In Setup. \u2023 4 A Theoretical Framework for Studying (Non)-Robust Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")), i.e.\n\n|     |     |     |\n| --- | --- | --- |\n|  | max\u03b4\u2061\u2113\u200b(x+\u03b4;y\u22c5\ud835\udf41,\ud835\udeba)\u2212C\u22c5\u2016\u03b4\u20162,subscript\ud835\udeff\u2113\ud835\udc65\ud835\udeff\u22c5\ud835\udc66\ud835\udf41\ud835\udeba\u22c5\ud835\udc36subscriptnorm\ud835\udeff2\\\\max\\_{\\\\delta}\\\\ell(x+\\\\delta;y\\\\cdot\\\\bm{\\\\mu},\\\\bm{\\\\Sigma})-C\\\\cdot\\\\\\|\\\\delta\\\\\\|\\_{2}, |  |\n\nwhere C\u22651\u03c3m\u200bi\u200bn\u200b(\ud835\udeba\u2217)\ud835\udc361subscript\ud835\udf0e\ud835\udc5a\ud835\udc56\ud835\udc5bsubscript\ud835\udebaC\\\\geq\\\\frac{1}{\\\\sigma\\_{min}(\\\\bm{\\\\Sigma}\\_{\\*})} is a constant trading\noff NLL minimization and the adversarial constraint151515The\nconstraint on C\ud835\udc36C is to ensure the problem is concave..\nThen, the adversarial loss \u2112a\u200bd\u200bvsubscript\u2112\ud835\udc4e\ud835\udc51\ud835\udc63\\\\mathcal{L}\\_{adv} incurred by the\nnon-robustly learned (\ud835\udecd,\ud835\udeba)\ud835\udecd\ud835\udeba(\\\\bm{\\\\mu},\\\\bm{\\\\Sigma}) is given by:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u2112a\u200bd\u200bv\u200b(\u0398)\u2212\u2112\u200b(\u0398)subscript\u2112\ud835\udc4e\ud835\udc51\ud835\udc63\u0398\u2112\u0398\\\\displaystyle\\\\mathcal{L}\\_{adv}(\\\\Theta)-\\\\mathcal{L}(\\\\Theta) | =tr\u200b\\[(I+(C\u22c5\ud835\udeba\u2217\u2212I)\u22121)2\\]\u2212d,absenttrdelimited-\\[\\]superscript\ud835\udc3csuperscript\u22c5\ud835\udc36subscript\ud835\udeba\ud835\udc3c12\ud835\udc51\\\\displaystyle=\\\\text{tr}\\\\left\\[\\\\left(I+\\\\left(C\\\\cdot\\\\bm{\\\\Sigma}\\_{\\*}-I\\\\right)^{-1}\\\\right)^{2}\\\\right\\]-d, |  |\n\nand, for a fixed tr\u200b(\ud835\udeba\u2217)=ktrsubscript\ud835\udeba\ud835\udc58\\\\text{tr}(\\\\bm{\\\\Sigma}\\_{\\*})=k the above is minimized by\n\ud835\udeba\u2217=kd\u200b\ud835\udc08subscript\ud835\udeba\ud835\udc58\ud835\udc51\ud835\udc08\\\\bm{\\\\Sigma}\\_{\\*}=\\\\frac{k}{d}\\\\bm{I}.\n\nIn fact, note that such a misalignment corresponds precisely to the existence of\nnon-robust features, as it indicates that \u201csmall\u201d changes in the\nadversary\u2019s metric along certain directions can cause large changes\nunder the data-dependent notion of distance established by the parameters.\nThis is illustrated in Figure [4]Figure 4 \u2023 (2) Robust Learning. \u2023 4 A Theoretical Framework for Studying (Non)-Robust Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\"), where misalignment\nin the feature-induced metric is responsible for the presence of a non-robust\nfeature in the corresponding classification problem.\n\n##### (2) Robust Learning.\n\nThe optimal (non-robust) maximum likelihood estimate is \u0398=\u0398\u2217\u0398superscript\u0398\\\\Theta=\\\\Theta^{\\*}, and thus the vulnerability for the standard MLE estimate is governed\nentirely by the true data distribution.\nThe following theorem characterizes the behaviour of the\nlearned parameters in the robust problem. 161616Note: as discussed in\nAppendix [E.3.3]E.3.3 Real objective \u2023 E.3 Proofs \u2023 Appendix E Gaussian MLE under Adversarial Perturbation \u2023 Adversarial Examples Are Not Bugs, They Are Features\"), we study a slight relaxation\nof ( [12]In Setup. \u2023 4 A Theoretical Framework for Studying (Non)-Robust Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")) that approaches exactness exponentially fast as\nd\u2192\u221e\u2192\ud835\udc51d\\\\rightarrow\\\\infty.\nIn fact, we can prove (Section [E.3.4]E.3.4 Danskin\u2019s Theorem \u2023 E.3 Proofs \u2023 Appendix E Gaussian MLE under Adversarial Perturbation \u2023 Adversarial Examples Are Not Bugs, They Are Features\")) that performing\n(sub)gradient descent on the inner maximization (also known as adversarial\ntraining\\[ [GSS15]), [Mad+18])\\])\nyields exactly \u0398rsubscript\u0398\ud835\udc5f\\\\Theta\\_{r}. We find that as the perturbation\nbudget \u03b5\ud835\udf00\\\\varepsilon is increased, the metric induced by the learned features mixes\u21132subscript\u21132\\\\ell\\_{2} and the metric induced by the features.\n\n###### Theorem 2(Robustly Learned Parameters).\n\nJust as in the non-robust case, \ud835\udecdr=\ud835\udecd\u2217subscript\ud835\udecd\ud835\udc5fsuperscript\ud835\udecd\\\\bm{\\\\mu}\\_{r}=\\\\bm{\\\\mu}^{\\*}, i.e. the true mean is\nlearned. For the robust covariance \ud835\udebarsubscript\ud835\udeba\ud835\udc5f\\\\bm{\\\\Sigma}\\_{r},\nthere exists an \u03b50>0subscript\ud835\udf0000\\\\varepsilon\\_{0}>0, such that for any \u03b5\u2208\\[0,\u03b50)\ud835\udf000subscript\ud835\udf000\\\\varepsilon\\\\in\\[0,\\\\varepsilon\\_{0}),\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | \ud835\udebar=12\u200b\ud835\udeba\u2217+1\u03bb\u22c5\ud835\udc70+1\u03bb\u22c5\ud835\udeba\u2217+14\u200b\ud835\udeba\u22172, where \u03a9\u200b(1+\u03b51/2\u03b51/2+\u03b53/2)\u2264\u03bb\u2264O\u200b(1+\u03b51/2\u03b51/2).formulae-sequencesubscript\ud835\udeba\ud835\udc5f12subscript\ud835\udeba\u22c51\ud835\udf06\ud835\udc70\u22c51\ud835\udf06subscript\ud835\udeba14superscriptsubscript\ud835\udeba2 where \u03a91superscript\ud835\udf0012superscript\ud835\udf0012superscript\ud835\udf0032\ud835\udf06\ud835\udc421superscript\ud835\udf0012superscript\ud835\udf0012\\\\bm{\\\\Sigma}\\_{r}=\\\\frac{1}{2}\\\\bm{\\\\Sigma}\\_{\\*}+\\\\frac{1}{\\\\lambda}\\\\cdot\\\\bm{I}+\\\\sqrt{\\\\frac{1}{\\\\lambda}\\\\cdot\\\\bm{\\\\Sigma}\\_{\\*}+\\\\frac{1}{4}\\\\bm{\\\\Sigma}\\_{\\*}^{2}},\\\\qquad\\\\text{ where }\\\\qquad\\\\Omega\\\\left(\\\\frac{1+\\\\varepsilon^{1/2}}{\\\\varepsilon^{1/2}+\\\\varepsilon^{3/2}}\\\\right)\\\\leq\\\\lambda\\\\leq O\\\\left(\\\\frac{1+\\\\varepsilon^{1/2}}{\\\\varepsilon^{1/2}}\\\\right). |  |\\\n\\\nThe effect of robust optimization under an \u21132subscript\u21132\\\\ell\\_{2}-constrained adversary is\\\nvisualized in Figure [4]Figure 4 \u2023 (2) Robust Learning. \u2023 4 A Theoretical Framework for Studying (Non)-Robust Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\"). As \u03f5italic-\u03f5\\\\epsilon\\\ngrows, the learned covariance becomes more aligned with identity.\\\nFor instance, we can see that the classifier learns to be less sensitive\\\nin certain directions, despite their usefulness for natural classification.\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\nFigure 4: An empirical demonstration of the effect illustrated by\\\nTheorem [2]Theorem 2 (Robustly Learned Parameters). \u2023 (2) Robust Learning. \u2023 4 A Theoretical Framework for Studying (Non)-Robust Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\")\u2014as the adversarial perturbation budget\\\n\u03b5\ud835\udf00\\\\varepsilon is increased, the learned mean \ud835\udf41\ud835\udf41\\\\bm{\\\\mu} remains constant, but the\\\nlearned covariance \u201cblends\u201d with the identity matrix,\\\neffectively adding more and more uncertainty onto the\\\nnon-robust feature.\\\n\\\n##### (3) Gradient Interpretability.\\\n\\\n\\[ [Tsi+19])\\] observe\\\nthat gradients of robust models tend to look more semantically meaningful.\\\nIt turns out that under our\\\nmodel, this behaviour arises as a natural consequence of\\\nTheorem [2]Theorem 2 (Robustly Learned Parameters). \u2023 (2) Robust Learning. \u2023 4 A Theoretical Framework for Studying (Non)-Robust Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\"). In particular, we show that the\\\nresulting robustly learned parameters cause\\\nthe gradient of the linear classifier and the vector\\\nconnecting the means of the two distributions to better align (in a\\\nworst-case sense) under the \u21132subscript\u21132\\\\ell\\_{2} inner product.\\\n\\\n###### Theorem 3(Gradient alignment).\\\n\\\nLet f\u200b(x)\ud835\udc53\ud835\udc65f(x) and fr\u200b(x)subscript\ud835\udc53\ud835\udc5f\ud835\udc65f\\_{r}(x) be monotonic classifiers based\\\non the linear separator induced by standard and \u21132subscript\u21132\\\\ell\\_{2}-robust\\\nmaximum likelihood classification, respectively.\\\nThe maximum angle formed between the gradient of the classifier (wrt\\\ninput) and the vector connecting the classes can be smaller for the robust\\\nmodel:\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | min\ud835\udf41\u2061\u27e8\ud835\udf41,\u2207xfr\u200b(x)\u27e9\u2016\ud835\udf41\u2016\u22c5\u2016\u2207xfr\u200b(x)\u2016>min\ud835\udf41\u2061\u27e8\ud835\udf41,\u2207xf\u200b(x)\u27e9\u2016\ud835\udf41\u2016\u22c5\u2016\u2207xf\u200b(x)\u2016.subscript\ud835\udf41\ud835\udf41subscript\u2207\ud835\udc65subscript\ud835\udc53\ud835\udc5f\ud835\udc65\u22c5norm\ud835\udf41normsubscript\u2207\ud835\udc65subscript\ud835\udc53\ud835\udc5f\ud835\udc65subscript\ud835\udf41\ud835\udf41subscript\u2207\ud835\udc65\ud835\udc53\ud835\udc65\u22c5norm\ud835\udf41normsubscript\u2207\ud835\udc65\ud835\udc53\ud835\udc65\\\\min\\_{\\\\bm{\\\\mu}}\\\\frac{\\\\left\\\\langle{\\\\bm{\\\\bm{\\\\mu}}},{\\\\nabla\\_{x}f\\_{r}(x)}\\\\right\\\\rangle}{\\\\\\|\\\\bm{\\\\mu}\\\\\\|\\\\cdot\\\\\\|\\\\nabla\\_{x}f\\_{r}(x)\\\\\\|}>\\\\min\\_{\\\\bm{\\\\mu}}\\\\frac{\\\\left\\\\langle{\\\\bm{\\\\mu}},{\\\\nabla\\_{x}f(x)}\\\\right\\\\rangle}{\\\\\\|\\\\bm{\\\\mu}\\\\\\|\\\\cdot\\\\\\|\\\\nabla\\_{x}f(x)\\\\\\|}. |  |\\\n\\\nFigure [4]Figure 4 \u2023 (2) Robust Learning. \u2023 4 A Theoretical Framework for Studying (Non)-Robust Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\") illustrates this phenomenon in the two-dimensional\\\ncase. With \u21132subscript\u21132\\\\ell\\_{2}-bounded adversarial training the gradient direction\\\n(perpendicular to the decision boundary) becomes increasingly aligned under\\\nthe \u21132subscript\u21132\\\\ell\\_{2} inner product with the vector between the means (\ud835\udf41\ud835\udf41\\\\bm{\\\\mu}).\\\n\\\n##### Discussion.\\\n\\\nOur theoretical analysis suggests that rather than\\\noffering any quantitative classification benefits, a\\\nnatural way to view the role of robust optimization is as enforcing a prior over the features learned by the classifier. In particular, training with\\\nan \u21132subscript\u21132\\\\ell\\_{2}-bounded adversary prevents the classifier from relying heavily on\\\nfeatures which induce a metric dissimilar to the \u21132subscript\u21132\\\\ell\\_{2} metric. The\\\nstrength of the adversary then allows for a trade-off between the\\\nenforced prior, and the data-dependent features.\\\n\\\n##### Robustness and accuracy.\\\n\\\nNote that in the setting described so far,\\\nrobustness can be at odds with\\\naccuracy since robust training prevents us from learning the most accurate\\\nclassifier (a similar\\\nconclusion is drawn in \\[ [Tsi+19])\\]).\\\nHowever, we note that there are very similar\\\nsettings where non-robust features manifest themselves in the same way, yet\\\na classifier with perfect robustness and accuracy is still attainable.\\\nConcretely, consider the distributions\\\npictured in Figure [14]Figure 14 \u2023 D.10 Robustness vs. Accuracy \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\") in Appendix\\\n[D.10]D.10 Robustness vs. Accuracy \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\"). It is straightforward to show that\\\nwhile there are many perfectly accurate classifiers, any standard loss\\\nfunction will learn an accurate yet non-robust classifier. Only when robust\\\ntraining is employed does the classifier learn a perfectly accurate and\\\nperfectly robust decision boundary.\\\n\\\n\n## 5 Related Work\\\n\\\nSeveral models for explaining adversarial examples have been proposed in\\\nprior work, utilizing ideas ranging from finite-sample overfitting to\\\nhigh-dimensional statistical\\\nphenomena\\\n\\[ [Gil+18]), [FFF18]), [For+19]), [TG16]), [Sha+19]), [MDM18]), [Sha+19a]), [GSS15]), [BPR18])\\].\\\nThe key differentiating aspect of our model is that adversarial\\\nperturbations\\\narise as well-generalizing, yet brittle, features, rather than\\\nstatistical anomalies or effects of poor statistical concentration.\\\nIn particular, adversarial vulnerability does not stem from using a specific\\\nmodel class or a specific training method, since standard training on the\\\n\u201crobustified\u201d data distribution of Section [3.1]Disentangling robust and non-robust features \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\") leads to robust\\\nmodels.\\\nAt the same time, as shown in Section [3.2]Non-robust features suffice for standard classification \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\"), these non-robust\\\nfeatures are sufficient to learn a good standard classifier.\\\nWe discuss the\\\nconnection between our model and others in detail in\\\nAppendix [A]Appendix A Connections to and Disambiguation from Other Models \u2023 Adversarial Examples Are Not Bugs, They Are Features\").\\\nWe discuss additional related work in Appendix [B]Appendix B Additional Related Work \u2023 Adversarial Examples Are Not Bugs, They Are Features\").\\\n\\\n\n## 6 Conclusion\\\n\\\nIn this work, we cast the phenomenon of adversarial\\\nexamples as a natural consequence of the presence of highly predictive\\\nbut non-robust features in standard ML datasets. We\\\nprovide support for this hypothesis by explicitly disentangling robust and\\\nnon-robust features in standard datasets, as well as showing\\\nthat non-robust features alone are sufficient for good generalization.\\\nFinally, we study these phenomena in more detail in a theoretical\\\nsetting where we can rigorously study adversarial vulnerability, robust\\\ntraining, and gradient alignment.\\\n\\\nOur findings prompt us to view adversarial examples as a fundamentally human phenomenon. In particular, we should not be\\\nsurprised that classifiers exploit highly predictive\\\nfeatures that happen to be non-robust under a human-selected notion of\\\nsimilarity, given such features exist in real-world datasets. In the same manner, from\\\nthe perspective of interpretability,\\\nas long as models rely on these non-robust features, we cannot expect to have model\\\nexplanations that are both human-meaningful and faithful to the models themselves.\\\nOverall, attaining models that are robust and interpretable\\\nwill require explicitly encoding human priors into the training process.\\\n\\\n\n## 7 Acknowledgements\\\n\\\nWe thank Preetum Nakkiran for suggesting the experiment of\\\nAppendix [D.9]D.9 Targeted Transferability \u2023 Appendix D Omitted Experiments and Figures \u2023 Adversarial Examples Are Not Bugs, They Are Features\") (i.e. replicating\\\nFigure [3]Figure 3 \u2023 3.2 Non-robust features suffice for standard classification \u2023 3 Finding Robust (and Non-Robust) Features \u2023 Adversarial Examples Are Not Bugs, They Are Features\") but with targeted attacks). We also are grateful to the authors of \\[ [Eng+19])\\] (Chris Olah, Dan\\\nHendrycks, Justin Gilmer, Reiichiro Nakano, Preetum Nakkiran, Gabriel Goh, Eric\\\nWallace)\u2014for their insights and efforts replicating, extending, and discussing\\\nour experimental results.\\\n\\\nWork supported in part by the NSF grants CCF-1553428, CCF-1563880,\\\nCNS-1413920, CNS-1815221, IIS-1447786, IIS-1607189, the Microsoft Corporation, the Intel Corporation,\\\nthe MIT-IBM Watson AI Lab research grant, and an Analog Devices Fellowship.\\\n\\\n</Content></Candidate>\n\n</References>\nRemember to output the index of the selected reference enclosed within <answer> and </answer>.",
  "reference_id": "bib.bib29",
  "label_id": 2,
  "mask_all": false,
  "citation": {
    "section_name": "1 Introduction",
    "citation_id": "bib.bib29",
    "citation_text": "Vaswani et al., [2017]",
    "citation_type": "others",
    "start_pos": 112,
    "end_pos": 134,
    "nearest_citations": [
      "bib.bib21",
      "bib.bib22",
      "bib.bib25"
    ]
  },
  "candidates": [
    {
      "id": "bib.bib9",
      "title": "The lottery ticket hypothesis: Finding sparse, trainable neural networks, 2019.",
      "token_count": 12016
    },
    {
      "id": "bib.bib5",
      "title": "Sparse Autoencoders Find Highly Interpretable Features in Language Models.",
      "token_count": 8738
    },
    {
      "id": "bib.bib29",
      "title": "Attention is All you Need.",
      "token_count": 11020
    },
    {
      "id": "bib.bib14",
      "title": "Adversarial examples are not bugs, they are features.",
      "token_count": 16902
    }
  ],
  "additional_fields": {
    "paper_field": "full",
    "mask_all": false,
    "candidate_fields": [
      "title",
      "abstract",
      "sections"
    ],
    "sample": "random",
    "max_selected_references_per_paper": 5
  },
  "id": 70
}