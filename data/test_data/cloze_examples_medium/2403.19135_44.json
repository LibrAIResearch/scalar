{
  "paper_id": "http://arxiv.org/abs/2403.19135v4",
  "question": "You are given a paper with a placeholder \"**[MASKED_CITATION]**\" in its content. Your task is to select the most appropriate reference from the provided reference list to replace the mask.\n\n- The paper content is enclosed within <Paper> and </Paper>.\n- The reference list is enclosed within <References> and </References>, with each reference wrapped in <Candidate> and </Candidate>.\n- After selecting the best-suited reference, output the index of that reference in the following format:\n<answer>index</answer>.\n\n<Paper>\n\nStreamlining Redundant Layers to Compress Large Language Models\n\nAbstract: This paper introduces LLM-Streamline, a pioneer work on layer pruning for\nlarge language models (LLMs). It is based on the observation that different\nlayers have varying impacts on hidden states, enabling the identification of\nless important layers to be pruned.LLM-Streamline comprises two parts: layer\npruning, which removes consecutive layers with the lowest importance based on\ntarget sparsity, and layer replacement, a novel module that trains a\nlightweight network to replace the pruned layers to mitigate performance loss.\nAdditionally, a new metric called stability is proposed to address the\nlimitations of the widely used accuracy metric in evaluating model compression.\nExperiments show that LLM-Streamline outperforms both previous and concurrent\nstate-of-the-art pruning methods in terms of both performance and training\nefficiency.\n\n\n## 1 Introduction\nThe recent development of large language models (LLM) based on the transformer architecture\\[ [1]\\] has been impressive, leading to their widespread application across various tasks and domains. However, the prevailing trend in LLM research is towards larger scales, with an increasing number of parameters of the models raising hardware requirements, which significantly constrains their applicability and hinders their deployment in real-world scenarios.\n\nTo alleviate the hardware demands for deploying LLM, there is a growing emphasis on compact models that exhibit high performance, typically derived from model compression techniques\\[ [2], [3]\\]. These compact models reduce the size of the original model, substantially decreasing memory consumption and computation time, and greatly reducing the cost of LLM deployment. Existing model compression techniques can be broadly categorized into knowledge distillation\\[ [4], [5], [6], [7], [8]\\], model quantization\\[ [9], [10], [11]\\], and model pruning\\[ [12], [13], [14], [15], [16], [17]\\]. Model quantization compresses the model by modifying the parameter storage format, however, it does not reduce the number of parameters. Model distillation, as opposed to quantization, compresses model parameters but comes with a substantial computational and storage cost. Model pruning can more effectively compress model parameters, but existing pruning techniques usually result in irregular model structures, which makes them inconvenient for practical use.\n\nMeanwhile, existing pruning methods focus more on pruning dense matrices\\[ **[MASKED_CITATION]**\\], attention heads\\[ [19], [20]\\], filters\\[ [21], [22]\\], and hidden dimensions\\[ [17], [23]\\] and less on layer pruning, which may be due to layer pruning is not as effective as other pruning techniques in experiments with medium-sized language models. However, we find that this result does not hold for large language models. Through our experiments, we find that some successive layers in the LLM have only small perturbations to the hidden states, which suggests that these layers are significantly less important than others, and provides the opportunity for effective layer pruning.\n\nTherefore, based on these empirical observations, we propose LLM-Streamline, a simple and effective layer-wise pruning algorithm for LLM. Our algorithm comprises two parts: layer pruning, where we remove several consecutive layers with the lowest importance in the original model according to the target sparsity; and layer replacement, where we train a lightweight model to substitute the pruned layers to recover the performance degradation caused by pruning.\n\nIn our experiments, we use various structures as lightweight models to replace the pruned layers, including multi-layer perceptron (MLP), transformer layer, sharing-parameter MLP, and sharing-parameter transformer layer. We find that although transformer layer or sharing-parameter methods introduce more parameters or computational costs than MLP, they do not yield superior performance. A single MLP can effectively fit the pruned layers. Additionally, we attempt to directly remove these pruned layers without using any lightweight model for replacement, which results in a significant drop in model performance, thus demonstrating the necessity of using a lightweight model to fit the pruned layers.\nThe main contributions of this paper are as follows:\n\n- \u2022\n\n\nWe analyze the perturbation of different layers in large language models (LLM) to the hidden states and notice that some consecutive layers in LLM have minimal perturbation, which inspires us to remove less important layers in LLM.\n\n\n- \u2022\n\n\nWe propose using the cosine similarity between the layer input and output hidden states as a criterion for measuring layer importance and prune layers with lower importance based on this.\n\n\n- \u2022\n\n\nWe demonstrate that an MLP trained with only tens of thousands of data points can recover the model\u2019s performance. Comprehensive experiments show that for models with 7B parameters, With a pruning rate of 25%, we can maintain 92% of their performance on classification tasks and 68% of their performance on generation tasks.\n\n## 2 Related Work\nLarge language models are being used in different scenarios and their high computational cost makes model compression techniques more necessary than before. Existing model compression techniques include quantization\\[ [9], [10], [11]\\], distillation\\[ [4], [5], [6], [7], [8]\\], pruning\\[ [12], [13], [14], [15], [16], [17]\\], low-rank factorization\\[ [24], [25], [26]\\], and other techniques. This work focuses on compressing large language models by the pruning method.\n\nModel Pruning. Model pruning is an effective way of compressing large language models, which can be categorized into unstructured pruning\\[ [12], [14], [15], [16]\\] and structured pruning\\[ [13], [17], [18], [27]\\]. Unstructured pruning compresses the model by converting each model\u2019s dense matrices into sparse matrices. While unstructured pruning can maintain performance at large compression rates, it requires specialized sparse operators, which limits its use. Structured pruning, on the other hand, ensures that the matrix is dense when compressing the model and is, therefore, more hardware-friendly. Recent structured pruning approaches for large language models focus more on compressing filters\\[ [21], [22]\\], attention heads\\[ [20], [19]\\], and hidden dimensions of the model\\[ [23], [17]\\]. In contrast to these approaches, we focus on removing unimportant layers from the model.\n\nKnowledge Distillation. Knowledge distillation is another way of compressing large language models by transferring knowledge from a large teacher model to a small student model. Distillation of language models can be divided into two categories of approaches based on the transparency of the teacher model. For non-transparent teacher models, existing work has explored the use of different features for knowledge transfer, including model outputs, hidden states, and attention matrices. Whereas for transparent teacher models, e.g., LLMs that can only be accessed through APIs\\[ [6], [7], [8], [28]\\], existing work focuses on using teacher models to automatically synthesize high-quality training data to train student models.\n\n![Refer to caption]Figure 1: Illustration of the workflow of LLM-Streamline\n\n## 3 LLM-Streamline\nIn this section, we will provide a brief overview of LLM and highlight the redundancy within its layers. Leveraging the observed layer redundancy, we will introduce the LLM-Streamline framework for LLM layer pruning, along with its basic workflow. Specifically, as depicted in Figure [1]Figure 1 \u2023 2 Related Work \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"), the workflow comprises two main steps: layer pruning and layer replacement. Initially, we prune redundant layers from the LLM. Subsequently, we train a lightweight network to replace the pruned layers, thereby restoring the model\u2019s performance.\n\n### 3.1 Preliminary\n\nCurrent LLM implementations predominantly rely on transformer architectures, where a typical LLM comprises a series of transformer decoder layers. Each decoder layer consists of a Multi-Head Attention (MHA) module and a Feed Forward Network (FFN) module. During both training and inference, the i\ud835\udc56i-th decoder layer takes hidden states Xi\u2208\u211dd\u00d7nsubscript\ud835\udc4b\ud835\udc56superscript\u211d\ud835\udc51\ud835\udc5bX\\_{i}\\\\in\\\\mathbb{R}^{d\\\\times n} as input and generates Xi+1\u2208\u211dd\u00d7nsubscript\ud835\udc4b\ud835\udc561superscript\u211d\ud835\udc51\ud835\udc5bX\\_{i+1}\\\\in\\\\mathbb{R}^{d\\\\times n} as output, where n\ud835\udc5bn represents the sequence length and d\ud835\udc51d signifies the dimensionality of the hidden states. This process can be formally expressed as follows:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | XiMsuperscriptsubscript\ud835\udc4b\ud835\udc56M\\\\displaystyle X\\_{i}^{\\\\text{M}} | =MHA\u200b(LN\u200b(Xi))+Xi,absentMHALNsubscript\ud835\udc4b\ud835\udc56subscript\ud835\udc4b\ud835\udc56\\\\displaystyle=\\\\text{MHA}(\\\\text{LN}(X\\_{i}))+X\\_{i}, |  | (1) |\n|  | Xi+1subscript\ud835\udc4b\ud835\udc561\\\\displaystyle X\\_{i+1} | =FFN\u200b(LN\u200b(XiM))+XiM,absentFFNLNsuperscriptsubscript\ud835\udc4b\ud835\udc56Msuperscriptsubscript\ud835\udc4b\ud835\udc56M\\\\displaystyle=\\\\text{FFN}(\\\\text{LN}(X\\_{i}^{\\\\text{M}}))+X\\_{i}^{\\\\text{M}}, |  | (2) |\n\nwhere LN denotes Layer Normalization, and MHA\u200b(\u22c5)MHA\u22c5\\\\text{MHA}(\\\\cdot) and FFN\u200b(\u22c5)FFN\u22c5\\\\text{FFN}(\\\\cdot) represent the MHA module and FFN module of the i\ud835\udc56i-th decoder layer LisubscriptL\ud835\udc56\\\\text{L}\\_{i}. The entire process is abbreviated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Xi+1=Li\u200b(Xi)+Xi.subscript\ud835\udc4b\ud835\udc561subscriptL\ud835\udc56subscript\ud835\udc4b\ud835\udc56subscript\ud835\udc4b\ud835\udc56\\\\displaystyle X\\_{i+1}=\\\\text{L}\\_{i}(X\\_{i})+X\\_{i}. |  | (3) |\n\n### 3.2 Redundancy of Layers in LLM\n\nIn Formula [3]In 3.1 Preliminary \u2023 3 LLM-Streamline \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"), each layer in the LLM contributes an increment Li\u200b(Xi)subscriptL\ud835\udc56subscript\ud835\udc4b\ud835\udc56\\\\text{L}\\_{i}(X\\_{i}) to the input Xisubscript\ud835\udc4b\ud835\udc56X\\_{i}. Consequently, we propose that the importance of each layer in the LLM can be measured by assessing its impact on the inputs. To achieve this, we employ the cosine similarity between inputs Xisubscript\ud835\udc4b\ud835\udc56X\\_{i} and outputs Xi+1subscript\ud835\udc4b\ud835\udc561X\\_{i+1} as a metric. Essentially, a higher cosine similarity between the inputs and outputs of a layer suggests lower importance, and conversely. This interpretation arises from the observation that a higher cosine similarity between the inputs and outputs of a layer implies that the layer may be approximated as a scaling factor.\n\nTo calculate the cosine similarity metric, we randomly sample data from the wikitext-2 dataset and feed it into the LLM. We then extract the hidden states produced by each layer of the LLM and compute the cosine similarity between the input and output hidden states of each layer. Our experiments are conducted on the OPT families (OPT-1.3B, OPT-2.7B, OPT-6.7B) \\[ [29]\\] and Llama2-7B \\[ [30]\\]. The results are illustrated in Figure [2]Figure 2 \u2023 3.3 Layer Pruning \u2023 3 LLM-Streamline \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"). From the experimental findings, it is evident that several consecutive layers in all models exhibit a high cosine similarity.\n\nGiven that these less significant layers only introduce minimal perturbations in the direction of the hidden states, we contend that employing a transformer layer to capture such straightforward relationships lacks justification. Instead, it is imperative to explore simpler, lightweight models as alternatives to these transformer layers. Furthermore, it is important to mention that substituting each of these layers with an individual lightweight model would not substantially decrease the number of parameters and might even aggravate cumulative errors. As illustrated in Figure [2]Figure 2 \u2023 3.3 Layer Pruning \u2023 3 LLM-Streamline \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"), layers identified as less important (those exhibiting a high cosine similarity between input and output hidden states) tend to cluster together. Therefore, we propose the fitting of a group of consecutive layers with a single lightweight model as a more viable approach.\n\n### 3.3 Layer Pruning\n\nWe need to pinpoint a consecutive sequence of layers that can be most effectively pruned. The number of layers to prune, denoted as n\ud835\udc5bn, is determined by the target sparsity. Following the metric outlined in Section [3.2]Redundancy of Layers in LLM \u2023 3 LLM-Streamline \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"), we randomly select samples from the training set and feed them into the model. For the i\ud835\udc56i-th layer, we calculate the cosine similarity between the input hidden states of that layer and the output hidden states of the (i+n)\ud835\udc56\ud835\udc5b(i+n)-th layer. We identify the sequence of consecutive layers with the highest cosine similarity as the most easily adaptable. The computation of cosine similarity can be expressed by the following formula:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | cos\u2061(Xi,Xi+n)=1N\u200b\u2211j=1NXi,jT\u200bXi+n,j\u2016Xi,j\u20162\u200b\u2016Xi+n,j\u20162,subscript\ud835\udc4b\ud835\udc56subscript\ud835\udc4b\ud835\udc56\ud835\udc5b1\ud835\udc41superscriptsubscript\ud835\udc571\ud835\udc41superscriptsubscript\ud835\udc4b\ud835\udc56\ud835\udc57\ud835\udc47subscript\ud835\udc4b\ud835\udc56\ud835\udc5b\ud835\udc57subscriptnormsubscript\ud835\udc4b\ud835\udc56\ud835\udc572subscriptnormsubscript\ud835\udc4b\ud835\udc56\ud835\udc5b\ud835\udc572\\\\displaystyle\\\\cos(X\\_{i},X\\_{i+n})=\\\\frac{1}{N}\\\\sum\\_{j=1}^{N}\\\\frac{X\\_{i,j}^{T}X\\_{i+n,j}}{\\\\\\|X\\_{i,j}\\\\\\|\\_{2}{\\\\\\|X\\_{i+n,j}\\\\\\|\\_{2}}}, |  | (4) |\n\nwhere Xi\u2208\u211dd\u00d7Nsubscript\ud835\udc4b\ud835\udc56superscript\u211d\ud835\udc51\ud835\udc41X\\_{i}\\\\in\\\\mathbb{R}^{d\\\\times N} denotes the hidden states of all tokens that input to i\ud835\udc56i-th layer, Xi,jsubscript\ud835\udc4b\ud835\udc56\ud835\udc57X\\_{i,j} is the j\ud835\udc57j-th column of Xisubscript\ud835\udc4b\ud835\udc56X\\_{i}, d\ud835\udc51d signifies the dimensionality of the hidden states, and N\ud835\udc41N is the total number of tokens. We identify the value of i\ud835\udc56i that maximize the cosine similarity as i\u2217superscript\ud835\udc56i^{\\*}, which identifies the layer to be pruned,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | i\u2217=arg\u2061max\ud835\udc56\u200bcos\u2061(Xi,Xi+n).superscript\ud835\udc56\ud835\udc56subscript\ud835\udc4b\ud835\udc56subscript\ud835\udc4b\ud835\udc56\ud835\udc5b\\\\displaystyle i^{\\*}=\\\\underset{i}{\\\\arg\\\\max}\\\\,\\\\cos(X\\_{i},X\\_{i+n}). |  | (5) |\n\n![Refer to caption]Figure 2: The cosine similarity between the input and output hidden states of the layers in OPT-1.3B, OPT-2.7B, OPT-6.7B, and Llama2-7B.\n\n### 3.4 Layer Replacement\n\nAfter identifying the initial layer for pruning, denoted as i\u2217superscript\ud835\udc56i^{\\*}, we collect samples from the training set and feed them into the model to obtain the input hidden states of the i\u2217superscript\ud835\udc56i^{\\*}-th layer and the input hidden states of the (i\u2217+n)superscript\ud835\udc56\ud835\udc5b(i^{\\*}+n)-th layer, which acts as training data for the lightweight model. In our experiments, we employ MLPs, transformer layers, sharing-parameter MLPs, and sharing-parameter transformer layers to capture the input-output mappings of these consecutive layers. Following the training of the lightweight model, we employ it to replace the pruned layers within the original model.\n\n## 4 Experiments\n### 4.1 Setup\n\nTo validate the effectiveness of our proposed model, we conduct experiments on popular open-source language models, including OPT families (OPT-1.3B, OPT-2.7B, OPT-6.7B) \\[ [29]\\] and Llama2-7B \\[ [30]\\]. In our approach, for Llama2-7B and OPT-6.7B, we utilize the SlimPajama-6B dataset and follow the method of Sheared-LLama \\[ [17]\\] to determine the proportion of different domains. Based on this proportion, we randomly extract 20,000 samples for MLP training of Llama2-7B and 10,000 samples for MLP training of OPT-6.7B. We use a smaller dataset for the MLP training of OPT-6.7B because the layers in OPT-6.7B have higher cosine similarity. For OPT-1.3B and OPT-2.7B, we extract 3,000 samples from wikitext-2 for MLP training.\n\n### 4.2 Benchmark\n\nTo comprehensively assess the changes in capabilities of LLM before and after pruning, we follow the evaluation method of LaCo\\[ [31]\\]. On OPT-6.7B and Llama2-7B, assessments are conducted in five domains: reasoning, language, knowledge, examination, and understanding. We select several benchmarks from each category. For reasoning: CMNLI\\[ [32]\\], HellaSwag(HeSw)\\[ [33]\\], PIQA\\[ [34]\\]. For language: CHID\\[ [35]\\], WSC\\[ [36]\\]. For knowledge: CommonSenseQA(CoQA)\\[ [37]\\], BoolQ\\[ [38]\\]. For examination: MMLU\\[ [39]\\], CMMLU\\[ [40]\\]. For understanding: Race-High/Middle\\[ [41]\\], XSum\\[ [42]\\], C3\\[ [43]\\]. In addition, to more fully demonstrate the changes in the capabilities of LLM after pruning, we include two generation-type tasks: GSM8K\\[ [44]\\] and StrategyQA\\[ [45]\\], to showcase the LLM\u2019s performance on generation tasks after pruning. On OPT-1.3B and OPT-2.7B, we follow the evaluation method of Llama\\[ [30]\\], categorizing tasks based on common sense reasoning datasets: PIQA, HellaSwag, WinoGrande\\[ [46]\\], ARC-easy\\[ [47]\\], ARC-challenge\\[ [47]\\], and OpenbookQA\\[ [48]\\]. We use the official scripts from OpenCompass\\[ [49]\\] for evaluation, employing a zero-shot or few-shot approach. Two evaluation modes are utilized: perplexity (PPL) and generation(GEN). For XSum, GSM8K, and StrategyQA, we use the GEN mode. The remaining benchmarks are evaluated using the PPL mode.\n\n### 4.3 Baseline\n\nTo evaluate the effectiveness of our method, we compare several structured pruning methods for large language models following LaCo \\[ [31]\\] and ShortGPT\\[ [50]\\].\n\nLLM-Pruner\\[ [27]\\] utilizes gradients to estimate the importance of model weights and prunes the less significant coupled structures within the model based on this estimation.\n\nSliceGPT\\[ [18]\\] inserts dimensionality reduction matrices into the model and employs PCA to initialize and trim the unimportant components in these matrices. It then merges the reduced-dimensional matrices with the model\u2019s original weight matrices, thereby reducing the model\u2019s parameter count.\n\nLaCo\\[ [31]\\] is a layer pruning method that prunes layers by merging similar layers.\n\nShortGPT\\[ [50]\\] is another layer pruning method that evaluates the importance of layers using the Block Influence metric and directly removes the less significant layers for pruning.\n\nLLM-Pruner and SliceGPT are both post-training methods, whereas LaCo and ShortGPT do not involve post-training. For fairness, we do not conduct post-training on any method for OPT-6.7B and LLama2-7B. However, for OPT-1.3B and OPT-2.7B, we apply post-training to all methods to enhance the performance of the pruned models.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| LLM | Method | Ratio | Benchmarks | Ave. | Per. |\n| CMNLI | HeSw | PIQA | CHID | WSC | CoQA | BoolQ | Race-H | Race-M | C3 | MMLU | CMMLU |\n| Llama2-7B | Dense | 0.00% | 33.0 | 71.3 | 78.1 | 41.6 | 37.5 | 66.7 | 70.8 | 35.5 | 33.1 | 43.8 | 46.8 | 31.8 | 49.2 | 100.0 |\n| LLMPruner | 27.0% | 34.3 | 56.5 | 71.2 | 25.3 | 36.5 | 42.5 | 55.2 | 22.6 | 22.4 | 25.6 | 23.3 | 25.3 | 36.7 | 74.6 |\n| SliceGPT | 26.4% | 31.7 | 50.3 | 66.2 | 20.8 | 36.5 | 41.4 | 38.3 | 21.1 | 21.7 | 39.8 | 28.9 | 25.4 | 35.2 | 71.5 |\n| LaCo | 27.1% | 34.4 | 55.7 | 69.8 | 36.1 | 40.4 | 45.7 | 64.1 | 22.6 | 23.6 | 39.7 | 26.5 | 25.2 | 40.3 | 81.9 |\n| ShortGPT | 27.1% | 33.0 | 53.0 | 66.4 | 24.7 | 52.5 | 48.0 | 74.7 | 32.3 | 35.2 | 39.6 | 44.0 | 32.2 | 44.6 | 90.7 |\n| ShortGPT\\* | 27.1% | 33.1 | 58.2 | 66.9 | 22.3 | 36.5 | 48.8 | 65.2 | 36.9 | 35.5 | 41.3 | 45.4 | 29.2 | 43.3 | 88.0 |\n| Ours | 26.2% | 33.0 | 59.2 | 70.1 | 24.2 | 36.5 | 57.3 | 65.0 | 37.5 | 37.1 | 43.2 | 47.0 | 31.9 | 45.2 | 91.9 |\n| OPT-6.7B | Dense | 0.00% | 32.9 | 63.3 | 75.4 | 21.6 | 41.4 | 54.8 | 64.6 | 25.4 | 25.1 | 38.7 | 24.7 | 25.5 | 41.1 | 100.0 |\n| ShortGPT\\* | 27.0% | 32.6 | 25.7 | 50.8 | 14.5 | 38.5 | 18.8 | 43.6 | 22.7 | 22.0 | 26.6 | 24.0 | 25.5 | 28.8 | 70.1 |\n| Ours | 26.0% | 32.6 | 52.4 | 73.1 | 19.4 | 39.4 | 38.0 | 63.0 | 22.0 | 23.3 | 35.9 | 24.6 | 25.0 | 37.4 | 91.0 |\n\nTable 1: Comparison of pruning methods on PPL benchmarks. \"ShortGPT\\*\"is\nour reproduction.\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| LLM | Method | Ratio | Benchmarks | Ave. | Per. |\n| Xsum | GSM8K | StrategyQA |\n| Llama2-7B | Dense | 0.00% | 19.4 | 16.5 | 60.2 | 32.0 | 100.0 |\n| LLMPruner | 27.0% | 11.5 | - | - | - | - |\n| SliceGPT | 26.4% | 4.9 | - | - | - | - |\n| LaCo | 27.1% | 15.6 | - | - | - | - |\n| ShortGPT\\* | 27.1% | 0.7 | 1.7 | 35.1 | 12.5 | 39.1 |\n|  | Ours | 26.2% | 18.0 | 2.3 | 44.9 | 21.7 | 67.8 |\n| OPT-6.7B | Dense | 0.00% | 13.4 | 2.2 | 54.3 | 23.3 | 100.0 |\n| ShortGPT\\* | 27.0% | 3.7 | 0.2 | 35.3 | 13.1 | 56.2 |\n| Outs | 26.0% | 13.1 | 1.0 | 47.3 | 20.5 | 88.0 |\n\nTable 2: Comparison of pruning methods on GEN benchmarks.\"ShortGPT\\*\"is\nour reproduction.\n\n### 4.4 Main Results\n\nTo validate the effectiveness of our proposed method, we conduct comparative experiments on OPT-6.7B and Llama2-7B. Following previous work, we carry out experiments with approximately 25% of the parameters pruned. The experimental results are presented in Table [1]Table 1 \u2023 4.3 Baseline \u2023 4 Experiments \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\") and Table [2]Table 2 \u2023 4.3 Baseline \u2023 4 Experiments \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"). The results indicate that the model pruned using our proposed pruning method, LLM-Streamline, outperforms the baseline method in overall performance, managing to retain most of the capabilities of the large language model across a variety of tasks. Specifically, in comparison to the previous SOTA method, ShortGPT, LLM-Streamline surpasses ShortGPT in both classification and generation tasks and outperforms ShortGPT by 30 points in generation tasks.\n\nTo present a more comprehensive view of the results of our proposed LLM-Streamline under different pruning ratios, we also conduct experiments on OPT-1.3B and OPT-2.7B with pruning rates of 15-20%, 20-25%, and 25-30%. As shown in Table [3]\\] for post-training SliceGPT.\n\n| LLM | Method | Ratio | Benchmarks | Ave. | Per. |\n| --- | --- | --- | --- | --- | --- |\n| PIQA | WinoGrande | HellaSwag | ARC-easy | ARC-challenge | OpenBookQA |\n| --- | --- | --- | --- | --- | --- |\n| OPT-1.3B | Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| SliceGPT | 18.1% | 67.6 | 53.6 | 35.7 | 51.1 | 23.1 | 20.2 | 41.8 | 86.7 |\n| Ours | 18.1% | 68.8 | 58.4 | 39.1 | 54.3 | 23.3 | 23.3 | 44.5 | 92.3 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| SliceGPT | 25.8% | 65.5 | 52.8 | 34.2 | 48.8 | 24.4 | 17.0 | 40.5 | 84.0 |\n| Ours | 25.8% | 66.4 | 56.0 | 36.8 | 51.6 | 22.2 | 21.0 | 42.3 | 87.8 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| SliceGPT | 33.6% | 62.4 | 52.6 | 32.2 | 45.4 | 23.1 | 16.6 | 38.7 | 80.3 |\n| Ours | 33.6% | 62.9 | 52.1 | 33.9 | 48.3 | 20.8 | 20.6 | 39.8 | 82.6 |\n| OPT-2.7B | Dense | 0.00% | 73.8 | 61.0 | 45.9 | 60.9 | 26.8 | 25.0 | 48.9 | 100.0 |\n| SliceGPT | 16.8% | 69.6 | 56.3 | 40.4 | 56.2 | 27.5 | 20.2 | 45.0 | 92.0 |\n| Ours | 16.8% | 70.7 | 60.4 | 42.9 | 57.8 | 25.3 | 24.4 | 46.9 | 95.9 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| SliceGPT | 25.7% | 69.1 | 55.0 | 37.9 | 53.9 | 26.7 | 18.2 | 43.5 | 84.0 |\n| Ours | 25.7% | 67.0 | 59.5 | 40.3 | 54.6 | 24.7 | 22.2 | 44.7 | 91.4 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| SliceGPT | 34.6% | 64.8 | 54.1 | 35.6 | 50.0 | 26.5 | 18.0 | 41.5 | 84.9 |\n| Ours | 34.6% | 65.3 | 55.3 | 36.3 | 51.4 | 24.5 | 21.0 | 41.9 | 85.7 |\n\nTable 3: Comparing pruning methods on common sense reasoning benchmarks for OPT-1.3B and OPT-2.7B\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| LLM | Training Data Quantities | Benchmarks | Ave. | Per. |\n| CMNLI | HeSw | PIQA | CHID | WSC | CoQA | BoolQ | Race-H | Race-M | C3 | MMLU | CMMLU |\n| Llama2-7B | 5000 | 32.4 | 57.7 | 69.0 | 17.9 | 36.5 | 55.4 | 67.5 | 38.4 | 39.5 | 40.4 | 46.5 | 29.0 | 44.2 | 89.8 |\n| 10000 | 32.8 | 57.7 | 69.9 | 22.8 | 36.5 | 57.3 | 64.7 | 39.5 | 37.7 | 39.0 | 47.1 | 31.2 | 44.7 | 90.9 |\n| 15000 | 33.0 | 58.5 | 70.1 | 21.2 | 36.5 | 57.3 | 65.8 | 37.7 | 39.1 | 41.0 | 47.3 | 31.4 | 44.9 | 91.3 |\n| 20000 | 33.0 | 59.2 | 70.1 | 24.2 | 36.5 | 57.3 | 65.0 | 37.5 | 37.1 | 43.2 | 47.0 | 31.9 | 45.2 | 91.9 |\n| 25000 | 33.0 | 58.6 | 70.4 | 17.7 | 36.5 | 57.0 | 63.2 | 39.5 | 39.6 | 38.5 | 45.8 | 29.0 | 44.1 | 89.6 |\n| OPT-6.7B | 5000 | 32.0 | 50.3 | 72.3 | 19.7 | 37.5 | 35.5 | 61.5 | 21.8 | 23.3 | 35.7 | 24.1 | 24.9 | 36.6 | 89.1 |\n| 10000 | 32.6 | 52.4 | 73.1 | 19.4 | 39.4 | 38.0 | 63.0 | 22.0 | 23.3 | 35.9 | 24.6 | 25.0 | 37.4 | 91.0 |\n| 15000 | 31.9 | 45.0 | 70.4 | 18.6 | 37.5 | 32.6 | 59.1 | 21.8 | 22.1 | 36.2 | 25.1 | 24.7 | 35.4 | 86.1 |\n\nTable 4: Performance of Llama2-7B and OPT-6.7B with different training data quantities.\n\n## 5 Analysis\n### 5.1 Effect of the Amount of Training Data\n\nWe conduct a comprehensive analysis of the performance of the MLP model during training on Llama2-7B and OPT-6.7B architectures. The results in Table [4]Table 4 \u2023 4.4 Main Results \u2023 4 Experiments \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\") cover all 12 PPL benchmarks under various training data quantities. According to the results in Table [4]Table 4 \u2023 4.4 Main Results \u2023 4 Experiments \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"), we can observe a clear trend: the accuracy initially shows improvements, followed by a slight decline, reaching a peak of around 20,000 data points for Llama2-7B (10,000 data points for OPT-6.7B). This indicates that the MLP has converged at 20,000 data points (10,000 data points for OPT-6.7B).\n\n### 5.2 Effect of Different Lightweight Models\n\nTo validate the necessity and simplicity of employing an MLP as a lightweight model, we conduct experiments on OPT-1.3B and OPT-2.7B, wherein we replace the utilized MLP with a transformer layer. In addition, we investigate the impact of the parameter-sharing technique on the performance of the lightweight model, i.e., we let the lightweight model compute n\ud835\udc5bn times during the forward computation (n\ud835\udc5bn is the number of layers removed). Finally, we attempt to remove the pruned layers without substituting them with any lightweight model. The MLPs and transformer layers utilized in our experiments are trained on 3,000 samples from the wikitext-2 dataset. Consistent with Section [4.4]Main Results \u2023 4 Experiments \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"), we conduct post-training on the pruned models, concentrating solely on adjusting the parameters of the lightweight models. For the approach of directly removing pruned layers, we employ LoRa\\[ [52]\\] to ensure that the number of parameters involved in the training is equivalent to that of an MLP. The experimental results are presented in Table [5]Table 5 \u2023 5.2 Effect of Different Lightweight Models \u2023 5 Analysis \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\").\n\nWe can see that the parameter-sharing MLP introduces more computation but does not ultimately outperform the MLP. Replacing the MLP with a transformer layer results in a significant decrease in model performance. Unlike MLP, the utilization of parameter sharing enhances the transformer layer\u2019s efficiency but also does not exceed the performance of MLP. In addition, not using any lightweight models also leads to a significant decrease in model performance. Therefore, we conclude that using a simple MLP instead of a pruning layer is sufficient.\n\n| LLM | Lightweight Model | Ratio | Benchmarks | Ave. | Per. |\n| --- | --- | --- | --- | --- | --- |\n| PIQA | WinoGrande | HellaSwag | ARC-easy | ARC-challenge | OpenBookQA |\n| --- | --- | --- | --- | --- | --- |\n| OPT-1.3B | Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| MLP w/o params sharing | 18.1% | 68.8 | 58.4 | 39.1 | 54.3 | 23.3 | 23.2 | 44.5 | 92.3 |\n| MLP w/ params sharing | 18.1% | 68.6 | 56.8 | 39.1 | 54.2 | 21.9 | 23.0 | 43.9 | 91.1 |\n| Transformer Layer w/o params sharing | 15.5% | 58.1 | 54.4 | 30.1 | 35.1 | 22.4 | 17.2 | 36.2 | 75.1 |\n| Transformer Layer w/ params sharing | 15.5% | 67.1 | 54.9 | 37.9 | 52.1 | 22.6 | 20.0 | 42.4 | 88.0 |\n| None | 19.4% | 57.2 | 51.7 | 29.1 | 32.5 | 22.7 | 13.2 | 34.4 | 71.4 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| MLP w/o params sharing | 25.8% | 66.4 | 56.0 | 36.8 | 51.6 | 22.2 | 21.0 | 42.3 | 87.8 |\n| MLP w/ params sharing | 25.8% | 65.8 | 54.1 | 36.4 | 51.8 | 21.9 | 21.6 | 41.9 | 86.9 |\n| Transformer Layer w/o params sharing | 23.2% | 53.1 | 50.3 | 26.7 | 29.7 | 20.1 | 14.8 | 32.5 | 67.4 |\n| Transformer Layer w/ params sharing | 23.2% | 62.2 | 53.5 | 32.8 | 47.8 | 20.2 | 18.4 | 39.2 | 81.3 |\n| None | 27.1% | 52.2 | 51.1 | 25.7 | 26.6 | 20.5 | 14.0 | 31.7 | 65.1 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| MLP w/o params sharing | 33.6% | 62.9 | 52.1 | 33.9 | 48.3 | 20.8 | 20.6 | 39.8 | 82.6 |\n| MLP w/ params sharing | 33.6% | 62.3 | 53.4 | 33.0 | 48.1 | 20.9 | 20.4 | 39.7 | 82.4 |\n| Transformer Layer w/o params sharing | 31.0% | 53.4 | 53.0 | 26.1 | 26.9 | 19.7 | 14.4 | 32.3 | 67.0 |\n| Transformer Layer w/ params sharing | 31.0% | 59.4 | 51.5 | 29.1 | 43.0 | 17.8 | 15.4 | 36.0 | 74.7 |\n| None | 34.8% | 50.5 | 51.5 | 25.8 | 26.2 | 20.3 | 14.6 | 31.5 | 65.4 |\n\nTable 5: The influence of different lightweight models on pruning performance.\n\n| LLM | Lightweight Model | Ratio | Benchmarks | Ave. | Per. |\n| --- | --- | --- | --- | --- | --- |\n| PIQA | WinoGrande | HellaSwag | ARC-easy | ARC-challenge | OpenBookQA |\n| --- | --- | --- | --- | --- | --- |\n| OPT-1.3B | Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| MLP | 18.1% | 68.8 | 58.4 | 39.1 | 54.3 | 23.3 | 23.2 | 44.5 | 92.3 |\n| Multiple MLP | 12.9% | 66.3 | 55.9 | 37.5 | 52.3 | 23.0 | 20.4 | 42.6 | 88.4 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| MLP | 25.8% | 66.4 | 56.0 | 36.8 | 51.6 | 22.2 | 21.0 | 42.3 | 87.8 |\n| Multiple MLP | 18.1% | 64.1 | 53.0 | 34.5 | 48.5 | 20.6 | 19.0 | 40.0 | 83.0 |\n| Dense | 0.00% | 72.4 | 59.3 | 53.7 | 51.0 | 29.5 | 23.4 | 48.2 | 100.0 |\n| MLP | 33.6% | 62.9 | 52.1 | 33.9 | 48.3 | 20.8 | 20.6 | 39.8 | 82.6 |\n| Multiple MLP | 23.2% | 60.4 | 51.0 | 30.6 | 46.4 | 19.5 | 15.6 | 37.3 | 77.4 |\n\nTable 6: The influence of one MLP or multiple MLP on pruning performance.\n\n### 5.3 Effect of the Number of Lightweight Models\n\nDue to the tendency for less important layers to cluster together in LLM, we propose employing a lightweight model to substitute the pruned layers and restore model performance. To demonstrate that a lightweight model is the most parameter-friendly and overall performance-optimal, we conduct the following experiment on OPT-1.3B and OPT-2.7B: for each layer that requires pruning, we train an MLP to replace that layer. The results of the experiment are presented in Table [6]Table 6 \u2023 5.2 Effect of Different Lightweight Models \u2023 5 Analysis \u2023 Compressing Large Language Models by Streamlining the Unimportant Layer\"). From the experimental results, it is evident that although using multiple MLPs results in a significantly larger number of parameters, its performance does not surpass that achieved by using just one MLP.\n\n## 6 Conclusion\nThis work introduces a novel model pruning method, LLM-Streamline, which measures the importance of layers based on the cosine similarity between the hidden states of their inputs and outputs and prunes those layers that are deemed less important. The method then trains a lightweight model to replace the pruned layers. Our studies indicate that certain layers in LLM have high cosine similarity between their input and output hidden states, suggesting that the mapping relationships represented by these layers are simple and can be approximated by lightweight models. Experiments have shown that using only an MLP to replace multiple consecutive transformer layers can maintain up to 92% of the LLM\u2019s classification performance and 68% of the LLM\u2019s generation performance while reducing the model\u2019s parameter count to about 25%, outperforming previous state-of-the-art (SOTA) pruning methods. We have validated LLM-Streamline across models with 1B, 3B, and 7B parameter scales, achieving promising performance in each case. Finally, we explore the impact of different lightweight models and varying training data quantities on the performance of LLM-Streamline.\n\n## 7 Limitation\nAlthough our model can outperform the existing baseline, the model obtained from pruning still has a large performance gap with the model that satisfies the scaling law. Meanwhile, for the generation task, although our method has a large performance improvement compared to the baseline method, it still has a large performance loss compared to the original model. Therefore, we still need to further investigate how to compress the model and guarantee its performance while using limited data.</Paper>\n\n<References>\n<Candidate>Candidate [0]:\nSlicegpt: Compress large language models by deleting rows and columns.\n\n<Abstract>Abstract: Large language models have become the cornerstone of natural language\nprocessing, but their use comes with substantial costs in terms of compute and\nmemory resources. Sparsification provides a solution to alleviate these\nresource constraints, and recent works have shown that trained models can be\nsparsified post-hoc. Existing sparsification techniques face challenges as they\nneed additional data structures and offer constrained speedup with current\nhardware. In this paper we present SliceGPT, a new post-training sparsification\nscheme which replaces each weight matrix with a smaller (dense) matrix,\nreducing the embedding dimension of the network. Through extensive\nexperimentation, we show that SliceGPT can remove up to 25% of the model\nparameters (including embeddings) for LLAMA2-70B, OPT 66B and Phi-2 models\nwhile maintaining 99%, 99% and 90% zero-shot task performance of the dense\nmodel respectively. Our sliced models run on fewer GPUs and run faster without\nany additional code optimization: on 24GB consumer GPUs we reduce the total\ncompute for inference on LLAMA2-70B to 64% of that of the dense model; on 40GB\nA100 GPUs we reduce it to 66%. We offer a new insight, computational invariance\nin transformer networks, which enables SliceGPT and we hope it will inspire and\nenable future avenues to reduce memory and computation demands for pre-trained\nmodels. Code is available at:\nhttps://github.com/microsoft/TransformerCompression</Abstract><Content>\n## 1 Introduction\nLarge language models (LLMs) are neural networks with billions of parameters, trained on trillions of tokens (Zhao et al., [2023])). The cost of training an LLM has caused a shift to re-using pre-trained models for multiple tasks, the _foundation model_ paradigm.\nThe size of LLMs makes deploying a pre-trained model an expensive undertaking. Many models require multiple GPUs to be able to compute a prediction, and because the models are autoregressive, multiple forward passes of the neural network are needed to generate text responses. It is therefore of widespread interest to reduce the computational requirements of these models, usually performed via post-training techniques referred to as _model compression_.\n\nA majority of model compression techniques fall into one of four categories: distillation, tensor decomposition (which includes low-rank factorization), pruning and quantization (Hoefler et al., [2021]); Gholami et al., [2021]); Zhu et al., [2023]); Gupta & Agrawal, [2021])). In this work we focus on pruning, though we hope that our methodology may influence future work on other areas. Whilst pruning methods have been around for some time, many approaches require recovery fine-tuning (RFT) after pruning to maintain performance, making the overall process an expensive and hard-to-scale task. With SliceGPT we compress large models using a single GPU in just a few hours and maintain competitive performance on generation and downstream tasks even without RFT.\n\nPruning methods work by setting some elements of the weight matrices in an LLM to zero, and (optionally) updating the surrounding elements of the matrix to compensate. The result is a sparse pattern which means that some floating point operations can be skipped in the matrix multiplications required in the forward pass of the neural network. The relative speedup of the operations depends on the level of sparsity and the sparsity pattern: more structured sparsity is associated with more computational gain. In contrast to other pruning methods, SliceGPT prunes away (slices off!) entire rows or columns of the weight matrices. Before slicing, we perform a single transformation of the network which leaves the predictions invariant, but allows the slicing to have only a small effect.\n\nThe result is that weight matrices are smaller, and the signals passed between blocks of the neural network are smaller too: we reduce the _embedding dimension_ of the neural network.\n\nFigure [1]Figure 1 \u2023 1 Introduction \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") compares our approach with existing sparsity methods.\nOur contributions are as follows:\n\n1. 1.\n\n\nWe introduce the idea of _computational invariance_: we show that we can apply orthogonal-matrix transformations to each weight matrix in a transformer without changing the model.\n\n2. 2.\n\n\nWe use this to edit each block in a transformer architecture, such that we are projecting the signal matrix111The signal matrix is sometimes referred as activation matrix. between blocks onto its own principal components. We remove columns or rows of the transformed weight matrices to reduce the model size. We call the transformation and removal of weights SliceGPT.\n\n3. 3.\n\n\nWe conduct multiple experiments on OPT (Zhang et al., [2022])) and Llama-\n2(Touvron et al., [2023])) LLMs, demonstrating that SliceGPT is able to compress these models by up to 30% with superior perplexity to the state of the art 2:4 scheme. On downstream tasks we additionally experiment with Phi-2 and show that all models can be sliced by up to 30% while maintaining >90% of the dense performance.\n\n\n\ud835\udc17\ud835\udc17{\\\\mathbf{X}}\ud835\udc16\ud835\udc16{\\\\mathbf{W}}Unstructured sparsity\ud835\udc17\ud835\udc17{\\\\mathbf{X}}\ud835\udc16\ud835\udc16{\\\\mathbf{W}}2:4 Structured sparsity\ud835\udc17\ud835\udc10\ud835\udc17\ud835\udc10{\\\\mathbf{X}}{\\\\mathbf{Q}}\ud835\udc10\u22a4\u200b\ud835\udc16superscript\ud835\udc10top\ud835\udc16{\\\\mathbf{Q}}^{\\\\!\\\\bm{\\\\top}}\\\\!{\\\\mathbf{W}}Slicing (ours)Figure 1:  Matrix multiplication of the signal \ud835\udc17\ud835\udc17{\\\\mathbf{X}} and a weight matrix \ud835\udc16\ud835\udc16{\\\\mathbf{W}} under different types of sparsity. Left: unstructured sparsity, where some elements of \ud835\udc16\ud835\udc16{\\\\mathbf{W}} are zero, and \ud835\udc17\ud835\udc17{\\\\mathbf{X}} is dense. Middle: 2:4 structured sparsity, where each block of four weight matrix entries contains two zeros, and \ud835\udc17\ud835\udc17{\\\\mathbf{X}} is dense. Right: SliceGPT, where after introducing transformation \ud835\udc10\ud835\udc10{\\\\mathbf{Q}}, all the sparsity is arranged to the bottom rows of \ud835\udc16\ud835\udc16{\\\\mathbf{W}} and the corresponding columns of \ud835\udc17\ud835\udc17{\\\\mathbf{X}} are removed.\n\n## 2 Background\nIn this section, we first describe some necessary background on transformer architectures, which allows us to introduce notation which we will use to prove our main results. Then we describe related work on sparsification for compressing such architectures.\n\n### 2.1 Transformer Networks\n\nTransformer networks (Vaswani et al., [2017])) are a class of neural networks that have been shown to be effective at a wide range of tasks including language modeling. The transformer architecture is composed of a series of layers, each of which is composed of a multi-head self-attention block followed by a feed-forward network block. Between each block, there is a LayerNorm (Ba et al., [2016])) (or RMSNorm (Zhang & Sennrich, [2019]))) block. Figure [2]Figure 2 \u2023 LayerNorm \u2023 2.1 Transformer Networks \u2023 2 Background \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") illustrates part of a transformer network: an attention block connected to a Feed Forward Network (FFN) block through a LayerNorm block, with residual connections. The following describes the operations of each component (ignoring dropout, which is not applied post-training).\n\n#### Embeddings\n\nLet D\ud835\udc37D be the embedding dimension of our transformer, N\ud835\udc41N be the sequence length. The transformer model takes as input a sequence of token IDs and position IDs, and uses them to index the embedding matrices, producing the initial signal \ud835\udc17\ud835\udc17{\\\\mathbf{X}} with shape N\u00d7D\ud835\udc41\ud835\udc37N\\\\times D. In what follows we consider, without loss of generality, a single embedding matrix \ud835\udc16embdsubscript\ud835\udc16embd{\\\\mathbf{W}}\\_{\\\\textrm{embd}} indexed by input sequence \ud835\udc94\ud835\udc94{\\\\bm{s}}.\n\n#### LayerNorm\n\nAfter embeddings, the signal matrix is passed through a LayerNorm operation, which subtracts the mean from each row of the matrix, divides the row by its standard deviation, rescales (columnwise), and adds an offset. We write the LayerNorm block as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | LayerNorm\u200b(\ud835\udc17)=RMSNorm\u200b(\ud835\udc17\ud835\udc0c)\u200bdiag\u200b(\ud835\udf36)\u200bD+\ud835\udfcfN\u200b\ud835\udf37\u22a4LayerNorm\ud835\udc17RMSNorm\ud835\udc17\ud835\udc0cdiag\ud835\udf36\ud835\udc37subscript1\ud835\udc41superscript\ud835\udf37top\\\\textrm{LayerNorm}({\\\\mathbf{X}})=\\\\textrm{RMSNorm}({\\\\mathbf{X}}{\\\\mathbf{M}})\\\\textrm{diag}(\\\\bm{\\\\alpha})\\\\sqrt{D}+\\\\mathbf{1}\\_{N}\\\\bm{\\\\beta}^{\\\\top} |  | (1) |\n\nwhere RMSNorm\u200b(\ud835\udc17)RMSNorm\ud835\udc17\\\\textrm{RMSNorm}({\\\\mathbf{X}}) applies222In some implementations an RMSNorm block may contain scale parameters. We consider these to be special instances of LayerNorm and handle them accordingly.\ud835\udc99\u2190\ud835\udc99/\u2016\ud835\udc99\u2016\u2190\ud835\udc99\ud835\udc99norm\ud835\udc99{\\\\bm{x}}\\\\leftarrow{\\\\bm{x}}/\\\\\\|{\\\\bm{x}}\\\\\\| to each row of \ud835\udc17\ud835\udc17{\\\\mathbf{X}}.\nThe vector parameter \ud835\udf36\ud835\udf36\\\\bm{\\\\alpha} and offset (vector) parameter \ud835\udf37\ud835\udf37\\\\bm{\\\\beta} are learned independently at each LayerNorm instance. The constant matrix \ud835\udc0c=\ud835\udc08\u22121D\u200b\ud835\udfcf\ud835\udfcf\u22a4\ud835\udc0c\ud835\udc081\ud835\udc37superscript11top{\\\\mathbf{M}}={\\\\mathbf{I}}-\\\\frac{1}{D}\\\\mathbf{1}\\\\mathbf{1}^{\\\\top} is a D\u00d7D\ud835\udc37\ud835\udc37D\\\\times D matrix which subtracts the mean from each row of \ud835\udc17\ud835\udc17{\\\\mathbf{X}}.\n\nAttentionLayerNormFFN\ud835\udc16ksubscript\ud835\udc16\ud835\udc58\\\\mathbf{W}\\_{k}\ud835\udc16qsubscript\ud835\udc16\ud835\udc5e\\\\mathbf{W}\\_{q}\ud835\udc16vsubscript\ud835\udc16\ud835\udc63\\\\mathbf{W}\\_{v}Multi-HeadAttention\ud835\udc16osubscript\ud835\udc16\ud835\udc5c\\\\mathbf{W}\\_{o}Inputs++\ud835\udc31\u2016\ud835\udc31\u2016\ud835\udc31norm\ud835\udc31\\\\frac{\\\\mathbf{x}}{\\\\\\|\\\\mathbf{x}\\\\\\|}\ud835\udc0c\ud835\udc0c{\\\\mathbf{M}}diag\u200b(\ud835\udf36)diag\ud835\udf36\\\\textrm{diag}(\\\\bm{\\\\alpha})ActivationFunction\ud835\udc161subscript\ud835\udc161\\\\mathbf{W}\\_{1}\ud835\udc162subscript\ud835\udc162\\\\mathbf{W}\\_{2}++\n\nFigure 2:  A single layer in a transformer network. The signals (inputs) arising from the previous blocks of the networks arrive at the bottom of the figure, before being passed through attention, LayerNorm, and FFN. The attention and FFN blocks both have input and output linear operations ( AttentionLayerNormFFNblue) which we denote in the text as \ud835\udc16in,\ud835\udc16outsubscript\ud835\udc16insubscript\ud835\udc16out{\\\\mathbf{W}}\\_{\\\\textrm{in}},{\\\\mathbf{W}}\\_{\\\\textrm{out}}. The linear operations of LayerNorm AttentionLayerNormFFN\ud835\udc0c\ud835\udc0c{\\\\mathbf{M}} and AttentionLayerNormFFNdiag\u200b(\ud835\udf36)diag\ud835\udf36\\\\textrm{diag}(\\\\bm{\\\\alpha}) are highlighted. This and subsequent figures do not show biases.\n\n#### Attention Blocks\n\nThe attention block has four matrices: \ud835\udc16k,\ud835\udc16q,\ud835\udc16vsubscript\ud835\udc16\ud835\udc58subscript\ud835\udc16\ud835\udc5esubscript\ud835\udc16\ud835\udc63{\\\\mathbf{W}}\\_{k},{\\\\mathbf{W}}\\_{q},{\\\\mathbf{W}}\\_{v} and \ud835\udc16osubscript\ud835\udc16\ud835\udc5c{\\\\mathbf{W}}\\_{o}, each of dimension D\u00d7D\ud835\udc37\ud835\udc37D\\\\times D.\nThe input signal arriving into the block is projected into the Key (\ud835\udc17\ud835\udc16ksubscript\ud835\udc17\ud835\udc16\ud835\udc58{\\\\mathbf{X}}{\\\\mathbf{W}}\\_{k}), Query (\ud835\udc17\ud835\udc16qsubscript\ud835\udc17\ud835\udc16\ud835\udc5e{\\\\mathbf{X}}{\\\\mathbf{W}}\\_{q}), and Value (\ud835\udc17\ud835\udc16vsubscript\ud835\udc17\ud835\udc16\ud835\udc63{\\\\mathbf{X}}{\\\\mathbf{W}}\\_{v}) matrices, which are then split into multiple heads. A nonlinear operation is applied at each head before the signals are combined and multiplied by the output weight matrix \ud835\udc16osubscript\ud835\udc16\ud835\udc5c{\\\\mathbf{W}}\\_{o}. Since the first three weight matrices are applied separately to the inputs, we can concatenate them and perform a single matrix multiplication (denoted by the white box around these matrices in Figure [2]Figure 2 \u2023 LayerNorm \u2023 2.1 Transformer Networks \u2023 2 Background \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\")). We can consider the concatenation of these matrices to be a single linear layer, which we denote \ud835\udc16insubscript\ud835\udc16in{\\\\mathbf{W}}\\_{\\\\textrm{in}}. We also refer to the output matrix as \ud835\udc16outsubscript\ud835\udc16out{\\\\mathbf{W}}\\_{\\\\textrm{out}}. We treat the attention block as \u03c3\u200b(\ud835\udc17\ud835\udc16in+\ud835\udc83in)\u200b\ud835\udc16out+\ud835\udc83out\ud835\udf0esubscript\ud835\udc17\ud835\udc16insubscript\ud835\udc83insubscript\ud835\udc16outsubscript\ud835\udc83out\\\\sigma({\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{in}}+{\\\\bm{b}}\\_{\\\\textrm{in}}){\\\\mathbf{W}}\\_{\\\\textrm{out}}+{\\\\bm{b}}\\_{\\\\textrm{out}}333For ease of notation here and throughout this paper, we abuse notation slightly and omit the broadcasting of the bias terms across the sequence length dimension. The complete notation for the operation of an attention block is \u03c3\u200b(\ud835\udc17\ud835\udc16in+\ud835\udfcfN\u200b\ud835\udc83in\u22a4)\u200b\ud835\udc16out+\ud835\udfcfN\u200b\ud835\udc83out\u22a4\ud835\udf0esubscript\ud835\udc17\ud835\udc16insubscript1\ud835\udc41superscriptsubscript\ud835\udc83intopsubscript\ud835\udc16outsubscript1\ud835\udc41superscriptsubscript\ud835\udc83outtop\\\\sigma({\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{in}}+\\\\mathbf{1}\\_{N}{\\\\bm{b}}\\_{\\\\textrm{in}}^{\\\\top}){\\\\mathbf{W}}\\_{\\\\textrm{out}}+\\\\mathbf{1}\\_{N}{\\\\bm{b}}\\_{\\\\textrm{out}}^{\\\\top} ., where \u03c3\ud835\udf0e\\\\sigma represents the multi-head attention operation.\n\n#### FFN Blocks\n\nThe other type of block that appears in transformer architectures is a Feed Forward Network (FFN) block. In many cases, this is a Multi-layer Perceptron (MLP), which consists of a linear layer \ud835\udc161subscript\ud835\udc161{\\\\mathbf{W}}\\_{1}, followed by an element-wise operation \u03c3\ud835\udf0e\\\\sigma, followed by a second linear layer: \u03c3\u200b(\ud835\udc17\ud835\udc161+\ud835\udc831)\u200b\ud835\udc162+\ud835\udc832\ud835\udf0esubscript\ud835\udc17\ud835\udc161subscript\ud835\udc831subscript\ud835\udc162subscript\ud835\udc832\\\\sigma({\\\\mathbf{X}}{\\\\mathbf{W}}\\_{1}+{\\\\bm{b}}\\_{1}){\\\\mathbf{W}}\\_{2}+{\\\\bm{b}}\\_{2}. Some architectures have adopted the gated format, where an additional matrix is used, and the operation is (\u03c3\u200b(\ud835\udc17\ud835\udc161+\ud835\udc831)\u2218(\ud835\udc17\ud835\udc162))\u200b\ud835\udc163\ud835\udf0esubscript\ud835\udc17\ud835\udc161subscript\ud835\udc831subscript\ud835\udc17\ud835\udc162subscript\ud835\udc163\\\\big{(}\\\\sigma({\\\\mathbf{X}}{\\\\mathbf{W}}\\_{1}+{\\\\bm{b}}\\_{1})\\\\circ({\\\\mathbf{X}}{\\\\mathbf{W}}\\_{2})\\\\big{)}{\\\\mathbf{W}}\\_{3}, where \u2218\\\\circ is an element-wise product. Much like the first three linear layers in the attention module, we can consider the concatenation of \ud835\udc161subscript\ud835\udc161{\\\\mathbf{W}}\\_{1} and \ud835\udc162subscript\ud835\udc162{\\\\mathbf{W}}\\_{2} to be a single linear operation, and denote it \ud835\udc16insubscript\ud835\udc16in{\\\\mathbf{W}}\\_{\\\\textrm{in}}. We can therefore denote the operation of MLP or gated FFN layers as \u03c3\u200b(\ud835\udc17\ud835\udc16in)\u200b\ud835\udc16out\ud835\udf0esubscript\ud835\udc17\ud835\udc16insubscript\ud835\udc16out\\\\sigma({\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{in}}){\\\\mathbf{W}}\\_{\\\\textrm{out}}, where \u03c3\ud835\udf0e\\\\sigma takes a different meaning to that in an attention.\n\n#### Language Modelling (LM) Head\n\nAll of the transformer networks to which we apply SliceGPT in this paper have a decoder-only structure following (Radford et al., [2018])): after multiple layers applying alternating attention and FFN blocks, a head block computes logits which are used to compute the loss during training and token prediction on deployment. The head operation is \ud835\udc17\ud835\udc16head+\ud835\udc83headsubscript\ud835\udc17\ud835\udc16headsubscript\ud835\udc83head{\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{head}}+{\\\\bm{b}}\\_{\\\\textrm{head}}, where \ud835\udc17\ud835\udc17{\\\\mathbf{X}} is the output of the last transformer block.\n\n#### Forward pass\n\nOnce the model is trained and all of the parameters are set, the computations required in a transformer network to produce predictions involve passing signal matrices from one block to the next until the head node is reached. Since we are able to define both FFN and attention blocks in the form \u03c3\u200b(\ud835\udc17\ud835\udc16in+\ud835\udc83in)\u200b\ud835\udc16out+\ud835\udc83out\ud835\udf0esubscript\ud835\udc17\ud835\udc16insubscript\ud835\udc83insubscript\ud835\udc16outsubscript\ud835\udc83out\\\\sigma({\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{in}}+{\\\\bm{b}}\\_{\\\\textrm{in}}){\\\\mathbf{W}}\\_{\\\\textrm{out}}+{\\\\bm{b}}\\_{\\\\textrm{out}}, where we understand that \u03c3\ud835\udf0e\\\\sigma represents either a point-wise or multi-head-attention nonlinearity, we are able to describe the forward pass using Algorithm [1]Algorithm 1 \u2023 Forward pass \u2023 2.1 Transformer Networks \u2023 2 Background \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\nAlgorithm 1 The forward pass of a transformer network\n\n0:{\ud835\udc16in\u2113,\ud835\udc83in\u2113,\ud835\udc16out\u2113\u200b\ud835\udc83out\u2113}\u2113=1Lsuperscriptsubscriptsuperscriptsubscript\ud835\udc16in\u2113superscriptsubscript\ud835\udc83in\u2113superscriptsubscript\ud835\udc16out\u2113superscriptsubscript\ud835\udc83out\u2113\u21131\ud835\udc3f\\\\{{\\\\mathbf{W}}\\_{\\\\textrm{in}}^{\\\\ell},{\\\\bm{b}}\\_{\\\\textrm{in}}^{\\\\ell},{\\\\mathbf{W}}\\_{\\\\textrm{out}}^{\\\\ell}\\\\,{\\\\bm{b}}\\_{\\\\textrm{out}}^{\\\\ell}\\\\}\\_{\\\\ell=1}^{L}// weights and biases of FFN and attention blocks\n\n0:{\u03c3\u2113}\u2113=1Lsuperscriptsubscriptsubscript\ud835\udf0e\u2113\u21131\ud835\udc3f\\\\{\\\\sigma\\_{\\\\ell}\\\\}\\_{\\\\ell=1}^{L}// nonlinearity associated with each block\n\n0:{Norm\u2113}\u2113=0LsuperscriptsubscriptsubscriptNorm\u2113\u21130\ud835\udc3f\\\\{\\\\textrm{Norm}\\_{\\\\ell}\\\\}\\_{\\\\ell=0}^{L}// LayerNorm or RMSNorm instances to perform between blocks\n\n0:\ud835\udc16embd,\ud835\udc16head,\ud835\udc83headsubscript\ud835\udc16embdsubscript\ud835\udc16headsubscript\ud835\udc83head{\\\\mathbf{W}}\\_{\\\\textrm{embd}},{\\\\mathbf{W}}\\_{\\\\textrm{head}},{\\\\bm{b}}\\_{\\\\textrm{head}}// embedding and head matrices\n\n0:\ud835\udc94\ud835\udc94{\\\\bm{s}}// input sequence\n\n1:\ud835\udc17\u2190\ud835\udc16embd\u200b\\[\ud835\udc94,:\\]\u2190\ud835\udc17subscript\ud835\udc16embd\ud835\udc94:{\\\\mathbf{X}}\\\\leftarrow{\\\\mathbf{W}}\\_{\\\\textrm{embd}}\\[{\\\\bm{s}},:\\]// index embeddings\n\n2:\ud835\udc17\u2190Norm0\u200b(\ud835\udc17)\u2190\ud835\udc17subscriptNorm0\ud835\udc17{\\\\mathbf{X}}\\\\leftarrow\\\\textrm{Norm}\\_{0}({\\\\mathbf{X}})// normalize\n\n3:for\u2113=1\u200b\u2026\u200bL\u21131\u2026\ud835\udc3f\\\\ell=1\\\\ldots Ldo\n\n4:\ud835\udc19\u2190\u03c3\u2113\u200b(\ud835\udc17\ud835\udc16in\u2113+\ud835\udc83in\u2113)\u200b\ud835\udc16out\u2113+\ud835\udc83out\u2113\u2190\ud835\udc19subscript\ud835\udf0e\u2113superscriptsubscript\ud835\udc17\ud835\udc16in\u2113superscriptsubscript\ud835\udc83in\u2113superscriptsubscript\ud835\udc16out\u2113superscriptsubscript\ud835\udc83out\u2113{\\\\mathbf{Z}}\\\\leftarrow\\\\sigma\\_{\\\\ell}\\\\big{(}{\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{in}}^{\\\\ell}+{\\\\bm{b}}\\_{\\\\textrm{in}}^{\\\\ell}\\\\big{)}{\\\\mathbf{W}}\\_{\\\\textrm{out}}^{\\\\ell}+{\\\\bm{b}}\\_{\\\\textrm{out}}^{\\\\ell}// apply FFN or attention\n\n5:\ud835\udc17\u2190Norm\u2113\u200b(\ud835\udc17+\ud835\udc19)\u2190\ud835\udc17subscriptNorm\u2113\ud835\udc17\ud835\udc19{\\\\mathbf{X}}\\\\leftarrow\\\\textrm{Norm}\\_{\\\\ell}({\\\\mathbf{X}}+{\\\\mathbf{Z}})//  normalize and apply residual connection\n\n6:endfor\n\n7:return\ud835\udc17\ud835\udc16head+\ud835\udc83headsubscript\ud835\udc17\ud835\udc16headsubscript\ud835\udc83head{\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{head}}+{\\\\bm{b}}\\_{\\\\textrm{head}}// apply model head\n\n### 2.2 Related work\n\nIn the simplest setting, one can employ magnitude-based sparsification, which involves setting the smallest weights in the model to zero (Han et al., [2016]); Zhu & Gupta, [2017]); Gale et al., [2019])). Although magnitude sparsification is scalable, its application to LLMs gives too strong a degradation in performance (Frantar & Alistarh, [2023])). Optimal Brain Surgeon (OBS) (Hassibi et al., [1993]); LeCun et al., [1989])), a more sophisticated method, systematically removes weights that have the least impact on the loss function. The method compensates for the error introduced by weight removal by updating the un-pruned weights using the inverse of the Hessian matrix. Unfortunately, OBS is impractical for models with a few million parameters due to the need to calculate and store the inverse of the Hessian matrix.\nTo address the computational limitation posed by OBS, recent research has explored two approaches: approximating the inverse of the Hessian matrix such as WoodFisher (Singh & Alistarh, [2020])) or applying it separately to each layer such as in Optimal Brain Compression (OBC, Frantar & Alistarh, [2022])), known as layer-wise pruning. While these techniques have proven effective for medium-sized networks, they are not practical for large language models, where individual layer weight matrices typically contain more than 108superscript10810^{8} parameters.\n\nGPTQ (Frantar et al., [2022])) has solved this issue by quantizing (representing the parameter using lower precision) the weight matrix of LLMs using a column-by-column scheme and updating all not-yet-quantized weights in the next columns. SparseGPT (Frantar & Alistarh, [2023])) applied the same idea for pruning and sparsifies the LLMs using unstructured and semi-structured pruning, and Sun et al. ( [2023])) simplified the idea by using only the diagonal of the Hessian. Since achieving end-to-end speed improvements through unstructured pruning is a demanding task, they also attempted a similar technique to induce sparsity with semi-structured patterns like 2:4 and 4:8 (Mishra et al., [2021])). However, implementing such structures does not maintain the accuracy of the model.\n\nAnother approach to compression is low-rank approximation, where each weight matrix is replaced with the product of two matrices with a smaller inner dimension, usually followed by a fine-tuning step  (Hu et al., [2021]); Mahabadi et al., [2021]); Noach & Goldberg, [2020]); Tukan et al., [2020])). To achieve compression, the inner dimension must be smaller than half of the original dimension. In contrast, our method replaces each weight matrix with a single smaller one, reducing the embedding dimension without the need for fine-tuning.\n\nWe propose to delete rows and columns of weight matrices, which is similar to pruning of filters and channels in the convnet literature. There, sparsity-inducing regularization is added to batch-norm factors (Liu et al., [2017])) or network structures (Huang & Wang, [2018])), and the network is trained or fine-tuned, resulting in the pruning of channels or parts of the network. Perhaps the most analogous methods to ours are ThiNet (Luo et al., [2017]); He et al., [2017])), which apply linear operations between layers (as will we), interleaved with more fine-tuning with regularization. In this literature, the model sizes are typically several orders of magnitude smaller than in LLMs, for example the VGG16 network has 138M parameters, comparable with the very smallest OPT model that we consider. The huge size of LLMs makes methods that involve extensive fine-tuning unappealing, especially when outer-loops are needed to select regularization parameters.\n\nRecently, some works have been proposed that apply structured pruning to LLMs, followed by continued training (or fine-tuning) to recover the performance that is lost. For example LLM-pruner (Ma et al., [2023a])) removes connected structures from an LLM before further training. Contemporarily with our work, LLM Surgeon (van der Ouderaa et al., [2023])) interweaves recovery fine-tuning with pruning. We provide results for SliceGPT as a single-shot method and with post-slicing recovery fine-tuning.\n\n## 3 SliceGPT\nOur SliceGPT method relies on a computational invariance that is inherent in the transformer architecture. By this, we mean that it is possible to apply an orthogonal transformation to the output of one component, so long as it is undone in the next. Our key insight is that the RMSNorm operation which is performed between blocks of the network does not affect the transformation: the operations commute. In this section, we first describe how the invariance occurs in RMSNorm-connected transformer networks, then we note how networks trained with LayerNorm connections can be converted to RMSNorm. Next, we describe our method to compute transformations at each layer using Principal Component Analysis (PCA), such that the signal between blocks is projected onto its principal components. Finally, we describe how deleting the minor principal components corresponds to slicing away rows or columns of the modified network.\n\n### 3.1 Computational invariance in transformer networks\n\nLet \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} denote an orthogonal matrix: we have \ud835\udc10\u22a4\u200b\ud835\udc10=\ud835\udc10\ud835\udc10\u22a4=\ud835\udc08superscript\ud835\udc10top\ud835\udc10superscript\ud835\udc10\ud835\udc10top\ud835\udc08{\\\\mathbf{Q}}^{\\\\top}{\\\\mathbf{Q}}={\\\\mathbf{Q}}{\\\\mathbf{Q}}^{\\\\top}={\\\\mathbf{I}}. Note that multiplying a vector \ud835\udc99\ud835\udc99{\\\\bm{x}} by \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} does not change the norm of the vector, since \u2016\ud835\udc10\u200b\ud835\udc99\u2016=\ud835\udc99\u22a4\u200b\ud835\udc10\u22a4\u200b\ud835\udc10\u200b\ud835\udc99=\ud835\udc99\u22a4\u200b\ud835\udc99=\u2016\ud835\udc99\u2016norm\ud835\udc10\ud835\udc99superscript\ud835\udc99topsuperscript\ud835\udc10top\ud835\udc10\ud835\udc99superscript\ud835\udc99top\ud835\udc99norm\ud835\udc99\\\\\\|{\\\\mathbf{Q}}{\\\\bm{x}}\\\\\\|=\\\\sqrt{{\\\\bm{x}}^{\\\\top}{\\\\mathbf{Q}}^{\\\\top}{\\\\mathbf{Q}}{\\\\bm{x}}}=\\\\sqrt{{\\\\bm{x}}^{\\\\top}{\\\\bm{x}}}=\\\\\\|{\\\\bm{x}}\\\\\\|. In this work, the dimensions of \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} will always match the embedding dimension of the transformer D\ud835\udc37D.\n\nSuppose that \ud835\udc17\u2113subscript\ud835\udc17\u2113{\\\\mathbf{X}}\\_{\\\\ell} is the output of one block of the transformer, which is then processed by RMSNorm, and then inputted to the subsequent block as RMSNorm\u200b(\ud835\udc17\u2113)RMSNormsubscript\ud835\udc17\u2113\\\\textrm{RMSNorm}({\\\\mathbf{X}}\\_{\\\\ell}). If we insert linear layers with the orthogonal matrix \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} before RMSNorm and \ud835\udc10\u22a4superscript\ud835\udc10top{\\\\mathbf{Q}}^{\\\\top} after RMSNorm, the network remains unchanged, since each row of the signal matrix is multiplied by \ud835\udc10\ud835\udc10{\\\\mathbf{Q}}, normalized and multiplied by \ud835\udc10\u22a4superscript\ud835\udc10top{\\\\mathbf{Q}}^{\\\\top}.\nWe have\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | RMSNorm\u200b(\ud835\udc17\u2113\u200b\ud835\udc10)\u200b\ud835\udc10\u22a4=RMSNorm\u200b(\ud835\udc17\u2113).RMSNormsubscript\ud835\udc17\u2113\ud835\udc10superscript\ud835\udc10topRMSNormsubscript\ud835\udc17\u2113\\\\textrm{RMSNorm}({\\\\mathbf{X}}\\_{\\\\ell}{\\\\mathbf{Q}}){\\\\mathbf{Q}}^{\\\\top}=\\\\textrm{RMSNorm}({\\\\mathbf{X}}\\_{\\\\ell})\\\\,. |  | (2) |\n\nA proof of this relation appears in Appendix [A.1]A.1 Proof of Equation 2 \u2023 Appendix A Appendix \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\"). Now, since each attention or FFN block of the network has a linear operation on both the input and output, we can absorb the additional operations \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} into the linear layers of the blocks. Since the network contains residual connections, we must also apply \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} to the output of all previous layers (all the way back to the embedding) and to all subsequent layers (all the way up to the LM Head).\n\nAn _invariant_ function is one for which a transformation to the input does not result in a change to the output. In our case, we can apply any orthogonal transformation \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} to the weights of the transformer without changing the result, so the _computation_ can be performed in any transformed state. We refer to this as a _computational invariance_, and define it in the following theorem.\n\n###### Theorem 1.\n\nLet \ud835\udc16in\u2113superscriptsubscript\ud835\udc16in\u2113{\\\\mathbf{W}}\\_{\\\\textrm{in}}^{\\\\ell} and \ud835\udc16out\u2113superscriptsubscript\ud835\udc16out\u2113{\\\\mathbf{W}}\\_{\\\\textrm{out}}^{\\\\ell} be the weight matrices of the linear layers of the \u2113\u2113\\\\ell-th block of an RMSNorm-connected transformer network, and \ud835\udc1bin\u2113,\ud835\udc1bout\u2113superscriptsubscript\ud835\udc1bin\u2113superscriptsubscript\ud835\udc1bout\u2113{\\\\bm{b}}\\_{\\\\textrm{in}}^{\\\\ell},{\\\\bm{b}}\\_{\\\\textrm{out}}^{\\\\ell} be the corresponding biases, if any, and let \ud835\udc16embdsubscript\ud835\udc16embd{\\\\mathbf{W}}\\_{\\\\textrm{embd}} and \ud835\udc16headsubscript\ud835\udc16head{\\\\mathbf{W}}\\_{\\\\textrm{head}} be the embedding and head matrices. Let \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} be an orthogonal matrix of dimension D\ud835\udc37D. Then the following network is equivalent to the original transformer network:\n\n\ud835\udc16~embdsubscript~\ud835\udc16embd\\\\displaystyle\\\\tilde{\\\\mathbf{W}}\\_{\\\\textrm{embd}}=\ud835\udc16embd\u200b\ud835\udc10,absentsubscript\ud835\udc16embd\ud835\udc10\\\\displaystyle={\\\\mathbf{W}}\\_{\\\\textrm{embd}}{\\\\mathbf{Q}}\\\\,,(3)\ud835\udc16~in\u2113superscriptsubscript~\ud835\udc16in\u2113\\\\displaystyle\\\\tilde{\\\\mathbf{W}}\\_{\\\\textrm{in}}^{\\\\ell}=\ud835\udc10\u22a4\u200b\ud835\udc16in\u2113,absentsuperscript\ud835\udc10topsuperscriptsubscript\ud835\udc16in\u2113\\\\displaystyle={\\\\mathbf{Q}}^{\\\\top}{\\\\mathbf{W}}\\_{\\\\textrm{in}}^{\\\\ell}\\\\,,(4)\ud835\udc16~out\u2113superscriptsubscript~\ud835\udc16out\u2113\\\\displaystyle\\\\tilde{\\\\mathbf{W}}\\_{\\\\textrm{out}}^{\\\\ell}=\ud835\udc16out\u2113\u200b\ud835\udc10,absentsuperscriptsubscript\ud835\udc16out\u2113\ud835\udc10\\\\displaystyle={\\\\mathbf{W}}\\_{\\\\textrm{out}}^{\\\\ell}{\\\\mathbf{Q}}\\\\,,(5)\ud835\udc1b~out\u2113superscriptsubscript~\ud835\udc1bout\u2113\\\\displaystyle\\\\tilde{\\\\bm{b}}\\_{\\\\textrm{out}}^{\\\\ell}=\ud835\udc10\u22a4\u200b\ud835\udc1bout\u2113,absentsuperscript\ud835\udc10topsuperscriptsubscript\ud835\udc1bout\u2113\\\\displaystyle={\\\\mathbf{Q}}^{\\\\top}{\\\\bm{b}}\\_{\\\\textrm{out}}^{\\\\ell}\\\\,,(6)\ud835\udc16~headsubscript~\ud835\udc16head\\\\displaystyle\\\\tilde{\\\\mathbf{W}}\\_{\\\\textrm{head}}=\ud835\udc10\u22a4\u200b\ud835\udc16head.absentsuperscript\ud835\udc10topsubscript\ud835\udc16head\\\\displaystyle={\\\\mathbf{Q}}^{\\\\top}{\\\\mathbf{W}}\\_{\\\\textrm{head}}\\\\,.(7)\n\nThe input and head biases are copied: \ud835\udc1b~in\u2113=\ud835\udc1bin\u2113superscriptsubscript~\ud835\udc1bin\u2113superscriptsubscript\ud835\udc1bin\u2113\\\\tilde{\\\\bm{b}}\\_{\\\\textrm{in}}^{\\\\ell}={\\\\bm{b}}\\_{\\\\textrm{in}}^{\\\\ell}, \ud835\udc1b~head=\ud835\udc1bheadsubscript~\ud835\udc1bheadsubscript\ud835\udc1bhead\\\\tilde{\\\\bm{b}}\\_{\\\\textrm{head}}={\\\\bm{b}}\\_{\\\\textrm{head}}.\n\n###### Proof.\n\nWe can show that the transformed network computes the same results as the original by stepping through Algorithm [1]Algorithm 1 \u2023 Forward pass \u2023 2.1 Transformer Networks \u2023 2 Background \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\"). Suppose that on line 1, the original network has computed \ud835\udc17\ud835\udc17{\\\\mathbf{X}}, then the modified network has computed \ud835\udc17~=\ud835\udc17\ud835\udc10~\ud835\udc17\ud835\udc17\ud835\udc10\\\\tilde{\\\\mathbf{X}}={\\\\mathbf{X}}{\\\\mathbf{Q}}, using Equation [3]In Theorem 1. \u2023 3.1 Computational invariance in transformer networks \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\"). Applying RMSNorm on line 2, we see that the operation of the two networks matches: by Equation [2]In 3.1 Computational invariance in transformer networks \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") we have RMSNorm\u200b(\ud835\udc17~)=RMSNorm\u200b(\ud835\udc17\ud835\udc10)=RMSNorm\u200b(\ud835\udc17)\u200b\ud835\udc10RMSNorm~\ud835\udc17RMSNorm\ud835\udc17\ud835\udc10RMSNorm\ud835\udc17\ud835\udc10\\\\textrm{RMSNorm}(\\\\tilde{\\\\mathbf{X}})=\\\\textrm{RMSNorm}({\\\\mathbf{X}}{\\\\mathbf{Q}})=\\\\textrm{RMSNorm}({\\\\mathbf{X}}){\\\\mathbf{Q}}.\nApplying the nonlinearity on line 4, we see that \ud835\udc17~\u200b\ud835\udc16~in\u2113=\ud835\udc17\ud835\udc16in\u2113~\ud835\udc17superscriptsubscript~\ud835\udc16in\u2113superscriptsubscript\ud835\udc17\ud835\udc16in\u2113\\\\tilde{\\\\mathbf{X}}\\\\tilde{\\\\mathbf{W}}\\_{\\\\textrm{in}}^{\\\\ell}={\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{in}}^{\\\\ell},\nusing Equation [4]In Theorem 1. \u2023 3.1 Computational invariance in transformer networks \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") and it follows that \ud835\udc19~=\ud835\udc19\ud835\udc10~\ud835\udc19\ud835\udc19\ud835\udc10\\\\tilde{\\\\mathbf{Z}}={\\\\mathbf{Z}}{\\\\mathbf{Q}}.\nOn line 5 the residual connection means we have (\ud835\udc17~+\ud835\udc19~)=(\ud835\udc17+\ud835\udc19)\u200b\ud835\udc10~\ud835\udc17~\ud835\udc19\ud835\udc17\ud835\udc19\ud835\udc10(\\\\tilde{\\\\mathbf{X}}+\\\\tilde{\\\\mathbf{Z}})=({\\\\mathbf{X}}+{\\\\mathbf{Z}}){\\\\mathbf{Q}},\nand applying RMSNorm results in assignment of \ud835\udc17~=\ud835\udc17\ud835\udc10~\ud835\udc17\ud835\udc17\ud835\udc10\\\\tilde{\\\\mathbf{X}}={\\\\mathbf{X}}{\\\\mathbf{Q}}. This follows through to the end of the loop. Finally, on line 7, the transformations are undone as \ud835\udc17\ud835\udc16head=\ud835\udc17~\u200b\ud835\udc16~headsubscript\ud835\udc17\ud835\udc16head~\ud835\udc17subscript~\ud835\udc16head{\\\\mathbf{X}}{\\\\mathbf{W}}\\_{\\\\textrm{head}}=\\\\tilde{\\\\mathbf{X}}\\\\tilde{\\\\mathbf{W}}\\_{\\\\textrm{head}} using Equation [7]In Theorem 1. \u2023 3.1 Computational invariance in transformer networks \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\u220e\n\n### 3.2 LayerNorm Transformers can be converted to RMSNorm\n\nAttentionLayerNormFFNAttentionRMSNormFFN(\ud835\udf36\u2032)\u200b\ud835\udc16ksuperscript\ud835\udf36\u2032subscript\ud835\udc16\ud835\udc58(\\\\bm{\\\\alpha}^{\\\\prime})\\\\mathbf{W}\\_{k}(\ud835\udf36\u2032)\u200b\ud835\udc16qsuperscript\ud835\udf36\u2032subscript\ud835\udc16\ud835\udc5e(\\\\bm{\\\\alpha}^{\\\\prime})\\\\mathbf{W}\\_{q}(\ud835\udf36\u2032)\u200b\ud835\udc16vsuperscript\ud835\udf36\u2032subscript\ud835\udc16\ud835\udc63(\\\\bm{\\\\alpha}^{\\\\prime})\\\\mathbf{W}\\_{v}Multi-HeadAttention\ud835\udc16o\u200b\ud835\udc0csubscript\ud835\udc16\ud835\udc5c\ud835\udc0c\\\\mathbf{W}\\_{o}\\\\mathbf{M}Inputs++\ud835\udc31\u2016\ud835\udc31\u2016\ud835\udc31norm\ud835\udc31\\\\frac{\\\\mathbf{x}}{\\\\\\|\\\\mathbf{x}\\\\\\|}(\ud835\udf36)\u200b\ud835\udc161\ud835\udf36subscript\ud835\udc161(\\\\bm{\\\\alpha})\\\\mathbf{W}\\_{1}ActivationFunction\ud835\udc162\u200b\ud835\udc0csubscript\ud835\udc162\ud835\udc0c\\\\mathbf{W}\\_{2}\\\\mathbf{M}++\n\nFigure 3:  Converting a transformer network from LayerNorm to RMSNorm: the scale matrix AttentionLayerNormFFNAttentionRMSNormFFNdiag\u200b(\ud835\udf36)diag\ud835\udf36\\\\textrm{diag}(\\\\bm{\\\\alpha}) is absorbed into the subsequent matrix AttentionLayerNormFFNAttentionRMSNormFFN\ud835\udc16insubscript\ud835\udc16in{\\\\mathbf{W}}\\_{\\\\textrm{in}}. Figure shows the block in combined colors. We use (\ud835\udf36)\ud835\udf36(\\\\bm{\\\\alpha}) for brevity. The mean-subtraction matrix AttentionLayerNormFFNAttentionRMSNormFFN\ud835\udc0c\ud835\udc0c{\\\\mathbf{M}} is applied to each matrix AttentionLayerNormFFNAttentionRMSNormFFN\ud835\udc16outsubscript\ud835\udc16out{\\\\mathbf{W}}\\_{\\\\textrm{out}}. Layernorm becomes RMSNorm, up to a constant D\ud835\udc37\\\\sqrt{D} (not shown). Here, the scaling AttentionLayerNormFFNAttentionRMSNormFFN(\ud835\udf36\u2032(\\\\bm{\\\\alpha^{\\\\prime}}) comes from the previous block.\n\nThe computational invariance of the transformer network applies only to RMSNorm-connected networks. Before working on those with LayerNorm, we convert the network to RMSNorm by absorbing the linear blocks of LayerNorm into the adjacent blocks. Figure [3]Figure 3 \u2023 3.2 LayerNorm Transformers can be converted to RMSNorm \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") shows such a transformation on the transformer network (see Figure [2]Figure 2 \u2023 LayerNorm \u2023 2.1 Transformer Networks \u2023 2 Background \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\")) . In each block, we multiply the output matrix \ud835\udc16outsubscript\ud835\udc16out{\\\\mathbf{W}}\\_{\\\\textrm{out}} by the mean-subtraction matrix \ud835\udc0c\ud835\udc0c{\\\\mathbf{M}}, which accounts for the mean subtraction that would happen in the subsequent LayerNorm. The input matrices \ud835\udc16insubscript\ud835\udc16in{\\\\mathbf{W}}\\_{\\\\textrm{in}} are pre-multiplied by the scales of the preceding LayerNorm blocks. The embedding matrix \ud835\udc16embdsubscript\ud835\udc16embd{\\\\mathbf{W}}\\_{\\\\textrm{embd}} must be mean-subtracted, and \ud835\udc16headsubscript\ud835\udc16head{\\\\mathbf{W}}\\_{\\\\textrm{head}} must be re-scaled by the last LayerNorm scales. This is a straightforward change in the order of operations and does not affect the network output.\n\n### 3.3 A transformation per block\n\nNow that every LayerNorm in the transformer has been converted to RMSNorm, we can select any \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} to modify the model. Our initial plan was to collect signals from the model, construct an orthogonal matrix using those signals and to delete parts of the network. We quickly saw that the signals at different blocks of the network were not aligned, and that we would need to apply a different orthogonal matrix at each block, \ud835\udc10\u2113subscript\ud835\udc10\u2113{\\\\mathbf{Q}}\\_{\\\\ell}.\n\nAllowing the orthogonal matrix used in each block to differ can be shown to leave the model unchanged using the same proof as Theorem [1]Theorem 1. \u2023 3.1 Computational invariance in transformer networks \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\"), with the exception of line 5 of Algorithm [1]Algorithm 1 \u2023 Forward pass \u2023 2.1 Transformer Networks \u2023 2 Background \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\"). Here we see that the residual connection and the output of the block must have the same rotation. To fix this, we modify the residual connection by applying the linear transformation \ud835\udc10\u2113\u22121\u22a4\u200b\ud835\udc10\u2113superscriptsubscript\ud835\udc10\u21131topsubscript\ud835\udc10\u2113{\\\\mathbf{Q}}\\_{\\\\ell-1}^{\\\\top}{\\\\mathbf{Q}}\\_{\\\\ell} to the residual. Figure [4]Figure 4 \u2023 3.4 Slicing \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") shows how different rotations can be applied to different blocks with the additional linear operation in the residual connection. Unlike the modifications to the weight matrices, these additional operations cannot be pre-computed and add a small (D\u00d7D\ud835\udc37\ud835\udc37D\\\\times D) overhead to the model. Nonetheless, they are needed to allow slicing the model (Section [3.4]Slicing \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\")) and we see real speedup overall (Section [4]Experimental Validation \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\")).\n\nTo compute the matrices \ud835\udc10\u2113subscript\ud835\udc10\u2113{\\\\mathbf{Q}}\\_{\\\\ell}, we use PCA. We select a calibration dataset from the training set, run it through the model (after converting LayerNorm operations into RMSNorm), and extract the orthogonal matrix of the layer. We use the output of the transformed network to calculate the orthogonal matrices of the next layers. More precisely, if \ud835\udc17\u2113,isubscript\ud835\udc17\u2113\ud835\udc56{\\\\mathbf{X}}\\_{\\\\ell,i} is the output of the \u2113thsuperscript\u2113th\\\\ell^{\\\\textrm{th}} RMSNorm block for the ithsuperscript\ud835\udc56thi^{\\\\textrm{th}} sequence in the calibration dataset, we compute\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc02\u2113=\u2211i\ud835\udc17\u2113,i\u22a4\u200b\ud835\udc17\u2113,isubscript\ud835\udc02\u2113subscript\ud835\udc56superscriptsubscript\ud835\udc17\u2113\ud835\udc56topsubscript\ud835\udc17\u2113\ud835\udc56{\\\\mathbf{C}}\\_{\\\\ell}=\\\\sum\\_{i}{\\\\mathbf{X}}\\_{\\\\ell,i}^{\\\\top}{\\\\mathbf{X}}\\_{\\\\ell,i} |  | (8) |\n\nand set \ud835\udc10\u2113subscript\ud835\udc10\u2113{\\\\mathbf{Q}}\\_{\\\\ell} to the be the eigenvectors of \ud835\udc02\u2113subscript\ud835\udc02\u2113{\\\\mathbf{C}}\\_{\\\\ell}, sorted by decreasing eigenvalues.\n\n### 3.4 Slicing\n\nThe goal of Principal Component Analysis is usually to take a data matrix \ud835\udc17\ud835\udc17{\\\\mathbf{X}} and compute a lower dimensional representation \ud835\udc19\ud835\udc19{\\\\mathbf{Z}}, and an approximate reconstruction \ud835\udc17~~\ud835\udc17\\\\tilde{\\\\mathbf{X}}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc19=\ud835\udc17\ud835\udc10\ud835\udc03,\ud835\udc17~=\ud835\udc19\ud835\udc03\u22a4\u200b\ud835\udc10\u22a4.formulae-sequence\ud835\udc19\ud835\udc17\ud835\udc10\ud835\udc03~\ud835\udc17superscript\ud835\udc19\ud835\udc03topsuperscript\ud835\udc10top{\\\\mathbf{Z}}={\\\\mathbf{X}}{\\\\mathbf{Q}}{\\\\mathbf{D}}\\\\,,\\\\qquad\\\\tilde{\\\\mathbf{X}}={\\\\mathbf{Z}}{\\\\mathbf{D}}^{\\\\top}{\\\\mathbf{Q}}^{\\\\top}\\\\,. |  | (9) |\n\nwhere \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} is the eigenvectors of \ud835\udc17\u22a4\u200b\ud835\udc17superscript\ud835\udc17top\ud835\udc17{\\\\mathbf{X}}^{\\\\top}{\\\\mathbf{X}}, and \ud835\udc03\ud835\udc03{\\\\mathbf{D}} is a D\u00d7Dsmall\ud835\udc37subscript\ud835\udc37smallD\\\\times D\\_{\\\\textrm{small}} deletion matrix (containing Dsmallsubscript\ud835\udc37smallD\\_{\\\\textrm{small}} columns of the D\u00d7D\ud835\udc37\ud835\udc37D\\\\times D identity matrix), which removes some of the columns of the matrix to the left.\nThe reconstruction is L2subscript\ud835\udc3f2L\\_{2} optimal, in the sense that \ud835\udc10\ud835\udc03\ud835\udc10\ud835\udc03{\\\\mathbf{Q}}{\\\\mathbf{D}} is a linear mapping that minimizes \u2016\ud835\udc17\u2212\ud835\udc17~\u20162superscriptnorm\ud835\udc17~\ud835\udc172\\\\\\|{\\\\mathbf{X}}-\\\\tilde{\\\\mathbf{X}}\\\\\\|^{2}.\n\nWhen we apply PCA to the signal matrix \ud835\udc17\ud835\udc17{\\\\mathbf{X}} between blocks, we never materialize the N\u00d7D\ud835\udc41\ud835\udc37N\\\\times D signal matrix, but we apply the deletion matrix \ud835\udc03\ud835\udc03{\\\\mathbf{D}} to the operations preceding and succeeding the construction of that matrix, which have already been multiplied by \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} in the above. We delete rows of \ud835\udc16insubscript\ud835\udc16in{\\\\mathbf{W}}\\_{\\\\textrm{in}} and columns of \ud835\udc16outsubscript\ud835\udc16out{\\\\mathbf{W}}\\_{\\\\textrm{out}} and \ud835\udc16embdsubscript\ud835\udc16embd{\\\\mathbf{W}}\\_{\\\\textrm{embd}}. We also delete both rows _and_ columns of the matrix \ud835\udc10\u2113\u22121\u22a4\u200b\ud835\udc10\u2113superscriptsubscript\ud835\udc10\u21131topsubscript\ud835\udc10\u2113{\\\\mathbf{Q}}\\_{\\\\ell-1}^{\\\\top}{\\\\mathbf{Q}}\\_{\\\\ell} that we have inserted into the residual connection (see Figure [4]Figure 4 \u2023 3.4 Slicing \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\")).\n\nAttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN\ud835\udc101\u22a4\u200b(\ud835\udf36\u2032)\u200b\ud835\udc16ksuperscriptsubscript\ud835\udc101topsuperscript\ud835\udf36\u2032subscript\ud835\udc16\ud835\udc58\\\\mathbf{Q}\\_{1}^{\\\\top}\\\\!(\\\\!\\\\bm{\\\\alpha}^{\\\\prime}\\\\!)\\\\mathbf{W}\\_{\\\\!k}\ud835\udc101\u22a4\u200b(\ud835\udf36\u2032)\u200b\ud835\udc16qsuperscriptsubscript\ud835\udc101topsuperscript\ud835\udf36\u2032subscript\ud835\udc16\ud835\udc5e\\\\mathbf{Q}\\_{1}^{\\\\top}\\\\!(\\\\!\\\\bm{\\\\alpha}^{\\\\prime}\\\\!)\\\\mathbf{W}\\_{\\\\!q}\ud835\udc101\u22a4\u200b(\ud835\udf36\u2032)\u200b\ud835\udc16vsuperscriptsubscript\ud835\udc101topsuperscript\ud835\udf36\u2032subscript\ud835\udc16\ud835\udc63\\\\mathbf{Q}\\_{1}^{\\\\top}\\\\!(\\\\!\\\\bm{\\\\alpha}^{\\\\prime}\\\\!)\\\\mathbf{W}\\_{\\\\!v}\ud835\udc16o\u200b\ud835\udc0c\ud835\udc102subscript\ud835\udc16\ud835\udc5csubscript\ud835\udc0c\ud835\udc102\\\\mathbf{W}\\_{\\\\!o}\\\\mathbf{M}\\\\mathbf{Q}\\_{2}Multi-HeadAttentionInputs multipliedby \ud835\udc101subscript\ud835\udc101\\\\mathbf{Q}\\_{1} and truncated++\ud835\udc31\u2016\ud835\udc31\u2016\ud835\udc31norm\ud835\udc31\\\\frac{\\\\mathbf{x}}{\\\\\\|\\\\mathbf{x}\\\\\\|}\ud835\udc102\u22a4\u200b(\ud835\udf36)\u200b\ud835\udc161superscriptsubscript\ud835\udc102top\ud835\udf36subscript\ud835\udc161\\\\mathbf{Q}\\_{2}^{\\\\top}(\\\\bm{\\\\alpha})\\\\mathbf{W}\\_{1}ActivationFunction\ud835\udc162\u200b\ud835\udc0c\ud835\udc103subscript\ud835\udc162subscript\ud835\udc0c\ud835\udc103\\\\mathbf{W}\\_{\\\\!2}\\\\mathbf{M}\\\\mathbf{Q}\\_{3}++\ud835\udc101\u22a4\u200b\ud835\udc102superscriptsubscript\ud835\udc101topsubscript\ud835\udc102\\\\mathbf{Q}\\_{1}^{\\\\top}\\\\!\\\\mathbf{Q}\\_{2}\ud835\udc102\u22a4\u200b\ud835\udc103superscriptsubscript\ud835\udc102topsubscript\ud835\udc103\\\\mathbf{Q}\\_{2}^{\\\\top}\\\\!\\\\mathbf{Q}\\_{3}\n\nFigure 4:  With the network converted to RMSNorm (see Figure [3]Figure 3 \u2023 3.2 LayerNorm Transformers can be converted to RMSNorm \u2023 3 SliceGPT \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\")), we apply the computational-invariance idea. The input weight matrices AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFNdiag\u200b(\ud835\udf36)diag\ud835\udf36\\\\textrm{diag}(\\\\bm{\\\\alpha})AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN\ud835\udc16insubscript\ud835\udc16in{\\\\mathbf{W}}\\_{\\\\textrm{in}} are pre-multiplied by AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN\ud835\udc10\u22a4superscript\ud835\udc10top{\\\\mathbf{Q}}^{\\\\top}. The output matrices AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN\ud835\udc16outsubscript\ud835\udc16out{\\\\mathbf{W}}\\_{\\\\textrm{out}}AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN\ud835\udc0c\ud835\udc0c{\\\\mathbf{M}} are post-multiplied by AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN\ud835\udc10\ud835\udc10{\\\\mathbf{Q}}. In the skip-connection, a new linear layer is added AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN\ud835\udc10\u2113\u22a4\u200b\ud835\udc10\u2113+1superscriptsubscript\ud835\udc10\u2113topsubscript\ud835\udc10\u21131{\\\\mathbf{Q}}\\_{\\\\ell}^{\\\\top}{\\\\mathbf{Q}}\\_{\\\\ell+1}. After these modifications, the matrices can be sliced (hatched areas).\n\n## 4 Experimental Validation\n#### Setup\n\nWe use Hugging Face Transformers (Wolf et al., [2019])) to implement our code with PyTorch (Paszke et al., [2019])).\nThe computation of \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} is performed on a single H100 GPU with 80GB of memory,\ntaking approximately 3.5 hours to complete for the Llama-\n270B model. During the PCA calculation, we use double precision for computing the eigenvectors of the covariance matrix.\nWe find that using single precision for eigenvector calculations in PyTorch leads to a discrepancy in the final accuracy, as detailed in Appendix [A.2]A.2 Single Precision Eigenvalue Calculation \u2023 Appendix A Appendix \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\nWe experiment with two different calibration sets: the WikiText-2 training dataset (Merity et al., [2016])) and the Alpaca training dataset (Taori et al., [2023])). An ablation study on the calibration set size and sequence length is presented in Appendix [A.3]A.3 Sensitivity to the calibration set size and sequence length \u2023 Appendix A Appendix \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\n#### Models, Tasks, and GPUs\n\nWe evaluate all our experiments on OPT (Zhang et al., [2022])), Llama-\n2(Touvron et al., [2023])) model families, and additionally evaluate Phi-2 (in our zero-shot task) experiments. We exclude OPT 175B, as it is outperformed by smaller Llama-\n2models. Nonetheless, we anticipate that this larger model will yield improved results, as larger models typically offer more promising opportunities for compression (see Section [4.1]Results \u2023 4 Experimental Validation \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\")). We evaluate our scheme on both language generation as well as popular zero-shot tasks. To demonstrate the comprehensive speedup achieved by SliceGPT we use: Quadro RTX6000 GPUs with 24GB of memory as a representative example of consumer-level GPUs; 40GB A100s and 80GB H100s to provide datacenter-level benchmarks.\n\n#### Baseline Setup\n\nWe initially planned to compare our results against a scheme that pruned columns (or rows) with the smallest norm but found that this baseline was very poor, with the WikiText-2 perplexity of the model soaring into the 1000s after pruning just a few columns. Instead, we compare SliceGPT against SparseGPT (Frantar & Alistarh, [2023])) employing a 2:4 sparsity ratio, as this is the only sparsity scheme which achieves speedup (Mishra et al., [2021])).\n\n### 4.1 Results\n\n#### Generation Task\n\nWe begin by showcasing our findings using the WikiText-2 dataset.\nIn this context, we evaluate the performance of both the OPT and Llama-\n2model families across different sizes when using this dataset for slicing.\nTable [1]Table 1 \u2023 Generation Task \u2023 4.1 Results \u2023 4 Experimental Validation \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") shows the perplexity obtained by various slicing levels.\nSliceGPT exhibits superior performance when applied to OPT models compared to Llama-\n2models which matches our intuition from the spectrum analysis of those models (see Appendix [A.4]A.4 Spectrum Analysis of Llama-2 and OPT Models \u2023 Appendix A Appendix \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") for our discussion).\nThe performance of SliceGPT improves as the model size increases.\nComparing SliceGPT with SparseGPT, we see that that SparseGPT 2:4 performs worse than SliceGPT with 25%percent2525\\\\% slicing in all Llama-\n2models. For OPT, we see that 30%percent3030\\\\% sliced models beat 2:4 sparsity for all model sizes except 2.7B.\n\nTable 1: OPT and Llama-\n2perplexity results on WikiText2. The calibration set size and sequence length are 1024 and 2048, respectively.\n\n| Method | OPT | Llama-<br>2 |\n| --- | --- | --- |\n| 125M | 1.3B | 2.7B | 6.7B | 13B | 30B | 66B | 7B | 13B | 70B |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Dense | 27.64 | 14.61 | 12.46 | 10.85 | 10.12 | 9.56 | 9.33 | 5.47 | 4.88 | 3.32 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| SparseGPT 2:4 | 45.07 | 29.61 | 14.90 | 13.00 | 11.80 | 10.53 | 10.22 | 8.69 | 7.07 | 4.98 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| SliceGPT (10%)10\\\\%) | 29.34 | 15.10 | 12.75 | 10.92 | 10.27 | 9.65 | 9.43 | 5.89 | 5.21 | 3.69 |\n| SliceGPT (20%)20\\\\%) | 34.26 | 16.43 | 13.73 | 11.48 | 10.66 | 9.87 | 9.57 | 6.64 | 5.81 | 4.25 |\n| SliceGPT (25%)25\\\\%) | 37.74 | 17.46 | 14.56 | 11.90 | 10.94 | 10.04 | 9.68 | 7.24 | 6.30 | 4.60 |\n| SliceGPT (30%)30\\\\%) | 43.98 | 19.09 | 15.83 | 12.51 | 11.33 | 10.27 | 9.85 | 8.12 | 6.99 | 5.05 |\n\n#### Zero-shot Tasks\n\nWe assess SliceGPT across five well-known zero-shot tasks: PIQA (Bisk et al., [2020])); WinoGrande (Sakaguchi et al., [2021])); HellaSwag (Zellers et al., [2019])); ARC-e and ARC-c (Clark et al., [2018])). Following similar work (Frantar & Alistarh, [2023]); Dettmers et al., [2022]); Frantar et al., [2022]); Dettmers et al., [2023])), we use the LM Evaluation Harness (Gao et al., [2021])) with default parameters in our evaluations.\n\nFigure [5]Figure 5 \u2023 Zero-shot Tasks \u2023 4.1 Results \u2023 4 Experimental Validation \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") shows the average scores achieved by the sliced models across these tasks. The top row of the plot shows the mean accuracy when WikiText-2 is used for calibration, and the bottom row shows the accuracy when Alpaca is used for calibration. We observe a similar pattern to the generation task in the results: the OPT models are more amenable to compression than the Llama-\n2models, and the reduction in accuracy is less pronounced in the larger models. Here we also include the Phi-2 model: we see that sliced versions of the Phi-2 model are comparable with sliced versions of the Llama-\n27B model. The largest OPT and Llama-\n2models can be compressed very effectively, with just a few percentage points loss when removing 30% of the 66B OPT model.\n\nWe additionally experiment here with recovery fine-tuning (RFT).\nWe apply a small amount of RFT to sliced Llama-\n2and Phi-2 models using LoRA (Hu et al., [2021])), following the idea from Ma et al. ( [2023a])). For models sliced with WikiText-2 we use approximately 1k sequences, for those sliced with the Alpaca dataset we use 5k. For all RFT we use l\u200bo\u200br\u200ba\u200b\\_\u200br=32\ud835\udc59\ud835\udc5c\ud835\udc5f\ud835\udc4e\\_\ud835\udc5f32lora\\\\\\_r=32, l\u200bo\u200br\u200ba\u200b\\_\u200ba\u200bl\u200bp\u200bh\u200ba=10\ud835\udc59\ud835\udc5c\ud835\udc5f\ud835\udc4e\\_\ud835\udc4e\ud835\udc59\ud835\udc5d\u210e\ud835\udc4e10lora\\\\\\_alpha=10 and sequence length 1024, and use defaults for all other hyperparameters in the Hugging Face PEFT package (Mangrulkar et al., [2022])).\n\nFigure [6]Figure 6 \u2023 Zero-shot Tasks \u2023 4.1 Results \u2023 4 Experimental Validation \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") shows the results. We see a marked difference between RFT on WikiText-2 and Alpaca datasets, with the Alpaca dataset giving much higher performing models. We attribute this difference to the similarity between Alpaca and the benchmark tasks. For the largest Llama-\n270B model sliced at 30%, with RFT on Alpaca we are able to achieve an average accuracy of 74.3%, compared to 76.6% on the dense model. The sliced model has approximately 51.6B parameters and considerably improved throughput as we demonstrate later.\n\nWe see that Phi-2 is not able to recover the drop in accuracy from slicing using only the WikiText-2 dataset, but using Alpaca we are able to recover several percentage points.\nThe average accuracy of Phi-2 with 25% slicing and RFT is 65.2%, compared to 72.2% with the dense model. The sliced model has approximately 2.2B parameters and retains 90.3% of the accuracy of the 2.8B model. This shows that even small LMs can benefit from post-training pruning. Tables of accuracies across each task are provided in Appendix [A.5]A.5 Detailed Zero-shot Results \u2023 Appendix A Appendix \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\nAttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN404040505050606060707070808080WikiText-2 calib.Mean AccuracyOPT FamilyLlama-\n2FamilyPhi-2 Dense20% sliced25% sliced30% sliced1.3B2.7B6.7B13B30B66B404040505050606060707070808080#params in the original modelAlpaca calib.Mean Accuracy7B13B70B#params in the original model2.8BFigure 5: Mean zero-shot accuracy on OPT, Llama-\n2and Phi-2 across multiple tasks after slicing with the WikiText-2 (top) and Alpaca (bottom) datasets for calibration.AttentionLayerNormFFNAttentionRMSNormFFNAttentionRMSNormFFN7B13B70B404040505050606060707070808080#params in the original modelWikiText2 cal. & RFTMean AccuracyLlama-\n2Family2.78BPhi-27B13B70B404040505050606060707070808080#params in the original modelAlpaca cal. & RFTMean AccuracyLlama-\n2Family2.8BPhi-2Dense20% sliced25% sliced30% slicedFigure 6: Mean zero-shot accuracy on Llama-\n2and Phi-2 across multiple tasks after slicing and recovery fine-tuning (RFT). Left: WikiText-2 used for calibration and RFT. Right: Alpaca used for calibration and RFT. Despite an extensive search, we were not able to find RFT parameters that enabled improved performance in the OPT models.\n\n#### Benchmarking Throughput\n\nUnlike conventional sparsity methods, which introduce sparsity in \ud835\udc16insubscript\ud835\udc16in{\\\\mathbf{W}}\\_{\\\\textrm{in}} and \ud835\udc16outsubscript\ud835\udc16out{\\\\mathbf{W}}\\_{\\\\textrm{out}}, SliceGPT also introduces (structured) sparsity in \ud835\udc17\ud835\udc17{\\\\mathbf{X}}: entire columns of \ud835\udc17\ud835\udc17{\\\\mathbf{X}} are sliced off, reducing the embedding dimension. This enhances both the computational complexity (in flops) and data movement within our compressed model.\n\nThe token throughput of models sliced at 25% and 50% are compared to the dense model on 80GB H100 GPUs. We set the sequence length to 128 and find the maximum throughput by doubling the batch size until the GPUs run out of memory or the throughput drops off. The 25% sliced models achieve up to 1.55\u00d7\\\\times throughput improvement over the dense model. At 50% slicing the largest models require only one GPU instead of two, with large increases in throughput: 3.13\u00d7\\\\times and 1.87\u00d7\\\\times. This means that for a fixed number of GPUs, these models achieve 6.26\u00d7\\\\times and 3.75\u00d7\\\\times throughput of a dense model. We note that the WikiText2 perplexity of SliceGPT at 50% is worse than SparseGPT 2:4, but the throughput is much higher than could be achieved with a sparse method that does not slice \ud835\udc17\ud835\udc17{\\\\mathbf{X}}. For models of size 13B, the performance increase from batch-size increasing is less pronounced because the models take up little of the GPU memory. On consumer grade GPUs (with less memory) the throughput for these smaller models is likely to be improved. For full details see Appendix [A.6]A.6 Benchmarking Throughput Experiment \u2023 Appendix A Appendix \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\n#### Inference Time\n\nNext we study the end-to-end runtime of a model compressed with SliceGPT. Table [2]Table 2 \u2023 Inference Time \u2023 4.1 Results \u2023 4 Experimental Validation \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\") compares the time of generating a single token in OPT 66B and Llama-\n270B models on Quadro RTX6000 and A100 GPUs. We observe a speedup of 16-17% on RTX6000 GPUs when employing 25% slicing, and 11-13% on A100s. We reduce the number of GPUs used in both cases, providing energy and cost savings relative to deployment of the dense model. For Llama-\n270B, the compute required using RTX6000 GPUs is reduced to 64%, from 1764 GPUms to 1075 GPUms444Our Hugging Face-based testing does not enjoy continuous batching or model sharding. This means that in terms of inference time, the dense-model could be improved more than our sliced model in terms of GPUms. Nonetheless, our measurements _do_ reflect the energy-usage per token in such a deployment.. We attribute this improvement to our approach of substituting weight matrices with smaller ones and using dense kernels in our compressed models, which is infeasible with other pruning schemes.\n\nTable 2: Average per-token inference time of SliceGPT when generating sequences of length 128 (with batch size of 1). In each case, we show the time taken in ms, the number of GPUs required and the total compute in GPUms.\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| GPU Type | Slicing | OPT 66B | Llama-<br>270B |\n| A100 (40GB) | Dense | 114ms on 4 GPUs | 456 GPUms | 125ms on 4 GPUs | 500 GPUms |\n| 25%percent2525\\\\% | 102ms on 3 GPUs | 306 GPUms | 110ms on 3 GPUs | 330 GPUms |\n| Quadro RTX6000 | Dense | 237ms on 6 GPUs | 1422 GPUms | 252ms on 7 GPUs | 1764 GPUms |\n| (24GB) | 25%percent2525\\\\% | 204ms on 5 GPUs | 1020 GPUms | 215ms on 5 GPUs | 1075 GPUms |\n\nEnd-to-end performance gains are not feasible with our baseline SparseGPT 2:4 at the time of writing. Instead, we compare SliceGPT with SparseGPT 2:4 by comparing the relative timing of each operation involved in a transformer layer. We find that SliceGPT (25%) is competitive with SparseGPT (2:4) in terms of speedup and perplexity for large models. For further details see Appendix [A.7]A.7 Benchmarking Inference Time of SliceGPT against SparseGPT \u2023 Appendix A Appendix \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\n#### Compute cost\n\nAll Llama-\n2, OPT and Phi-2 models can be sliced on a single GPU in 1 to 3 hours. With recovery fine-tuning we compress all LMs in 1 to 5 hours total, as shown in Table [3]Table 3 \u2023 Compute cost \u2023 4.1 Results \u2023 4 Experimental Validation \u2023 SliceGPT: Compress Large Language Models by Deleting Rows and Columns\").\n\nTable 3: Compute cost of slicing 30% with SliceGPT and performing recovery fine-tuning using the Alpaca dataset. Here we use a calibration set size of 1024 for Llama-\n2models and 2048 for Phi-2 , and calibration sequence length 2048 in all cases.\n\n| Model | SliceGPT 30% | Recovery fine-tuning | Total |\n| Time | GPUs | Time | GPUs |\n| Llama-<br>27B | 0h44m | 1xH100 80GB | 0h23m | 1xH100 80GB | 1h07m |\n| Llama-<br>213B | 1h08m | 1xH100 80GB | 0h44m | 1xH100 80GB | 1h52m |\n| Llama-<br>270B | 3h31m | 1xH100 80GB | 1h35m | 4xH100 80GB | 5h06m |\n| Phi-2 | 0h49m | 1xV100 32GB | 1h59m | 1xV100 32GB | 2h48m |\n\n## 5 Conclusion and Future Work\nWe\u2019ve introduced SliceGPT which allows for structured pruning for large language models. We reduce the cost of inference of Llama-\n270B on 40GB A100 GPUs to 66% of that of the dense model without any additional code optimization, requiring fewer GPUs (from 4 to 3) while maintaining better held-out perplexity than SparseGPT 2:4. On 24GB RTX6000 GPUs, the cost of inference is reduced to 64%, requiring 2 fewer GPUs (from 7 to 5). On zero-shot downstream tasks, slicing OPT 66B, Llama-\n270B and Phi-2 at 25% maintains 99%, 96% and 87% of the dense performance. With recovery fine-tuning 25%-sliced Llama-\n270B and Phi-2 increase to 99% and 90% respectively.\n\nOpportunities remain to build on our method. Smaller but dense LMs perform better than LMs with 13B parameters or less pruned to similar sizes, though we do not expect this to remain the case for long. Our pruned models have more parameters than those pruned with SparseGPT but our method allows for larger batch sizes to be loaded into GPU memory, and has no overhead for sparsity structure: perhaps a combined method could obtain the best of both. Other methods of computing \ud835\udc10\ud835\udc10{\\\\mathbf{Q}} could improve the results. To further decrease the inference time and GPU count, complementary methods including quantization (Xiao et al., [2023]); Dettmers et al., [2022]); Ashkboos et al., [2023]); Dettmers et al., [2023]); Frantar et al., [2022])), and structural pruning (e.g. Ma et al., [2023b])) could be used.\n\nWe hope that our observation of computational invariance can help future research in improving the efficiency of deep learning models, and perhaps inspire new theoretical insights.\n</Content></Candidate>\n\n<Candidate>Candidate [1]:\nPost-training quantization for vision transformer.\n\n<Abstract>Abstract: Recently, transformer has achieved remarkable performance on a variety of\ncomputer vision applications. Compared with mainstream convolutional neural\nnetworks, vision transformers are often of sophisticated architectures for\nextracting powerful feature representations, which are more difficult to be\ndeveloped on mobile devices. In this paper, we present an effective\npost-training quantization algorithm for reducing the memory storage and\ncomputational costs of vision transformers. Basically, the quantization task\ncan be regarded as finding the optimal low-bit quantization intervals for\nweights and inputs, respectively. To preserve the functionality of the\nattention mechanism, we introduce a ranking loss into the conventional\nquantization objective that aims to keep the relative order of the\nself-attention results after quantization. Moreover, we thoroughly analyze the\nrelationship between quantization loss of different layers and the feature\ndiversity, and explore a mixed-precision quantization scheme by exploiting the\nnuclear norm of each attention map and output feature. The effectiveness of the\nproposed method is verified on several benchmark models and datasets, which\noutperforms the state-of-the-art post-training quantization algorithms. For\ninstance, we can obtain an 81.29\\% top-1 accuracy using DeiT-B model on\nImageNet dataset with about 8-bit quantization.</Abstract><Content>\n## 1 Introduction\nFollowing the applications in Natural Language Processing (NLP) tasks, transformer-based models have shown great power in various Computer Vision (CV) tasks, such as image classification \\[ [11]), [26])\\], object detection \\[ [4]), [38])\\] and image super-resolution \\[ [5])\\]. Pre-trained with large-scale data, these models usually have hundreds of millions of parameters. For instance, there are 307M parameters and 64G FLOPs in the ViT-L model, which is both memory and computation expensive during inference. This brings great challenges for these models to run on resource-constrained devices like mobile phones and intelligent cars. Besides, the real-time computer vision applications that integrate transformer-based models have to meet low latency requirements to achieve a high quality customer experience. Therefore, the model compression technology of transformer-based models is urgently needed for deployment in industrial environments.\n\nAmong various compression methods like pruning \\[ [16]), [29]), [19])\\] and weight decomposition \\[ [36])\\], quantization method \\[ [9]), [37]), [7]), [27]), [14])\\] compresses a neural network by using lower bit-width for weight values without changing the model architecture, which is particularly useful for carefully-designed network architectures like transformers. Quantizing both weights and inputs can speed up inference by tuning floating-point operations into integer or bit operations. There have been some training-aware quantization approaches for transformer-based models in NLP ( _e.g._, BERT \\[ [17])\\]) \\[ [33]), [23]), [34]), [22])\\]. However, these methods are not designed for computer vision tasks and usually need additional training or fine-tuning. Furthermore, in some scenarios, the entire training data is not available to optimize the quantization model and the training costs for edge devices are intolerable.\n\nPost-training quantization \\[ [24])\\] is a kind of efficient model compression technique, which can directly quantize neural network models without fine-tuning. Most of the existing post-training quantization methods are designed for convolutional neural networks \\[ [3]), [21]), [30])\\] or recurrent neural networks \\[ [35])\\]. These methods do not take the character of vision transformer into consideration ( _e.g._, the attention mechanism do not exist in CNNs), which are not perfectly suitable for quantizing vision transformer. However, vision transformers are showing stronger performance in a large variety of computer vision tasks. Thus, we are motivated to explore the post-training quantization for them to reduce the costs on memory and computation.\n\nIn this paper, we study the post-training quantization method for vision transformer models with mixed-precision for higher compression and speed-up ratios. The quantized process in the transformer is formulated as an optimization problem for finding the optimal quantization intervals. Specially, our goal is to maximize the similarity between the full-precision and quantized outputs in vision transformers. To better preserve the functionality of the attention mechanism, we thoroughly analyze the difference between attention layers and conventional layers such as MLP. Then, a ranking loss is introduced to keep the relative order of attention values. Furthermore, we propose to determine the bit-widths of each layer according to the feature diversity, _i,e,_, the nuclear norm calculated by the attention map and output features. We alternatively search the quantization intervals of weights and inputs in all layers to obtain the best quantization results. In addition, bias correction is introduced to diminish the cumulative quantization error. Experimental results on several benchmarks demonstrate the effectiveness of our algorithm for achieving better performance over the state-of-art post-training quantization approaches.\n\n## 2 Related Works\nHere, we reviews the transformer-based models designed for computer vision tasks. And the training-aware quantization schemes proposed for BERT and post-training quantization algorithms are summarized and analyzed.\n\n### 2.1 Vision Transformer\n\nInspired by the major success of transformer architectures in the field of NLP, researchers have recently applied transformer to computer vision (CV) tasks \\[ [13])\\]. Chen _et al._\\[ [6])\\] trained a sequence transformer to auto-regressively predict pixels, achieving results comparable to CNNs on image classification tasks. Another vision transformer model is ViT, which applies a pure transformer directly to treat image patches as the sequences. Recently proposed by Dosovitskiy _et al._\\[ [11])\\], it has achieved great performance on multiple image recognition benchmarks. Touvron _et al._\\[ [26])\\] produce competitive convolution-free transformers by training on ImageNet only while introducing a teacher-student strategy specific to transformers. In addition to basic image classification, transformer has been utilized to address a variety of other computer vision problems, including object detection \\[ [4]), [38])\\], semantic segmentation \\[ [5])\\], image processing \\[ [5])\\], and video understanding \\[ [5])\\]. Han et al. \\[ [15])\\] proposed a Transformer-iN-Transformer (TNT) model for modeling both patch-level and pixel-level representation. Tang et al. \\[ [25])\\] proposed a patch slimming method to accelerate the vision transformers. Thanks to its exceptional performance, more and more researchers are proposing transformer-based models for a wide range of computer vision tasks.\n\n### 2.2 Compression of Transformer in NLP\n\nOwing to the remarkable performance of BERT in many NLP tasks, many researchers have tried to compress the model to reduce the memory and computation complexity of BERT. Wu et al. \\[ [31])\\] proposed Short Range Attention (LSRA) to conduct transformer on edge devices, where one group of heads specializes in the local context modeling (by convolution) while another group specializes in the long-distance relationship modeling. In \\[ [22]), [33])\\], 8-bit quantization is successfully applied to Transformer-based models with comparable performance as the full-precision baseline. However, quantizing these models to ultra low bits ( _e.g._, 1 or 2 bits) can be much more challenging due to significant reduction in model capacity. To avoid severe accuracy drop, more complex quantization methods, like mixed-precision quantization \\[ [23]), [32])\\] and product quantization (PQ) \\[ [12])\\] are used. In addition, Zhang _et al._\\[ [34])\\] propose TernaryBERT, which use both approximation-based and loss-aware ternarization methods and empirically investigate the ternarization granularity of different parts of BERT. Moreover, to reduce the accuracy degradation, they also leverage the knowledge distillation technique. Bai _et al._\\[ [1])\\] further push BERT quantization to the limit with weight binarization. They propose ternary weight splitting, which initializes the binary model by equivalent splitting from a half-sized ternary network. However, these methods are not designed for computer vision tasks and need additional training or fine-tuning.\n\n### 2.3 Post-Training Quantization\n\nThere are many works focusing on developing post-training quantization methods, without any training or fine-tuning. In particular, Yoni _et al._\\[ [8])\\] propose the OMSE method to optimize the L2subscript\ud835\udc3f2L\\_{2} distance between the quantized tensor and the original tensor. Moreover, Ron _et al._\\[ [2])\\] present the so-called ACIQ method to analytically compute the clipping range, as well as the per-channel bit allocation for NNs. Zhao _et al._\\[ [35])\\] propose an outlier channel splitting (OCS) method to solve the outlier channel problem.\nWang _et al._\\[ [28])\\] propose a Bit-Split and Stitching framework for lower-bit post-training quantization and an Error\nCompensated Activation Quantization method, which could\nlower the quantization error for activations. Nagel _et al._\\[ [20])\\] propose AdaRound, a weight-rounding mechanism for post-training quantization that adapts to the data and the task loss. By approximating the task loss with a Taylor series expansion, the rounding task is posed as a quadratic unconstrained binary optimization problem. The recent work of \\[ [21])\\] propose Data-Free Quantization, which further pushes post-training quantization to zero-shot scenarios, where neither training nor testing data are accessible during quantization. Cai _et al._\\[ [3])\\] introduce ZeroQ, which distills an input data distribution to match the statistics in the batch normalization layers of the model and utilize a Pareto Frontier method to select automatically the bit-precision configuration of mixed-precision settings. These methods are designed for CNNs and do not consider the unique structure of vision transformers such as self-attention layers.\n\n## 3 Methodology\nIn this section, we elaborate on the proposed mixed-precision post-training quantization scheme for the vision transformer. The similarity-aware quantization for linear layers and ranking-aware quantization for self-attention layers are presented. In addition, the bias correction method for optimization and the mixed-precision quantization based on nuclear norm of the attention map and output feature are introduced.\n\n### 3.1 Preliminaries\n\nA standard transformer receives an input as a 111-D sequence of token embeddings, so the vision transformers usually reshape the image \ud835\udc08\u2208\u211dH\u00d7W\u00d7C\ud835\udc08superscript\u211d\ud835\udc3b\ud835\udc4a\ud835\udc36\\\\mathbf{I}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times C} into a sequence of flatted 2D patches Ip\u2208\u211dn\u00d7(P2\u22c5C)superscript\ud835\udc3c\ud835\udc5dsuperscript\u211d\ud835\udc5b\u22c5superscript\ud835\udc432\ud835\udc36I^{p}\\\\in\\\\mathbb{R}^{n\\\\times(P^{2}\\\\cdot C)}. Here, H\ud835\udc3bH and W\ud835\udc4aW are the height and width of the original image and (P,P)\ud835\udc43\ud835\udc43(P,P) is the resolution of each image patch, n=H\u200bWP2\ud835\udc5b\ud835\udc3b\ud835\udc4asuperscript\ud835\udc432n=\\\\frac{HW}{P^{2}} is then the effective sequence length for the transformer. Usually, the vision transformers use constant widths through all of its layers, so a trainable linear projection maps each vectorized patch to the model dimension d\ud835\udc51d. Thus, the input to the first transformer layer is:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  |  | X1=\\[xc\u200bl\u200ba\u200bs\u200bs;I1p\u200b\ud835\udc161E;\u22ef;Inp\u200b\ud835\udc16nE\\]+\ud835\udc04p\u200bo\u200bs,subscriptX1subscript\ud835\udc65\ud835\udc50\ud835\udc59\ud835\udc4e\ud835\udc60\ud835\udc60subscriptsuperscript\ud835\udc3c\ud835\udc5d1superscriptsubscript\ud835\udc161\ud835\udc38\u22efsubscriptsuperscript\ud835\udc3c\ud835\udc5d\ud835\udc5bsuperscriptsubscript\ud835\udc16\ud835\udc5b\ud835\udc38superscript\ud835\udc04\ud835\udc5d\ud835\udc5c\ud835\udc60\\\\displaystyle\\\\textbf{X}\\_{1}=\\[x\\_{class};I^{p}\\_{1}\\\\mathbf{W}\\_{1}^{E};\\\\cdots;I^{p}\\_{n}\\\\mathbf{W}\\_{n}^{E}\\]+\\\\mathbf{E}^{pos}, |  | (1) |\n|  |  | where\u200b\ud835\udc16E\u2208\u211d(P2\u22c5C)\u00d7d,\ud835\udc04p\u200bo\u200bs\u2208\u211d(n+1)\u00d7dformulae-sequencewheresuperscript\ud835\udc16\ud835\udc38superscript\u211d\u22c5superscript\ud835\udc432\ud835\udc36\ud835\udc51superscript\ud835\udc04\ud835\udc5d\ud835\udc5c\ud835\udc60superscript\u211d\ud835\udc5b1\ud835\udc51\\\\displaystyle{\\\\rm where}\\\\;\\\\mathbf{W}^{E}\\\\in\\\\mathbb{R}^{(P^{2}\\\\cdot C)\\\\times d},\\\\mathbf{E}^{pos}\\\\in\\\\mathbb{R}^{(n+1)\\\\times d} |  | (2) |\n\nA standard transformer layer includes two main modules: Multi-Head Self Attention (MSA) and Multi-Layer Perceptron (MLP) module. For the l\ud835\udc59l-th transformer layer, suppose the input to it is \ud835\udc17l\u2208\u211dn\u00d7dsubscript\ud835\udc17\ud835\udc59superscript\u211d\ud835\udc5b\ud835\udc51\\\\mathbf{X}\\_{l}\\\\in\\\\mathbb{R}^{n\\\\times d}, the attention scores computed by the dot product of queries and keys can be formulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc00l=\ud835\udc10l\u200b\ud835\udc0alT=\ud835\udc17l\u200b\ud835\udc16lQ\u200b\ud835\udc16lKT\u200b\ud835\udc17lT,subscript\ud835\udc00\ud835\udc59subscript\ud835\udc10\ud835\udc59superscriptsubscript\ud835\udc0a\ud835\udc59Tsubscript\ud835\udc17\ud835\udc59subscriptsuperscript\ud835\udc16\ud835\udc44\ud835\udc59superscriptsubscriptsuperscript\ud835\udc16\ud835\udc3e\ud835\udc59Tsubscriptsuperscript\ud835\udc17T\ud835\udc59\\\\mathbf{A}\\_{l}=\\\\mathbf{Q}\\_{l}\\\\mathbf{K}\\_{l}^{\\\\text{T}}=\\\\mathbf{X}\\_{l}\\\\mathbf{W}^{Q}\\_{l}{\\\\mathbf{W}^{K}\\_{l}}^{\\\\text{T}}\\\\mathbf{X}^{\\\\text{T}}\\_{l}, |  | (3) |\n\nThen the softmax function is applied on the normalized scores to get the output and the output of the multi-head self attention module is:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | MSA\u200b(\ud835\udc17l)=Softmax\u200b(1d\u200b\ud835\udc00l)\u200b\ud835\udc17l\u200b\ud835\udc16lV\u22c5\ud835\udc16lO.MSAsubscript\ud835\udc17\ud835\udc59\u22c5Softmax1\ud835\udc51subscript\ud835\udc00\ud835\udc59subscript\ud835\udc17\ud835\udc59subscriptsuperscript\ud835\udc16\ud835\udc49\ud835\udc59subscriptsuperscript\ud835\udc16\ud835\udc42\ud835\udc59\\\\text{MSA}(\\\\mathbf{X}\\_{l})=\\\\text{Softmax}(\\\\frac{1}{\\\\sqrt{d}}\\\\mathbf{A}\\_{l})\\\\mathbf{X}\\_{l}\\\\mathbf{W}^{V}\\_{l}\\\\cdot\\\\mathbf{W}^{O}\\_{l}. |  | (4) |\n\n![Refer to caption]Figure 1: Diagram of the proposed mixed-precision post-training quantization method for vision transformer. The similarity-aware and ranking-aware quantization are designed for finding the optimal quantization interval of the linear operations and self-attention layers. The bit-widths of transformer layers are determined based on the nuclear norm of the attention map and the output feature.\n\nThe MLP module contains two linear layers parameterized by \ud835\udc161\u2208\u211dd\u00d7dfsuperscript\ud835\udc161superscript\u211d\ud835\udc51subscript\ud835\udc51\ud835\udc53\\\\mathbf{W}^{1}\\\\in\\\\mathbb{R}^{d\\\\times d\\_{f}},b1\u2208\u211ddfsuperscript\ud835\udc4f1superscript\u211dsubscript\ud835\udc51\ud835\udc53b^{1}\\\\in\\\\mathbb{R}^{d\\_{f}} and \ud835\udc162\u2208\u211ddf\u00d7dsuperscript\ud835\udc162superscript\u211dsubscript\ud835\udc51\ud835\udc53\ud835\udc51\\\\mathbf{W}^{2}\\\\in\\\\mathbb{R}^{d\\_{f}\\\\times d},b2\u2208\u211ddsuperscript\ud835\udc4f2superscript\u211d\ud835\udc51b^{2}\\\\in\\\\mathbb{R}^{d} respectively, where dfsubscript\ud835\udc51\ud835\udc53d\\_{f} is the number of neurons in the intermediate layer of MLP. Denote the input to MLP as \ud835\udc19l\u2208\u211dn\u00d7dsubscript\ud835\udc19\ud835\udc59superscript\u211d\ud835\udc5b\ud835\udc51\\\\mathbf{Z}\\_{l}\\\\in\\\\mathbb{R}^{n\\\\times d}, the output is then computed as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | MLP\u200b(\ud835\udc19l)=GeLU\u200b(\ud835\udc19l\u200b\ud835\udc161+b1)\u200b\ud835\udc162+b2.MLPsubscript\ud835\udc19\ud835\udc59GeLUsubscript\ud835\udc19\ud835\udc59superscript\ud835\udc161superscript\ud835\udc4f1superscript\ud835\udc162superscript\ud835\udc4f2\\\\text{MLP}(\\\\mathbf{Z}\\_{l})=\\\\text{GeLU}(\\\\mathbf{Z}\\_{l}\\\\mathbf{W}^{1}+b^{1})\\\\mathbf{W}^{2}+b^{2}. |  | (5) |\n\nCombining Eq. ( [4]In 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")) and ( [5]In 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")), the forward propagation for the l\ud835\udc59l-th transformer layer can be formulated as:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | \ud835\udc19lsubscript\ud835\udc19\ud835\udc59\\\\displaystyle\\\\mathbf{Z}\\_{l} | =LN\u200b(\ud835\udc17l+MSA\u200b(\ud835\udc17l)),absentLNsubscript\ud835\udc17\ud835\udc59MSAsubscript\ud835\udc17\ud835\udc59\\\\displaystyle=\\\\text{LN}(\\\\mathbf{X}\\_{l}+\\\\text{MSA}(\\\\mathbf{X}\\_{l})), |  | (6) |\n|  | \ud835\udc17l+1subscript\ud835\udc17\ud835\udc591\\\\displaystyle\\\\mathbf{X}\\_{l+1} | =LN\u200b(\ud835\udc19l+MLP\u200b(\ud835\udc19l)).absentLNsubscript\ud835\udc19\ud835\udc59MLPsubscript\ud835\udc19\ud835\udc59\\\\displaystyle=\\\\text{LN}(\\\\mathbf{Z}\\_{l}+\\\\text{MLP}(\\\\mathbf{Z}\\_{l})). |  | (7) |\n\nwhere LN represents the layer normalization.\n\nThe most computational costs of vision transformer lie on the large matrix multiplication in MSA and MLP module. Following the mainstream quantization methods for CNNs \\[ [7]), [21])\\], we quantize all the weights and inputs involved in matrix multiplication. For weight quantization, we quantize the weights \ud835\udc16Q,\ud835\udc16K,\ud835\udc16V,\ud835\udc16O,\ud835\udc161,\ud835\udc162superscript\ud835\udc16\ud835\udc44superscript\ud835\udc16\ud835\udc3esuperscript\ud835\udc16\ud835\udc49superscript\ud835\udc16\ud835\udc42superscript\ud835\udc161superscript\ud835\udc162\\\\mathbf{W}^{Q},\\\\mathbf{W}^{K},\\\\mathbf{W}^{V},\\\\mathbf{W}^{O},\\\\mathbf{W}^{1},\\\\mathbf{W}^{2} in Eq. ( [4]In 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")) and ( [5]In 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")) for all transformer layers, as well as the linear embedding \ud835\udc16Esuperscript\ud835\udc16\ud835\udc38\\\\mathbf{W}^{E} in Eq. ( [1]In 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")). Besides these weights, we also quantize the inputs of all linear layers and matrix multiplication operations. Following the methods in \\[ [22]), [34])\\], we do not quantize the softmax operation and layer normalization, because the parameters contained in these operations are negligible and quantizing them may bring significant accuracy degradation.\n\n### 3.2 Optimization for Post-Training Quantization\n\nFor post-training quantization, we need to restrict the floating-numbers to a finite set of values. The choice of quantization intervals is critical for quantization and one popular option is to use a uniform quantization function, where the data range is equally split:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u03a8\u0394\u200b(\ud835\udc18)=Clip\u200b(Round\u200b(\ud835\udc18\u0394),\u22122b\u22121,2b\u22121\u22121).subscript\u03a8\u0394\ud835\udc18ClipRound\ud835\udc18\u0394superscript2\ud835\udc4f1superscript2\ud835\udc4f11\\\\Psi\\_{\\\\Delta}(\\\\mathbf{Y})=\\\\text{Clip}(\\\\text{Round}(\\\\frac{\\\\mathbf{Y}}{\\\\Delta}),-2^{b-1},2^{b-1}-1). |  | (8) |\n\nwhere \u0394\u0394\\\\Delta is the quantization interval, b\ud835\udc4fb is the quantization bit-width and \ud835\udc18\ud835\udc18\\\\mathbf{Y} is a tensor representing weights or inputs. Clip denotes that elements in the tensor that exceed the ranges of the quantized domain are clipped.\n\n#### Similarity-Aware Quantization for Linear Operation\n\nFor the linear operations in the MSA module and MLP module of the l\ud835\udc59l-th transformer layer, the original output can be computed as \ud835\udc0el=\ud835\udc17l\u200b\ud835\udc16lsubscript\ud835\udc0e\ud835\udc59subscript\ud835\udc17\ud835\udc59subscript\ud835\udc16\ud835\udc59\\\\mathbf{O}\\_{l}=\\\\mathbf{X}\\_{l}\\\\mathbf{W}\\_{l}. The uniform quantization for the weights and inputs and the corresponding dequant operation can be described as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc0e^l=\u03a8\u0394lX\u200b(\ud835\udc17l)\u200b\u03a8\u0394lW\u200b(\ud835\udc16l)\u22c5\u0394lW\u22c5\u0394lX.subscript^\ud835\udc0e\ud835\udc59\u22c5subscript\u03a8superscriptsubscript\u0394\ud835\udc59\ud835\udc4bsubscript\ud835\udc17\ud835\udc59subscript\u03a8superscriptsubscript\u0394\ud835\udc59\ud835\udc4asubscript\ud835\udc16\ud835\udc59superscriptsubscript\u0394\ud835\udc59\ud835\udc4asuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b\\\\widehat{\\\\mathbf{O}}\\_{l}=\\\\Psi\\_{\\\\Delta\\_{l}^{X}}(\\\\mathbf{X}\\_{l})\\\\Psi\\_{\\\\Delta\\_{l}^{W}}(\\\\mathbf{W}\\_{l})\\\\cdot\\\\Delta\\_{l}^{W}\\\\cdot\\\\Delta\\_{l}^{X}. |  | (9) |\n\nwhere \ud835\udc0e^lsubscript^\ud835\udc0e\ud835\udc59\\\\widehat{\\\\mathbf{O}}\\_{l} denotes the outputs of the quantized layer. From Eq. ( [8]In 3.2 Optimization for Post-Training Quantization \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")) and Eq. ( [9]In Similarity-Aware Quantization for Linear Operation \u2023 3.2 Optimization for Post-Training Quantization \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")), it can be seen that the quantization intervals actually control the clipping thresholds in quantization process, which affects the similarity between original output feature maps and quantization feature maps to a great extent. Therefore, we are motivated to focus on optimizing the quantization intervals for both weights \u0394lWsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4a\\\\Delta\\_{l}^{W} and inputs \u0394lXsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b\\\\Delta\\_{l}^{X} to improve the similarity between \ud835\udc0elsubscript\ud835\udc0e\ud835\udc59\\\\mathbf{O}\\_{l} and \ud835\udc0e^lsubscript^\ud835\udc0e\ud835\udc59\\\\widehat{\\\\mathbf{O}}\\_{l}, where inputs Xlsubscript\ud835\udc4b\ud835\udc59X\\_{l} are generated from a given calibration dataset \ud835\udc03\ud835\udc03\\\\mathbf{D} with N\ud835\udc41N samples. Specifically, the calibration dataset is much less than the common training dataset. In the l\ud835\udc59l-th transformer layer, the similarity-aware quantization can be formulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | max\u0394lW,\u0394lX\u20611N\u200b\u2211i=1N\u0393\u200b(\ud835\udc0eli,\ud835\udc0e^li)s.t.\u0394lW,\u0394lX\u2208\u211d+.formulae-sequencesubscriptsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4asuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b1\ud835\udc41superscriptsubscript\ud835\udc561\ud835\udc41\u0393subscriptsuperscript\ud835\udc0e\ud835\udc56\ud835\udc59subscriptsuperscript^\ud835\udc0e\ud835\udc56\ud835\udc59\ud835\udc60\ud835\udc61superscriptsubscript\u0394\ud835\udc59\ud835\udc4asuperscriptsubscript\u0394\ud835\udc59\ud835\udc4bsuperscript\u211d\\\\max\\_{\\\\Delta\\_{l}^{W},\\\\Delta\\_{l}^{X}}\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\Gamma(\\\\mathbf{O}^{i}\\_{l},\\\\widehat{\\\\mathbf{O}}^{i}\\_{l})\\\\quad s.t.\\\\;\\\\Delta\\_{l}^{W},\\\\Delta\\_{l}^{X}\\\\in\\\\mathbb{R}^{+}. |  | (10) |\n\nwhere \u0393\u200b(\ud835\udc0eli,\ud835\udc0e^li)\u0393subscriptsuperscript\ud835\udc0e\ud835\udc56\ud835\udc59subscriptsuperscript^\ud835\udc0e\ud835\udc56\ud835\udc59\\\\Gamma(\\\\mathbf{O}^{i}\\_{l},\\\\widehat{\\\\mathbf{O}}^{i}\\_{l}) is the similarity between the original and quantized output feature maps. In this paper, we adopt Pearson correlation coefficient as the measurement for the similarity:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u0393\u200b(\ud835\udc0e^,\ud835\udc0e)=\u2211j=1m(\ud835\udc0ej\u2212\ud835\udc0e\u00af)\u200b(\ud835\udc0e^j\u2212\ud835\udc0e^\u00af)\u2211j=1m(\ud835\udc0ej\u2212\ud835\udc0e\u00af)2\u200b\u2211j=1m(\ud835\udc0e^j\u2212\ud835\udc0e^\u00af)2.\u0393^\ud835\udc0e\ud835\udc0esuperscriptsubscript\ud835\udc571\ud835\udc5asubscript\ud835\udc0e\ud835\udc57\u00af\ud835\udc0esubscript^\ud835\udc0e\ud835\udc57\u00af^\ud835\udc0esuperscriptsubscript\ud835\udc571\ud835\udc5asuperscriptsubscript\ud835\udc0e\ud835\udc57\u00af\ud835\udc0e2superscriptsubscript\ud835\udc571\ud835\udc5asuperscriptsubscript^\ud835\udc0e\ud835\udc57\u00af^\ud835\udc0e2\\\\Gamma(\\\\widehat{\\\\mathbf{O}},\\\\mathbf{O})=\\\\frac{\\\\sum\\_{j=1}^{m}(\\\\mathbf{O}\\_{j}-\\\\overline{\\\\mathbf{O}})(\\\\widehat{\\\\mathbf{O}}\\_{j}-\\\\overline{\\\\widehat{\\\\mathbf{O}}})}{\\\\sqrt{\\\\sum\\_{j=1}^{m}(\\\\mathbf{O}\\_{j}-\\\\overline{\\\\mathbf{O}})^{2}}\\\\sqrt{\\\\sum\\_{j=1}^{m}(\\\\widehat{\\\\mathbf{O}}\\_{j}-\\\\overline{\\\\widehat{\\\\mathbf{O}}})^{2}}}. |  | (11) |\n\n#### Ranking-Aware Quantization for Self-Attention.\n\nThe self-attention layer is the critical component of the transformer since it can calculate the global relevance of the features, which makes the transformer unique from the convolutional neural networks. For the calculation of self-attention (Eq. [3]In 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")), we empirically find that the relative order of the attention map has been changed after quantization as shown in Fig [1]Figure 1 \u2023 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\"), which could cause a significant performance degradation. Thus, a ranking loss is introduced to solve this problem during the quantization process:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | max\u0394lW,\u0394lX\u20611N\u200b\u2211i=1N\u0393\u200b(\ud835\udc0eli,\ud835\udc0e^li)\u2212\u03b3\u22c5\u2112r\u200ba\u200bn\u200bk\u200bi\u200bn\u200bgs.t.\u0394lW,\u0394lX\u2208\u211d+.formulae-sequencesubscriptsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4asuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b1\ud835\udc41superscriptsubscript\ud835\udc561\ud835\udc41\u0393subscriptsuperscript\ud835\udc0e\ud835\udc56\ud835\udc59subscriptsuperscript^\ud835\udc0e\ud835\udc56\ud835\udc59\u22c5\ud835\udefesubscript\u2112\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc58\ud835\udc56\ud835\udc5b\ud835\udc54\ud835\udc60\ud835\udc61superscriptsubscript\u0394\ud835\udc59\ud835\udc4asuperscriptsubscript\u0394\ud835\udc59\ud835\udc4bsuperscript\u211d\\\\max\\_{\\\\Delta\\_{l}^{W},\\\\Delta\\_{l}^{X}}\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\Gamma(\\\\mathbf{O}^{i}\\_{l},\\\\widehat{\\\\mathbf{O}}^{i}\\_{l})-\\\\gamma\\\\cdot\\\\mathcal{L}\\_{ranking}\\\\quad s.t.\\\\;\\\\Delta\\_{l}^{W},\\\\Delta\\_{l}^{X}\\\\in\\\\mathbb{R}^{+}. |  | (12) |\n\nwhere \u2112r\u200ba\u200bn\u200bksubscript\u2112\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc58\\\\mathcal{L}\\_{rank} denote the pairwise ranking based loss function, and \u03b3\ud835\udefe\\\\gamma is the trade-off hyper-parameter. The ranking loss can be formulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u2112r\u200ba\u200bn\u200bk\u200bi\u200bn\u200bg=\u2211k=1h\u2211i=1w\u22121\u2211j=i+1w\u03a6\u200b((\ud835\udc00^k\u200bi\u2212\ud835\udc00^k\u200bj)\u22c5s\u200bi\u200bg\u200bn\u200b(\ud835\udc00k\u200bi\u2212\ud835\udc00k\u200bj)).subscript\u2112\ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc58\ud835\udc56\ud835\udc5b\ud835\udc54superscriptsubscript\ud835\udc581\u210esuperscriptsubscript\ud835\udc561\ud835\udc641superscriptsubscript\ud835\udc57\ud835\udc561\ud835\udc64\u03a6\u22c5subscript^\ud835\udc00\ud835\udc58\ud835\udc56subscript^\ud835\udc00\ud835\udc58\ud835\udc57\ud835\udc60\ud835\udc56\ud835\udc54\ud835\udc5bsubscript\ud835\udc00\ud835\udc58\ud835\udc56subscript\ud835\udc00\ud835\udc58\ud835\udc57\\\\mathcal{L}\\_{ranking}=\\\\sum\\_{k=1}^{h}\\\\sum\\_{i=1}^{w-1}\\\\sum\\_{j=i+1}^{w}\\\\varPhi((\\\\widehat{\\\\mathbf{A}}\\_{ki}-\\\\widehat{\\\\mathbf{A}}\\_{kj})\\\\cdot sign(\\\\mathbf{A}\\_{ki}-\\\\mathbf{A}\\_{kj})). |  | (13) |\n\nin which \u03a6\u200b(p)=(\u03b8\u2212p)+\u03a6\ud835\udc5dsubscript\ud835\udf03\ud835\udc5d\\\\varPhi(p)=(\\\\theta-p)\\_{+} is hinge function with parameter \u03b8\ud835\udf03\\\\theta, (h,w)\u210e\ud835\udc64(h,w) are the size of matrix \ud835\udc00\ud835\udc00\\\\mathbf{A}. Given a pair of examples, the loss is 00 only when the examples are in the correct order and differed by a margin.\n\nTo solve the above optimization problem, we present a simple but efficient alternative searching method for the uniform quantization of transformer layers. Firstly, the quantization interval of inputs \u0394lXsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b\\\\Delta\\_{l}^{X} is fixed, and the quantization interval of weights \u0394lWsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4a\\\\Delta\\_{l}^{W} is optimized for adjustment. Secondly, \u0394lWsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4a\\\\Delta\\_{l}^{W} is fixed, and \u0394lXsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b\\\\Delta\\_{l}^{X} is optimized to fine-tune the quantization interval of the inputs. \u0394lWsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4a\\\\Delta\\_{l}^{W} and \u0394lXsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b\\\\Delta\\_{l}^{X} are alternately optimized until the target function converges or the maximum iteration is exceeded. Moreover, for fast convergence, \u0394lWsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4a\\\\Delta\\_{l}^{W} and \u0394lXsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b\\\\Delta\\_{l}^{X} are initialized in terms of the maximum of weights or inputs respectively. For the search space of \u0394lWsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4a\\\\Delta\\_{l}^{W} and \u0394lXsuperscriptsubscript\u0394\ud835\udc59\ud835\udc4b\\\\Delta\\_{l}^{X}, we linearly divide interval of \\[\u03b1\u200b\u0394l,\u03b2\u200b\u0394l\\]\ud835\udefcsubscript\u0394\ud835\udc59\ud835\udefdsubscript\u0394\ud835\udc59\\[\\\\alpha\\\\Delta\\_{l},\\\\beta\\\\Delta\\_{l}\\] into C\ud835\udc36C candidate options and conduct a simple search strategy on them.\n\n#### Bias Correction\n\nTo further reduce the biased error for the outputs raised by quantization, a bias correction method is then introduced after each search iteration. Suppose the quantization error of weights and inputs are defined as:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | \u03f5Xsuperscriptitalic-\u03f5\ud835\udc4b\\\\displaystyle\\\\epsilon^{X} | =\u03a8\u0394X\u200b(\ud835\udc17)\u22c5\u0394X\u2212\ud835\udc17,absent\u22c5subscript\u03a8superscript\u0394\ud835\udc4b\ud835\udc17superscript\u0394\ud835\udc4b\ud835\udc17\\\\displaystyle=\\\\Psi\\_{\\\\Delta^{X}}(\\\\mathbf{X})\\\\cdot\\\\Delta^{X}-\\\\mathbf{X}, |  | (14) |\n|  | \u03f5Wsuperscriptitalic-\u03f5\ud835\udc4a\\\\displaystyle\\\\epsilon^{W} | =\u03a8\u0394W\u200b(\ud835\udc16)\u22c5\u0394W\u2212\ud835\udc16.absent\u22c5subscript\u03a8superscript\u0394\ud835\udc4a\ud835\udc16superscript\u0394\ud835\udc4a\ud835\udc16\\\\displaystyle=\\\\Psi\\_{\\\\Delta^{W}}(\\\\mathbf{W})\\\\cdot\\\\Delta^{W}-\\\\mathbf{W}. |  | (15) |\n\nIf the expectation of the error for output is not zero, then the mean of the output will change. This shift in distribution may lead to detrimental behavior in the following layers. We can correct this change by seeing that:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c\u200b\\[\ud835\udc0e^\\]=\ud835\udd3c\u200b\\[\ud835\udc0e\\]+\ud835\udd3c\u200b\\[\u03f5W\u200b\ud835\udc17\\]+\ud835\udd3c\u200b\\[\u03f5X\u200b\ud835\udc16\\]+\ud835\udd3c\u200b\\[\u03f5X\u200b\u03f5W\\].\ud835\udd3cdelimited-\\[\\]^\ud835\udc0e\ud835\udd3cdelimited-\\[\\]\ud835\udc0e\ud835\udd3cdelimited-\\[\\]superscriptitalic-\u03f5\ud835\udc4a\ud835\udc17\ud835\udd3cdelimited-\\[\\]superscriptitalic-\u03f5\ud835\udc4b\ud835\udc16\ud835\udd3cdelimited-\\[\\]superscriptitalic-\u03f5\ud835\udc4bsuperscriptitalic-\u03f5\ud835\udc4a\\\\mathbb{E}\\[\\\\widehat{\\\\mathbf{O}}\\]=\\\\mathbb{E}\\[\\\\mathbf{O}\\]+\\\\mathbb{E}\\[\\\\epsilon^{W}\\\\mathbf{X}\\]+\\\\mathbb{E}\\[\\\\epsilon^{X}\\\\mathbf{W}\\]+\\\\mathbb{E}\\[\\\\epsilon^{X}\\\\epsilon^{W}\\]. |  | (16) |\n\nThus, subtracting the expected error on the output from the biased output ensures that the mean for each output unit is preserved. For implementation, the expected error can be computed using the calibration data and subtracted from the layer\u2019s bias parameter, since the expected error vector has the same shape as the layer\u2019s output.\n\n### 3.3 Mixed-Precision Quantization for Vision Transformer\n\nDifferent transformer layers are attending to different structures, and it is expected that they exhibit different sensitivity. Thus, assigning the same number of bit-widths to all the layers is sub-optimal. As a result, we explore mixed-precision quantization, where more bits are assigned to more sensitive layers in order to retain performance. Considering the unique structure of transformer layer, we assign all the operations in the MSA or MLP modules with the same bit-width. This will also be friendly to the hardware implementation since the weights and inputs are assigned with the same bit-width.\n\nSingular value decomposition (SVD) is an important matrix decomposition approach in linear algebra. It takes a rectangular matrix of gene expression data, whose formulation can be written as :\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc0c=\ud835\udc14\u200b\ud835\udeba\u200b\ud835\udc15.\ud835\udc0c\ud835\udc14\ud835\udeba\ud835\udc15\\\\mathbf{M}=\\\\mathbf{U}\\\\mathbf{\\\\Sigma}\\\\mathbf{V}. |  | (17) |\n\nwhere the diagonal entries \u03c3i=\ud835\udebai\u200bisubscript\ud835\udf0e\ud835\udc56subscript\ud835\udeba\ud835\udc56\ud835\udc56\\\\sigma\\_{i}=\\\\mathbf{\\\\Sigma}\\_{ii} of \ud835\udeba\ud835\udeba\\\\mathbf{\\\\Sigma} are known as the singular values of \ud835\udc0c\ud835\udc0c\\\\mathbf{M}. And the nuclear norm is the sum of singular values, which represents the data relevance of the matrix. In this paper, we propose to estimate the sensitivity of the transformer layer with the nuclear norm of the attention map in the MSA module and the output feature in the MLP module. The nuclear norm can be used to reduce the search space of the mixed-precision settings, while using higher bit-widths for layers that are more sensitive and vice versa. Inspired by the method in \\[ [10])\\], we utilize a Pareto frontier approach to determine the bit-width. The main idea is to sort each candidate bit-width configuration based on the total second-order perturbation that they cause, according to the following metric:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u03a9=\u2211i=1L\u03a9i=\u2211i=1L\u2211j=1m\u03c3j\u200b(Yi)\u22c5\u2016Yi^\u2212Yi\u201622.\u03a9superscriptsubscript\ud835\udc561\ud835\udc3fsubscript\u03a9\ud835\udc56superscriptsubscript\ud835\udc561\ud835\udc3fsuperscriptsubscript\ud835\udc571\ud835\udc5a\u22c5subscript\ud835\udf0e\ud835\udc57subscriptY\ud835\udc56subscriptsuperscriptnorm^subscriptY\ud835\udc56subscriptY\ud835\udc5622\\\\Omega=\\\\sum\\_{i=1}^{L}\\\\Omega\\_{i}=\\\\sum\\_{i=1}^{L}\\\\sum\\_{j=1}^{m}\\\\sigma\\_{j}(\\\\textbf{Y}\\_{i})\\\\cdot\\\\\\|\\\\widehat{\\\\textbf{Y}\\_{i}}-\\\\textbf{Y}\\_{i}\\\\\\|^{2}\\_{2}. |  | (18) |\n\nGiven a target model size, we sort the candidate bit-width configuration based on their \u03a9\u03a9\\\\Omega value and choose the bit-width configuration with minimal \u03a9\u03a9\\\\Omega. The nuclear norm of the attention map and output feature in each transformer layer are shown in Figure [1]Figure 1 \u2023 3.1 Preliminaries \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\"). As we can see, they are various for different transformer layers.\n\n## 4 Exprimental results\nIn this section, we evaluate the performance of the proposed post-training quantization scheme on vision transformer model for image classification (ViT \\[ [11])\\] and DeiT \\[ [26])\\]) and object detection (DETR \\[ [4])\\]). To the best of our knowledge, there is no published work done on post-training quantization of vision transformer at this point, so we implement recent post-training quantization methods for CNNs as described in the papers by ourselves. It is shown that the proposed method outperforms the conventional post-training quantization methods. Moreover, extensive experiments of ablation study have shown that the proposed similarity-aware, ranking-aware quantization and bias correction method are beneficial for the post-training quantization of vision transformer.\n\n### 4.1 Implementation details\n\n#### Datasets\n\nFor image classification, the CIFAR-10, CIFAR-100 and ILSVRC-2012 ImageNet (we refer to it as ImageNet in what follows) datasets are utilized to evaluate the quantization performance. The CIFAR-10 dataset consists of 50\u200bK50\ud835\udc3e50K training images and 10\u200bK10\ud835\udc3e10K test images, which are labeled for 10 classes. And CIFAR-100 dataset also contains 50\u200bK50\ud835\udc3e50K training images and 10\u200bK10\ud835\udc3e10K test images, expect that they are labeled for 100 classes. ImageNet dataset contains 1.21.21.2 million training images and 50\u200bK50\ud835\udc3e50K validation images labeled for 1,000 categories. For object detection task, the COCO2017 dataset is utilized to evaluate the quantization performance, which contains 118\u200bK118\ud835\udc3e118K training images and 5\u200bK5\ud835\udc3e5K validation images.\n\nTable 1: Comparison on the performance of proposed mixed-precision post-training quantization method with conventional quantization method for image classification. \u2019MP\u2019 represents for mixed-precision.\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Model | Dataset | Method | W-bit | A-bit | Model size (MB) | Top-1 Accuracy |\n| ViT-B | CIFAR-10 | Baseline | 32 | 32 | 344 | 98.13 |\n| Percentile | 6 | 6 | 64.5 | 93.48 |\n| Ours | 6 MP | 6 MP | 64.6 | 96.83 |\n| Percentile | 8 | 8 | 86.2 | 95.72 |\n| Ours | 8 MP | 8 MP | 86.0 | 97.79 |\n| CIFAR-100 | Baseline | 32 | 32 | 344 | 87.13 |\n| Percentile | 6 | 6 | 64.5 | 80.56 |\n| Ours | 6 MP | 6 MP | 64.4 | 83.99 |\n| Percentile | 8 | 8 | 86.2 | 83.28 |\n| Ours | 8 MP | 8 MP | 86.5 | 85.76 |\n| ImageNet | Baseline | 32 | 32 | 344 | 77.91 |\n| Percentile | 6 | 6 | 64.5 | 71.58 |\n| Ours | 6 MP | 6 MP | 64.8 | 75.26 |\n| Percentile | 8 | 8 | 86.2 | 74.10 |\n| Ours | 8 MP | 8 MP | 86.5 | 76.98 |\n| ViT-L | CIFAR-10 | Baseline | 32 | 32 | 1228 | 97.86 |\n| Percentile | 6 | 6 | 230.2 | 93.27 |\n| Ours | 6 MP | 6 MP | 232 | 96.09 |\n| Percentile | 8 | 8 | 307 | 94.19 |\n| Ours | 8 MP | 8 MP | 305.8 | 97.90 |\n| CIFAR-100 | Baseline | 32 | 32 | 1228 | 86.35 |\n| Percentile | 6 | 6 | 230.2 | 80.54 |\n| Ours | 6 MP | 6 MP | 231 | 83.69 |\n| Percentile | 8 | 8 | 307 | 83.01 |\n| Ours | 8 MP | 8 MP | 307.8 | 85.83 |\n| ImageNet | Baseline | 32 | 32 | 1228 | 76.53 |\n| Percentile | 6 | 6 | 230.2 | 71.48 |\n| Ours | 6 MP | 6 MP | 231.6 | 75.46 |\n| Percentile | 8 | 8 | 307 | 75.17 |\n| Ours | 8 MP | 8 MP | 306.4 | 76.41 |\n| DeiT-S | ImageNet | Baseline | 32 | 32 | 88 | 79.8 |\n| Percentile \\[ [18])\\] | 6 | 6 | 16.5 | 70.49 |\n| EasyQuant \\[ [30])\\] | 6 | 6 | 16.5 | 73.26 |\n| Bit-Split \\[ [28])\\] | 6 | 6 | 16.5 | 74.04 |\n| Ours | 6 | 6 | 16.5 | 74.58 |\n| Ours | 6 MP | 6 MP | 16.6 | 75.10 |\n| Percentile \\[ [18])\\] | 8 | 8 | 22.0 | 73.98 |\n| EasyQuant \\[ [30])\\] | 8 | 8 | 22.0 | 76.59 |\n| Bit-Split \\[ [28])\\] | 8 | 8 | 22.0 | 77.06 |\n| Ours | 8 | 8 | 22.0 | 77.47 |\n| Ours | 8 MP | 8 MP | 22.2 | 78.09 |\n| DeiT-B | ImageNet | Baseline | 32 | 32 | 344 | 81.8 |\n| Percentile \\[ [18])\\] | 6 | 6 | 64.5 | 73.99 |\n| EasyQuant \\[ [30])\\] | 6 | 6 | 64.5 | 75.86 |\n| Bit-Split \\[ [28])\\] | 6 | 6 | 64.5 | 76.39 |\n| Ours | 4 MP | 4 MP | 43.6 | 75.94 |\n| Ours | 6 | 6 | 64.5 | 77.02 |\n| Ours | 6 MP | 6 MP | 64.3 | 77.47 |\n| Percentile \\[ [18])\\] | 8 | 8 | 86.0 | 75.21 |\n| EasyQuant \\[ [30])\\] | 8 | 8 | 86.0 | 79.36 |\n| Bit-Split \\[ [28])\\] | 8 | 8 | 86.0 | 79.42 |\n| Ours | 8 | 8 | 86.0 | 80.48 |\n| Ours | 8 MP | 8 MP | 86.8 | 81.29 |\n\n#### Experimental settings\n\nWe randomly select 100 images for CIFAR-10 and CIFAR-100 dataset and 1000 images for ImageNet and COCO2017 dataset from the training dataset as the calibration dataset. For the hyper-parameter, \u03b1\ud835\udefc\\\\alpha and \u03b2\ud835\udefd\\\\beta are set to 0.5 and 1.2 for all the experiments. The trade-off parameter \u03b3\ud835\udefe\\\\gamma and the threshold \u03b8\ud835\udf03\\\\theta in Eq. ( [13]In Ranking-Aware Quantization for Self-Attention. \u2023 3.2 Optimization for Post-Training Quantization \u2023 3 Methodology \u2023 Post-Training Quantization for Vision Transformer\")) are set to 0.1 and 0.2 respectively. The maximum iteration is set to 20 if not mentioned specifically. For mixed-precision, we utilize {4,5,6,7,8} and {6,7,8,9,10} bits while the target bit-width are 6 bit and 8 bit, respectively.\n\n#### Baseline\n\nFor image classification, we evaluate our quantization method on two popular vision transformer implementation: ViT \\[ [11])\\] and DeiT \\[ [26])\\]. The ViT-B, ViT-L, DeiT-S, DeiT-B are adopted as the baseline model, whose top-1 accuracy on ImageNet dataset are 71.58%, 71.48%, 79.8%, 81.8% respectively. For a fair comparison, we utilize the official implementation of DeiT and do not use other techniques like knowledge distillation. For object detection, the DETR model using ResNet-50 backbone is adopted, which achieves a 42.0 mAP on COCO dataset.\n\n### 4.2 Results and Analysis\n\n#### Image classification\n\nThe experimental results are shown in Table [1]Table 1 \u2023 Datasets \u2023 4.1 Implementation details \u2023 4 Exprimental results \u2023 Post-Training Quantization for Vision Transformer\"). We firstly evaluate the proposed method on ViT-B and ViT-L model. ViT-B model is a 12-layer transformer with 12 heads and 768 embedding dimension. For the similar quantized model size, the proposed method outperforms percentile-based method \\[ [18])\\] by 3.35% and 2.07% on CIFAR-10 dataset, respectively. And it is worth noting that the performance of the proposed 8-bit model is comparable to the full-precision model. The proposed method obtains the similar performance on CIFAR-100 dataset and ImageNet dataset, while the average gains are 2.95% and 3.28% respectively. Moreover, the performance of the proposed 6-bit model is even better than the 8-bit percentile-based model, which means that the proposed method can save about 25% memory and 44% computational costs than conventional post-training quantization method.\n\nViT-L model is much larger network which consists of 24 transformer layer with 16 heads and 1024 embedding dimension. It contains 307M parameters, however its performance is worse than ViT-B. We also test the quantization methods on CIFAR-10, CIFAR-100 and ImageNet dataset. As shown in Table [1]Table 1 \u2023 Datasets \u2023 4.1 Implementation details \u2023 4 Exprimental results \u2023 Post-Training Quantization for Vision Transformer\"), the performance of the proposed method outperforms the percentile-based method by a large margin. It is worth mentioning that the 8-bit proposed model is even better than full-precision model on CIFAR-10 dataset and comparable to the full-precision model on CIFAR-100 dataset and ImageNet model. It is supposed that there is more redundancy in the ViT-L model and the performance degradation of quantization is less than that of ViT-B model.\n\nThe architecture of DeiT network is the same as ViT, expect that DeiT utilizes the data augmentation and regularization strategies. As a result, the performance of DeiT is much better than ViT. Among the models, ViT-S consists of 12 transformer layers with 6 heads and 384 embedding dimension. As we can see, the percentile-based method largely hurts the performance while the accuracy losses of 6-bit and 8-bit models are 9.31% and 5.82%. EasyQuant \\[ [30])\\] is a popular simple post-training quantization method which improves the performance loss to 6.54% and 3.21%, respectively. Bit-Split proposes a bit splitting and stitching framework \\[ [28])\\], while the Top-1 accuracy degradation are 5.76% and 2.74%. In comparison, the Top-1 accuracy losses of the proposed post-training quantization scheme are 5.22% and 2.33% respectively. In addition, when the mixed-precision is conducted, the 8-bit quantized model can achieve 78.09% Top-1 accuracy.\n\nDeiT-B is a much larger network than DeiT-S, which consists of 12 transformer layers with 12 heads and 768 embedding dimension. As shown in Table [1]Table 1 \u2023 Datasets \u2023 4.1 Implementation details \u2023 4 Exprimental results \u2023 Post-Training Quantization for Vision Transformer\"), the Top-1 accuracy of percentile-based are 73.99% and 75.21% when quantized to 6-bit and 8-bit respectively. And the proposed scheme improves the performance of the quantized model to 77.47% and 81.29%. Another point is that the accuracy losses of DeiT-B are smaller than DeiT-S and we think that this is because DeiT-B consists of more parameters and is more representive when quantized to the same bit-width.\n\n#### Object Detection\n\nIn order to show the generalization capability of proposed method, we also evaluate our method for object detection task using DETR \\[ [4])\\]. The experimental results are shown in Table [2]Table 2 \u2023 Object Detection \u2023 4.2 Results and Analysis \u2023 4 Exprimental results \u2023 Post-Training Quantization for Vision Transformer\"). As we can see, the proposed method outperforms percentile-based method, EasyQuant, Bit-Split by 2.6, 1.1 and 1.2 mAP for 6-bit quantization, respectively. The mixed-precision quantization can further boost the performance of the method. For 8-bit quantization, the mAP of the proposed mixed-precision quantization method is comparable to the full-precision model.\n\nTable 2: Comparison on the performance of proposed mixed-precision post-training quantization method with conventional quantization method for DETR. \u2019MP\u2019 represents for mixed-precision.\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Model | Dataset | Method | W-bit | A-bit | Model size (MB) | mAP |\n| DETR | COCO2017 | Baseline | 32 | 32 | 164 | 42.0 |\n| Percentile \\[ [18])\\] | 6 | 6 | 30.75 | 37.5 |\n| EasyQuant \\[ [30])\\] | 6 | 6 | 30.75 | 39.0 |\n| Bit-Split \\[ [28])\\] | 6 | 6 | 30.75 | 38.9 |\n| Ours | 6 | 6 | 30.75 | 40.1 |\n| Ours | 6 MP | 6 MP | 30.98 | 40.5 |\n| Percentile \\[ [18])\\] | 8 | 8 | 41.00 | 38.6 |\n| EasyQuant \\[ [30])\\] | 8 | 8 | 41.00 | 40.4 |\n| Bit-Split \\[ [28])\\] | 8 | 8 | 41.00 | 40.6 |\n| Ours | 8 | 8 | 41.00 | 41.2 |\n| Ours | 8 MP | 8 MP | 41.64 | 41.7 |\n\n### 4.3 Ablation study\n\nIn this section, we evaluate the effect of the proposed similarity-aware quantization module, ranking-aware quantization module, bias correction method and the mixed-precision method. The experimental results are shown in Table [3]Table 3 \u2023 4.3 Ablation study \u2023 4 Exprimental results \u2023 Post-Training Quantization for Vision Transformer\"), while experiments are conducted on ImageNet dataset with ViT-B model. As we can see, the Top-1 accuracy of only using similarity-aware quantization is 75.42% which is inferior to the full-precision model and using ranking-aware quantization loss and bias correction method can improve the performance by 0.52% and 0.39%. It is worth noting that the nuclear norm based mixed-precision can further promote the performance of the quantized model, since it considers the variant sensitivity of different layers.\n\nIt is also shown that the Top-1 accuracy of using the similarity-aware mixed-precision quantization is 76.26%. And the ranking-aware quantization and bias correction can still boost the performance in this case. Besides, the performance of the 8-bit quantized model using all the proposed methods is 76.98%, which is comparable to the full-precision model.\n\nTable 3: Ablation study of the proposed similarity-aware quantization module, ranking-aware quantization module, bias correction and mixed-precision method.\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Model | Similarity | Ranking | Bias Correction | Mixed-Precision | Model size (MB) | Top-1 Accuracy |\n| ViT-B | \u2013 | \u2013 | \u2013 | \u2013 | 344 | 77.91 |\n| \u2713 | \u00d7 | \u00d7 | \u00d7 | 86.2 | 75.42 |\n| \u2713 | \u2713 | \u00d7 | \u00d7 | 86.2 | 75.94 |\n| \u2713 | \u00d7 | \u2713 | \u00d7 | 86.2 | 75.81 |\n| \u2713 | \u2713 | \u2713 | \u00d7 | 86.2 | 76.49 |\n| \u2713 | \u00d7 | \u00d7 | \u2713 | 86.5 | 76.26 |\n| \u2713 | \u00d7 | \u2713 | \u2713 | 86.5 | 76.61 |\n| \u2713 | \u2713 | \u00d7 | \u2713 | 86.5 | 76.53 |\n| \u2713 | \u2713 | \u2713 | \u2713 | 86.5 | 76.98 |\n\n## 5 Conclusion\nIn this paper, we have developed a novel post-training quantization scheme for vision transformer, in which the bit-widths of each layer are variant based on the nuclear norm of the attention map and output feature in the transformer layer. To solve the optimization problem of the quantization, we propose to search the optimal quantization interval for remaining the similarity between the quantized and original feature maps. In addition, we thoroughly analyze the different between attention layers and conventional layers and introduce a ranking loss to keep the relative order of the attention values. Specifically, the bias correction is employed to reduce the accumulated quantization error. Last but not the least, the optimal quantization interval for each transformer layer is carefully optimized using an alternative searching strategy. Experimental results show that the proposed method outperforms the conventional post-training quantization method by a large margin in terms of both network accuracy and memory costs.\n</Content></Candidate>\n\n<Candidate>Candidate [2]:\nKnowledge distillation: A survey.\n\n<Abstract>Abstract: In recent years, deep neural networks have been successful in both industry\nand academia, especially for computer vision tasks. The great success of deep\nlearning is mainly due to its scalability to encode large-scale data and to\nmaneuver billions of model parameters. However, it is a challenge to deploy\nthese cumbersome deep models on devices with limited resources, e.g., mobile\nphones and embedded devices, not only because of the high computational\ncomplexity but also the large storage requirements. To this end, a variety of\nmodel compression and acceleration techniques have been developed. As a\nrepresentative type of model compression and acceleration, knowledge\ndistillation effectively learns a small student model from a large teacher\nmodel. It has received rapid increasing attention from the community. This\npaper provides a comprehensive survey of knowledge distillation from the\nperspectives of knowledge categories, training schemes, teacher-student\narchitecture, distillation algorithms, performance comparison and applications.\nFurthermore, challenges in knowledge distillation are briefly reviewed and\ncomments on future research are discussed and forwarded.</Abstract><Content>\n## 1 Introduction\nDuring the last few years, deep learning has been the basis of many successes in artificial intelligence, including a variety of applications in computer vision (Krizhevsky et al., [2012])), reinforcement learning (Silver et al., [2016]); Ashok et al., [2018]); Lai et al., [2020])), and natural language processing (Devlin et al., [2019])). With the help of many recent techniques, including residual connections (He et al., [2016]), [2020b])) and batch normalization (Ioffe and Szegedy, [2015])), it is easy to train very deep models with thousands of layers on powerful GPU or TPU clusters. For example, it takes less than ten minutes to train a ResNet model on a popular image recognition benchmark with millions of images (Deng et al., [2009]); Sun et al., [2019])); It takes no more than one and a half hours to train a powerful BERT model for language understanding (Devlin et al., [2019]); You et al., [2019])). The large-scale deep models have achieved overwhelming successes, however the huge computational complexity and massive storage requirements make it a great challenge to deploy them in real-time applications, especially on devices with limited resources, such as video surveillance and autonomous driving cars.\n\n![Refer to caption]Figure 1: The generic teacher-student framework for knowledge distillation.\n\nTo develop efficient deep models, recent works usually focus on 1) efficient building blocks for deep models, including depthwise separable convolution, as in MobileNets (Howard et al., [2017]); Sandler et al., [2018])) and ShuffleNets (Zhang et al., [2018a]); Ma et al., [2018])); and 2) model compression and acceleration techniques, in the following categories (Cheng et al., [2018])).\n\n1. \u2219\u2219\\\\bullet\n\n\nParameter pruning and sharing: These methods focus on removing inessential parameters from deep neural networks without any significant effect on the performance. This category is further divided into model quantization (Wu et al., [2016])), model binarization (Courbariaux et al., [2015])), structural matrices (Sindhwani et al., [2015])) and parameter sharing (Han et al., [2015]); Wang et al., [2019f])).\n\n2. \u2219\u2219\\\\bullet\n\n\nLow-rank factorization: These methods identify redundant parameters of deep neural networks by employing the matrix and tensor decomposition (Yu et al., [2017]); Denton et al., [2014])).\n\n3. \u2219\u2219\\\\bullet\n\n\nTransferred compact convolutional filters: These methods remove inessential parameters by transferring or compressing the convolutional filters (Zhai et al., [2016])).\n\n4. \u2219\u2219\\\\bullet\n\n\nKnowledge distillation (KD): These methods distill the knowledge from a larger deep neural network into a small network (Hinton et al., [2015])).\n\n\nA comprehensive review on model compression and acceleration is outside the scope of this paper. The focus of this paper is knowledge distillation, which has received increasing attention from the research community in recent years. Large deep neural networks have achieved remarkable success with good performance, especially in the real-world scenarios with large-scale data, because the over parameterization improves the generalization performance when new data is considered (Zhang et al., [2018]); Brutzkus and Globerson, [2019]); Allen-Zhu et al., [2019]); Arora et al., [2018]); Tu et al., [2020])). However, the deployment of deep models in mobile devices and embedded systems is a great challenge, due to the limited computational capacity and memory of the devices. To address this issue, Bucilua et al. ( [2006])) first proposed model compression to transfer the information from a large model or an ensemble of models into training a small model without a significant drop in accuracy. The knowledge transfer between a fully-supervised teacher model and a student model using the unlabeled data is also introduced for semi-supervised learning (Urner et al., [2011])). The learning of a small model from a large model is later formally popularized as knowledge distillation (Hinton et al., [2015])). In knowledge distillation, a small student model is generally supervised by a large teacher model (Bucilua et al., [2006]); Ba and Caruana, [2014]); Hinton et al., [2015]); Urban et al., [2017])). The main idea is that the student model mimics the teacher model in order to obtain a competitive or even a superior performance. The key problem is how to transfer the knowledge from a large teacher model to a small student model. Basically, a knowledge distillation system is composed of three key components: knowledge, distillation algorithm, and teacher-student architecture. A general teacher-student framework for knowledge distillation is shown in Fig. [1]Figure 1 \u2023 1 Introduction \u2023 Knowledge Distillation: A Survey\").\n\n![Refer to caption]Figure 2: The schematic structure of knowledge distillation and the relationship between the adjacent sections. The body of this survey mainly contains the fundamentals of knowledge distillation, knowledge types, distillation schemes, teacher-student architecture, distillation algorithms, performance comparison, applications, discussions, challenges, and future directions. Note that \u2018Section\u2019 is abbreviated as \u2018Sec.\u2019 in this figure.\n\nAlthough the great success in practice, there are not too many works on either the theoretical or empirical understanding of knowledge distillation (Urner et al., [2011]); Cheng et al., [2020]); Phuong and Lampert, [2019a]); Cho and Hariharan, [2019])). Specifically, Urner et al. ( [2011])) proved that the knowledge transfer from a teacher model to a student model using unlabeled data is PAC learnable. To understand the working mechanisms of knowledge distillation, Phuong & Lampert obtained a theoretical justification for a generalization bound with fast convergence of learning distilled student networks in the scenario of deep linear classifiers (Phuong and Lampert, [2019a])). This justification answers what and how fast the student learns and reveals the factors of determining the success of distillation. Successful distillation relies on data geometry, optimization bias of distillation objective and strong monotonicity of the student classifier. Cheng et al. quantified the extraction of visual concepts from the intermediate layers of a deep neural network, to explain knowledge distillation (Cheng et al., [2020])). Ji & Zhu theoretically explained knowledge distillation on a wide neural network from the respective of risk bound, data efficiency and imperfect teacher (Ji and Zhu., [2020])). Cho & Hariharan empirically analyzed in detail the efficacy of knowledge distillation (Cho and Hariharan, [2019])). Empirical results show that a larger model may not be a better teacher because of model capacity gap (Mirzadeh et al., [2020])). Experiments also show that distillation adversely affects the student learning. The empirical evaluation of different forms of knowledge distillation about knowledge, distillation and mutual affection between teacher and student is not covered by Cho and Hariharan ( [2019])). Knowledge distillation has also been explored for label smoothing, for assessing the accuracy of the teacher and for obtaining a prior for the optimal output layer geometry (Tang et al., [2020])).\n\nKnowledge distillation for model compression is similar to the way in which human beings learn. Inspired by this, recent knowledge distillation methods have extended to teacher-student learning (Hinton et al., [2015])), mutual learning (Zhang et al., [2018b])), assistant teaching (Mirzadeh et al., [2020])), lifelong learning (Zhai et al., [2019])), and self-learning (Yuan et al., [2020])). Most of the extensions of knowledge distillation concentrate on compressing deep neural networks. The resulting lightweight student networks can be easily deployed in applications such as visual recognition, speech recognition, and natural language processing (NLP). Furthermore, the knowledge transfer from one model to another in knowledge distillation can be extended to other tasks, such as adversarial attacks (Papernot et al., [2016])), data augmentation (Lee et al., [2019a]); Gordon and Duh, [2019])), data privacy and security (Wang et al., [2019a])). Motivated by knowledge distillation for model compression, the idea of knowledge transfer has been further applied in compressing the training data, i.e., dataset distillation, which transfers the knowledge from a large dataset into a small dataset to reduce the training loads of deep models (Wang et al., [2018c]); Bohdal et al., [2020])).\n\n![Refer to caption]Figure 3: The schematic illustrations of sources of response-based knowledge, feature-based knowledge and relation-based knowledge in a deep teacher network.\n\nIn this paper, we present a comprehensive survey on knowledge distillation. The main objectives of this survey are to 1) provide an overview on knowledge distillation, including several typical knowledge, distillation and architectures; 2) review the recent progress of knowledge distillation, including algorithms and applications to different real-world scenarios; and 3) address some hurdles and provide insights to knowledge distillation based on different perspectives of knowledge transfer, including different types of knowledge, training schemes, distillation algorithms and structures, and applications. Recently, there is also a similar survey on knowledge distillation (Wang and Yoon., [2020])), which presents the comprehensive progress from different perspective of teacher-student learning for vision and its challenges. Different from (Wang and Yoon., [2020])), our survey mainly focuses on knowledge distillation from a wide perspective of knowledge types, distillation schemes, distillation algorithms, performance comparison and different application areas.\n\nThe organization of this paper is shown in Fig. [2]Figure 2 \u2023 1 Introduction \u2023 Knowledge Distillation: A Survey\"). The different kinds of knowledge and of distillation are summarized in Section [2]Knowledge \u2023 Knowledge Distillation: A Survey\") and [3]Distillation Schemes \u2023 Knowledge Distillation: A Survey\"), respectively. The existing studies about the teacher-student structures in knowledge distillation are illustrated in Section [4]Teacher-Student Architecture \u2023 Knowledge Distillation: A Survey\"). The latest knowledge distillation approaches are comprehensively summarized in Section [5]Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"). The performance comparison of knowledge distillation is reported in Section [6]Performance Comparison \u2023 Knowledge Distillation: A Survey\"). The many applications of knowledge distillation are illustrated in Section [7]Applications \u2023 Knowledge Distillation: A Survey\"). Challenging problems and future directions in knowledge distillation are discussed and conclusion is given in Section [8]Conclusion and Discussion \u2023 Knowledge Distillation: A Survey\").\n\n## 2 Knowledge\nIn knowledge distillation, knowledge types, distillation strategies and the teacher-student architectures play the crucial role in the student learning. In this section, we focus on different categories of knowledge for knowledge distillation. A vanilla knowledge distillation uses the logits of a large deep model as the teacher knowledge (Hinton et al., [2015]); Kim et al., [2018]); Ba and Caruana, [2014]); Mirzadeh et al., [2020])). The activations, neurons or features of intermediate layers also can be used as the knowledge to guide the learning of the student model (Romero et al., [2015]); Huang and Wang, [2017]); Ahn et al., [2019]); Heo et al., [2019c]); Zagoruyko and Komodakis, [2017])). The relationships between different activations, neurons or pairs of samples contain rich information learned by the teacher model (Yim et al., [2017]); Lee and Song, [2019]); Liu et al., [2019g]); Tung and Mori, [2019]); Yu et al., [2019])). Furthermore, the parameters of the teacher model (or the connections between layers) also contain another knowledge (Liu et al., [2019c])). We discuss different forms of knowledge in the following categories: response-based knowledge, feature-based knowledge, and relation-based knowledge. An intuitive example of different categories of knowledge within a teacher model is shown in Fig. [3]Figure 3 \u2023 1 Introduction \u2023 Knowledge Distillation: A Survey\").\n\n### 2.1 Response-Based Knowledge\n\n![Refer to caption]Figure 4: The generic response-based knowledge distillation. ![Refer to caption]Figure 5: The specific architecture of the benchmark knowledge distillation (Hinton et al., [2015])).\n\nResponse-based knowledge usually refers to the neural response of the last output layer of the teacher model. The main idea is to directly mimic the final prediction of the teacher model. The response-based knowledge distillation is simple yet effective for model compression, and has been widely used in different tasks and applications. Given a vector of logitsz\ud835\udc67z as the outputs of the last fully connected layer of a deep model, the distillation loss for response-based knowledge can be formulated as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | LR\u200be\u200bs\u200bD\u200b(zt,zs)=\u2112R\u200b(zt,zs),subscript\ud835\udc3f\ud835\udc45\ud835\udc52\ud835\udc60\ud835\udc37subscript\ud835\udc67\ud835\udc61subscript\ud835\udc67\ud835\udc60subscript\u2112\ud835\udc45subscript\ud835\udc67\ud835\udc61subscript\ud835\udc67\ud835\udc60L\\_{ResD}(z\\_{t},z\\_{s})=\\\\mathcal{L}\\_{R}(z\\_{t},z\\_{s})~{}, |  | (1) |\n\nwhere \u2112R(.)\\\\mathcal{L}\\_{R}(.) indicates the divergence loss of logits, and ztsubscript\ud835\udc67\ud835\udc61z\\_{t} and zssubscript\ud835\udc67\ud835\udc60z\\_{s} are logits of teacher and student, respectively. A typical response-based KD model is shown in Fig. [4]Figure 4 \u2023 2.1 Response-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\"). The response-based knowledge can be used for different types of model predictions. For example, the response in object detection task may contain the logits together with the offset of a bounding box (Chen et al., [2017])). In semantic landmark localization tasks, e.g., human pose estimation, the response of the teacher model may include a heatmap for each landmark (Zhang et al., [2019a])). Recently, response-based knowledge has been further explored to address the information of ground-truth label as the conditional targets (Meng et al., [2019])).\n\nThe most popular response-based knowledge for image classification is known as soft targets (Hinton et al., [2015]); Ba and Caruana, [2014])). Specifically, soft targets are the probabilities that the input belongs to the classes and can be estimated by a softmax function as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | p\u200b(zi,T)=exp\u2061(zi/T)\u2211jexp\u2061(zj/T),\ud835\udc5dsubscript\ud835\udc67\ud835\udc56\ud835\udc47subscript\ud835\udc67\ud835\udc56\ud835\udc47subscript\ud835\udc57subscript\ud835\udc67\ud835\udc57\ud835\udc47p(z\\_{i},T)=\\\\frac{\\\\exp(z\\_{i}/{T})}{\\\\sum\\_{j}\\\\exp(z\\_{j}/{T})}~{}, |  | (2) |\n\nwhere zisubscript\ud835\udc67\ud835\udc56z\\_{i} is the logit for the i\ud835\udc56i-th class, and a temperature factor T\ud835\udc47T is introduced to control the importance of each soft target. As stated in (Hinton et al., [2015])), soft targets contain the informative dark knowledge from the teacher model. Accordingly, the distillation loss for soft logits can be rewritten as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | LR\u200be\u200bs\u200bD\u200b(p\u200b(zt,T),p\u200b(zs,T))=\u2112R\u200b(p\u200b(zt,T),p\u200b(zs,T)).subscript\ud835\udc3f\ud835\udc45\ud835\udc52\ud835\udc60\ud835\udc37\ud835\udc5dsubscript\ud835\udc67\ud835\udc61\ud835\udc47\ud835\udc5dsubscript\ud835\udc67\ud835\udc60\ud835\udc47subscript\u2112\ud835\udc45\ud835\udc5dsubscript\ud835\udc67\ud835\udc61\ud835\udc47\ud835\udc5dsubscript\ud835\udc67\ud835\udc60\ud835\udc47L\\_{ResD}(p(z\\_{t},T),p(z\\_{s},T))=\\\\mathcal{L}\\_{R}(p(z\\_{t},T),p(z\\_{s},T))~{}. |  | (3) |\n\nGenerally, \u2112R\u200b(p\u200b(zt,T),p\u200b(zs,T))subscript\u2112\ud835\udc45\ud835\udc5dsubscript\ud835\udc67\ud835\udc61\ud835\udc47\ud835\udc5dsubscript\ud835\udc67\ud835\udc60\ud835\udc47\\\\mathcal{L}\\_{R}(p(z\\_{t},T),p(z\\_{s},T)) often employs Kullback-Leibler divergence loss. Clearly, optimizing Eq. ( [1]In 2.1 Response-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\")) or ( [3]In 2.1 Response-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\")) can make the logits zssubscript\ud835\udc67\ud835\udc60z\\_{s} of student match the ones ztsubscript\ud835\udc67\ud835\udc61z\\_{t} of teacher. To easily understand the response-based knowledge distillation, the benchmark model of a vanilla knowledge distillation, which is the joint of the distillation and student losses, is given in Fig. [5]Figure 5 \u2023 2.1 Response-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\"). Note that the student loss is always defined as the cross-entropy loss \u2112C\u200bE\u200b(y,p\u200b(zs,T=1))subscript\u2112\ud835\udc36\ud835\udc38\ud835\udc66\ud835\udc5dsubscript\ud835\udc67\ud835\udc60\ud835\udc471\\\\mathcal{L}\\_{CE}(y,p(z\\_{s},T=1)) between the ground truth label and the soft logits of the student model.\n\nTable 1: A summay of feature-based knowledge.\n\n| Feature-based knowledge |\n| --- |\n| Methods | Knowledge Types | Knowledge Sources | Distillation losses |\n| Fitnet (Romero et al., [2015])) | Feature representation | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| NST (Huang and Wang, [2017])) | Neuron selectivity patterns | Hint layer | \u2112M\u200bM\u200bD(.)\\\\mathcal{L}\\_{MMD}(.) |\n| AT (Zagoruyko and Komodakis, [2017])) | Attention maps | Multi-layer group | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| FT (Kim et al., [2018])) | Paraphraser | Multi-layer group | \u21121(.)\\\\mathcal{L}\\_{1}(.) |\n| Rocket Launching (Zhou et al., [2018])) | Sharing parameters | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| KR (Liu et al., [2019c])) | Parameters distribution | Multi-layer group | \u2112C\u200bE(.)\\\\mathcal{L}\\_{CE}(.) |\n| AB (Heo et al., [2019c])) | Activation boundaries | Pre-ReLU | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| Shen et al. ( [2019a])) | Knowledge amalgamation | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| Heo et al. ( [2019a])) | Margin ReLU | Pre-ReLU | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| FN (Xu et al., [2020b])) | Feature representation | Fully-connected layer | \u2112C\u200bE(.)\\\\mathcal{L}\\_{CE}(.) |\n| DFA (Guan et al., [2020])) | Feature aggregation | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| AdaIN (Yang et al., [2020a])) | Feature statistics | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| FN (Xu et al., [2020b])) | Feature representation | Penultimate layer | \u2112C\u200bE(.)\\\\mathcal{L}\\_{CE}(.) |\n| EC-KD (Wang et al., [2020b])) | Feature representation | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| ALP-KD (Passban et al., [2021])) | Attention-based layer projection | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| SemCKD (Chen et al., [2021])) | Feature maps | Hint layer | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n\nThe idea of the response-based knowledge is straightforward and easy to understand, especially in the context of \u201cdark knowledge\u201d. From another perspective, the effectiveness of the soft targets is analogous to label smoothing (Kim and Kim, [2017])) or regularizers (Muller et al., [2019]); Ding et al., [2019])). However, the response-based knowledge usually relies on the output of the last layer, e.g., soft targets, and thus fails to address the intermediate-level supervision from the teacher model, which turns out to be very important for representation learning using very deep neural networks (Romero et al., [2015])). Since the soft logits are in fact the class probability distribution, the response-based knowledge distillation is also limited to the supervised learning.\n\n### 2.2 Feature-Based Knowledge\n\nDeep neural networks are good at learning multiple levels of feature representation with increasing abstraction. This is known as representation learning (Bengio et al., [2013])). Therefore, both the output of the last layer and the output of intermediate layers, i.e., feature maps, can be used as the knowledge to supervise the training of the student model. Specifically, feature-based knowledge from the intermediate layers is a good extension of response-based knowledge, especially for the training of thinner and deeper networks.\n\nThe intermediate representations were first introduced in Fitnets (Romero et al., [2015])), to provide hints111A hint means the output of a teacher\u2019s hidden layer that supervises the student\u2019s learning. to improve the training of the student model. The main idea is to directly match the feature activations of the teacher and the student. Inspired by this, a variety of other methods have been proposed to match the features indirectly (Zagoruyko and Komodakis, [2017]); Kim et al., [2018]); Heo et al., [2019c]); Passban et al., [2021]); Chen et al., [2021]); Wang et al., [2020b])). To be specific, Zagoruyko and Komodakis ( [2017])) derived an \u201cattention map\u201d from the original feature maps to express knowledge. The attention map was generalized by Huang and Wang ( [2017])) using neuron selectivity transfer. Passalis and Tefas ( [2018])) transferred knowledge by matching the probability distribution in feature space. To make it easier to transfer the teacher knowledge, Kim et al. ( [2018])) introduced so called \u201cfactors\u201d as a more understandable form of intermediate representations. To reduce the performance gap between teacher and student, Jin et al. ( [2019])) proposed route constrained hint learning, which supervises student by outputs of hint layers of teacher. Recently, Heo et al. ( [2019c])) proposed to use the activation boundary of the hidden neurons for knowledge transfer. Interestingly, the parameter sharing of intermediate layers of the teacher model together with response-based knowledge is also used as the teacher knowledge (Zhou et al., [2018])). To match the semantics between teacher and student, Chen et al. ( [2021])) proposed cross-layer knowledge distillation, which adaptively assigns proper teacher layers for each student layer via attention allocation.\n\n![Refer to caption]Figure 6: The generic feature-based knowledge distillation.\n\nGenerally, the distillation loss for feature-based knowledge transfer can be formulated as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | LF\u200be\u200ba\u200bD\u200b(ft\u200b(x),fs\u200b(x))=\u2112F\u200b(\u03a6t\u200b(ft\u200b(x)),\u03a6s\u200b(fs\u200b(x))),subscript\ud835\udc3f\ud835\udc39\ud835\udc52\ud835\udc4e\ud835\udc37subscript\ud835\udc53\ud835\udc61\ud835\udc65subscript\ud835\udc53\ud835\udc60\ud835\udc65subscript\u2112\ud835\udc39subscript\u03a6\ud835\udc61subscript\ud835\udc53\ud835\udc61\ud835\udc65subscript\u03a6\ud835\udc60subscript\ud835\udc53\ud835\udc60\ud835\udc65L\\_{FeaD}\\\\big{(}f\\_{t}(x),f\\_{s}(x)\\\\big{)}=\\\\mathcal{L}\\_{F}\\\\big{(}\\\\Phi\\_{t}(f\\_{t}(x)),\\\\Phi\\_{s}(f\\_{s}(x))\\\\big{)}~{}, |  | (4) |\n\nwhere ft\u200b(x)subscript\ud835\udc53\ud835\udc61\ud835\udc65f\\_{t}(x) and fs\u200b(x)subscript\ud835\udc53\ud835\udc60\ud835\udc65f\\_{s}(x) are the feature maps of the intermediate layers of teacher and student models, respectively. The transformation functions, \u03a6t\u200b(ft\u200b(x))subscript\u03a6\ud835\udc61subscript\ud835\udc53\ud835\udc61\ud835\udc65\\\\Phi\\_{t}(f\\_{t}(x)) and \u03a6s\u200b(fs\u200b(x))subscript\u03a6\ud835\udc60subscript\ud835\udc53\ud835\udc60\ud835\udc65\\\\Phi\\_{s}(f\\_{s}(x)), are usually applied when the feature maps of teacher and student models are not in the same shape. \u2112F(.)\\\\mathcal{L}\\_{F}(.) indicates the similarity function used to match the feature maps of teacher and student models. A general feature-based KD model is shown in Fig. [6]Figure 6 \u2023 2.2 Feature-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\"). We also summarize different types of feature-based knowledge in Table [1]Table 1 \u2023 2.1 Response-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\") from the perspective of feature types, source layers, and distillation loss. Specifically, \u21122(.)\\\\mathcal{L}\\_{2}(.), \u21121(.)\\\\mathcal{L}\\_{1}(.), \u2112C\u200bE(.)\\\\mathcal{L}\\_{CE}(.) and \u2112M\u200bM\u200bD(.)\\\\mathcal{L}\\_{MMD}(.) indicate l2subscript\ud835\udc592l\\_{2}-norm distance, l1subscript\ud835\udc591l\\_{1}-norm distance, cross-entropy loss and maximum mean discrepancy loss, respectively. Though feature-based knowledge transfer provides favorable information for the learning of the student model, how to effectively choose the hint layers from the teacher model and the guided layers from the student model remains to be further investigated (Romero et al., [2015])). Due to the significant differences between sizes of hint and guided layers, how to properly match feature representations of teacher and student also needs to be explored.\n\n### 2.3 Relation-Based Knowledge\n\nBoth response-based and feature-based knowledge use the outputs of specific layers in the teacher model. Relation-based knowledge further explores the relationships between different layers or data samples.\n\nTo explore the relationships between different feature maps, Yim et al. ( [2017])) proposed a flow of solution process (FSP), which is defined by the Gram matrix between two layers. The FSP matrix summarizes the relations between pairs of feature maps. It is calculated using the inner products between features from two layers. Using the correlations between feature maps as the distilled knowledge, knowledge distillation via singular value decomposition was proposed to extract key information in the feature maps (Lee et al., [2018])).\nTo use the knowledge from multiple teachers, Zhang and Peng ( [2018])) formed two graph by respectively using the logits and features of each teacher model as the nodes. Specifically, the importance and relationships of the different teachers are modeled by the logits and representation graphs before the knowledge transfer (Zhang and Peng, [2018])). Multi-head graph-based knowledge distillation was proposed by Lee and Song ( [2019])). The graph knowledge is the intra-data relations between any two feature maps via multi-head attention network. To explore the pairwise hint information, the student model also mimics the mutual information flow from pairs of hint layers of the teacher model (Passalis et al., [2020b])). In general, the distillation loss of relation-based knowledge based on the relations of feature maps can be formulated as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | LR\u200be\u200bl\u200bD\u200b(ft,fs)=\u2112R1\u200b(\u03a8t\u200b(f^t,f\u02c7t),\u03a8s\u200b(f^s,f\u02c7s)),subscript\ud835\udc3f\ud835\udc45\ud835\udc52\ud835\udc59\ud835\udc37subscript\ud835\udc53\ud835\udc61subscript\ud835\udc53\ud835\udc60subscript\u2112superscript\ud835\udc451subscript\u03a8\ud835\udc61subscript^\ud835\udc53\ud835\udc61subscript\u02c7\ud835\udc53\ud835\udc61subscript\u03a8\ud835\udc60subscript^\ud835\udc53\ud835\udc60subscript\u02c7\ud835\udc53\ud835\udc60L\\_{RelD}(f\\_{t},f\\_{s})=\\\\mathcal{L}\\_{R^{1}}\\\\big{(}\\\\Psi\\_{t}(\\\\hat{f}\\_{t},\\\\check{f}\\_{t}),\\\\Psi\\_{s}(\\\\hat{f}\\_{s},\\\\check{f}\\_{s})\\\\big{)}~{}, |  | (5) |\n\nwhere ftsubscript\ud835\udc53\ud835\udc61f\\_{t} and fssubscript\ud835\udc53\ud835\udc60f\\_{s} are the feature maps of teacher and student models, respectively. Pairs of feature maps are chosen from the teacher model, f^tsubscript^\ud835\udc53\ud835\udc61\\\\hat{f}\\_{t} and f\u02c7tsubscript\u02c7\ud835\udc53\ud835\udc61\\\\check{f}\\_{t}, and from the student model, f^ssubscript^\ud835\udc53\ud835\udc60\\\\hat{f}\\_{s} and f\u02c7ssubscript\u02c7\ud835\udc53\ud835\udc60\\\\check{f}\\_{s}. \u03a8t(.)\\\\Psi\\_{t}(.) and \u03a8s(.)\\\\Psi\\_{s}(.) are the similarity functions for pairs of feature maps from the teacher and student models. \u2112R1(.)\\\\mathcal{L}\\_{R^{1}}(.) indicates the correlation function between the teacher and student feature maps.\n\nTraditional knowledge transfer methods often involve individual knowledge distillation. The individual soft targets of a teacher are directly distilled into student. In fact, the distilled knowledge contains not only feature information but also mutual relations of data samples (You et al., [2017]); Park et al., [2019])). Specifically, Liu et al. ( [2019g])) proposed a robust and effective knowledge distillation method via instance relationship graph. The transferred knowledge in instance relationship graph contains instance features, instance relationships and the feature space transformation cross layers. Park et al. ( [2019])) proposed a relational knowledge distillation, which transfers the knowledge from instance relations. Based on idea of manifold learning, the student network is learned by feature embedding, which preserves the feature similarities of samples in the intermediate layers of the teacher networks (Chen et al., [2021])). The relations between data samples are modelled as probabilistic distribution using feature representations of data (Passalis and Tefas, [2018]); Passalis et al., [2020a])). The probabilistic distributions of teacher and student are matched by knowledge transfer. (Tung and Mori, [2019])) proposed a similarity-preserving knowledge distillation method. In particular, similarity-preserving knowledge, which arises from the similar activations of input pairs in the teacher networks, is transferred into the student network, with the pairwise similarities preserved. Peng et al. ( [2019a])) proposed a knowledge distillation method based on correlation congruence, in which the distilled knowledge contains both the instance-level information and the correlations between instances. Using the correlation congruence for distillation, the student network can learn the correlation between instances.\n\n![Refer to caption]Figure 7: The generic instance relation-based knowledge distillation.\n\nAs described above, the distillation loss of relation-based knowledge based on the instance relations can be formulated as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | LR\u200be\u200bl\u200bD\u200b(Ft,Fs)=\u2112R2\u200b(\u03c8t\u200b(ti,tj),\u03c8s\u200b(si,sj)),subscript\ud835\udc3f\ud835\udc45\ud835\udc52\ud835\udc59\ud835\udc37subscript\ud835\udc39\ud835\udc61subscript\ud835\udc39\ud835\udc60subscript\u2112superscript\ud835\udc452subscript\ud835\udf13\ud835\udc61subscript\ud835\udc61\ud835\udc56subscript\ud835\udc61\ud835\udc57subscript\ud835\udf13\ud835\udc60subscript\ud835\udc60\ud835\udc56subscript\ud835\udc60\ud835\udc57L\\_{RelD}(F\\_{t},F\\_{s})=\\\\mathcal{L}\\_{R^{2}}\\\\big{(}\\\\psi\\_{t}(t\\_{i},t\\_{j}),\\\\psi\\_{s}(s\\_{i},s\\_{j})\\\\big{)}~{}, |  | (6) |\n\nwhere (ti,tj)\u2208Ftsubscript\ud835\udc61\ud835\udc56subscript\ud835\udc61\ud835\udc57subscript\ud835\udc39\ud835\udc61(t\\_{i},t\\_{j})\\\\in F\\_{t} and (si,sj)\u2208Fssubscript\ud835\udc60\ud835\udc56subscript\ud835\udc60\ud835\udc57subscript\ud835\udc39\ud835\udc60(s\\_{i},s\\_{j})\\\\in F\\_{s}, and Ftsubscript\ud835\udc39\ud835\udc61F\\_{t} and Fssubscript\ud835\udc39\ud835\udc60F\\_{s} are the sets of feature representations from the teacher and student models, respectively. \u03c8t(.)\\\\psi\\_{t}(.) and \u03c8s(.)\\\\psi\\_{s}(.) are the similarity functions of (ti,tj)subscript\ud835\udc61\ud835\udc56subscript\ud835\udc61\ud835\udc57(t\\_{i},t\\_{j}) and (si,sj)subscript\ud835\udc60\ud835\udc56subscript\ud835\udc60\ud835\udc57(s\\_{i},s\\_{j}). \u2112R2(.)\\\\mathcal{L}\\_{R^{2}}(.) is the correlation function between the teacher and student feature representations. A typical instance relation-based KD model is shown in Fig. [7]Figure 7 \u2023 2.3 Relation-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\").\n\nTable 2: A summary of relation-based knowledge\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Relation-based knowledge |\n| Methods | Knowledge Types | Knowledge Sources | Distillation losses |\n| FSP (Yim et al., [2017])) | FSP matrix | End of multi-layer group | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| You et al. ( [2017])) | Instance relation | Hint layers | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| Zhang and Peng ( [2018])) | Logits graph, Representation graph | Softmax layers, Hint layers | \u2112E\u200bM(.)\\\\mathcal{L}\\_{EM}(.), \u2112M\u200bM\u200bD(.)\\\\mathcal{L}\\_{MMD}(.) |\n| DarkRank (Chen et al., [2018c])) | Similarity DarkRank | Fully-connected layers | \u2112K\u200bL(.)\\\\mathcal{L}\\_{KL}(.) |\n| MHGD (Lee and Song, [2019])) | Multi-head graph | Hint layers | \u2112K\u200bL(.)\\\\mathcal{L}\\_{KL}(.) |\n| RKD (Park et al., [2019])) | Instance relation | Fully-connected layers | \u2112H(.)\\\\mathcal{L}\\_{H}(.), \u2112A\u200bW(.)\\\\mathcal{L}\\_{AW}(.) |\n| IRG (Liu et al., [2019g])) | Instance relationship graph | Hint layers | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| SP (Tung and Mori, [2019])) | Similarity matrix | Hint layers | \u2225.\u2225F\\\\\\|.\\\\\\|\\_{F} |\n| CCKD (Peng et al., [2019a])) | Instance relation | Hint layers | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n| MLKD (Yu et al., [2019])) | Instance relation | Hint layers | \u2225.\u2225F\\\\\\|.\\\\\\|\\_{F} |\n| PKT(Passalis et al., [2020a])) | Similarity probability distribution | Fully-connected layers | \u2112K\u200bL(.)\\\\mathcal{L}\\_{KL}(.) |\n| Passalis et al. ( [2020b])) | Mutual information flow | Hint layers | \u2112K\u200bL(.)\\\\mathcal{L}\\_{KL}(.) |\n| LP (Chen et al., [2021])) | Instance relation | Hint layers | \u21122(.)\\\\mathcal{L}\\_{2}(.) |\n\nDistilled knowledge can be categorized from different perspectives, such as structured knowledge of the data (Liu et al., [2019g]); Chen et al., [2021]); Peng et al., [2019a]); Tung and Mori, [2019]); Tian et al., [2020])), privileged information about input features (Lopez-Paz et al., [2016]); Vapnik and Izmailov, [2015])). A summary of differnet categories of relation-based knowledge is shown in Table [2]Table 2 \u2023 2.3 Relation-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\"). Specifically, \u2112E\u200bM(.)\\\\mathcal{L}\\_{EM}(.), \u2112H(.)\\\\mathcal{L}\\_{H}(.), \u2112A\u200bW(.)\\\\mathcal{L}\\_{AW}(.) and \u2225.\u2225F\\\\\\|.\\\\\\|\\_{F} are Earth Mover distance, Huber loss, Angle-wise loss and Frobenius norm, respectively. Although some types of relation-based knowledge are provided recently, how to model the relation information from feature maps or data samples as knowledge still deserves further study.\n\n## 3 Distillation Schemes\nIn this section, we discuss the distillation schemes (i.e. training schemes) for both teacher and student models. According to whether the teacher model is updated simultaneously with the student model or not, the learning schemes of knowledge distillation can be directly divided into three main categories: offline distillation, online distillation and self-distillation, as shown in Fig. [8]Figure 8 \u2023 3 Distillation Schemes \u2023 Knowledge Distillation: A Survey\").\n\n![Refer to caption]Figure 8: Different distillations. The red color for \u201cpre-trained\u201d means networks are learned before distillation and the yellow color for \u201cto be trained\u201d means networks are learned during distillation\n\n### 3.1 Offline Distillation\n\nMost of previous knowledge distillation methods work offline. In vanilla knowledge distillation (Hinton et al., [2015])), the knowledge is transferred from a pre-trained teacher model into a student model. Therefore, the whole training process has two stages, namely: 1) the large teacher model is first trained on a set of training samples before distillation; and 2) the teacher model is used to extract the knowledge in the forms of logits or the intermediate features, which are then used to guide the training of the student model during distillation.\n\nThe first stage in offline distillation is usually not discussed as part of knowledge distillation, i.e., it is assumed that the teacher model is pre-defined. Little attention is paid to the teacher model structure and its relationship with the student model. Therefore, the offline methods mainly focus on improving different parts of the knowledge transfer, including the design of knowledge (Hinton et al., [2015]); Romero et al., [2015])) and the loss functions for matching features or distributions matching (Huang and Wang, [2017]); Passalis and Tefas, [2018]); Zagoruyko and Komodakis, [2017]); Mirzadeh et al., [2020]); Li et al., [2020d]); Heo et al., [2019b]); Asif et al., [2020])). The main advantage of offline methods is that they are simple and easy to be implemented. For example, the teacher model may contain a set of models trained using different software packages, possibly located on different machines. The knowledge can be extracted and stored in a cache.\n\nThe offline distillation methods usually employ one-way knowledge transfer and two-phase training procedure. However, the complex high-capacity teacher model with huge training time can not be avoided, while the training of the student model in offline distillation is usually efficient under the guidance of the teacher model. Moreover, the capacity gap between large teacher and small student always exists, and student often largely relies on teacher.\n\n### 3.2 Online Distillation\n\nAlthough offline distillation methods are simple and effective, some issues in offline distillation have attracted increasing attention from the research community (Mirzadeh et al., [2020])). To overcome the limitation of offline distillation, online distillation is proposed to further improve the performance of the student model, especially when a large-capacity high performance teacher model is not available (Zhang et al., [2018b]); Chen et al., [2020a])). In online distillation, both the teacher model and the student model are updated simultaneously, and the whole knowledge distillation framework is end-to-end trainable.\n\nA variety of online knowledge distillation methods have been proposed, especially in the last few years (Zhang et al., [2018b]); Chen et al., [2020a]); Xie et al., [2019]); Anil et al., [2018]); Kim et al., [2019b]); Zhou et al., [2018]); Walawalkar et al., [2020]); Wu and Gong, [2021]); Zhang et al., [2021a])). Specifically, in deep mutual learning (Zhang et al., [2018b])), multiple neural networks work in a collaborative way. Any one network can be the student model and other models can be the teacher during the training process. To improve generalization ability, deep mutual learning is extended by using ensemble of soft logits (Guo et al., [2020])). Chen et al. ( [2020a])) further introduced auxiliary peers and a group leader into deep mutual learning to form a diverse set of peer models. To reduce the computational cost, Zhu and Gong ( [2018])) proposed a multi-branch architecture, in which each branch indicates a student model and different branches share the same backbone network. Rather than using the ensemble of logits, Kim et al. ( [2019b])) introduced a feature fusion module to construct the teacher classifier. Xie et al. ( [2019])) replaced the convolution layer with cheap convolution operations to form the student model. Anil et al. ( [2018])) employed online distillation to train large-scale distributed neural network, and proposed a variant of online distillation called co-distillation. Co-distillation in parallel trains multiple models with the same architectures and any one model is trained by transferring the knowledge from the other models. Recently, an online adversarial knowledge distillation method is proposed to simultaneously train multiple networks by the discriminators using knowledge from both the class probabilities and a feature map (Chung et al., [2020])). Adversarial co-distillation is lately devised by using GAN to generate divergent examples (Zhang et al., [2021a])).\n\nOnline distillation is a one-phase end-to-end training scheme with efficient parallel computing. However, existing online methods (e.g., mutual learning) usually fails to address the high-capacity teacher in online settings, making it an interesting topic to further explore the relationships between the teacher and student model in online settings.\n\n### 3.3 Self-Distillation\n\nIn self-distillation, the same networks are used for the teacher and the student models (Zhang et al., [2019b]); Hou et al., [2019]); Zhang and Sabuncu, [2020]); Yang et al., [2019b]); Lee et al., [2019a]); Phuong and Lampert, [2019b]); Lan et al., [2018]); Xu and Liu, [2019]); Mobahi et al., [2020])). This can be regarded as a special case of online distillation. Specifically, Zhang et al. ( [2019b])) proposed a new self-distillation method, in which knowledge from the deeper sections of the network is distilled into its shallow sections. Similar to the self-distillation in (Zhang et al., [2019b])), a self-attention distillation method was proposed for lane detection (Hou et al., [2019])). The network utilizes the attention maps of its own layers as distillation targets for its lower layers. Snapshot distillation (Yang et al., [2019b])) is a special variant of self-distillation, in which knowledge in the earlier epochs of the network (teacher) is transferred into its later epochs (student) to support a supervised training process within the same network. To further reduce the inference time via the early exit, Phuong and Lampert ( [2019b])) proposed distillation-based training scheme, in which the early exit layer tries to mimic the output of later exit layer during the training. Recently, self-distillation has been theoretically analyzed in (Mobahi et al., [2020])), and its improved performance experimentally demonstrated in (Zhang and Sabuncu, [2020])).\n\nFurthermore, some interesting self-distillation methods are recently proposed (Yuan et al., [2020]); Yun et al., [2020]); Hahn and Choi, [2019])). To be specific, Yuan et al. proposed teacher-free knowledge distillation methods based on the analysis of label smoothing regularization (Yuan et al., [2020])). Hahn and Choi proposed a novel self-knowledge distillation method, in which the self-knowledge consists of the predicted probabilities instead of traditional soft probabilities (Hahn and Choi, [2019])). These predicted probabilities are defined by the feature representations of the training model. They reflect the similarities of data in feature embedding space. Yun et al. proposed class-wise self-knowledge distillation to match the output distributions of the training model between intra-class samples and augmented samples within the same source with the same model (Yun et al., [2020])). In addition, the self-distillation proposed by Lee et al. ( [2019a])) is adopted for data augmentation and the self-knowledge of augmentation is distilled into the model itself. Self distillation is also adopted to optimize deep models (the teacher or student networks) with the same architecture one by one (Furlanello et al., [2018]); Bagherinezhad et al., [2018])). Each network distills the knowledge of the previous network using a teacher-student optimization.\n\nBesides, offline, online and self distillation can also be intuitively understood from the perspective of human beings teacher-student learning. Offline distillation means the knowledgeable teacher teaches a student knowledge; online distillation means both teacher and student study together with each other; self-distillation means student learn knowledge by oneself. Moreover, just like the human beings learning, these three kinds of distillation can be combined to complement each other due to their own advantages. For example, both self-distillation and online distillation are properly integrated via the multiple knowledge transfer framework (Sun et al., [2021])).\n\n## 4 Teacher-Student Architecture\nIn knowledge distillation, the teacher-student architecture is a generic carrier to form the knowledge transfer. In other words, the quality of knowledge acquisition and distillation from teacher to student is also determined by how to design the teacher and student networks. In terms of the habits of human beings learning, we hope that a student can find a right teacher. Thus, to well finish capturing and distilling knowledge in knowledge distillation, how to select or design proper structures of teacher and student is very important but difficult problem. Recently, the model setups of teacher and student are almost pre-fixed with unvaried sizes and structures during distillation, so as to easily cause the model capacity gap. However, how to particulary design the architectures of teacher and student and why their architectures are determined by these model setups are nearly missing. In this section, we discuss the relationship between the structures of the teacher model and the student model as illustrated in Fig. [9]Figure 9 \u2023 4 Teacher-Student Architecture \u2023 Knowledge Distillation: A Survey\").\n\n![Refer to caption]Figure 9: Relationship of the teacher and student models.\n\nKnowledge distillation was previously designed to compress an ensemble of deep neural networks in (Hinton et al., [2015])). The complexity of deep neural networks mainly comes from two dimensions: depth and width. It is usually required to transfer knowledge from deeper and wider neural networks to shallower and thinner neural networks (Romero et al., [2015])). The student network is usually chosen to be: 1) a simplified version of a teacher network with fewer layers and fewer channels in each layer (Wang et al., [2018a]); Zhu and Gong, [2018]); Li et al., [2020d])); or 2) a quantized version of a teacher network in which the structure of the network is preserved (Polino et al., [2018]); Mishra and Marr, [2018]); Wei et al., [2018]); Shin et al., [2019])); or 3) a small network with efficient basic operations (Howard et al., [2017]); Zhang et al., [2018a]); Huang et al., [2017])); or 4) a small network with optimized global network structure (Liu et al., [2019i]); Xie et al., [2020]); Gu and Tresp, [2020])); or 5) the same network as teacher (Zhang et al., [2018b]); Furlanello et al., [2018]); Tarvainen and Valpola, [2017])).\n\nThe model capacity gap between the large deep neural network and a small student neural network can degrade knowledge transfer (Mirzadeh et al., [2020]); Gao et al., [2021])). To effectively transfer knowledge to student networks, a variety of methods have been proposed for a controlled reduction of the model complexity (Zhang et al., [2018b]); Nowak and Corso, [2018]); Crowley et al., [2018]); Liu et al., [2019a]), [i]); Wang et al., [2018a]); Gu and Tresp, [2020])). Specifically, Mirzadeh et al. ( [2020])) introduced a teacher assistant to mitigate the training gap between teacher model and student model. The gap is further reduced by residual learning, i.e., the assistant structure is used to learn the residual error (Gao et al., [2021])). On the other hand, several recent methods also focus on minimizing the difference in structure of the student model and the teacher model. For example, Polino et al. ( [2018])) combined network quantization with knowledge distillation, i.e., the student model is small and quantized version of the teacher model. Nowak and Corso ( [2018])) proposed a structure compression method which involves transferring the knowledge learned by multiple layers to a single layer. Wang et al. ( [2018a])) progressively performed block-wise knowledge transfer from teacher networks to student networks while preserving the receptive field. In online setting, the teacher networks are usually ensembles of student networks, in which the student models share similar structure (or the same structure) with each other (Zhang et al., [2018b]); Zhu and Gong, [2018]); Furlanello et al., [2018]); Chen et al., [2020a])).\n\nRecently, depth-wise separable convolution has been widely used to design efficient neural networks for mobile or embedded devices (Chollet, [2017]); Howard et al., [2017]); Sandler et al., [2018]); Zhang et al., [2018a]); Ma et al., [2018])).\nInspired by the success of neural architecture search (or NAS), the performances of small neural networks have been further improved by searching for a global structure based on efficient meta operations or blocks (Wu et al., [2019]); Tan et al., [2019]); Tan and Le, [2019]); Radosavovic et al., [2020])). Furthermore, the idea of dynamically searching for a knowledge transfer regime also appears in knowledge distillation, e.g., automatically removing redundant layers in a data-driven way using reinforcement learning (Ashok et al., [2018])), and searching for optimal student networks given the teacher networks (Liu et al., [2019i]); Xie et al., [2020]); Gu and Tresp, [2020])).\n\nMost previous works focus on designing either the structures of teacher and student models or the knowledge transfer scheme between them. To make a small student model well match a large teacher model for improving knowledge distillation performance, the adaptive teacher-student learning architecture is necessary. Recently, the idea of a neural architecture search in knowledge distillation, i.e., a joint search of student structure and knowledge transfer under the guidance of the teacher model, will be an interesting subject of future study.\n\n## 5 Distillation Algorithms\nA simple yet very effective idea for knowledge transfer is to directly match the response-based knowledge, feature-based knowledge (Romero et al., [2015]); Hinton et al., [2015])) or the representation distributions in feature space (Passalis and Tefas, [2018])) between the teacher model and the student model. Many different algorithms have been proposed to improve the process of transferring knowledge in more complex settings. In this section, we review recently proposed typical types of distillation methods for knowledge transfer within the field of knowledge distillation.\n\n### 5.1 Adversarial Distillation\n\nIn knowledge distillation, it is difficult for the teacher model to perfectly learn from the true data distribution. Simultaneously, the student model has only a small capacity and so cannot mimic the teacher model accurately (Mirzadeh et al., [2020])). Are there other ways of training the student model in order to mimic the teacher model? Recently, adversarial learning has received a great deal of attention due to its great success in generative networks, i.e., generative adversarial networks or GANs (Goodfellow et al., [2014])). Specifically, the discriminator in a GAN estimates the probability that a sample comes from the training data distribution while the generator tries to fool the discriminator using generated data samples. Inspired by this, many adversarial knowledge distillation methods have been proposed to enable the teacher and student networks to have a better understanding of the true data distribution (Wang et al., [2018e]); Xu et al., [2018a]); Micaelli and Storkey, [2019]); Xu et al., [2018b]); Liu et al., [2018]); Wang et al., [2018f]); Chen et al., [2019a]); Shen et al., [2019d]); Shu et al., [2019]); Liu et al., [2020a]); Belagiannis et al., [2018])).\n\n![Refer to caption]Figure 10: The different categories of the main adversarial distillation methods. (a) Generator in GAN produces training data to improve KD performance; the teacher may be used as discriminator. (b) Discriminator in GAN ensures that the student (also as generator) mimics the teacher. (c) Teacher and student form a generator; online knowledge distillation is enhanced by the discriminator.\n\nAs shown in Fig. [10]Figure 10 \u2023 5.1 Adversarial Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"), adversarial learning-based distillation methods, especially those methods using GANs, can be divided into three main categories as follows. In the first category, an adversarial generator is trained to generate synthetic data, which is either directly used as the training dataset (Chen et al., [2019a]); Ye et al., [2020])) or used to augment the training dataset (Liu et al., [2018])), shown in Fig. [10]Figure 10 \u2023 5.1 Adversarial Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\") (a). Furthermore, Micaelli and Storkey ( [2019])) utilized an adversarial generator to generate hard examples for knowledge transfer. Generally, the distillation loss used in this GAN-based KD category can be formulated as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | LK\u200bD=\u2112G\u200b(Ft\u200b(G\u200b(z)),Fs\u200b(G\u200b(z))),subscript\ud835\udc3f\ud835\udc3e\ud835\udc37subscript\u2112\ud835\udc3asubscript\ud835\udc39\ud835\udc61\ud835\udc3a\ud835\udc67subscript\ud835\udc39\ud835\udc60\ud835\udc3a\ud835\udc67L\\_{KD}=\\\\mathcal{L}\\_{G}\\\\big{(}F\\_{t}(G(z)),F\\_{s}(G(z))\\\\big{)}~{}, |  | (7) |\n\nwhere Ft(.)F\\_{t}(.) and Fs(.)F\\_{s}(.) are the outputs of the teacher and student models, respectively. G\u200b(z)\ud835\udc3a\ud835\udc67G(z) indicates the training samples generated by the generator G\ud835\udc3aG given the random input vector z\ud835\udc67z, and \u2112Gsubscript\u2112\ud835\udc3a\\\\mathcal{L}\\_{G} is a distillation loss to force the match between the predicted and the ground-truth probability distributions, e.g., the cross entropy loss or the Kullback-Leibler (KL) divergence loss.\n\nTo make student well match teacher, a discriminator in the second category is introduced to distinguish the samples from the student and the teacher models by using either the logits (Xu et al., [2018a]), [b])) or the features (Wang et al., [2018f])), shown in Fig. [10]Figure 10 \u2023 5.1 Adversarial Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\") (b). Specifically, Belagiannis et al. ( [2018])) used unlabeled data samples to form the knowledge transfer. Multiple discriminators were used by Shen et al. ( [2019d])). Furthermore, an effective intermediate supervision, i.e., the squeezed knowledge, was used by Shu et al. ( [2019])) to mitigate the capacity gap between the teacher and the student. A representative model proposed by Wang et al. ( [2018f])) falls into this category, which can be formulated as\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | LG\u200bA\u200bN\u200bK\u200bD=subscript\ud835\udc3f\ud835\udc3a\ud835\udc34\ud835\udc41\ud835\udc3e\ud835\udc37absent\\\\displaystyle L\\_{GANKD}= | \u2112C\u200bE\u200b(G\u200b(Fs\u200b(x)),y)+\u03b1\u200b\u2112K\u200bL\u200b(G\u200b(Fs\u200b(x)),Ft\u200b(x))subscript\u2112\ud835\udc36\ud835\udc38\ud835\udc3asubscript\ud835\udc39\ud835\udc60\ud835\udc65\ud835\udc66\ud835\udefcsubscript\u2112\ud835\udc3e\ud835\udc3f\ud835\udc3asubscript\ud835\udc39\ud835\udc60\ud835\udc65subscript\ud835\udc39\ud835\udc61\ud835\udc65\\\\displaystyle\\\\mathcal{L}\\_{CE}\\\\big{(}G(F\\_{s}(x)),y\\\\big{)}+\\\\alpha\\\\mathcal{L}\\_{KL}\\\\big{(}G(F\\_{s}(x)),F\\_{t}(x)\\\\big{)} |  | (8) |\n|  |  | +\u03b2\u200b\u2112G\u200bA\u200bN\u200b(Fs\u200b(x),Ft\u200b(x)),\ud835\udefdsubscript\u2112\ud835\udc3a\ud835\udc34\ud835\udc41subscript\ud835\udc39\ud835\udc60\ud835\udc65subscript\ud835\udc39\ud835\udc61\ud835\udc65\\\\displaystyle~{}~{}~{}~{}~{}+\\\\beta\\\\mathcal{L}\\_{GAN}\\\\big{(}F\\_{s}(x),F\\_{t}(x)\\\\big{)}~{}, |  |\n\nwhere G\ud835\udc3aG is a student network and \u2112G\u200bA\u200bN(.)\\\\mathcal{L}\\_{GAN}(.) indicates a typical loss function used in generative adversarial network to make the outputs between student and teacher as similar as possible.\n\nIn the third category, adversarial knowledge distillation is carried out in an online manner, i.e., the teacher and the student are jointly optimized in each iteration (Wang et al., [2018e]); Chung et al., [2020])), shown in Fig. [10]Figure 10 \u2023 5.1 Adversarial Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\") (c). Besides, using knowledge distillation to compress GANs, a learned small GAN student network mimics a larger GAN teacher network via knowledge transfer (Aguinaldo et al., [2019]); Li et al., [2020c])).\n\nIn summary, three main points can be concluded from the adversarial distillation methods above as follows: GAN is an effective tool to enhance the power of student learning via the teacher knowledge transfer; joint GAN and KD can generate the valuable data for improving the KD performance and overcoming the limitations of unusable and unaccessible data; KD can be used to compress GANs.\n\n### 5.2 Multi-Teacher Distillation\n\nDifferent teacher architectures can provide their own useful knowledge for a student network. The multiple teacher networks can be individually and integrally used for distillation during the period of training a student network. In a typical teacher-student framework, the teacher usually has a large model or an ensemble of large models. To transfer knowledge from multiple teachers, the simplest way is to use the averaged response from all teachers as the supervision signal (Hinton et al., [2015])). Several multi-teacher knowledge distillation methods have recently been proposed (Sau and Balasubramanian, [2016]); You et al., [2017]); Chen et al., [2019b]); Furlanello et al., [2018]); Yang et al., [2019a]); Zhang et al., [2018b]); Lee et al., [2019c]); Park and Kwak, [2020]); Papernot et al., [2017]); Fukuda et al., [2017]); Ruder et al., [2017]); Wu et al., [2019a]); Yang et al., [2020d]); Vongkulbhisal et al., [2019]); Zhao et al., [2020a]); Yuan et al., [2021])).\nA generic framework for multi-teacher distillation is shown in Fig. [11]Figure 11 \u2023 5.2 Multi-Teacher Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\").\n\n![Refer to caption]Figure 11: The generic framework for multi-teacher distillation.\n\nMultiple teacher networks have turned out to be effective for training student model usually using logits and feature representation as the knowledge. In addition to the averaged logits from all teachers, You et al. ( [2017])) further incorporated features from the intermediate layers in order to encourage the dissimilarity among different training samples. To utilize both logits and intermediate features, Chen et al. ( [2019b])) used two teacher networks, in which one teacher transfers response-based knowledge to the student and the other teacher transfers feature-based knowledge to the student. Fukuda et al. ( [2017])) randomly selected one teacher from the pool of teacher networks at each iteration. To transfer feature-based knowledge from multiple teachers, additional teacher branches are added to the student networks to mimic the intermediate features of teachers (Park and Kwak, [2020]); Asif et al., [2020])). Born again networks address multiple teachers in a step-by-step manner, i.e., the student at the t\ud835\udc61t step is used as the teacher of the student at the t+1\ud835\udc611{t+1} step (Furlanello et al., [2018])), and similar ideas can be found in (Yang et al., [2019a])). To efficiently perform knowledge transfer and explore the power of multiple teachers, several alternative methods have been proposed to simulate multiple teachers by adding different types of noise to a given teacher (Sau and Balasubramanian, [2016])) or by using stochastic blocks and skip connections (Lee et al., [2019c])). Using multiple teacher models with feature ensembles, knowledge amalgamation is designed in (Shen et al., [2019a]); Luo et al., [2019]); Shen et al., [2019b]); Luo et al., [2020])). Through knowledge amalgamation, many public available trained deep models as teachers can be reused. More interestingly, due to the special characteristics of multi-teacher distillation, its extensions are used for domain adaptation via knowledge adaptation (Ruder et al., [2017])), and to protect the privacy and security of data (Vongkulbhisal et al., [2019]); Papernot et al., [2017])).\n\nTable 3: A summary of multi-teacher distillation using different types of knowledge and distillation schemes. The response-based knowledge, feature-based knowledge and relation-based knowledge are abbreviated as \u2018ResK\u2019, \u2018FeaK\u2019 and \u2018RelK\u2019, respectively.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Offline Distillation |\n| Methods | ResK | FeaK | RelK |\n| You et al. ( [2017])) | \u2714 | \u2716 | \u2714 |\n| Fukuda et al. ( [2017])) | \u2714 | \u2716 | \u2716 |\n| Shen et al. ( [2019b])) | \u2714 | \u2714 | \u2716 |\n| Wu et al. ( [2019a])) | \u2716 | \u2716 | \u2714 |\n| Park and Kwak ( [2020])) | \u2716 | \u2714 | \u2716 |\n| Yang et al. ( [2020d])) | \u2714 | \u2716 | \u2716 |\n| Luo et al. ( [2020])) | \u2714 | \u2714 | \u2716 |\n| Kwon et al. ( [2020])) | \u2714 | \u2716 | \u2716 |\n| Liu et al. ( [2020c])) | \u2714 | \u2714 | \u2716 |\n| Zhao et al. ( [2020a])) | \u2714 | \u2714 | \u2716 |\n| Yuan et al. ( [2021])) | \u2714 | \u2716 | \u2716 |\n| Online Distillation |\n| Methods | ResK | FeaK | RelK |\n| Papernot et al. ( [2017])) | \u2714 | \u2716 | \u2716 |\n| Furlanello et al. ( [2018])) | \u2714 | \u2716 | \u2716 |\n| Zhang et al. ( [2018b])) | \u2714 | \u2716 | \u2716 |\n| Yang et al. ( [2019a])) | \u2714 | \u2716 | \u2716 |\n| Lee et al. ( [2019c])) | \u2714 | \u2714 | \u2716 |\n\nA summary of typical multi-teacher distillation methods using different types of knowledge and distillation schemes is shown in Table [3]Table 3 \u2023 5.2 Multi-Teacher Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"). Generally, multi-teacher knowledge distillation can provide rich knowledge and tailor a versatile student model because of the diverse knowledge from different teachers. However, how to effectively integrate different types of knowledge from multiple teachers needs to be further studied.\n\n### 5.3 Cross-Modal Distillation\n\nThe data or labels for some modalities might not be available during training or testing (Gupta et al., [2016]); Garcia et al., [2018]); Zhao et al., [2018]); Roheda et al., [2018]); Zhao et al., [2020b])). For this reason it is important to transfer knowledge between different modalities. Several typical scenarios using cross-modal knowledge transfer are reviewed as follows.\n\nGiven a teacher model pretrained on one modality (e.g., RGB images) with a large number of well-annotated data samples, Gupta et al. ( [2016])) transferred the knowledge from the teacher model to the student model with a new unlabeled input modality, such as a depth image and optical flow. Specifically, the proposed method relies on unlabeled paired samples involving both modalities, i.e., both RGB and depth images. The features obtained from RGB images by the teacher are then used for the supervised training of the student (Gupta et al., [2016])). The idea behind the paired samples is to transfer the annotation or label information via pair-wise sample registration and has been widely used for cross-modal applications (Albanie et al., [2018]); Zhao et al., [2018]); Thoker and Gall, [2019])). To perform human pose estimation through walls or with occluded images, Zhao et al. ( [2018])) used synchronized radio signals and camera images. Knowledge is transferred across modalities for radio-based human pose estimation. Thoker and Gall ( [2019])) obtained paired samples from two modalities: RGB videos and skeleton sequence. The pairs are used to transfer the knowledge learned on RGB videos to a skeleton-based human action recognition model. To improve the action recognition performance using only RGB images, Garcia et al. ( [2018])) performed cross-modality distillation on an additional modality, i.e., depth image, to generate a hallucination stream for RGB image modality. Tian et al. ( [2020])) introduced a contrastive loss to transfer pair-wise relationship across different modalities. To improve target detection, Roheda et al. ( [2018])) proposed cross-modality distillation among the missing and available modelities using GANs. The generic framework of cross-modal distillation is shown in Fig. [12]Figure 12 \u2023 5.3 Cross-Modal Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\").\n\n![Refer to caption]Figure 12: The generic framework for cross-modal distillation. For simplicity, only two modalities are shown.Table 4: A summary of cross-modal distillation with modalities, types of knowledge and distillation.\n\n| Methods | Modality for Teacher | Modality for Student | Knowledge | Distillation |\n| --- | --- | --- | --- | --- |\n| Hoffman et al. ( [2016])) | RGB images | Depth images | FeaK | Offline |\n| Gupta et al. ( [2016])) | RGB images | Depth images | ResK | Offline |\n| Passalis and Tefas ( [2018])) | Textual modality | Visual modality | RelK | Offline |\n| Garcia et al. ( [2018])) | Depth and RGB videos | RGB videos | ResK, FeaK | Offline |\n| Zhao et al. ( [2018])) | RGB frames | Radio frequency heatmaps | ResK | Offline |\n| Roheda et al. ( [2018])) | Temporal data | Spatial data | FeaK | Online |\n| Albanie et al. ( [2018])) | Vision | Sound | ResK | Offline |\n| Thoker and Gall ( [2019])) | RGB videos | Skeleton data | ResK | Offline |\n| Do et al. ( [2019])) | Images, question, answer<br>information | Image-questions | ResK | Offline |\n| Tian et al. ( [2020])) | RGB images | Depth images | ResK | Offline |\n| Gao et al. ( [2020])) | Multi-modal images | Single-mode images | ResK, FeaK | Offline |\n\nMoreover, Do et al. ( [2019])) proposed a knowledge distillation-based visual question answering method, in which knowledge from trilinear interaction teacher model with image-question-answer as inputs is distilled into the learning of a bilinear interaction student model with image-question as inputs. The probabilistic knowledge distillation proposed by Passalis and Tefas ( [2018])) is also used for knowledge transfer from the textual modality into the visual modality. Hoffman et al. ( [2016])) proposed a modality hallucination architecture based on cross-modality distillation to improve detection performance. Besides, these cross-model distillation methods also transfer the knowledge among multiple domains (Kundu et al., [2019]); Chen et al., [2019c]); Su and Maji, [2017])).\n\nA summary of cross-modal distillation with different modalities, types of knowledge and distillation schemes is shown in Table [4]Table 4 \u2023 5.3 Cross-Modal Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"). Specifically, it can be seen that knowledge distillation performs well in visual recognition tasks in the cross-modal scenarios. However, cross-modal knowledge transfer is a challenging study when there is a modality gap, e.g., lacking of the paired samples between different modalities.\n\n### 5.4 Graph-Based Distillation\n\nMost of knowledge distillation algorithms focus on transferring individual instance knowledge from the teacher to the student, while some recent methods have been proposed to explore the intra-data relationships using graphs (Chen et al., [2021]); Zhang and Peng, [2018]); Lee and Song, [2019]); Park et al., [2019]); Yao et al., [2020]); Ma and Mei, [2019]); Hou et al., [2020])). The main ideas of these graph-based distillation methods are 1) to use the graph as the carrier of teacher knowledge; or 2) to use the graph to control the message passing of the teacher knowledge. A generic framework for graph-based distillation is shown in Fig. [13]Figure 13 \u2023 5.4 Graph-Based Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"). As described in Section [2.3]Relation-Based Knowledge \u2023 2 Knowledge \u2023 Knowledge Distillation: A Survey\"), the graph-based knowledge falls in line of relation-based knowledge. In this section, we introduce typical definitions of the graph-based knowledge and the graph-based message passing distillation algorithms.\n\n![Refer to caption]Figure 13: A generic framework for graph-based distillation.\n\nSpecifically, in (Zhang and Peng, [2018])), each vertex represents a self-supervised teacher. Two graphs are then constructed using logits and intermediate features, i.e., the logits graph and representation graph, to transfer knowledge from multiple self-supervised teachers to the student. In (Chen et al., [2021])), the graph is used to maintain the relationship between samples in the high-dimensional space. Knowledge transfer is then carried out using a proposed locality preserving loss function. Lee and Song ( [2019])) analysed intra-data relations using a multi-head graph, in which the vertices are the features from different layers in CNNs. Park et al. ( [2019])) directly transferred the mutual relations of data samples, i.e., to match edges between a teacher graph and a student graph. Tung and Mori ( [2019])) used the similarity matrix to represent the mutual relations of the activations of the input pairs in teacher and student models. The similarity matrix of student matches that of teacher. Furthermore, Peng et al. ( [2019a])) not only matched the response-based and feature-based knowledge, but also used the graph-based knowledge. In (Liu et al., [2019g])), the instance features and instance relationships are modeled as vertexes and edges of the graph, respectively.\n\nRather than using the graph-based knowledge, several methods control knowledge transfer using a graph. Specifically, Luo et al. ( [2018])) considered the modality discrepancy to incorporate privileged information from the source domain. A directed graph, referred to as a distillation graph is introduced to explore the relationship between different modalities. Each vertex represent a modality and the edges indicate the connection strength between one modality and another. Minami et al. ( [2019])) proposed a bidirectional graph-based diverse collaborative learning to explore diverse knowledge transfer patterns. Yao et al. ( [2020])) introduced GNNs to deal with the knowledge transfer for graph-based knowledge. Besides, using knowledge distillation, the topological semantics of a graph convolutional teacher network as the topology-aware knowledge are transferred into the graph convolutional student network (Yang et al., [2020b]))\n\nGraph-based distillation can transfer the informative structure knowledge of data. However, how to properly construct graph to model the structure knowledge of data is a still challenging study.\n\n### 5.5 Attention-Based Distillation\n\nSince attention can well reflect the neuron activations of convolutional neural network, some attention mechanisms are used in knowledge distillation to improve the performance of the student network (Zagoruyko and Komodakis, [2017]); Huang and Wang, [2017]); Srinivas and Fleuret, [2018]); Crowley et al., [2018]); Song et al., [2018])). Among these attention-based KD methods (Crowley et al., [2018]); Huang and Wang, [2017]); Srinivas and Fleuret, [2018]); Zagoruyko and Komodakis, [2017])), different attention transfer mechanisms are defined for distilling knowledge from the teacher network to the student network. The core of attention transfer is to define the attention maps for feature embedding in the layers of a neural network. That is to say, knowledge about feature embedding is transferred using attention map functions. Unlike the attention maps, a different attentive knowledge distillation method was proposed by Song et al. ( [2018])). An attention mechanism is used to assign different confidence rules (Song et al., [2018])).\n\n### 5.6 Data-Free Distillation\n\nSome data-free KD methods have been proposed to overcome problems with unavailable data arising from privacy, legality, security and confidentiality concerns (Chen et al., [2019a]); Lopes et al., [2017]); Nayak et al., [2019]); Micaelli and Storkey, [2019]); Haroush et al., [2020]); Ye et al., [2020]); Nayak et al., [2021]); Chawla et al., [2021])). Just as \u201cdata free\u201d implies, there is no training data. Instead, the data is newly or synthetically generated.\n\n![Refer to caption]Figure 14: A generic framework for data-free distillation.\n\nSpecifically, in (Chen et al., [2019a]); Ye et al., [2020]); Micaelli and Storkey, [2019]); Yoo et al., [2019]); Hu et al., [2020])), the transfer data is generated by a GAN. In the proposed data-free knowledge distillation method (Lopes et al., [2017])), the transfer data to train the student network is reconstructed by using the layer activations or layer spectral activations of the teacher network. Yin et al. ( [2020])) proposed DeepInversion, which uses knowledge distillation to generate synthesized images for data-free knowledge transfer. Nayak et al. ( [2019])) proposed zero-shot knowledge distillation that does not use existing data. The transfer data is produced by modelling the softmax space using the parameters of the teacher network. In fact, the target data in (Micaelli and Storkey, [2019]); Nayak et al., [2019])) is generated by using the information from the feature representations of teacher networks. Similar to zero-shot learning, a knowledge distillation method with few-shot learning is designed by distilling knowledge from a teacher model into a student neural network (Kimura et al., [2018]); Shen et al., [2021])). The teacher uses limited labelled data. Besides, there is a new type of distillation called data distillation, which is similar to data-free distillation (Radosavovic et al., [2018]); Liu et al., [2019d]); Zhang et al., [2020d])). In data distillation, new training annotations of unlabeled data generated from the teacher model are employed to train a student model.\n\nIn summary, the synthesis data in data-free distillation is usually generated from the feature representations from the pre-trained teacher model, as shown in Fig. [14]Figure 14 \u2023 5.6 Data-Free Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"). Although the data-free distillation has shown a great potential under the condition of unavailable data, it remains a very challenging task, i.e., how to generate high quality diverse training data to improve the model generalizability.\n\n### 5.7 Quantized Distillation\n\nNetwork quantization reduces the computation complexity of neural networks by converting high-precision networks (e.g., 32-bit floating point) into low-precision networks (e.g., 2-bit and 8-bit). Meanwhile, knowledge distillation aims to train a small model to yield a performance comparable to that of a complex model. Some KD methods have been proposed using the quantization process in the teacher-student framework (Polino et al., [2018]); Mishra and Marr, [2018]); Wei et al., [2018]); Shin et al., [2019]); Kim et al., [2019a])). A framework for quantized distillation methods is shown in Fig. [15]Figure 15 \u2023 5.7 Quantized Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\").\n\nSpecifically, Polino et al. ( [2018])) proposed a quantized distillation method to transfer the knowledge to a weight-quantized student network. In (Mishra and Marr, [2018])), the proposed quantized KD is called the \u201capprentice\u201d. A high precision teacher network transfers knowledge to a small low-precision student network. To ensure that a small student network accurately mimics a large teacher network, the full-precision teacher network is first quantized on the feature maps, and then the knowledge is transferred from the quantized teacher to a quantized student network (Wei et al., [2018])). Kim et al. ( [2019a])) proposed quantization-aware knowledge distillation, which is based on self-study of a quantized student network and on the co-studying of teacher and student networks with knowledge transfer. Furthermore, Shin et al. ( [2019])) carried out empirical analysis of deep neural networks using both distillation and quantization, taking into account the hyper-parameters for knowledge distillation, such as the size of teacher networks and the distillation temperature. Recently, unlike the quantized distillation methods above, a self-distillation training schemes is designed to improve the performance of quantized deep models, where teacher shares model parameters of student (Boo et al., [2021])).\n\n![Refer to caption]Figure 15: A generic framework for quantized distillation.\n\n### 5.8 Lifelong Distillation\n\nLifelong learning, including continual learning, continuous learning and meta-learning, aims to learn in a similar way to human. It accumulates the previously learned knowledge and also transfers the learned knowledge into future learning (Chen and Liu, [2018])). Knowledge distillation provides an effective way to preserve and transfer learned knowledge without catastrophic forgetting. Recently, an increasing number of KD variants, which are based on lifelong learning, have been developed (Jang et al., [2019]); Flennerhag et al., [2019]); Peng et al., [2019b]); Liu et al., [2019e]); Lee et al., [2019b]); Zhai et al., [2019]); Zhou et al., [2020]); Shmelkov et al., [2017]); Li and Hoiem, [2017]); Caccia et al., [2020])). The methods proposed in (Jang et al., [2019]); Peng et al., [2019b]); Liu et al., [2019e]); Flennerhag et al., [2019])) adopt meta-learning. Jang et al. ( [2019])) designed meta-transfer networks that can determine what and where to transfer in the teacher-student architecture. Flennerhag et al. ( [2019])) proposed a light-weight framework called Leap for meta-learning over task manifolds by transferring knowledge from one learning process to another. Peng et al. ( [2019b])) designed a new knowledge transfer network architecture for few-shot image recognition. The architecture simultaneously incorporates visual information from images and prior knowledge. Liu et al. ( [2019e])) proposed the semantic-aware knowledge preservation method for image retrieval. The teacher knowledge obtained from the image modalities and semantic information are preserved and transferred.\n\nMoreover, to address the problem of catastrophic forgetting in lifelong learning, global distillation (Lee et al., [2019b])), knowledge distillation-based lifelong GAN (Zhai et al., [2019])), multi-model distillation (Zhou et al., [2020])) and the other KD-based methods (Li and Hoiem, [2017]); Shmelkov et al., [2017])) have been developed to extract the learned knowledge and teach the student network on new tasks.\n\nTable 5: Performance comparison of different knowledge distillation methods on CIFAR10. Note that \u2191\u2191\\\\uparrow indicates the performance improvement of the student network learned by each method comparing with the corresponding baseline model.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| Offline Distillation |\n| Methods | Knowledge | Teacher (baseline) | Student (baseline) | Accuracies |\n| FSP (Yim et al., [2017])) | RelK | ResNet26 (91.91) | ResNet8 (87.91) | 88.70 (0.79 \u2191\u2191\\\\uparrow) |\n| FT (Kim et al., [2018])) | FeaK | ResNet56 (93.61) | ResNet20 (92.22) | 93.15 (0.93 \u2191\u2191\\\\uparrow) |\n| IRG (Liu et al., [2019g])) | RelK | ResNet20 (91.45) | ResNet20-x0.5 (88.36) | 90.69 (2.33 \u2191\u2191\\\\uparrow) |\n| SP (Tung and Mori, [2019])) | RelK | WRN-40-1 (93.49) | WRN-16-1 (91.26) | 91.87 (0.61 \u2191\u2191\\\\uparrow) |\n| SP (Tung and Mori, [2019])) | RelK | WRN-40-2 (95.76) | WRN-16-8 (94.82) | 95.45 (0.63 \u2191\u2191\\\\uparrow) |\n| FN (Xu et al., [2020b])) | FeaK | ResNet110 (94.29) | ResNet56 (93.63) | 94.14 (0.51 \u2191\u2191\\\\uparrow) |\n| FN (Xu et al., [2020b])) | FeaK | ResNet56 (93.63) | ResNet20 (92.11) | 92.67 (0.56 \u2191\u2191\\\\uparrow) |\n| AdaIN (Yang et al., [2020a])) | FeaK | ResNet26 (93.58) | ResNet8 (87.78) | 89.02 (1.24 \u2191\u2191\\\\uparrow) |\n| AdaIN (Yang et al., [2020a])) | FeaK | WRN-40-2 (95.07) | WRN-16-2 (93.98) | 94.67 (0.69 \u2191\u2191\\\\uparrow) |\n| AE-KD (Du et al., [2020])) | FeaK | ResNet56 (\u2014) | MobileNetV2 (75.97) | 77.07 (1.10 \u2191\u2191\\\\uparrow) |\n| JointRD (Li et al., [2020b])) | FeaK | ResNet34 (95.39) | plain-CNN 34 (93.73) | 94.78 (1.05 \u2191\u2191\\\\uparrow) |\n| TOFD (Zhang et al., [2020a])) | FeaK | ResNet152 (\u2014) | ResNeXt50-4 (94.49) | 97.09 (2.60 \u2191\u2191\\\\uparrow) |\n| TOFD (Zhang et al., [2020a])) | FeaK | ResNet152 (\u2014) | MobileNetV2 (90.43) | 93.34 (2.91 \u2191\u2191\\\\uparrow) |\n| CTKD (Zhao et al., [2020a])) | RelK, FeaK | WRN-40-1 (93.43) | WRN-16-1 (91.28) | 92.50 (1.22 \u2191\u2191\\\\uparrow) |\n| CTKD (Zhao et al., [2020a])) | RelK, FeaK | WRN-40-2 (94.70) | WRN-16-2 (93.68) | 94.42 (0.74 \u2191\u2191\\\\uparrow) |\n| Online Distillation |\n| Methods | Knowledge | Teacher (baseline) | Student (baseline) | Accuracies |\n| Rocket-KD (Zhou et al., [2018])) | FeaK | WRN-40-1 (93.42) | WRN-16-1 (91.23) | 92.48 (1.25 \u2191\u2191\\\\uparrow) |\n| DML (Zhang et al., [2018b])) | ResK | WRN-28-10 (95.01) | ResNet32 (92.47) | 95.75, 93.18 (0.71 \u2191\u2191\\\\uparrow) |\n| DML (Zhang et al., [2018b])) | ResK | MobileNet (93.59) | ResNet32 (92.47) | 94.24, 93.32 (0.85 \u2191\u2191\\\\uparrow) |\n| DML (Zhang et al., [2018b])) | ResK | ResNet32 (92.47) | ResNet32 (92.47) | 92.68, 92.80 (0.33 \u2191\u2191\\\\uparrow) |\n| ONE (Zhu and Gong, [2018])) | ResK | ResNet32+ONE | ResNet32 (93.07) | 94.01 (0.84 \u2191\u2191\\\\uparrow) |\n| ONE (Zhu and Gong, [2018])) | ResK | ResNet110+ONE | ResNet110 (94.44) | 94.83 (0.39 \u2191\u2191\\\\uparrow) |\n| PCL (Wu and Gong, [2021])) | ResK | Student ensemble | ResNet110 (94.91) | 95.53 (0.62 \u2191\u2191\\\\uparrow) |\n| PCL (Wu and Gong, [2021])) | ResK | Student ensemble | DenseNet-40-12 (93.19) | 94.13 (0.94 \u2191\u2191\\\\uparrow) |\n| PCL (Wu and Gong, [2021])) | ResK | Student ensemble | VGG16 (93.96) | 94.74 (0.78 \u2191\u2191\\\\uparrow) |\n| ACNs (Zhang et al., [2021a])) | ResK | ResNet14 (90.66) | ResNet14 (90.66) | 92.09 (1.43 \u2191\u2191\\\\uparrow) |\n| ACNs (Zhang et al., [2021a])) | ResK | VGG11 (91.25) | VGG11 (91.25) | 92.65 (1.40 \u2191\u2191\\\\uparrow) |\n| ACNs (Zhang et al., [2021a])) | ResK | AlexNet (73.24) | AlexNet (73.24 | 78.57 (5.33 \u2191\u2191\\\\uparrow) |\n| Self-Distillation |\n| Methods | Knowledge | Teacher (baseline) | Student (baseline) | Accuracies |\n| Xu and Liu ( [2019])) | ResK, FeaK | \u2014 | ResNet32 (92.78) | 93.68 (0.90\u2191\u2191\\\\uparrow) |\n| Xu and Liu ( [2019])) | ResK, FeaK | \u2014 | DenseNe40(94.53) | 94.80 (0.27\u2191\u2191\\\\uparrow) |\n\nTable 6: Performance comparison of different knowledge distillation methods on CIFAR100. Note that \u2191\u2191\\\\uparrow indicates the performance improvement of the student network learned by each method comparing with the corresponding baseline model.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| Offline Distillation |\n| Methods | Knowledge | Teacher (baseline) | Student (baseline) | Accuracies |\n| FSP (Yim et al., [2017])) | RelK | ResNet32 (64.06) | ResNet14 (58.65) | 63.33 (4.68 \u2191\u2191\\\\uparrow) |\n| FT (Kim et al., [2018])) | FeaK | ResNet110 (73.09) | ResNet56 (71.96) | 74.48 (2.52 \u2191\u2191\\\\uparrow) |\n| RKD (Park et al., [2019])) | RelK, FeaK | ResNet50 (77.76) | VGG11 (71.26) | 74.66 (3.40 \u2191\u2191\\\\uparrow) |\n| IRG (Liu et al., [2019g])) | RelK | ResNet20 (78.40) | ResNet20-x0.5 (72.51) | 74.64 (2.13 \u2191\u2191\\\\uparrow) |\n| CCKD (Peng et al., [2019a])) | RelK, ResK | ResNet110 (\u2014) | ResNet20 (68.40) | 72.40 (4.00 \u2191\u2191\\\\uparrow) |\n| KR (Liu et al., [2019c])) | FeaK | ResNet32 (64.06) | ResNet14 (58,65) | 63.95 (5.30 \u2191\u2191\\\\uparrow) |\n| LKD (Li et al., [2020e])) | RelK | ResNet110 (75.76) | ResNet20 (69.47) | 72.63 (3.16 \u2191\u2191\\\\uparrow) |\n| LKD (Li et al., [2020e])) | RelK | WRN-40-2 (75.61) | WRN-16-2 (73.10) | 75.44 (2.34 \u2191\u2191\\\\uparrow) |\n| SSKD (Xu et al., [2020a])) | RelK, ResK | VGG13 (75.38) | MobileNetV2 (65.79) | 71.53 (5.74 \u2191\u2191\\\\uparrow) |\n| SSKD (Xu et al., [2020a])) | RelK, ResK | ResNet50 (79.10) | MobileNetV2 (65.79) | 72.57 (6.78 \u2191\u2191\\\\uparrow) |\n| FN (Xu et al., [2020b])) | FeaK | ResNet110 (82.01) | ResNet56 (81.73) | 82.23 (0.50 \u2191\u2191\\\\uparrow) |\n| AdaIN (Yang et al., [2020a])) | FeaK | WRN-40-4 (78.31) | WRN-16-4 (75.68) | 78.25 (2.57 \u2191\u2191\\\\uparrow) |\n| AdaIN (Yang et al., [2020a])) | FeaK | ResNet34 (77.26) | MobileNetV2 (68.36) | 70.66 (2.30 \u2191\u2191\\\\uparrow) |\n| PAD-L2subscript\ud835\udc3f2L\\_{2}(Zhang et al., [2020e])) | FeaK | ResNet18 (75.86) | MobileNetV2 (68.16) | 74.06 (5.90 \u2191\u2191\\\\uparrow) |\n| MGD (Yue et al., [2020])) | FeaK | WRN-28-4 (78.91) | WRN-28-2 (75.12) | 78.82 (3.70 \u2191\u2191\\\\uparrow) |\n| AE-KD (Du et al., [2020])) | FeaK | ResNet56 (\u2014) | ResNet20 (69.06) | 70.55 (1.49 \u2191\u2191\\\\uparrow) |\n| JointRD (Li et al., [2020b])) | FeaK | ResNet18 (77.92) | plain-CNN 18 (77.44) | 78.24 (0.80 \u2191\u2191\\\\uparrow) |\n| TOFD (Zhang et al., [2020a])) | FeaK | ResNet152 (\u2014) | ResNet50 (77.42) | 84.74 (7.32 \u2191\u2191\\\\uparrow) |\n| TOFD (Zhang et al., [2020a])) | FeaK | ResNet152 (\u2014) | ShuffleNetV2 (72.38) | 76.68 (4.30 \u2191\u2191\\\\uparrow) |\n| CTKD (Zhao et al., [2020a])) | RelK, FeaK | ResNet110 (72.65) | ResNet20 (68.33) | 70.75 (2.42 \u2191\u2191\\\\uparrow) |\n| CTKD (Zhao et al., [2020a])) | RelK, FeaK | WRN-40-2 (75.42) | WRN-16-2 (72.27) | 74.70 (2.43 \u2191\u2191\\\\uparrow) |\n| SemCKD (Chen et al., [2021])) | FeaK | ResNet-32x4 (79.42) | VGG13 (74.82) | 79.43 (4.61 \u2191\u2191\\\\uparrow) |\n| SemCKD (Chen et al., [2021])) | FeaK | WRN-40-2 (75.61) | MobileNetV2 (65.43) | 69.61 (4.18 \u2191\u2191\\\\uparrow) |\n| SemCKD (Chen et al., [2021])) | FeaK | VGG13 (74.64) | ShuffleNetV2 (72.60) | 76.39 (3.79 \u2191\u2191\\\\uparrow) |\n| RKD (Gao et al., [2021])) | FeaK | ResNet34 (73.05) | ResNet18 (68.06) | 72.82 (4.76 \u2191\u2191\\\\uparrow) |\n| Online Distillation |\n| Methods | Knowledge | Teacher (baseline) | Student (baseline) | Accuracies |\n| Rocket-KD (Zhou et al., [2018])) | FeaK | WRN-40-1 (\u2014) | WRN-16-1 (56.30) | 67.00 (10.07 \u2191\u2191\\\\uparrow) |\n| DML (Zhang et al., [2018b])) | ResK | WRN-28-10 (78.69) | MobileNet (73.65) | 80.28, 77.39 (3.74 \u2191\u2191\\\\uparrow) |\n| DML (Zhang et al., [2018b])) | ResK | MobileNet (73.65) | ResNet32 (68.99) | 76.13, 71.10 (8.11 \u2191\u2191\\\\uparrow) |\n| ONE (Zhu and Gong, [2018])) | ResK | ResNet32+ONE | ResNet32 (68.82) | 73.39 (4.57 \u2191\u2191\\\\uparrow) |\n| ONE (Zhu and Gong, [2018])) | ResK | ResNet110+ONE | ResNet110 (74.67) | 78.38 (3.71 \u2191\u2191\\\\uparrow) |\n| DCM (Yao and Sun, [2020])) | ResK | WRN-28-10 (81.28) | ResNet110 (73.45) | 82.18, 77.01 (3.56 \u2191\u2191\\\\uparrow) |\n| DCM (Yao and Sun, [2020])) | ResK | WRN-28-10 (81.28) | MobileNet (73.70) | 83.17, 78.57 (4.87 \u2191\u2191\\\\uparrow) |\n| KDCL (Guo et al., [2020])) | ResK | WRN-16-2 (72.20) | ResNet32 (69.90) | 75.50, 74.30 (4.40 \u2191\u2191\\\\uparrow) |\n| PCL (Wu and Gong, [2021])) | ResK | Student ensemble | ResNet110 (76.21) | 79.98 (3.77 \u2191\u2191\\\\uparrow) |\n| PCL (Wu and Gong, [2021])) | ResK | Student ensemble | DenseNet-40-12 (71.03) | 73.09 (2.06 \u2191\u2191\\\\uparrow) |\n| ACNs (Zhang et al., [2021a])) | ResK | ResNet14 (66.88) | ResNet14 (66.88) | 68.40 (1.52 \u2191\u2191\\\\uparrow) |\n| ACNs (Zhang et al., [2021a])) | ResK | VGG11 (67.38) | VGG11 (67.38) | 70.11 (2.73 \u2191\u2191\\\\uparrow) |\n| ACNs (Zhang et al., [2021a])) | ResK | AlexNet (39.45) | AlexNet (39.45 | 46.27 (6.82 \u2191\u2191\\\\uparrow) |\n| Self-Distillation |\n| Methods | Knowledge | Teacher (baseline) | Student (baseline) | Accuracies |\n| Xu and Liu ( [2019])) | ResK, FeaK | \u2014 | DenseNet (74.80) | 76.32 (1.52\u2191\u2191\\\\uparrow) |\n| SD (Yang et al., [2019b])) | ResK | \u2014 | ResNet32 (68.39) | 71.29 (2.90\u2191\u2191\\\\uparrow) |\n| Tf-KD (Yuan et al., [2020])) | ResK | \u2014 | ResNet18 (75.87) | 77.10 (1.23\u2191\u2191\\\\uparrow) |\n| Tf-KD (Yuan et al., [2020])) | ResK | \u2014 | ShuffleNetV2 (70.34) | 72.23 (1.89\u2191\u2191\\\\uparrow) |\n| Tf-KD (Yuan et al., [2020])) | ResK | \u2014 | ResNeXt29 (81.03) | 82.08 (1.05\u2191\u2191\\\\uparrow) |\n| CS-KD (Yun et al., [2020])) | ResK | \u2014 | ResNet18 (75.29) | 78.01 (2.72\u2191\u2191\\\\uparrow) |\n\n### 5.9 NAS-Based Distillation\n\nNeural architecture search (NAS), which is one of the most popular auto machine learning (or AutoML) techniques, aims to automatically identify deep neural models and adaptively learn appropriate deep neural structures. In knowledge distillation, the success of knowledge transfer depends on not only the knowledge from the teacher but also the architecture of the student. However, there might be a capacity gap between the large teacher model and the small student model, making it difficult for the student to learn well from the teacher. To address this issue, neural architecture search has been adopted to find the appropriate student architecture in oracle-based (Kang et al., [2020])) and architecture-aware knowledge distillation (Liu et al., [2019i])). Furthermore, knowledge distillation is employed to improve the efficiency of neural architecture search, such as AdaNAS (Macko et al., [2019])), NAS with distilled architecture knowledge (Li et al., [2020a])), teacher guided search for architectures or TGSA (Bashivan et al., [2019])), and one-shot NAS  (Peng et al., [2020])). In TGSA, each architecture search step is guided to mimic the intermediate feature representations of the teacher network. The possible structures for the student are efficiently searched and the feature transfer is effectively supervised by the teacher.\n\n## 6 Performance Comparison\nKnowledge distillation is an excellent technique for model compression. Through capturing the teacher knowledge and using distillation strategies with teacher-student learning, it provides effective performance of the lightweight student model. Recently, many knowledge distillation methods focus on improving the performance, especially in image classification tasks. In this section, to clearly demonstrate the effectiveness of knowledge distillation, we summarize the classification performance of some typical KD methods on two popular image classification datasets.\n\nThe two datasets are CIFAR10 and CIFAR100 (Krizhevsky and Hinton, [2009])) that are composed of 32\u00d732323232\\\\times 32 RGB images taken from 10 and 100 classes, respectively. Both have 50000 training images and 10000 testing images, and each class has the same numbers of training and testing images. For fair comparison, the experimental classification accuracy results (%) of the KD methods are directly derived from the corresponding original papers, as shown in Table [5]Table 5 \u2023 5.8 Lifelong Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\") for CIFAR10 and Table [6]Table 6 \u2023 5.8 Lifelong Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\") for CIFAR100. We report the performance of different methods when using different types of knowledge, distillation schemes, and structures of teacher/student models. Specifically, the accuracies in parentheses are the classification results of the teacher and student models, which are trained individually. It should be noted that the pairs of accuracies of DML (Zhang et al., [2018b])), DCM (Yao and Sun, [2020])) and KDCL (Guo et al., [2020])) are the performance of teacher and student after online distillation.\n\nFrom the performance comparison in Table [5]Table 5 \u2023 5.8 Lifelong Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\") and Table [6]Table 6 \u2023 5.8 Lifelong Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"), several observations can be summarized as\n\n1. \u2219\u2219\\\\bullet\n\n\nKnowledge distillation can be realized on different deep models.\n\n2. \u2219\u2219\\\\bullet\n\n\nModel compression of different deep models can be achieved by knowledge distillation.\n\n3. \u2219\u2219\\\\bullet\n\n\nThe online knowledge distillation through collaborative learning (Zhang et al., [2018b]); Yao and Sun, [2020])) can significantly improve the performance of the deep models.\n\n4. \u2219\u2219\\\\bullet\n\n\nThe self-knowledge distillation (Yang et al., [2019b]); Yuan et al., [2020]); Xu and Liu, [2019]); Yun et al., [2020])) can well improve the performance of the deep models.\n\n5. \u2219\u2219\\\\bullet\n\n\nThe offline and online distillation methods often transfer feature-based knowledge and response-based knowledge, respectively.\n\n6. \u2219\u2219\\\\bullet\n\n\nThe performance of the lightweight deep models (student) can be improved by the knowledge transfer from the high-capacity teacher models.\n\n\nThrough the performance comparison of different knowledge distillation methods, it can be easily concluded that knowledge distillation is an effective and efficient technique of compressing deep models.\n\n## 7 Applications\nAs an effective technique for the compression and acceleration of deep neural networks, knowledge distillation has been widely used in different fields of artificial intelligence, including visual recognition, speech recognition, natural language processing (NLP), and recommendation systems. Furthermore, knowledge distillation also can be used for other purposes, such as the data privacy and as a defense against adversarial attacks.\nThis section briefly reviews applications of knowledge distillation.\n\n### 7.1 KD in Visual Recognition\n\nIn last few years, a variety of knowledge distillation methods have been widely used for model compression in different visual recognition applications. Specifically, most of the knowledge distillation methods were previously developed for image classification (Li and Hoiem, [2017]); Peng et al., [2019b]); Bagherinezhad et al., [2018]); Chen et al., [2018a]); Wang et al., [2019b]); Mukherjee et al., [2019]); Zhu et al., [2019])) and then extended to other visual recognition applications, including face recognition (Luo et al., [2016]); Kong et al., [2019]); Yan et al., [2019]); Ge et al., [2018]); Wang et al., [2018b]), [2019c]); Duong et al., [2019]); Wu et al., [2020]); Wang et al., [2017]); Zhang et al., [2020b]); Wang et al., [2020b])), image/video segmentation (He et al., [2019]); Mullapudi et al., [2019]); Dou et al., [2020]); Liu et al., [2019h]); Siam et al., [2019]); Hou et al., [2020]); Bergmann et al., [2020])), action recognition (Luo et al., [2018]); Hao and Zhang, [2019]); Thoker and Gall, [2019]); Garcia et al., [2018]); Wang et al., [2019e]); Wu et al., [2019b]); Zhang et al., [2020c]); Cui et al., [2020])), object detection (Li et al., [2017]); Shmelkov et al., [2017]); Cun and Pun, [2020]); Wang et al., [2019d]); Huang et al., [2020]); Wei et al., [2018]); Hong and Yu, [2019]); Chawla et al., [2021])), lane detection (Hou et al., [2019])), person re-identification (Wu et al., [2019a])), pedestrian detection (Shen et al., [2016])), facial landmark detection (Dong and Yang, [2019])), pose estimation (Nie et al., [2019]); Zhang et al., [2019a]); Zhao et al., [2018])), video captioning (Pan et al., [2020]); Zhang et al., [2020f])), person search (Munjal et al., [2019]); Zhang et al., [2021c])), image retrieval (Liu et al., [2019e])), shadow detection (Chen et al., [2020c])), saliency estimation (Li et al., [2019])), depth estimation (Pilzer et al., [2019]); Ye et al., [2019])), visual odometry (Saputra et al., [2019])), text-to-image synthesis (Yuan and Peng, [2020]); Tan et al., [2021])), video classification (Zhang and Peng, [2018]); Bhardwaj et al., [2019])), visual question answering (Mun et al., [2018]); Aditya et al., [2019])) and anomaly detection (Bergmann et al., [2020])). Since knowledge distillation in classification task is fundamental for other tasks, we briefly review knowledge distillation in challenging image classification settings, such as face recognition and action recognition.\n\nExisting KD-based face recognition methods focus on not only efficient deployment but also competitive recognition accuracy (Luo et al., [2016]); Kong et al., [2019]); Yan et al., [2019]); Ge et al., [2018]); Wang et al., [2018b]), [2019c]); Duong et al., [2019]); Wang et al., [2017]), [2020b]); Zhang et al., [2020b])). Specifically, in (Luo et al., [2016])), the knowledge from the chosen informative neurons of top hint layer of the teacher network is transferred into the student network. A teacher weighting strategy with the loss of feature representations from hint layers was designed for knowledge transfer to avoid the incorrect supervision by the teacher (Wang et al., [2018b])). A recursive knowledge distillation method was designed by using a previous student network to initialize the next one (Yan et al., [2019])). Since most face recognition methods perform the open-set recognition, i.e., the classes/identities on test set are unknown to the training set, the face recognition criteria are usually distance metrics between feature representations of positive and negtive samples, e.g., the angular loss in (Duong et al., [2019])) and the correlated embedding loss in (Wu et al., [2020])).\n\nTo improve low-resolution face recognition accuracy, the knowledge distillation framework is developed by using architectures between high-resolution face teacher and low-resolution face student for model acceleration and improved classification performance (Ge et al., [2018]); Wang et al., [2019c]); Kong et al., [2019]); Ge et al., [2020])). Specifically, Ge et al. ( [2018])) proposed a selective knowledge distillation method, in which the teacher network for high-resolution face recognition selectively transfers its informative facial features into the student network for low-resolution face recognition through sparse graph optimization. In (Kong et al., [2019])), cross-resolution face recognition was realized by designing a resolution invariant model unifying both face hallucination and heterogeneous recognition sub-nets. To get efficient and effective low resolution face recognition model, the multi-kernel maximum mean discrepancy between student and teacher networks was adopted as the feature loss (Wang et al., [2019c])). In addition, the KD-based face recognition can be extended to face alignment and verification by changing the losses in knowledge distillation (Wang et al., [2017])).\n\nRecently, knowledge distillation has been used successfully for solving the complex image classification problems\n(Zhu et al., [2019]); Bagherinezhad et al., [2018]); Peng et al., [2019b]); Li and Hoiem, [2017]); Chen et al., [2018a]); Wang et al., [2019b]); Mukherjee et al., [2019])).\nFor incomplete, ambiguous and redundant image labels, the label refinery model through self-distillation and label progression is proposed to learn soft, informative, collective and dynamic labels for complex image classification (Bagherinezhad et al., [2018])). To address catastrophic forgetting with CNN in a variety of image classification tasks, a learning without forgetting method for CNN, including both knowledge distillation and lifelong learning is proposed to recognize a new image task and to preserve the original tasks (Li and Hoiem, [2017])). For improving image classification accuracy, Chen et al. ( [2018a])) proposed the feature maps-based knowledge distillation method with GAN. It transfers knowledge from feature maps to a student. Using knowledge distillation, a visual interpretation and diagnosis framework that unifies the teacher-student models for interpretation and a deep generative model for diagnosis is designed for image classifiers (Wang et al., [2019b])). Similar to the KD-based low-resolution face recognition, Zhu et al. ( [2019])) proposed deep feature distillation for the low-resolution image classification, in which the output features of a student match that of teacher.\n\nAs argued in Section [5.3]Cross-Modal Distillation \u2023 5 Distillation Algorithms \u2023 Knowledge Distillation: A Survey\"), knowledge distillation with the teacher-student structure can transfer and preserve the cross-modality knowledge. Efficient and effective action recognition under its cross-modal task scenarios can be successfully realized (Thoker and Gall, [2019]); Luo et al., [2018]); Garcia et al., [2018]); Hao and Zhang, [2019]); Wu et al., [2019b]); Zhang et al., [2020c])). These methods are the examples of spatiotemporal modality distillation with a different knowledge transfer for action recognition. Examples include mutual teacher-student networks (Thoker and Gall, [2019])), multiple stream\nnetworks (Garcia et al., [2018])), spatiotemporal distilled dense-connectivity network (Hao and Zhang, [2019])), graph distillation (Luo et al., [2018])) and multi-teacher to multi-student networks (Wu et al., [2019b]); Zhang et al., [2020c])). Among these methods, the light-weight student can distill and share the knowledge information from multiple modalities stored in the teacher.\n\nWe summarize two main observations of distillation-based visual recognition applications, as follows.\n\n1. \u2219\u2219\\\\bullet\n\n\nKnowledge distillation provides efficient and effective teacher-student learning for a variety of different visual recognition tasks, because a lightweight student network can be easily trained under the guidance of the high-capacity teacher networks.\n\n2. \u2219\u2219\\\\bullet\n\n\nKnowledge distillation can make full use of the different types of knowledge in complex data sources, such as cross-modality data, multi-domain data and multi-task data and low-resolution data, because of flexible teacher-student architectures and knowledge transfer.\n\n\n### 7.2 KD in NLP\n\nConventional language models such as BERT are very time consuming and resource consuming with complex cumbersome structures. Knowledge distillation is extensively studied in the field of natural language processing (NLP), in order to obtain the lightweight, efficient and effective language models. More and more KD methods are proposed for solving the numerous NLP tasks (Liu et al., [2019b]); Gordon and Duh, [2019]); Haidar and Rezagholizadeh, [2019]); Yang et al., [2020d]); Tang et al., [2019]); Hu et al., [2018]); Sun et al., [2019]); Nakashole and Flauger, [2017]); Jiao et al., [2020]); Wang et al., [2018d]); Zhou et al., [2019a]); Sanh et al., [2019]); Turc et al., [2019]); Arora et al., [2019]); Clark et al., [2019]); Kim and Rush, [2016]); Mou et al., [2016]); Liu et al., [2019f]); Hahn and Choi, [2019]); Tan et al., [2019]); Kuncoro et al., [2016]); Cui et al., [2017]); Wei et al., [2019]); Freitag et al., [2017]); Shakeri et al., [2019]); Aguilar et al., [2020]); Fu et al., [2021]); Yang et al., [2020d]); Zhang et al., [2021b]); Chen et al., [2020b]); Wang and Du, [2021])). The existing NLP tasks using KD contain neural machine translation (NMT) (Hahn and Choi, [2019]); Zhou et al., [2019a]); Li et al., [2021]); Kim and Rush, [2016]); Gordon and Duh, [2019]); Tan et al., [2019]); Wei et al., [2019]); Freitag et al., [2017]); Zhang et al., [2021b])), text generation (Chen et al., [2020b]); Haidar and Rezagholizadeh, [2019])), question answering system (Hu et al., [2018]); Wang et al., [2018d]); Arora et al., [2019]); Yang et al., [2020d])), event detection (Liu et al., [2019b])), document retrieval (Shakeri et al., [2019])), text recognition (Wang and Du, [2021])) and so on. Among these KD-based NLP methods, most of them belong to natural language understanding (NLU), and many of these KD methods for NLU are designed as the task-specific distillation (Tang et al., [2019]); Turc et al., [2019]); Mou et al., [2016])) and multi-task distillation (Liu et al., [2019f]); Yang et al., [2020d]); Sanh et al., [2019]); Clark et al., [2019])). In what follows, we describe KD research works for neural machine translation and then for extending a typical multilingual representation model entitled bidirectional encoder representations from transformers ( or BERT) (Devlin et al., [2019])) in NLU.\n\nIn natural language processing, neural machine translation is the hottest application. However, the existing NMT models with competitive performance is very large. To obtain lightweight NMT, there are many extended knowledge distillation methods for neural machine translation (Hahn and Choi, [2019]); Zhou et al., [2019a]); Kim and Rush, [2016]); Gordon and Duh, [2019]); Wei et al., [2019]); Freitag et al., [2017]); Tan et al., [2019])).\nRecently, Zhou et al. ( [2019a])) empirically proved the better performance of the KD-based non-autoregressive machine translation (NAT) model largely relies on its capacity and the distilled data via knowledge transfer. Gordon and Duh ( [2019])) explained the good performance of sequence-level knowledge distillation from the perspective of data augmentation and regularization.\nIn (Kim and Rush, [2016])), the effective word-level knowledge distillation is extended to the sequence-level one in the sequence generation scenario of NMT. The sequence generation student model mimics the sequence distribution of the teacher. To overcome the multilingual diversity, Tan et al. ( [2019])) proposed multi-teacher distillation, in which multiple individual models for handling bilingual pairs are teacher and a multilingual model is student.\nTo improve the translation quality, an ensemble of mutiple NMT models as teacher supervise the student model with a data filtering method Freitag et al. ( [2017])). To improve the performance of machine translation and machine reading tasks, (Wei et al., [2019])) proposed a novel online knowledge distillation method, which addresses the unstableness of the training process and the decreasing performance on each validation set. In this online KD, the best evaluated model during training is chosen as teacher and updated by any subsequent better model. If the next model had the poor performance, the current teacher model would guide it.\n\nAs a multilingual representation model, BERT has attracted attention in natural language understanding (Devlin et al., [2019])), but it is also a cumbersome deep model that is not easy to be deployed. To address this problem, several lightweight variations of BERT (called BERT model compression) using knowledge distillation are proposed (Sun et al., [2019]); Jiao et al., [2020]); Tang et al., [2019]); Sanh et al., [2019]); Wang et al., [2020a]); Liu et al., [2020b]); Fu et al., [2021])). Sun et al. ( [2019])) proposed patient knowledge distillation for BERT model compression (BERT-PKD), which is used for sentiment classification, paraphrase similarity matching, natural language inference, and machine reading comprehension. In the patient KD method, the feature representations of the \\[CLS\\] token from the hint layers of teacher are transferred to the student. To accelerate language inference, Jiao et al. ( [2020])) proposed TinyBERT that is two-stage transformer knowledge distillation. It contains general-domain and task-specific knowledge distillation. For sentence classification and matching, Tang et al. ( [2019])) proposed task-specific knowledge distillation from the BERT teacher model into a bidirectional long short-term memory network (BiLSTM). In (Sanh et al., [2019])), a lightweight student model called DistilBERT with the same generic structure as BERT is designed and learned on a variety of tasks of NLP. In (Aguilar et al., [2020])), a simplified student BERT is proposed by using the internal representations of a large teacher BERT via internal distillation.\n\nFurthermore, some typical KD methods for NLP with different perspectives are represented below. For question answering, to improve the efficiency and robustness of machine reading comprehension, Hu et al. ( [2018])) proposed an attention-guided answer distillation method, which fuses generic distillation and answer distillation to avoid confusing answers. For a task-specific distillation (Turc et al., [2019])), the performance of knowledge distillation with the interactions among pre-training, distillation and fine-tuning for the compact student model is studied. The proposed pre-trained distillation performs well in sentiment classification, natural language inference, textual entailment. For a multi-task distillation in the context of natural language understanding, Clark et al. ( [2019])) proposed the single-multi born-again distillation, which is based on born-again neural networks (Furlanello et al., [2018])). Single-task teachers teach a multi-task student. For multilingual representations, knowledge distillation transfers knowledge among the multi-lingual word embeddings for bilingual dictionary induction (Nakashole and Flauger, [2017])). For low-resource languages, knowledge transfer is effective across ensembles of multilingual models (Cui et al., [2017])).\n\nSeveral observations about knowledge distillation for natural language processing are summarized as follows.\n\n1. \u2219\u2219\\\\bullet\n\n\nKnowledge distillation provides efficient and effective lightweight language deep models. The large-capacity teacher model can transfer the rich knowledge from a large number of different kinds of language data to train a small student model, so that the student can quickly complete many language tasks with effective performance.\n\n2. \u2219\u2219\\\\bullet\n\n\nThe teacher-student knowledge transfer can easily and effectively solve many multilingual tasks, considering that knowledge from multilingual models can be transferred and shared by each other.\n\n3. \u2219\u2219\\\\bullet\n\n\nIn deep language models, the sequence knowledge can be effectively transferred from large networks into small networks.\n\n\n### 7.3 KD in Speech Recognition\n\nIn the field of speech recognition, deep neural acoustic models have attracted attention and interest due to their powerful performance. However, more and more real-time speech recognition systems are deployed in embedded platforms with limited computational resources and fast response time. The state-of-the-art deep complex models cannot satisfy the requirement of such speech recognition scenarios. To satisfy these requirements, knowledge distillation is widely studied and applied in many speech recognition tasks. There are many knowledge distillation systems for designing lightweight deep acoustic models for speech recognition (Chebotar and Waters, [2016]); Wong and Gales, [2016]); Chan et al., [2015]); Price et al., [2016]); Fukuda et al., [2017]); Bai et al., [2019]); Ng et al., [2018]); Albanie et al., [2018]); Lu et al., [2017]); Shi et al., [2019a]); Roheda et al., [2018]); Shi et al., [2019b]); Gao et al., [2019]); Ghorbani et al., [2018]); Takashima et al., [2018]); Watanabe et al., [2017]); Shi et al., [2019c]); Asami et al., [2017]); Huang et al., [2018]); Shen et al., [2018]); Perez et al., [2020]); Shen et al., [2019c]); Oord et al., [2018]); Kwon et al., [2020]); Shen et al., [2020])).\nIn particular, these KD-based speech recognition applications have spoken language identification (Shen et al., [2018]), [2019c]), [2020])), audio classification (Gao et al., [2019]); Perez et al., [2020])), text-independent speaker recognition (Ng et al., [2018])), speech enhancement (Watanabe et al., [2017])), acoustic event detection (Price et al., [2016]); Shi et al., [2019a]), [b])), speech synthesis (Oord et al., [2018])) and so on.\n\nMost existing knowledge distillation methods for speech recognition, use teacher-student architectures to improve the efficiency and recognition accuracy of acoustic models (Chan et al., [2015]); Watanabe et al., [2017]); Chebotar and Waters, [2016]); Shen et al., [2019c]); Lu et al., [2017]); Shen et al., [2018]), [2020]); Gao et al., [2019]); Shi et al., [2019c]), [a]); Perez et al., [2020])). Using a recurrent neural network (RNN) for holding the temporal information from speech sequences, the knowledge from the teacher RNN acoustic model is transferred into a small student DNN model (Chan et al., [2015])). Better speech recognition accuracy is obtained by combining multiple acoustic modes. The ensembles of different RNNs with different individual training criteria are designed to train a student model through knowledge transfer (Chebotar and Waters, [2016])). The learned student model performs well on 2,000-hour large vocabulary continuous speech recognition (LVCSR) tasks in 5 languages. To strengthen the generalization of the spoken language identification (LID) model on short utterances, the knowledge of feature representations of the long utterance-based teacher network is transferred into the short utterance-based student network that can discriminate short utterances and perform well on the short duration utterance-based LID tasks (Shen et al., [2018])). To further improve the performance of short utterance-based LID, an interactive teacher-student online distillation learning is proposed to enhance the performance of the feature representations of short utterances (Shen et al., [2019c])). The LID performance on short utterances is also improved by distilling internal representation knowledge of teacher on longer utterances into the one of student on short utterances (Shen et al., [2020])).\n\nMeanwhile, for audio classification, a multi-level feature distillation method is developed and an adversarial learning strategy is adopted to optimize the knowledge transfer (Gao et al., [2019])). To improve noise robust speech recognition, knowledge distillation is employed as the tool of speech enhancement (Watanabe et al., [2017])). In (Perez et al., [2020])), a audio-visual multi-modal knowledge distillation method is proposed. knowledge is transferred from the teacher models on visual and acoustic data into a student model on audio data. In essence, this distillation shares the cross-modal knowledge among the teachers and students (Perez et al., [2020]); Albanie et al., [2018]); Roheda et al., [2018])). For efficient acoustic event detection, a quantized distillation method is proposed by using both knowledge distillation and quantization (Shi et al., [2019a])). The quantized distillation transfers knowledge from a large CNN teacher model with better detection accuracy into a quantized RNN student model.\n\nUnlike most existing traditional frame-level KD methods, sequence-level KD can perform better in some sequence models for speech recognition, such as connectionist temporal classification (CTC) (Wong and Gales, [2016]); Takashima et al., [2018]); Huang et al., [2018])). In (Huang et al., [2018])), sequence-level KD is introduced into connectionist temporal classification, in order to match an output label sequence used in the training of teacher model and the input speech frames used in distillation. In (Wong and Gales, [2016])), the effect of speech recognition performance on frame-level and sequence-level student-teacher training is studied and a new sequence-level student-teacher training method is proposed. The teacher ensemble is constructed by using sequence-level combination instead of frame-level combination. To improve the performance of unidirectional RNN-based CTC for real-time speech recognition, the knowledge of a bidirectional LSTM-based CTC teacher model is transferred into a unidirectional LSTM-based CTC student model via frame-level KD and sequence-level KD (Takashima et al., [2018])).\n\nMoreover, knowledge distillation can be used to solve some special issues in speech recognition (Bai et al., [2019]); Asami et al., [2017]); Ghorbani et al., [2018])). To overcome overfitting issue of DNN acoustic models when data are scarce, knowledge distillation is employed as a regularization way to train adapted model with the supervision of the source model (Asami et al., [2017])). The final adapted model achieves better performance on three real acoustic domains. To overcome the degradation of the performance of non-native speech recognition, an advanced multi-accent student model is trained by distilling knowledge from the multiple accent-specific RNN-CTC models (Ghorbani et al., [2018])). In essence, knowledge distillation in (Asami et al., [2017]); Ghorbani et al., [2018])) realizes the cross-domain knowledge transfer. To solve the complexity of fusing the external language model (LM) into sequence-to-sequence model (Seq2seq) for speech recognition, knowledge distillation is employed as an effective tool to integrate a LM (teacher) into Seq2seq model (student) (Bai et al., [2019])). The trained Seq2seq model can reduce character error rates in sequence-to-sequence speech recognition.\n\nIn summary, several observations on knowledge distillation-based speech recognition can be concluded as follows.\n\n1. \u2219\u2219\\\\bullet\n\n\nThe lightweight student model can satisfy the practical requirements of speech recognition, such as real-time responses, use of limited resources and high recognition accuracy.\n\n2. \u2219\u2219\\\\bullet\n\n\nMany teacher-student architectures are built on RNN models because of the temporal property of speech sequences. In general, the RNN models are chosen as the teacher, which can well preserve and transfer the temporal knowledge from real acoustic data to a student model.\n\n3. \u2219\u2219\\\\bullet\n\n\nSequence-level knowledge distillation can be well applied to sequence models with good performance. In fact, the frame-level KD always uses the response-based knowledge, but sequence-level KD usually transfers the feature-based knowledge from hint layers of teacher models.\n\n4. \u2219\u2219\\\\bullet\n\n\nKnowledge distillation using teacher-student knowledge transfer can easily solve the cross-domain or cross-modal speech recognition in applications such as multi-accent and multilingual speech recognition.\n\n\n### 7.4 KD in Other Applications\n\nThe full and correct leverages of external knowledge, such as in a user review or in images, play a very important role in the effectiveness of deep recommendation models. Reducing the complexity and improving the efficiency of deep recommendation models is also very necessary. Recently, knowledge distillation has been successfully applied in recommender systems for deep model compression and acceleration (Chen et al., [2018b]); Tang and Wang, [2018]); Pan et al., [2019])). In (Tang and Wang, [2018])), knowledge distillation is first introduced into the recommender systems and called ranking distillation because the recommendation is expressed as a ranking problem. Chen et al. ( [2018b])) proposed an adversarial knowledge distillation method for efficient recommendation. A teacher as the right review predication network supervises the student as user-item prediction network (generator). The student learning is adjusted by adversarial adaption between teacher and student networks. Unlike distillation in (Chen et al., [2018b]); Tang and Wang, [2018])), Pan et al. ( [2019])) designed a enhanced collaborative denoising autoencoder (ECAE) model for recommender systems via knowledge distillation to capture useful knowledge from user feedbacks and to reduce noise. The unified ECAE framework contains a generation network, a retraining network and a distillation layer that transfers knowledge and reduces noise from the generation network.\n\nUsing the natural characteristic of knowledge distillation with teacher-student architectures, knowledge distillation is used as an effective strategy to solve adversarial attacks or perturbations of deep models (Papernot et al., [2016]); Ross and Doshi-Velez, [2018]); Goldblum et al., [2020]); Gil et al., [2019])) and the issue of the unavailable data due to the privacy, confidentiality and security concerns (Lopes et al., [2017]); Papernot et al., [2017]); Wang et al., [2019a]); Bai et al., [2020]); Vongkulbhisal et al., [2019])). To be specific, the perturbations of the adversarial samples can be overcome by the robust outputs of the teacher networks via distillation (Ross and Doshi-Velez, [2018]); Papernot et al., [2016])). To avoid exposing the private data, multiple teachers access subsets of the sensitive or unlabelled data and supervise the student (Papernot et al., [2017]); Vongkulbhisal et al., [2019])). To address the issue of privacy and security, the data to train the student network is generated by using the layer activations or layer spectral activations of the teacher network via data-free distillation (Lopes et al., [2017])). To protect data privacy and prevent intellectual piracy, Wang et al. ( [2019a])) proposed a private model compression framework via knowledge distillation. The student model is applied to public data while the teacher model is applied to both sensitive and public data. This private knowledge distillation adopts privacy loss and batch loss to further improve privacy. To consider the compromise between privacy and performance, Bai et al. ( [2020])) developed a few shot network compression method via a novel layer-wise knowledge distillation with few samples per class. Of course, there are other special interesting applications of knowledge distillation, such as neural architecture search (Macko et al., [2019]); Bashivan et al., [2019])), interpretability of deep neural networks (Liu et al., [2018b])), and federated learning (Bistritz et al., [2020]); Lin et al., [2020]); Seo et al., [2020]); He et al., [2020a])).\n\n## 8 Conclusion and Discussion\nKnowledge distillation and its applications have aroused considerable attention in recent few years. In this paper, we present a comprehensive review on knowledge distillation, from the perspectives of knowledge, distillation schemes, teacher-student architectures, distillation algorithms, performance comparison and applications. Below, we discuss the challenges of knowledge distillation and provide some insights on the future research of knowledge distillation.\n\n### 8.1 Challenges\n\nFor knowledge distillation, the key is to 1) extract rich knowledge from the teacher and 2) to transfer the knowledge from the teacher to guide the training of the student. Therefore, we discuss the challenges in knowledge distillation from the followings aspects: the quality of knowledge, the types of distillation, the design of the teacher-student architectures, and the theory behind knowledge distillation.\n\nMost KD methods leverage a combination of different kinds of knowledge, including response-based, feature-based, and relation-based knowledge. Therefore, it is important to know the influence of each individual type of knowledge and to know how different kinds of knowledge help each other in a complementary manner. For example, the response-based knowledge has a similar motivation to label smoothing and the model regularization (Kim and Kim, [2017]); Muller et al., [2019]); Ding et al., [2019])); The featured-based knowledge is often used to mimic the intermediate process of the teacher and the relation-based knowledge is used to capture the relationships across different samples. To this end, it is still challenging to model different types of knowledge in a unified and complementary framework. For example, the knowledge from different hint layers may have different influences on the training of the student model: 1) response-based knowledge is from the last layer; 2) feature-based knowledge from the deeper hint/guided layers may suffer from over-regularization (Romero et al., [2015])).\n\nHow to transfer the rich knowledge from the teacher to a student is a key step in knowledge distillation. Generally, the existing distillation methods can be categorized into offline distillation, online distillation and self distillation. Offline distillation is usually used to transfer knowledge from a complex teacher model, while the teacher model and the student model are comparable in the settings of online distillation and self distillation. To improve the efficacy of knowledge transfer, the relationships between the model complexity and existing distillation schemes or other novel distillation schemes (Sun et al., [2021])) should be further investigated.\n\nCurrently, most KD methods focus on new types of knowledge or distillation loss functions, leaving the design of the teacher-student architectures poorly investigated (Nowak and Corso, [2018]); Crowley et al., [2018]); Kang et al., [2020]); Liu et al., [2019i]); Ashok et al., [2018]); Liu et al., [2019a])). In fact, apart from the knowledge and distillation algorithms, the relationship between the structures of the teacher and the student also significantly influences the performance of knowledge distillation. For example, on one hand, some recent works find that the student model can learn little from some teacher models due to the model capacity gap between the teacher model and the student model (Zhang et al., [2019b]); Kang et al., [2020])); On the other hand, from some early theoretical analysis on the capacity of neural networks, shallow networks are capable of learning the same representation as deep neural networks (Ba and Caruana, [2014])). Therefore, the design of an effective student model or construction of a proper teacher model are still challenging problems in knowledge distillation.\n\nDespite a huge number of the knowledge distillation methods and applications, the understanding of knowledge distillation including theoretical explanations and empirical evaluations remains insufficient (Lopez-Paz et al., [2016]); Phuong and Lampert, [2019a]); Cho and Hariharan, [2019])). For example, distillation can be viewed as a form of learning with privileged information (Lopez-Paz et al., [2016])).\nThe assumption of linear teacher and student models enables the study of the theoretical explanations of characteristics of the student learning via distillation (Phuong and Lampert, [2019a])). Furthermore, some empirical evaluations and analysis on the efficacy of knowledge distillation were performed by Cho and Hariharan ( [2019])). However, a deep understanding of generalizability of knowledge distillation, especially how to measure the quality of knowledge or the quality of the teacher-student architecture, is still very difficult to attain.\n\n### 8.2 Future Directions\n\nIn order to improve the performance of knowledge distillation, the most important factors include what kind of teacher-student network architecture, what kind of knowledge is learned from the teacher network, and where is distilled into the student network.\n\nThe model compression and acceleration methods for deep neural networks usually fall into four different categories, namely parameter pruning and sharing, low-rank factorization, transferred compact convolutional filters and knowledge distillation (Cheng et al., [2018])). In existing knowledge distillation methods, there are only a few related works discussing the combination of knowledge distillation and other kinds of compressing methods. For example, quantized knowledge distillation, which can be seen as a parameter pruning method, integrates network quantization into the teacher-student architectures (Polino et al., [2018]); Mishra and Marr, [2018]); Wei et al., [2018])). Therefore, to learn efficient and effective lightweight deep models for the deployment on portable platforms, the hybrid compression methods via both knowledge distillation and other compressing techniques are necessary, since most compressing techniques require a re-training/fine-tuning process. Furthermore, how to decide the proper orders for applying different compressing methods will be an interesting topic for future study.\n\nApart from model compression for acceleration for deep neural networks, knowledge distillation also can be used in other problems because of the natural characteristics of knowledge transfer on the teacher-student architecture. Recently, knowledge distillation has been applied to the data privacy and security (Wang et al., [2019a])), adversarial attacks of deep models (Papernot et al., [2016])), cross-modalities (Gupta et al., [2016])), multiple domains (Asami et al., [2017])), catastrophic forgetting (Lee et al., [2019b])), accelerating learning of deep models (Chen et al., [2016])), efficiency of neural architecture search (Bashivan et al., [2019])), self-supervision (Noroozi et al., [2018])), and data augmentation (Lee et al., [2019a]); Gordon and Duh, [2019])). Another interesting example is that the knowledge transfer from the small teacher networks to a large student network can accelerate the student learning (Chen et al., [2016])). This is very quite different from vanilla knowledge distillation. The feature representations learned from unlabelled data by a large model can also supervise the target model via distillation (Noroozi et al., [2018])). To this end, the extensions of knowledge distillation for other purposes and applications might be a meaningful future direction.\n\nThe learning of knowledge distillation is similar to the human beings learning. It can be practicable to popularize the knowledge transfer to the classic and traditional machine learning methods (Zhou et al., [2019b]); Gong et al., [2018]); You et al., [2018]); Gong et al., [2017])). For example, traditional two-stage classification is felicitous cast to a single teacher single student problem based on the idea of knowledge distillation (Zhou et al., [2019b])). Furthermore, knowledge distillation can be flexibly deployed to various excellent learning schemes, such as the adversarial learning (Liu et al., [2018])), auto machine learning (Macko et al., [2019]); Fakoor et al., [2020])), label noise filtering learning (Xia et al., [2018])), lifelong learning (Zhai et al., [2019])), and reinforcement learning (Ashok et al., [2018]); Xu et al., [2020c]); Zhao and Hospedales, [2020])). Therefore, it will be useful to integrate knowledge distillation with other learning schemes for practical challenges in the future.\n</Content></Candidate>\n\n<Candidate>Candidate [3]:\nBeyond size: How gradients shape pruning decisions in large language models.\n\n<Abstract>Abstract: Large Language Models (LLMs) with billions of parameters are prime targets\nfor network pruning, removing some model weights without hurting performance.\nPrior approaches such as magnitude pruning, SparseGPT, and Wanda, either\nconcentrated solely on weights or integrated weights with activations for\nsparsity. However, they overlooked the informative gradients derived from\npretrained LLMs. In this paper, we present a novel sparsity-centric pruning\nmethod for pretrained LLMs, termed Gradient-based Language Model Pruner\n(GBLM-Pruner). GBLM-Pruner leverages the first-order term of the Taylor\nexpansion, operating in a training-free manner by harnessing properly\nnormalized gradients from a few calibration samples to determine the pruning\nmetric, and substantially outperforms competitive counterparts like SparseGPT\nand Wanda in multiple benchmarks. Intriguingly, by incorporating gradients,\nunstructured pruning with our method tends to reveal some structural patterns,\nwhich mirrors the geometric interdependence inherent in the LLMs' parameter\nstructure. Additionally, GBLM-Pruner functions without any subsequent\nretraining or weight updates to maintain its simplicity as other counterparts.\nExtensive evaluations on LLaMA-1 and LLaMA-2 across various benchmarks show\nthat GBLM-Pruner surpasses magnitude pruning, Wanda and SparseGPT by\nsignificant margins. We further extend our approach on Vision Transformer. Our\ncode and models are available at https://github.com/VILA-Lab/GBLM-Pruner.</Abstract><Content>\n## 1 Introduction\nLarge Language Models (LLMs) like OpenAI\u2019s GPT series (Radford et al., [2018]); [2019]); Brown et al., [2020a]); OpenAI, [2023])), BERT (Devlin et al., [2018])), LLaMA-1/2 (Touvron et al., [2023a]); [b])) and others have made significant strides in recent years, leading to a paradigm shift in various domains of artificial intelligence and especially in natural language processing (OpenAI, [2023]); Anil et al., [2023]); Touvron et al., [2023b])) and multimodal learning (Alayrac et al., [2022]); Li et al., [2023])). Many industries have integrated LLMs into their workflow, such as in chatbots (OpenAI, [2023])), content generation (Anil et al., [2023])), code completion tools (e.g., GitHub Copilot) (Chen et al., [2021])), gaming narratives (Todd et al., [2023])), and assistive technologies (Zdravkova et al., [2022])), etc. While enjoying the powerful and capable of impressive generalization, LLMs come with a set of challenges and disadvantages. The presence of an abundance of parameters, large memory consumption, and the resultant high computational cost during inference present several concerns in real-world applications. Previous literature proposed multiple solutions to address these disadvantages, such as model distillation (Hinton et al., [2015])), quantization (Jacob et al., [2018])), model pruning (Han et al., [2016])), hardware acceleration (Chen et al., [2020])), etc.\n\nAmong them, pruning refers to the removal of certain weights or even whole neurons/layers from a LLM based on specified criteria, such as the smallest weights. A pruned model can maintain similar performance with fewer parameters, resulting in a reduction in storage and computational requirements. Inducing nonstructural sparsity in pruning is a widely embraced method aimed at minimizing the memory requirements of neural networks with only a minimal sacrifice in accuracy. Pruning methods stand out as notably simple and efficient mechanisms for model compression, serving to eliminate weights contingent on their significance. Reduced models are not only more conveniently dispatched to edge devices like mobile phones but also exhibit substantially lower energy consumption, a sizable portion of energy is expended in transferring model parameters from a device\u2019s long-term storage to its memory (Dao et al., [2022])).\n\nHowever, given the constraints of training-free conditions, existing solutions for pruning LLMs primarily employ either weight magnitude pruning (Han et al., [2015a]); [2016])) or a combination of magnitude and activation pruning (Frantar & Alistarh, [2023]); Sun et al., [2023])). While these methods are substantiated with empirical ablations and experiments, they are, to a degree, either too complex to use like SparseGPT by computing matrix inverses and updating weights, or heuristic and lack profound theoretical depth and justification like Wanda regarding the efficacy, especially concerning the application to the recently developed, highly advanced large language models.\n\nIn this study, we tackle the aforementioned complexity and interpretability challenges in LLM pruning methods by presenting a simple yet effective approach named GBLM-Pruner (Gradient-Based Language Model Pruner) that can be well explained in theory using the adapted optimal brain surgeon (OBS) (Hassibi et al., [1993b])). This method proficiently prunes LLMs to significant levels of sparsity, eliminating the necessity to alter the residual weights. Specifically, we employ normalization of gradients across various samples to formulate an indicator matrix. This matrix can serve as activations and can either replace or supplement them. This method maintains simplicity over SparseGPT (Frantar & Alistarh, [2023])) while showcasing enhanced robustness and improved interpretation than Wanda (Sun et al., [2023])) on large language models compared to both magnitude pruning and magnitude + activation pruning. Furthermore, it is notable that although we employ gradients in our approach, there is no necessity for retraining or any updates to parameters.\n\nWe conducted extensive empirical evaluations of GBLM-Pruner on LLaMA-1 and 2 (Touvron et al., [2023a]); [b])), among the most influential families of open-sourced LLMs. The findings crossing various language benchmarks and perplexity from our investigation highlight that GBLM-Pruner is proficient in identifying effective sparse networks directly from pretrained LLMs, eliminating the need for retraining or weight updates. Notably, GBLM-Pruner substantially surpasses magnitude pruning and the recently introduced methods designed by weights+activations or weights+activations+weight update. Our contributions in this work form a foundational basis for ensuing advancements in this domain. Furthermore, we advocate for continued exploration aimed at unraveling the complexities of sparsity within LLMs through underexplored gradients, and highlighting that this is the first attempt to understand the importance of gradient information both theoretically and empirically, and introduce a simple gradient-based solution for LLMs pruning in a training-free manner. Finally, we further extend our approach to the other domain of Vision Transformer (Dosovitskiy et al., [2020])) to demonstrate its effectiveness.\n\n![Refer to caption]Figure 1: Illustration of the proposed method GBLM-Pruner. Given a weight matrix, \ud835\udc16\ud835\udc16\\\\mathbf{W}, a gradient matrix, \ud835\udc06\ud835\udc06\\\\mathbf{G}, and an input feature activation, \ud835\udc17\ud835\udc17\\\\mathbf{X}, the computation of weight importance is executed through an elementwise multiplication of the magnitude of weight and the \u21131subscript\u21131\\\\ell\\_{1} or \u21132subscript\u21132\\\\ell\\_{2} norm of the gradients across multiple samples, denoted as \u2016\ud835\udc06\u2016p\u22c5\\|\ud835\udc16\\|\u22c5subscriptnorm\ud835\udc06\ud835\udc5d\ud835\udc16\\\\\\|\\\\mathbf{G}\\\\\\|\\_{p}\\\\cdot\\|\\\\mathbf{W}\\|, optionally, it is promotable to add the multiplication of weight and the \u21132subscript\u21132\\\\ell\\_{2} norm of input activations, denoted as \\|\ud835\udc16\\|\u22c5\u2016\ud835\udc17\u20162\u22c5\ud835\udc16subscriptnorm\ud835\udc172\\|\\\\mathbf{W}\\|\\\\cdot\\\\\\|\\\\mathbf{X}\\\\\\|\\_{2}.\n\n## 2 Approach\n### 2.1 Prior Solutions\n\nWeights Magnitude. Magnitude pruning, which retains weights of significant absolute values, is the predominant approach for weight pruning. This approach usually generates an unstructured sparsity and has been employed across various architectures spanning computer vision (Han et al., [2015a]); [2016])) and language processing (Gale et al., [2019b])). Furthermore, it has recently become integral to the lottery ticket hypothesis (Frankle & Carbin, [2018])).\n\nWeights and Activations. SparseGPT (Frantar & Alistarh, [2023])) conceptualizes the problem of pruning large language models by addressing a local, layer-wise reconstruction problem. The approach for determining pruning metrics and the process for updating weights in SparseGPT draws inspiration from the Optimal Brain Surgeon (OBS) (Hassibi et al., [1993b])) approach. The pruning metric employed within SparseGPT is defined as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc16m\u200b\\[i,j\\]=\\|\ud835\udc16\u200b\\[i,j\\]\\|2diag\u2061(H\u22121)\u200b\\[j,j\\]subscript\ud835\udc16m\ud835\udc56\ud835\udc57superscript\ud835\udc16\ud835\udc56\ud835\udc572diagsuperscriptH1\ud835\udc57\ud835\udc57\\\\mathbf{W}\\_{\\\\text{m}}\\[{i,j}\\]=\\\\frac{\\|\\\\mathbf{W}\\[{i,j}\\]\\|^{2}}{\\\\operatorname{diag}\\\\left(\\\\textbf{H}^{-1}\\\\right)\\[j,j\\]} |  | (1) |\n\nwhere H=(\ud835\udc17T\u200b\ud835\udc17+\u03bb\u200b\ud835\udc08)Hsuperscript\ud835\udc17\ud835\udc47\ud835\udc17\ud835\udf06\ud835\udc08\\\\textbf{H}=\\\\left(\\\\mathbf{X}^{T}\\\\mathbf{X}+\\\\lambda\\\\mathbf{I}\\\\right) is the Hessian matrix, and H\u22121superscriptH1\\\\textbf{H}^{-1} is the inverse Hessian matrix. \ud835\udc16msubscript\ud835\udc16m\\\\mathbf{W}\\_{\\\\text{m}} is the pruning importance metric for a given weight \ud835\udc16\ud835\udc16\\\\mathbf{W}, and \\[i,j\\]\ud835\udc56\ud835\udc57\\[i,j\\] is the element at index i,j\ud835\udc56\ud835\udc57i,j of the matrix.\n\nWanda (Sun et al., [2023])) suggests assessing the significance of each individual weight by calculating the product of its magnitude and the norm of the corresponding input feature. More precisely, the score for a given weight, \ud835\udc16\u200b\\[i,j\\]\ud835\udc16\ud835\udc56\ud835\udc57\\\\mathbf{W}\\[i,j\\], is determined as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc16m\u200b\\[i,j\\]=\\|\ud835\udc16\u200b\\[i,j\\]\\|\u22c5\u2016\ud835\udc17\u200b\\[:,j\\]\u20162subscript\ud835\udc16m\ud835\udc56\ud835\udc57\u22c5\ud835\udc16\ud835\udc56\ud835\udc57subscriptnorm\ud835\udc17:\ud835\udc572\\\\mathbf{W}\\_{\\\\text{m}}\\[{i,j}\\]=\\\\left\\|\\\\mathbf{W}\\[{i,j}\\]\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\mathbf{X}\\[:,j\\]\\\\right\\\\\\|\\_{2} |  | (2) |\n\nwhere the elementwise product between the weight magnitude and the norm of input activations is performed within each row in W.\n\n### 2.2 Gradients Matter\n\nGradients. According to Optimal Brain Damage (LeCun et al., [1989])) and Optimal Brain Surgeon (Hassibi et al., [1993b])), gradients and higher order derivatives are naturally correlated to the importance of weights for LLM pruning, which is the theoretical basis of our approach. But they ignore the gradients in their pruning framework under the assumption that gradients of the fully trained network are small and do not provide any additional information when the higher-order terms are considered. Our work shows that gradients are still crucial and can provide valuable information.\n\nAlgorithm 1 The GBLM-Pruner algorithm\n\nW\u2190\u2190Wabsent\\\\textbf{W}\\\\leftarrow weight matrix \u2208(\ud835\udc85out,\ud835\udc85in)absentsubscript\ud835\udc85outsubscript\ud835\udc85in\\\\in\\\\left(\\\\bm{d}\\_{\\\\text{\\\\em out}},\\\\bm{d}\\_{\\\\text{\\\\em in}}\\\\right)\n\nX\u2190\u2190Xabsent\\\\textbf{X}\\\\leftarrow activation matrix \u2208(\ud835\udc75\u00d7\ud835\udc73,\ud835\udc85in)absent\ud835\udc75\ud835\udc73subscript\ud835\udc85in\\\\in\\\\left(\\\\bm{N}\\\\times\\\\bm{L},\\\\bm{d}\\_{\\\\text{\\\\em in}}\\\\right)\n\nG\u2190\u2190Gabsent\\\\textbf{G}\\\\leftarrow gradient matrix \u2208(\ud835\udc75,\ud835\udc85out,\ud835\udc85in)absent\ud835\udc75subscript\ud835\udc85outsubscript\ud835\udc85in\\\\in\\\\left(\\\\bm{N},\\\\bm{d}\\_{\\\\text{\\\\em out}},\\\\bm{d}\\_{\\\\text{\\\\em in}}\\\\right)\n\n\ud835\udc91\u2190\u2190\ud835\udc91absent\\\\bm{p}\\\\leftarrow sparsity ratio \u2208(0,1)absent01\\\\in\\\\left(0,1\\\\right)\n\nWm\u2190\u2190subscriptWmabsent\\\\textbf{W}\\_{\\\\text{m}}\\\\leftarrow pruning metric \u2208(\ud835\udc85out,\ud835\udc85in)absentsubscript\ud835\udc85outsubscript\ud835\udc85in\\\\in\\\\left(\\\\bm{d}\\_{\\\\text{\\\\em out}},\\\\bm{d}\\_{\\\\text{\\\\em in}}\\\\right)\n\nM\u2190\u2190Mabsent\\\\textbf{M}\\\\leftarrow pruning mask \u2208(\ud835\udc85out,\ud835\udc85in)absentsubscript\ud835\udc85outsubscript\ud835\udc85in\\\\in\\\\left(\\\\bm{d}\\_{\\\\text{\\\\em out}},\\\\bm{d}\\_{\\\\text{\\\\em in}}\\\\right)\n\nfor  i \u2208(1,\ud835\udc85out)absent1subscript\ud835\udc85out\\\\in\\\\left(1,\\\\bm{d}\\_{\\\\text{\\\\em out}}\\\\right)do\n\nfor  j \u2208(1,\ud835\udc85in)absent1subscript\ud835\udc85in\\\\in\\\\left(1,\\\\bm{d}\\_{\\\\text{\\\\em in}}\\\\right)do\n\nWm\u200b\\[i,j\\]=(\\|W\u200b\\[i,j\\]\\|\u22c5\u2016G\u200b\\[:,i,j\\]\u2016p+\\|W\u200b\\[i,j\\]\\|\u22c5\u2016X\u200b\\[:,j\\]\u20162)subscriptWm\ud835\udc56\ud835\udc57\u22c5W\ud835\udc56\ud835\udc57subscriptnormG:\ud835\udc56\ud835\udc57\ud835\udc5d\u22c5W\ud835\udc56\ud835\udc57subscriptnormX:\ud835\udc572\\\\textbf{W}\\_{\\\\text{m}}\\[i,j\\]\\\\!\\\\!\\\\!=\\\\!\\\\!\\\\!(\\\\left\\|\\\\textbf{W}\\[i,j\\]\\\\right\\|\\\\!\\\\cdot\\\\!\\\\left\\\\\\|\\\\textbf{G}\\[:,i,j\\]\\\\right\\\\\\|\\_{p}\\\\!+\\\\!\\\\left\\|\\\\textbf{W}\\[i,j\\]\\\\right\\|\\\\!\\\\cdot\\\\!\\\\left\\\\\\|\\\\textbf{X}\\[:,j\\]\\\\right\\\\\\|\\_{2})\n\nendfor\n\nendfor\n\nfor  i \u2208(1,\ud835\udc85out)absent1subscript\ud835\udc85out\\\\in\\\\left(1,\\\\bm{d}\\_{\\\\text{\\\\em out}}\\\\right)do\n\nM\u200b\\[i,:\\]M\ud835\udc56:\\\\textbf{M}\\[i,:\\] = mask of \ud835\udc91%percent\ud835\udc91\\\\bm{p}\\\\% weights with smallest Wm\u200b\\[i,:\\]subscriptWm\ud835\udc56:\\\\textbf{W}\\_{\\\\text{m}}\\[i,:\\]\n\nendfor\n\nW\u200b\\[M\\]=0Wdelimited-\\[\\]M0\\\\textbf{W}\\[\\\\textbf{M}\\]=0\n\nPrevious gradient-based structured pruning methods, such as head pruning (Michel et al., [2019])) and channel pruning (Yang et al., [2022])) utilize the first-order Taylor approximation of the loss \u2112\u2112\\\\mathcal{L} around w=0w0\\\\textbf{w}=0 as the importance score, the formulation is:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Wm=\ud835\udd3c\ud835\udc99\u223cX\u200b\\|\u2202\u2112\u200b(\ud835\udc99)\u2202W\u200bW\\|subscriptWmsubscript\ud835\udd3csimilar-to\ud835\udc99X\u2112\ud835\udc99WW\\\\textbf{W}\\_{\\\\text{m}}=\\\\mathbb{E}\\_{\\\\bm{x}\\\\sim\\\\textbf{X}}\\\\left\\|\\\\frac{\\\\partial\\\\mathcal{L}(\\\\bm{x})}{\\\\partial\\\\textbf{W}}\\\\textbf{W}\\\\right\\| |  | (3) |\n\nwhere X is the sampled data distribution. This equation calculates the importance score of the weights by considering how much the loss would change with respect to the changes in the weights, averaged over all input samples. Here, the absolute value is taken to consider the magnitude of the change regardless of the direction. In contrast to head pruning and channel pruning, which primarily utilize the first-order Taylor approximation, our method enhances stability and effectiveness by extending it to unstructured pruning and normalizing the gradient prior to the multiplication of the weights. Even without activations, our approach yields comparable performance to that of SparseGPT and Wanda. When incorporating activations, our method surpasses them significantly, achieving the highest accuracy.\n\nPruning Metric. As illustrated in Algorithm [1]Algorithm 1 \u2023 2.2 Gradients Matter \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"), consider a layer in LLMs characterized by the weight W, possessing a shape of (\ud835\udc85out,\ud835\udc85in)subscript\ud835\udc85outsubscript\ud835\udc85in(\\\\bm{d}\\_{\\\\text{\\\\em out}},\\\\bm{d}\\_{\\\\text{\\\\em in}}). In the context of Transformer models, this layer has the gradient G, exhibiting the same shape of weight W. We propose evaluating the importance of each individual weight by normalizing the corresponding gradients across different samples and then computing the product of its magnitude with the weights. More precisely, the importance score attributed to a specific weight, W\u200b\\[i,j\\]W\ud835\udc56\ud835\udc57\\\\textbf{W}\\[i,j\\], is determined as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Wm\u200b\\[i,j\\]=\\|W\u200b\\[i,j\\]\\|\u22c5\u2016G\u200b\\[:,i,j\\]\u2016psubscriptWm\ud835\udc56\ud835\udc57\u22c5W\ud835\udc56\ud835\udc57subscriptnormG:\ud835\udc56\ud835\udc57\ud835\udc5d\\\\textbf{W}\\_{\\\\text{m}}\\[i,j\\]=\\\\left\\|\\\\textbf{W}\\[i,j\\]\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\[:,i,j\\]\\\\right\\\\\\|\\_{p} |  | (4) |\n\nWhile competitive results can be achieved with gradients solely, we can combine feature activations to get better performance, which form our final pruning metric as shown in Equation [5]In 2.2 Gradients Matter \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Wm\u200b\\[i,j\\]=\\|W\u200b\\[i,j\\]\\|\u22c5(\u03bb\u22c5\u2016G\u200b\\[:,i,j\\]\u2016p+\u2016X\u200b\\[:,j\\]\u20162)subscriptWm\ud835\udc56\ud835\udc57\u22c5W\ud835\udc56\ud835\udc57\u22c5\ud835\udf06subscriptnormG:\ud835\udc56\ud835\udc57\ud835\udc5dsubscriptnormX:\ud835\udc572\\\\textbf{W}\\_{\\\\text{m}}\\[i,j\\]=\\\\left\\|\\\\textbf{W}\\[i,j\\]\\\\right\\|\\\\cdot\\\\left(\\\\lambda\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\[:,i,j\\]\\\\right\\\\\\|\\_{p}+\\\\left\\\\\\|\\\\textbf{X}\\[:,j\\]\\\\right\\\\\\|\\_{2}\\\\right) |  | (5) |\n\nwhere \u03bb\ud835\udf06\\\\lambda is the scaling factor used to account for the small magnitude of gradients, which makes the contribution of gradient balanced to the large magnitude of activations.\n\nPruning Granularity.\nThe granularity of pruning is pivotal in unstructured pruning, owing to the fact that varying granularities yield disparate pruning patterns. Previously, unstructured magnitude pruning approaches have leveraged both layer-wise and global pruning. In these methods, weights are contrasted either within the same layer or throughout the entirety of the model. Through a comprehensive study, we observe that the highest accuracy is achieved when weights are analyzed on a column-wise basis. This is because each column serves as a constituent component in output activation. This insight is consistent with the findings presented in Sun et al. ( [2023])).\n\nCorrelations of Weights, Activations and Gradients. Weights are parameters in LLMs that are learned during the training process to minimize the loss function. They are fundamental in determining the strength of the connection between two neurons and subsequently the output of the network. Gradients are partial derivatives of the loss function with respect to the weights. They are central to the learning process as they guide the updates made to the weights during training, using optimization algorithms like SGD (Ruder, [2016])). Activations are the outputs of the neurons, typically computed as a weighted sum of inputs passed through an activation function. The activations are intrinsically impacted by the weights thus weight augmented with activation serves as a redundant indicator of weight importance. However, the gradient serves as a valuable indicator by supplying supplementary information and signals regarding the importance of the weight.\n\n### 2.3 A Theoretical Analysis\n\nThe Optimal Brain Surgeon (OBS) framework (Hassibi et al., [1993b])) disregards the gradients under the assumption that the gradients at the local minimum vanish and cease to offer valuable information. This is followed by subsequent research that builds upon the OBS framework. In this section, we have revisited and refined the OBS framework by incorporating considerations of the gradient, i.e., the first-order term in Taylor approximation. The closed-form solution of the increase in error for removing a weight from the model, given by this analysis serves as the fundamental basis for our novel gradient-based pruning metric.\n\nThe optimization problem for network pruning using both the first and second-order terms can be depicted in Equation [6]In 2.3 A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). Here, \ud835\udc6c\ud835\udc6c\\\\bm{E} is the error or loss function, \ud835\udc98\ud835\udc98\\\\bm{w} is the weight vector for the neural network, and \u03b4\u200b\ud835\udc98\ud835\udeff\ud835\udc98\\\\delta\\\\bm{w} is the change in the weight vector. Additionally, Imsubscript\ud835\udc3c\ud835\udc5aI\\_{m} is the unit vector in weight space corresponding to the pruned weight \ud835\udc98msubscript\ud835\udc98\ud835\udc5a\\\\bm{w}\\_{m}, H=\u22022\ud835\udc6c\u2202\ud835\udc982Hsuperscript2\ud835\udc6csuperscript\ud835\udc982\\\\textbf{H}=\\\\frac{\\\\partial^{2}\\\\bm{E}}{\\\\partial\\\\bm{w}^{2}} denotes the Hessian Matrix, and the superscript \u22a4top\\\\top signifies vector transpose.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minm\u2061{min\u03b4\u200b\ud835\udc98\u2061((\u2202\ud835\udc6c\u2202\ud835\udc98)\u22a4\u22c5\u03b4\u200b\ud835\udc98+12\u200b\u03b4\u200b\ud835\udc98\u22a4\u22c5H\u22c5\u03b4\u200b\ud835\udc98)\\|Im\u22a4\u22c5\u03b4\u200b\ud835\udc98+\ud835\udc98m=0}subscript\ud835\udc5aconditionalsubscript\ud835\udeff\ud835\udc98\u22c5superscript\ud835\udc6c\ud835\udc98top\ud835\udeff\ud835\udc98\u22c512\ud835\udeffsuperscript\ud835\udc98topH\ud835\udeff\ud835\udc98\u22c5subscriptsuperscript\ud835\udc3ctop\ud835\udc5a\ud835\udeff\ud835\udc98subscript\ud835\udc98\ud835\udc5a0\\\\displaystyle\\\\min\\_{m}\\\\left\\\\{\\\\min\\_{\\\\delta\\\\bm{w}}\\\\left(\\\\left(\\\\frac{\\\\partial\\\\bm{E}}{\\\\partial\\\\bm{w}}\\\\right)^{\\\\top}\\\\cdot\\\\delta\\\\bm{w}+\\\\frac{1}{2}\\\\delta\\\\bm{w}^{\\\\top}\\\\cdot\\\\textbf{H}\\\\cdot\\\\delta\\\\bm{w}\\\\right)\\\\Big{\\|}{I}^{\\\\top}\\_{m}\\\\cdot\\\\delta\\\\bm{w}+\\\\bm{w}\\_{m}=0\\\\right\\\\} |  | (6) |\n\nTo solve the optimization objective in Equation [6]In 2.3 A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"), we formulate the Lagrangian presented in Equation [7]In 2.3 A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\") where \ud835\udc88=\u2202E\u2202\ud835\udc98\ud835\udc88\ud835\udc38\ud835\udc98\\\\bm{g}=\\\\frac{\\\\partial E}{\\\\partial\\\\bm{w}} is the gradient vector.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u2112=\ud835\udc88\u22a4\u22c5\u03b4\u200b\ud835\udc98+12\u200b\u03b4\u200b\ud835\udc98\u22a4\u22c5H\u22c5\u03b4\u200b\ud835\udc98+\u03bb\u200b(Im\u22a4\u22c5\u03b4\u200b\ud835\udc98+\ud835\udc98m)\u2112\u22c5superscript\ud835\udc88top\ud835\udeff\ud835\udc98\u22c512\ud835\udeffsuperscript\ud835\udc98topH\ud835\udeff\ud835\udc98\ud835\udf06\u22c5subscriptsuperscript\ud835\udc3ctop\ud835\udc5a\ud835\udeff\ud835\udc98subscript\ud835\udc98\ud835\udc5a\\\\displaystyle{\\\\mathcal{L}}=\\\\bm{g}^{\\\\top}\\\\cdot\\\\delta\\\\bm{w}+\\\\frac{1}{2}\\\\delta\\\\bm{w}^{\\\\top}\\\\cdot\\\\textbf{H}\\\\cdot\\\\delta\\\\bm{w}+\\\\lambda\\\\left({I}^{\\\\top}\\_{m}\\\\cdot\\\\delta\\\\bm{w}+\\\\bm{w}\\_{m}\\\\right) |  | (7) |\n\nBy solving the Lagrangian, we obtain the optimal change in weight vector, \u03b4\u200b\ud835\udc98m\ud835\udeffsubscript\ud835\udc98\ud835\udc5a\\\\delta\\\\bm{w}\\_{m} for pruning weight wmsubscript\ud835\udc64\ud835\udc5aw\\_{m}, and the change in error, \u03b4\u200b\ud835\udc6cm\ud835\udeffsubscript\ud835\udc6c\ud835\udc5a\\\\delta\\\\bm{E}\\_{m} as follows:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | \u03b4\u200b\ud835\udc98m\ud835\udeffsubscript\ud835\udc98\ud835\udc5a\\\\displaystyle\\\\delta\\\\bm{w}\\_{m} | =\u2212\ud835\udc98m(H\u22121)m\u200bm\u200bH\u22121\u22c5Im+Im\u22a4\u22c5H\u22121\u22c5\ud835\udc88(H\u22121)m\u200bm\u200bH\u22121\u22c5Im\u2212H\u22121\u22c5\ud835\udc88absent\u22c5subscript\ud835\udc98\ud835\udc5asubscriptsuperscriptH1\ud835\udc5a\ud835\udc5asuperscriptH1subscript\ud835\udc3c\ud835\udc5a\u22c5\u22c5superscriptsubscript\ud835\udc3c\ud835\udc5atopsuperscriptH1\ud835\udc88subscriptsuperscriptH1\ud835\udc5a\ud835\udc5asuperscriptH1subscript\ud835\udc3c\ud835\udc5a\u22c5superscriptH1\ud835\udc88\\\\displaystyle=-\\\\frac{\\\\bm{w}\\_{m}}{\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}{\\\\textbf{H}}^{-1}\\\\cdot{I}\\_{m}+\\\\frac{{I}\\_{m}^{\\\\top}\\\\cdot\\\\textbf{H}^{-1}\\\\cdot\\\\bm{g}}{\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}\\\\textbf{H}^{-1}\\\\cdot{I}\\_{m}-\\\\textbf{H}^{-1}\\\\cdot\\\\bm{g} |  | (8) |\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | \u03b4\u200b\ud835\udc6cm\ud835\udeffsubscript\ud835\udc6c\ud835\udc5a\\\\displaystyle\\\\delta\\\\bm{E}\\_{m} | =\ud835\udc98m22\u200b(H\u22121)m\u200bm\u2212\ud835\udc98m\u200b(\ud835\udc88\u22a4\u22c5H\u22121\u22c5Im)(H\u22121)m\u200bm+(Im\u22a4\u22c5H\u22121\u22c5\ud835\udc88)22\u200b(H\u22121)m\u200bm\u221212\u200b\ud835\udc88\u22a4\u22c5H\u22121\u22c5\ud835\udc88absentsuperscriptsubscript\ud835\udc98\ud835\udc5a22subscriptsuperscriptH1\ud835\udc5a\ud835\udc5asubscript\ud835\udc98\ud835\udc5a\u22c5superscript\ud835\udc88topsuperscriptH1subscript\ud835\udc3c\ud835\udc5asubscriptsuperscriptH1\ud835\udc5a\ud835\udc5asuperscript\u22c5superscriptsubscript\ud835\udc3c\ud835\udc5atopsuperscriptH1\ud835\udc8822subscriptsuperscriptH1\ud835\udc5a\ud835\udc5a\u22c512superscript\ud835\udc88topsuperscriptH1\ud835\udc88\\\\displaystyle=\\\\frac{\\\\bm{w}\\_{m}^{2}}{2\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}-\\\\frac{\\\\bm{w}\\_{m}\\\\left(\\\\bm{g}^{\\\\top}\\\\cdot\\\\textbf{H}^{-1}\\\\cdot{I}\\_{m}\\\\right)}{\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}+\\\\frac{\\\\left({I}\\_{m}^{\\\\top}\\\\cdot\\\\textbf{H}^{-1}\\\\cdot\\\\bm{g}\\\\right)^{2}}{2\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}-\\\\frac{1}{2}\\\\bm{g}^{\\\\top}\\\\cdot\\\\textbf{H}^{-1}\\\\cdot\\\\bm{g} |  | (9) |\n\nFor the error, \u03b4\u200b\ud835\udc6cm\ud835\udeffsubscript\ud835\udc6c\ud835\udc5a\\\\delta\\\\bm{E}\\_{m}, since the gradients are already small, we can consider the quadratic or square term of the gradient to be insignificant. Thus, ignoring the third and fourth terms, we have:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | \u03b4\u200b\ud835\udc6cm\ud835\udeffsubscript\ud835\udc6c\ud835\udc5a\\\\displaystyle\\\\delta\\\\bm{E}\\_{m} | =\ud835\udc98m22\u200b(H\u22121)m\u200bm\u2212\ud835\udc98m\u200b(\ud835\udc88\u22a4\u22c5H\u22121\u22c5Im)(H\u22121)m\u200bmabsentsuperscriptsubscript\ud835\udc98\ud835\udc5a22subscriptsuperscriptH1\ud835\udc5a\ud835\udc5asubscript\ud835\udc98\ud835\udc5a\u22c5superscript\ud835\udc88topsuperscriptH1subscript\ud835\udc3c\ud835\udc5asubscriptsuperscriptH1\ud835\udc5a\ud835\udc5a\\\\displaystyle=\\\\frac{\\\\bm{w}\\_{m}^{2}}{2\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}-\\\\frac{\\\\bm{w}\\_{m}\\\\left(\\\\bm{g}^{\\\\top}\\\\cdot\\\\textbf{H}^{-1}\\\\cdot{I}\\_{m}\\\\right)}{\\\\left({\\\\textbf{H}}^{-1}\\\\right)\\_{mm}} |  | (10) |\n\nTo compute the Hessian matrix, we draw upon the Optimal Brain Compression method introduced in the work by Frantar & Alistarh ( [2022])). This method optimizes Hessian computation by breaking down the global compression task into layer-specific sub-problems. This approach results in a closed-form solution for the Hessian, as expressed in Equation H=2\u200bX\u22a4\u200bXH2superscript\ud835\udc4btop\ud835\udc4b\\\\textbf{H}=2{X}^{\\\\top}{X}.\n\nFollowing Optimal Brain Damage (LeCun et al., [1989])), we introduce a simplifying assumption wherein we restrict our focus to the diagonal elements of the Hessian matrix. This results in H=2\u2217diag\u2061({\u2016\ud835\udc99j\u201622,1\u2264j\u2264n})H2diagsuperscriptsubscriptnormsubscript\ud835\udc99\ud835\udc57221\ud835\udc57\ud835\udc5b\\\\textbf{H}=2\\*\\\\operatorname{diag}\\\\left(\\\\left\\\\{\\\\left\\\\\\|\\\\bm{x}\\_{j}\\\\right\\\\\\|\\_{2}^{2},1\\\\leq j\\\\leq n\\\\right\\\\}\\\\right) where the variable n\ud835\udc5bn represents the total number of components within the activation tensor pertaining to the respective layer.\n\nSo, the first term of Equation [10]In 2.3 A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\") transforms into:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | \ud835\udc98m22\u200b(H\u22121)m\u200bmsuperscriptsubscript\ud835\udc98\ud835\udc5a22subscriptsuperscriptH1\ud835\udc5a\ud835\udc5a\\\\displaystyle\\\\frac{\\\\bm{w}\\_{m}^{2}}{2\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}} | =\ud835\udc98m2\u200b\u2016\ud835\udc99m\u201622absentsuperscriptsubscript\ud835\udc98\ud835\udc5a2superscriptsubscriptnormsubscript\ud835\udc99\ud835\udc5a22\\\\displaystyle=\\\\bm{w}\\_{m}^{2}\\\\left\\\\\\|\\\\bm{x}\\_{m}\\\\right\\\\\\|\\_{2}^{2} |  | (11) |\n\nSince we are considering only the diagonal elements of Hessian H. The second term in Equation [10]In 2.3 A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\") transforms as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u2212\ud835\udc98m\u200b(\ud835\udc88\u22a4\u22c5H\u22121\u22c5Im)(H\u22121)m\u200bm=\u2212\ud835\udc98m\u200b\ud835\udc88m\u200b(H\u22121)m\u200bm(H\u22121)m\u200bm=\ud835\udc98m\u200b(\u2212\ud835\udc88m)subscript\ud835\udc98\ud835\udc5a\u22c5superscript\ud835\udc88topsuperscriptH1subscript\ud835\udc3c\ud835\udc5asubscriptsuperscriptH1\ud835\udc5a\ud835\udc5asubscript\ud835\udc98\ud835\udc5asubscript\ud835\udc88\ud835\udc5asubscriptsuperscriptH1\ud835\udc5a\ud835\udc5asubscriptsuperscriptH1\ud835\udc5a\ud835\udc5asubscript\ud835\udc98\ud835\udc5asubscript\ud835\udc88\ud835\udc5a\\\\displaystyle-\\\\frac{\\\\bm{w}\\_{m}\\\\left(\\\\bm{g}^{\\\\top}\\\\cdot\\\\textbf{H}^{-1}\\\\cdot{I}\\_{m}\\\\right)}{\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}=-\\\\frac{\\\\bm{w}\\_{m}\\\\bm{g}\\_{m}\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}{\\\\left(\\\\textbf{H}^{-1}\\\\right)\\_{mm}}=\\\\bm{w}\\_{m}(-\\\\bm{g}\\_{m}) |  | (12) |\n\nThus, the final solution for the Lagrangian in Equation [7]In 2.3 A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\") can be expressed as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u03b4\u200b\ud835\udc6cm=(\ud835\udc98m\u200b\u2016\ud835\udc99m\u20162)2+\ud835\udc98m\u200b(\u2212\ud835\udc88m)\ud835\udeffsubscript\ud835\udc6c\ud835\udc5asuperscriptsubscript\ud835\udc98\ud835\udc5asubscriptnormsubscript\ud835\udc99\ud835\udc5a22subscript\ud835\udc98\ud835\udc5asubscript\ud835\udc88\ud835\udc5a\\\\displaystyle\\\\delta\\\\bm{E}\\_{m}=\\\\left(\\\\bm{w}\\_{m}\\\\left\\\\\\|\\\\bm{x}\\_{m}\\\\right\\\\\\|\\_{2}\\\\right)^{2}+\\\\bm{w}\\_{m}\\\\left(-\\\\bm{g}\\_{m}\\\\right) |  | (13) |\n\nBased on the solution presented in Equation [13]In 2.3 A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"), we conduct a series of experiments with different formulations of pruning metric in Section [3.4]Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). Our investigation reveals that the pruning metric ((\ud835\udc98m\u200b\u2016\ud835\udc99m\u20162)2+\\|\ud835\udc98m\\|\u200b\u2016\ud835\udc88m\u2016p)superscriptsubscript\ud835\udc98\ud835\udc5asubscriptnormsubscript\ud835\udc99\ud835\udc5a22subscript\ud835\udc98\ud835\udc5asubscriptnormsubscript\ud835\udc88\ud835\udc5a\ud835\udc5d\\\\left(\\\\left(\\\\bm{w}\\_{m}\\\\left\\\\\\|\\\\bm{x}\\_{m}\\\\right\\\\\\|\\_{2}\\\\right)^{2}+\\\\left\\|\\\\bm{w}\\_{m}\\\\right\\|\\\\left\\\\\\|\\\\bm{g}\\_{m}\\\\right\\\\\\|\\_{p}\\\\right) yields the most favorable results, with the option of choosing either the l1subscript\ud835\udc591l\\_{1} or l2subscript\ud835\udc592l\\_{2} norm for gradient aggregation. However, we observe that the influence of the first squared term predominates, so, we modify the pruning metric to (\\|\ud835\udc98m\\|\u200b\u2016\ud835\udc99m\u20162+\\|\ud835\udc98m\\|\u200b\u2016\ud835\udc88m\u2016p)subscript\ud835\udc98\ud835\udc5asubscriptnormsubscript\ud835\udc99\ud835\udc5a2subscript\ud835\udc98\ud835\udc5asubscriptnormsubscript\ud835\udc88\ud835\udc5a\ud835\udc5d\\\\left(\\\\left\\|\\\\bm{w}\\_{m}\\\\right\\|\\\\left\\\\\\|\\\\bm{x}\\_{m}\\\\right\\\\\\|\\_{2}+\\\\left\\|\\\\bm{w}\\_{m}\\\\right\\|\\\\left\\\\\\|\\\\bm{g}\\_{m}\\\\right\\\\\\|\\_{p}\\\\right), which demonstrate superior performance, as depicted in Table [5]Table 5 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\").\n\n## 3 Experiments\n### 3.1 Implementation and Setup Details\n\nWe conduct all our experiments using PyTorch (Paszke et al., [2017])) for GBLM-Pruner.\nExperiments are performed with six models from the LLaMA-1 series (7B, 13B, 30B) (Touvron et al., [2023a])) and the LLaMA-2 series (7B, 13B, 70B)  (Touvron et al., [2023b])). The Huggingface transformer library is used (Wolf et al., [2019])) for handling models. The experiments are conducted on NVIDIA A100 GPUs with 40/80GB of memory. GBLM-Pruner requires calibration data for the computation of gradients and activations. Following previous works (Frantar et al., [2022]); Frantar & Alistarh, [2023]); Sun et al., [2023])), we use 128 sequences with 2048-tokens randomly sampled from the first shard of the C4 (Raffel et al., [2019])) training data as our calibration data. The gradients are computed with language modeling on the input sequence as the objective function. This represents the pretraining objective of the language models and remains agnostic to the downstream task the language models are used for. For scaling factor \u03bb\ud835\udf06\\\\lambda, we used a value of 100 after careful ablation below.\n\nBaseline Approaches.\nWe compare our proposed method against three baselines: (1) magnitude pruning, (2) SparseGPT (Frantar & Alistarh, [2023])), and (3) Wanda (Sun et al., [2023])). Following Gale et al. ( [2019a])) and Sanh et al. ( [2020])), we conduct a layer-wise comparison of model weights for magnitude pruning, subsequently removing those with smaller magnitudes. For both SparseGPT111 [https://github.com/IST-DASLab/sparsegpt] and Wanda222 [https://github.com/locuslab/wanda], we utilize their respective code implementation to obtain the pruned models.\n\nEvaluation.\nWe assess the performance of the pruned models using two distinct metrics: (1) Perplexity and (2) Zero-shot Evaluation on the Harness Benchmark (Gao et al., [2021])). Perplexity is a well-established metric (Dettmers & Zettlemoyer, [2022]); Yao et al., [2022]); Frantar & Alistarh, [2022]); Sun et al., [2023]); Frantar & Alistarh, [2023])) and provides stable and reliable results. The Zero-shot Harness evaluation, although known to be relatively noisy, offers a more readily interpretable assessment of model performance.\n\nTable 1: Pruning granularity for GBLM-Pruner.\n\n| Pruning Granularity | Perplexity |\n| --- | --- |\n| layer | 7.45 |\n| input,1 | 10.16 |\n| input,128 | 7.64 |\n| output,1 | 6.86 |\n| output,128 | 7.47 |\n\nSparsity and Pruning Granularity.\nFollowing recent methods (Frantar & Alistarh, [2023]); Sanh et al., [2020])), GBLM-Pruner prunes the linear layers of LLMs uniformly except for the embedding layer and the final classification head. In addition to unstructured pruning, we also position GBLM-Pruner in comparison to other baselines, exploring more rigorous yet hardware-accommodating 2:4 and 4:8 semi-structured sparsity patterns.\nWe experiment with five different pruning configurations, as shown in Table [1]Table 1 \u2023 3.1 Implementation and Setup Details \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). Our findings indicate that the (output,1) configuration yields the most favorable results, prompting its adoption as the standard for all our experiments.\n\n### 3.2 Perplexity Evaluation\n\nFor all the methods under consideration, we report the perplexity evaluated on WikiText (Merity et al., [2016])) validation data for both unstructured and semi-structured N:::M sparsity pruning in Table [2]Table 2 \u2023 3.2 Perplexity Evaluation \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). For unstructured pruning, GBLM-Pruner with \u21131subscript\u21131\\\\ell\\_{1} norm outperforms both Wanda and reconstruction-based SparseGPT significantly across both LLaMA-1 and LLaMA-2 models.\n\nHowever, the N:::M sparsity pruning is restrictive by definition, especially 2:4 sparsity, which imposes greater constraints and results in a noticeable decrease in perplexity compared to unstructured pruning. As shown in Table [2]Table 2 \u2023 3.2 Perplexity Evaluation \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"), we can observe SparseGPT seems to perform better than both GBLM-Pruner and Wanda in the case of 2:4 sparsity pruning. Conversely, for 4:8 sparsity pruning, GBLM-Pruner outperforms other baselines for most of the models, especially for the larger models.\n\nTable 2: WikiText perplexity of pruning methods for LLaMA 1 and LLaMA 2 family of models.\n\n|  |  | LLaMA-2 | LLaMA-1 |\n| --- | --- | --- | --- |\n| Method | Sparsity | 7B | 13B | 70B | 7B | 13B | 30B |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| None | 0 | 5.47 | 4.88 | 3.32 | 5.68 | 5.09 | 4.10 |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Magnitude | 0.5 | 16.03 | 6.83 | 5.36 | 17.29 | 20.21 | 7.54 |\n| SparseGPT | 0.5 | 7.00 | 6.03 | 4.25 | 7.22 | 6.19 | 5.32 |\n| Wanda | 0.5 | 6.92 | 5.97 | 4.22 | 7.26 | 6.15 | 5.24 |\n| GBLM-Pruner\u21132 | 0.5 | 6.89 | 5.94 | 4.20 | 7.19 | 6.14 | 5.23 |\n| GBLM-Pruner\u21131 | 0.5 | 6.86 | 5.88 | 4.17 | 7.15 | 6.11 | 5.18 |\n| Magnitude | 2:4 | 37.77 | 8.89 | 6.76 | 42.54 | 18.36 | 9.11 |\n| SparseGPT | 2:4 | 10.82 | 8.75 | 5.68 | 10.88 | 9.06 | 7.12 |\n| Wanda | 2:4 | 12.11 | 9.00 | 5.48 | 11.53 | 9.59 | 6.90 |\n| GBLM-Pruner\u21132 | 2:4 | 11.58 | 9.00 | 5.48 | 11.36 | 9.45 | 6.90 |\n| GBLM-Pruner\u21131 | 2:4 | 11.91 | 8.80 | 5.47 | 11.33 | 9.16 | 6.87 |\n| Magnitude | 4:8 | 15.91 | 7.32 | 5.89 | 16.83 | 13.87 | 7.62 |\n| SparseGPT | 4:8 | 8.46 | 7.01 | 4.91 | 8.45 | 7.44 | 6.18 |\n| Wanda | 4:8 | 8.60 | 7.00 | 4.77 | 8.57 | 7.41 | 5.97 |\n| GBLM-Pruner\u21132 | 4:8 | 8.50 | 6.97 | 4.75 | 8.50 | 7.38 | 5.94 |\n| GBLM-Pruner\u21131 | 4:8 | 8.63 | 6.90 | 4.72 | 8.48 | 7.26 | 5.89 |\n\n### 3.3 Zero-Shot Tasks\n\nIn addition to our perplexity evaluations, we further assess the performance of our method across six Zero-shot common-sense tasks included in the Eleuther AI lm-evaluation-harness benchmark (Gao et al., [2021])): BoolQ (Clark et al., [2019])), RTE (Wang et al., [2018])), HellaSwag (Zellers et al., [2019])), WinoGrande (Sakaguchi et al., [2019])), ARC-easy (Clark et al., [2018])), and OBQA (Mihaylov et al., [2018])).\nAs noted by earlier work (Dettmers & Zettlemoyer, [2022]); Frantar & Alistarh, [2023])), zero-shot evaluation on these tasks is known to be noisy but aggregate performance across multiple tasks enhances interpretability.\n\nTable 3: Zero-Shot harness evaluation on 50%percent\\\\% unstructured sparsity pruned models.\n\n| Models | Method | BoolQ | RTE | HellaSwag | WinoGrande | ARC-e | OBQA | Mean |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| LLaMA-1-7B | Dense | 75.11 | 66.43 | 76.21 | 69.85 | 72.81 | 44.40 | 67.47 |\n| Mag | 54.65 | 54.15 | 60.90 | 59.43 | 54.38 | 35.20 | 53.12 |\n| SparseGPT | 72.87 | 53.07 | 69.77 | 67.88 | 66.46 | 40.60 | 61.77 |\n| Wanda | 71.25 | 54.87 | 70.12 | 66.06 | 65.11 | 39.60 | 61.17 |\n| Ours | 73.43 | 59.93 | 70.29 | 67.40 | 65.99 | 41.40 | 63.07 |\n| LLaMA-1-13B | Dense | 77.98 | 70.40 | 79.07 | 72.77 | 74.75 | 44.80 | 69.96 |\n| Mag | 54.95 | 50.90 | 59.69 | 63.54 | 54.25 | 39.80 | 53.86 |\n| SparseGPT | 76.67 | 63.18 | 74.09 | 71.59 | 68.48 | 43.60 | 66.27 |\n| Wanda | 76.02 | 63.18 | 74.80 | 71.90 | 69.82 | 43.00 | 66.45 |\n| Ours | 76.61 | 63.18 | 74.90 | 71.67 | 70.37 | 43.20 | 66.65 |\n| LLaMA-1-30B | Dense | 82.72 | 66.79 | 82.62 | 75.77 | 78.91 | 48.20 | 72.50 |\n| Mag | 64.25 | 49.82 | 67.29 | 66.61 | 70.71 | 41.20 | 59.98 |\n| SparseGPT | 82.91 | 55.96 | 79.31 | 74.27 | 77.53 | 46.00 | 69.33 |\n| Wanda | 81.71 | 65.34 | 79.91 | 73.56 | 78.11 | 46.40 | 70.84 |\n| Ours | 82.69 | 67.15 | 80.23 | 73.95 | 76.98 | 46.00 | 71.17 |\n| LLaMA-2-13B | Dense | 80.55 | 65.34 | 79.38 | 72.22 | 77.44 | 45.20 | 70.02 |\n| Mag | 57.65 | 55.96 | 73.02 | 65.35 | 67.17 | 40.80 | 59.99 |\n| SparseGPT | 81.25 | 62.82 | 75.34 | 70.48 | 71.34 | 44.00 | 67.54 |\n| Wanda | 81.07 | 60.65 | 76.08 | 71.67 | 71.63 | 44.60 | 67.62 |\n| Ours | 80.89 | 60.65 | 76.03 | 71.82 | 72.26 | 44.80 | 67.74 |\n| LLaMA-2-70B | Dense | 83.70 | 67.87 | 83.80 | 77.98 | 80.98 | 48.80 | 73.86 |\n| Mag | 71.11 | 60.65 | 79.31 | 73.56 | 74.71 | 44.20 | 67.25 |\n| SparseGPT | 85.26 | 70.76 | 81.43 | 78.30 | 79.84 | 48.40 | 74.00 |\n| Wanda | 83.27 | 71.84 | 81.49 | 77.35 | 78.62 | 47.60 | 73.36 |\n| Ours | 83.73 | 71.48 | 81.64 | 77.11 | 78.28 | 47.40 | 73.27 |\n\nTable 4: Gradient-Weight based pruning metric.\n\n| Method | Sparsity | 7B | 13B |\n| --- | --- | --- | --- |\n| Magnitude | 0.5 | 16.03 | 6.83 |\n| SparseGPT | 0.5 | 7.00 | 6.03 |\n| Wanda | 0.5 | 6.92 | 5.97 |\n| \\|W\\|\u22c5\u2016G\u20161\u22c5WsubscriptnormG1\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{1} (Ours) | 0.5 | 7.17 | 6.15 |\n| \\|W\\|\u22c5\u2016G\u20162\u22c5WsubscriptnormG2\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{2} (Ours) | 0.5 | 7.09 | 5.96 |\n\nOur comprehensive results for these tasks are presented in Table [3]Table 3 \u2023 3.3 Zero-Shot Tasks \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"), where models are pruned to 50%percent\\\\% unstructured sparsity. Notably, while our proposed GBLM-Pruner outperforms both Wanda and SparseGPT in terms of perplexity, a consistent trend is not observed across all the individual tasks,\nwhich aligns with existing literature (Frantar & Alistarh, [2023]); Dettmers & Zettlemoyer, [2022])). However, the mean accuracy across all six tasks surpasses the performance of both SparseGPT and Wanda for most of the models. This observation aligns with our findings from the perplexity evaluation, suggesting the robustness and effectiveness of our approach.\n\n### 3.4 Ablation Study\n\nImportance of Gradient.\nIn order to emphasize the role of gradient information, we perform an ablation experiment wherein we only consider the Gradient-Weight term of the GBLM-Pruner pruning metric. The findings from this ablation are provided in Table [4]Table 4 \u2023 3.3 Zero-Shot Tasks \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\").\n\nOur experiments show a substantial enhancement over magnitude-based pruning when utilizing gradients solely with weights, evident in both LLaMA-2 7B and 13B models. Additionally, the performance of our metric closely aligns with that of Wanda and SparseGPT for LLaMA-2 13B model.\n\nPruning Metric.\nIn Section [2.3]A Theoretical Analysis \u2023 2 Approach \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"), we revisited the OBS framework by incorporating the first order gradient which yields \u03b4\u200b\ud835\udc6cm=(\ud835\udc98m\u200b\u2016xm\u20162)2+\ud835\udc98m\u200b(\u2212\ud835\udc88m)\ud835\udeffsubscript\ud835\udc6c\ud835\udc5asuperscriptsubscript\ud835\udc98\ud835\udc5asubscriptnormsubscript\ud835\udc65\ud835\udc5a22subscript\ud835\udc98\ud835\udc5asubscript\ud835\udc88\ud835\udc5a\\\\delta\\\\bm{E}\\_{m}=\\\\left(\\\\bm{w}\\_{m}\\\\left\\\\\\|{x}\\_{m}\\\\right\\\\\\|\\_{2}\\\\right)^{2}+\\\\bm{w}\\_{m}\\\\left(-\\\\bm{g}\\_{m}\\\\right) as the pruning metric. To start with, we experiment with different ways of estimating the gradient magnitude from the calibration samples. We evaluated three methods: gradient accumulation, \u21131subscript\u21131\\\\ell\\_{1} norm and \u21132subscript\u21132\\\\ell\\_{2} norm applied to the gradient across calibration samples. For this experiment, we only utilize the pruning metric based on gradient alone with weight for better interpretability. From our experiment, we observe that gradient accumulation yields the least favorable results as depicted in Table [5]Table 5 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). For deeper understanding, we compared the pruning pattern of gradient accumulation with \u21131subscript\u21131\\\\ell\\_{1} and \u21132subscript\u21132\\\\ell\\_{2} norm which shows that gradient accumulation gives a noisy estimate of the gradient magnitude while \u21131subscript\u21131\\\\ell\\_{1} and \u21132subscript\u21132\\\\ell\\_{2} norm reveals more structured patterns. A comparison between gradient accumulation and \u21131subscript\u21131\\\\ell\\_{1} norm-based aggregation is shown in Figure [4]Figure 4 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). Based on this, we adopt \u21131subscript\u21131\\\\ell\\_{1} and \u21132subscript\u21132\\\\ell\\_{2} norm-based gradient estimation for subsequent analysis.\n\nTable 5: Pruning metric on weight, gradient, activation.\n\n| Method | Sparsity | Perplexity |\n| --- | --- | --- |\n| \\|W\\|\u22c5\\|Ga\u200bc\u200bc\\|\u22c5WsubscriptG\ud835\udc4e\ud835\udc50\ud835\udc50\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\|\\\\textbf{G}\\_{acc}\\\\right\\| | 0.5 | 119.72 |\n| \\|W\\|\u22c5\u2016G\u20161\u22c5WsubscriptnormG1\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{1} | 0.5 | 7.17 |\n| \\|W\\|\u22c5\u2016G\u20162\u22c5WsubscriptnormG2\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{2} | 0.5 | 7.09 |\n| (\\|W\\|\u22c5\u2016X\u20162)2superscript\u22c5WsubscriptnormX22(\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2})^{2} \\+ \u03bb\u22c5\\|W\\|\u22c5\u2016G\u20161\u22c5\ud835\udf06WsubscriptnormG1\\\\lambda\\\\cdot\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{1} | 0.5 | 6.90 |\n| (\\|W\\|\u22c5\u2016X\u20162)2superscript\u22c5WsubscriptnormX22(\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2})^{2} \\+ \u03bb\u22c5\\|W\\|\u22c5\u2016G\u20162\u22c5\ud835\udf06WsubscriptnormG2\\\\lambda\\\\cdot\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{2} | 0.5 | 6.88 |\n| (\\|W\\|\u22c5\u2016X\u20162)2superscript\u22c5WsubscriptnormX22(\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2})^{2} \\- \u03bb\u22c5\\|W\\|\u22c5\u2016G\u20161\u22c5\ud835\udf06WsubscriptnormG1\\\\lambda\\\\cdot\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{1} | 0.5 | 9743.65 |\n| (\\|W\\|\u22c5\u2016X\u20162)2superscript\u22c5WsubscriptnormX22(\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2})^{2} \\- \u03bb\u22c5\\|W\\|\u22c5\u2016G\u20162\u22c5\ud835\udf06WsubscriptnormG2\\\\lambda\\\\cdot\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{2} | 0.5 | 9377.00 |\n| \\|W\\|\u22c5\u2016X\u20162\u22c5WsubscriptnormX2\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2} \\+ \u03bb\u22c5\\|W\\|\u22c5\u2016G\u20161\u22c5\ud835\udf06WsubscriptnormG1\\\\lambda\\\\cdot\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{1} | 0.5 | 6.86 |\n| \\|W\\|\u22c5\u2016X\u20162\u22c5WsubscriptnormX2\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2} \\+ \u03bb\u22c5\\|W\\|\u22c5\u2016G\u20162\u22c5\ud835\udf06WsubscriptnormG2\\\\lambda\\\\cdot\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{2} | 0.5 | 6.89 |\n\nSubsequently, based on our theoretical pruning metric \u03b4\u200b\ud835\udc6cm\ud835\udeffsubscript\ud835\udc6c\ud835\udc5a\\\\delta\\\\bm{E}\\_{m}, we experiment with two different ways of coupling the activations and gradients as shown in Table [5]Table 5 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). We observe that in the case of (\\|W\\|\u22c5\u2016X\u20162)2\u2212\\|W\\|\u22c5\u2016G\u2016psuperscript\u22c5WsubscriptnormX22\u22c5WsubscriptnormG\ud835\udc5d(\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2})^{2}-\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{p} the pruning metric is completely disrupted. While for (\\|W\\|\u22c5\u2016X\u20162)2+\\|W\\|\u22c5\u2016G\u2016psuperscript\u22c5WsubscriptnormX22\u22c5WsubscriptnormG\ud835\udc5d(\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2})^{2}+\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{p} gradient and activations complements each other and brings out the best performance. But, upon closer examination, we observe that the square of the first activation term significantly outweighs the contribution of the second term involving gradients. Consequently, we remove the square factor from the first term and add a scaling factor denoted as \u03bb\ud835\udf06\\\\lambda to the second gradient term, resulting in the formulation of our final pruning metric as \\|W\\|\u22c5\u2016X\u20162\u22c5WsubscriptnormX2\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{X}\\\\right\\\\\\|\\_{2} \\+ \u03bb\u22c5\\|W\\|\u22c5\u2016G\u2016p\u22c5\ud835\udf06WsubscriptnormG\ud835\udc5d\\\\lambda\\\\cdot\\\\left\\|\\\\textbf{W}\\\\right\\|\\\\cdot\\\\left\\\\\\|\\\\textbf{G}\\\\right\\\\\\|\\_{p}. This pruning metric with \u21131subscript\u21131\\\\ell\\_{1} norm-based gradient aggregation gives the best result for unstructured pruning across all models. We also conduct experiments to calibrate the scaling factor \u03bb\ud835\udf06\\\\lambda as shown in Table [6]Table 6 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). We vary the scaling factor and examine how the LLaMA-2-7B pruned model perplexity changes. For a scaling factor is equal to 100, we get the best perplexity.\n\nTable 6: Ablation of scaling factor.\n\n| Scaling Factor | Perplexity |\n| --- | --- |\n| 0.001 | 6.920 |\n| 0.01 | 6.919 |\n| 0.1 | 6.921 |\n| 1 | 6.912 |\n| 10 | 6.890 |\n| 100 | 6.858 |\n| 1000 | 6.902 |\n| 10000 | 6.926 |\n| 100000 | 6.952 |\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 2: Sparsity variation results for a large and a small model where we compare the performance of our method against other baseline methods.\n\nSparsity Variation. The objective of this ablation is to assess the robustness of our method across varying sparsity. For this, we compare the perplexity of the unstructured pruned model obtained by GBLM-Pruner to that of Wanda, SparseGPT, and magnitude pruning. We consider two distinct model sizes: a smaller LLaMA-2 13B model and a larger LLaMA-1 30B model, each is subjected to different degrees of sparsity. The results are shown in Figure [2]Figure 2 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). From the figure, it is evident that GBLM-Pruner exhibits a similar trend to SparseGPT and Wanda, showing a decline in performance as sparsity increases. However, GBLM-Pruner consistently outperforms all other baseline methods across various levels of sparsity for both models.\n\n![Refer to caption]Figure 3: Robustness to calibration samples.\n\nDependence on Calibration Sample. GBLM-Pruner uses a set of calibration samples to calculate gradients and activations for the pruning metric. To understand the robustness of the pruned model to the calibration set, we conduct two ablations:\n\n(1) Robustness to calibration set: For this ablation, we randomly sampled 5 different calibration sample sets with 128 samples each and pruned the LLaMA-2 7B model to 0.5 sparsity using GBLM-Pruner. The resultant pruned models have perplexities: 6.86, 6.87, 6.89, 6.86, and 6.87 respectively. The average perplexity is 6.87 which is close to our reported perplexity in Table [2]Table 2 \u2023 3.2 Perplexity Evaluation \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\").\n\n(2) Number of samples in the calibration set: In this experiment, we want to assess the influence of the calibration set size on the performance of GBLM-Pruner. For this, we prune the LLaMA-2 7B model using various calibration sets with the number of samples ranging from 1 to 512. The results are reported in Figure [3]Figure 3 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). From the figure, we can observe that in contrast to SparseGPT, our method exhibits a relatively lower sensitivity to variations in the number of calibration samples.\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 4: Illustration of learned pruning pattern.\n\n### 3.5 Visualization of Pruned Pattern\n\nThe visualization of learned pruning pattern is illustrated in Figure [4]Figure 4 \u2023 3.4 Ablation Study \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). To elaborate, on the left is the mask that is acquired by eliminating 50% of gradient from the summation-aggregated gradient tensor of the first layer\u2019s key projection, on the right is the mask that is derived by discarding 50% of the gradient from the \u21131subscript\u21131\\\\ell\\_{1}-norm-aggregated gradient tensor of the same layer\u2019s key projection. Within each subfigure, the x-axis represents the input dimension and the y-axis symbolizes the output dimension. The mask derived from the summation-accumulated gradient tensor tends to be noisy, in contrast, the one obtained through the \u21131subscript\u21131\\\\ell\\_{1} norm accumulated gradient tensor appears to be more refined and distinct. After the integration of gradients, the method of unstructured pruning tends to unveil certain structural patterns following the pruning process. This reflects the inherent geometric interdependence found in the parameter structure of the LLMs, which is highly aligned with the structure of gradients.\n\nTable 7: ViT-B model Pruning.\n\n| Sparsity | Wanda | Magnitude | Ours \u21131subscript\u21131\\\\ell\\_{1} | Ours \u21132subscript\u21132\\\\ell\\_{2} |\n| --- | --- | --- | --- | --- |\n| 0 | 75.40 | 75.40 | 75.40 | 75.40 |\n| 0.5 | 64.54 | 59.48 | 64.64 | 64.86 |\n| 0.6 | 43.65 | 29.98 | 44.15 | 44.23 |\n| 0.7 | 7.92 | 1.88 | 8.89 | 8.02 |\n| 0.8 | 0.20 | 0.18 | 0.32 | 0.24 |\n\n### 3.6 Vision Transformers\n\nTo assess the generalizability of our method across models with different input modalities, we conduct experiments on the ViT-B model. We compare the performance of the pruned model obtained using GBLM-Pruner with those obtained through magnitude pruning and the Wanda method. We use 4,096 random samples from ImageNet-1k training set as our calibration data, and subsequently, we evaluate the pruned models on the standard ImageNet-1k classification task. The results of these evaluations are presented in Table [7]Table 7 \u2023 3.5 Visualization of Pruned Pattern \u2023 3 Experiments \u2023 Beyond Size: How Gradients Shape Pruning Decisions in Large Language Models\"). From the table, it is evident that our model outperforms both the Wanda method and magnitude pruning, particularly when dealing with higher levels of sparsity.\n\n## 4 Related Work\nLarge Language Models (LLMs) based on transformer architecture (Vaswani et al., [2017])) have ushered in a transformative era in the realm of natural language processing, achieving outstanding success. Their consistent and remarkable performance spans a wide array of tasks (Brown et al., [2020b]); Chung et al., [2022]); Touvron et al., [2023a]); [b]); Rozi\u00e8re et al., [2023]); OpenAI, [2023]); Anil et al., [2023])). For a long time, pruning has been identified as a powerful technique for reducing the size or complexity of a model by removing unnecessary or redundant components (LeCun et al., [1989]); Hassibi et al., [1993a])).\nPruning can be divided into structured and unstructured pruning. Structured pruning targets at removing a set of weights from a network at once such as channels or layers to reduce the model size and complexity while maintaining the network structure intact. In the realm of pruning LLMs for sparsity, several studies (Frantar & Alistarh, [2022]); [2023]); Sun et al., [2023])) have been undertaken in this area. Our work also provides a unique angle from gradient along this direction.\n\n## 5 Conclusion\nWe have presented a gradient-based pruning approach GBLM-Pruner for large language models (LLMs). Our approach performs in a training-free manner and applies gradient-based statistical magnitude to discern and selectively prune the model\u2019s parameters, maintaining unstructured sparsity throughout the model, thus enabling substantial reductions in model size while preserving the model\u2019s predictive accuracy. The proposed approach has surpassed all previous LLM pruning methods in terms of perplexity, zero-shot performance and interpretability, marking a pivotal advancement in the field. We also provided theoretical analyses on how gradients help identify the importance of weights in LLMs. The superior accuracy achieved by this approach not only highlights gradients\u2019 effectiveness that is supplemental to weights and activations but also establishes it as a benchmark in the realm of model pruning methods for LLMs. We hope the proposed approach could potentially facilitate the development of more efficient, scalable, and accessible language models, paving the way for new opportunities and applications across various domains leveraging gradients. The notable performance of this approach is indicative of the significant strides being made in optimizing LLMs and highlights the possibilities that lie ahead in the journey towards more sustainable and efficient language processing tasks.\n</Content></Candidate>\n\n</References>\nRemember to output the index of the selected reference enclosed within <answer> and </answer>.",
  "reference_id": "bib.bib18",
  "label_id": 0,
  "mask_all": false,
  "citation": {
    "section_name": "1 Introduction",
    "citation_id": "bib.bib18",
    "citation_text": "[18]",
    "citation_type": "others",
    "start_pos": 1588,
    "end_pos": 1592,
    "nearest_citations": [
      "bib.bib15",
      "bib.bib9"
    ]
  },
  "candidates": [
    {
      "id": "bib.bib18",
      "title": "Slicegpt: Compress large language models by deleting rows and columns.",
      "token_count": 16679
    },
    {
      "id": "bib.bib9",
      "title": "Post-training quantization for vision transformer.",
      "token_count": 13204
    },
    {
      "id": "bib.bib5",
      "title": "Knowledge distillation: A survey.",
      "token_count": 31711
    },
    {
      "id": "bib.bib15",
      "title": "Beyond size: How gradients shape pruning decisions in large language models.",
      "token_count": 16727
    }
  ],
  "additional_fields": {
    "paper_field": "full",
    "mask_all": false,
    "candidate_fields": [
      "title",
      "abstract",
      "sections"
    ],
    "sample": "random",
    "max_selected_references_per_paper": 5
  },
  "id": 44
}