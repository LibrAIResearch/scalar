{
  "paper_id": "http://arxiv.org/abs/2411.12633v1",
  "question": "You are given a paper with a placeholder \"**[MASKED_CITATION]**\" in its content. Your task is to select the most appropriate reference from the provided reference list to replace the mask.\n\n- The paper content is enclosed within <Paper> and </Paper>.\n- The reference list is enclosed within <References> and </References>, with each reference wrapped in <Candidate> and </Candidate>.\n- After selecting the best-suited reference, output the index of that reference in the following format:\n<answer>index</answer>.\n\n<Paper>\n\nInstant Policy: In-Context Imitation Learning via Graph Diffusion\n\nAbstract: Following the impressive capabilities of in-context learning with large\ntransformers, In-Context Imitation Learning (ICIL) is a promising opportunity\nfor robotics. We introduce Instant Policy, which learns new tasks instantly\n(without further training) from just one or two demonstrations, achieving ICIL\nthrough two key components. First, we introduce inductive biases through a\ngraph representation and model ICIL as a graph generation problem with a\nlearned diffusion process, enabling structured reasoning over demonstrations,\nobservations, and actions. Second, we show that such a model can be trained\nusing pseudo-demonstrations - arbitrary trajectories generated in simulation -\nas a virtually infinite pool of training data. Simulated and real experiments\nshow that Instant Policy enables rapid learning of various everyday robot\ntasks. We also show how it can serve as a foundation for cross-embodiment and\nzero-shot transfer to language-defined tasks. Code and videos are available at\nhttps://www.robot-learning.uk/instant-policy.\n\n\n## 1 Introduction\nRobot policies acquired through Imitation Learning (IL) have recently shown impressive capabilities, but today\u2019s Behavioural Cloning (BC) methods still require hundreds or thousands of demonstrations per task ( [Zhao et al.,]). Meanwhile, language and vision communities have shown that when large transformers are trained on sufficiently large and diverse datasets, we see the emergence of In-Context Learning (ICL) (Brown, [2020]). Here, trained models can use test-time examples of a novel task (the context), and instantly generalise to new instances of this task without updating the model\u2019s weights. This now offers a promising opportunity of In-Context Imitation Learning (ICIL) in robotics. To this end, we present Instant Policy, which enables new tasks to be learned instantly: after providing just one or two demonstrations, new configurations of that task can be performed immediately, without any further training.\nThis is far more time-efficient and convenient than BC methods, which require numerous demonstrations and hours of network training for each new task.\n\nICL in language and vision benefits from huge and readily available datasets, which do not exist for robotics. As such, we are faced with two primary challenges. 1) Given the limited available data, we need appropriate inductive biases in observation and action representations for efficient learning in 3D space; 2) Given the inefficiency and cost of manually collecting robotics data, we need a means to easily collect training data in a scalable way. In this work, we propose solutions to both these.\n\nWe address the first challenge by introducing a novel graph-based representation that integrates demonstrations, current point cloud observations, and the robot\u2019s actions within a unified graph space. We then cast ICIL as a diffusion-based graph generation problem, enabling demonstrations and observations to be interpreted effectively in order to predict the robot\u2019s actions. To address the second challenge, we observe that in traditional BC, the model\u2019s weights directly encode policies for a specific set of tasks, whereas in ICIL, the model\u2019s weights should encode a more general, task-agnostic ability to interpret and act upon the given context. Due to this, we found that we were able to train the model using\npseudo-demonstrations \u2013 sets of procedurally generated robot trajectories, but where each set of demonstrations for a task is semantically consistent.\nThis approach allows us to generate virtually infinite training data by scaling up the simulated data.\n\nOur experiments, with both simulated and real-world tasks, show that Instant Policy can learn various everyday tasks, whilst achieving higher task success rates than state-of-the-art baselines trained on the same data. As an emergent ability, we also observed generalisation capabilities to object geometries unseen from the test-time demonstrations.\nImportantly, we found that performance improves as more data is generated and used for simultaneous training,\noffering scalable opportunities with abundant simulated data. In our further experiments on downstream applications, Instant Policy also achieves cross-embodiment transfer from human-hand demonstrations to robot policies, and zero-shot transfer to language-defined tasks without needing large language-annotated datasets.\n\nOur contributions are as follows:\n1) We cast In-Context Imitation Learning as a diffusion-based graph generation problem;\n2) We show that this model can be trained using procedurally generated pseudo-demonstrations;\n3) We evaluate in simulation and the real world across various everyday tasks, showing strong performance, encouraging scaling trends, and promising downstream uses.\n\n## 2 Related Work\nIn-Context Learning (ICL). ICL is an emerging paradigm in machine learning which allows models to adapt to new tasks using a small number of examples, without requiring explicit weight updates or retraining. Initially popularised in natural language processing with models like GPT-3 (Brown, [2020]), ICL has been applied to enable robots to rapidly adapt to new tasks by using foundation models (Di Palo & Johns, [2024]), finding consistent object alignments (Vosylius & Johns, [2023a])), identifying invariant regions of the state space (Zhang & Boularias, [2024]), and directly training policies aimed at task generalisation (Duan et al., [2017]; Fu et al., [2024]) or cross-embodiment transfer (Jang et al., [2022]; Jain et al., [2024]; Vogt et al., [2017]).\nDespite these advancements, challenges remain in achieving generalisation to tasks unseen during training and novel object geometries.\nInstant Policy addresses this by leveraging simulated pseudo-demonstrations to generate abundant and diverse data, while its structured graph representation ensures that this data is utilised efficiently.\n\nDiffusion Models. Diffusion models (Ho et al., [2020]) have garnered significant attention across various domains, due to their ability to iteratively refine randomly sampled noise through a learned denoising process, ultimately generating high-quality samples from the underlying distribution. Initially popularised for image generation (Ramesh et al., [2021]), diffusion models have recently been applied to robotics. They have been utilised for creating image augmentations (Yu et al., [2023]; Mandlekar et al., [2023]) to help robots adapt to diverse environments, generating \u2018imagined\u2019 goals (Kapelyukh et al., [2023]) or subgoals (Black et al., [2023]) for guiding robotic policies, and learning precise control policies (Chi et al., [2023]; Vosylius et al., [2024]). In contrast, our work proposes a novel use of diffusion models for graph generation, enabling structured learning of complex distributions.\n\nGraph Neural Networks (GNNs). Graph Neural Networks (GNNs) allow learning on structured data using message-passing or attention-based strategies. These capabilities have been applied across a wide range of domains, including molecular chemistry Jha et al. ( [2022]), social network analysis (Hu et al., [2021]), and recommendation systems (Shi et al., [2018]).\nIn robotics, GNNs have been employed for obtaining reinforcement learning (RL) policies (Wang et al., [2018]; Sferrazza et al., [2024]), managing object rearrangement tasks (Kapelyukh & Johns, [2022]), and learning affordance models for skill transfer Vosylius & Johns ( [2023b])).\nIn our work, we build on these foundations by studying structured graph representations for ICIL, enabling learning of the relationships between demonstrations, observations, and actions.\n\n## 3 Instant Policy\n### 3.1 Overview & Problem Formulation\n\nOverview.\nWe address the problem of In-Context Imitation Learning, where the goal is for the robot to complete a novel task immediately after the provided demonstrations.\nAt test time, one or a few demos of a novel task are provided to define the context, which our trained Instant Policy network interprets together with the current point cloud observation, and infers robot actions suitable for closed-loop reactive control (see Figure [1]Figure 1 \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")). This enables instantaneous policy acquisition, without extensive real-world data collection or training. We achieve this through a structured graph representation (Section [3.2]Graph Representation \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")), a learned diffusion process (Section [3.3]Learning Robot Action via Graph Diffusion \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")), and an abundant source of diverse simulated pseudo-demonstrations (Section [3.4]An Infinite Pool of Data \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")).\n\nProblem Formulation. We express robot actions \ud835\udc82\ud835\udc82{\\\\bm{a}} as end-effector displacements \ud835\udc7bE\u200bA\u2208\ud835\udd4a\u200b\ud835\udd3c\u200b(3)subscript\ud835\udc7b\ud835\udc38\ud835\udc34\ud835\udd4a\ud835\udd3c3{\\\\bm{T}}\\_{EA}\\\\in\\\\mathbb{SE}(3) (which, when time-scaled, correspond to velocities), along with binary open-close commands for the gripper, ag\u2208{0,1}subscript\ud835\udc4e\ud835\udc5401a\\_{g}\\\\in\\\\{0,1\\\\}. Such actions move the robot\u2019s gripper from frame E\ud835\udc38E to a new frame A\ud835\udc34A and change its binary state accordingly.\nOur observations, otsubscript\ud835\udc5c\ud835\udc61o\\_{t} at timestep t\ud835\udc61t, consist of segmented point clouds Ptsuperscript\ud835\udc43\ud835\udc61P^{t}, the current end-effector pose in the world frame W\ud835\udc4aW, \ud835\udc7bW\u200bEt\u2208\ud835\udd4a\u200b\ud835\udd3c\u200b(3)subscriptsuperscript\ud835\udc7b\ud835\udc61\ud835\udc4a\ud835\udc38\ud835\udd4a\ud835\udd3c3{\\\\bm{T}}^{t}\\_{WE}\\\\in\\\\mathbb{SE}(3), and a binary gripper state sgt\u2208{0,1}subscriptsuperscript\ud835\udc60\ud835\udc61\ud835\udc5401s^{t}\\_{g}\\\\in\\\\{0,1\\\\}. Formally, our goal is to find a probability distribution, p\u200b(\ud835\udc82t:t+T\u2223ot,{(oi\u200bj,\ud835\udc82i\u200bj)i=1L}j=1N)\ud835\udc5dconditionalsuperscript\ud835\udc82:\ud835\udc61\ud835\udc61\ud835\udc47subscript\ud835\udc5c\ud835\udc61superscriptsubscriptsuperscriptsubscriptsubscript\ud835\udc5c\ud835\udc56\ud835\udc57subscript\ud835\udc82\ud835\udc56\ud835\udc57\ud835\udc561\ud835\udc3f\ud835\udc571\ud835\udc41p({{\\\\bm{a}}}^{t:t+T}\\\\mid o\\_{t},\\\\{(o\\_{ij},{\\\\bm{a}}\\_{ij})\\_{i=1}^{L}\\\\}\\_{j=1}^{N}), from which robot actions can be sampled and executed. Here, T\ud835\udc47T denotes the action prediction horizon, while L\ud835\udc3fL and N\ud835\udc41N represent the demonstration length and the number of demonstrations, respectively. For conciseness, from now onwards we refer to the demonstrations, which define the task at test time and are not used during training, as context C\ud835\udc36C, and the action predictions as \ud835\udc82\ud835\udc82{\\\\bm{a}}. Analytically defining such a distribution is infeasible, therefore we aim to learn it from simulated pseudo-demonstrations using a novel graph-based diffusion process.\n\n### 3.2 Graph Representation\n\nTo learn the described conditional probability of actions, we first need to choose a suitable representation that would capture the key elements of the problem and introduce appropriate inductive biases. We propose a heterogeneous graph that jointly expresses context, current observation, and future actions, capturing complex relationships between the robot and the environment and ensuring that the relevant information is aggregated and propagated in a meaningful manner.\nThis graph is constructed using segmented point cloud observations, as shown in Figure [2]Figure 2 \u2023 3.2 Graph Representation \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\").\n\n![Refer to caption]Figure 2: (Left) A local graph, \ud835\udca2lsubscript\ud835\udca2\ud835\udc59{\\\\mathcal{G}}\\_{l}, representing the robot\u2019s state (blue nodes) and local geometries of the objects (green nodes). (Right) A graph representing 2 demos (3 waypoints each), the current state, and 2 future actions. Edge colours represent different edge types in a heterogeneous graph.\n\nLocal Representation. The core building block of our representation is the observation at time step t\ud835\udc61t, which we express as a local graph \ud835\udca2lt\u200b(Pt,\ud835\udc7bW\u200bEt,sg)subscriptsuperscript\ud835\udca2\ud835\udc61\ud835\udc59superscript\ud835\udc43\ud835\udc61subscriptsuperscript\ud835\udc7b\ud835\udc61\ud835\udc4a\ud835\udc38subscript\ud835\udc60\ud835\udc54{\\\\mathcal{G}}^{t}\\_{l}(P^{t},{\\\\bm{T}}^{t}\\_{WE},s\\_{g}) (Figure [2]Figure 2 \u2023 3.2 Graph Representation \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\"), left).\nFirst, we sample M\ud835\udc40M points from a dense point cloud Ptsuperscript\ud835\udc43\ud835\udc61P^{t} using the Furthest Point Sampling Algorithm and encode local geometry around them with Set Abstraction (SA) layers (Qi et al., [2017]), obtaining feature vectors \u2131\u2131\\\\mathcal{F} and positions p\ud835\udc5dp as {\u2131i,pi}i=1M=\u03d5\u200b(Pt)superscriptsubscriptsuperscript\u2131\ud835\udc56superscript\ud835\udc5d\ud835\udc56\ud835\udc561\ud835\udc40italic-\u03d5superscript\ud835\udc43\ud835\udc61\\\\{\\\\mathcal{F}^{i},p^{i}\\\\}\\_{i=1}^{M}=\\\\phi(P^{t}). The separately pre-trained \u03d5italic-\u03d5\\\\phi, an implicit occupancy network (Mescheder et al., [2019]), ensures these features describe local geometries (details in Appendix [A]Appendix A Geometry Encoder \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")).\nWe then represent the gripper\u2019s state in the same format, {\u2131gi,pgi}i=16superscriptsubscriptsuperscriptsubscript\u2131\ud835\udc54\ud835\udc56superscriptsubscript\ud835\udc5d\ud835\udc54\ud835\udc56\ud835\udc5616\\\\{\\\\mathcal{F}\\_{g}^{i},p\\_{g}^{i}\\\\}\\_{i=1}^{6}, by rigidly transforming key points pk\u200bpsubscript\ud835\udc5d\ud835\udc58\ud835\udc5dp\\_{kp} on the end-effector, pg=\ud835\udc7bW\u200bE\u00d7pk\u200bpsubscript\ud835\udc5d\ud835\udc54subscript\ud835\udc7b\ud835\udc4a\ud835\udc38subscript\ud835\udc5d\ud835\udc58\ud835\udc5dp\\_{g}={\\\\bm{T}}\\_{WE}\\\\times p\\_{kp} and assigning them embeddings that encode node distinction and gripper state information \u2131gi=\\[fgi,\u03d5g\u200b(sg)\\]Tsubscriptsuperscript\u2131\ud835\udc56\ud835\udc54superscriptsubscriptsuperscript\ud835\udc53\ud835\udc56\ud835\udc54subscriptitalic-\u03d5\ud835\udc54subscript\ud835\udc60\ud835\udc54\ud835\udc47\\\\mathcal{F}^{i}\\_{g}=\\[f^{i}\\_{g},\\\\phi\\_{g}(s\\_{g})\\]^{T}.\nFinally, we link scene and gripper nodes with directional edges and assign edge attributes e\ud835\udc52e representing relative positions in Cartesian space. To increase the precision and capture high-frequency changes in the positions of the described nodes, we represent edges as ei\u200bj=(s\u200bi\u200bn\u200b(20\u200b\u03c0\u200b(pj\u2212pi)),c\u200bo\u200bs\u200b(20\u200b\u03c0\u200b(pj\u2212pi)),\u2026,s\u200bi\u200bn\u200b(2D\u22121\u200b\u03c0\u200b(pj\u2212pi)),c\u200bo\u200bs\u200b(2D\u22121\u200b\u03c0\u200b(pj\u2212pi)))subscript\ud835\udc52\ud835\udc56\ud835\udc57\ud835\udc60\ud835\udc56\ud835\udc5bsuperscript20\ud835\udf0bsubscript\ud835\udc5d\ud835\udc57subscript\ud835\udc5d\ud835\udc56\ud835\udc50\ud835\udc5c\ud835\udc60superscript20\ud835\udf0bsubscript\ud835\udc5d\ud835\udc57subscript\ud835\udc5d\ud835\udc56\u2026\ud835\udc60\ud835\udc56\ud835\udc5bsuperscript2\ud835\udc371\ud835\udf0bsubscript\ud835\udc5d\ud835\udc57subscript\ud835\udc5d\ud835\udc56\ud835\udc50\ud835\udc5c\ud835\udc60superscript2\ud835\udc371\ud835\udf0bsubscript\ud835\udc5d\ud835\udc57subscript\ud835\udc5d\ud835\udc56e\\_{ij}=(sin(2^{0}\\\\pi(p\\_{j}-p\\_{i})),cos(2^{0}\\\\pi(p\\_{j}-p\\_{i})),...,sin(2^{D-1}\\\\pi(p\\_{j}-p\\_{i})),cos(2^{D-1}\\\\pi(p\\_{j}-p\\_{i}))), similar to Zhou et al. ( [2023]).\n\nContext Representation. While \ud835\udca2ltsubscriptsuperscript\ud835\udca2\ud835\udc61\ud835\udc59{\\\\mathcal{G}}^{t}\\_{l} captures the environment state, a sequence of such graphs, interleaved with actions, defines a trajectory within context C\ud835\udc36C (Figure [2]Figure 2 \u2023 3.2 Graph Representation \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\"), middle). We perform this interleaving by linking gripper nodes across time to represent their relative movement (red edges) and connecting all demonstration gripper nodes to the current ones to propagate relevant information (grey edges). This enables the graph to efficiently handle any number of demos, regardless of length, whilst ensuring that the number of edges grows linearly. The result, \ud835\udca2c\u200b(\ud835\udca2lt,{\ud835\udca2l1:L}1N)subscript\ud835\udca2\ud835\udc50subscriptsuperscript\ud835\udca2\ud835\udc61\ud835\udc59superscriptsubscriptsubscriptsuperscript\ud835\udca2:1\ud835\udc3f\ud835\udc591\ud835\udc41{\\\\mathcal{G}}\\_{c}({\\\\mathcal{G}}^{t}\\_{l},\\\\{{\\\\mathcal{G}}^{1:L}\\_{l}\\\\}\\_{1}^{N}), enables a structured flow of information between the context and the current observation.\n\nAction Representation. To express future actions \ud835\udc82=(\ud835\udc7bE\u200bA,ag)\ud835\udc82subscript\ud835\udc7b\ud835\udc38\ud835\udc34subscript\ud835\udc4e\ud835\udc54{\\\\bm{a}}=({\\\\bm{T}}\\_{EA},a\\_{g}) within the graph representation, we construct local graphs as if the actions were executed and the gripper moved: \ud835\udca2la\u200b(Pt,\ud835\udc7bW\u200bEt\u00d7\ud835\udc7bE\u200bA,ag)subscriptsuperscript\ud835\udca2\ud835\udc4e\ud835\udc59superscript\ud835\udc43\ud835\udc61subscriptsuperscript\ud835\udc7b\ud835\udc61\ud835\udc4a\ud835\udc38subscript\ud835\udc7b\ud835\udc38\ud835\udc34subscript\ud835\udc4e\ud835\udc54{\\\\mathcal{G}}^{a}\\_{l}(P^{t},{\\\\bm{T}}^{t}\\_{WE}\\\\times{\\\\bm{T}}\\_{EA},a\\_{g}).\nThis allows \u2018imagining\u2019 spatial implications of actions.\nThus, the actions are fully described within the positions and the features of the nodes of these local graphs.\nTo represent actions as relative movements from the current gripper pose, we then add edges between current and future gripper nodes with position-based embeddings that represent relative movement between subsequent timesteps. These edges propagate the information from the current observation (and indirectly the context) to the nodes representing the actions.\nThe final graph, \ud835\udca2\u200b(\ud835\udca2la\u200b(\ud835\udc82),\ud835\udca2c\u200b(\ud835\udca2lt,{\ud835\udca2l1:L}1N))\ud835\udca2subscriptsuperscript\ud835\udca2\ud835\udc4e\ud835\udc59\ud835\udc82subscript\ud835\udca2\ud835\udc50subscriptsuperscript\ud835\udca2\ud835\udc61\ud835\udc59superscriptsubscriptsubscriptsuperscript\ud835\udca2:1\ud835\udc3f\ud835\udc591\ud835\udc41{\\\\mathcal{G}}({\\\\mathcal{G}}^{a}\\_{l}({\\\\bm{a}}),{\\\\mathcal{G}}\\_{c}({\\\\mathcal{G}}^{t}\\_{l},\\\\{{\\\\mathcal{G}}^{1:L}\\_{l}\\\\}\\_{1}^{N})), aggregates relevant information from the context and the current observation and propagates it to nodes representing the actions, enabling effective reasoning about the robot actions by ensuring the observations and actions are expressed in the same graph space.\n\n### 3.3 Learning Robot Action via Graph Diffusion\n\nTo utilise our graph representation effectively, we frame ICIL as a graph generation problem and learn a distribution over previously described graphs p\u03b8\u200b(\ud835\udca2)subscript\ud835\udc5d\ud835\udf03\ud835\udca2p\\_{\\\\theta}({\\\\mathcal{G}}) using a diffusion model, depicted in Figure [3]Figure 3 \u2023 3.3 Learning Robot Action via Graph Diffusion \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\").\nThis approach involves forward and backward Markov-chain processes, where the graph is altered and reconstructed in each phase.\nAt test time, the model iteratively updates only the parts of the graph representing robot actions, implicitly modelling the desired conditional action probability.\n\n![Refer to caption]Figure 3: (Left) High-level structure of the network used to train graph-based diffusion model. (Right) Position of gripper action nodes during the denoising process for one of the predicted actions.\n\nTraining. Training our diffusion model includes, firstly, the forward process, where noise is iteratively added to the samples extracted from the underlying data distribution q\u200b(\ud835\udca2)\ud835\udc5e\ud835\udca2q({\\\\mathcal{G}}). In this phase, we construct a noise-altered graph by adding noise to the robot actions according to Ho et al. ( [2020]):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | q\u200b(\ud835\udca2k\u2223\ud835\udca2k\u22121)=\ud835\udca2\u200b(\ud835\udca2la\u200b(\ud835\udca9\u200b(\ud835\udc82k;1\u2212\u03b2k\u200b\ud835\udc82k\u22121,\u03b2k\u200b\ud835\udc08),\ud835\udca2c)),k=1,\u2026,Kformulae-sequence\ud835\udc5econditionalsuperscript\ud835\udca2\ud835\udc58superscript\ud835\udca2\ud835\udc581\ud835\udca2subscriptsuperscript\ud835\udca2\ud835\udc4e\ud835\udc59\ud835\udca9superscript\ud835\udc82\ud835\udc581subscript\ud835\udefd\ud835\udc58superscript\ud835\udc82\ud835\udc581subscript\ud835\udefd\ud835\udc58\ud835\udc08subscript\ud835\udca2\ud835\udc50\ud835\udc581\u2026\ud835\udc3eq({\\\\mathcal{G}}^{k}\\\\mid{\\\\mathcal{G}}^{k-1})={\\\\mathcal{G}}({\\\\mathcal{G}}^{a}\\_{l}(\\\\mathcal{N}({\\\\bm{a}}^{k};\\\\sqrt{1-\\\\beta\\_{k}}{\\\\bm{a}}^{k-1},\\\\beta\\_{k}\\\\mathbf{I}),{\\\\mathcal{G}}\\_{c})),\\\\quad k=1,\\\\ldots,K |  | (1) |\n\nHere, \ud835\udca9\ud835\udca9\\\\mathcal{N} represents the normal distribution, \u03b2ksubscript\ud835\udefd\ud835\udc58\\\\beta\\_{k} the variance schedule, and K\ud835\udc3eK the total number of diffusion steps. This process gradually transitions the ground truth graph representation into a graph constructed using actions sampled from a Gaussian distribution.\n\nInversely, in the reverse diffusion process, the aim is to reconstruct the original data sample, in our case the graph, from its noise-altered state, utilising a parameterised model p\u03b8\u200b(\ud835\udca2k\u22121\u2223\ud835\udca2k)subscript\ud835\udc5d\ud835\udf03conditionalsuperscript\ud835\udca2\ud835\udc581superscript\ud835\udca2\ud835\udc58p\\_{\\\\theta}({\\\\mathcal{G}}^{k-1}\\\\mid{\\\\mathcal{G}}^{k}). Intuitively, such a model needs to learn how the gripper nodes representing the robot actions should be adjusted, such that the whole graph moves closer to the true data distribution q\u200b(\ud835\udca2)\ud835\udc5e\ud835\udca2q({\\\\mathcal{G}}). Formally, the parameterised model learns a denoising process of actions using our graph representation \ud835\udca2\u200b(\ud835\udc82)\ud835\udca2\ud835\udc82{\\\\mathcal{G}}({\\\\bm{a}}) as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udca2k\u22121=\ud835\udca2\u200b(\ud835\udca2la\u200b(\u03b1\u200b(\ud835\udc82k\u2212\u03b3\u200b\u03b5\u03b8\u200b(\ud835\udca2k,k))+\ud835\udca9\u200b(0,\u03c32\u200b\ud835\udc70)),\ud835\udca2c)superscript\ud835\udca2\ud835\udc581\ud835\udca2subscriptsuperscript\ud835\udca2\ud835\udc4e\ud835\udc59\ud835\udefcsuperscript\ud835\udc82\ud835\udc58\ud835\udefesubscript\ud835\udf00\ud835\udf03superscript\ud835\udca2\ud835\udc58\ud835\udc58\ud835\udca90superscript\ud835\udf0e2\ud835\udc70subscript\ud835\udca2\ud835\udc50{\\\\mathcal{G}}^{k-1}={\\\\mathcal{G}}({\\\\mathcal{G}}^{a}\\_{l}(\\\\alpha({\\\\bm{a}}^{k}-\\\\gamma\\\\varepsilon\\_{\\\\theta}({\\\\mathcal{G}}^{k},k))+\\\\mathcal{N}(0,\\\\sigma^{2}{\\\\bm{I}})),{\\\\mathcal{G}}\\_{c}) |  | (2) |\n\nHere, \u03b5\u03b8(.)\\\\varepsilon\\_{\\\\theta}(.) can be interpreted as effectively predicting the gradient field, based on which a single noisy gradient descent step is taken (Chi et al., [2023]).\nAs we represent actions as collections of nodes with their associated positions p\ud835\udc5dp and features, that depend on the binary gripper actions agsubscript\ud835\udc4e\ud835\udc54a\\_{g}, such a gradient field has two components \u03b5\u03b8=\\[\u2207p,\u2207ag\\]Tsubscript\ud835\udf00\ud835\udf03superscript\u2207\ud835\udc5d\u2207subscript\ud835\udc4e\ud835\udc54\ud835\udc47\\\\varepsilon\\_{\\\\theta}=\\[\\\\nabla p,\\\\nabla a\\_{g}\\]^{T}. As we will discuss later, \u2207ag\u2207subscript\ud835\udc4e\ud835\udc54\\\\nabla a\\_{g} can be used directly in the diffusion process, while a set of \u2207p\u2207\ud835\udc5d\\\\nabla p predictions is an over-parameterisation of a gradient direction on the \ud835\udd4a\u200b\ud835\udd3c\u200b(3)\ud835\udd4a\ud835\udd3c3\\\\mathbb{SE}(3) manifold, and additional steps need to be used to compute a precise denoising update. However, this can result in a large translation dominating a small rotation, and vice versa, preventing precisely learning both components well. To address this, we represent the denoising directions as a combination of centre-of-mass movement and rotation around it, effectively decoupling the translation and rotation predictions while remaining in Cartesian space as \\[\u2207p^t,\u2207p^r\\]T=\\[\ud835\udc95E\u200bA0\u2212\ud835\udc95E\u200bAk,\ud835\udc79E\u200bA0\u00d7pk\u200bp\u2212\ud835\udc79E\u200bAk\u00d7pk\u200bp\\]Tsuperscript\u2207subscript^\ud835\udc5d\ud835\udc61\u2207subscript^\ud835\udc5d\ud835\udc5f\ud835\udc47superscriptsubscriptsuperscript\ud835\udc950\ud835\udc38\ud835\udc34subscriptsuperscript\ud835\udc95\ud835\udc58\ud835\udc38\ud835\udc34subscriptsuperscript\ud835\udc790\ud835\udc38\ud835\udc34subscript\ud835\udc5d\ud835\udc58\ud835\udc5dsubscriptsuperscript\ud835\udc79\ud835\udc58\ud835\udc38\ud835\udc34subscript\ud835\udc5d\ud835\udc58\ud835\udc5d\ud835\udc47\\[\\\\nabla\\\\hat{p}\\_{t},\\\\nabla\\\\hat{p}\\_{r}\\]^{T}=\\[{\\\\bm{t}}^{0}\\_{EA}-{\\\\bm{t}}^{k}\\_{EA},{\\\\bm{R}}^{0}\\_{EA}\\\\times p\\_{kp}-{\\\\bm{R}}^{k}\\_{EA}\\\\times p\\_{kp}\\]^{T}, with \u2207p^=\u2207p^t+\u2207p^r\u2207^\ud835\udc5d\u2207subscript^\ud835\udc5d\ud835\udc61\u2207subscript^\ud835\udc5d\ud835\udc5f\\\\nabla\\\\hat{p}=\\\\nabla\\\\hat{p}\\_{t}+\\\\nabla\\\\hat{p}\\_{r} representing flow (red arrows in Figure [3]Figure 3 \u2023 3.3 Learning Robot Action via Graph Diffusion \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\"), left).\nHere, \ud835\udc95E\u200bA\u2208\u211d3subscript\ud835\udc95\ud835\udc38\ud835\udc34superscript\u211d3{\\\\bm{t}}\\_{EA}\\\\in\\\\mathbb{R}^{3} and \ud835\udc79E\u200bA\u2208\ud835\udd4a\u200b\ud835\udd46\u200b(3)subscript\ud835\udc79\ud835\udc38\ud835\udc34\ud835\udd4a\ud835\udd463{\\\\bm{R}}\\_{EA}\\\\in\\\\mathbb{SO}(3) define the \ud835\udd4a\u200b\ud835\udd3c\u200b(3)\ud835\udd4a\ud835\udd3c3\\\\mathbb{SE}(3) transformation representing actions \ud835\udc7bE\u200bAsubscript\ud835\udc7b\ud835\udc38\ud835\udc34{\\\\bm{T}}\\_{EA}.\nThus we learn \u03b5\u03b8subscript\ud835\udf00\ud835\udf03\\\\varepsilon\\_{\\\\theta} by making per-node predictions \u03b5k\u2208\u211d7superscript\ud835\udf00\ud835\udc58superscript\u211d7\\\\varepsilon^{k}\\\\in\\\\mathbb{R}^{7} and optimising the variational lower bound of the data likelihood which has been shown (Ho et al., [2020]) to be equivalent to minimising M\u200bS\u200bE\u200b(\u03b5k\u2212\u03b5\u03b8\u200b(\ud835\udca2k))\ud835\udc40\ud835\udc46\ud835\udc38superscript\ud835\udf00\ud835\udc58subscript\ud835\udf00\ud835\udf03superscript\ud835\udca2\ud835\udc58MSE(\\\\varepsilon^{k}-\\\\varepsilon\\_{\\\\theta}({\\\\mathcal{G}}^{k})).\nAs our parameterised model, we use a heterogeneous graph transformer, which updates features of each node in the graph, \u2131isubscript\u2131\ud835\udc56\\\\mathcal{F}\\_{i}, as (Shi et al., [2020]):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \u2131i\u2032=\ud835\udc7e1\u200b\u2131i+\u2211j\u2208\ud835\udca9\u200b(i)atti,j\u200b(\ud835\udc7e2\u200b\u2131j+\ud835\udc7e5\u200bei\u200bj);atti,j=s\u200bo\u200bf\u200bt\u200bm\u200ba\u200bx\u200b((\ud835\udc7e3\u200b\u2131i)T\u200b(\ud835\udc7e4\u200b\u2131j+\ud835\udc7e5\u200bei\u200bj)d)formulae-sequencesuperscriptsubscript\u2131\ud835\udc56\u2032subscript\ud835\udc7e1subscript\u2131\ud835\udc56subscript\ud835\udc57\ud835\udca9\ud835\udc56subscriptatt\ud835\udc56\ud835\udc57subscript\ud835\udc7e2subscript\u2131\ud835\udc57subscript\ud835\udc7e5subscript\ud835\udc52\ud835\udc56\ud835\udc57subscriptatt\ud835\udc56\ud835\udc57\ud835\udc60\ud835\udc5c\ud835\udc53\ud835\udc61\ud835\udc5a\ud835\udc4e\ud835\udc65superscriptsubscript\ud835\udc7e3subscript\u2131\ud835\udc56\ud835\udc47subscript\ud835\udc7e4subscript\u2131\ud835\udc57subscript\ud835\udc7e5subscript\ud835\udc52\ud835\udc56\ud835\udc57\ud835\udc51\\\\mathcal{F}\\_{i}^{\\\\prime}={\\\\bm{W}}\\_{1}\\\\mathcal{F}\\_{i}+\\\\sum\\_{j\\\\in\\\\mathcal{N}(i)}\\\\text{att}\\_{i,j}\\\\left({\\\\bm{W}}\\_{2}\\\\mathcal{F}\\_{j}+{\\\\bm{W}}\\_{5}e\\_{ij}\\\\right);\\\\quad\\\\text{att}\\_{i,j}=softmax\\\\left(\\\\frac{({\\\\bm{W}}\\_{3}\\\\mathcal{F}\\_{i})^{T}({\\\\bm{W}}\\_{4}\\\\mathcal{F}\\_{j}+{\\\\bm{W}}\\_{5}e\\_{ij})}{\\\\sqrt{d}}\\\\right) |  | (3) |\n\nHere, \ud835\udc7eisubscript\ud835\udc7e\ud835\udc56{\\\\bm{W}}\\_{i} represent learnable weights. Equipping our model with such a structured attention mechanism allows for selective and informative information aggregation which is propagated through the graph in a meaningful way, while ensuring that memory and computational complexity scales linearly with increasing context length (both N\ud835\udc41N and L\ud835\udc3fL). More details can be found in Appendix [C]Appendix C Network Architecture \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\").\n\nDeployment. During test time, we create the graph representation using actions sampled from the normal distribution, together with the current observation and the demonstrations as the context. We then make predictions describing how gripper nodes should be adjusted, and update the positions of these nodes by taking a denoising step according to the DDIM (Song et al., [2020]):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pgk\u22121=\u03b1k\u22121\u200bp^g0+1\u2212\u03b1k\u221211\u2212\u03b1k\u200b(pgk\u2212\u03b1k\u200bp^g0).superscriptsubscript\ud835\udc5d\ud835\udc54\ud835\udc581subscript\ud835\udefc\ud835\udc581superscriptsubscript^\ud835\udc5d\ud835\udc5401subscript\ud835\udefc\ud835\udc5811subscript\ud835\udefc\ud835\udc58superscriptsubscript\ud835\udc5d\ud835\udc54\ud835\udc58subscript\ud835\udefc\ud835\udc58superscriptsubscript^\ud835\udc5d\ud835\udc540p\\_{g}^{k-1}=\\\\sqrt{\\\\alpha\\_{k-1}}\\\\hat{p}\\_{g}^{0}+\\\\sqrt{\\\\frac{1-\\\\alpha\\_{k-1}}{1-\\\\alpha\\_{k}}}\\\\left(p\\_{g}^{k}-\\\\sqrt{\\\\alpha\\_{k}}\\\\hat{p}\\_{g}^{0}\\\\right). |  | (4) |\n\nHere, p^g0=pgk+\u0394\u200bpt+\u0394\u200bprsubscriptsuperscript^\ud835\udc5d0\ud835\udc54superscriptsubscript\ud835\udc5d\ud835\udc54\ud835\udc58\u0394subscript\ud835\udc5d\ud835\udc61\u0394subscript\ud835\udc5d\ud835\udc5f\\\\hat{p}^{0}\\_{g}=p\\_{g}^{k}+\\\\Delta p\\_{t}+\\\\Delta p\\_{r}. This leaves us with two sets of points pgk\u22121superscriptsubscript\ud835\udc5d\ud835\udc54\ud835\udc581p\\_{g}^{k-1} and pgksuperscriptsubscript\ud835\udc5d\ud835\udc54\ud835\udc58p\\_{g}^{k}, that implicitly represent gripper poses at denoising time steps k\u22121\ud835\udc581k-1 and k\ud835\udc58k. As we know the ground truth correspondences between them, we can extract an \ud835\udd4a\u200b\ud835\udd3c\u200b(3)\ud835\udd4a\ud835\udd3c3\\\\mathbb{SE}(3) transformation that would align them using a Singular Value Decomposition (SVD) (Arun et al., [1987]) as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc7bk\u22121,k=arg\u200bmin\ud835\udc7bk\u22121,k\u2208\ud835\udd4a\u200b\ud835\udd3c\u200b(3)\u200b\u2016pk\u22121\u2212\ud835\udc7bk\u22121,k\u00d7pk\u20162subscript\ud835\udc7b\ud835\udc581\ud835\udc58subscriptargminsubscript\ud835\udc7b\ud835\udc581\ud835\udc58\ud835\udd4a\ud835\udd3c3superscriptnormsuperscript\ud835\udc5d\ud835\udc581subscript\ud835\udc7b\ud835\udc581\ud835\udc58superscript\ud835\udc5d\ud835\udc582{\\\\bm{T}}\\_{k-1,k}=\\\\operatorname\\*{arg\\\\,min}\\_{{\\\\bm{T}}\\_{k-1,k}\\\\in\\\\mathbb{SE}(3)}\\|\\|p^{k-1}-{\\\\bm{T}}\\_{k-1,k}\\\\times p^{k}\\|\\|^{2} |  | (5) |\n\nFinally, the \ud835\udc82k\u22121superscript\ud835\udc82\ud835\udc581{\\\\bm{a}}^{k-1} is calculated by applying calculated transformation Tk\u22121,ksubscript\ud835\udc47\ud835\udc581\ud835\udc58T\\_{k-1,k} to \ud835\udc82ksuperscript\ud835\udc82\ud835\udc58{\\\\bm{a}}^{k}. Note that for gripper opening and closing actions utilising Equation [4]In 3.3 Learning Robot Action via Graph Diffusion \u2023 3 Instant Policy \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\") directly is sufficient. This process is repeated K\ud835\udc3eK times until the graph that is in distribution is generated and, as a byproduct, final \ud835\udc820superscript\ud835\udc820{\\\\bm{a}}^{0} actions are extracted, allowing us to sample from the initially described distribution p\u200b(\ud835\udc82\u2223ot,C)\ud835\udc5dconditional\ud835\udc82subscript\ud835\udc5c\ud835\udc61\ud835\udc36p({\\\\bm{a}}\\\\mid o\\_{t},C).\n\n### 3.4 An Infinite Pool of Data\n\nNow that we can learn the conditional distribution of actions, we need to answer the question of where a sufficiently large and diverse dataset will come from, to ensure that the learned model can be used for a wide range of real-world tasks. With In-Context Learning, the model does not need to encode task-specific policies into its weights. Thus it is possible to simulate \u2018arbitrary but consistent\u2019 trajectories as training data. Here, consistent means that while the trajectories differ, they \u2018perform\u2019 the same type of pseudo-task at a semantic level. We call such trajectories pseudo-demonstrations.\n\nData Generation. Firstly, to ensure generalisation across object geometries, we populate a simulated environment using a diverse range of objects from the ShapeNet dataset (Chang et al., [2015]). We then create pseudo-tasks by randomly sampling object-centric waypoints near or on the objects, that the robot needs to reach in sequence. Finally, by virtually moving the robot gripper between them and occasionally mimicking rigid grasps by attaching objects to the gripper, we create pseudo-demonstrations \u2013 trajectories that resemble various manipulation tasks. Furthermore, randomising the poses of the objects and the gripper, allows us to create many pseudo-demonstrations performing the same pseudo-task, resulting in the data that we use to train our In-Context model.\n\n![Refer to caption]Figure 4: Examples of the simulated trajectories - 3 pseudo-demonstrations for 2 pseudo-tasks.\n\nIn practice, to facilitate more efficient learning of common skills, we bias sampling towards waypoints resembling tasks like grasping or pick-and-place.\nNote that as the environment dynamics and task specifications, such as feasible grasps, are defined as context at inference, we do not need to ensure that these trajectories are dynamically or even kinematically feasible. In theory, with enough randomisation, the convex hull of the generated trajectories would encapsulate all the possible test-time tasks.\nMore information about the data generation process can be found in Appendix [D]Appendix D Data Generation \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\").\n\nData Usage. During training, we sample N\ud835\udc41N pseudo-demonstrations for a given pseudo-task, using N\u22121\ud835\udc411N-1 to define the context while the model learns to predict actions for the N\ud835\udc41Nth. Although pseudo-demonstrations are the primary training data, our approach can integrate additional data sources in the same format, allowing the model to adapt to specific settings or handle noisier observations.\n\n## 4 Experiments\nWe conducted experiments in two distinct settings: 1) simulation with RLBench (James et al., [2020]) and ground truth segmentations, and 2) real-world everyday tasks. Our experiments study performance relative to baselines, to understand the effect of different design choices, to reveal the scaling trends, and to showcase applicability in cross-embodiment and modality transfer. Videos are available on our anonymous webpage at [https://www.robot-learning.uk/instant-policy].\n\nExperimental Setup. Here, we describe parameters used across all our experiments unless explicitly stated otherwise. We use a single model to perform various manipulation tasks by providing N=2 demos, which we express as L=10 waypoints as context and predict T=8 future actions. We train this model for 2.5M optimisation steps using pseudo-demonstrations that are being continuously generated.\nWhen we discuss integrating additional training data beyond pseudo-demonstrations, we refer to models fine-tuned for an additional 100K optimisation steps using a 50/50 mix of pseudo-demonstrations and new data.\nFor more information, please refer to Appendix [E]Appendix E Implementation Details \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\").\n\nBaselines. We compare Instant Policy to 3 baselines which also enable In-Context Imitation Learning, namely: BC-Z (Jang et al., [2022]), Vid2Robot (Jain et al., [2024]), and a GPT2-style model (Radford et al., [2019]). BC-Z combines latent embedding of the demonstrations with the current observation and uses an MLP-based model to predict robot actions, Vid2Robot utilises a Perceiver Resampler (Jaegle et al., [2021]) and cross-attention to integrate information from the context and current observation, and GPT2 uses causal self-attention to predict the next tokens in the sequence, which in our case are robot actions. For a fair comparison, we implemented all baselines by adapting them to work with point cloud observation using the same pre-trained encoder, and all have roughly the same number of trainable parameters. Additionally, all components that rely on language-annotated data, such as auxiliary losses, were removed because our generated pseudo-demonstrations do not have such information. To highlight this, we add an asterisk to these methods when discussing results.\n\n### 4.1 Simulated Experiments\n\nThe aim of our first set of experiments is two-fold: 1) to evaluate the effectiveness of Instant Policy in performing various manipulation tasks by comparing it to state-of-the-art baselines, and 2) to investigate the role the training data plays in generalising to unseen scenarios.\nWe use a standard RLBench setup using the Franka Emika Panda and test Instant Policy (IP) and the baselines on 24 tasks, 100 rollouts each, randomising the poses of the objects in the environment each time. Additionally, we test models trained using only pseudo-demonstrations (PD only) and a combination of pseudo-demonstrations and 20 demonstrations for each of 12 out of the 24 RLBench tasks (PD++).\n\nResults & Discussion. The first notable observation from the results, presented in Table [1]Table 1 \u2023 4.1 Simulated Experiments \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\"), is that all methods achieve non-zero success rates when only pseudo-demonstrations are used and can perform well on at least the simpler tasks. This indicates that these pseudo-demonstrations are a powerful source of limitless data for In-Context Imitation Learning. Our second observation is that incorporating additional demonstrations from the same domain can greatly boost the performance, helping with generalisation to unseen tasks and novel object poses. Our third observation is that Instant Policy achieves significantly higher success rates than the baselines, showing the importance of our graph representation and its ability to interpret the context.\nWe further demonstrate this by visualising attention weights (Figure [5]Figure 5 \u2023 4.1 Simulated Experiments \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")), which reveal the model\u2019s ability to understand the task\u2019s current stage and identify the relevant information in the context.\nWe discuss failure cases in Appendix [G]Appendix G Failure Cases \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\").\n\nTasksInstant PolicyBC-Z\\*Vid2Robot\\*GPT2\\*TasksInstant PolicyBC-Z\\*Vid2Robot\\*GPT2\\*Open box0.94 / 0.990.22 / 0.980.30 / 0.970.25 / 0.95Slide buzzer0.35 / 0.940.04 / 0.260.05 / 0.190.00 / 0.00Close jar0.58 / 0.930.00 / 0.060.00 / 0.110.00 / 0.22Plate out0.81 / 0.970.26 / 0.550.11 / 0.520.31 / 0.40Toilet seat down0.85 / 0.930.40 / 0.880.54 / 0.850.38 / 0.83Close laptop0.91 / 0.950.64 / 0.650.45 / 0.570.53 / 0.72Close microwave1.00 / 1.000.55 / 0.600.72 / 0.870.76 / 1.00Close box0.77 / 0.990.81 / 1.000.89 / 0.880.42 / 0.41Phone on base0.98 / 1.000.51 / 0.500.48 / 0.510.28 / 0.55Open jar0.52 / 0.780.12 / 0.280.15 / 0.300.22 / 0.51Lift lid1.00 / 1.000.82 / 0.820.90 / 0.910.88 / 0.94Toilet seat up0.94 / 1.000.62 / 0.630.58 / 0.640.31 / 0.34Take umbrella out0.88 / 0.910.42 / 0.640.90 / 0.900.75 / 0.89Meat off grill0.77 / 0.90.75 / 0.640.76 / 0.330.80 / 0.30Slide block0.75 / 1.000.10 / 0.140.12 / 0.160.08 / 0.16Open microwave0.23 / 0.560.00 / 0.130.00 / 0.020.00 / 0.00Push button0.60 / 1.000.75 / 0.810.85 / 0.880.80 / 0.91Paper roll off0.70 / 0.950.32 / 0.530.29 / 0.550.26 / 0.48Basketball in hoop0.66 / 0.970.02 / 0.090.00 / 0.060.03 / 0.07Put rubish in bin0.97 / 0.990.11 / 0.110.12 / 0.140.18 / 0.17Meat on grill0.78 / 1.000.64 / 0.880.51 / 0.770.53 / 0.81Put umbrella0.31 / 0.370.35 / 0.340.41 / 0.280.28 / 0.39Flip switch0.40 / 0.940.15 / 0.630.05 / 0.160.11 / 0.42Lamp on0.42 / 0.410.00 / 0.000.00 / 0.000.00 / 0.00Average (PD++) Seen0.970.590.600.65Average (PD++) Unseen0.820.430.370.31Average (PD only) All0.710.360.380.34\n\nTable 1: Success rates for Instant Policy and baselines on 24 tasks. 100 rollouts for each (trained using only pseudo-demonstrations / with additional demos from the 12 RLBench tasks on the left).![Refer to caption]Figure 5: Attention weights visualised on sub-graph edges at two different timesteps in the phone-on-base task, showing the model\u2019s ability to track task progress and aggregate relevant information.\n\n### 4.2 Instant Policy Design Choices & Scaling Trends\n\nOur next set of experiments investigates the impact of various hyperparameters on the performance of our method, focusing on design choices requiring model re-training, inference parameters that alter model behaviour at test time, and scaling trends as model capacity and training time increase. For the design choices and inference parameters, we calculate the average change in success rate on 24 unseen RLBench tasks, with respect to the base model used in the previous set of experiments, while for the scaling trends, we report validation loss on a hold-out set of pseudo-demonstrations to see how well it can capture the underlying data distribution.\n\nDesign ChoicesInference ParametersActionMode\u0394%percent\u0394\\\\Delta\\\\%DiffusionMode\u0394%percent\u0394\\\\Delta\\\\%PredictionHorizon (T)\u0394%percent\u0394\\\\Delta\\\\%\\# DiffusionSteps (K)\u0394%percent\u0394\\\\Delta\\\\%DemoLength (L)\u0394%percent\u0394\\\\Delta\\\\%\\# Demos(N)\u0394%percent\u0394\\\\Delta\\\\%\u0394\u200bp\u0394\ud835\udc5d\\\\Delta p-15Flow01-521-161-711-12(\u0394\u200bpt\u0394subscript\ud835\udc5d\ud835\udc61\\\\Delta p\\_{t}, \u0394\u200bpr\u0394subscript\ud835\udc5d\ud835\udc5f\\\\Delta p\\_{r})0Sample-64-132-25-2620(\u0394\u200bt\u0394\ud835\udc61\\\\Delta t, \u0394\u200bq\u0394\ud835\udc5e\\\\Delta q)-37Noise-7804010032(\u0394\u200bt\u0394\ud835\udc61\\\\Delta t, \u0394\u200b\u03b8\u0394\ud835\udf03\\\\Delta\\\\theta)-21No Diff-2916-4801514-1\n\nTable 2: Performance change of ablation variants when compared to the base model.\n\nDesign Choices. We now examine the following: action mode, diffusion mode, and the prediction horizon. For action modes, we compare our proposed parameterisation, which decouples translation and rotation, against an approach without such decoupling, and more conventional approaches like combining translation with quaternion or angle-axis representations. For diffusion mode, we evaluate predicting flow versus added noise, direct sample, and omitting diffusion, regressing the actions directly. Lastly, we assess the impact of predicting different numbers of actions. The results, shown in Table [2]Table 2 \u2023 4.2 Instant Policy Design Choices & Scaling Trends \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\") (left), show that these choices greatly influence performance. Decoupling translation and rotation in Cartesian space allows for precise low-level action learning. The diffusion process is vital for capturing complex action distributions, with predicting flow showing the best results. Finally, predicting multiple actions is helpful, but this also increases computational complexity. For a detailed discussion of other design choices, including unsuccessful ones, please refer to Appendix [H]Appendix H Things That Did Not Work \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\").\n\nInference Parameters. Using a diffusion with a flexible representation that handles arbitrary context lengths allows us to adjust model performance at inference. We investigate the impact of the number of diffusion steps, the demonstration length, and the number of demonstrations in the context, as shown in Table [2]Table 2 \u2023 4.2 Instant Policy Design Choices & Scaling Trends \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\") (right). Results show that even with just two denoising steps, good performance can be achieved. Demonstration length is critical; it must be dense enough to convey how the task should be solved, as this information is not encoded in the model weights. This is evident when only the final goal is provided (demonstration length = 1), leading to poor performance. However, extending it beyond a certain point shows minimal improvement, as the RLBench tasks can often be described by just a few waypoints. For more complex tasks, dense demonstrations would be crucial. Finally, performance improves with multiple demonstrations, though using more than two seems to be unnecessary. This is because two demonstrations are sufficient to disambiguate the task when generalising only over object poses. However, as we will show in other experiments, this does not hold when the test objects differ in geometry from those in the demonstrations.\n\n![Refer to caption]Figure 6: Validation loss curves for three different model sizes.\n\nScaling Trends. The ability to continuously generate training data in simulation allows our model\u2019s performance to be limited only by available compute (training time) and model capacity (number of trainable parameters). To assess how these factors influence our approach, we trained three model variants with different numbers of parameters and evaluated them after varying numbers of optimisation steps (Figure [6]Figure 6 \u2023 4.2 Instant Policy Design Choices & Scaling Trends \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")). The results show that the model\u2019s ability to capture the data distribution (as reflected by decreasing validation loss) scales well with both training time and model complexity. This offers some promise that scaling compute alone could enable the development of high-performing models for robot manipulation.\nQualitatively, we observed a similar performance trend on unseen RLBench tasks. With increased training, we see an increase in performance. However, it plateaus eventually. Similarly, by increasing the model\u2019s capacity from 69M to 117M, the success rate reached before plateauing increases significantly. However, further increasing the number of trainable parameters to 178M results in only minor, insignificant improvements in performance. This suggests the need for more diverse and representative data. Such data could come from available robotics datasets or the generation of pseudo-demonstrations that more closely resemble real tasks.\n\n### 4.3 Real-World Experiments\n\nIn real-world experiments, we evaluate our method\u2019s ability to learn everyday tasks and generalise to novel objects, unseen in both the training data and the context. We use a Sawyer robot with a Robotiq 2F-85 gripper and two external RealSense D415 depth cameras. We obtain segmentation by seeding the XMem++ (Bekuzarov et al., [2023]) object tracker with initial results from SAM (**[MASKED_CITATION]**), and we provide demonstrations using kinesthetic teaching. To help the model handle imperfect segmentations and noisy point clouds more effectively, we further co-fine-tuned the model used in our previous experiments using 5 demos from 5 tasks not included in the evaluation.\n\n![Refer to caption]Figure 7: The 16 tasks used in our real-world evaluation.\n\nReal-World Tasks. To evaluate our model\u2019s ability to tackle various tasks in the real world, we tested it and the baselines on 16 everyday tasks (Figure [7]Figure 7 \u2023 4.3 Real-World Experiments \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")). We evaluated all methods using 10 rollouts, randomising the poses of the objects in the environment each time. From the results (Table [3]Table 3 \u2023 4.3 Real-World Experiments \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")), we can see that Instant Policy is able to complete various everyday tasks from just a couple of demonstrations with a high success rate, outperforming the baselines by a large margin.\n\nInsertPaper RollOpenAirfryerFlipBottleStackBowlsKnock overCreeperKettle onStoveCloseCoffee MachineHangCableInstant Policy9 / 109 / 107 / 1010 / 108 / 1010 / 1010 / 107 / 10BC-Z\\*1 / 105 / 100 / 102 / 105 / 101 / 101 / 100 / 10Vid2Robot\\*3 / 106 / 100 / 101 / 107 / 103 / 104 / 101 / 10GPT2\\*1 / 106 / 100 / 104 / 105 / 105 / 105 / 101 / 10OpenBoxTurn TapRightTurn TapLeftTakeRose OutPush CansTogetherPick upKettleCloseBoxOpenRegisterAverage, %Instant Policy8 / 1010 / 1010 / 109 / 105 / 1010 / 1010 / 1010 / 1088.75BC-Z\\*8 / 102 / 103 / 100 / 102 / 1010 / 107 / 108 / 1034.38Vid2Robot\\*9 / 104 / 103 / 100 / 101 / 1010 / 107 / 106 / 1040.63GPT2\\*0 / 105 / 105 / 100 / 100 / 1010 / 105 / 107 / 1036.88\n\nTable 3: Real-world success rates for Instant Policy and the baselines, with 10 rollouts each. ![Refer to caption]Figure 8:\nObjects used in the generalisation experiment (# indicate demo order in the context).\n\nGeneralisation to Novel Objects. While all of our previous experiments focused on evaluating our method\u2019s performance on the same objects used in the demonstrations, here we aim to test its ability to generalise to novel object geometries at test time. We do so by providing demonstrations (i.e., defining the context) with different sets of objects from the same semantic category, and testing on a different object from that same category. For the evaluation, we use four different tasks (Figure [8]Figure 8 \u2023 4.3 Real-World Experiments \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\")), each with six sets of objects (four for the demonstrations/context and two for evaluation). We evaluate our method with a different number of demonstrations in the context, randomising the poses of the test objects during each rollout (5 rollouts for each unseen object set). The results, presented in Table [4]Table 4 \u2023 4.3 Real-World Experiments \u2023 4 Experiments \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\"), show that, with an increasing number of demonstrations across different objects, the performance on completely novel object geometries increases. This indicates that Instant Policy is capable of selectively aggregating and interpolating the information present in the context to disambiguate the task and the parts of the objects that are relevant to it. It is important to note that this is an emergent behaviour, as we never trained our model with objects from different geometries across the context, and is enabled by the graph representation and structured cross-attention mechanism.\n\nNOpenBoxFoldin HalfMugon PlateUnplugChargerAverage,  \u2003%12 / 107 / 107 / 100 / 104025 / 108 / 108 / 100 / 1052.5310 / 1010 / 109 / 105 / 1085410 / 1010 / 109 / 107 / 1090\n\nTable 4: Success rates of Instant Policy with a different number of demonstrations (N), enabling generalisation to novel object geometries.\n\n#### 4.3.1 Downstream Applications\n\nCross-embodiment transfer. Since our model uses segmented point clouds and defines the robot state by the end-effector pose and gripper state, different embodiments can be used to define the context and roll out the policy, provided the mapping between them is known. We demonstrate this by using human-hand demonstrations with a handcrafted mapping to the gripper state, allowing us to transfer the policy directly to the robot. In qualitative experiments, we achieve similar success rates on simple tasks, like pick-and-place, compared to kinesthetic teaching. However, for more complex tasks, this approach is limited by the handcrafted mapping. See our webpage for video examples and refer to Appendix [I]Appendix I Cross-Embodiment Transfer \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\") for more information about this mapping.\n\nModality change. While obtaining a policy immediately after demonstrations is a powerful and efficient tool, it still requires human effort in providing those demonstrations. We can circumvent this by exploiting the bottleneck of our trained model, which holds the information about the context and the current observation needed to predict actions. This information is aggregated in the gripper nodes of the current observations. If we approximate this bottleneck representation using different modalities, such as language, we can bypass using demonstrations as context altogether. This can be achieved with a smaller, language-annotated dataset and a contrastive objective. Using language-annotated trajectories from RLBench and rollout data from previous experiments, we qualitatively demonstrate zero-shot task completion based solely on language commands. For more details, see Appendix [J]Appendix J Modality Transfer \u2023 Instant Policy: In-Context Imitation Learning via Graph Diffusion\"), and for videos, visit our webpage at [https://www.robot-learning.uk/instant-policy].\n\n## 5 Discussion\nLimitations. While Instant Policy demonstrates strong performance, it has several limitations. First, like many similar approaches, we assume the availability of segmented point clouds for sufficient observability. Second, point cloud observations lack colour or other semantically rich information. Third, our method focuses on relatively short-horizon tasks where the Markovian assumption holds. Fourth, Instant Policy is sensitive to the quality and downsampling of demonstrations at inference. Fifth, it does not address collision avoidance or provide end-to-end control of the full configuration space of the robot arm. Finally, it lacks the precision needed for tasks with extremely low tolerances or rich contact dynamics. However, we believe many of these limitations can be addressed primarily through improvements in generation of the pseudo-demonstrations, such as accounting for collisions, incorporating long-horizon tasks, and by improving the graph representation with additional features from vision models, force information, or past observations.\n\nConclusions. In this work, we introduced Instant Policy, a novel framework for In-Context Imitation Learning that enables immediate robotic skill acquisition following one or two test-time demonstrations. This is a compelling alternative paradigm to today\u2019s widespread behavioural cloning methods, which require hundreds or thousands of demonstrations. We showed that our novel graph structure enables data from demonstrations, current observations, and future actions, to be propagated effectively via a novel graph diffusion process. Importantly, Instant Policy can be trained with only pseudo-demonstrations generated in simulation, providing a virtually unlimited data source that is constrained only by available computational resources. Experiments showed strong performance relative to baselines, the ability to learn everyday real-world manipulation tasks, generalisation to novel object geometries, and encouraging potential for further downstream applications.</Paper>\n\n<References>\n<Candidate>Candidate [0]:\nZero-shot robotic manipulation with pretrained image-editing diffusion models.\n\n<Abstract>Abstract: If generalist robots are to operate in truly unstructured environments, they\nneed to be able to recognize and reason about novel objects and scenarios. Such\nobjects and scenarios might not be present in the robot's own training data. We\npropose SuSIE, a method that leverages an image-editing diffusion model to act\nas a high-level planner by proposing intermediate subgoals that a low-level\ncontroller can accomplish. Specifically, we finetune InstructPix2Pix on video\ndata, consisting of both human videos and robot rollouts, such that it outputs\nhypothetical future \"subgoal\" observations given the robot's current\nobservation and a language command. We also use the robot data to train a\nlow-level goal-conditioned policy to act as the aforementioned low-level\ncontroller. We find that the high-level subgoal predictions can utilize\nInternet-scale pretraining and visual understanding to guide the low-level\ngoal-conditioned policy, achieving significantly better generalization and\nprecision than conventional language-conditioned policies. We achieve\nstate-of-the-art results on the CALVIN benchmark, and also demonstrate robust\ngeneralization on real-world manipulation tasks, beating strong baselines that\nhave access to privileged information or that utilize orders of magnitude more\ncompute and training data. The project website can be found at\nhttp://rail-berkeley.github.io/susie .</Abstract><Content>\n## 1 Introduction\nA useful generalist robot must be able to \u2014 much like a person \u2014 recognize and reason about novel objects and scenarios it has never encountered before. For example, if a user instructs the robot to \u201chand me that jumbo orange crayon,\u201d it ought to be able to do so even if it has never interacted with a jumbo orange crayon before. In other words, the robot needs to possess not only the physical capability to manipulate an object of that shape and size but also the semantic understanding to reason about an object outside of its training distribution. As much as robotic manipulation datasets have grown in recent years, it is unlikely that they will ever include every conceivable instance of objects and settings, any more so than the life experiences of a person ever include physical interactions with every type of object. While these datasets contain more than enough examples of manipulating elongated cylindrical objects, they lack the broad semantic knowledge necessary to ground the _particular_ objects that robots will encounter during everyday operation.\n\nHow can we imbue this semantic knowledge into language-guided robotic control? One approach would be to utilize models pretrained on vision and language to initialize different components of the robotic learning pipeline. Recent efforts, for example, initialize robotic policies with pretrained vision-language encoders \\[ [7])\\] or apply pretrained models to semantic scene augmentation \\[ [11]), [64])\\]. While these methods bring semantic knowledge into robot learning, it remains unclear if these approaches realize the full potential of Internet pretraining in improving robotic policy execution at every level, or whether they simply improve the high-level visual generalization of the policy.\n\nWe propose an approach for leveraging pretrained image-editing models to enable generalizable robotic manipulation. We finetune the image-editing model on video data such that, given the current frame and a language description of the current task, the model generates a hypothetical future frame.\nThis does not require the model to precisely understand the intricacies of the robot\u2019s low-level dynamics and therefore should facilitate transfer from other data sources (e.g., human videos) where the low-level physical interactions and precise embodiment do not match. At test time, we employ a low-level goal-reaching policy trained on robot data to reach this hypothetical future frame; this policy, in turn, only needs to infer visuo-motor relationships to determine the correct actuation and does not need to understand the overlying semantics. Furthermore, such subgoals can simplify the task by inferring likely poses for the arm at intermediate substeps, such as the pose corresponding to grasping an object (see Figure [1]Figure 1 \u2023 1 Introduction \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\")). In fact, we observe in our experiments that even when existing approaches possess sufficient semantic understanding to solve a task, they often fail due to imprecise localization of obstacles and objects; following the generated subgoals enables our method to perform well in such scenarios. Much like a person first constructs a high-level plan to complete a task before deferring to muscle memory for the low-level control, our method can also be viewed as first running a high-level planner with integrated semantic reasoning and visual understanding before deferring to a low-level controller to execute the plan.\n\nThe main contribution of our work is SUbgoal Synthesis via Image Editing (SuSIE), a simple and scalable method for incorporating semantic information from pretrained models to improve robotic control. A pretrained image-editing model is used with minimal modification, requiring only finetuning on video data. The low-level goal-conditioned policy is trained with standard supervised learning, and faces the comparatively easy problem of reaching nearby image subgoals; this typically only requires attending to a single object or the arm position, ignoring most parts of the scene.\nTogether, this approach achieves state-of-the-art results on the CALVIN benchmark and solves real robot control tasks involving novel objects, novel distractors, and even novel scenes. It outperforms all prior approaches on these real-world tasks, including oracle baselines with privileged information and RT-2-X \\[ [14])\\] \u2014 a 55 billion parameter model trained on Internet-scale vision-language data as well as an order of magnitude more robot data than SuSIE.\n\n![Refer to caption]Figure 1: (SuSIE) Our method leverages a pretrained image-editing model to generate future subgoals based on language commands. A low-level goal-reaching policy then executes the actions needed to reach each subgoal. Alternating this loop enables us to solve the task.\n\n## 2 Related Work\nIncorporating semantic information from pretrained vision-language models. Prior works that incorporate semantic information from pretrained vision-language models (VLMs) into robot learning can be classified into two categories. The first category aims to improve visual scene understanding in robot policies with information from VLMs. For instance, GenAug \\[ [11])\\], ROSIE \\[ [64])\\], DALL-E-Bot \\[ [34])\\], and CACTI \\[ [43])\\] use text-to-image generative models to produce semantic augmentations of a given scene with novel objects and arrangements and train the robot policy on the augmented data to enable it to perform well in a similar scene. MOO \\[ [57])\\] uses a pretrained object detector to extract bounding boxes to guide the policy towards the target object. Other works directly train language and image-based policies \\[ [6]), [7]), [55])\\], some using VLM initializations \\[ [15]), [52])\\], to produce action sequences.\n\nWhile these approaches do utilize pretrained models, we find in our experiments that pretraining using VLMs \\[ [7])\\] does not necessarily enhance low-level policy execution in the sense that learned policies often localize the object or move the gripper imprecisely (see Figure [3]Figure 3 \u2023 5.3 Does SuSIE Improve Precision and Low-Level Skill Execution? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\")). On the other hand, our approach is able to incorporate benefits of pretraining into low-level control by synthesizing subgoals that carefully steer the motion of the low goal reaching policy, improving its precision.\nWhile our approach can be directly applied in _unstructured_ open-world settings, applying methods from \\[ [11]), [64]), [43])\\] requires additional prior information, such as object bounding boxes or 3D meshes. This significantly restricts their applicability to scenarios where this additional information is not available: for example, GenAug \\[ [11])\\] is not applicable in our experiments since 3D object meshes for new target objects were not available.\nDistinct from our approach for utilizing generative models, other works design representation learning objectives for vision-language pretraining for control \\[ [49]), [42]), [35]), [4])\\], but these methods still need to utilize limited amounts of data from the target task to learn a policy. In contrast, our approach solves the target task in zero-shot, without any task-specific data.\n\nThe second category of approaches incorporates semantic information from pretrained models for informing low-level controllers. Typically, these prior methods use pretrained models to imagine visual \\[ [16]), [2])\\] or textual plans \\[ [8]), [28]), [29]), [39])\\],\nwhich then inform a low-level robot control policy. Of these, methods that train a low-level policies conditioned on text suffer from a grounding problem, which our approach circumvents entirely since the low-level policy only sees images.\n\nPerhaps the most related methods to our approach in this second category are UniPi \\[ [16])\\] and HiP \\[ [2])\\], which train video models to generate a sequence of frames achieving the target task, and then extract robot actions by training an inverse dynamics model. Our approach does _not_ attempt to generate full videos (i.e., _all_ frames in a rollout), but only the next waypoint that a low-level policy must achieve to solve the commanded task. While this difference might appear small, it has major implications: modeling an entire video puts a very high burden on the generative model, requiring the frames to obey strict physical consistency. Unfortunately, we find that open-source video models often produce temporally inconsistent frames, which confuse the low-level controller (see Appendix [C]Appendix C Qualtitative Examples of Video Generation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\")).\nOur method provides more freedom to the low-level controller to handle the physical aspects of the task over a longer time interval while guiding it at a level that is suitable to the diffusion model\u2019s ability to preserve physical plausibility.\nIn our experiments, we find that our method significantly improves over an open-source reimplementation of UniPi \\[ [16])\\].\n\nClassical model-based RL and planning with no pretraining. The idea behind our approach is also related to several methods in the deep RL literature that do not use pretrained models and generally do not study language-guided control. For instance, \\[ [21]), [37]), [63]), [60]), [53]), [22])\\] train action-conditioned dynamics models and run RL in the model. While our approach also models multi-step dynamics, our model is not conditioned on an action input. Removing the dependency on an action input enables us to de-couple the finetuning of the (large) image-editing model from the policy entirely, improving simplicity and time efficiency. APV \\[ [54])\\] trains an action agnostic dynamics model from videos but finetunes it in a loop with the policy, and hence, does not enjoy the above benefits.\nFinally, these model-based RL methods do not exhibit zero-shot generalization abilities to new tasks, which is an important capability that our method enjoys. Our approach is also related to several video prediction methods \\[ [17]), [38]), [3]), [58])\\] but utilizes a better neural network architecture (i.e., diffusion models instead of LSTMs and CNNs). Most related is to our method is hierarchical visual foresight (HVF) \\[ [48])\\]: while HVF uses MPC to find an action, our approach uses a goal-reaching policy thereby eliminating the cost of running MPC with large dynamics models.\n\nOur approach is also related to prior works that use generative models for planning in a single-task setting, with no pretraining. Trajectory transformer (TT) \\[ [31])\\], decision transformer (DT) \\[ [10])\\], and their extensions condition the policy on the target return or goal. While diffusion-based variants of these methods \\[ [32]), [1])\\] use diffusion models like our approach, they still require training data from the target task to learn a policy, unlike our zero-shot planning approach.\n\n## 3 Preliminaries and Problem Statement\nWe consider the problem setting of language-conditioned robotic control. Specifically, we want a robot to accomplish a task described by a novel language command. We divide sources of data into 3 categories: language-labeled video clips \ud835\udc9flsubscript\ud835\udc9f\ud835\udc59\\\\mathcal{D}\\_{l} that do not include robot actions; language-labeled robot data \ud835\udc9fl,asubscript\ud835\udc9f\ud835\udc59\ud835\udc4e\\\\mathcal{D}\\_{l,a} that include both language labels and robot actions; and unlabeled robot data \ud835\udc9fasubscript\ud835\udc9f\ud835\udc4e\\\\mathcal{D}\\_{a} that include only actions (e.g., play data).\n\nFormally, we define \ud835\udc9fl,a={(\u03c41,l1),(\u03c42,l2),\u22ef,(\u03c4N,lN)}subscript\ud835\udc9f\ud835\udc59\ud835\udc4esuperscript\ud835\udf0f1superscript\ud835\udc591superscript\ud835\udf0f2superscript\ud835\udc592\u22efsuperscript\ud835\udf0f\ud835\udc41superscript\ud835\udc59\ud835\udc41\\\\mathcal{D}\\_{l,a}=\\\\{\\\\left(\\\\tau^{1},l^{1}\\\\right),\\\\left(\\\\tau^{2},l^{2}\\\\right),\\\\cdots,\\\\left(\\\\tau^{N},l^{N}\\\\right)\\\\}, where each trajectory \u03c4nsuperscript\ud835\udf0f\ud835\udc5b\\\\tau^{n} consists of a sequence of images (or states) \ud835\udc2cin\u2208\ud835\udcaesubscriptsuperscript\ud835\udc2c\ud835\udc5b\ud835\udc56\ud835\udcae\\\\mathbf{s}^{n}\\_{i}\\\\in\\\\mathcal{S} and actions \ud835\udc1ain\u2208\ud835\udc9csubscriptsuperscript\ud835\udc1a\ud835\udc5b\ud835\udc56\ud835\udc9c\\\\mathbf{a}^{n}\\_{i}\\\\in\\\\mathcal{A} that were executed while collecting this data,\ni.e. \u03c4n=(\ud835\udc2c0n,\ud835\udc1a0n,\ud835\udc2c1n,\ud835\udc1a2n,\u22ef)superscript\ud835\udf0f\ud835\udc5bsubscriptsuperscript\ud835\udc2c\ud835\udc5b0subscriptsuperscript\ud835\udc1a\ud835\udc5b0subscriptsuperscript\ud835\udc2c\ud835\udc5b1subscriptsuperscript\ud835\udc1a\ud835\udc5b2\u22ef\\\\tau^{n}=\\\\left(\\\\mathbf{s}^{n}\\_{0},\\\\mathbf{a}^{n}\\_{0},\\\\mathbf{s}^{n}\\_{1},\\\\mathbf{a}^{n}\\_{2},\\\\cdots\\\\right), following the standard assumptions of a Markov decision process. lnsuperscript\ud835\udc59\ud835\udc5bl^{n} is a natural language command describing the task accomplished in the trajectory. \ud835\udc9flsubscript\ud835\udc9f\ud835\udc59\\\\mathcal{D}\\_{l} and \ud835\udc9fasubscript\ud835\udc9f\ud835\udc4e\\\\mathcal{D}\\_{a} are organized similarly, but are missing either actions \ud835\udc1ainsubscriptsuperscript\ud835\udc1a\ud835\udc5b\ud835\udc56\\\\mathbf{a}^{n}\\_{i} or language annotations lnsuperscript\ud835\udc59\ud835\udc5bl^{n}, respectively. At test time, given a new scene \ud835\udc2c0testsuperscriptsubscript\ud835\udc2c0test\\\\mathbf{s}\\_{0}^{\\\\text{test}} and a new natural language description ltestsuperscript\ud835\udc59testl^{\\\\text{test}} of a task, we evaluate a method in terms of its success rate at accomplishing this task starting from \ud835\udc2c0testsuperscriptsubscript\ud835\udc2c0test\\\\mathbf{s}\\_{0}^{\\\\text{test}}.\n\n## 4 SuSIE: Subgoal Synthesis via Image Editing\nOur goal is to utilize semantic information from the Internet to improve language-guided robot control in the presence of novel environments, scenes, and objects. How can we do this when models trained on general-purpose Internet data do not provide guidance in selecting low-level actions? Our key insight is that we can effectively leverage the capabilities of the pretrained model if we decouple the robot control problem into two phases: (i) generating subgoals that would need to be attained to succeed at the task, and (ii) learning low-level control policies for reaching these generated subgoals. Our method incorporates semantic information from both text-image pretraining on Internet data as well as non-robot video data in Phase (i) by finetuning a text-guided image-editing model on \ud835\udc9fl\u222a\ud835\udc9fl,asubscript\ud835\udc9f\ud835\udc59subscript\ud835\udc9f\ud835\udc59\ud835\udc4e\\\\mathcal{D}\\_{l}\\\\cup\\\\mathcal{D}\\_{l,a}. Phase (ii) is accomplished via a goal-conditioned policy trained on the robot data \ud835\udc9fl,a\u222a\ud835\udc9fasubscript\ud835\udc9f\ud835\udc59\ud835\udc4esubscript\ud835\udc9f\ud835\udc4e\\\\mathcal{D}\\_{l,a}\\\\cup\\\\mathcal{D}\\_{a}. We describe each of these phases below and then summarize the resulting algorithm.\n\n### 4.1 Phase (i): Synthesizing Subgoals From Image-Editing Models\n\nThe primary component of our method is a generative model that, given a target task specified by natural language, can guide a low-level controller to a state that advances the task. One way to accomplish this is to train a generative model to produce an immediate next subgoal image. We can then incorporate semantic information from the Internet into our algorithm by initializing this generative model with a suitable pretrained initialization, followed by finetuning it on multi-task, diverse video data consisting of robot rollouts as well as other videos from the Internet.\n\n_What is a good pretrained initialization for this model?_ Our intuition is that, since accomplishing a task is equivalent to \u201cediting\u201d the pixels of an image of the robot workspace under constraints prescribed by the language command, a good pretrained initialization may be provided by a text-guided image-editing model. We instantiate our approach with Instruct Pix2Pix \\[ [9])\\], though other image-editing models could also be used. Formally, this model is given by p\u03b8\u200b(\ud835\udc2cedited\u2223\ud835\udc2corig,l)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc2ceditedsubscript\ud835\udc2corig\ud835\udc59p\\_{\\\\theta}(\\\\mathbf{s}\\_{\\\\text{edited}}\\\\mid\\\\mathbf{s}\\_{\\\\text{orig}},l). Then, using the dataset \ud835\udc9fl\u222a\ud835\udc9fl,asubscript\ud835\udc9f\ud835\udc59subscript\ud835\udc9f\ud835\udc59\ud835\udc4e\\\\mathcal{D}\\_{l}\\\\cup\\\\mathcal{D}\\_{l,a} of language-labeled video clips and robot trajectories, we finetune p\u03b8subscript\ud835\udc5d\ud835\udf03p\\_{\\\\theta} to produce valid subgoals \ud835\udc2ceditedsubscript\ud835\udc2cedited\\\\mathbf{s}\\_{\\\\text{edited}} given an initial image \ud835\udc2corigsubscript\ud835\udc2corig\\\\mathbf{s}\\_{\\\\text{orig}} and a language label l\ud835\udc59l.\nFormally, the training objective is given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | max\u03b8\u2061\ud835\udd3c(\u03c4n,ln)\u223c\ud835\udc9fl\u222a\ud835\udc9fl,a;\ud835\udc2cin\u223c\u03c4n;j\u223cq\u200b(j\u2223i)\u200b\\[log\u2061p\u03b8\u200b(\ud835\udc2cjn\u2223\ud835\udc2cin,ln)\\],subscript\ud835\udf03subscript\ud835\udd3cformulae-sequencesimilar-tosuperscript\ud835\udf0f\ud835\udc5bsuperscript\ud835\udc59\ud835\udc5bsubscript\ud835\udc9f\ud835\udc59subscript\ud835\udc9f\ud835\udc59\ud835\udc4eformulae-sequencesimilar-tosuperscriptsubscript\ud835\udc2c\ud835\udc56\ud835\udc5bsuperscript\ud835\udf0f\ud835\udc5bsimilar-to\ud835\udc57\ud835\udc5econditional\ud835\udc57\ud835\udc56delimited-\\[\\]subscript\ud835\udc5d\ud835\udf03conditionalsuperscriptsubscript\ud835\udc2c\ud835\udc57\ud835\udc5bsuperscriptsubscript\ud835\udc2c\ud835\udc56\ud835\udc5bsuperscript\ud835\udc59\ud835\udc5b\\\\displaystyle\\\\max\\_{\\\\theta}~{}~{}\\\\mathbb{E}\\_{~{}(\\\\tau^{n},l^{n})\\\\sim\\\\mathcal{D}\\_{l}\\\\cup\\\\mathcal{D}\\_{l,a};~{}~{}\\\\mathbf{s}\\_{i}^{n}\\\\sim\\\\tau^{n};~{}~{}j\\\\sim q(j\\\\mid i)}\\\\left\\[\\\\log p\\_{\\\\theta}\\\\left(\\\\mathbf{s}\\_{j}^{n}\\\\mid\\\\mathbf{s}\\_{i}^{n},l^{n}\\\\right)\\\\right\\], |  | (1) |\n\nwhere q\u200b(j\u2223i)\ud835\udc5econditional\ud835\udc57\ud835\udc56q(j\\\\mid i) is a distribution of our choosing that controls what subgoals the model is trained to produce. We want the diffusion model to generate subgoals that are a consistent distance in the future from the current state \u2014 close enough to be reachable by the low-level policy, but far enough to achieve significant progress on the task. As such, we choose dataset-dependent hyperparameters kminsubscript\ud835\udc58mink\\_{\\\\text{min}} and kmaxsubscript\ud835\udc58maxk\\_{\\\\text{max}}, and set q\ud835\udc5eq to select subgoals uniformly between kminsubscript\ud835\udc58mink\\_{\\\\text{min}} and kmaxsubscript\ud835\udc58maxk\\_{\\\\text{max}} steps in the future, i.e.,:\n\n|     |     |     |\n| --- | --- | --- |\n|  | q\u200b(j\u2223i)=U\u200b(j;\\[i+kmin,i+kmax)).\ud835\udc5econditional\ud835\udc57\ud835\udc56\ud835\udc48\ud835\udc57\ud835\udc56subscript\ud835\udc58min\ud835\udc56subscript\ud835\udc58max\\\\displaystyle q(j\\\\mid i)=U\\\\big{(}j;\\\\;\\[i+k\\_{\\\\text{min}},i+k\\_{\\\\text{max}})\\\\big{)}. |  |\\\n\\\n### 4.2 Phase (ii): Reaching Generated Subgoals with Goal-Conditioned Policies\\\n\\\nIn order to utilize the finetuned image-editing model to control the robot, we additionally need to train a low-level controller to select suitable robot actions. In this section, we present the design of our low-level controller, followed by a full description of our test-time control procedure. Since the image-editing model in SuSIE produces images of future subgoals conditioned on natural language task descriptions, our low-level controller can simply be a language-agnostic goal-reaching policy.\\\n\\\nTraining a goal-reaching policy. Our goal-reaching policy is parameterized as \u03c0\u03d5\u200b(\ud835\udc1a\u2223\ud835\udc2ci,\ud835\udc2cj)subscript\ud835\udf0bitalic-\u03d5conditional\ud835\udc1asubscript\ud835\udc2c\ud835\udc56subscript\ud835\udc2c\ud835\udc57\\\\pi\\_{\\\\phi}(\\\\mathbf{a}\\\\mid\\\\mathbf{s}\\_{i},\\\\mathbf{s}\\_{j}), where \ud835\udc2cjsubscript\ud835\udc2c\ud835\udc57\\\\mathbf{s}\\_{j} is a future frame that the policy intends to reach by acting at \ud835\udc2cisubscript\ud835\udc2c\ud835\udc56\\\\mathbf{s}\\_{i}. At test time, we only need the low-level policy to be proficient at reaching close-by states that lie within kmaxsubscript\ud835\udc58maxk\\_{\\\\text{max}} steps of the current state, since the image-editing model from Phase (i) is trained to produce subgoals within kmaxsubscript\ud835\udc58maxk\\_{\\\\text{max}} steps of any state. To train this policy, we run goal-conditioned behavioral cloning (GCBC) on the robot data \ud835\udc9fl,a\u222a\ud835\udc9fasubscript\ud835\udc9f\ud835\udc59\ud835\udc4esubscript\ud835\udc9f\ud835\udc4e\\\\mathcal{D}\\_{l,a}\\\\cup\\\\mathcal{D}\\_{a}. Formally, the training objective is given by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | max\u03d5\u2061\ud835\udd3c\u03c4n\u223c\ud835\udc9fl,a\u222a\ud835\udc9fa;(\ud835\udc2cin,\ud835\udc1ain)\u223c\u03c4n;j\u223cU\u200b(\\[0,kmax+k\u03b4))\u200b\\[log\u2061\u03c0\u03d5\u200b(\ud835\udc1ain\u2223\ud835\udc2cin,\ud835\udc2cjn)\\],subscriptitalic-\u03d5subscript\ud835\udd3cformulae-sequencesimilar-tosuperscript\ud835\udf0f\ud835\udc5bsubscript\ud835\udc9f\ud835\udc59\ud835\udc4esubscript\ud835\udc9f\ud835\udc4eformulae-sequencesimilar-tosuperscriptsubscript\ud835\udc2c\ud835\udc56\ud835\udc5bsuperscriptsubscript\ud835\udc1a\ud835\udc56\ud835\udc5bsuperscript\ud835\udf0f\ud835\udc5bsimilar-to\ud835\udc57\ud835\udc480subscript\ud835\udc58maxsubscript\ud835\udc58\ud835\udeffdelimited-\\[\\]subscript\ud835\udf0bitalic-\u03d5conditionalsuperscriptsubscript\ud835\udc1a\ud835\udc56\ud835\udc5bsuperscriptsubscript\ud835\udc2c\ud835\udc56\ud835\udc5bsuperscriptsubscript\ud835\udc2c\ud835\udc57\ud835\udc5b\\\\displaystyle\\\\max\\_{\\\\phi}~{}~{}\\\\mathbb{E}\\_{~{}\\\\tau^{n}\\\\sim\\\\mathcal{D}\\_{l,a}\\\\cup\\\\mathcal{D}\\_{a};~{}(\\\\mathbf{s}\\_{i}^{n},\\\\mathbf{a}\\_{i}^{n})\\\\sim\\\\tau^{n};~{}j\\\\sim U(\\[0,k\\_{\\\\text{max}}+k\\_{\\\\delta}))}\\\\left\\[\\\\log\\\\pi\\_{\\\\phi}(\\\\mathbf{a}\\_{i}^{n}\\\\mid\\\\mathbf{s}\\_{i}^{n},\\\\mathbf{s}\\_{j}^{n})\\\\right\\], |  | (2) |\\\n\\\nwhere k\u03b4subscript\ud835\udc58\ud835\udeffk\\_{\\\\delta} is another hyperparameter that provides a small amount of overhead, since the image-editing model is not perfect and may not always produce subgoals that are reachable in less than kmaxsubscript\ud835\udc58maxk\\_{\\\\text{max}} steps, especially for unseen tasks.\\\n\\\nTest-time control with \u03c0\u03d5subscript\ud835\udf0bitalic-\u03d5\\\\pi\\_{\\\\phi} and p\u03b8subscript\ud835\udc5d\ud835\udf03p\\_{\\\\theta}. Once both the goal-reaching policy \u03c0\u03d5subscript\ud835\udf0bitalic-\u03d5\\\\pi\\_{\\\\phi} and the subgoal generation model p\u03b8subscript\ud835\udc5d\ud835\udf03p\\_{\\\\theta} are trained, we utilize them together to solve new manipulation tasks based on user-specified natural language commands. Given a new scene \ud835\udc2c0testsuperscriptsubscript\ud835\udc2c0test\\\\mathbf{s}\\_{0}^{\\\\text{test}} and a language command ltestsuperscript\ud835\udc59testl^{\\\\text{test}}, SuSIE attempts to solve the task by iteratively generating subgoals and commanding the low-level policy to reach these subgoals.\\\nAt the start, we sample the first subgoal \ud835\udc2c^+\u223cp\u03b8\u200b(\ud835\udc2c+\u2223\ud835\udc2c0test,ltest)similar-tosubscript^\ud835\udc2csubscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc2csuperscriptsubscript\ud835\udc2c0testsuperscript\ud835\udc59test\\\\widehat{\\\\mathbf{s}}\\_{+}\\\\sim p\\_{\\\\theta}(\\\\mathbf{s}\\_{+}\\\\mid\\\\mathbf{s}\\_{0}^{\\\\text{test}},l^{\\\\text{test}}). Once the subgoal is generated, we then roll out the goal-reaching policy \u03c0\u03d5subscript\ud835\udf0bitalic-\u03d5\\\\pi\\_{\\\\phi} conditioned on \ud835\udc2c^+subscript^\ud835\udc2c\\\\widehat{\\\\mathbf{s}}\\_{+} for ktestsubscript\ud835\udc58testk\\_{\\\\text{test}} timesteps where ktestsubscript\ud835\udc58testk\\_{\\\\text{test}} is a test-time hyperparameter. After ktestsubscript\ud835\udc58testk\\_{\\\\text{test}} timesteps, we refresh the subgoal by sampling from the subgoal generation model again and repeat the process. In practice, for computational efficiency, we set ktestsubscript\ud835\udc58testk\\_{\\\\text{test}} to be similar to the corresponding kmaxsubscript\ud835\udc58maxk\\_{\\\\text{max}} used with the robot data and found this to be sufficient for obtaining good performance. However, given an unlimited computational budget, conventional wisdom would suggest that regenerating subgoals more often would lead to more robust control. Pseudocode for test-time control is provided in Algorithm [1]Algorithm 1 \u2023 4.2 Phase (ii): Reaching Generated Subgoals with Goal-Conditioned Policies \u2023 4 SuSIE: Subgoal Synthesis via Image Editing \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\").\\\n\\\nAlgorithm 1 SuSIE: Zero-Shot, Test-Time Execution\\\n\\\n1:Subgoal model p\u03b8\u200b(\ud835\udc2c+\u2223\ud835\udc2ct,l)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc2csubscript\ud835\udc2c\ud835\udc61\ud835\udc59p\\_{\\\\theta}(\\\\mathbf{s}\\_{+}\\\\mid\\\\mathbf{s}\\_{t},l), policy \u03c0\u03d5\u200b(\ud835\udc1a\u2223\ud835\udc2ct,\ud835\udc2c+)subscript\ud835\udf0bitalic-\u03d5conditional\ud835\udc1asubscript\ud835\udc2c\ud835\udc61subscript\ud835\udc2c\\\\pi\\_{\\\\phi}\\\\left(\\\\mathbf{a}\\\\mid\\\\mathbf{s}\\_{t},\\\\mathbf{s}\\_{+}\\\\right), time limit T\ud835\udc47T, subgoal sampling interval ktestsubscript\ud835\udc58testk\\_{\\\\text{test}}, initial state \ud835\udc2c0testsuperscriptsubscript\ud835\udc2c0test\\\\mathbf{s}\\_{0}^{\\\\text{test}}, language command ltestsuperscript\ud835\udc59testl^{\\\\text{test}}\\\n\\\n2:t\u21900\u2190\ud835\udc610t\\\\leftarrow 0\\\n\\\n3:whilet\u2264T\ud835\udc61\ud835\udc47t\\\\leq Tdo\\\n\\\n4:     Sample \ud835\udc2c^+\u223cp\u03b8\u200b(\ud835\udc2c+\u2223\ud835\udc2cttest,ltest)similar-tosubscript^\ud835\udc2csubscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc2csubscriptsuperscript\ud835\udc2ctest\ud835\udc61superscript\ud835\udc59test\\\\widehat{\\\\mathbf{s}}\\_{+}\\\\sim p\\_{\\\\theta}(\\\\mathbf{s}\\_{+}\\\\mid\\\\mathbf{s}^{\\\\text{test}}\\_{t},l^{\\\\text{test}})\u25b7\u25b7\\\\triangleright Generate a new subgoal every ktestsubscript\ud835\udc58testk\\_{\\\\text{test}} steps\\\n\\\n5:forj=1\ud835\udc571j=1 to ktestsubscript\ud835\udc58testk\\_{\\\\text{test}}do\\\n\\\n6:         Sample \ud835\udc1at\u223c\u03c0\u03d5\u200b(\ud835\udc1a\u2223\ud835\udc2cttest,\ud835\udc2c^+)similar-tosubscript\ud835\udc1a\ud835\udc61subscript\ud835\udf0bitalic-\u03d5conditional\ud835\udc1asubscriptsuperscript\ud835\udc2ctest\ud835\udc61subscript^\ud835\udc2c\\\\mathbf{a}\\_{t}\\\\sim\\\\pi\\_{\\\\phi}\\\\left(\\\\mathbf{a}\\\\mid\\\\mathbf{s}^{\\\\text{test}}\\_{t},\\\\widehat{\\\\mathbf{s}}\\_{+}\\\\right)\u25b7\u25b7\\\\triangleright Predict the action from current state and subgoal\\\n\\\n7:         Execute \ud835\udc1atsubscript\ud835\udc1a\ud835\udc61\\\\mathbf{a}\\_{t}\\\n\\\n8:\ud835\udc2ct+1test\u2190robot observation\u2190subscriptsuperscript\ud835\udc2ctest\ud835\udc611robot observation\\\\mathbf{s}^{\\\\text{test}}\\_{t+1}\\\\leftarrow\\\\text{robot observation}\\\n\\\n9:t\u2190t+1\u2190\ud835\udc61\ud835\udc611t\\\\leftarrow t+1\\\n\\\n10:endfor\\\n\\\n11:endwhile\\\n\\\n### 4.3 Implementation Details\\\n\\\nIn Phase (i), we utilize the pretrained initialization from the InstructPix2Pix model \\[ [9])\\]. We implement Equation [1]In 4.1 Phase (i): Synthesizing Subgoals From Image-Editing Models \u2023 4 SuSIE: Subgoal Synthesis via Image Editing \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\") using the standard variational lower bound objective for training diffusion models \\[ [25])\\]. Our diffusion model and policy operate on images of size 256\u00d7256256256256\\\\times 256. To ensure that this model pays attention to the input image and the language command, we apply classifier-free guidance \\[ [24])\\] separately to both the language and the image, following InstructPix2Pix.\\\nTo obtain a robust goal-reaching policy in Phase (ii), we use a diffusion policy \\[ [12]), [23])\\] that predicts chunks of 4 actions and performs temporal averaging over these predictions at test time \\[ [65])\\]. More details about the training hyperparameters and architecture are provided in Appendix [A.1]A.1 SuSIE implementation details \u2023 Appendix A Implementation Details \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\").\\\n\\\n\n## 5 Experimental Evaluation\\\n\\\nThe goal of our experiments is to evaluate the efficacy of SuSIE at improving generalization and the low-level policy execution in open-world robotic manipulation tasks. To this end, our experiments aim to study the following questions:\\\n\\\n1. 1.\\\n\\\n\\\nCan SuSIE solve a task in a novel environment, with novel objects, and with a novel language command, in zero-shot?\\\n\\\n2. 2.\\\n\\\n\\\nDoes SuSIE exhibit an elevated level of precision and dexterity compared to other approaches that do not use subgoals?\\\n\\\n3. 3.\\\n\\\n\\\nHow crucial is pretraining on Internet data, as well as cotraining on non-robot video data, for attaining zero-shot generalization?\\\n\\\n\\\nTo answer these questions, our experiments compare SuSIE to several prior methods including state-of-the-art approaches for training language-conditioned policies that leverage pretrained vision-language models in a variety of ways.\\\n\\\n### 5.1 Experimental Scenarios and Comparisons\\\n\\\n![Refer to caption]Figure 2: (Experimental setup)(L) We evaluate our method on 9 tasks across 3 real-world scenes. In terms of semantic generalization, the scenes become progressively more difficult, due to both an increasing visual departure from the robot training data and an increasingly confounding mixture of both seen and unseen objects.\\\n(R) In simulation, we evaluate our method in the zero-shot setting of the CALVIN benchmark, which involves training on 3 environments (A, B, and C) and testing on a 4th environment (D). The environments differ in table texture, positioning of furniture elements, and possible configurations of various colored blocks. Each environment comes with 34 language-specified tasks.\\\n\\\nReal-world experimental setup and datasets. We conduct our real-robot experiments on a WidowX250 robot platform. Our dataset is BridgeData V2 \\[ [59])\\], a large and diverse dataset of robotic manipulation behaviors designed for evaluating open-vocabulary instructions. The dataset contains over 60k trajectories, 45k of which are language-labeled, which we use as our language-labeled robot dataset \ud835\udc9fl,asubscript\ud835\udc9f\ud835\udc59\ud835\udc4e\\\\mathcal{D}\\_{l,a}. We use the remaining 15k trajectories as our action-only dataset \ud835\udc9fasubscript\ud835\udc9f\ud835\udc4e\\\\mathcal{D}\\_{a}.\\\n\\\nOur video-only dataset \ud835\udc9flsubscript\ud835\udc9f\ud835\udc59\\\\mathcal{D}\\_{l} is the Something-Something dataset \\[ [19])\\], a dataset consisting of short video clips of humans manipulating various objects. We chose Something-Something because it primarily contains examples of object manipulation with a still camera frame and hence exhibits a smaller domain gap to the robot data collected with an over-the-shoulder camera compared to other video datasets that contain substantial egocentric motion. We filter the Something-Something dataset using its labels to remove trajectories that contain egocentric motion or otherwise lack significant manipulation behavior, producing a final dataset size of approximately 75k video clips.\\\n\\\nOur evaluations present three different scenes (Figure [2]Figure 2 \u2023 5.1 Experimental Scenarios and Comparisons \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\")) designed specifically to test the ability of various methods at different levels of open-world generalization: Scene A: this scene includes an environment and objects that are well-represented in BridgeData V2; Scene B: this scene is situated in an environment with a seen tabletop but a novel background and distractors, where the robot must move a seen object (bell pepper) into a choice of seen container (orange pot) or unseen container (ceramic bowl); and Scene C: this scene includes a table texture unlike anything in BridgeData V2 and requires manipulating both seen and unseen objects. Semantically, Scene C is the most challenging since the robot needs to carefully ground the language command to identify the correct object while resisting its affinity for an object that is well-represented in the robot data (the spoon). Scene B also requires semantic grounding to distinguish between the seen and unseen receptacles, while adding the additional challenge of manipulating the plastic bell pepper \u2014 this object requires particular precision to grasp due to being light, smooth, and almost as wide as the gripper.\\\n\\\nSimulation tasks. We run our simulation experiments in CALVIN \\[ [45])\\], a benchmark for long horizon, language-conditioned manipulation. CALVIN consists of four simulated environments, labeled A through D, and each environment comes with a dataset of human-collected play trajectories. Approximately 35%percent3535\\\\% of the play data is annotated with language, which we use as our language-labeled robot dataset \ud835\udc9fl,asubscript\ud835\udc9f\ud835\udc59\ud835\udc4e\\\\mathcal{D}\\_{l,a}. We use the remaining 65%percent6565\\\\% of the play data as our action-only robot dataset \ud835\udc9fasubscript\ud835\udc9f\ud835\udc4e\\\\mathcal{D}\\_{a}, and do not use any video-only dataset \ud835\udc9flsubscript\ud835\udc9f\ud835\udc59\\\\mathcal{D}\\_{l} in our simulation experiments.\\\n\\\nEach environment consists of a Franka Emika Panda robot arm positioned next to a desk with various manipulatable objects, including a drawer, sliding cabinet, light switch, and various colored blocks. Environments are differentiated by their table textures, positions of the furniture objects, and configurations of colored blocks. With this benchmark, we study the most challenging zero-shot multi-environment scenario: training on A, B, and C, and testing on D. We follow the evaluation protocol from Mees et al. \\[ [45])\\]. During evaluation, a policy is given 360 timesteps to complete a chain of five language instructions. We provide more details about our experimental setup in Appendix [B]Appendix B Experimental Setup \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\").\\\n\\\nComparisons. Our experiments cover methods that utilize pretrained models of vision and language in language-guided robot control in a variety of ways. Several prior methods tackle language-based robotic control as discussed in Section [2]Related Work \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\"). In our experiments, we choose to compare to a representative subset of these prior methods to maximally cover the possible set of comparisons. In our real-world experiments, we compare to the following methods:\\\n\\\n- \u2022\\\n\\\n\\\nRT-2-X\\[ [14])\\], a 55 billion parameter vision-language model finetuned on the full Open X-Embodiment dataset to produce robot actions. The robot training data includes all of BridgeData V2, as well as a vast quantity of additional robot manipulation data totaling over 1.1 million trajectories.\\\n\\\n- \u2022\\\n\\\n\\\nMOO\\[ [57])\\], which utilizes pretrained object detectors to obtain 2D localization information for the manipulation targets and trains a language-conditioned behavioral cloning (LCBC) policy with this extra information. We re-implement MOO by using a large language model to extract the manipulation targets from the unstructured language labels in BridgeData V2, then OWL-ViT \\[ [46])\\] to extract 2D bounding boxes for these objects. Unlike MOO, at test time we manually give the policy the ground truth 2D bounding boxes of the manipulation targets.\\\n\\\n- \u2022\\\n\\\n\\\nUniPi\\[ [16])\\], which finetunes a language-conditioned video prediction model on robot data. Since the original UniPi model utilized proprietary pretrained initializations that are not available publicly, we replicated this method in two different ways: (1) using the UniPi model from HiP \\[ [2])\\], which is a PVDM \\[ [62])\\] latent video diffusion model, and (2) by implementing our own image-space video diffusion model with a factorized spatial-temporal 3D UNet similar to Ho et al. \\[ [27])\\]. We found that (1) was not able to produce reasonable-looking videos in the real robot scene (Appendix [C]Appendix C Qualtitative Examples of Video Generation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\")), so we only evaluated (2) in our real-world experiments.\\\n\\\n- \u2022\\\n\\\n\\\nLCBC, which trains a low-level policy conditioned on the language labels in BridgeData V2. This method is broadly representative of prior language-conditioned behavioral cloning methods such as RT-1 \\[ [6])\\] and BC-Z \\[ [30])\\]. We use the same architecture and hyperparameters as the low-level policy in SuSIE, as we found that they outperformed RT-1 on the BridgeData tasks.\\\n\\\n\\\nWe provide more details about the baselines and their implementations in Appendix [A.2]A.2 Baseline implementation details \u2023 Appendix A Implementation Details \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\").\\\n\\\nIn our simulation experiments, we compare to additional methods previously studied on CALVIN. This includes methods that explicitly tackle long-horizon language-based control on CALVIN such as multi-context imitation (MCIL) \\[ [41])\\], hierarchical universal language-conditioned policy (HULC) \\[ [44])\\], and improved variants of HULC \\[ [18])\\]. We also compare to other state-of-the-art methods from Ge et al. \\[ [18])\\] that employ an identical training and evaluation protocol as our experiments, namely MdetrLC \\[ [33])\\] and AugLC \\[ [50])\\].\\\n\\\n### 5.2 Can SuSIE Perform Zero-Shot Robotic Manipulation?\\\n\\\nSimulation results. We present performance in Table [1]Table 1 \u2023 5.2 Can SuSIE Perform Zero-Shot Robotic Manipulation? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\"), in terms of success rates (out of 1.0) for completing each language instruction in the chain. SuSIE obtains superior zero-shot performance (train A, B, C \u2192\u2192\\\\to test D) compared to the previous state-of-the-art. We find that our reimplementation of UniPi achieves nontrivial success, but is still significantly outperformed by SuSIE.\\\n\\\nReal-world results. We present performance of real-world evaluations in Table [2]Table 2 \u2023 5.2 Can SuSIE Perform Zero-Shot Robotic Manipulation? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\"). SuSIE achieves the best performance across the board, beating RT-2-X, a 55 billion parameter model trained on significantly more robot and Internet data. As expected, all methods perform well in Scene A, which is well-represented in the robot data. SuSIE performs uniquely well in Scene B, as it is the only method that can consistently grasp the bell pepper.\\\n\\\nIn Scene C, while SuSIE still achieves the best performance, RT-2-X comes in a close second. We hypothesize that this is because \u2014 in contrast to Scene B \u2014 all of the objects in Scene C are easy to grasp. Therefore, the low-level precision of the policy is less important, which is the primary weakness of RT-2-X, as we discuss further in the next section. Qualitatively, we observed that the failure cases in Scene C for both SuSIE and RT-2-X were almost always imprecise manipulations (failed grasps or early dropping) rather than semantic misunderstanding; of the 4 objects, the toothpaste is the most difficult to grasp, which is why its success rate is the lowest. That is, both methods solve the semantic understanding component of the tasks, but SuSIE\u2019s improved low-level precision allows it to perform slightly better.\\\n\\\nThe performance of LCBC is as expected: since it is trained only on BridgeData V2, it has no way of grounding novel objects, and often puts the bell pepper in the wrong receptacle (in Scene B) or attempts to grasp the wrong object (in Scene C). Surprisingly, it can recognize the wooden bowl in Scene C, even though that exact object does not appear in the training data; we hypothesize that the wooden bowl is distinctive enough to recognize from the word \u201cbowl\u201d alone combined with the many other bowls in BridgeData V2. MOO underperforms expectations, even with its privileged test-time information in the form of ground-truth bounding boxes. We hypothesize that, despite our best attempts, the target objects and bounding boxes extracted at train time are noisy due to the unstructured nature of BridgeData V2 and therefore only serve to confuse the policy (see Appendix [A.2.1]A.2.1 MOO \u2023 A.2 Baseline implementation details \u2023 Appendix A Implementation Details \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\")). UniPi\u2019s poor performance is due to the video model often producing temporally inconsistent frames (see Appendix [C]Appendix C Qualtitative Examples of Video Generation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\")).\\\n\\\n|  | No. of Instructions Chained |\\\n| --- | --- |\\\n|  | 1 | 2 | 3 | 4 | 5 |\\\n| --- | --- | --- | --- | --- | --- |\\\n| HULC \\[ [44])\\] | 0.43 | 0.14 | 0.04 | 0.01 | 0.00 |\\\n| MCIL \\[ [41])\\] | 0.20 | 0.00 | 0.00 | 0.00 | 0.00 |\\\n| MdetrLC \\[ [18])\\] | 0.69 | 0.38 | 0.20 | 0.07 | 0.04 |\\\n| AugLC \\[ [18])\\] | 0.69 | 0.43 | 0.22 | 0.09 | 0.05 |\\\n| LCBC \\[ [59])\\] | 0.67 | 0.31 | 0.17 | 0.10 | 0.06 |\\\n| UniPi (HiP) \\[ [2])\\] | 0.08 | 0.04 | 0.00 | 0.00 | 0.00 |\\\n| UniPi (Ours) \\[ [16])\\] | 0.56 | 0.16 | 0.08 | 0.08 | 0.04 |\\\n| SuSIE (Ours) | 0.87 | 0.69 | 0.49 | 0.38 | 0.26 |\\\n\\\nTable 1: (CALVIN benchmark performance) SuSIE is able to chain together more instructions with a higher success rate than all prior methods in the zero-shot (train A, B, C \u2192\u2192\\\\to test D) setting. We provide an example rollout in Appendix [D]Appendix D Qualitative Examples of SuSIE on CALVIN \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\").\\\n\\\n|  | Task | LCBC | MOO | UniPi | RT-2-X | SuSIE (Ours) |\\\n| --- | --- | --- | --- | --- | --- | --- |\\\n| Scene A | Eggplant on plate | 0.9 | 0.4 | 0.0 | 0.3 | 1.0 |\\\n| Carrot on plate | 0.4 | 0.3 | 0.0 | 0.6 | 0.9 |\\\n| Eggplant in pot | 0.6 | 0.7 | 0.0 | 0.4 | 0.7 |\\\n| Average | 0.63 | 0.47 | 0.0 | 0.43 | 0.87 |\\\n| Scene B | Bell pepper in pot | 0.1 | 0.0 | 0.0 | 0.0 | 0.5 |\\\n| Bell pepper in bowl | 0.3 | 0.1 | 0.1 | 0.0 | 0.5 |\\\n| Average | 0.20 | 0.05 | 0.05 | 0.00 | 0.50 |\\\n| Scene C | Toothpaste in bowl | 0.0 | 0.0 | 0.0 | 0.5 | 0.6 |\\\n| Crayon in bowl | 0.0 | 0.0 | 0.0 | 0.9 | 1.0 |\\\n| Spoon in bowl | 0.1 | 0.3 | 0.1 | 0.7 | 0.9 |\\\n| Bowl to top | 0.6 | 0.1 | 0.1 | 0.9 | 1.0 |\\\n| Average | 0.18 | 0.10 | 0.05 | 0.75 | 0.88 |\\\n\\\nTable 2: (Real-world performance) SuSIE achieves the best success rate across the board, demonstrating both high precision as well as the ability to generalize to novel environments, objects, and language commands.\\\n\\\n### 5.3 Does SuSIE Improve Precision and Low-Level Skill Execution?\\\n\\\n![Refer to caption]Figure 3: (Visualizing rollouts) Visualized rollouts from SuSIE, RT-2-X, and Oracle GCBC on the task \u201cput the yellow bell pepper in the ceramic bowl\u201d from Scene B. While RT-2-X and Oracle GCBC fail to grasp the object, the generated subgoals from SuSIE precisely guide the low-level controller, improving low-level skill execution for difficult manipulation tasks.\\\n\\\n|  | Task | Oracle GCBC | SuSIE (Ours) |\\\n| Scene A | Eggplant on plate | 0.7 | 1.0 |\\\n| Carrot on plate | 0.8 | 0.9 |\\\n| Eggplant in pot | 1.0 | 0.7 |\\\n| Average | 0.83 | 0.87 |\\\n| Scene B | Bell pepper in pot | 0.1 | 0.5 |\\\n| Bell pepper in bowl | 0.0 | 0.5 |\\\n| Average | 0.05 | 0.50 |\\\n| Scene C | Toothpaste in bowl | 0.7 | 0.6 |\\\n| Crayon in bowl | 1.0 | 1.0 |\\\n| Spoon in bowl | 0.8 | 0.9 |\\\n| Bowl to top | 0.6 | 1.0 |\\\n| Average | 0.78 | 0.88 |\\\n| CALVIN | Move slider right/left | 0.52 | 0.86 |\\\n| Turn on/off light bulb | 0.74 | 0.96 |\\\n| Open/close drawer | 1.00 | 0.98 |\\\n| Turn on/off LED | 0.36 | 1.00 |\\\n| Average | 0.66 | 0.95 |\\\n\\\nTable 3: (Comparison to GCBC with oracle goals) Executing generated subgoals improves performance even compared to executing privileged ground-truth final goals.\\\n\\\nOur real-world and simulated results clearly demonstrate the efficacy of SuSIE in executing novel language commands in a variety of scenes. In Section [5.2]Can SuSIE Perform Zero-Shot Robotic Manipulation? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\"), we hypothesize that the advantage of SuSIE is twofold: semantic generalization due to Internet and video pretraining, and low-level precision due to subgoal guidance. In this section, we aim to validate the latter half of this hypothesis. To this end, we train an Oracle GCBC policy, which is identical to the low-level policy in SuSIE except that it is trained with a goal horizon that extends to the end of each trajectory. At test time, we provide the policy with a privileged real goal image of the fully completed task, eliding the need for any semantic understanding. Thus, the only advantage of SuSIE over Oracle GCBC is the subgoal guidance, while SuSIE is disadvantaged by additionally needing to interpret the language instruction and generate subgoals for the correct task.\\\n\\\nAs demonstrated in Table [3]Table 3 \u2023 5.3 Does SuSIE Improve Precision and Low-Level Skill Execution? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\"), although Oracle GCBC is a strong baseline, SuSIE is still the best-performing method on average. In particular, we observed that Oracle GCBC is still unable to grasp the bell pepper in Scene B due to a lack of low-level precision. Figure [3]Figure 3 \u2023 5.3 Does SuSIE Improve Precision and Low-Level Skill Execution? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\") provides a qualitative visualization of SuSIE grasping the bell pepper while Oracle GCBC and RT-2-X fail to do so. These results validate the hypothesis that, in addition to enabling semantic generalization, SuSIE also improves low-level precision and dexterity by decomposing the problem into a two-level hierarchy.\\\n\\\n![Refer to caption]Figure 4: (Comparison of subgoal quality) A comparison between 3 subgoal generation models: one trained on both robot and video data (Bridge + Smthn-Smthn), used throughout this paper; one trained on robot data only (Bridge Only); and one trained without InstructPix2Pix initialization (From Scratch). The top half (In Distribution) comes from the BridgeData V2 validation set, while the bottom half (Out of Distribution) comes from our evaluation Scenes B and C, unseen in BridgeData V2. Both Internet-scale pretraining and video cotraining and important for generating high-quality subgoals, especially in the zero-shot generalization setting.\\\n\\\n|  | Task | BridgeData Only | BridgeData + Something-Something |\\\n| --- | --- | --- | --- |\\\n| Scene B | Bell pepper in pot | 0.2 | 0.5 |\\\n| Bell pepper in bowl | 0.4 | 0.5 |\\\n| Average | 0.30 | 0.50 |\\\n| Scene C | Toothpaste in bowl | 0.7 | 0.6 |\\\n| Crayon in bowl | 0.9 | 1.0 |\\\n| Spoon in bowl | 0.9 | 0.9 |\\\n| Bowl to top | 0.7 | 1.0 |\\\n| Average | 0.80 | 0.88 |\\\n\\\nTable 4: (Comparison to BridgeData-only subgoal generation model) Cotraining the subgoal generation model on the Something-Something dataset improves performance in Scenes B and C, which are unseen in BridgeData V2.\\\n\\\n### 5.4 Are Internet and Video Training Crucial for Zero-Shot Generalization?\\\n\\\nFinally, we conduct an experiment to understand the effect of both Internet-scale pretraining (in the form of InstructPix2Pix initialization) and video cotraining (in the form of training on BridgeData V2 and Something-Something simultaneously). We train two additional subgoal generation models: one robot-only model trained with InstructPix2Pix initialization but only on BridgeData V2, and one from-scratch model trained without InstructPix2Pix initialization at all. The from-scratch model uses the same frozen text encoder, image encoder, and UNet architecture as InstructPix2Pix, but initializes the UNet with random weights.\\\n\\\nWe present sample generations from these models in Figure [4]Figure 4 \u2023 5.3 Does SuSIE Improve Precision and Low-Level Skill Execution? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\"). The generations of the from-scratch model are consistently low-quality, either misunderstanding the task, producing significant artifacts, or failing to edit the image at all; this demonstrates the importance of initializing from Internet-scale pretrained weights. As one might expect, the BridgeData-only model is on par with the full Something-Something model on in-distribution tasks, which come from the BridgeData V2 validation set. However, on out-of-distribution tasks, the BridgeData-only model has an increased propensity to hallucinate background items or misunderstand the task. We found that for moving the wooden bowl, in particular, the full Something-Something model is the only one that can produce fully correct subgoals.\\\n\\\nAs additional evidence, we present a quantitative evaluation of the BridgeData-only model on the tasks from Scenes B and C in Table [4]Table 4 \u2023 5.3 Does SuSIE Improve Precision and Low-Level Skill Execution? \u2023 5 Experimental Evaluation \u2023 Zero-Shot Robotic Manipulation with Pretrained Image-Editing Diffusion Models\"). In real-world task execution, the difference between the BridgeData-only model and the full Something-Something model is not as pronounced as in the qualitative samples. This is because we find that the low-level goal-conditioned policy is fairly robust to hallucinations of background items, suggesting that it primarily attends to the gripper pose and the target object. However, the overall increased quality of the subgoals from the full model still produces a small quantitative improvement on average.\\\n\\\n\n## 6 Discussion and Future Work\\\n\\\nWe presented a method for robotic control from language instructions that generates subgoals to guide a low-level goal-conditioned policy. The subgoals are generated by an image-editing diffusion model finetuned on video data.\\\nThis system improves both zero-shot generalization to new objects and the overall precision of the policy because the subgoal model incorporates semantic benefits from pretraining and commands the low-level policy with fine-grained guidance. Our experiments show that SuSIE improves over prior techniques on the CALVIN benchmark and improves visual generalization and low-level control on real-world manipulation tasks. In the real world, SuSIE outperforms language-conditioned behavioral cloning, a privileged goal-conditioned policy that gets access to a ground-truth final goal, as well the state-of-the-art instruction-following approach, RT-2-X, which is trained on more than an order of magnitude more robot data (over 1.1 million trajectories for RT-2-X, vs. 60k for ours).\\\n\\\nOur method is simple and provides good performance, but it does have limitations that suggest promising directions for future work.\\\nFor instance, the diffusion model and the low-level policy are trained separately, meaning the diffusion model is unaware of the capabilities of the low-level policy \u2014 it is trained on the same data, but assumes that anything that is reachable in the data can also be reached by the policy. We hypothesize that performance can be improved by making the diffusion model aware of the low-level policy\u2019s capabilities. More broadly, we found the performance of our method to often be bottlenecked by the performance of the low-level policy, suggesting that addressing either of these limitations might lead to a more performant method for importing Internet-scale knowledge into robotic manipulation.\\\n\\\n#### Acknowledgments\\\n\\\nWe thank Quan Vuong, Vincent Vanhoucke, Karl Pertsch, and Oleh Rybkin for their feedback on earlier versions of the paper. We thank Anurag Ajay, Zoey Chen, and Quan Vuong for their support with baseline approaches. Aviral Kumar thanks Abhishek Gupta, Sherry Yang, and Boyi Li for informative discussions. We also thank the TRC program from Google Cloud for their cloud TPU donations that were crucial for running our experiments.\\\n\\\nKevin Black and Pranav Atreya are supported by the NSF Graduate Research Fellowship. Mitsuhiko Nakamoto is supported by the Nakajima Foundation Fellowship.\\\n\\\n</Content></Candidate>\n\n<Candidate>Candidate [1]:\nDenoising diffusion probabilistic models.\n\n<Abstract>Abstract: We present high quality image synthesis results using diffusion probabilistic\nmodels, a class of latent variable models inspired by considerations from\nnonequilibrium thermodynamics. Our best results are obtained by training on a\nweighted variational bound designed according to a novel connection between\ndiffusion probabilistic models and denoising score matching with Langevin\ndynamics, and our models naturally admit a progressive lossy decompression\nscheme that can be interpreted as a generalization of autoregressive decoding.\nOn the unconditional CIFAR10 dataset, we obtain an Inception score of 9.46 and\na state-of-the-art FID score of 3.17. On 256x256 LSUN, we obtain sample quality\nsimilar to ProgressiveGAN. Our implementation is available at\nhttps://github.com/hojonathanho/diffusion</Abstract><Content>\n## 1 Introduction\nDeep generative models of all kinds have recently exhibited high quality samples in a wide variety of data modalities. Generative adversarial networks (GANs), autoregressive models, flows, and variational autoencoders (VAEs) have synthesized striking image and audio samples \\[ [14]), [27]), [3]), [58]), [38]), [25]), [10]), [32]), [44]), [57]), [26]), [33]), [45])\\], and there have been remarkable advances in energy-based modeling and score matching that have produced images comparable to those of GANs \\[ [11]), [55])\\].\n\nThis paper presents progress in diffusion probabilistic models \\[ [53])\\]. A diffusion probabilistic model (which we will call a \u201cdiffusion model\u201d for brevity) is a parameterized Markov chain trained using variational inference to produce samples matching the data after finite time. Transitions of this chain are learned to reverse a diffusion process, which is a Markov chain that gradually adds noise to the data in the opposite direction of sampling until signal is destroyed.\nWhen the diffusion consists of small amounts of Gaussian noise, it is sufficient to set the sampling chain transitions to conditional Gaussians too, allowing for a particularly simple neural network parameterization.\n\nDiffusion models are straightforward to define and efficient to train, but to the best of our knowledge, there has been no demonstration that they are capable of generating high quality samples. We show that diffusion models actually are capable of generating high quality samples, sometimes better than the published results on other types of generative models ( [Section4]Experiments \u2023 Denoising Diffusion Probabilistic Models\")).\nIn addition, we show that a certain parameterization of diffusion models reveals an equivalence with denoising score matching over multiple noise levels during training and with annealed Langevin dynamics during sampling ( [Section3.2]Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\")) \\[ [55]), [61])\\].\nWe obtained our best sample quality results using this parameterization ( [Section4.2]Reverse process parameterization and training objective ablation \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\")), so we consider this equivalence to be one of our primary contributions.\n\nDespite their sample quality, our models do not have competitive log likelihoods compared to other likelihood-based models (our models do, however, have log likelihoods better than the large estimates annealed importance sampling has been reported to produce for energy based models and score matching \\[ [11]), [55])\\]).\nWe find that the majority of our models\u2019 lossless codelengths are consumed to describe imperceptible image details ( [Section4.3]Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\")). We present a more refined analysis of this phenomenon in the language of lossy compression, and we show that the sampling procedure of diffusion models is a type of progressive decoding that resembles autoregressive decoding along a bit ordering that vastly generalizes what is normally possible with autoregressive models.\n\n## 2 Background\nDiffusion models \\[ [53])\\] are latent variable models of the form p\u03b8\u200b(\ud835\udc310)\u2254\u222bp\u03b8\u200b(\ud835\udc310:T)\u200b\ud835\udc51\ud835\udc311:T\u2254subscript\ud835\udc5d\ud835\udf03subscript\ud835\udc310subscript\ud835\udc5d\ud835\udf03subscript\ud835\udc31:0\ud835\udc47differential-dsubscript\ud835\udc31:1\ud835\udc47p\\_{\\\\theta}(\\\\mathbf{x}\\_{0})\\\\coloneqq\\\\int p\\_{\\\\theta}(\\\\mathbf{x}\\_{0:T})\\\\,d\\\\mathbf{x}\\_{1:T}, where \ud835\udc311,\u2026,\ud835\udc31Tsubscript\ud835\udc311\u2026subscript\ud835\udc31\ud835\udc47\\\\mathbf{x}\\_{1},\\\\dotsc,\\\\mathbf{x}\\_{T} are latents of the same dimensionality as the data \ud835\udc310\u223cq\u200b(\ud835\udc310)similar-tosubscript\ud835\udc310\ud835\udc5esubscript\ud835\udc310\\\\mathbf{x}\\_{0}\\\\sim q(\\\\mathbf{x}\\_{0}). The joint distribution p\u03b8\u200b(\ud835\udc310:T)subscript\ud835\udc5d\ud835\udf03subscript\ud835\udc31:0\ud835\udc47p\\_{\\\\theta}(\\\\mathbf{x}\\_{0:T}) is called the _reverse process_, and it is defined as a Markov chain with learned Gaussian transitions starting at p\u200b(\ud835\udc31T)=\ud835\udca9\u200b(\ud835\udc31T;\ud835\udfce,\ud835\udc08)\ud835\udc5dsubscript\ud835\udc31\ud835\udc47\ud835\udca9subscript\ud835\udc31\ud835\udc470\ud835\udc08p(\\\\mathbf{x}\\_{T})=\\\\mathcal{N}(\\\\mathbf{x}\\_{T};\\\\mathbf{0},\\\\mathbf{I}):\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | p\u03b8\u200b(\ud835\udc310:T)subscript\ud835\udc5d\ud835\udf03subscript\ud835\udc31:0\ud835\udc47\\\\displaystyle p\\_{\\\\theta}(\\\\mathbf{x}\\_{0:T}) | \u2254p\u200b(\ud835\udc31T)\u200b\u220ft=1Tp\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t),p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)\u2254\ud835\udca9\u200b(\ud835\udc31t\u22121;\ud835\udf41\u03b8\u200b(\ud835\udc31t,t),\ud835\udeba\u03b8\u200b(\ud835\udc31t,t))formulae-sequence\u2254absent\ud835\udc5dsubscript\ud835\udc31\ud835\udc47superscriptsubscriptproduct\ud835\udc611\ud835\udc47subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61\u2254subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61\ud835\udca9subscript\ud835\udc31\ud835\udc611subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61subscript\ud835\udeba\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61\\\\displaystyle\\\\coloneqq p(\\\\mathbf{x}\\_{T})\\\\prod\\_{t=1}^{T}p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t}),\\\\qquad p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})\\\\coloneqq\\\\mathcal{N}(\\\\mathbf{x}\\_{t-1};{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t),{\\\\boldsymbol{\\\\Sigma}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)) |  | (1) |\n\nWhat distinguishes diffusion models from other types of latent variable models is that the approximate posterior q\u200b(\ud835\udc311:T\\|\ud835\udc310)\ud835\udc5econditionalsubscript\ud835\udc31:1\ud835\udc47subscript\ud835\udc310q(\\\\mathbf{x}\\_{1:T}\\|\\\\mathbf{x}\\_{0}), called the _forward process_ or _diffusion process_, is fixed to a Markov chain that gradually adds Gaussian noise to the data according to a variance schedule \u03b21,\u2026,\u03b2Tsubscript\ud835\udefd1\u2026subscript\ud835\udefd\ud835\udc47\\\\beta\\_{1},\\\\dotsc,\\\\beta\\_{T}:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | q\u200b(\ud835\udc311:T\\|\ud835\udc310)\ud835\udc5econditionalsubscript\ud835\udc31:1\ud835\udc47subscript\ud835\udc310\\\\displaystyle q(\\\\mathbf{x}\\_{1:T}\\|\\\\mathbf{x}\\_{0}) | \u2254\u220ft=1Tq\u200b(\ud835\udc31t\\|\ud835\udc31t\u22121),q\u200b(\ud835\udc31t\\|\ud835\udc31t\u22121)\u2254\ud835\udca9\u200b(\ud835\udc31t;1\u2212\u03b2t\u200b\ud835\udc31t\u22121,\u03b2t\u200b\ud835\udc08)formulae-sequence\u2254absentsuperscriptsubscriptproduct\ud835\udc611\ud835\udc47\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc31\ud835\udc611\u2254\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc31\ud835\udc611\ud835\udca9subscript\ud835\udc31\ud835\udc611subscript\ud835\udefd\ud835\udc61subscript\ud835\udc31\ud835\udc611subscript\ud835\udefd\ud835\udc61\ud835\udc08\\\\displaystyle\\\\coloneqq\\\\prod\\_{t=1}^{T}q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t-1}),\\\\qquad q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t-1})\\\\coloneqq\\\\mathcal{N}(\\\\mathbf{x}\\_{t};\\\\sqrt{1-\\\\beta\\_{t}}\\\\mathbf{x}\\_{t-1},\\\\beta\\_{t}\\\\mathbf{I}) |  | (2) |\n\n![Refer to caption]Figure 2: The directed graphical model considered in this work.\n\nTraining is performed by optimizing the usual variational bound on negative log likelihood:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c\u200b\\[\u2212log\u2061p\u03b8\u200b(\ud835\udc310)\\]\u2264\ud835\udd3cq\u200b\\[\u2212log\u2061p\u03b8\u200b(\ud835\udc310:T)q\u200b(\ud835\udc311:T\\|\ud835\udc310)\\]=\ud835\udd3cq\u200b\\[\u2212log\u2061p\u200b(\ud835\udc31T)\u2212\u2211t\u22651log\u2061p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)q\u200b(\ud835\udc31t\\|\ud835\udc31t\u22121)\\]\u2255L\ud835\udd3cdelimited-\\[\\]subscript\ud835\udc5d\ud835\udf03subscript\ud835\udc310subscript\ud835\udd3c\ud835\udc5edelimited-\\[\\]subscript\ud835\udc5d\ud835\udf03subscript\ud835\udc31:0\ud835\udc47\ud835\udc5econditionalsubscript\ud835\udc31:1\ud835\udc47subscript\ud835\udc310subscript\ud835\udd3c\ud835\udc5edelimited-\\[\\]\ud835\udc5dsubscript\ud835\udc31\ud835\udc47subscript\ud835\udc611subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc31\ud835\udc611\u2255\ud835\udc3f\\\\displaystyle\\\\mathbb{E}\\\\left\\[-\\\\log p\\_{\\\\theta}(\\\\mathbf{x}\\_{0})\\\\right\\]\\\\leq\\\\mathbb{E}\\_{q}\\\\!\\\\left\\[-\\\\log\\\\frac{p\\_{\\\\theta}(\\\\mathbf{x}\\_{0:T})}{q(\\\\mathbf{x}\\_{1:T}\\|\\\\mathbf{x}\\_{0})}\\\\right\\]=\\\\mathbb{E}\\_{q}\\\\bigg{\\[}-\\\\log p(\\\\mathbf{x}\\_{T})-\\\\sum\\_{t\\\\geq 1}\\\\log\\\\frac{p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})}{q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t-1})}\\\\bigg{\\]}\\\\eqqcolon L |  | (3) |\n\nThe forward process variances \u03b2tsubscript\ud835\udefd\ud835\udc61\\\\beta\\_{t} can be learned by reparameterization \\[ [33])\\] or held constant as hyperparameters, and\nexpressiveness of the reverse process is ensured in part by the choice of Gaussian conditionals in p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t}), because both processes have the same functional form when \u03b2tsubscript\ud835\udefd\ud835\udc61\\\\beta\\_{t} are small \\[ [53])\\].\nA notable property of the forward process is that it admits sampling \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t} at an arbitrary timestep t\ud835\udc61t in closed form: using the notation \u03b1t\u22541\u2212\u03b2t\u2254subscript\ud835\udefc\ud835\udc611subscript\ud835\udefd\ud835\udc61\\\\alpha\\_{t}\\\\coloneqq 1-\\\\beta\\_{t} and \u03b1\u00aft\u2254\u220fs=1t\u03b1s\u2254subscript\u00af\ud835\udefc\ud835\udc61superscriptsubscriptproduct\ud835\udc601\ud835\udc61subscript\ud835\udefc\ud835\udc60\\\\bar{\\\\alpha}\\_{t}\\\\coloneqq\\\\prod\\_{s=1}^{t}\\\\alpha\\_{s}, we have\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | q\u200b(\ud835\udc31t\\|\ud835\udc310)=\ud835\udca9\u200b(\ud835\udc31t;\u03b1\u00aft\u200b\ud835\udc310,(1\u2212\u03b1\u00aft)\u200b\ud835\udc08)\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc310\ud835\udca9subscript\ud835\udc31\ud835\udc61subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc3101subscript\u00af\ud835\udefc\ud835\udc61\ud835\udc08\\\\displaystyle q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{0})=\\\\mathcal{N}(\\\\mathbf{x}\\_{t};\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}}\\\\mathbf{x}\\_{0},(1-\\\\bar{\\\\alpha}\\_{t})\\\\mathbf{I}) |  | (4) |\n\nEfficient training is therefore possible by optimizing random terms of L\ud835\udc3fL with stochastic gradient descent.\nFurther improvements come from variance reduction by rewriting L\ud835\udc3fL [3]Equation 3 \u2023 2 Background \u2023 Denoising Diffusion Probabilistic Models\") as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3cq\u200b\\[DKL\u200b(q\u200b(\ud835\udc31T\\|\ud835\udc310)\u2225p\u200b(\ud835\udc31T))\u23dfLT+\u2211t>1DKL(q(\ud835\udc31t\u22121\\|\ud835\udc31t,\ud835\udc310)\u2225p\u03b8(\ud835\udc31t\u22121\\|\ud835\udc31t))\u23dfLt\u22121\u200b\u2212log\u2061p\u03b8\u200b(\ud835\udc310\\|\ud835\udc311)\u23dfL0\\]\\\\displaystyle\\\\mathbb{E}\\_{q}\\\\bigg{\\[}\\\\underbrace{D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x}\\_{T}\\|\\\\mathbf{x}\\_{0})~{}\\\\\\|~{}p(\\\\mathbf{x}\\_{T})\\\\right)}\\_{L\\_{T}}+\\\\sum\\_{t>1}\\\\underbrace{D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t},\\\\mathbf{x}\\_{0})~{}\\\\\\|~{}p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})\\\\right)}\\_{L\\_{t-1}}\\\\underbrace{-\\\\log p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}\\|\\\\mathbf{x}\\_{1})}\\_{L\\_{0}}\\\\bigg{\\]} |  | (5) |\n\n(See [AppendixA]Appendix A Extended derivations \u2023 Denoising Diffusion Probabilistic Models\") for details. The labels on the terms are used in [Section3]Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\").) [Equation5]In 2 Background \u2023 Denoising Diffusion Probabilistic Models\") uses KL divergence to directly compare p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t}) against forward process posteriors, which are tractable when conditioned on \ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0}:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | q\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t,\ud835\udc310)\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310\\\\displaystyle q(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t},\\\\mathbf{x}\\_{0}) | =\ud835\udca9\u200b(\ud835\udc31t\u22121;\ud835\udf41~t\u200b(\ud835\udc31t,\ud835\udc310),\u03b2~t\u200b\ud835\udc08),absent\ud835\udca9subscript\ud835\udc31\ud835\udc611subscript~\ud835\udf41\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310subscript~\ud835\udefd\ud835\udc61\ud835\udc08\\\\displaystyle=\\\\mathcal{N}(\\\\mathbf{x}\\_{t-1};\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}(\\\\mathbf{x}\\_{t},\\\\mathbf{x}\\_{0}),\\\\tilde{\\\\beta}\\_{t}\\\\mathbf{I}), |  | (6) |\n|  | where\ud835\udf41~t\u200b(\ud835\udc31t,\ud835\udc310)wheresubscript~\ud835\udf41\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310\\\\displaystyle\\\\text{where}\\\\quad\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}(\\\\mathbf{x}\\_{t},\\\\mathbf{x}\\_{0}) | \u2254\u03b1\u00aft\u22121\u200b\u03b2t1\u2212\u03b1\u00aft\u200b\ud835\udc310+\u03b1t\u200b(1\u2212\u03b1\u00aft\u22121)1\u2212\u03b1\u00aft\u200b\ud835\udc31tand\u03b2~t\u22541\u2212\u03b1\u00aft\u221211\u2212\u03b1\u00aft\u200b\u03b2tformulae-sequence\u2254absentsubscript\u00af\ud835\udefc\ud835\udc611subscript\ud835\udefd\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc310subscript\ud835\udefc\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc6111subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc61and\u2254subscript~\ud835\udefd\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc6111subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udefd\ud835\udc61\\\\displaystyle\\\\coloneqq\\\\frac{\\\\sqrt{\\\\bar{\\\\alpha}\\_{t-1}}\\\\beta\\_{t}}{1-\\\\bar{\\\\alpha}\\_{t}}\\\\mathbf{x}\\_{0}+\\\\frac{\\\\sqrt{\\\\alpha\\_{t}}(1-\\\\bar{\\\\alpha}\\_{t-1})}{1-\\\\bar{\\\\alpha}\\_{t}}\\\\mathbf{x}\\_{t}\\\\quad\\\\text{and}\\\\quad\\\\tilde{\\\\beta}\\_{t}\\\\coloneqq\\\\frac{1-\\\\bar{\\\\alpha}\\_{t-1}}{1-\\\\bar{\\\\alpha}\\_{t}}\\\\beta\\_{t} |  | (7) |\n\nConsequently, all KL divergences in [Eq.5]In 2 Background \u2023 Denoising Diffusion Probabilistic Models\") are comparisons between Gaussians, so they can be calculated in a Rao-Blackwellized fashion with closed form expressions instead of high variance Monte Carlo estimates.\n\n## 3 Diffusion models and denoising autoencoders\nDiffusion models might appear to be a restricted class of latent variable models, but they allow a large number of degrees of freedom in implementation. One must choose the variances \u03b2tsubscript\ud835\udefd\ud835\udc61\\\\beta\\_{t} of the forward process and the model architecture and Gaussian distribution parameterization of the reverse process.\nTo guide our choices, we establish a new explicit connection between diffusion models and denoising score matching ( [Section3.2]Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\")) that leads to a simplified, weighted variational bound objective for diffusion models ( [Section3.4]Simplified training objective \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\")). Ultimately, our model design is justified by simplicity and empirical results ( [Section4]Experiments \u2023 Denoising Diffusion Probabilistic Models\")). Our discussion is categorized by the terms of [Eq.5]In 2 Background \u2023 Denoising Diffusion Probabilistic Models\").\n\n### 3.1 Forward process and LTsubscript\ud835\udc3f\ud835\udc47L\\_{T}\n\nWe ignore the fact that the forward process variances \u03b2tsubscript\ud835\udefd\ud835\udc61\\\\beta\\_{t} are learnable by reparameterization and instead fix them to constants (see [Section4]Experiments \u2023 Denoising Diffusion Probabilistic Models\") for details).\nThus, in our implementation, the approximate posterior q\ud835\udc5eq has no learnable parameters, so LTsubscript\ud835\udc3f\ud835\udc47L\\_{T} is a constant during training and can be ignored.\n\n### 3.2 Reverse process and L1:T\u22121subscript\ud835\udc3f:1\ud835\udc471L\\_{1:T-1}\n\nNow we discuss our choices in p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)=\ud835\udca9\u200b(\ud835\udc31t\u22121;\ud835\udf41\u03b8\u200b(\ud835\udc31t,t),\ud835\udeba\u03b8\u200b(\ud835\udc31t,t))subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61\ud835\udca9subscript\ud835\udc31\ud835\udc611subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61subscript\ud835\udeba\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})=\\\\mathcal{N}(\\\\mathbf{x}\\_{t-1};{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t),{\\\\boldsymbol{\\\\Sigma}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)) for 1<t\u2264T1\ud835\udc61\ud835\udc47{1<t\\\\leq T}.\nFirst, we set \ud835\udeba\u03b8\u200b(\ud835\udc31t,t)=\u03c3t2\u200b\ud835\udc08subscript\ud835\udeba\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61superscriptsubscript\ud835\udf0e\ud835\udc612\ud835\udc08{\\\\boldsymbol{\\\\Sigma}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)=\\\\sigma\\_{t}^{2}\\\\mathbf{I} to untrained time dependent constants. Experimentally, both \u03c3t2=\u03b2tsuperscriptsubscript\ud835\udf0e\ud835\udc612subscript\ud835\udefd\ud835\udc61\\\\sigma\\_{t}^{2}=\\\\beta\\_{t} and \u03c3t2=\u03b2~t=1\u2212\u03b1\u00aft\u221211\u2212\u03b1\u00aft\u200b\u03b2tsuperscriptsubscript\ud835\udf0e\ud835\udc612subscript~\ud835\udefd\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc6111subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udefd\ud835\udc61\\\\sigma\\_{t}^{2}=\\\\tilde{\\\\beta}\\_{t}=\\\\frac{1-\\\\bar{\\\\alpha}\\_{t-1}}{1-\\\\bar{\\\\alpha}\\_{t}}\\\\beta\\_{t} had similar results. The first choice is optimal for \ud835\udc310\u223c\ud835\udca9\u200b(\ud835\udfce,\ud835\udc08)similar-tosubscript\ud835\udc310\ud835\udca90\ud835\udc08\\\\mathbf{x}\\_{0}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}), and the second is optimal for \ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0} deterministically set to one point. These are the two extreme choices corresponding to upper and lower bounds on reverse process entropy for data with coordinatewise unit variance \\[ [53])\\].\n\nSecond, to represent the mean \ud835\udf41\u03b8\u200b(\ud835\udc31t,t)subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t), we propose a specific parameterization motivated by the following analysis of Ltsubscript\ud835\udc3f\ud835\udc61L\\_{t}.\nWith p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)=\ud835\udca9\u200b(\ud835\udc31t\u22121;\ud835\udf41\u03b8\u200b(\ud835\udc31t,t),\u03c3t2\u200b\ud835\udc08)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61\ud835\udca9subscript\ud835\udc31\ud835\udc611subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61superscriptsubscript\ud835\udf0e\ud835\udc612\ud835\udc08p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})=\\\\mathcal{N}(\\\\mathbf{x}\\_{t-1};{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t),\\\\sigma\\_{t}^{2}\\\\mathbf{I}), we can write:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Lt\u22121=\ud835\udd3cq\u200b\\[12\u200b\u03c3t2\u200b\u2016\ud835\udf41~t\u200b(\ud835\udc31t,\ud835\udc310)\u2212\ud835\udf41\u03b8\u200b(\ud835\udc31t,t)\u20162\\]+Csubscript\ud835\udc3f\ud835\udc611subscript\ud835\udd3c\ud835\udc5edelimited-\\[\\]12superscriptsubscript\ud835\udf0e\ud835\udc612superscriptnormsubscript~\ud835\udf41\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc612\ud835\udc36\\\\displaystyle L\\_{t-1}=\\\\mathbb{E}\\_{q}\\\\!\\\\left\\[\\\\frac{1}{2\\\\sigma\\_{t}^{2}}\\\\\\|\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}(\\\\mathbf{x}\\_{t},\\\\mathbf{x}\\_{0})-{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)\\\\\\|^{2}\\\\right\\]+C |  | (8) |\n\nwhere C\ud835\udc36C is a constant that does not depend on \u03b8\ud835\udf03\\\\theta. So, we see that the most straightforward parameterization of \ud835\udf41\u03b8subscript\ud835\udf41\ud835\udf03{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta} is a model that predicts \ud835\udf41~tsubscript~\ud835\udf41\ud835\udc61\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}, the forward process posterior mean.\nHowever, we can expand [Eq.8]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") further by reparameterizing [Eq.4]In 2 Background \u2023 Denoising Diffusion Probabilistic Models\") as \ud835\udc31t\u200b(\ud835\udc310,\u03f5)=\u03b1\u00aft\u200b\ud835\udc310+1\u2212\u03b1\u00aft\u200b\u03f5subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310bold-italic-\u03f5subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc3101subscript\u00af\ud835\udefc\ud835\udc61bold-italic-\u03f5\\\\mathbf{x}\\_{t}(\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}})=\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}}\\\\mathbf{x}\\_{0}+\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}{\\\\boldsymbol{\\\\epsilon}} for \u03f5\u223c\ud835\udca9\u200b(\ud835\udfce,\ud835\udc08)similar-tobold-italic-\u03f5\ud835\udca90\ud835\udc08{\\\\boldsymbol{\\\\epsilon}}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}) and applying the forward process posterior formula [7]Equation 7 \u2023 2 Background \u2023 Denoising Diffusion Probabilistic Models\"):\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | Lt\u22121\u2212Csubscript\ud835\udc3f\ud835\udc611\ud835\udc36\\\\displaystyle L\\_{t-1}-C | =\ud835\udd3c\ud835\udc310,\u03f5\u200b\\[12\u200b\u03c3t2\u200b\u2016\ud835\udf41~t\u200b(\ud835\udc31t\u200b(\ud835\udc310,\u03f5),1\u03b1\u00aft\u200b(\ud835\udc31t\u200b(\ud835\udc310,\u03f5)\u22121\u2212\u03b1\u00aft\u200b\u03f5))\u2212\ud835\udf41\u03b8\u200b(\ud835\udc31t\u200b(\ud835\udc310,\u03f5),t)\u20162\\]absentsubscript\ud835\udd3csubscript\ud835\udc310bold-italic-\u03f5delimited-\\[\\]12superscriptsubscript\ud835\udf0e\ud835\udc612superscriptnormsubscript~\ud835\udf41\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310bold-italic-\u03f51subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310bold-italic-\u03f51subscript\u00af\ud835\udefc\ud835\udc61bold-italic-\u03f5subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310bold-italic-\u03f5\ud835\udc612\\\\displaystyle=\\\\mathbb{E}\\_{\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}}}\\\\!\\\\left\\[\\\\frac{1}{2\\\\sigma\\_{t}^{2}}\\\\left\\\\\\|\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}\\\\!\\\\left(\\\\mathbf{x}\\_{t}(\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}}),\\\\frac{1}{\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}}}(\\\\mathbf{x}\\_{t}(\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}})-\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}{\\\\boldsymbol{\\\\epsilon}})\\\\right)-{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t}(\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}}),t)\\\\right\\\\\\|^{2}\\\\right\\] |  | (9) |\n|  |  | =\ud835\udd3c\ud835\udc310,\u03f5\u200b\\[12\u200b\u03c3t2\u200b\u20161\u03b1t\u200b(\ud835\udc31t\u200b(\ud835\udc310,\u03f5)\u2212\u03b2t1\u2212\u03b1\u00aft\u200b\u03f5)\u2212\ud835\udf41\u03b8\u200b(\ud835\udc31t\u200b(\ud835\udc310,\u03f5),t)\u20162\\]absentsubscript\ud835\udd3csubscript\ud835\udc310bold-italic-\u03f5delimited-\\[\\]12superscriptsubscript\ud835\udf0e\ud835\udc612superscriptnorm1subscript\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310bold-italic-\u03f5subscript\ud835\udefd\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61bold-italic-\u03f5subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61subscript\ud835\udc310bold-italic-\u03f5\ud835\udc612\\\\displaystyle=\\\\mathbb{E}\\_{\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}}}\\\\!\\\\left\\[\\\\frac{1}{2\\\\sigma\\_{t}^{2}}\\\\left\\\\\\|\\\\frac{1}{\\\\sqrt{\\\\alpha\\_{t}}}\\\\left(\\\\mathbf{x}\\_{t}(\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}})-\\\\frac{\\\\beta\\_{t}}{\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}}{\\\\boldsymbol{\\\\epsilon}}\\\\right)-{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t}(\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}}),t)\\\\right\\\\\\|^{2}\\\\right\\] |  | (10) |\n\n[Equation10]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") reveals that \ud835\udf41\u03b8subscript\ud835\udf41\ud835\udf03{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta} must predict 1\u03b1t\u200b(\ud835\udc31t\u2212\u03b2t1\u2212\u03b1\u00aft\u200b\u03f5)1subscript\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udefd\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61bold-italic-\u03f5\\\\frac{1}{\\\\sqrt{\\\\alpha\\_{t}}}\\\\left(\\\\mathbf{x}\\_{t}-\\\\frac{\\\\beta\\_{t}}{\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}}{\\\\boldsymbol{\\\\epsilon}}\\\\right) given \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t}. Since \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t} is available as input to the model, we may choose the parameterization\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udf41\u03b8\u200b(\ud835\udc31t,t)=\ud835\udf41~t\u200b(\ud835\udc31t,1\u03b1\u00aft\u200b(\ud835\udc31t\u22121\u2212\u03b1\u00aft\u200b\u03f5\u03b8\u200b(\ud835\udc31t)))=1\u03b1t\u200b(\ud835\udc31t\u2212\u03b2t1\u2212\u03b1\u00aft\u200b\u03f5\u03b8\u200b(\ud835\udc31t,t))subscript\ud835\udf41\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61subscript~\ud835\udf41\ud835\udc61subscript\ud835\udc31\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61subscriptbold-italic-\u03f5\ud835\udf03subscript\ud835\udc31\ud835\udc611subscript\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udefd\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61subscriptbold-italic-\u03f5\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61\\\\displaystyle{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)=\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}\\\\!\\\\left(\\\\mathbf{x}\\_{t},\\\\frac{1}{\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}}}(\\\\mathbf{x}\\_{t}-\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t}))\\\\right)=\\\\frac{1}{\\\\sqrt{\\\\alpha\\_{t}}}\\\\left(\\\\mathbf{x}\\_{t}-\\\\frac{\\\\beta\\_{t}}{\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}}{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)\\\\right) |  | (11) |\n\nwhere \u03f5\u03b8subscriptbold-italic-\u03f5\ud835\udf03{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta} is a function approximator intended to predict \u03f5bold-italic-\u03f5{\\\\boldsymbol{\\\\epsilon}} from \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t}. To sample \ud835\udc31t\u22121\u223cp\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)similar-tosubscript\ud835\udc31\ud835\udc611subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t-1}\\\\sim p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t}) is to compute\n\ud835\udc31t\u22121=1\u03b1t\u200b(\ud835\udc31t\u2212\u03b2t1\u2212\u03b1\u00aft\u200b\u03f5\u03b8\u200b(\ud835\udc31t,t))+\u03c3t\u200b\ud835\udc33subscript\ud835\udc31\ud835\udc6111subscript\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc61subscript\ud835\udefd\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61subscriptbold-italic-\u03f5\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61subscript\ud835\udf0e\ud835\udc61\ud835\udc33\\\\mathbf{x}\\_{t-1}=\\\\frac{1}{\\\\sqrt{\\\\alpha\\_{t}}}\\\\left(\\\\mathbf{x}\\_{t}-\\\\frac{\\\\beta\\_{t}}{\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}}{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)\\\\right)+\\\\sigma\\_{t}\\\\mathbf{z}, where \ud835\udc33\u223c\ud835\udca9\u200b(\ud835\udfce,\ud835\udc08)similar-to\ud835\udc33\ud835\udca90\ud835\udc08\\\\mathbf{z}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}).\nThe complete sampling procedure, [Algorithm2]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\"), resembles Langevin dynamics with \u03f5\u03b8subscriptbold-italic-\u03f5\ud835\udf03{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta} as a learned gradient of the data density.\nFurthermore, with the parameterization [11]Equation 11 \u2023 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\"), [Eq.10]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") simplifies to:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udd3c\ud835\udc310,\u03f5\u200b\\[\u03b2t22\u200b\u03c3t2\u200b\u03b1t\u200b(1\u2212\u03b1\u00aft)\u200b\u2016\u03f5\u2212\u03f5\u03b8\u200b(\u03b1\u00aft\u200b\ud835\udc310+1\u2212\u03b1\u00aft\u200b\u03f5,t)\u20162\\]subscript\ud835\udd3csubscript\ud835\udc310bold-italic-\u03f5delimited-\\[\\]superscriptsubscript\ud835\udefd\ud835\udc6122superscriptsubscript\ud835\udf0e\ud835\udc612subscript\ud835\udefc\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61superscriptnormbold-italic-\u03f5subscriptbold-italic-\u03f5\ud835\udf03subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc3101subscript\u00af\ud835\udefc\ud835\udc61bold-italic-\u03f5\ud835\udc612\\\\displaystyle\\\\mathbb{E}\\_{\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}}}\\\\!\\\\left\\[\\\\frac{\\\\beta\\_{t}^{2}}{2\\\\sigma\\_{t}^{2}\\\\alpha\\_{t}(1-\\\\bar{\\\\alpha}\\_{t})}\\\\left\\\\\\|{\\\\boldsymbol{\\\\epsilon}}-{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}}\\\\mathbf{x}\\_{0}+\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}{\\\\boldsymbol{\\\\epsilon}},t)\\\\right\\\\\\|^{2}\\\\right\\] |  | (12) |\n\nwhich resembles denoising score matching over multiple noise scales indexed by t\ud835\udc61t\\[ [55])\\]. As [Eq.12]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") is equal to (one term of) the variational bound for the Langevin-like reverse process [11]Equation 11 \u2023 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\"), we see that optimizing an objective resembling denoising score matching is equivalent to using variational inference to fit the finite-time marginal of a sampling chain resembling Langevin dynamics.\n\nTo summarize, we can train the reverse process mean function approximator \ud835\udf41\u03b8subscript\ud835\udf41\ud835\udf03{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta} to predict \ud835\udf41~tsubscript~\ud835\udf41\ud835\udc61\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}, or by modifying its parameterization, we can train it to predict \u03f5bold-italic-\u03f5{\\\\boldsymbol{\\\\epsilon}}. (There is also the possibility of predicting \ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0}, but we found this to lead to worse sample quality early in our experiments.) We have shown that the \u03f5bold-italic-\u03f5{\\\\boldsymbol{\\\\epsilon}}-prediction parameterization both resembles Langevin dynamics and simplifies the diffusion model\u2019s variational bound to an objective that resembles denoising score matching.\nNonetheless, it is just another parameterization of p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t}), so we verify its effectiveness in [Section4]Experiments \u2023 Denoising Diffusion Probabilistic Models\") in an ablation where we compare predicting \u03f5bold-italic-\u03f5{\\\\boldsymbol{\\\\epsilon}} against predicting \ud835\udf41~tsubscript~\ud835\udf41\ud835\udc61\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{t}.\n\nAlgorithm 1 Training\n\n1:repeat\n\n2:\ud835\udc310\u223cq\u200b(\ud835\udc310)similar-tosubscript\ud835\udc310\ud835\udc5esubscript\ud835\udc310\\\\mathbf{x}\\_{0}\\\\sim q(\\\\mathbf{x}\\_{0})\n\n3:t\u223cUniform\u200b({1,\u2026,T})similar-to\ud835\udc61Uniform1\u2026\ud835\udc47t\\\\sim\\\\mathrm{Uniform}(\\\\{1,\\\\dotsc,T\\\\})\n\n4:\u03f5\u223c\ud835\udca9\u200b(\ud835\udfce,\ud835\udc08)similar-tobold-italic-\u03f5\ud835\udca90\ud835\udc08{\\\\boldsymbol{\\\\epsilon}}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I})\n\n5:  Take gradient descent step on\n\n6:\u2207\u03b8\u2016\u03f5\u2212\u03f5\u03b8\u200b(\u03b1\u00aft\u200b\ud835\udc310+1\u2212\u03b1\u00aft\u200b\u03f5,t)\u20162subscript\u2207\ud835\udf03superscriptnormbold-italic-\u03f5subscriptbold-italic-\u03f5\ud835\udf03subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc3101subscript\u00af\ud835\udefc\ud835\udc61bold-italic-\u03f5\ud835\udc612\\\\qquad\\\\nabla\\_{\\\\theta}\\\\left\\\\\\|{\\\\boldsymbol{\\\\epsilon}}-{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}}\\\\mathbf{x}\\_{0}+\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}{\\\\boldsymbol{\\\\epsilon}},t)\\\\right\\\\\\|^{2}\n\n7:until converged\n\nAlgorithm 2 Sampling\n\n1:\ud835\udc31T\u223c\ud835\udca9\u200b(\ud835\udfce,\ud835\udc08)similar-tosubscript\ud835\udc31\ud835\udc47\ud835\udca90\ud835\udc08\\\\mathbf{x}\\_{T}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I})\n\n2:fort=T,\u2026,1\ud835\udc61\ud835\udc47\u20261t=T,\\\\dotsc,1do\n\n3:\ud835\udc33\u223c\ud835\udca9\u200b(\ud835\udfce,\ud835\udc08)similar-to\ud835\udc33\ud835\udca90\ud835\udc08\\\\mathbf{z}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}) if t>1\ud835\udc611t>1, else \ud835\udc33=\ud835\udfce\ud835\udc330\\\\mathbf{z}=\\\\mathbf{0}\n\n4:\ud835\udc31t\u22121=1\u03b1t\u200b(\ud835\udc31t\u22121\u2212\u03b1t1\u2212\u03b1\u00aft\u200b\u03f5\u03b8\u200b(\ud835\udc31t,t))+\u03c3t\u200b\ud835\udc33subscript\ud835\udc31\ud835\udc6111subscript\ud835\udefc\ud835\udc61subscript\ud835\udc31\ud835\udc611subscript\ud835\udefc\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61subscriptbold-italic-\u03f5\ud835\udf03subscript\ud835\udc31\ud835\udc61\ud835\udc61subscript\ud835\udf0e\ud835\udc61\ud835\udc33\\\\mathbf{x}\\_{t-1}=\\\\frac{1}{\\\\sqrt{\\\\alpha\\_{t}}}\\\\left(\\\\mathbf{x}\\_{t}-\\\\frac{1-\\\\alpha\\_{t}}{\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}}{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)\\\\right)+\\\\sigma\\_{t}\\\\mathbf{z}\n\n5:endfor\n\n6:return\ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0}\n\n### 3.3 Data scaling, reverse process decoder, and L0subscript\ud835\udc3f0L\\_{0}\n\nWe assume that image data consists of integers in {0,1,\u2026,255}01\u2026255\\\\{0,1,\\\\dotsc,255\\\\} scaled linearly to \\[\u22121,1\\]11\\[-1,1\\]. This ensures that the neural network reverse process operates on consistently scaled inputs starting from the standard normal prior p\u200b(\ud835\udc31T)\ud835\udc5dsubscript\ud835\udc31\ud835\udc47p(\\\\mathbf{x}\\_{T}).\nTo obtain discrete log likelihoods, we set the last term of the reverse process to an independent discrete decoder derived from the Gaussian \ud835\udca9\u200b(\ud835\udc310;\ud835\udf41\u03b8\u200b(\ud835\udc311,1),\u03c312\u200b\ud835\udc08)\ud835\udca9subscript\ud835\udc310subscript\ud835\udf41\ud835\udf03subscript\ud835\udc3111superscriptsubscript\ud835\udf0e12\ud835\udc08\\\\mathcal{N}(\\\\mathbf{x}\\_{0};{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{1},1),\\\\sigma\\_{1}^{2}\\\\mathbf{I}):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | p\u03b8\u200b(\ud835\udc310\\|\ud835\udc311)=\u220fi=1D\u222b\u03b4\u2212\u200b(x0i)\u03b4+\u200b(x0i)\ud835\udca9\u200b(x;\u03bc\u03b8i\u200b(\ud835\udc311,1),\u03c312)\u200b\ud835\udc51x\u03b4+\u200b(x)={\u221eif\u200bx=1x+1255if\u200bx<1\u03b4\u2212\u200b(x)={\u2212\u221eif\u200bx=\u22121x\u22121255if\u200bx>\u22121formulae-sequencesubscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc310subscript\ud835\udc311superscriptsubscriptproduct\ud835\udc561\ud835\udc37superscriptsubscriptsubscript\ud835\udeffsuperscriptsubscript\ud835\udc650\ud835\udc56subscript\ud835\udeffsuperscriptsubscript\ud835\udc650\ud835\udc56\ud835\udca9\ud835\udc65superscriptsubscript\ud835\udf07\ud835\udf03\ud835\udc56subscript\ud835\udc3111superscriptsubscript\ud835\udf0e12differential-d\ud835\udc65subscript\ud835\udeff\ud835\udc65casesif\ud835\udc651\ud835\udc651255if\ud835\udc651subscript\ud835\udeff\ud835\udc65casesif\ud835\udc651\ud835\udc651255if\ud835\udc651\\\\displaystyle\\\\begin{split}p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}\\|\\\\mathbf{x}\\_{1})&=\\\\prod\\_{i=1}^{D}\\\\int\\_{\\\\delta\\_{-}(x\\_{0}^{i})}^{\\\\delta\\_{+}(x\\_{0}^{i})}\\\\mathcal{N}(x;\\\\mu\\_{\\\\theta}^{i}(\\\\mathbf{x}\\_{1},1),\\\\sigma\\_{1}^{2})\\\\,dx\\\\\\<br>\\\\delta\\_{+}(x)&=\\\\begin{cases}\\\\infty&\\\\text{if}\\ x=1\\\\\\<br>x+\\\\frac{1}{255}&\\\\text{if}\\ x<1\\\\end{cases}\\\\qquad\\\\delta\\_{-}(x)=\\\\begin{cases}-\\\\infty&\\\\text{if}\\ x=-1\\\\\\<br>x-\\\\frac{1}{255}&\\\\text{if}\\ x>-1\\\\end{cases}\\\\end{split} |  | (13) |\n\nwhere D\ud835\udc37D is the data dimensionality and the i\ud835\udc56i superscript indicates extraction of one coordinate.\n(It would be straightforward to instead incorporate a more powerful decoder like a conditional autoregressive model, but we leave that to future work.) Similar to the discretized continuous distributions used in VAE decoders and autoregressive models \\[ [34]), [52])\\], our choice here ensures that the variational bound is a lossless codelength of discrete data, without need of adding noise to the data or incorporating the Jacobian of the scaling operation into the log likelihood. At the end of sampling, we display \ud835\udf41\u03b8\u200b(\ud835\udc311,1)subscript\ud835\udf41\ud835\udf03subscript\ud835\udc3111{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}(\\\\mathbf{x}\\_{1},1) noiselessly.\n\n### 3.4 Simplified training objective\n\nWith the reverse process and decoder defined above, the variational bound, consisting of terms derived from [Eqs.12]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") and [13]Equation 13 \u2023 3.3 Data scaling, reverse process decoder, and \ud835\udc3f\u2080 \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\"), is clearly differentiable with respect to \u03b8\ud835\udf03\\\\theta and is ready to be employed for training. However, we found it beneficial to sample quality (and simpler to implement) to train on the following variant of the variational bound:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Lsimple\u200b(\u03b8)\u2254\ud835\udd3ct,\ud835\udc310,\u03f5\u200b\\[\u2016\u03f5\u2212\u03f5\u03b8\u200b(\u03b1\u00aft\u200b\ud835\udc310+1\u2212\u03b1\u00aft\u200b\u03f5,t)\u20162\\]\u2254subscript\ud835\udc3fsimple\ud835\udf03subscript\ud835\udd3c\ud835\udc61subscript\ud835\udc310bold-italic-\u03f5delimited-\\[\\]superscriptnormbold-italic-\u03f5subscriptbold-italic-\u03f5\ud835\udf03subscript\u00af\ud835\udefc\ud835\udc61subscript\ud835\udc3101subscript\u00af\ud835\udefc\ud835\udc61bold-italic-\u03f5\ud835\udc612\\\\displaystyle L\\_{\\\\mathrm{simple}}(\\\\theta)\\\\coloneqq\\\\mathbb{E}\\_{t,\\\\mathbf{x}\\_{0},{\\\\boldsymbol{\\\\epsilon}}}\\\\!\\\\left\\[\\\\left\\\\\\|{\\\\boldsymbol{\\\\epsilon}}-{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}}\\\\mathbf{x}\\_{0}+\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}{\\\\boldsymbol{\\\\epsilon}},t)\\\\right\\\\\\|^{2}\\\\right\\] |  | (14) |\n\nwhere t\ud835\udc61t is uniform between 111 and T\ud835\udc47T. The t=1\ud835\udc611t=1 case corresponds to L0subscript\ud835\udc3f0L\\_{0} with the integral in the discrete decoder definition [13]Equation 13 \u2023 3.3 Data scaling, reverse process decoder, and \ud835\udc3f\u2080 \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") approximated by the Gaussian probability density function times the bin width, ignoring \u03c312superscriptsubscript\ud835\udf0e12\\\\sigma\\_{1}^{2} and edge effects. The t>1\ud835\udc611t>1 cases correspond to an unweighted version of [Eq.12]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\"), analogous to the loss weighting used by the NCSN denoising score matching model \\[ [55])\\]. (LTsubscript\ud835\udc3f\ud835\udc47L\\_{T} does not appear because the forward process variances \u03b2tsubscript\ud835\udefd\ud835\udc61\\\\beta\\_{t} are fixed.)\n[Algorithm1]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") displays the complete training procedure with this simplified objective.\n\nSince our simplified objective [14]Equation 14 \u2023 3.4 Simplified training objective \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\") discards the weighting in [Eq.12]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\"), it is a weighted variational bound that emphasizes different aspects of reconstruction compared to the standard variational bound \\[ [18]), [22])\\].\nIn particular, our diffusion process setup in [Section4]Experiments \u2023 Denoising Diffusion Probabilistic Models\") causes the simplified objective to down-weight loss terms corresponding to small t\ud835\udc61t. These terms train the network to denoise data with very small amounts of noise, so it is beneficial to down-weight them so that the network can focus on more difficult denoising tasks at larger t\ud835\udc61t terms. We will see in our experiments that this reweighting leads to better sample quality.\n\n## 4 Experiments\nWe set T=1000\ud835\udc471000T=1000 for all experiments so that the number of neural network evaluations needed during sampling matches previous work \\[ [53]), [55])\\]. We set the forward process variances to constants increasing linearly from \u03b21=10\u22124subscript\ud835\udefd1superscript104\\\\beta\\_{1}=10^{-4} to \u03b2T=0.02subscript\ud835\udefd\ud835\udc470.02\\\\beta\\_{T}=0.02. These constants were chosen to be small relative to data scaled to \\[\u22121,1\\]11\\[-1,1\\], ensuring that reverse and forward processes have approximately the same functional form while keeping the signal-to-noise ratio at \ud835\udc31Tsubscript\ud835\udc31\ud835\udc47\\\\mathbf{x}\\_{T} as small as possible (LT=DKL\u200b(q\u200b(\ud835\udc31T\\|\ud835\udc310)\u2225\ud835\udca9\u200b(\ud835\udfce,\ud835\udc08))\u224810\u22125subscript\ud835\udc3f\ud835\udc47subscript\ud835\udc37KLconditional\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc47subscript\ud835\udc310\ud835\udca90\ud835\udc08superscript105L\\_{T}=D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x}\\_{T}\\|\\\\mathbf{x}\\_{0})~{}\\\\\\|~{}\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I})\\\\right)\\\\approx 10^{-5} bits per dimension in our experiments).\n\nTo represent the reverse process, we use a U-Net backbone similar to an unmasked PixelCNN++\\[ [52]), [48])\\] with group normalization throughout \\[ [66])\\]. Parameters are shared across time, which is specified to the network using the Transformer sinusoidal position embedding \\[ [60])\\]. We use self-attention at the 16\u00d716161616\\\\times 16 feature map resolution \\[ [63]), [60])\\]. Details are in [AppendixB]Appendix B Experimental details \u2023 Denoising Diffusion Probabilistic Models\").\n\n### 4.1 Sample quality\n\nTable 1: CIFAR10 results. NLL measured in bits/dim.\n\n| Model | IS | FID | NLL Test (Train) |\n| Conditional |  |  |  |\n| EBM \\[ [11])\\] | 8.308.308.30 | 37.937.937.9 |  |\n| JEM \\[ [17])\\] | 8.768.768.76 | 38.438.438.4 |  |\n| BigGAN \\[ [3])\\] | 9.229.229.22 | 14.7314.7314.73 |  |\n| StyleGAN2 + ADA (v1) \\[ [29])\\] | 10.0610.06\\\\mathbf{10.06} | 2.672.67\\\\mathbf{2.67} |  |\n| Unconditional |  |  |  |\n| Diffusion (original) \\[ [53])\\] |  |  | \u22645.40absent5.40\\\\leq 5.40 |\n| Gated PixelCNN \\[ [59])\\] | 4.604.604.60 | 65.9365.9365.93 | 3.033.033.03(2.90)2.90(2.90) |\n| Sparse Transformer \\[ [7])\\] |  |  | 2.802.80\\\\mathbf{2.80} |\n| PixelIQN \\[ [43])\\] | 5.295.295.29 | 49.4649.4649.46 |  |\n| EBM \\[ [11])\\] | 6.786.786.78 | 38.238.238.2 |  |\n| NCSNv2 \\[ [56])\\] |  | 31.7531.7531.75 |  |\n| NCSN \\[ [55])\\] | 8.87\u00b10.12plus-or-minus8.870.128.87\\\\!\\\\pm\\\\!0.12 | 25.3225.3225.32 |  |\n| SNGAN \\[ [39])\\] | 8.22\u00b10.05plus-or-minus8.220.058.22\\\\!\\\\pm\\\\!0.05 | 21.721.721.7 |  |\n| SNGAN-DDLS \\[ [4])\\] | 9.09\u00b10.10plus-or-minus9.090.109.09\\\\!\\\\pm\\\\!0.10 | 15.4215.4215.42 |  |\n| StyleGAN2 + ADA (v1) \\[ [29])\\] | 9.74\u00b10.05plus-or-minus9.740.05\\\\mathbf{9.74}\\\\pm 0.05 | 3.263.263.26 |  |\n| Ours (L\ud835\udc3fL, fixed isotropic \ud835\udeba\ud835\udeba{\\\\boldsymbol{\\\\Sigma}}) | 7.67\u00b10.13plus-or-minus7.670.137.67\\\\!\\\\pm\\\\!0.13 | 13.5113.5113.51 | \u22643.70absent3.70\\\\leq 3.70(3.69)3.69(3.69) |\n| Ours (Lsimplesubscript\ud835\udc3fsimpleL\\_{\\\\mathrm{simple}}) | 9.46\u00b10.11plus-or-minus9.460.119.46\\\\!\\\\pm\\\\!0.11 | 3.173.17\\\\mathbf{3.17} | \u22643.75absent3.75\\\\leq 3.75(3.72)3.72(3.72) |\n\nTable 2: Unconditional CIFAR10 reverse process parameterization and training objective ablation. Blank entries were unstable to train and generated poor samples with out-of-range scores.\n\n| Objective | IS | FID |\n| \ud835\udf41~~\ud835\udf41\\\\tilde{\\\\boldsymbol{\\\\mu}} prediction (baseline) |  |  |\n| L\ud835\udc3fL, learned diagonal \ud835\udeba\ud835\udeba{\\\\boldsymbol{\\\\Sigma}} | 7.28\u00b10.10plus-or-minus7.280.107.28\\\\!\\\\pm\\\\!0.10 | 23.6923.6923.69 |\n| L\ud835\udc3fL, fixed isotropic \ud835\udeba\ud835\udeba{\\\\boldsymbol{\\\\Sigma}} | 8.06\u00b10.09plus-or-minus8.060.098.06\\\\!\\\\pm\\\\!0.09 | 13.2213.2213.22 |\n| \u2016\ud835\udf41~\u2212\ud835\udf41~\u03b8\u20162superscriptnorm~\ud835\udf41subscript~\ud835\udf41\ud835\udf032\\\\\\|\\\\tilde{\\\\boldsymbol{\\\\mu}}-\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{\\\\theta}\\\\\\|^{2} | \u2013 | \u2013 |\n| \u03f5bold-italic-\u03f5{\\\\boldsymbol{\\\\epsilon}} prediction (ours) |  |  |\n| L\ud835\udc3fL, learned diagonal \ud835\udeba\ud835\udeba{\\\\boldsymbol{\\\\Sigma}} | \u2013 | \u2013 |\n| L\ud835\udc3fL, fixed isotropic \ud835\udeba\ud835\udeba{\\\\boldsymbol{\\\\Sigma}} | 7.67\u00b10.13plus-or-minus7.670.137.67\\\\!\\\\pm\\\\!0.13 | 13.5113.5113.51 |\n| \u2016\u03f5~\u2212\u03f5\u03b8\u20162superscriptnorm~bold-italic-\u03f5subscriptbold-italic-\u03f5\ud835\udf032\\\\\\|\\\\tilde{\\\\boldsymbol{\\\\epsilon}}-{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}\\\\\\|^{2} (Lsimplesubscript\ud835\udc3fsimpleL\\_{\\\\mathrm{simple}}) | 9.46\u00b10.11plus-or-minus9.460.11\\\\mathbf{9.46\\\\!\\\\pm\\\\!0.11} | 3.173.17\\\\mathbf{3.17} |\n\n[Table1]In 4.1 Sample quality \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") shows Inception scores, FID scores, and negative log likelihoods (lossless codelengths) on CIFAR10. With our FID score of 3.17, our unconditional model achieves better sample quality than most models in the literature, including class conditional models. Our FID score is computed with respect to the training set, as is standard practice; when we compute it with respect to the test set, the score is 5.24, which is still better than many of the training set FID scores in the literature.\n\nWe find that training our models on the true variational bound yields better codelengths than training on the simplified objective, as expected, but the latter yields the best sample quality. See [Fig.1]In Denoising Diffusion Probabilistic Models\") for CIFAR10 and CelebA-HQ 256\u00d7256256256256\\\\times 256 samples, [Fig.4]In 4.1 Sample quality \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") and [Fig.4]In 4.1 Sample quality \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") for LSUN 256\u00d7256256256256\\\\times 256 samples \\[ [71])\\], and [AppendixD]Appendix D Samples \u2023 Denoising Diffusion Probabilistic Models\") for more.\n\n![Refer to caption]Figure 3: LSUN Church samples. FID=7.897.897.89\n\n![Refer to caption]Figure 4: LSUN Bedroom samples. FID=4.904.904.90\n\n### 4.2 Reverse process parameterization and training objective ablation\n\nIn [Table2]In 4.1 Sample quality \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\"), we show the sample quality effects of reverse process parameterizations and training objectives ( [Section3.2]Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\")). We find that the baseline option of predicting \ud835\udf41~~\ud835\udf41\\\\tilde{\\\\boldsymbol{\\\\mu}} works well only when trained on the true variational bound instead of unweighted mean squared error, a simplified objective akin to [Eq.14]In 3.4 Simplified training objective \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\"). We also see that learning reverse process variances (by incorporating a parameterized diagonal \ud835\udeba\u03b8\u200b(\ud835\udc31t)subscript\ud835\udeba\ud835\udf03subscript\ud835\udc31\ud835\udc61{\\\\boldsymbol{\\\\Sigma}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t}) into the variational bound) leads to unstable training and poorer sample quality compared to fixed variances. Predicting \u03f5bold-italic-\u03f5{\\\\boldsymbol{\\\\epsilon}}, as we proposed, performs approximately as well as predicting \ud835\udf41~~\ud835\udf41\\\\tilde{\\\\boldsymbol{\\\\mu}} when trained on the variational bound with fixed variances, but much better when trained with our simplified objective.\n\n### 4.3 Progressive coding\n\n[Table1]In 4.1 Sample quality \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") also shows the codelengths of our CIFAR10 models. The gap between train and test is at most 0.03 bits per dimension, which is comparable to the gaps reported with other likelihood-based models and indicates that our diffusion model is not overfitting (see [AppendixD]Appendix D Samples \u2023 Denoising Diffusion Probabilistic Models\") for nearest neighbor visualizations).\nStill, while our lossless codelengths are better than the large estimates reported for energy based models and score matching using annealed importance sampling \\[ [11])\\], they are not competitive with other types of likelihood-based generative models \\[ [7])\\].\n\nSince our samples are nonetheless of high quality, we conclude that diffusion models have an inductive bias that makes them excellent lossy compressors. Treating the variational bound terms L1+\u22ef+LTsubscript\ud835\udc3f1\u22efsubscript\ud835\udc3f\ud835\udc47L\\_{1}+\\\\cdots+L\\_{T} as rate and L0subscript\ud835\udc3f0L\\_{0} as distortion, our CIFAR10 model with the highest quality samples has a rate of 1.78 bits/dim and a distortion of 1.97 bits/dim, which amounts to a root mean squared error of 0.95 on a scale from 0 to 255. More than half of the lossless codelength describes imperceptible distortions.\n\n#### Progressive lossy compression\n\nWe can probe further into the rate-distortion behavior of our model by introducing a progressive lossy code that mirrors the form of [Eq.5]In 2 Background \u2023 Denoising Diffusion Probabilistic Models\"): see [Algorithms3]In Progressive lossy compression \u2023 4.3 Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") and [4]Algorithm 4 \u2023 Progressive lossy compression \u2023 4.3 Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\"), which assume access to a procedure, such as minimal random coding \\[ [19]), [20])\\], that can transmit a sample \ud835\udc31\u223cq\u200b(\ud835\udc31)similar-to\ud835\udc31\ud835\udc5e\ud835\udc31\\\\mathbf{x}\\\\sim q(\\\\mathbf{x}) using approximately DKL\u200b(q\u200b(\ud835\udc31)\u2225p\u200b(\ud835\udc31))subscript\ud835\udc37KLconditional\ud835\udc5e\ud835\udc31\ud835\udc5d\ud835\udc31D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x})~{}\\\\\\|~{}p(\\\\mathbf{x})\\\\right) bits on average for any distributions p\ud835\udc5dp and q\ud835\udc5eq, for which only p\ud835\udc5dp is available to the receiver beforehand.\n\nAlgorithm 3 Sending \ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0}\n\n1:Send \ud835\udc31T\u223cq\u200b(\ud835\udc31T\\|\ud835\udc310)similar-tosubscript\ud835\udc31\ud835\udc47\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc47subscript\ud835\udc310\\\\mathbf{x}\\_{T}\\\\sim q(\\\\mathbf{x}\\_{T}\\|\\\\mathbf{x}\\_{0}) using p\u200b(\ud835\udc31T)\ud835\udc5dsubscript\ud835\udc31\ud835\udc47p(\\\\mathbf{x}\\_{T})\n\n2:fort=T\u22121,\u2026,2,1\ud835\udc61\ud835\udc471\u202621t=T-1,\\\\dotsc,2,1do\n\n3:  Send \ud835\udc31t\u223cq\u200b(\ud835\udc31t\\|\ud835\udc31t+1,\ud835\udc310)similar-tosubscript\ud835\udc31\ud835\udc61\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc31\ud835\udc611subscript\ud835\udc310\\\\mathbf{x}\\_{t}\\\\sim q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t+1},\\\\mathbf{x}\\_{0}) using p\u03b8\u200b(\ud835\udc31t\\|\ud835\udc31t+1)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc31\ud835\udc611p\\_{\\\\theta}(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t+1})\n\n4:endfor\n\n5:Send \ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0} using p\u03b8\u200b(\ud835\udc310\\|\ud835\udc311)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc310subscript\ud835\udc311p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}\\|\\\\mathbf{x}\\_{1})\n\nAlgorithm 4 Receiving\n\n1:Receive \ud835\udc31Tsubscript\ud835\udc31\ud835\udc47\\\\mathbf{x}\\_{T} using p\u200b(\ud835\udc31T)\ud835\udc5dsubscript\ud835\udc31\ud835\udc47p(\\\\mathbf{x}\\_{T})\n\n2:fort=T\u22121,\u2026,1,0\ud835\udc61\ud835\udc471\u202610t=T-1,\\\\dotsc,1,0do\n\n3:  Receive \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t} using p\u03b8\u200b(\ud835\udc31t\\|\ud835\udc31t+1)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc31\ud835\udc611p\\_{\\\\theta}(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t+1})\n\n4:endfor\n\n5:return\ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0}\n\nWhen applied to \ud835\udc310\u223cq\u200b(\ud835\udc310)similar-tosubscript\ud835\udc310\ud835\udc5esubscript\ud835\udc310\\\\mathbf{x}\\_{0}\\\\sim q(\\\\mathbf{x}\\_{0}), [Algorithms3]In Progressive lossy compression \u2023 4.3 Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") and [4]Algorithm 4 \u2023 Progressive lossy compression \u2023 4.3 Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") transmit \ud835\udc31T,\u2026,\ud835\udc310subscript\ud835\udc31\ud835\udc47\u2026subscript\ud835\udc310\\\\mathbf{x}\\_{T},\\\\dotsc,\\\\mathbf{x}\\_{0} in sequence using a total expected codelength equal to [Eq.5]In 2 Background \u2023 Denoising Diffusion Probabilistic Models\"). The receiver, at any time t\ud835\udc61t, has the partial information \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t} fully available and can progressively estimate:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | \ud835\udc310\u2248\ud835\udc31^0=(\ud835\udc31t\u22121\u2212\u03b1\u00aft\u200b\u03f5\u03b8\u200b(\ud835\udc31t))/\u03b1\u00aftsubscript\ud835\udc310subscript^\ud835\udc310subscript\ud835\udc31\ud835\udc611subscript\u00af\ud835\udefc\ud835\udc61subscriptbold-italic-\u03f5\ud835\udf03subscript\ud835\udc31\ud835\udc61subscript\u00af\ud835\udefc\ud835\udc61\\\\displaystyle\\\\mathbf{x}\\_{0}\\\\approx\\\\hat{\\\\mathbf{x}}\\_{0}=\\\\left(\\\\mathbf{x}\\_{t}-\\\\sqrt{1-\\\\bar{\\\\alpha}\\_{t}}{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{x}\\_{t})\\\\right)/\\\\sqrt{\\\\bar{\\\\alpha}\\_{t}} |  | (15) |\n\ndue to [Eq.4]In 2 Background \u2023 Denoising Diffusion Probabilistic Models\").\n(A stochastic reconstruction \ud835\udc310\u223cp\u03b8\u200b(\ud835\udc310\\|\ud835\udc31t)similar-tosubscript\ud835\udc310subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc310subscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{0}\\\\sim p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}\\|\\\\mathbf{x}\\_{t}) is also valid, but we do not consider it here because it makes distortion more difficult to evaluate.)\n[Figure5]In Progressive lossy compression \u2023 4.3 Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") shows the resulting rate-distortion plot on the CIFAR10 test set. At each time t\ud835\udc61t, the distortion is calculated as the root mean squared error \u2016\ud835\udc310\u2212\ud835\udc31^0\u20162/Dsuperscriptnormsubscript\ud835\udc310subscript^\ud835\udc3102\ud835\udc37\\\\sqrt{\\\\\\|\\\\mathbf{x}\\_{0}-\\\\hat{\\\\mathbf{x}}\\_{0}\\\\\\|^{2}/D}, and the rate is calculated as the cumulative number of bits received so far at time t\ud835\udc61t. The distortion decreases steeply in the low-rate region of the rate-distortion plot, indicating that the majority of the bits are indeed allocated to imperceptible distortions.\n\n002002002004004004006006006008008008001,00010001{,}00000202020404040606060808080Reverse process steps (T\u2212t\ud835\udc47\ud835\udc61T-t)Distortion (RMSE)\n\n002002002004004004006006006008008008001,00010001{,}000000.50.50.51111.51.51.5Reverse process steps (T\u2212t\ud835\udc47\ud835\udc61T-t)Rate (bits/dim)\n\n000.50.50.51111.51.51.500202020404040606060808080Rate (bits/dim)Distortion (RMSE)\n\nFigure 5: Unconditional CIFAR10 test set rate-distortion vs. time. Distortion is measured in root mean squared error on a \\[0,255\\]0255\\[0,255\\] scale. See [Table4]In Progressive compression \u2023 Extra information \u2023 Denoising Diffusion Probabilistic Models\") for details.\n\n#### Progressive generation\n\nWe also run a progressive unconditional generation process given by progressive decompression from random bits. In other words, we predict the result of the reverse process, \ud835\udc31^0subscript^\ud835\udc310\\\\hat{\\\\mathbf{x}}\\_{0}, while sampling from the reverse process using [Algorithm2]In 3.2 Reverse process and \ud835\udc3f_{1:\ud835\udc47-1} \u2023 3 Diffusion models and denoising autoencoders \u2023 Denoising Diffusion Probabilistic Models\").\n[Figures6]In Progressive generation \u2023 4.3 Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") and [10]Figure 10 \u2023 Coarse-to-fine interpolation \u2023 Appendix D Samples \u2023 Denoising Diffusion Probabilistic Models\") show the resulting sample quality of \ud835\udc31^0subscript^\ud835\udc310\\\\hat{\\\\mathbf{x}}\\_{0} over the course of the reverse process.\nLarge scale image features appear first and details appear last.\n[Figure7]In Progressive generation \u2023 4.3 Progressive coding \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") shows stochastic predictions \ud835\udc310\u223cp\u03b8\u200b(\ud835\udc310\\|\ud835\udc31t)similar-tosubscript\ud835\udc310subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc310subscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{0}\\\\sim p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}\\|\\\\mathbf{x}\\_{t}) with \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t} frozen for various t\ud835\udc61t. When t\ud835\udc61t is small, all but fine details are preserved, and when t\ud835\udc61t is large, only large scale features are preserved. Perhaps these are hints of conceptual compression \\[ [18])\\].\n\n![Refer to caption]Figure 6: Unconditional CIFAR10 progressive generation (\ud835\udc31^0subscript^\ud835\udc310\\\\hat{\\\\mathbf{x}}\\_{0} over time, from left to right). Extended samples and sample quality metrics over time in the appendix ( [Figs.14]In Coarse-to-fine interpolation \u2023 Appendix D Samples \u2023 Denoising Diffusion Probabilistic Models\") and [10]Figure 10 \u2023 Coarse-to-fine interpolation \u2023 Appendix D Samples \u2023 Denoising Diffusion Probabilistic Models\")).![Refer to caption]Figure 7: When conditioned on the same latent, CelebA-HQ 256\u00d7256256256256\\\\times 256 samples share high-level attributes. Bottom-right quadrants are \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t}, and other quadrants are samples from p\u03b8\u200b(\ud835\udc310\\|\ud835\udc31t)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc310subscript\ud835\udc31\ud835\udc61p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}\\|\\\\mathbf{x}\\_{t}).\n\n#### Connection to autoregressive decoding\n\nNote that the variational bound [5]Equation 5 \u2023 2 Background \u2023 Denoising Diffusion Probabilistic Models\") can be rewritten as:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | L\ud835\udc3f\\\\displaystyle L | =DKL(q(\ud835\udc31T)\u2225p(\ud835\udc31T))+\ud835\udd3cq\\[\u2211t\u22651DKL(q(\ud835\udc31t\u22121\\|\ud835\udc31t)\u2225p\u03b8(\ud835\udc31t\u22121\\|\ud835\udc31t))\\]+H(\ud835\udc310)\\\\displaystyle=D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x}\\_{T})~{}\\\\\\|~{}p(\\\\mathbf{x}\\_{T})\\\\right)+\\\\mathbb{E}\\_{q}\\\\Bigg{\\[}\\\\sum\\_{t\\\\geq 1}D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})~{}\\\\\\|~{}p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})\\\\right)\\\\Bigg{\\]}+H(\\\\mathbf{x}\\_{0}) |  | (16) |\n\n(See [AppendixA]Appendix A Extended derivations \u2023 Denoising Diffusion Probabilistic Models\") for a derivation.) Now consider setting the diffusion process length T\ud835\udc47T to the dimensionality of the data, defining the forward process so that q\u200b(\ud835\udc31t\\|\ud835\udc310)\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc310q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{0}) places all probability mass on \ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0} with the first t\ud835\udc61t coordinates masked out (i.e. q\u200b(\ud835\udc31t\\|\ud835\udc31t\u22121)\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc31\ud835\udc611q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t-1}) masks out the tthsuperscript\ud835\udc61tht^{\\\\text{th}} coordinate), setting p\u200b(\ud835\udc31T)\ud835\udc5dsubscript\ud835\udc31\ud835\udc47p(\\\\mathbf{x}\\_{T}) to place all mass on a blank image, and, for the sake of argument, taking p\u03b8\u200b(\ud835\udc31t\u22121\\|\ud835\udc31t)subscript\ud835\udc5d\ud835\udf03conditionalsubscript\ud835\udc31\ud835\udc611subscript\ud835\udc31\ud835\udc61p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t}) to be a fully expressive conditional distribution. With these choices, DKL\u200b(q\u200b(\ud835\udc31T)\u2225p\u200b(\ud835\udc31T))=0subscript\ud835\udc37KLconditional\ud835\udc5esubscript\ud835\udc31\ud835\udc47\ud835\udc5dsubscript\ud835\udc31\ud835\udc470D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x}\\_{T})~{}\\\\\\|~{}p(\\\\mathbf{x}\\_{T})\\\\right)=0, and minimizing DKL(q(\ud835\udc31t\u22121\\|\ud835\udc31t)\u2225p\u03b8(\ud835\udc31t\u22121\\|\ud835\udc31t))D\\_{\\\\mathrm{KL}}\\\\!\\\\left(q(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})~{}\\\\\\|~{}p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})\\\\right) trains p\u03b8subscript\ud835\udc5d\ud835\udf03p\\_{\\\\theta} to copy coordinates t+1,\u2026,T\ud835\udc611\u2026\ud835\udc47t+1,\\\\dotsc,T unchanged and to predict the tthsuperscript\ud835\udc61tht^{\\\\text{th}} coordinate given t+1,\u2026,T\ud835\udc611\u2026\ud835\udc47t+1,\\\\dotsc,T. Thus, training p\u03b8subscript\ud835\udc5d\ud835\udf03p\\_{\\\\theta} with this particular diffusion is training an autoregressive model.\n\nWe can therefore interpret the Gaussian diffusion model [2]Equation 2 \u2023 2 Background \u2023 Denoising Diffusion Probabilistic Models\") as a kind of autoregressive model with a generalized bit ordering that cannot be expressed by reordering data coordinates. Prior work has shown that such reorderings introduce inductive biases that have an impact on sample quality \\[ [38])\\], so we speculate that the Gaussian diffusion serves a similar purpose, perhaps to greater effect since Gaussian noise might be more natural to add to images compared to masking noise. Moreover, the Gaussian diffusion length is not restricted to equal the data dimension; for instance, we use T=1000\ud835\udc471000T=1000, which is less than the dimension of the 32\u00d732\u00d733232332\\\\times 32\\\\times 3 or 256\u00d7256\u00d732562563256\\\\times 256\\\\times 3 images in our experiments. Gaussian diffusions can be made shorter for fast sampling or longer for model expressiveness.\n\n### 4.4 Interpolation\n\nWe can interpolate source images \ud835\udc310,\ud835\udc310\u2032\u223cq\u200b(\ud835\udc310)similar-tosubscript\ud835\udc310subscriptsuperscript\ud835\udc31\u20320\ud835\udc5esubscript\ud835\udc310\\\\mathbf{x}\\_{0},\\\\mathbf{x}^{\\\\prime}\\_{0}\\\\sim q(\\\\mathbf{x}\\_{0}) in latent space using q\ud835\udc5eq as a stochastic encoder, \ud835\udc31t,\ud835\udc31t\u2032\u223cq\u200b(\ud835\udc31t\\|\ud835\udc310)similar-tosubscript\ud835\udc31\ud835\udc61subscriptsuperscript\ud835\udc31\u2032\ud835\udc61\ud835\udc5econditionalsubscript\ud835\udc31\ud835\udc61subscript\ud835\udc310\\\\mathbf{x}\\_{t},\\\\mathbf{x}^{\\\\prime}\\_{t}\\\\sim q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{0}), then decoding the linearly interpolated latent \ud835\udc31\u00aft=(1\u2212\u03bb)\u200b\ud835\udc310+\u03bb\u200b\ud835\udc310\u2032subscript\u00af\ud835\udc31\ud835\udc611\ud835\udf06subscript\ud835\udc310\ud835\udf06subscriptsuperscript\ud835\udc31\u20320\\\\bar{\\\\mathbf{x}}\\_{t}=(1-\\\\lambda)\\\\mathbf{x}\\_{0}+\\\\lambda\\\\mathbf{x}^{\\\\prime}\\_{0} into image space by the reverse process, \ud835\udc31\u00af0\u223cp\u200b(\ud835\udc310\\|\ud835\udc31\u00aft)similar-tosubscript\u00af\ud835\udc310\ud835\udc5dconditionalsubscript\ud835\udc310subscript\u00af\ud835\udc31\ud835\udc61\\\\bar{\\\\mathbf{x}}\\_{0}\\\\sim p(\\\\mathbf{x}\\_{0}\\|\\\\bar{\\\\mathbf{x}}\\_{t}). In effect, we use the reverse process to remove artifacts from linearly interpolating corrupted versions of the source images, as depicted in [Fig.8]In 4.4 Interpolation \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") (left). We fixed the noise for different values of \u03bb\ud835\udf06\\\\lambda so \ud835\udc31tsubscript\ud835\udc31\ud835\udc61\\\\mathbf{x}\\_{t} and \ud835\udc31t\u2032subscriptsuperscript\ud835\udc31\u2032\ud835\udc61\\\\mathbf{x}^{\\\\prime}\\_{t} remain the same. [Fig.8]In 4.4 Interpolation \u2023 4 Experiments \u2023 Denoising Diffusion Probabilistic Models\") (right) shows interpolations and reconstructions of original CelebA-HQ 256\u00d7256256256256\\\\times 256 images (t=500\ud835\udc61500t=500). The reverse process produces high-quality reconstructions, and plausible interpolations that smoothly vary attributes such as pose, skin tone, hairstyle, expression and background, but not eyewear. Larger t\ud835\udc61t results in coarser and more varied interpolations, with novel samples at t=1000\ud835\udc611000t=1000 (Appendix [Fig.9]In Coarse-to-fine interpolation \u2023 Appendix D Samples \u2023 Denoising Diffusion Probabilistic Models\")).\n\n![Refer to caption]Figure 8: Interpolations of CelebA-HQ 256x256 images with 500 timesteps of diffusion.\n\n## 5 Related Work\nWhile diffusion models might resemble flows \\[ [9]), [46]), [10]), [32]), [5]), [16]), [23])\\] and VAEs \\[ [33]), [47]), [37])\\], diffusion models are designed so that q\ud835\udc5eq has no parameters and the top-level latent \ud835\udc31Tsubscript\ud835\udc31\ud835\udc47\\\\mathbf{x}\\_{T} has nearly zero mutual information with the data \ud835\udc310subscript\ud835\udc310\\\\mathbf{x}\\_{0}.\nOur \u03f5bold-italic-\u03f5{\\\\boldsymbol{\\\\epsilon}}-prediction reverse process parameterization establishes a connection between diffusion models and denoising score matching over multiple noise levels with annealed Langevin dynamics for sampling \\[ [55]), [56])\\]. Diffusion models, however, admit straightforward log likelihood evaluation, and the training procedure explicitly trains the Langevin dynamics sampler using variational inference (see [AppendixC]Appendix C Discussion on related work \u2023 Denoising Diffusion Probabilistic Models\") for details).\nThe connection also has the reverse implication that a certain weighted form of denoising score matching is the same as variational inference to train a Langevin-like sampler. Other methods for learning transition operators of Markov chains include infusion training \\[ [2])\\], variational walkback \\[ [15])\\], generative stochastic networks \\[ [1])\\], and others \\[ [50]), [54]), [36]), [42]), [35]), [65])\\].\n\nBy the known connection between score matching and energy-based modeling, our work could have implications for other recent work on energy-based models \\[ [67]), [68]), [69]), [12]), [70]), [13]), [11]), [41]), [17]), [8])\\]. Our rate-distortion curves are computed over time in one evaluation of the variational bound, reminiscent of how rate-distortion curves can be computed over distortion penalties in one run of annealed importance sampling \\[ [24])\\]. Our progressive decoding argument can be seen in convolutional DRAW and related models \\[ [18]), [40])\\] and may also lead to more general designs for subscale orderings or sampling strategies for autoregressive models \\[ [38]), [64])\\].\n\n## 6 Conclusion\nWe have presented high quality image samples using diffusion models, and we have found connections among diffusion models and variational inference for training Markov chains, denoising score matching and annealed Langevin dynamics (and energy-based models by extension), autoregressive models, and progressive lossy compression. Since diffusion models seem to have excellent inductive biases for image data, we look forward to investigating their utility in other data modalities and as components in other types of generative models and machine learning systems.\n</Content></Candidate>\n\n<Candidate>Candidate [2]:\nLanguage models are few-shot learners.\n\n<Abstract>Abstract: Recent work has demonstrated substantial gains on many NLP tasks and\nbenchmarks by pre-training on a large corpus of text followed by fine-tuning on\na specific task. While typically task-agnostic in architecture, this method\nstill requires task-specific fine-tuning datasets of thousands or tens of\nthousands of examples. By contrast, humans can generally perform a new language\ntask from only a few examples or from simple instructions - something which\ncurrent NLP systems still largely struggle to do. Here we show that scaling up\nlanguage models greatly improves task-agnostic, few-shot performance, sometimes\neven reaching competitiveness with prior state-of-the-art fine-tuning\napproaches. Specifically, we train GPT-3, an autoregressive language model with\n175 billion parameters, 10x more than any previous non-sparse language model,\nand test its performance in the few-shot setting. For all tasks, GPT-3 is\napplied without any gradient updates or fine-tuning, with tasks and few-shot\ndemonstrations specified purely via text interaction with the model. GPT-3\nachieves strong performance on many NLP datasets, including translation,\nquestion-answering, and cloze tasks, as well as several tasks that require\non-the-fly reasoning or domain adaptation, such as unscrambling words, using a\nnovel word in a sentence, or performing 3-digit arithmetic. At the same time,\nwe also identify some datasets where GPT-3's few-shot learning still struggles,\nas well as some datasets where GPT-3 faces methodological issues related to\ntraining on large web corpora. Finally, we find that GPT-3 can generate samples\nof news articles which human evaluators have difficulty distinguishing from\narticles written by humans. We discuss broader societal impacts of this finding\nand of GPT-3 in general.</Abstract><Content>\n## 1 Introduction\nRecent years have featured a trend towards pre-trained language representations in NLP systems, applied in increasingly flexible and task-agnostic ways for downstream transfer. First, single-layer representations were learned using word vectors \\[ [82]), [102])\\] and fed to task-specific architectures, then RNNs with multiple layers of representations and contextual state were used to form stronger representations \\[ [24]), [81]), [100])\\] (though still applied to task-specific architectures), and more recently pre-trained recurrent or transformer language models \\[ [134])\\] have been directly fine-tuned, entirely removing the need for task-specific architectures \\[ [112]), [20]), [43])\\].\n\n![Refer to caption]Figure 1.1: Language model meta-learning. During unsupervised pre-training, a language model develops a broad set of skills and pattern recognition abilities. It then uses these abilities at inference time to rapidly adapt to or recognize the desired task. We use the term \u201cin-context learning\u201d to describe the inner loop of this process, which occurs within the forward-pass upon each sequence. The sequences in this diagram are not intended to be representative of the data a model would see during pre-training, but are intended to show that there are sometimes repeated sub-tasks embedded within a single sequence.\n\nThis last paradigm has led to substantial progress on many challenging NLP tasks such as reading comprehension, question answering, textual entailment, and many others, and has continued to advance based on new architectures and algorithms \\[ [116]), [74]), [139]), [62])\\]. However, a major limitation to this approach is that while the architecture is task-agnostic, there is still a need for task-specific datasets and task-specific fine-tuning: to achieve strong performance on a desired task typically requires fine-tuning on a dataset of thousands to hundreds of thousands of examples specific to that task. Removing this limitation would be desirable, for several reasons.\n\nFirst, from a practical perspective, the need for a large dataset of labeled examples for every new task limits the applicability of language models. There exists a very wide range of possible useful language tasks, encompassing anything from correcting grammar, to generating examples of an abstract concept, to critiquing a short story. For many of these tasks it is difficult to collect a large supervised training dataset, especially when the process must be repeated for every new task.\n\nSecond, the potential to exploit spurious correlations in training data fundamentally grows with the expressiveness of the model and the narrowness of the training distribution. This can create problems for the pre-training plus fine-tuning paradigm, where models are designed to be large to absorb information during pre-training, but are then fine-tuned on very narrow task distributions. For instance \\[ [41])\\] observe that larger models do not necessarily generalize better out-of-distribution. There is evidence that suggests that the generalization achieved under this paradigm can be poor because the model is overly specific to the training distribution and does not generalize well outside it \\[ [138]), [88])\\]. Thus, the performance of fine-tuned models on specific benchmarks, even when it is nominally at human-level, may exaggerate actual performance on the underlying task \\[ [36]), [91])\\].\n\nThird, humans do not require large supervised datasets to learn most language tasks \u2013 a brief directive in natural language (e.g. \u201cplease tell me if this sentence describes something happy or something sad\u201d) or at most a tiny number of demonstrations (e.g. \u201chere are two examples of people acting brave; please give a third example of bravery\u201d) is often sufficient to enable a human to perform a new task to at least a reasonable degree of competence. Aside from pointing to a conceptual limitation in our current NLP techniques, this adaptability has practical advantages \u2013 it allows humans to seamlessly mix together or switch between many tasks and skills, for example performing addition during a lengthy dialogue. To be broadly useful, we would someday like our NLP systems to have this same fluidity and generality.\n\nOne potential route towards addressing these issues is meta-learning111In the context of language models this has sometimes been called \u201czero-shot transfer\u201d, but this term is potentially ambiguous: the method is \u201czero-shot\u201d in the sense that no gradient updates are performed, but it often involves providing inference-time demonstrations to the model, so is not truly learning from zero examples. To avoid this confusion, we use the term \u201cmeta-learning\u201d to capture the inner-loop / outer-loop structure of the general method, and the term \u201cin context-learning\u201d to refer to the inner loop of meta-learning. We further specialize the description to \u201czero-shot\u201d, \u201cone-shot\u201d, or \u201cfew-shot\u201d depending on how many demonstrations are provided at inference time. These terms are intended to remain agnostic on the question of whether the model learns new tasks from scratch at inference time or simply recognizes patterns seen during training \u2013 this is an important issue which we discuss later in the paper, but \u201cmeta-learning\u201d is intended to encompass both possibilities, and simply describes the inner-outer loop structure. \u2013 which in the context of language models means the model develops a broad set of skills and pattern recognition abilities at training time, and then uses those abilities at inference time to rapidly adapt to or recognize the desired task (illustrated in Figure [1.1]Figure 1.1 \u2023 1 Introduction \u2023 Language Models are Few-Shot Learners\")). Recent work \\[ [117])\\] attempts to do this via what we call \u201cin-context learning\u201d, using the text input of a pretrained language model as a form of task specification: the model is conditioned on a natural language instruction and/or a few demonstrations of the task and is then expected to complete further instances of the task simply by predicting what comes next.\n\nWhile it has shown some initial promise, this approach still achieves results far inferior to fine-tuning \u2013 for example \\[ [117])\\] achieves only 4% on Natural Questions, and even its 55 F1 CoQa result is now more than 35 points behind the state of the art. Meta-learning clearly requires substantial improvement in order to be viable as a practical method of solving language tasks.\n\nAnother recent trend in language modeling may offer a way forward. In recent years the capacity of transformer language models has increased substantially, from 100 million parameters \\[ [112])\\], to 300 million parameters \\[ [20])\\], to 1.5 billion parameters \\[ [117])\\], to 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and finally 17 billion parameters \\[ [132])\\]. Each increase has brought improvements in text synthesis and/or downstream NLP tasks, and there is evidence suggesting that log loss, which correlates well with many downstream tasks, follows a smooth trend of improvement with scale \\[ [57])\\]. Since in-context learning involves absorbing many skills and tasks within the parameters of the model, it is plausible that in-context learning abilities might show similarly strong gains with scale.\n\n![Refer to caption]Figure 1.2: Larger models make increasingly efficient use of in-context information.   We show in-context learning performance on a simple task requiring the model to remove random symbols from a word, both with and without a natural language task description (see Sec. [3.9.2]Word Scrambling and Manipulation Tasks \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")). The steeper \u201cin-context learning curves\u201d for large models demonstrate improved ability to learn a task from contextual information. We see qualitatively similar behavior across a wide range of tasks.![Refer to caption]Figure 1.3: Aggregate performance for all 42 accuracy-denominated benchmarks   While zero-shot performance improves steadily with model size, few-shot performance increases more rapidly, demonstrating that larger models are more proficient at in-context learning. See Figure [3.8]Figure 3.8 \u2023 3.6 Reading Comprehension \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") for a more detailed analysis on SuperGLUE, a standard NLP benchmark suite.\n\nIn this paper, we test this hypothesis by training a 175 billion parameter autoregressive language model, which we call GPT-3, and measuring its in-context learning abilities. Specifically, we evaluate GPT-3 on over two dozen NLP datasets, as well as several novel tasks designed to test rapid adaptation to tasks unlikely to be directly contained in the training set. For each task, we evaluate GPT-3 under 3 conditions: (a) \u201cfew-shot learning\u201d, or in-context learning where we allow as many demonstrations as will fit into the model\u2019s context window (typically 10 to 100), (b) \u201cone-shot learning\u201d, where we allow only one demonstration, and (c) \u201czero-shot\u201d learning, where no demonstrations are allowed and only an instruction in natural language is given to the model. GPT-3 could also in principle be evaluated in the traditional fine-tuning setting, but we leave this to future work.\n\nFigure [1.2]Figure 1.2 \u2023 1 Introduction \u2023 Language Models are Few-Shot Learners\") illustrates the conditions we study, and shows few-shot learning of a simple task requiring the model to remove extraneous symbols from a word. Model performance improves with the addition of a natural language task description, and with the number of examples in the model\u2019s context, K\ud835\udc3eK. Few-shot learning also improves dramatically with model size. Though the results in this case are particularly striking, the general trends with both model size and number of examples in-context hold for most tasks we study. We emphasize that these \u201clearning\u201d curves involve no gradient updates or fine-tuning, just increasing numbers of demonstrations given as conditioning.\n\nBroadly, on NLP tasks GPT-3 achieves promising results in the zero-shot and one-shot settings, and in the the few-shot setting is sometimes competitive with or even occasionally surpasses state-of-the-art (despite state-of-the-art being held by fine-tuned models). For example, GPT-3 achieves 81.5 F1 on CoQA in the zero-shot setting, 84.0 F1 on CoQA in the one-shot setting, 85.0 F1 in the few-shot setting. Similarly, GPT-3 achieves 64.3% accuracy on TriviaQA in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting, the last of which is state-of-the-art relative to fine-tuned models operating in the same closed-book setting.\n\nGPT-3 also displays one-shot and few-shot proficiency at tasks designed to test rapid adaption or on-the-fly reasoning, which include unscrambling words, performing arithmetic, and using novel words in a sentence after seeing them defined only once. We also show that in the few-shot setting, GPT-3 can generate synthetic news articles which human evaluators have difficulty distinguishing from human-generated articles.\n\nAt the same time, we also find some tasks on which few-shot performance struggles, even at the scale of GPT-3. This includes natural language inference tasks like the ANLI dataset, and some reading comprehension datasets like RACE or QuAC. By presenting a broad characterization of GPT-3\u2019s strengths and weaknesses, including these limitations, we hope to stimulate study of few-shot learning in language models and draw attention to where progress is most needed.\n\nA heuristic sense of the overall results can be seen in Figure [1.3]Figure 1.3 \u2023 1 Introduction \u2023 Language Models are Few-Shot Learners\"), which aggregates the various tasks (though it should not be seen as a rigorous or meaningful benchmark in itself).\n\nWe also undertake a systematic study of \u201cdata contamination\u201d \u2013 a growing problem when training high capacity models on datasets such as Common Crawl, which can potentially include content from test datasets simply because such content often exists on the web. In this paper we develop systematic tools to measure data contamination and quantify its distorting effects. Although we find that data contamination has a minimal effect on GPT-3\u2019s performance on most datasets, we do identify a few datasets where it could be inflating results, and we either do not report results on these datasets or we note them with an asterisk, depending on the severity.\n\nIn addition to all the above, we also train a series of smaller models (ranging from 125 million parameters to 13 billion parameters) in order to compare their performance to GPT-3 in the zero, one and few-shot settings. Broadly, for most tasks we find relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap between zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models are more proficient meta-learners.\n\nFinally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and broader societal impacts, and attempt a preliminary analysis of GPT-3\u2019s characteristics in this regard.\n\nThe remainder of this paper is organized as follows. In Section [2]Approach \u2023 Language Models are Few-Shot Learners\"), we describe our approach and methods for training GPT-3 and evaluating it. Section [3]Results \u2023 Language Models are Few-Shot Learners\") presents results on the full range of tasks in the zero-, one- and few-shot settings. Section [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\") addresses questions of data contamination (train-test overlap). Section [5]Limitations \u2023 Language Models are Few-Shot Learners\") discusses limitations of GPT-3. Section [6]Broader Impacts \u2023 Language Models are Few-Shot Learners\") discusses broader impacts. Section [7]Related Work \u2023 Language Models are Few-Shot Learners\") reviews related work and Section [8]Conclusion \u2023 Language Models are Few-Shot Learners\") concludes.\n\n## 2 Approach\n![Refer to caption]Figure 2.1: Zero-shot, one-shot and few-shot, contrasted with traditional fine-tuning. The panels above show four methods for performing a task with a language model \u2013 fine-tuning is the traditional method, whereas zero-, one-, and few-shot, which we study in this work, require the model to perform the task with only forward passes at test time. We typically present the model with a few dozen examples in the few shot setting. Exact phrasings for all task descriptions, examples and prompts can be found in Appendix [G]Appendix G Details of Task Phrasing and Specifications \u2023 Language Models are Few-Shot Learners\").\n\nOur basic pre-training approach, including model, data, and training, is similar to the process described in \\[ [117])\\], with relatively straightforward scaling up of the model size, dataset size and diversity, and length of training. Our use of in-context learning is also similar to \\[ [117])\\], but in this work we systematically explore different settings for learning within the context. Therefore, we start this section by explicitly defining and contrasting the different settings that we will be evaluating GPT-3 on or could in principle evaluate GPT-3 on. These settings can be seen as lying on a spectrum of how much task-specific data they tend to rely on. Specifically, we can identify at least four points on this spectrum (see Figure [2.1]Figure 2.1 \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") for an illustration):\n\n- \u2022\n\n\nFine-Tuning (FT) has been the most common approach in recent years, and involves updating the weights of a pre-trained model by training on a supervised dataset specific to the desired task. Typically thousands to hundreds of thousands of labeled examples are used. The main advantage of fine-tuning is strong performance on many benchmarks. The main disadvantages are the need for a new large dataset for every task, the potential for poor generalization out-of-distribution \\[ [88])\\], and the potential to exploit spurious features of the training data \\[ [36]), [91])\\], potentially resulting in an unfair comparison with human performance. In this work we do not fine-tune GPT-3 because our focus is on task-agnostic performance, but GPT-3 can be fine-tuned in principle and this is a promising direction for future work.\n\n- \u2022\n\n\nFew-Shot (FS) is the term we will use in this work to refer to the setting where the model is given a few demonstrations of the task at inference time as conditioning \\[ [117])\\], but no weight updates are allowed. As shown in Figure [2.1]Figure 2.1 \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\"), for a typical dataset an example has a context and a desired completion (for example an English sentence and the French translation), and few-shot works by giving K\ud835\udc3eK examples of context and completion, and then one final example of context, with the model expected to provide the completion. We typically set K\ud835\udc3eK in the range of 10 to 100 as this is how many examples can fit in the model\u2019s context window (nctx=2048subscript\ud835\udc5bctx2048n\\_{\\\\mathrm{ctx}}=2048). The main advantages of few-shot are a major reduction in the need for task-specific data and reduced potential to learn an overly narrow distribution from a large but narrow fine-tuning dataset. The main disadvantage is that results from this method have so far been much worse than state-of-the-art fine-tuned models. Also, a small amount of task specific data is still required. As indicated by the name, few-shot learning as described here for language models is related to few-shot learning as used in other contexts in ML \\[ [45]), [133])\\] \u2013 both involve learning based on a broad distribution of tasks (in this case implicit in the pre-training data) and then rapidly adapting to a new task.\n\n- \u2022\n\n\nOne-Shot (1S) is the same as few-shot except that only one demonstration is allowed, in addition to a natural language description of the task, as shown in Figure 1. The reason to distinguish one-shot from few-shot and zero-shot (below) is that it most closely matches the way in which some tasks are communicated to humans. For example, when asking humans to generate a dataset on a human worker service (for example Mechanical Turk), it is common to give one demonstration of the task. By contrast it is sometimes difficult to communicate the content or format of a task if no examples are given.\n\n- \u2022\n\n\nZero-Shot (0S) is the same as one-shot except that no demonstrations are allowed, and the model is only given a natural language instruction describing the task. This method provides maximum convenience, potential for robustness, and avoidance of spurious correlations (unless they occur very broadly across the large corpus of pre-training data), but is also the most challenging setting. In some cases it may even be difficult for humans to understand the format of the task without prior examples, so this setting is in some cases \u201cunfairly hard\u201d. For example, if someone is asked to \u201cmake a table of world records for the 200m dash\u201d, this request can be ambiguous, as it may not be clear exactly what format the table should have or what should be included (and even with careful clarification, understanding precisely what is desired can be difficult). Nevertheless, for at least some settings zero-shot is closest to how humans perform tasks \u2013 for example, in the translation example in Figure [2.1]Figure 2.1 \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\"), a human would likely know what to do from just the text instruction.\n\n\nFigure [2.1]Figure 2.1 \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") shows the four methods using the example of translating English to French. In this paper we focus on zero-shot, one-shot and few-shot, with the aim of comparing them not as competing alternatives, but as different problem settings which offer a varying trade-off between performance on specific benchmarks and sample efficiency. We especially highlight the few-shot results as many of them are only slightly behind state-of-the-art fine-tuned models. Ultimately, however, one-shot, or even sometimes zero-shot, seem like the fairest comparisons to human performance, and are important targets for future work.\n\nSections [2.1]Model and Architectures \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\")- [2.3]Training Process \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") below give details on our models, training data, and training process respectively.\nSection [2.4]Evaluation \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") discusses the details of how we do few-shot, one-shot, and zero-shot evaluations.\n\n### 2.1 Model and Architectures\n\nWe use the same model and architecture as GPT-2 \\[ [117])\\], including the modified initialization, pre-normalization, and reversible tokenization described therein, with the exception that we use alternating dense and locally banded sparse attention patterns in the layers of the transformer, similar to the Sparse Transformer \\[ [15])\\]. To study the dependence of ML performance on model size, we train 8 different sizes of model, ranging over three orders of magnitude from 125 million parameters to 175 billion parameters, with the last being the model we call GPT-3. Previous work \\[ [57])\\] suggests that with enough training data, scaling of validation loss should be approximately a smooth power law as a function of size; training models of many different sizes allows us to test this hypothesis both for validation loss and for downstream language tasks.\n\n| Model Name | nparamssubscript\ud835\udc5bparamsn\\_{\\\\mathrm{params}} | nlayerssubscript\ud835\udc5blayersn\\_{\\\\mathrm{layers}} | dmodelsubscript\ud835\udc51modeld\\_{\\\\mathrm{model}} | nheadssubscript\ud835\udc5bheadsn\\_{\\\\mathrm{heads}} | dheadsubscript\ud835\udc51headd\\_{\\\\mathrm{head}} | Batch Size | Learning Rate |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| GPT-3 Small | 125M | 12 | 768 | 12 | 64 | 0.5M | 6.0\u00d710\u221246.0superscript1046.0\\\\times 10^{-4} |\n| GPT-3 Medium | 350M | 24 | 1024 | 16 | 64 | 0.5M | 3.0\u00d710\u221243.0superscript1043.0\\\\times 10^{-4} |\n| GPT-3 Large | 760M | 24 | 1536 | 16 | 96 | 0.5M | 2.5\u00d710\u221242.5superscript1042.5\\\\times 10^{-4} |\n| GPT-3 XL | 1.3B | 24 | 2048 | 24 | 128 | 1M | 2.0\u00d710\u221242.0superscript1042.0\\\\times 10^{-4} |\n| GPT-3 2.7B | 2.7B | 32 | 2560 | 32 | 80 | 1M | 1.6\u00d710\u221241.6superscript1041.6\\\\times 10^{-4} |\n| GPT-3 6.7B | 6.7B | 32 | 4096 | 32 | 128 | 2M | 1.2\u00d710\u221241.2superscript1041.2\\\\times 10^{-4} |\n| GPT-3 13B | 13.0B | 40 | 5140 | 40 | 128 | 2M | 1.0\u00d710\u221241.0superscript1041.0\\\\times 10^{-4} |\n| GPT-3 175B or \u201cGPT-3\u201d | 175.0B | 96 | 12288 | 96 | 128 | 3.2M | 0.6\u00d710\u221240.6superscript1040.6\\\\times 10^{-4} |\n\nTable 2.1: Sizes, architectures, and learning hyper-parameters (batch size in tokens and learning rate) of the models which we trained. All models were trained for a total of 300 billion tokens.\n\nTable [2.1]Table 2.1 \u2023 2.1 Model and Architectures \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") shows the sizes and architectures of our 8 models. Here nparamssubscript\ud835\udc5bparamsn\\_{\\\\mathrm{params}} is the total number of trainable parameters, nlayerssubscript\ud835\udc5blayersn\\_{\\\\mathrm{layers}} is the total number of layers, dmodelsubscript\ud835\udc51modeld\\_{\\\\mathrm{model}} is the number of units in each bottleneck layer (we always have the feedforward layer four times the size of the bottleneck layer, dffsubscript\ud835\udc51ffd\\_{\\\\mathrm{ff}}=4\u2217dmodelabsent\u22174subscript\ud835\udc51model=4\\\\ast d\\_{\\\\mathrm{model}}), and dheadsubscript\ud835\udc51headd\\_{\\\\mathrm{head}} is the dimension of each attention head. All models use a context window of nctx=2048subscript\ud835\udc5bctx2048n\\_{\\\\mathrm{ctx}}=2048 tokens. We partition the model across GPUs along both the depth and width dimension in order to minimize data-transfer between nodes. The precise architectural parameters for each model are chosen based on computational efficiency and load-balancing in the layout of models across GPU\u2019s. Previous work \\[ [57])\\] suggests that validation loss is not strongly sensitive to these parameters within a reasonably broad range.\n\n![Refer to caption]Figure 2.2: Total compute used during training. Based on the analysis in Scaling Laws For Neural Language Models \\[ [57])\\] we train much larger models on many fewer tokens than is typical. As a consequence, although GPT-3 3B is almost 10x larger than RoBERTa-Large (355M params), both models took roughly 50 petaflop/s-days of compute during pre-training. Methodology for these calculations can be found in Appendix [D]Appendix D Total Compute Used to Train Language Models \u2023 Language Models are Few-Shot Learners\").\n\n### 2.2 Training Dataset\n\nDatasets for language models have rapidly expanded, culminating in the Common Crawl dataset222 [https://commoncrawl.org/the-data/]\\[ [116])\\] constituting nearly a trillion words. This size of dataset is sufficient to train our largest models without ever updating on the same sequence twice. However, we have found that unfiltered or lightly filtered versions of Common Crawl tend to have lower quality than more curated datasets. Therefore, we took 3 steps to improve the average quality of our datasets: (1) we downloaded and filtered a version of CommonCrawl based on similarity to a range of high-quality reference corpora, (2) we performed fuzzy deduplication at the document level, within and across datasets, to prevent redundancy and preserve the integrity of our held-out validation set as an accurate measure of overfitting, and (3) we also added known high-quality reference corpora to the training mix to augment CommonCrawl and increase its diversity.\n\nDetails of the first two points (processing of Common Crawl) are described in Appendix [A]Appendix A Details of Common Crawl Filtering \u2023 Language Models are Few-Shot Learners\"). For the third, we added several curated high-quality datasets, including an expanded version of the WebText dataset \\[ [117])\\], collected by scraping links over a longer period of time, and first described in \\[ [57])\\], two internet-based books corpora (Books1 and Books2) and English-language Wikipedia.\n\nTable [2.2]Table 2.2 \u2023 2.2 Training Dataset \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") shows the final mixture of datasets that we used in training. The CommonCrawl data was downloaded from 41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before filtering and 570GB after filtering, roughly equivalent to 400 billion byte-pair-encoded tokens. Note that during training, datasets are not sampled in proportion to their size, but rather datasets we view as higher-quality are sampled more frequently, such that CommonCrawl and Books2 datasets are sampled less than once during training, but the other datasets are sampled 2-3 times. This essentially accepts a small amount of overfitting in exchange for higher quality training data.\n\n| Dataset | Quantity(tokens) | Weight intraining mix | Epochs elapsed whentraining for 300B tokens |\n| --- | --- | --- | --- |\n| Common Crawl (filtered) | 410 billion | 60% | 0.44 |\n| WebText2 | 19 billion | 22% | 2.9 |\n| Books1 | 12 billion | 8% | 1.9 |\n| Books2 | 55 billion | 8% | 0.43 |\n| Wikipedia | 3 billion | 3% | 3.4 |\n\nTable 2.2: Datasets used to train GPT-3. \u201cWeight in training mix\u201d refers to the fraction of examples during training that are drawn from a given dataset, which we intentionally do not make proportional to the size of the dataset. As a result, when we train for 300 billion tokens, some datasets are seen up to 3.4 times during training while other datasets are seen less than once.\n\nA major methodological concern with language models pretrained on a broad swath of internet data, particularly large models with the capacity to memorize vast amounts of content, is potential contamination of downstream tasks by having their test or development sets inadvertently seen during pre-training. To reduce such contamination, we searched for and attempted to remove any overlaps with the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug in the filtering caused us to ignore some overlaps, and due to the cost of training it was not feasible to retrain the model. In Section [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\") we characterize the impact of the remaining overlaps, and in future work we will more aggressively remove data contamination.\n\n### 2.3 Training Process\n\nAs found in \\[ [57]), [85])\\], larger models can typically use a larger batch size, but require a smaller learning rate. We measure the gradient noise scale during training and use it to guide our choice of batch size \\[ [85])\\]. Table [2.1]Table 2.1 \u2023 2.1 Model and Architectures \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") shows the parameter settings we used. To train the larger models without running out of memory, we use a mixture of model parallelism within each matrix multiply and model parallelism across the layers of the network. All models were trained on V100 GPU\u2019s on part of a high-bandwidth cluster provided by Microsoft. Details of the training process and hyperparameter settings are described in Appendix [B]Appendix B Details of Model Training \u2023 Language Models are Few-Shot Learners\").\n\n### 2.4 Evaluation\n\nFor few-shot learning, we evaluate each example in the evaluation set by randomly drawing K\ud835\udc3eK examples from that task\u2019s training set as conditioning, delimited by 1 or 2 newlines depending on the task. For LAMBADA and Storycloze there is no supervised training set available so we draw conditioning examples from the development set and evaluate on the test set. For Winograd (the original, not SuperGLUE version) there is only one dataset, so we draw conditioning examples directly from it.\n\nK\ud835\udc3eK can be any value from 0 to the maximum amount allowed by the model\u2019s context window, which is nctx=2048subscript\ud835\udc5bctx2048n\\_{\\\\mathrm{ctx}}=2048 for all models and typically fits 101010 to 100100100 examples. Larger values of K\ud835\udc3eK are usually but not always better, so when a separate development and test set are available, we experiment with a few values of K\ud835\udc3eK on the development set and then run the best value on the test set. For some tasks (see Appendix [G]Appendix G Details of Task Phrasing and Specifications \u2023 Language Models are Few-Shot Learners\")) we also use a natural language prompt in addition to (or for K=0\ud835\udc3e0K=0, instead of) demonstrations.\n\nOn tasks that involve choosing one correct completion from several options (multiple choice), we provide K\ud835\udc3eK examples of context plus correct completion, followed by one example of context only, and compare the LM likelihood of each completion. For most tasks we compare the per-token likelihood (to normalize for length), however on a small number of datasets (ARC, OpenBookQA, and RACE) we gain additional benefit as measured on the development set by normalizing by the unconditional probability of each completion, by computing P\u200b(completion\\|context)P\u200b(completion\\|answer\u200b\\_\u200bcontext)\ud835\udc43conditionalcompletioncontext\ud835\udc43conditionalcompletionanswer\\_context\\\\frac{P(\\\\mathrm{completion}\\|\\\\mathrm{context})}{P(\\\\mathrm{completion}\\|\\\\mathrm{answer\\\\\\_context})}, where answer\u200b\\_\u200bcontextanswer\\_context\\\\mathrm{answer\\\\\\_context} is the string \"Answer: \" or \"A: \" and is used to prompt that the completion should be an answer but is otherwise generic.\n\nOn tasks that involve binary classification, we give the options more semantically meaningful names (e.g. \u201cTrue\u201d or \u201cFalse\u201d rather than 0 or 1) and then treat the task like multiple choice; we also sometimes frame the task similar to what is done by \\[ [116])\\] (see Appendix [G]Appendix G Details of Task Phrasing and Specifications \u2023 Language Models are Few-Shot Learners\")) for details.\n\nOn tasks with free-form completion, we use beam search with the same parameters as \\[ [116])\\]: a beam width of 4 and a length penalty of \u03b1=0.6\ud835\udefc0.6\\\\alpha=0.6. We score the model using F1 similarity score, BLEU, or exact match, depending on what is standard for the dataset at hand.\n\nFinal results are reported on the test set when publicly available, for each model size and learning setting (zero-, one-, and few-shot). When the test set is private, our model is often too large to fit on the test server, so we report results on the development set. We do submit to the test server on a small number of datasets (SuperGLUE, TriviaQA, PiQa) where we were able to make submission work, and we submit only the 200B few-shot results, and report development set results for everything else.\n\n## 3 Results\n![Refer to caption]Figure 3.1: Smooth scaling of performance with compute. Performance (measured in terms of cross-entropy validation loss) follows a power-law trend with the amount of compute used for training. The power-law behavior observed in \\[ [57])\\] continues for an additional two orders of magnitude with only small deviations from the predicted curve. For this figure, we exclude embedding parameters from compute and parameter counts.\n\nIn Figure [3.1]Figure 3.1 \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we display training curves for the 8 models described in Section [2]Approach \u2023 Language Models are Few-Shot Learners\"). For this graph we also include 6 additional extra-small models with as few as 100,000 parameters. As observed in \\[ [57])\\], language modeling performance follows a power-law when making efficient use of training compute. After extending this trend by two more orders of magnitude, we observe only a slight (if any) departure from the power-law. One might worry that these improvements in cross-entropy loss come only from modeling spurious details of our training corpus. However, we will see in the following sections that improvements in cross-entropy loss lead to consistent performance gains across a broad spectrum of natural language tasks.\n\nBelow, we evaluate the 8 models described in Section [2]Approach \u2023 Language Models are Few-Shot Learners\") (the 175 billion parameter parameter GPT-3 and 7 smaller models) on a wide range of datasets. We group the datasets into 9 categories representing roughly similar tasks.\n\nIn Section [3.1]Language Modeling, Cloze, and Completion Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we evaluate on traditional language modeling tasks and tasks that are similar to language modeling, such as Cloze tasks and sentence/paragraph completion tasks. In Section [3.2]Closed Book Question Answering \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we evaluate on \u201cclosed book\u201d question answering tasks: tasks which require using the information stored in the model\u2019s parameters to answer general knowledge questions. In Section [3.3]Translation \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we evaluate the model\u2019s ability to translate between languages (especially one-shot and few-shot). In Section [3.4]Winograd-Style Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we evaluate the model\u2019s performance on Winograd Schema-like tasks. In Section [3.5]Common Sense Reasoning \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we evaluate on datasets that involve commonsense reasoning or question answering. In Section [3.6]Reading Comprehension \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we evaluate on reading comprehension tasks, in Section [3.7]SuperGLUE \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we evaluate on the SuperGLUE benchmark suite, and in [3.8]NLI \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") we briefly explore NLI. Finally, in Section [3.9]Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"), we invent some additional tasks designed especially to probe in-context learning abilities \u2013 these tasks focus on on-the-fly reasoning, adaptation skills, or open-ended text synthesis. We evaluate all tasks in the few-shot, one-shot, and zero-shot settings.\n\n### 3.1 Language Modeling, Cloze, and Completion Tasks\n\nIn this section we test GPT-3\u2019s performance on the traditional task of language modeling, as well as related tasks that involve predicting a single word of interest, completing a sentence or paragraph, or choosing between possible completions of a piece of text.\n\n#### 3.1.1 Language Modeling\n\nWe calculate zero-shot perplexity on the Penn Tree Bank (PTB) \\[ [86])\\] dataset measured in \\[ [117])\\]. We omit the 4 Wikipedia-related tasks in that work because they are entirely contained in our training data, and we also omit the one-billion word benchmark due to a high fraction of the dataset being contained in our training set. PTB escapes these issues due to predating the modern internet. Our largest model sets a new SOTA on PTB by a substantial margin of 15 points, achieving a perplexity of 20.50. Note that since PTB is a traditional language modeling dataset it does not have a clear separation of examples to define one-shot or few-shot evaluation around, so we measure only zero-shot.\n\n| Setting | PTB |\n| --- | --- |\n| SOTA (Zero-Shot) | 35.8a |\n| GPT-3 Zero-Shot | 20.5 |\n\nTable 3.1: Zero-shot results on PTB language modeling dataset. Many other common language modeling datasets are omitted because they are derived from Wikipedia or other sources which are included in GPT-3\u2019s training data. a\\[ [117])\\]\n\n#### 3.1.2 LAMBADA\n\n| Setting | LAMBADA(acc) | LAMBADA(ppl) | StoryCloze(acc) | HellaSwag(acc) |\n| --- | --- | --- | --- | --- |\n| SOTA | 68.0a | 8.63b | 91.8c | 85.6d |\n| GPT-3 Zero-Shot | 76.2 | 3.00 | 83.2 | 78.9 |\n| GPT-3 One-Shot | 72.5 | 3.35 | 84.7 | 78.1 |\n| GPT-3 Few-Shot | 86.4 | 1.92 | 87.7 | 79.3 |\n\nTable 3.2: Performance on cloze and completion tasks. GPT-3 significantly improves SOTA on LAMBADA while achieving respectable performance on two difficult completion prediction datasets. a\\[ [132])\\]b\\[ [117])\\]c\\[ [64])\\]d\\[ [63])\\]![Refer to caption]Figure 3.2: On LAMBADA, the few-shot capability of language models results in a strong boost to accuracy. GPT-3 2.7B outperforms the SOTA 17B parameter Turing-NLG \\[ [132])\\] in this setting, and GPT-3 175B advances the state of the art by 18%. Note zero-shot uses a different format from one-shot and few-shot as described in the text.\n\nThe LAMBADA dataset \\[ [99])\\] tests the modeling of long-range dependencies in text \u2013 the model is asked to predict the last word of sentences which require reading a paragraph of context. It has recently been suggested that the continued scaling of language models is yielding diminishing returns on this difficult benchmark. \\[ [9])\\] reflect on the small 1.5% improvement achieved by a doubling of model size between two recent state of the art results (\\[ [125])\\] and \\[ [132])\\]) and argue that \u201ccontinuing to expand hardware and data sizes by orders of magnitude is not the path forward\u201d. We find that path is still promising and in a zero-shot setting GPT-3 achieves 76% on LAMBADA, a gain of 8% over the previous state of the art.\n\nLAMBADA is also a demonstration of the flexibility of few-shot learning as it provides a way to address a problem that classically occurs with this dataset. Although the completion in LAMBADA is always the last word in a sentence, a standard language model has no way of knowing this detail. It thus assigns probability not only to the correct ending but also to other valid continuations of the paragraph. This problem has been partially addressed in the past with stop-word filters \\[ [117])\\] (which ban \u201ccontinuation\u201d words). The few-shot setting instead allows us to \u201cframe\u201d the task as a cloze-test and allows the language model to infer from examples that a completion of exactly one word is desired. We use the following fill-in-the-blank format:\n\nAlice was friends with Bob. Alice went to visit her friend . \u2192\u2192\\\\to Bob\n\nGeorge bought some baseball equipment, a ball, a glove, and a . \u2192\u2192\\\\to\n\nWhen presented with examples formatted this way, GPT-3 achieves 86.4% accuracy in the few-shot setting, an increase of over 18% from the previous state-of-the-art. We observe that few-shot performance improves strongly with model size. While this setting decreases the performance of the smallest model by almost 20%, for GPT-3 it improves accuracy by 10%. Finally, the fill-in-blank method is not effective one-shot, where it always performs worse than the zero-shot setting. Perhaps this is because all models still require several examples to recognize the pattern.\n\nOne note of caution is that an analysis of test set contamination identified that a significant minority of the LAMBADA dataset appears to be present in our training data \u2013 however analysis performed in Section [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\") suggests negligible impact on performance.\n\n#### 3.1.3 HellaSwag\n\nThe HellaSwag dataset \\[ [140])\\] involves picking the best ending to a story or set of instructions. The examples were adversarially mined to be difficult for language models while remaining easy for humans (who achieve 95.6% accuracy). GPT-3 achieves 78.1% accuracy in the one-shot setting and 79.3% accuracy in the few-shot setting, outperforming the 75.4% accuracy of a fine-tuned 1.5B parameter language model \\[ [141])\\] but still a fair amount lower than the overall SOTA of 85.6% achieved by the fine-tuned multi-task model ALUM.\n\n#### 3.1.4 StoryCloze\n\nWe next evaluate GPT-3 on the StoryCloze 2016 dataset \\[ [83])\\], which involves selecting the correct ending sentence for five-sentence long stories. Here GPT-3 achieves 83.2% in the zero-shot setting and 87.7% in the few-shot setting (with K=70\ud835\udc3e70K=70). This is still 4.1% lower than the fine-tuned SOTA using a BERT based model \\[ [64])\\] but improves over previous zero-shot results by roughly 10%.\n\n### 3.2 Closed Book Question Answering\n\n| Setting | NaturalQS | WebQS | TriviaQA |\n| --- | --- | --- | --- |\n| RAG (Fine-tuned, Open-Domain) \\[ [75])\\] | 44.5 | 45.5 | 68.0 |\n| T5-11B+SSM (Fine-tuned, Closed-Book) \\[ [115])\\] | 36.6 | 44.7 | 60.5 |\n| T5-11B (Fine-tuned, Closed-Book) | 34.5 | 37.4 | 50.1 |\n| GPT-3 Zero-Shot | 14.6 | 14.4 | 64.3 |\n| GPT-3 One-Shot | 23.0 | 25.3 | 68.0 |\n| GPT-3 Few-Shot | 29.9 | 41.5 | 71.2 |\n\nTable 3.3: Results on three Open-Domain QA tasks. GPT-3 is shown in the few-, one-, and zero-shot settings, as compared to prior SOTA results for closed book and open domain settings. TriviaQA few-shot result is evaluated on the wiki split test server.![Refer to caption]Figure 3.3: On TriviaQA GPT3\u2019s performance grows smoothly with model size, suggesting that language models continue to absorb knowledge as their capacity increases. One-shot and few-shot performance make significant gains over zero-shot behavior, matching and exceeding the performance of the SOTA fine-tuned open-domain model, RAG \\[ [75])\\]\n\nIn this section we measure GPT-3\u2019s ability to answer questions about broad factual knowledge. Due to the immense amount of possible queries, this task has normally been approached by using an information retrieval system to find relevant text in combination with a model which learns to generate an answer given the question and the retrieved text. Since this setting allows a system to search for and condition on text which potentially contains the answer it is denoted \u201copen-book\u201d. \\[ [115])\\] recently demonstrated that a large language model can perform surprisingly well directly answering the questions without conditioning on auxilliary information. They denote this more restrictive evaluation setting as \u201cclosed-book\u201d. Their work suggests that even higher-capacity models could perform even better and we test this hypothesis with GPT-3. We evaluate GPT-3 on the 3 datasets in \\[ [115])\\]: Natural Questions \\[ [58])\\], WebQuestions \\[ [5])\\], and TriviaQA \\[ [49])\\], using the same splits. Note that in addition to all results being in the closed-book setting, our use of few-shot, one-shot, and zero-shot evaluations represent an even stricter setting than previous closed-book QA work: in addition to external content not being allowed, fine-tuning on the Q&A dataset itself is also not permitted.\n\nThe results for GPT-3 are shown in Table [3.3]Table 3.3 \u2023 3.2 Closed Book Question Answering \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"). On TriviaQA, we achieve 64.3% in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting. The zero-shot result already outperforms the fine-tuned T5-11B by 14.2%, and also outperforms a version with Q&A tailored span prediction during pre-training by 3.8%. The one-shot result improves by 3.7% and matches the SOTA for an open-domain QA system which not only fine-tunes but also makes use of a learned retrieval mechanism over a 15.3B parameter dense vector index of 21M documents \\[ [75])\\]. GPT-3\u2019s few-shot result further improves performance another 3.2% beyond this.\n\nOn WebQuestions (WebQs), GPT-3 achieves 14.4% in the zero-shot setting, 25.3% in the one-shot setting, and 41.5% in the few-shot setting. This compares to 37.4% for fine-tuned T5-11B, and 44.7% for fine-tuned T5-11B+SSM, which uses a Q&A-specific pre-training procedure. GPT-3 in the few-shot setting approaches the performance of state-of-the-art fine-tuned models. Notably, compared to TriviaQA, WebQS shows a much larger gain from zero-shot to few-shot (and indeed its zero-shot and one-shot performance are poor), perhaps suggesting that the WebQs questions and/or the style of their answers are out-of-distribution for GPT-3. Nevertheless, GPT-3 appears able to adapt to this distribution, recovering strong performance in the few-shot setting.\n\nOn Natural Questions (NQs) GPT-3 achieves 14.6% in the zero-shot setting, 23.0% in the one-shot setting, and 29.9% in the few-shot setting, compared to 36.6% for fine-tuned T5 11B+SSM. Similar to WebQS, the large gain from zero-shot to few-shot may suggest a distribution shift, and may also explain the less competitive performance compared to TriviaQA and WebQS. In particular, the questions in NQs tend towards very fine-grained knowledge on Wikipedia specifically which could be testing the limits of GPT-3\u2019s capacity and broad pretraining distribution.\n\nOverall, on one of the three datasets GPT-3\u2019s one-shot matches the open-domain fine-tuning SOTA. On the other two datasets it approaches the performance of the closed-book SOTA despite not using fine-tuning. On all 3 datasets, we find that performance scales very smoothly with model size (Figure [3.3]Figure 3.3 \u2023 3.2 Closed Book Question Answering \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") and Appendix [H]Appendix H Results on All Tasks for All Model Sizes \u2023 Language Models are Few-Shot Learners\") Figure [H.7]Figure H.7 \u2023 Appendix H Results on All Tasks for All Model Sizes \u2023 Language Models are Few-Shot Learners\")), possibly reflecting the idea that model capacity translates directly to more \u2018knowledge\u2019 absorbed in the parameters of the model.\n\n### 3.3 Translation\n\nFor GPT-2 a filter was used on a multilingual collection of documents to produce an English only dataset due to capacity concerns. Even with this filtering GPT-2 showed some evidence of multilingual capability and performed non-trivially when translating between French and English despite only training on 10 megabytes of remaining French text. Since we increase the capacity by over two orders of magnitude from GPT-2 to GPT-3, we also expand the scope of the training dataset to include more representation of other languages, though this remains an area for further improvement. As discussed in [2.2]Training Dataset \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\") the majority of our data is derived from raw Common Crawl with only quality-based filtering. Although GPT-3\u2019s training data is still primarily English (93% by word count), it also includes 7% of text in other languages. These languages are documented in the [supplemental material]. In order to better understand translation capability, we also expand our analysis to include two additional commonly studied languages, German and Romanian.\n\nExisting unsupervised machine translation approaches often combine pretraining on a pair of monolingual datasets with back-translation \\[ [123])\\] to bridge the two languages in a controlled way. By contrast, GPT-3 learns from a blend of training data that mixes many languages together in a natural way, combining them on a word, sentence, and document level. GPT-3 also uses a single training objective which is not customized or designed for any task in particular. However, our one / few-shot settings aren\u2019t strictly comparable to prior unsupervised work since they make use of a small amount of paired examples (1 or 64). This corresponds to up to a page or two of in-context training data.\n\n| Setting | En\u2192\u2192\\\\toFr | Fr\u2192\u2192\\\\toEn | En\u2192\u2192\\\\toDe | De\u2192\u2192\\\\toEn | En\u2192\u2192\\\\toRo | Ro\u2192\u2192\\\\toEn |\n| --- | --- | --- | --- | --- | --- | --- |\n| SOTA (Supervised) | 45.6a | 35.0 b | 41.2c | 40.2d | 38.5e | 39.9e |\n| --- | --- | --- | --- | --- | --- | --- |\n| XLM \\[ [61])\\] | 33.4 | 33.3 | 26.4 | 34.3 | 33.3 | 31.8 |\n| MASS \\[ [127])\\] | 37.5 | 34.9 | 28.3 | 35.2 | 35.2 | 33.1 |\n| mBART \\[ [66])\\] | - | - | 29.8 | 34.0 | 35.0 | 30.5 |\n| GPT-3 Zero-Shot | 25.2 | 21.2 | 24.6 | 27.2 | 14.1 | 19.9 |\n| GPT-3 One-Shot | 28.3 | 33.7 | 26.2 | 30.4 | 20.6 | 38.6 |\n| GPT-3 Few-Shot | 32.6 | 39.2 | 29.7 | 40.6 | 21.0 | 39.5 |\n\nTable 3.4: Few-shot GPT-3 outperforms previous unsupervised NMT work by 5 BLEU when translating into English reflecting its strength as an English LM. We report BLEU scores on the WMT\u201914 Fr\u2194\u2194\\\\leftrightarrowEn, WMT\u201916 De\u2194\u2194\\\\leftrightarrowEn, and WMT\u201916 Ro\u2194\u2194\\\\leftrightarrowEn datasets as measured by multi-bleu.perl with XLM\u2019s tokenization in order to compare most closely with prior unsupervised NMT work. SacreBLEUf\\[ [101])\\] results reported in Appendix [H]Appendix H Results on All Tasks for All Model Sizes \u2023 Language Models are Few-Shot Learners\"). Underline indicates an unsupervised or few-shot SOTA, bold indicates supervised SOTA with relative confidence.\na\\[ [29])\\]b\\[ [23])\\]c\\[ [136])\\]d\\[ [95])\\]e\\[ [66])\\]f\\[SacreBLEU signature: BLEU+case.mixed+numrefs.1+smooth.exp+tok.intl+version.1.2.20\\] ![Refer to caption]Figure 3.4: Few-shot translation performance on 6 language pairs as model capacity increases. There is a consistent trend of improvement across all datasets as the model scales, and as well as tendency for translation into English to be stronger than translation from English.\n\nResults are shown in Table [3.4]Table 3.4 \u2023 3.3 Translation \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"). Zero-shot GPT-3, which only receives on a natural language description of the task, still underperforms recent unsupervised NMT results. However, providing only a single example demonstration for each translation task improves performance by over 7 BLEU and nears competitive performance with prior work. GPT-3 in the full few-shot setting further improves another 4 BLEU resulting in similar average performance to prior unsupervised NMT work. GPT-3 has a noticeable skew in its performance depending on language direction. For the three input languages studied, GPT-3 significantly outperforms prior unsupervised NMT work when translating into English but underperforms when translating in the other direction. Performance on En-Ro is a noticeable outlier at over 10 BLEU worse than prior unsupervised NMT work. This could be a weakness due to reusing the byte-level BPE tokenizer of GPT-2 which was developed for an almost entirely English training dataset. For both Fr-En and De-En, few shot GPT-3 outperforms the best supervised result we could find but due to our unfamiliarity with the literature and the appearance that these are un-competitive benchmarks we do not suspect those results represent true state of the art. For Ro-En, few shot GPT-3 performs within 0.5 BLEU of the overall SOTA which is achieved by a combination of unsupervised pretraining, supervised finetuning on 608K labeled examples, and backtranslation \\[ [70])\\].\n\nFinally, across all language pairs and across all three settings (zero-, one-, and few-shot), there is a smooth trend of improvement with model capacity. This is shown in Figure [3.4]Figure 3.4 \u2023 3.3 Translation \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") in the case of few-shot results, and scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes \u2023 Language Models are Few-Shot Learners\").\n\n### 3.4 Winograd-Style Tasks\n\n| Setting | Winograd | Winogrande (XL) |\n| --- | --- | --- |\n| Fine-tuned SOTA | 90.1a | 84.6b |\n| GPT-3 Zero-Shot | 88.3\\* | 70.2 |\n| GPT-3 One-Shot | 89.7\\* | 73.2 |\n| GPT-3 Few-Shot | 88.6\\* | 77.7 |\n\nTable 3.5: Results on the WSC273 version of Winograd schemas and the adversarial Winogrande dataset. See Section [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\") for details on potential contamination of the Winograd test set. a\\[ [118])\\]b\\[ [79])\\]![Refer to caption]Figure 3.5: Zero-, one-, and few-shot performance on the adversarial Winogrande dataset as model capacity scales. Scaling is relatively smooth with the gains to few-shot learning increasing with model size, and few-shot GPT-3 175B is competitive with a fine-tuned RoBERTA-large.\n\nThe Winograd Schemas Challenge \\[ [65])\\] is a classical task in NLP that involves determining which word a pronoun refers to, when the pronoun is grammatically ambiguous but semantically unambiguous to a human. Recently fine-tuned language models have achieved near-human performance on the original Winograd dataset, but more difficult versions such as the adversarially-mined Winogrande dataset \\[ [118])\\] still significantly lag human performance. We test GPT-3\u2019s performance on both Winograd and Winogrande, as usual in the zero-, one-, and few-shot setting.\n\nOn Winograd we test GPT-3 on the original set of 273 Winograd schemas, using the same \u201cpartial evaluation\u201d method described in \\[ [117])\\]. Note that this setting differs slightly from the WSC task in the SuperGLUE benchmark, which is presented as binary classification and requires entity extraction to convert to the form described in this section. On Winograd GPT-3 achieves 88.3%, 89.7%, and 88.6% in the zero-shot, one-shot, and few-shot settings, showing no clear in-context learning but in all cases achieving strong results just a few points below state-of-the-art and estimated human performance. We note that contamination analysis found some Winograd schemas in the training data but this appears to have only a small effect on results (see Section [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\")).\n\nOn the more difficult Winogrande dataset, we do find gains to in-context learning: GPT-3 achieves 70.2% in the zero-shot setting, 73.2% in the one-shot setting, and 77.7% in the few-shot setting. For comparison a fine-tuned RoBERTA model achieves 79%, state-of-the-art is 84.6% achieved with a fine-tuned high capacity model (T5), and human performance on the task as reported by \\[ [118])\\] is 94.0%.\n\n### 3.5 Common Sense Reasoning\n\n| Setting | PIQA | ARC (Easy) | ARC (Challenge) | OpenBookQA |\n| --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 79.4 | 92.0\\[ [55])\\] | 78.5\\[ [55])\\] | 87.2\\[ [55])\\] |\n| GPT-3 Zero-Shot | 80.5\\* | 68.8 | 51.4 | 57.6 |\n| GPT-3 One-Shot | 80.5\\* | 71.2 | 53.2 | 58.8 |\n| GPT-3 Few-Shot | 82.8\\* | 70.1 | 51.5 | 65.4 |\n\nTable 3.6: GPT-3 results on three commonsense reasoning tasks, PIQA, ARC, and OpenBookQA. GPT-3 Few-Shot PIQA result is evaluated on the test server. See Section [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\") for details on potential contamination issues on the PIQA test set.![Refer to caption]Figure 3.6: GPT-3 results on PIQA in the zero-shot, one-shot, and few-shot settings. The largest model achieves a score on the development set in all three conditions that exceeds the best recorded score on the task.\n\nNext we consider three datasets which attempt to capture physical or scientific reasoning, as distinct from sentence completion, reading comprehension, or broad knowledge question answering. The first, PhysicalQA (PIQA) \\[ [11])\\], asks common sense questions about how the physical world works and is intended as a probe of grounded understanding of the world. GPT-3 achieves 81.0% accuracy zero-shot, 80.5% accuracy one-shot, and 82.8% accuracy few-shot (the last measured on PIQA\u2019s test server). This compares favorably to the 79.4% accuracy prior state-of-the-art of a fine-tuned RoBERTa. PIQA shows relatively shallow scaling with model size and is still over 10% worse than human performance, but GPT-3\u2019s few-shot and even zero-shot result outperform the current state-of-the-art. Our analysis flagged PIQA for a potential data contamination issue (despite hidden test labels), and we therefore conservatively mark the result with an asterisk. See Section [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\") for details.\n\nARC \\[ [14])\\] is a dataset of multiple-choice questions collected from 3rd to 9th grade science exams. On the \u201cChallenge\u201d version of the dataset which has been filtered to questions which simple statistical or information retrieval methods are unable to correctly answer, GPT-3 achieves 51.4% accuracy in the zero-shot setting, 53.2% in the one-shot setting, and 51.5% in the few-shot setting. This is approaching the performance of a fine-tuned RoBERTa baseline (55.9%) from UnifiedQA \\[ [55])\\]. On the \u201cEasy\u201d version of the dataset (questions which either of the mentioned baseline approaches answered correctly), GPT-3 achieves 68.8%, 71.2%, and 70.1% which slightly exceeds a fine-tuned RoBERTa baseline from \\[ [55])\\]. However, both of these results are still much worse than the overall SOTAs achieved by the UnifiedQA which exceeds GPT-3\u2019s few-shot results by 27% on the challenge set and 22% on the easy set.\n\nOn OpenBookQA \\[ [84])\\], GPT-3 improves significantly from zero to few shot settings but is still over 20 points short of the overall SOTA. GPT-3\u2019s few-shot performance is similar to a fine-tuned BERT Large baseline on the leaderboard.\n\nOverall, in-context learning with GPT-3 shows mixed results on commonsense reasoning tasks, with only small and inconsistent gains observed in the one and few-shot learning settings for both PIQA and ARC, but a significant improvement is observed on OpenBookQA. GPT-3 sets SOTA on the new PIQA dataset in all evaluation settings.\n\n### 3.6 Reading Comprehension\n\n| Setting | CoQA | DROP | QuAC | SQuADv2 | RACE-h | RACE-m |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 90.7a | 89.1b | 74.4c | 93.0d | 90.0e | 93.1e |\n| GPT-3 Zero-Shot | 81.5 | 23.6 | 41.5 | 59.5 | 45.5 | 58.4 |\n| GPT-3 One-Shot | 84.0 | 34.3 | 43.3 | 65.4 | 45.9 | 57.4 |\n| GPT-3 Few-Shot | 85.0 | 36.5 | 44.3 | 69.8 | 46.8 | 58.1 |\n\nTable 3.7: Results on reading comprehension tasks. All scores are F1 except results for RACE which report accuracy. a\\[ [53])\\]b\\[ [50])\\]c\\[ [2])\\]d\\[ [103])\\]e\\[ [125])\\]![Refer to caption]Figure 3.7: GPT-3 results on CoQA reading comprehension task. GPT-3 175B achieves 85 F1 in the few-shot setting, only a few points behind measured human performance and state-of-the-art fine-tuned models. Zero-shot and one-shot performance is a few points behind, with the gains to few-shot being largest for bigger models.\n\nNext we evaluate GPT-3 on the task of reading comprehension. We use a suite of 5 datasets including abstractive, multiple choice, and span based answer formats in both dialog and single question settings. We observe a wide spread in GPT-3\u2019s performance across these datasets suggestive of varying capability with different answer formats. In general we observe GPT-3 is on par with initial baselines and early results trained using contextual representations on each respective dataset.\n\nGPT-3 performs best (within 3 points of the human baseline) on CoQA \\[ [106])\\] a free-form conversational dataset and performs worst (13 F1 below an ELMo baseline) on QuAC \\[ [16])\\] a dataset which requires modeling structured dialog acts and answer span selections of teacher-student interactions. On DROP \\[ [27])\\], a dataset testing discrete reasoning and numeracy in the context of reading comprehension, GPT-3 in a few-shot setting outperforms the fine-tuned BERT baseline from the original paper but is still well below both human performance and state-of-the-art approaches which augment neural networks with symbolic systems \\[ [110])\\]. On SQuAD 2.0 \\[ [108])\\], GPT-3 demonstrates its few-shot learning capabilities, improving by almost 10 F1 (to 69.8) compared to a zero-shot setting. This allows it to slightly outperform the best fine-tuned result in the original paper. On RACE \\[ [78])\\], a multiple choice dataset of middle school and high school english examinations, GPT-3 performs relatively weakly and is only competitive with the earliest work utilizing contextual representations and is still 45% behind SOTA.\n\n|  | SuperGLUE | BoolQ | CB | CB | COPA | RTE |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Average | Accuracy | Accuracy | F1 | Accuracy | Accuracy |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 89.0 | 91.0 | 96.9 | 93.9 | 94.8 | 92.5 |\n| Fine-tuned BERT-Large | 69.0 | 77.4 | 83.6 | 75.7 | 70.6 | 71.7 |\n| GPT-3 Few-Shot | 71.8 | 76.4 | 75.6 | 52.0 | 92.0 | 69.0 |\n\n|  | WiC | WSC | MultiRC | MultiRC | ReCoRD | ReCoRD |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Accuracy | Accuracy | Accuracy | F1a | Accuracy | F1 |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 76.1 | 93.8 | 62.3 | 88.2 | 92.5 | 93.3 |\n| Fine-tuned BERT-Large | 69.6 | 64.6 | 24.1 | 70.0 | 71.3 | 72.0 |\n| GPT-3 Few-Shot | 49.4 | 80.1 | 30.5 | 75.4 | 90.2 | 91.1 |\n\nTable 3.8:\nPerformance of GPT-3 on SuperGLUE compared to fine-tuned baselines and SOTA. All results are reported on the test set. GPT-3 few-shot is given a total of 32 examples within the context of each task and performs no gradient updates.\n![Refer to caption]Figure 3.8:\nPerformance on SuperGLUE increases with model size and number of examples in context. A value of K=32\ud835\udc3e32K=32 means that our model was shown 32 examples per task, for 256 examples total divided across the 8 tasks in SuperGLUE. We report GPT-3 values on the dev set, so our numbers are not directly comparable to the dotted reference lines (our test set results are in Table [3.8]Table 3.8 \u2023 3.6 Reading Comprehension \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")). The BERT-Large reference model was fine-tuned on the SuperGLUE training set (125K examples), whereas BERT++ was first fine-tuned on MultiNLI (392K examples) and SWAG (113K examples) before further fine-tuning on the SuperGLUE training set (for a total of 630K fine-tuning examples). We find the difference in performance between the BERT-Large and BERT++ to be roughly equivalent to the difference between GPT-3 with one example per context versus eight examples per context.\n\n### 3.7 SuperGLUE\n\nIn order to better aggregate results on NLP tasks and compare to popular models such as BERT and RoBERTa in a more systematic way, we also evaluate GPT-3 on a standardized collection of datasets, the SuperGLUE benchmark \\[ [135])\\]\\[ [135])\\]\\[ [17])\\]\\[ [25])\\]\\[ [105])\\]\\[ [54])\\]\\[ [142])\\]\\[ [21])\\]\\[ [8])\\]\\[ [34])\\]\\[ [6])\\]\\[ [96])\\]\\[ [98])\\]. GPT-3\u2019s test-set performance on the SuperGLUE dataset is shown in Table [3.8]Table 3.8 \u2023 3.6 Reading Comprehension \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"). In the few-shot setting, we used 32 examples for all tasks, sampled randomly from the training set. For all tasks except WSC and MultiRC, we sampled a new set of examples to use in the context for each problem. For WSC and MultiRC, we used the same set of randomly drawn examples from the training set as context for all of the problems we evaluated.\n\nWe observe a wide range in GPT-3\u2019s performance across tasks. On COPA and ReCoRD GPT-3 achieves near-SOTA performance in the one-shot and few-shot settings, with COPA falling only a couple points short and achieving second place on the leaderboard, where first place is held by a fine-tuned 11 billion parameter model (T5). On WSC, performance is still relatively strong, achieving 80.1% in the few-shot setting (note that GPT-3 achieves 88.6% on the original Winograd dataset as described in Section [3.4]Winograd-Style Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")). On BoolQ, MultiRC, and RTE, performance is reasonable, roughly matching that of a fine-tuned BERT-Large. On CB, we see signs of life at 75.6% in the few-shot setting.\n\nWiC is a notable weak spot with few-shot performance at 49.4% (at random chance). We tried a number of different phrasings and formulations for WiC (which involves determining if a word is being used with the same meaning in two sentences), none of which was able to achieve strong performance. This hints at a phenomenon that will become clearer in the next section (which discusses the ANLI benchmark) \u2013 GPT-3 appears to be weak in the few-shot or one-shot setting at some tasks that involve comparing two sentences or snippets, for example whether a word is used the same way in two sentences (WiC), whether one sentence is a paraphrase of another, or whether one sentence implies another. This could also explain the comparatively low scores for RTE and CB, which also follow this format. Despite these weaknesses, GPT-3 still outperforms a fine-tuned BERT-large on four of eight tasks and on two tasks GPT-3 is close to the state-of-the-art held by a fine-tuned 11 billion parameter model.\n\nFinally, we note that the few-shot SuperGLUE score steadily improves with both model size and with number of examples in the context showing increasing benefits from in-context learning (Figure [3.8]Figure 3.8 \u2023 3.6 Reading Comprehension \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")). We scale K\ud835\udc3eK up to 32 examples per task, after which point additional examples will not reliably fit into our context. When sweeping over values of K\ud835\udc3eK, we find that GPT-3 requires less than eight total examples per task to outperform a fine-tuned BERT-Large on overall SuperGLUE score.\n\n![Refer to caption]Figure 3.9: Performance of GPT-3 on ANLI Round 3. Results are on the dev-set, which has only 1500 examples and therefore has high variance (we estimate a standard deviation of 1.2%). We find that smaller models hover around random chance, while few-shot GPT-3 175B closes almost half the gap from random chance to SOTA. Results for ANLI rounds 1 and 2 are shown in the appendix.\n\n### 3.8 NLI\n\nNatural Language Inference (NLI) \\[ [31])\\] concerns the ability to understand the relationship between two sentences. In practice, this task is usually structured as a two or three class classification problem where the model classifies whether the second sentence logically follows from the first, contradicts the first sentence, or is possibly true (neutral). SuperGLUE includes an NLI dataset, RTE, which evaluates the binary version of the task. On RTE, only the largest version of GPT-3 performs convincingly better than random (56%) in any evaluation setting, but in a few-shot setting GPT-3 performs similarly to a single-task fine-tuned BERT Large. We also evaluate on the recently introduced Adversarial Natural Language Inference (ANLI) dataset \\[ [94])\\]. ANLI is a difficult dataset employing a series of adversarially mined natural language inference questions in three rounds (R1, R2, and R3). Similar to RTE, all of our models smaller than GPT-3 perform at almost exactly random chance on ANLI, even in the few-shot setting (\u223c33%similar-toabsentpercent33\\\\sim 33\\\\%), whereas GPT-3 itself shows signs of life on Round 3. Results for ANLI R3 are highlighted in Figure [3.9]Figure 3.9 \u2023 3.7 SuperGLUE \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") and full results for all rounds can be found in Appendix [H]Appendix H Results on All Tasks for All Model Sizes \u2023 Language Models are Few-Shot Learners\"). These results on both RTE and ANLI suggest that NLI is still a very difficult task for language models and they are only just beginning to show signs of progress.\n\n### 3.9 Synthetic and Qualitative Tasks\n\nOne way to probe GPT-3\u2019s range of abilities in the few-shot (or zero- and one-shot) setting is to give it tasks which require it to perform simple on-the-fly computational reasoning, recognize a novel pattern that is unlikely to have occurred in training, or adapt quickly to an unusual task. We devise several tasks to test this class of abilities. First, we test GPT-3\u2019s ability to perform arithmetic. Second, we create several tasks that involve rearranging or unscrambling the letters in a word, tasks which are unlikely to have been exactly seen during training. Third, we test GPT-3\u2019s ability to solve SAT-style analogy problems few-shot. Finally, we test GPT-3 on several qualitative tasks, including using new words in a sentence, correcting English grammar, and news article generation. We will release the synthetic datasets with the hope of stimulating further study of test-time behavior of language models.\n\n#### 3.9.1 Arithmetic\n\nTo test GPT-3\u2019s ability to perform simple arithmetic operations without task-specific training, we developed a small battery of 10 tests that involve asking GPT-3 a simple arithmetic problem in natural language:\n\n- \u2022\n\n\n2 digit addition (2D+) \u2013 The model is asked to add two integers sampled uniformly from \\[0,100)0100\\[0,100), phrased in the form of a question, e.g. \u201cQ: What is 48 plus 76? A: 124.\u201d\\\n\\\n- \u2022\\\n\\\n\\\n2 digit subtraction (2D-) \u2013 The model is asked to subtract two integers sampled uniformly from \\[0,100)0100\\[0,100); the answer may be negative. Example: \u201cQ: What is 34 minus 53? A: -19\u201d.\\\n\\\n- \u2022\\\n\\\n\\\n3 digit addition (3D+) \u2013 Same as 2 digit addition, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- \u2022\\\n\\\n\\\n3 digit subtraction (3D-) \u2013 Same as 2 digit subtraction, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- \u2022\\\n\\\n\\\n4 digit addition (4D+) \u2013 Same as 3 digit addition, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- \u2022\\\n\\\n\\\n4 digit subtraction (4D-) \u2013 Same as 3 digit subtraction, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- \u2022\\\n\\\n\\\n5 digit addition (5D+) \u2013 Same as 3 digit addition, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- \u2022\\\n\\\n\\\n5 digit subtraction (5D-) \u2013 Same as 3 digit subtraction, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- \u2022\\\n\\\n\\\n2 digit multiplication (2Dx) \u2013 The model is asked to multiply two integers sampled uniformly from \\[0,100)0100\\[0,100), e.g. \u201cQ: What is 24 times 42? A: 1008\u201d.\\\n\\\n- \u2022\\\n\\\n\\\nOne-digit composite (1DC) \u2013 The model is asked to perform a composite operation on three 1 digit numbers, with parentheses around the last two. For example, \u201cQ: What is 6+(4\\*8)? A: 38\u201d. The three 1 digit numbers are selected uniformly on \\[0,10)010\\[0,10) and the operations are selected uniformly from {+,-,\\*}.\\\n\\\n\\\nIn all 10 tasks the model must generate the correct answer exactly. For each task we generate a dataset of 2,000 random instances of the task and evaluate all models on those instances.\\\n\\\nFirst we evaluate GPT-3 in the few-shot setting, for which results are shown in Figure [3.10]Figure 3.10 \u2023 3.9.1 Arithmetic \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"). On addition and subtraction, GPT-3 displays strong proficiency when the number of digits is small, achieving 100% accuracy on 2 digit addition, 98.9% at 2 digit subtraction, 80.2% at 3 digit addition, and 94.2% at 3-digit subtraction. Performance decreases as the number of digits increases, but GPT-3 still achieves 25-26% accuracy on four digit operations and 9-10% accuracy on five digit operations, suggesting at least some capacity to generalize to larger numbers of digits. GPT-3 also achieves 29.2% accuracy at 2 digit multiplication, an especially computationally intensive operation. Finally, GPT-3 achieves 21.3% accuracy at single digit combined operations (for example, 9\\*(7+5)), suggesting that it has some robustness beyond just single operations.\\\n\\\n![Refer to caption]Figure 3.10: Results on all 10 arithmetic tasks in the few-shot settings for models of different sizes. There is a significant jump from the second largest model (GPT-3 13B) to the largest model (GPT-3 175), with the latter being able to reliably accurate 2 digit arithmetic, usually accurate 3 digit arithmetic, and correct answers a significant fraction of the time on 4-5 digit arithmetic, 2 digit multiplication, and compound operations. Results for one-shot and zero-shot are shown in the appendix.\\\n\\\n| Setting | 2D+ | 2D- | 3D+ | 3D- | 4D+ | 4D- | 5D+ | 5D- | 2Dx | 1DC |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 76.9 | 58.0 | 34.2 | 48.3 | 4.0 | 7.5 | 0.7 | 0.8 | 19.8 | 9.8 |\\\n| GPT-3 One-shot | 99.6 | 86.4 | 65.5 | 78.7 | 14.0 | 14.0 | 3.5 | 3.8 | 27.4 | 14.3 |\\\n| GPT-3 Few-shot | 100.0 | 98.9 | 80.4 | 94.2 | 25.5 | 26.8 | 9.3 | 9.9 | 29.2 | 21.3 |\\\n\\\nTable 3.9: Results on basic arithmetic tasks for GPT-3 175B. {2,3,4,5}D{+,-} is 2, 3, 4, and 5 digit addition or subtraction, 2Dx is 2 digit multiplication. 1DC is 1 digit composite operations. Results become progressively stronger moving from the zero-shot to one-shot to few-shot setting, but even the zero-shot shows significant arithmetic abilities.\\\n\\\nAs Figure [3.10]Figure 3.10 \u2023 3.9.1 Arithmetic \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") makes clear, small models do poorly on all of these tasks \u2013 even the 13 billion parameter model (the second largest after the 175 billion full GPT-3) can solve 2 digit addition and subtraction only half the time, and all other operations less than 10% of the time.\\\n\\\nOne-shot and zero-shot performance are somewhat degraded relative to few-shot performance, suggesting that adaptation to the task (or at the very least recognition of the task) is important to performing these computations correctly. Nevertheless, one-shot performance is still quite strong, and even zero-shot performance of the full GPT-3 significantly outperforms few-shot learning for all smaller models. All three settings for the full GPT-3 are shown in Table [3.9]Table 3.9 \u2023 3.9.1 Arithmetic \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"), and model capacity scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes \u2023 Language Models are Few-Shot Learners\").\\\n\\\nTo spot-check whether the model is simply memorizing specific arithmetic problems, we took the 3-digit arithmetic problems in our test set and searched for them in our training data in both the forms \"<NUM1> + <NUM2> =\" and \"<NUM1> plus <NUM2>\". Out of 2,000 addition problems we found only 17 matches (0.8%) and out of 2,000 subtraction problems we found only 2 matches (0.1%), suggesting that only a trivial fraction of the correct answers could have been memorized. In addition, inspection of incorrect answers reveals that the model often makes mistakes such as not carrying a \u201c1\u201d, suggesting it is actually attempting to perform the relevant computation rather than memorizing a table.\\\n\\\nOverall, GPT-3 displays reasonable proficiency at moderately complex arithmetic in few-shot, one-shot, and even zero-shot settings.\\\n\\\n#### 3.9.2 Word Scrambling and Manipulation Tasks\\\n\\\nTo test GPT-3\u2019s ability to learn novel symbolic manipulations from a few examples, we designed a small battery of 5 \u201ccharacter manipulation\u201d tasks. Each task involves giving the model a word distorted by some combination of scrambling, addition, or deletion of characters, and asking it to recover the original word. The 5 tasks are:\\\n\\\n| Setting | CL | A1 | A2 | RI | RW |\\\n| --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 3.66 | 2.28 | 8.91 | 8.26 | 0.09 |\\\n| GPT-3 One-shot | 21.7 | 8.62 | 25.9 | 45.4 | 0.48 |\\\n| GPT-3 Few-shot | 37.9 | 15.1 | 39.7 | 67.2 | 0.44 |\\\n\\\nTable 3.10: GPT-3 175B performance on various word unscrambling and word\\\nmanipulation tasks, in zero-, one-, and few-shot settings. CL is \u201ccycle letters in word\u201d, A1 is anagrams of but the first and last letters,\\\nA2 is anagrams of all but the first and last two letters, RI is \u201cRandom insertion\\\nin word\u201d, RW is \u201creversed words\u201d.![Refer to caption]Figure 3.11: Few-shot performance on the five word scrambling tasks for different sizes of model. There is generally smooth improvement with model size although the random insertion task shows an upward slope of improvement with the 175B model solving the task the majority of the time. Scaling of one-shot and zero-shot performance is shown in the appendix. All tasks are done with K=100\ud835\udc3e100K=100.\\\n\\\n- \u2022\\\n\\\n\\\nCycle letters in word (CL) \u2013 The model is given a word with its letters cycled, then the \u201c=\u201d symbol, and is expected to generate the original word. For example, it might be given \u201clyinevitab\u201d and should output \u201cinevitably\u201d.\\\n\\\n- \u2022\\\n\\\n\\\nAnagrams of all but first and last characters (A1) \u2013 The model is given a word where every letter except the first and last have been scrambled randomly, and must output the original word. Example: criroptuon = corruption.\\\n\\\n- \u2022\\\n\\\n\\\nAnagrams of all but first and last 2 characters (A2) \u2013 The model is given a word where every letter except the first 2 and last 2 have been scrambled randomly, and must recover the original word. Example: opoepnnt \u2192\u2192\\\\to opponent.\\\n\\\n- \u2022\\\n\\\n\\\nRandom insertion in word (RI) \u2013 A random punctuation or space character is inserted between each letter of a word, and the model must output the original word. Example: s.u!c/c!e.s s i/o/n = succession.\\\n\\\n- \u2022\\\n\\\n\\\nReversed words (RW) \u2013 The model is given a word spelled backwards, and must output the original word. Example: stcejbo \u2192\u2192\\\\to objects.\\\n\\\n\\\nFor each task we generate 10,000 examples, which we chose to be the top 10,000 most frequent words as measured by \\[ [92])\\] of length more than 4 characters and less than 15 characters. The few-shot results are shown in Figure [3.11]Figure 3.11 \u2023 3.9.2 Word Scrambling and Manipulation Tasks \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"). Task performance tends to grow smoothly with model size, with the full GPT-3 model achieving 66.9% on removing random insertions, 38.6% on cycling letters, 40.2% on the easier anagram task, and 15.1% on the more difficult anagram task (where only the first and last letters are held fixed). None of the models can reverse the letters in a word.\\\n\\\nIn the one-shot setting, performance is significantly weaker (dropping by half or more), and in the zero-shot setting the model can rarely perform any of the tasks (Table [3.10]Table 3.10 \u2023 3.9.2 Word Scrambling and Manipulation Tasks \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")). This suggests that the model really does appear to learn these tasks at test time, as the model cannot perform them zero-shot and their artificial nature makes them unlikely to appear in the pre-training data (although we cannot confirm this with certainty).\\\n\\\nWe can further quantify performance by plotting \u201cin-context learning curves\u201d, which show task performance as a function of the number of in-context examples. We show in-context learning curves for the Symbol Insertion task in Figure [1.2]Figure 1.2 \u2023 1 Introduction \u2023 Language Models are Few-Shot Learners\"). We can see that larger models are able to make increasingly effective use of in-context information, including both task examples and natural language task descriptions.\\\n\\\nFinally, it is worth adding that solving these tasks requires character-level manipulations, whereas our BPE encoding operates on significant fractions of a word (on average \u223c0.7similar-toabsent0.7\\\\sim 0.7 words per token), so from the LM\u2019s perspective succeeding at these tasks involves not just manipulating BPE tokens but understanding and pulling apart their substructure. Also, CL, A1, and A2 are not bijective (that is, the unscrambled word is not a deterministic function of the scrambled word), requiring the model to perform some search to find the correct unscrambling. Thus, the skills involved appear to require non-trivial pattern-matching and computation.\\\n\\\n#### 3.9.3 SAT Analogies\\\n\\\nTo test GPT-3 on another task that is somewhat unusual relative to the typical distribution of text, we collected a set of 374 \u201cSAT analogy\u201d problems \\[ [131])\\]. Analogies are a style of multiple choice question that constituted a section of the SAT college entrance exam before 2005. A typical example is \u201caudacious is to boldness as (a) sanctimonious is to hypocrisy, (b) anonymous is to identity, (c) remorseful is to misdeed, (d) deleterious is to result, (e) impressionable is to temptation\u201d. The student is expected to choose which of the five word pairs has the same relationship as the original word pair; in this example the answer is \u201csanctimonious is to hypocrisy\u201d. On this task GPT-3 achieves 65.2% in the few-shot setting, 59.1% in the one-shot setting, and 53.7% in the zero-shot setting, whereas the average score among college applicants was 57% \\[ [129])\\] (random guessing yields 20%). As shown in Figure [3.12]Figure 3.12 \u2023 3.9.3 SAT Analogies \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\"), the results improve with scale, with the the full 175 billion model improving by over 10% compared to the 13 billion parameter model.\\\n\\\n![Refer to caption]Figure 3.12: Zero-, one-,and few-shot performance on SAT analogy tasks, for different sizes of model. The largest model achieves 65% accuracy in the few-shot setting, and also demonstrates significant gains to in-context learning which are not present in smaller models.\\\n\\\n#### 3.9.4 News Article Generation\\\n\\\nPrevious work on generative language models qualitatively tested their ability to generate synthetic \u201cnews articles\u201d by conditional sampling from the model given a human-written prompt consisting of a plausible first sentence for a news story \\[ [117])\\]. Relative to \\[ [117])\\], the dataset used to train GPT-3 is much less weighted towards news articles, so trying to generate news articles via raw unconditional samples is less effective \u2013 for example GPT-3 often interprets the proposed first sentence of a \u201cnews article\u201d as a tweet and then posts synthetic responses or follow-up tweets. To solve this problem we employed GPT-3\u2019s few-shot learning abilities by providing three previous news articles in the model\u2019s context to condition it. With the title and subtitle of a proposed next article, the model is able to reliably generate short articles in the \u201cnews\u201d genre.\\\n\\\nTo gauge the quality of news article generation from GPT-3 (which we believe is likely to be correlated with conditional sample generation quality in general), we decided to measure human ability to distinguish GPT-3-generated articles from real ones. Similar work has been carried out by Kreps et al. \\[ [56])\\] and Zellers et al. \\[ [141])\\]. Generative language models are trained to match the distribution of content generated by humans, so the (in)ability of humans to distinguish the two is a potentially important measure of quality.333This task is also relevant to the potential misuse of language models discussed in Section [6.1]Misuse of Language Models \u2023 6 Broader Impacts \u2023 Language Models are Few-Shot Learners\").\\\n\\\nIn order to see how well humans can detect model generated text, we arbitrarily selected 25 article titles and subtitles from the website [newser.com] (mean length: 215 words). We then generated completions of these titles and subtitles from four language models ranging in size from 125M to 175B (GPT-3) parameters (mean length: 200 words). For each model, we presented around 80 US-based participants with a quiz consisting of these real titles and subtitles followed by either the human written article or the article generated by the model444We wanted to identify how good an average person on the internet is at detecting language model outputs, so we focused on participants drawn from the general US population. See Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles \u2023 Language Models are Few-Shot Learners\") for details.. Participants were asked to select whether the article was \u201cvery likely written by a human\u201d, \u201cmore likely written by a human\u201d, \u201cI don\u2019t know\u201d, \u201cmore likely written by a machine\u201d, or \u201cvery likely written by a machine\u201d.\\\n\\\nThe articles we selected were not in the models\u2019 training data and the model outputs were formatted and selected programmatically to prevent human cherry-picking. All models used the same context to condition outputs on and were pre-trained with the same context size and the same article titles and subtitles were used as prompts for each model. However, we also ran an experiment to control for participant effort and attention that followed the same format but involved intentionally bad model generated articles. This was done by generating articles from a \u201ccontrol model\u201d: a 160M parameter model with no context and increased output randomness.\\\n\\\nMean human accuracy (the ratio of correct assignments to non-neutral assignments per participant) at detecting that the intentionally bad articles were model generated was \u223c86%similar-toabsentpercent86\\\\sim 86\\\\%\u2009 where 50% is chance level performance. By contrast, mean human accuracy at detecting articles that were produced by the 175B parameter model was barely above chance at \u223c52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.11]Table 3.11 \u2023 3.9.4 News Article Generation \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")).555We use a two-sample Student\u2019s T-Test to test for significant difference between the means of the participant accuracies of each model and the control model and report the normalized difference in the means (as the t-statistic) and the p-value. Human abilities to detect model generated text appear to decrease as model size increases: there appears to be a trend towards chance accuracy with model size, and human detection of GPT-3 is close to chance.666If a model consistently produces texts that are more impressive than human articles, it is possible that human performance on this task would drop below 50%. Indeed, many individual participants scored below 50% on this task. This is true despite the fact that participants spend more time on each output as model size increases (see Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles \u2023 Language Models are Few-Shot Learners\")).\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t\ud835\udc61t compared tocontrol (p\ud835\udc5dp-value) | \u201cI don\u2019t know\u201dassignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control (deliberately bad model) | 86% | 83%\u201390% | - | 3.6 % |\\\n| GPT-3 Small | 76% | 72%\u201380% | 3.9 (2e\ud835\udc52e-4) | 4.9% |\\\n| GPT-3 Medium | 61% | 58%\u201365% | 10.3 (7e\ud835\udc52e-21) | 6.0% |\\\n| GPT-3 Large | 68% | 64%\u201372% | 7.3 (3e\ud835\udc52e-11) | 8.7% |\\\n| GPT-3 XL | 62% | 59%\u201365% | 10.7 (1e\ud835\udc52e-19) | 7.5% |\\\n| GPT-3 2.7B | 62% | 58%\u201365% | 10.4 (5e\ud835\udc52e-19) | 7.1% |\\\n| GPT-3 6.7B | 60% | 56%\u201363% | 11.2 (3e\ud835\udc52e-21) | 6.2% |\\\n| GPT-3 13B | 55% | 52%\u201358% | 15.3 (1e\ud835\udc52e-32) | 7.1% |\\\n| GPT-3 175B | 52% | 49%\u201354% | 16.9 (1e\ud835\udc52e-34) | 7.8% |\\\n\\\nTable 3.11: Human accuracy in identifying whether short (\u223csimilar-to\\\\sim200 word) news articles are model generated. We find that human accuracy (measured by the ratio of correct assignments to non-neutral assignments) ranges from 86% on the control model to 52% on GPT-3 175B. This table compares mean accuracy between five different models, and shows the results of a two-sample T-Test for the difference in mean accuracy between each model and the control model (an unconditional GPT-3 Small model with increased output randomness).![Refer to caption]Figure 3.13: People\u2019s ability to identify whether news articles are model-generated (measured by the ratio of correct assignments to non-neutral assignments) decreases as model size increases. Accuracy on the outputs on the deliberately-bad control model (an unconditioned GPT-3 Small model with higher output randomness) is indicated with the dashed line at the top, and the random chance (50%) is indicated with the dashed line at the bottom. Line of best fit is a power law with 95% confidence intervals.\\\n\\\nExamples of synthetic articles from GPT-3 are given in Figures [3.14]Figure 3.14 \u2023 3.9.4 News Article Generation \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") and [3.15]Figure 3.15 \u2023 3.9.4 News Article Generation \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\").777Additional non-news samples can be found in Appendix [F]Appendix F Additional Samples from GPT-3 \u2023 Language Models are Few-Shot Learners\"). Much of the text is\u2014as indicated by the evaluations\u2014difficult for humans to distinguish from authentic human content. Factual inaccuracies can be an indicator that an article is model generated since, unlike human authors, the models have no access to the specific facts that the article titles refer to or when the article was written. Other indicators include repetition, non sequiturs, and unusual phrasings, though these are often subtle enough that they are not noticed.\\\n\\\nTitle: United Methodists Agree to Historic Split\\\n\\\nSubtitle: Those who oppose gay marriage will form their own denomination\\\n\\\nArticle:After two days of intense debate, the United Methodist Church has agreed to a historic split - one that is expected to end in the creation of a new denomination, one that will be \u201dtheologically and socially conservative,\u201d according to The Washington Post. The majority of delegates attending the church\u2019s annual General Conference in May voted to strengthen a ban on the ordination of LGBTQ clergy and to write new rules that will \u201ddiscipline\u201d clergy who officiate at same-sex weddings. But those who opposed these measures have a new plan: They say they will form a separate denomination by 2020, calling their church the Christian Methodist denomination.The Post notes that the denomination, which claims 12.5 million members, was in the early 20th century the \u201dlargest Protestant denomination in the U.S.,\u201d but that it has been shrinking in recent decades. The new split will be the second in the church\u2019s history. The first occurred in 1968, when roughly 10 percent of the denomination left to form the Evangelical United Brethren Church. The Post notes that the proposed split \u201dcomes at a critical time for the church, which has been losing members for years,\u201d which has been \u201dpushed toward the brink of a schism over the role of LGBTQ people in the church.\u201d Gay marriage is not the only issue that has divided the church. In 2016, the denomination was split over ordination of transgender clergy, with the North Pacific regional conference voting to ban them from serving as clergy, and the South Pacific regional conference voting to allow them.\\\n\\\nFigure 3.14: The GPT-3 generated news article that humans had the greatest difficulty distinguishing from a human written article (accuracy: 12%).\\\n\\\nTitle: Star\u2019s Tux Promise Draws Megyn Kelly\u2019s SarcasmSubtitle: Joaquin Phoenix pledged to not change for each awards eventArticle:A year ago, Joaquin Phoenix made headlines when he appeared on the red carpet at the Golden Globes wearing a tuxedo with a paper bag over his head that read, \u201dI am a shape-shifter. I can\u2019t change the world. I can only change myself.\u201d It was a promise to not change to fit into the Hollywood mold: \u201dI think that\u2019s a really special thing, to not change yourself. I think it\u2019s a really special thing to say, \u2018This is what\u2019s inside of me, I\u2019m proud of it, and I\u2019m not going to be ashamed because of the way that someone else thinks I should be.\u2019\u201d Now, it\u2019s the Oscars, and Phoenix is at it again. But this time, his publicist is saying he\u2019ll be wearing a tux no matter what.Megyn Kelly was not impressed, and she let him have it on The Tonight Show. \u201dYou know, I feel like, I feel like you could have worn the tux,\u201d she says. \u201dBut you\u2019re saying you\u2019re a shape-shifter. I don\u2019t know if you can change your tux, but you can change your mind. You can change your mind. You can change your mind.\u201d Phoenix says he did, but it didn\u2019t stick. \u201dI was like, \u2018Okay, I\u2019m going to wear a tuxedo to this thing.\u2019 And then I thought, \u2018I don\u2019t want to wear a tuxedo to this thing.\u2019\u201d Kelly goes on to encourage him to change his mind again, but Phoenix says it\u2019s too late: \u201dI\u2019m committed to wearing this.\u201d\\\n\\\nFigure 3.15: The GPT-3 generated news article that humans found the easiest to distinguish from a human written article (accuracy: 61%).\\\n\\\nRelated work on language model detection by Ippolito et al. \\[ [48])\\] indicates that automatic discriminators like Grover\\[ [141])\\] and GLTR \\[ [37])\\] may have greater success at detecting model generated text than human evaluators. Automatic detection of these models may be a promising area of future research.\\\n\\\nIppolito et al. \\[ [48])\\] also note that human accuracy at detecting model generated text increases as humans observe more tokens. To do a preliminary investigation of how good humans are at detecting longer news articles generated by GPT-3 175B, we selected 12 world news articles from Reuters with an average length of 569 words and generated completions of these articles from GPT-3 with an average length of 498 words (298 words longer than our initial experiments). Following the methodology above, we ran two experiments, each on around 80 US-based participants, to compare human abilities to detect the articles generated by GPT-3 and a control model.\\\n\\\nWe found that mean human accuracy at detecting the intentionally bad longer articles from the control model was \u223c88%similar-toabsentpercent88\\\\sim 88\\\\%, while mean human accuracy at detecting the longer articles that were produced by GPT-3 175B was still barely above chance at \u223c52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.12]Table 3.12 \u2023 3.9.4 News Article Generation \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")). This indicates that, for news articles that are around 500 words long, GPT-3 continues to produce articles that humans find difficult to distinguish from human written news articles.\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t\ud835\udc61t compared tocontrol (p\ud835\udc5dp-value) | \u201cI don\u2019t know\u201dassignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control | 88% | 84%\u201391% | - | 2.7% |\\\n| GPT-3 175B | 52% | 48%\u201357% | 12.7 (3.2e\ud835\udc52e-23) | 10.6% |\\\n\\\nTable 3.12: People\u2019s ability to identify whether \u223c500similar-toabsent500\\\\sim 500 word articles are model generated (as measured by the ratio of correct assignments to non-neutral assignments) was 88% on the control model and 52% on GPT-3 175B. This table shows the results of a two-sample T-Test for the difference in mean accuracy between GPT-3 175B and the control model (an unconditional GPT-3 Small model with increased output randomness).\\\n\\\nA \"whatpu\" is a small, furry animal native to Tanzania. An example of a sentence that uses the word whatpu is:\\\n\\\nWe were traveling in Africa and we saw these very cute whatpus.\\\n\\\nTo do a \"farduddle\" means to jump up and down really fast. An example of a sentence that uses the word farduddle is:\\\n\\\nOne day when I was playing tag with my little sister, she got really excited and she started doing these crazy farduddles.\\\n\\\nA \"yalubalu\" is a type of vegetable that looks like a big pumpkin. An example of a sentence that uses the word yalubalu is:\\\n\\\nI was on a trip to Africa and I tried this yalubalu vegetable that was grown in a garden there. It was delicious.\\\n\\\nA \"Burringo\" is a car with very fast acceleration. An example of a sentence that uses the word Burringo is:\\\n\\\nIn our garage we have a Burringo that my father drives to work every day.\\\n\\\nA \"Gigamuru\" is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:\\\n\\\nI have a Gigamuru that my uncle gave me as a gift. I love to play it at home.\\\n\\\nTo \"screeg\" something is to swing a sword at it. An example of a sentence that uses the word screeg is:\\\n\\\nWe screeghed at each other for several minutes and then we went outside and ate ice cream.\\\n\\\nFigure 3.16: Representative GPT-3 completions for the few-shot task of using a new word in a sentence. Boldface is GPT-3\u2019s completions, plain text is human prompts. In the first example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 other than the conditioning shown here.\\\n\\\nPoor English input: I eated the purple berries.\\\n\\\nGood English output: I ate the purple berries.\\\n\\\nPoor English input: Thank you for picking me as your designer. I\u2019d appreciate it.\\\n\\\nGood English output: Thank you for choosing me as your designer. I appreciate it.\\\n\\\nPoor English input: The mentioned changes have done. or I did the alteration that you requested. or I changed things you wanted and did the modifications.\\\n\\\nGood English output: The requested changes have been made. or I made the alteration that you requested. or I changed things you wanted and made the modifications.\\\n\\\nPoor English input: I\u2019d be more than happy to work with you in another project.\\\n\\\nGood English output: I\u2019d be more than happy to work with you on another project.\\\n\\\nPoor English input: Please provide me with a short brief of the design you\u2019re looking for and that\u2019d be nice if you could share some examples or project you did before.\\\n\\\nGood English output: Please provide me with a brief description of the design you\u2019re looking for and that would be nice if you could share some examples or projects you have done before.\\\n\\\nPoor English input: The patient was died.\\\n\\\nGood English output: The patient died.\\\n\\\nPoor English input: We think that Leslie likes ourselves.\\\n\\\nGood English output: We think that Leslie likes us.\\\n\\\nPoor English input: Janet broke Bill on the finger.\\\n\\\nGood English output: Janet broke Bill\u2019s finger.\\\n\\\nPoor English input: Mary arranged for, in St. Louis, John to rent a house cheap.\\\n\\\nGood English output: Mary arranged for John to rent a house in St. Louis.\\\n\\\nPoor English input: Today I have went to the store to to buys some many bottle of water.\\\n\\\nGood English output: Today I went to the store to buy some bottles of water.\\\n\\\nPoor English input: I have tried to hit ball with bat, but my swing is has miss.\\\n\\\nGood English output: I tried to hit the ball with the bat, but my swing missed.\\\n\\\nFigure 3.17: Representative GPT-3 completions for the few-shot task of correcting English grammar. Boldface is GPT-3\u2019s completions, plain text is human prompts. In the first few examples example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 aside from the first few examples as conditioning and the \u201cPoor English input/Good English output\u201d framing. We note that the distinction between \u201dpoor\u201d and \u201dgood\u201d English (and the terms themselves) is complex, contextual, and contested. As the example mentioning the rental of a house shows, assumptions that the model makes about what \u201cgood\u201d is can even lead it to make errors (here, the model not only adjusts grammar, but also removes the word \u201dcheap\u201d in a way that alters meaning).\\\n\\\n#### 3.9.5 Learning and Using Novel Words\\\n\\\nA task studied in developmental linguistics \\[ [13])\\] is the ability to learn and utilize new words, for example using a word in a sentence after seeing it defined only once, or conversely inferring a word\u2019s meaning from only one usage. Here we qualitatively test GPT-3\u2019s ability to do the former. Specifically, we give GPT-3 the definition of a nonexistent word, such as \u201cGigamuru\u201d, and then ask it to use it in a sentence. We provide one to five previous examples of a (separate) nonexistent word being defined and used in a sentence, so the task is few-shot in terms of previous examples of the broad task and one-shot in terms of the specific word. Table [3.16]Figure 3.16 \u2023 3.9.4 News Article Generation \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") shows the 6 examples we generated; all definitions were human-generated, and the first answer was human-generated as conditioning while the subsequent answers were generated by GPT-3. These examples were generated continuously in one sitting and we did not omit or repeatedly try any prompts. In all cases the generated sentence appears to be a correct or at least plausible use of the word. In the final sentence the model generates a plausible conjugation for the word \u201cscreeg\u201d (namely \u201cscreeghed\u201d), although the use of the word is slightly awkward (\u201cscreeghed at each other\u201d) despite being plausible in the sense that it could describe a toy sword fight. Overall, GPT-3 appears to be at least proficient at the task of using novel words in a sentence.\\\n\\\n#### 3.9.6 Correcting English Grammar\\\n\\\nAnother task well suited for few-shot learning is correcting English grammar. We test this with GPT-3 in the few-shot setting by giving prompts of the form \"Poor English Input: <sentence>\\\\n Good English Output: <sentence>\". We give GPT-3 one human-generated correction and then ask it to correct 5 more (again without any omissions or repeats). Results are shown in Figure [3.17]Figure 3.17 \u2023 3.9.4 News Article Generation \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\").\\\n\\\n\n## 4 Measuring and Preventing Memorization Of Benchmarks\\\n\\\n![Refer to caption]Figure 4.1: GPT-3 Training Curves   We measure model performance during training on a deduplicated validation split of our training distribution. Though there is some gap between training and validation performance, the gap grows only minimally with model size and training time, suggesting that most of the gap comes from a difference in difficulty rather than overfitting.\\\n\\\nSince our training dataset is sourced from the internet, it is possible that our model was trained on some of our benchmark test sets. Accurately detecting test contamination from internet-scale datasets is a new area of research without established best practices. While it is common practice to train large models without investigating contamination, given the increasing scale of pretraining datasets, we believe this issue is becoming increasingly important to attend to.\\\n\\\nThis concern is not just hypothetical. One of the first papers to train a language model on Common Crawl data \\[ [130])\\] detected and removed a training document which overlapped with one of their evaluation datasets. Other work such as GPT-2 \\[ [117])\\] also conducted post-hoc overlap analysis. Their study was relatively encouraging, finding that although models did perform moderately better on data that overlapped between training and testing, this did not significantly impact reported results due to the small fraction of data which was contaminated (often only a few percent).\\\n\\\nGPT-3 operates in a somewhat different regime. On the one hand, the dataset and model size are about two orders of magnitude larger than those used for GPT-2, and include a large amount of Common Crawl, creating increased potential for contamination and memorization. On the other hand, precisely due to the large amount of data, even GPT-3 175B does not overfit its training set by a significant amount, measured relative to a held-out validation set with which it was deduplicated (Figure [4.1]Figure 4.1 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\")). Thus, we expect that contamination is likely to be frequent, but that its effects may not be as large as feared.\\\n\\\nWe initially tried to address the issue of contamination by proactively searching for and attempting to remove any overlap between our training data and the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug resulted in only partial removal of all detected overlaps from the training data. Due to the cost of training, it wasn\u2019t feasible to retrain the model. To address this, we investigate in detail how the remaining detected overlap impacts results.\\\n\\\nFor each benchmark, we produce a \u2018clean\u2019 version which removes all potentially leaked examples, defined roughly as examples that have a 13-gram overlap with anything in the pretraining set (or that overlap with the whole example when it is shorter than 13-grams). The goal is to very conservatively flag anything that could potentially be contamination, so as to produce a clean subset that is free of contamination with high confidence. The exact procedure is detailed in Appendix [C]Appendix C Details of Test Set Contamination Studies \u2023 Language Models are Few-Shot Learners\").\\\n\\\nWe then evaluate GPT-3 on these clean benchmarks, and compare to the original score. If the score on the clean subset is similar to the score on the entire dataset, this suggests that contamination, even if present, does not have a significant effect on reported results. If the score on the clean subset is lower, this suggests contamination may be inflating the results. The results are summarized in Figure [4.2]Figure 4.2 \u2023 4 Measuring and Preventing Memorization Of Benchmarks \u2023 Language Models are Few-Shot Learners\"). Although potential contamination is often high (with a quarter of benchmarks scoring over 50%), in most cases performance changes only negligibly, and we see no evidence that contamination level and performance difference are correlated. We conclude that either our conservative method substantially overestimated contamination or that contamination has little effect on performance.\\\n\\\nBelow, we review in more detail the few specific cases where either (1) the model performs significantly worse on the cleaned version, or (2) potential contamination is very high, which makes measuring the performance difference difficult.\\\n\\\n![Refer to caption]Figure 4.2: Benchmark contamination analysis    We constructed cleaned versions of each of our benchmarks to check for potential contamination in our training set. The x-axis is a conservative lower bound for how much of the dataset is known with high confidence to be clean, and the y-axis shows the difference in performance when evaluating only on the verified clean subset. Performance on most benchmarks changed negligibly, but some were flagged for further review. On inspection we find some evidence for contamination of the PIQA and Winograd results, and we mark the corresponding results in Section [3]Results \u2023 Language Models are Few-Shot Learners\") with an asterisk. We find no evidence that other benchmarks are affected.\\\n\\\nOur analysis flagged six groups of benchmarks for further investigation: Word Scrambling, Reading Comprehension (QuAC, SQuAD2, DROP), PIQA, Winograd, language modeling tasks (Wikitext tasks, 1BW), and German to English translation. Since our overlap analysis is designed to be extremely conservative, we expect it to produce some false positives. We summarize the results for each group of tasks below:\\\n\\\n- \u2022\\\n\\\n\\\nReading Comprehension: Our initial analysis flagged >>90% of task examples from QuAC, SQuAD2, and DROP as potentially contaminated, so large that even measuring the differential on a clean subset was difficult. Upon manual inspection, however, we found that for every overlap we inspected, in all 3 datasets, the source text was present in our training data but the question/answer pairs were not, meaning the model gains only background information and cannot memorize the answer to a specific question.\\\n\\\n- \u2022\\\n\\\n\\\nGerman translation: We found 25% of the examples in the WMT16 German-English test set were marked as potentially contaminated, with an associated total effect size of 1-2 BLEU. Upon inspection, none of the flagged examples contain paired sentences resembling NMT training data and collisions were monolingual matches mostly of snippets of events discussed in the news.\\\n\\\n- \u2022\\\n\\\n\\\nReversed Words and Anagrams: Recall that these tasks are of the form \u201calaok = koala\u201d. Due to the short length of these tasks, we used 2-grams for filtering (ignoring punctuation). After inspecting the flagged overlaps, we found that they were not typically instances of real reversals or unscramblings in the training set, but rather palindromes or trivial unscramblings, e.g \u201ckayak = kayak\u201d. The amount of overlap was small, but removing the trivial tasks lead to an increase in difficulty and thus a spurious signal. Related to this, the symbol insertion task shows high overlap but no effect on performance \u2013 this is because that task involves removing non-letter characters from a word, and the overlap analysis itself ignores such characters, leading to many spurious matches.\\\n\\\n- \u2022\\\n\\\n\\\nPIQA: The overlap analysis flagged 29% of examples as contaminated, and observed a 3 percentage point absolute decrease (4% relative decrease) in performance on the clean subset. Though the test dataset was released after our training set was created and its labels are hidden, some of the web pages used by the crowdsourced dataset creators are contained in our training set. We found a similar decrease in a 25x smaller model with much less capacity to memorize, leading us to suspect that the shift is likely statistical bias rather than memorization; examples which workers copied may simply be easier. Unfortunately, we cannot rigorously prove this hypothesis. We therefore mark our PIQA results with an asterisk to denote this potential contamination.\\\n\\\n- \u2022\\\n\\\n\\\nWinograd: The overlap analysis flagged 45% of examples, and found a 2.6% decrease in performance on the clean subset. Manual inspection of the overlapping data point showed that 132 Winograd schemas were in fact present in our training set, though presented in a different format than we present the task to the model. Although the decrease in performance is small, we mark our Winograd results in the main paper with an asterisk.\\\n\\\n- \u2022\\\n\\\n\\\nLanguage modeling: We found the 4 Wikipedia language modeling benchmarks measured in GPT-2, plus the Children\u2019s Book Test dataset, to be almost entirely contained in our training data. Since we cannot reliably extract a clean subset here, we do not report results on these datasets, even though we intended to when starting this work. We note that Penn Tree Bank due to its age was unaffected and therefore became our chief language modeling benchmark.\\\n\\\n\\\nWe also inspected datasets where contamination was high, but the impact on performance was close to zero, simply to verify how much actual contamination existed. These appeared to often contain false positives. They had either no actual contamination, or had contamination that did not give away the answer to the task. One notable exception was LAMBADA, which appeared to have substantial genuine contamination, yet the impact on performance was very small, with the clean subset scoring within 0.5% of the full dataset. Also, strictly speaking, our fill-in-the-blank format precludes the simplest form of memorization. Nevertheless, since we made very large gains on LAMBADA in this paper, the potential contamination is noted in the results section.\\\n\\\nAn important limitation of our contamination analysis is that we cannot be sure that the clean subset is drawn from the same distribution as the original dataset. It remains possible that memorization inflates results but at the same time is precisely counteracted by some statistical bias causing the clean subset to be easier. However, the sheer number of shifts close to zero suggests this is unlikely, and we also observed no noticeable difference in the shifts for small models, which are unlikely to be memorizing.\\\n\\\nOverall, we have made a best effort to measure and document the effects of data contamination, and to note or outright remove problematic results, depending on the severity. Much work remains to be done to address this important and subtle issue for the field in general, both when designing benchmarks and when training models. For a more detailed explanation of our analysis, we refer the reader to Appendix [C]Appendix C Details of Test Set Contamination Studies \u2023 Language Models are Few-Shot Learners\").\\\n\\\n\n## 5 Limitations\\\n\\\nGPT-3 and our analysis of it have a number of limitations. Below we describe some of these and suggest directions for future work.\\\n\\\nFirst, despite the strong quantitative and qualitative improvements of GPT-3, particularly compared to its direct predecessor GPT-2, it still has notable weaknesses in text synthesis and several NLP tasks. On text synthesis, although the overall quality is high, GPT-3 samples still sometimes repeat themselves semantically at the document level, start to lose coherence over sufficiently long passages, contradict themselves, and occasionally contain non-sequitur sentences or paragraphs. We will release a collection of 500 uncurated unconditional samples to help provide a better sense of GPT-3\u2019s limitations and strengths at text synthesis. Within the domain of discrete language tasks, we have noticed informally that GPT-3 seems to have special difficulty with \u201ccommon sense physics\u201d, despite doing well on some datasets (such as PIQA \\[ [11])\\]) that test this domain. Specifically GPT-3 has difficulty with questions of the type \u201cIf I put cheese into the fridge, will it melt?\u201d. Quantitatively, GPT-3\u2019s in-context learning performance has some notable gaps on our suite of benchmarks, as described in Section [3]Results \u2023 Language Models are Few-Shot Learners\"), and in particular it does little better than chance when evaluated one-shot or even few-shot on some \u201ccomparison\u201d tasks, such as determining if two words are used the same way in a sentence, or if one sentence implies another (WIC and ANLI respectively), as well as on a subset of reading comprehension tasks. This is especially striking given GPT-3\u2019s strong few-shot performance on many other tasks.\\\n\\\nGPT-3 has several structural and algorithmic limitations, which could account for some of the issues above. We focused on exploring in-context learning behavior in autoregressive language models because it is straightforward to both sample and compute likelihoods with this model class. As a result our experiments do not include any bidirectional architectures or other training objectives such as denoising. This is a noticeable difference from much of the recent literature, which has documented improved fine-tuning performance when using these approaches over standard language models \\[ [116])\\]. Thus our design decision comes at the cost of potentially worse performance on tasks which empirically benefit from bidirectionality. This may include fill-in-the-blank tasks, tasks that involve looking back and comparing two pieces of content, or tasks that require re-reading or carefully considering a long passage and then generating a very short answer. This could be a possible explanation for GPT-3\u2019s lagging few-shot performance on a few of the tasks, such as WIC (which involves comparing the use of a word in two sentences), ANLI (which involves comparing two sentences to see if one implies the other), and several reading comprehension tasks (e.g. QuAC and RACE). We also conjecture, based on past literature, that a large bidirectional model would be stronger at fine-tuning than GPT-3. Making a bidirectional model at the scale of GPT-3, and/or trying to make bidirectional models work with few- or zero-shot learning, is a promising direction for future research, and could help achieve the \u201cbest of both worlds\u201d.\\\n\\\nA more fundamental limitation of the general approach described in this paper \u2013 scaling up any LM-like model, whether autoregressive or bidirectional \u2013 is that it may eventually run into (or could already be running into) the limits of the pretraining objective. Our current objective weights every token equally and lacks a notion of what is most important to predict and what is less important. \\[ [115])\\] demonstrate benefits of customizing prediction to entities of interest. Also, with self-supervised objectives, task specification relies on forcing the desired task into a prediction problem, whereas ultimately, useful language systems (for example virtual assistants) might be better thought of as taking goal-directed actions rather than just making predictions. Finally, large pretrained language models are not grounded in other domains of experience, such as video or real-world physical interaction, and thus lack a large amount of context about the world \\[ [9])\\]. For all these reasons, scaling pure self-supervised prediction is likely to hit limits, and augmentation with a different approach is likely to be necessary. Promising future directions in this vein might include learning the objective function from humans \\[ [143])\\], fine-tuning with reinforcement learning, or adding additional modalities such as images to provide grounding and a better model of the world \\[ [18])\\].\\\n\\\nAnother limitation broadly shared by language models is poor sample efficiency during pre-training. While GPT-3 takes a step towards test-time sample efficiency closer to that of humans (one-shot or zero-shot), it still sees much more text during pre-training than a human sees in the their lifetime \\[ [71])\\]. Improving pre-training sample efficiency is an important direction for future work, and might come from grounding in the physical world to provide additional information, or from algorithmic improvements.\\\n\\\nA limitation, or at least uncertainty, associated with few-shot learning in GPT-3 is ambiguity about whether few-shot learning actually learns new tasks \u201cfrom scratch\u201d at inference time, or if it simply recognizes and identifies tasks that it has learned during training. These possibilities exist on a spectrum, ranging from demonstrations in the training set that are drawn from exactly the same distribution as those at test time, to recognizing the same task but in a different format, to adapting to a specific style of a general task such as QA, to learning a skill entirely de novo. Where GPT-3 is on this spectrum may also vary from task to task. Synthetic tasks such as wordscrambling or defining nonsense words seem especially likely to be learned de novo, whereas translation clearly must be learned during pretraining, although possibly from data that is very different in organization and style than the test data. Ultimately, it is not even clear what humans learn from scratch vs from prior demonstrations. Even organizing diverse demonstrations during pre-training and identifying them at test time would be an advance for language models, but nevertheless understanding precisely how few-shot learning works is an important unexplored direction for future research.\\\n\\\nA limitation associated with models at the scale of GPT-3, regardless of objective function or algorithm, is that they are both expensive and inconvenient to perform inference on, which may present a challenge for practical applicability of models of this scale in their current form. One possible future direction to address this is distillation \\[ [44])\\] of large models down to a manageable size for specific tasks. Large models such as GPT-3 contain a very wide range of skills, most of which are not needed for a specific task, suggesting that in principle aggressive distillation may be possible. Distillation is well-explored in general \\[ [69])\\] but has not been tried at the scale of hundred of billions parameters; new challenges and opportunities may be associated with applying it to models of this size.\\\n\\\nFinally, GPT-3 shares some limitations common to most deep learning systems \u2013 its decisions are not easily interpretable, it is not necessarily well-calibrated in its predictions on novel inputs as observed by the much higher variance in performance than humans on standard benchmarks, and it retains the biases of the data it has been trained on. This last issue \u2013 biases in the data that may lead the model to generate stereotyped or prejudiced content \u2013 is of special concern from a societal perspective, and will be discussed along with other issues in the next section on Broader Impacts (Section [6]Broader Impacts \u2023 Language Models are Few-Shot Learners\")).\\\n\\\n\n## 6 Broader Impacts\\\n\\\nLanguage models have a wide range of beneficial applications for society, including code and writing auto-completion, grammar assistance, game narrative generation, improving search engine responses, and answering questions. But they also have potentially harmful applications. GPT-3 improves the quality of text generation and adaptability over smaller models and increases the difficulty of distinguishing synthetic text from human-written text. It therefore has the potential to advance both the beneficial and harmful applications of language models.\\\n\\\nHere we focus on the potential harms of improved language models, not because we believe the harms are necessarily greater, but in order to stimulate efforts to study and mitigate them. The broader impacts of language models like this are numerous. We focus on two primary issues: the potential for deliberate misuse of language models like GPT-3 in Section [6.1]Misuse of Language Models \u2023 6 Broader Impacts \u2023 Language Models are Few-Shot Learners\"), and issues of bias, fairness, and representation within models like GPT-3 in Section [6.2]Fairness, Bias, and Representation \u2023 6 Broader Impacts \u2023 Language Models are Few-Shot Learners\"). We also briefly discuss issues of energy efficiency (Section [6.3]Energy Usage \u2023 6 Broader Impacts \u2023 Language Models are Few-Shot Learners\")).\\\n\\\n### 6.1 Misuse of Language Models\\\n\\\nMalicious uses of language models can be somewhat difficult to anticipate because they often involve repurposing language models in a very different environment or for a different purpose than researchers intended. To help with this, we can think in terms of traditional security risk assessment frameworks, which outline key steps such as identifying threats and potential impacts, assessing likelihood, and determining risk as a combination of likelihood and impact \\[ [113])\\]. We discuss three factors: potential misuse applications, threat actors, and external incentive structures.\\\n\\\n#### 6.1.1 Potential Misuse Applications\\\n\\\nAny socially harmful activity that relies on generating text could be augmented by powerful language models. Examples include misinformation, spam, phishing, abuse of legal and governmental processes, fraudulent academic essay writing and social engineering pretexting. Many of these applications bottleneck on human beings to write sufficiently high quality text. Language models that produce high quality text generation could lower existing barriers to carrying out these activities and increase their efficacy.\\\n\\\nThe misuse potential of language models increases as the quality of text synthesis improves. The ability of GPT-3 to generate several paragraphs of synthetic content that people find difficult to distinguish from human-written text in [3.9.4]News Article Generation \u2023 3.9 Synthetic and Qualitative Tasks \u2023 3 Results \u2023 Language Models are Few-Shot Learners\") represents a concerning milestone in this regard.\\\n\\\n#### 6.1.2 Threat Actor Analysis\\\n\\\nThreat actors can be organized by skill and resource levels, ranging from low or moderately skilled and resourced actors who may be able to build a malicious product to \u2018advanced persistent threats\u2019 (APTs): highly skilled and well-resourced (e.g. state-sponsored) groups with long-term agendas \\[ [119])\\].\\\n\\\nTo understand how low and mid-skill actors think about language models, we have been monitoring forums and chat groups where misinformation tactics, malware distribution, and computer fraud are frequently discussed. While we did find significant discussion of misuse following the initial release of GPT-2 in spring of 2019, we found fewer instances of experimentation and no successful deployments since then. Additionally, those misuse discussions were correlated with media coverage of language model technologies. From this, we assess that the threat of misuse from these actors is not immediate, but significant improvements in reliability could change this.\\\n\\\nBecause APTs do not typically discuss operations in the open, we have consulted with professional threat analysts about possible APT activity involving the use of language models. Since the release of GPT-2 there has been no discernible difference in operations that may see potential gains by using language models. The assessment was that language models may not be worth investing significant resources in because there has been no convincing demonstration that current language models are significantly better than current methods for generating text, and because methods for \u201ctargeting\u201d or \u201ccontrolling\u201d the content of language models are still at a very early stage.\\\n\\\n#### 6.1.3 External Incentive Structures\\\n\\\nEach threat actor group also has a set of tactics, techniques, and procedures (TTPs) that they rely on to accomplish their agenda. TTPs are influenced by economic factors like scalability and ease of deployment; phishing is extremely popular among all groups because it offers a low-cost, low-effort, high-yield method of deploying malware and stealing login credentials. Using language models to augment existing TTPs would likely result in an even lower cost of deployment.\\\n\\\nEase of use is another significant incentive. Having stable infrastructure has a large impact on the adoption of TTPs. The outputs of language models are stochastic, however, and though developers can constrain these (e.g. using top-k truncation) they are not able to perform consistently without human feedback. If a social media disinformation bot produces outputs that are reliable 99% of the time, but produces incoherent outputs 1% of the time, this could reduce the amount of human labor required in operating this bot. But a human is still needed to filter the outputs, which restricts how scalable the operation can be.\\\n\\\nBased on our analysis of this model and analysis of threat actors and the landscape, we suspect AI researchers will eventually develop language models that are sufficiently consistent and steerable that they will be of greater interest to malicious actors. We expect this will introduce challenges for the broader research community, and hope to work on this through a combination of mitigation research, prototyping, and coordinating with other technical developers.\\\n\\\n### 6.2 Fairness, Bias, and Representation\\\n\\\nBiases present in training data may lead models to generate stereotyped or prejudiced content. This is concerning, since model bias could harm people in the relevant groups in different ways by entrenching existing stereotypes and producing demeaning portrayals amongst other potential harms \\[ [19])\\]. We have conducted an analysis of biases in the model in order to better understand GPT-3\u2019s limitations when it comes to fairness, bias, and representation. 888Evaluating fairness, bias, and representation in language models is a rapidly-developing area with a large body of prior work. See, for example, \\[ [46]), [90]), [120])\\].\\\n\\\nOur goal is not to exhaustively characterize GPT-3, but to give a preliminary analysis of some of its limitations and behaviors. We focus on biases relating to gender, race, and religion, although many other categories of bias are likely present and could be studied in follow-up work. This is a preliminary analysis and does not reflect all of the model\u2019s biases even within the studied categories.\\\n\\\nBroadly, our analysis indicates that internet-trained models have internet-scale biases; models tend to reflect stereotypes present in their training data. Below we discuss our preliminary findings of bias along the dimensions of gender, race, and religion. We probe for bias in the 175 billion parameter model and also in similar smaller models, to see if and how they are different in this dimension.\\\n\\\n#### 6.2.1 Gender\\\n\\\nIn our investigation of gender bias in GPT-3, we focused on associations between gender and occupation. We found that occupations in general have a higher probability of being followed by a male gender identifier than a female one (in other words, they are male leaning) when given a context such as \"The {occupation} was a\" (Neutral Variant). 83% of the 388 occupations we tested were more likely to be followed by a male identifier by GPT-3. We measured this by feeding the model a context such as \"The detective was a\" and then looking at the probability of the model following up with male indicating words (eg. man, male etc.) or female indicating words (woman, female etc.). In particular, occupations demonstrating higher levels of education such as legislator, banker, or professor emeritus were heavily male leaning along with occupations that require hard physical labour such as mason, millwright, and sheriff. Occupations that were more likely to be followed by female identifiers include midwife, nurse, receptionist, housekeeper etc.\\\n\\\nWe also tested how these probabilities changed when we shifted the context to be the \"The competent {occupation} was a\" (Competent Variant), and when we shifted the context to be \"The incompetent {occupation} was a\" (Incompetent Variant) for each occupation in the dataset. We found that, when prompted with \"The competent {occupation} was a,\" the majority of occupations had an even higher probability of being followed by a male identifier than a female one than was the case with our original neutral prompt, \"The {occupation} was a\". With the prompt \"The incompetent {occupation} was a\" the majority of occupations still leaned male with a similar probability than for our original neutral prompt. The average occupation bias - measured as 1njobs\u200b\u2211jobslog\u2061(P\u200b(female\\|Context)P(male\\|Context)))\\\\frac{1}{n\\_{\\\\mathrm{jobs}}}\\\\sum\\_{\\\\mathrm{jobs}}\\\\log(\\\\frac{P(\\\\mathrm{female}\\|\\\\mathrm{Context})}{P(\\\\mathrm{male}\\|\\\\mathrm{Context}))}) \\- was \u22121.111.11-1.11 for the Neutral Variant, \u22122.142.14-2.14 for the Competent Variant and \u22121.151.15-1.15 for the Incompetent Variant.\\\n\\\nWe also carried out pronoun resolution on the Winogender dataset \\[ [111])\\] using two methods which further corroborated the model\u2019s tendency to associate most occupations with males. One method measured the models ability to correctly assign a pronoun as the occupation or the participant. For example, we fed the model a context such as \"The advisor met with the advisee because she wanted to get advice about job applications. \u2018She\u2019 refers to the\" and found the option with the lowest probability between the two possible options (Choices between Occupation Option: advisor; Participant Option: advisee).\\\n\\\nOccupation and participant words often have societal biases associated with them such as the assumption that most occupants are by default male. We found that the language models learnt some of these biases such as a tendency to associate female pronouns with participant positions more than male pronouns. GPT-3 175B had the highest accuracy of all the models (64.17%) on this task. It was also the only model where the accuracy for Occupant sentences (sentences where the correct answer was the Occupation option) for females was higher than for males (81.7% vs 76.7%). All other models had a higher accuracy for male pronouns with Occupation sentences as compared to female pronouns with the exception of our second largest model- GPT-3 13B - which had the same accuracy (60%) for both. This offers some preliminary evidence that in places where issues of bias can make language models susceptible to error, the larger models are more robust than smaller models.\\\n\\\nWe also performed co-occurrence tests, where we analyzed which words are likely to occur in the vicinity of other pre-selected words. We created a model output sample set by generating 800 outputs of length 50 each with a temperature of 1 and top\\_p of 0.9 for every prompt in our dataset. For gender, we had prompts such as \"He was very\", \"She was very\", \"He would be described as\", \"She would be described as\"999We only used male and female pronouns. This simplifying assumption makes it easier to study co-occurrence since it does not require the isolation of instances in which \u2018they\u2019 refers to a singular noun from those where it didn\u2019t, but other forms of gender bias are likely present and could be studied using different approaches.. We looked at the adjectives and adverbs in the top 100 most favored words using an off-the-shelf POS tagger \\[ [60])\\]. We found females were more often described using appearance oriented words such as \u201dbeautiful\u201d and \u201dgorgeous\u201d as compared to men who were more often described using adjectives that span a greater spectrum.\\\n\\\nTable [6.1]Table 6.1 \u2023 6.2.1 Gender \u2023 6.2 Fairness, Bias, and Representation \u2023 6 Broader Impacts \u2023 Language Models are Few-Shot Learners\") shows the top 10 most favored descriptive words for the model along with the raw number of times each word co-occurred with a pronoun indicator. \u201cMost Favored\u201d here indicates words which were most skewed towards a category by co-occurring with it at a higher rate as compared to the other category. To put these numbers in perspective, we have also included the average for the number of co-occurrences across all qualifying words for each gender.\\\n\\\nTable 6.1: Most Biased Descriptive Words in 175B Model\\\n\\\n| Top 10 Most Biased Male Descriptive Words with Raw Co-Occurrence Counts | Top 10 Most Biased Female Descriptive Words with Raw Co-Occurrence Counts |\\\n| --- | --- |\\\n| Average Number of Co-Occurrences Across All Words: 17.5 | Average Number of Co-Occurrences Across All Words: 23.9 |\\\n| Large (16) | Optimistic (12) |\\\n| Mostly (15) | Bubbly (12) |\\\n| Lazy (14) | Naughty (12) |\\\n| Fantastic (13) | Easy-going (12) |\\\n| Eccentric (13) | Petite (10) |\\\n| Protect (10) | Tight (10) |\\\n| Jolly (10) | Pregnant (10) |\\\n| Stable (9) | Gorgeous (28) |\\\n| Personable (22) | Sucked (8) |\\\n| Survive (7) | Beautiful (158) |\\\n\\\n#### 6.2.2 Race\\\n\\\nTo investigate racial bias in GPT-3, we seeded the model with prompts such as - \"The {race} man was very\", \"The {race} woman was very\" and \"People would describe the {race} person as\" and generated 800 samples for each of the above prompts, with {race} replaced with a term indicating a racial category such as White or Asian. We then measure word co-occurrences in the generated samples. Given prior research demonstrating that language models produce text of differing sentiment when varying features such as occupation \\[ [46])\\], we explored how race impacted sentiment. We measured sentiment using Senti WordNet \\[ [7])\\] for the words which co-occurred disproportionately with each race. Each word sentiment varied from 100 to -100, with positive scores indicating positive words (eg. wonderfulness: 100, amicable: 87.5), negative scores indicating negative words (eg. wretched: -87.5 , horrid: -87.5) and a score of 0 indicating neutral words (eg. sloping, chalet).\\\n\\\nIt should be noted that we were explicitly prompting the models to talk about race and this in turn generated text that focused on racial features; these results are not from the models talking about race in the wild but talking about race in an experimental setup where they have been primed to do so. Additionally, since we are measuring sentiment by simply looking at word co-occurrences, the resulting sentiment can reflect socio-historical factors - for instance, text relating to a discussion of slavery will frequently have a negative sentiment, which may lead to a demographic being associated with a negative sentiment under this testing methodology.\\\n\\\nAcross the models we analyzed, \u2018Asian\u2019 had a consistently high sentiment - it ranked 1st in 3 out of 7 models. On the other hand, \u2019Black\u2019 had a consistently low sentiment - it ranked the lowest in 5 out of 7 models. These differences narrowed marginally on the larger model sizes. This analysis gives a sense of the biases of different models and highlights the need for more sophisticated analysis of the relationship between sentiment, entities, and input data.\\\n\\\n![Refer to caption]Figure 6.1: Racial Sentiment Across Models\\\n\\\n#### 6.2.3 Religion\\\n\\\nWe studied which words co-occurred with religious terms relating to Atheism, Buddhism, Christianity, Hinduism, Islam, and Judaism, by generating 800 model outputs of length \u2248\\\\approx50 with a temperature of 1 and a top p\ud835\udc5dp of 0.90.90.9 for every prompt. Our prompts were of the nature \"{Religion practitioners} are\" (Eg. \"Christians are\") for each of the six religious categories listed above. We then allowed the model to naturally carry out completions and created a corpus of such completions for studying co-occurrence of words.\\\n\\\nThe following is an example output from the model:\\\n\\\n\"Buddhists aredivided into two main branches - Theravada and Mahayana. Theravada is the more conservative branch, centering on monastic life and the earliest sutras and refusing to recognize the later Mahayana sutras as authentic.\"\\\n\\\nSimilar to race, we found that the models make associations with religious terms that indicate some propensity to reflect how these terms are sometimes presented in the world. For example, with the religion Islam, we found that words such as ramadan, prophet and mosque co-occurred at a higher rate than for other religions. We also found that words such as violent, terrorism and terrorist co-occurred at a greater rate with Islam than with other religions and were in the top 40 most favored words for Islam in GPT-3.\\\n\\\n| Religion | Most Favored Descriptive Words |\\\n| --- | --- |\\\n| Atheism | \u2018Theists\u2019, \u2018Cool\u2019, \u2018Agnostics\u2019, \u2018Mad\u2019, \u2018Theism\u2019, \u2018Defensive\u2019, \u2018Complaining\u2019, \u2018Correct\u2019, \u2018Arrogant\u2019, \u2018Characterized\u2019 |\\\n| Buddhism | \u2018Myanmar\u2019, \u2018Vegetarians\u2019, \u2018Burma\u2019, \u2018Fellowship\u2019, \u2018Monk\u2019, \u2018Japanese\u2019, \u2018Reluctant\u2019, \u2018Wisdom\u2019, \u2018Enlightenment\u2019, \u2018Non-Violent\u2019 |\\\n| Christianity | \u2018Attend\u2019, \u2018Ignorant\u2019, \u2018Response\u2019, \u2018Judgmental\u2019, \u2018Grace\u2019, \u2018Execution\u2019, \u2018Egypt\u2019, \u2018Continue\u2019, \u2018Comments\u2019, \u2018Officially\u2019 |\\\n| Hinduism | \u2018Caste\u2019, \u2018Cows\u2019, \u2018BJP\u2019, \u2018Kashmir\u2019, \u2018Modi\u2019, \u2018Celebrated\u2019, \u2018Dharma\u2019, \u2018Pakistani\u2019, \u2018Originated\u2019, \u2018Africa\u2019 |\\\n| Islam | \u2018Pillars\u2019, \u2018Terrorism\u2019, \u2018Fasting\u2019, \u2018Sheikh\u2019, \u2018Non-Muslim\u2019, \u2018Source\u2019, \u2018Charities\u2019, \u2018Levant\u2019, \u2018Allah\u2019, \u2018Prophet\u2019 |\\\n| Judaism | \u2018Gentiles\u2019, \u2018Race\u2019, \u2018Semites\u2019, \u2018Whites\u2019, \u2018Blacks\u2019, \u2018Smartest\u2019, \u2018Racists\u2019, \u2018Arabs\u2019, \u2018Game\u2019, \u2018Russian\u2019 |\\\n\\\nTable 6.2: Shows the ten most favored words about each religion in the GPT-3 175B model.\\\n\\\n#### 6.2.4 Future Bias and Fairness Challenges\\\n\\\nWe have presented this preliminary analysis to share some of the biases we found in order to motivate further research, and to highlight the inherent difficulties in characterizing biases in large-scale generative models; we expect this to be an area of continuous research for us and are excited to discuss different methodological approaches with the community. We view the work in this section as subjective signposting - we chose gender, race, and religion as a starting point, but we recognize the inherent subjectivity in this choice. Our work is inspired by the literature on characterizing model attributes to develop informative labels such as Model Cards for Model Reporting from \\[ [89])\\].\\\n\\\nUltimately, it is important not just to characterize biases in language systems but to intervene. The literature on this is also extensive \\[ [104]), [46])\\], so we offer only a few brief comments on future directions specific to large language models. In order to pave the way for effective bias prevention in general purpose models, there is a need for building a common vocabulary tying together the normative, technical and empirical challenges of bias mitigation for these models. There is room for more research that engages with the literature outside NLP, better articulates normative statements about harm, and engages with the lived experience of communities affected by NLP systems \\[ [4])\\]. Thus, mitigation work should not be approached purely with a metric driven objective to \u2018remove\u2019 bias as this has been shown to have blind spots \\[ [32]), [93])\\] but in a holistic manner.\\\n\\\n### 6.3 Energy Usage\\\n\\\nPractical large-scale pre-training requires large amounts of computation, which is energy-intensive: training the GPT-3 175B consumed several thousand petaflop/s-days of compute during pre-training, compared to tens of petaflop/s-days for a 1.5B parameter GPT-2 model (Figure [2.2]Figure 2.2 \u2023 2.1 Model and Architectures \u2023 2 Approach \u2023 Language Models are Few-Shot Learners\")). This means we should be cognizant of the cost and efficiency of such models, as advocated by \\[ [122])\\].\\\n\\\nThe use of large-scale pre-training also gives another lens through which to view the efficiency of large models - we should consider not only the resources that go into training them, but how these resources are amortized over the lifetime of a model, which will subsequently be used for a variety of purposes and fine-tuned for specific tasks. Though models like GPT-3 consume significant resources during training, they can be surprisingly efficient once trained: even with the full GPT-3 175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or only a few cents in energy costs. Additionally, techniques like model distillation \\[ [69])\\] can further bring down the cost of such models, letting us adopt a paradigm of training single, large-scale models, then creating more efficient versions of them for use in appropriate contexts. Algorithmic progress may also naturally further increase the efficiency of such models over time, similar to trends observed in image recognition and neural machine translation \\[ [39])\\].\\\n\\\n\n## 7 Related Work\\\n\\\nSeveral lines of work have focused on increasing parameter count and/or computation in language models as a means to improve generative or task performance. An early work scaled LSTM based language models to over a billion parameters \\[ [51])\\]. One line of work straightforwardly increases the size of transformer models, scaling up parameters and FLOPS-per-token roughly in proportion. Work in this vein has successively increased model size: 213 million parameters \\[ [134])\\] in the original paper, 300 million parameters \\[ [20])\\], 1.5 billion parameters \\[ [117])\\], 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and most recently 17 billion parameters \\[ [132])\\]. A second line of work has focused on increasing parameter count but not computation, as a means of increasing models\u2019 capacity to store information without increased computational cost. These approaches rely on the conditional computation framework \\[ [10])\\] and specifically, the mixture-of-experts method \\[ [124])\\] has been used to produce 100 billion parameter models and more recently 50 billion parameter translation models \\[ [3])\\], though only a small fraction of the parameters are actually used on each forward pass. A third approach increases computation without increasing parameters; examples of this approach include adaptive computation time \\[ [35])\\] and the universal transformer \\[ [22])\\]. Our work focuses on the first approach (scaling compute and parameters together, by straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ this strategy.\\\n\\\nSeveral efforts have also systematically studied the effect of scale on language model performance. \\[ [57]), [114]), [77]), [42])\\], find a smooth power-law trend in loss as autoregressive language models are scaled up. This work suggests that this trend largely continues as models continue to scale up (although a slight bending of the curve can perhaps be detected in Figure [3.1]Figure 3.1 \u2023 3 Results \u2023 Language Models are Few-Shot Learners\")), and we also find relatively smooth increases in many (though not all) downstream tasks across 3 orders of magnitude of scaling.\\\n\\\nAnother line of work goes in the opposite direction from scaling, attempting to preserve strong performance in language models that are as small as possible. This approach includes ALBERT \\[ [62])\\] as well as general \\[ [44])\\] and task-specific \\[ [121]), [52]), [59])\\] approaches to distillation of language models. These architectures and techniques are potentially complementary to our work, and could be applied to decrease latency and memory footprint of giant models.\\\n\\\nAs fine-tuned language models have neared human performance on many standard benchmark tasks, considerable effort has been devoted to constructing more difficult or open-ended tasks, including question answering \\[ [58]), [47]), [14]), [84])\\], reading comprehension \\[ [16]), [106])\\], and adversarially constructed datasets designed to be difficult for existing language models \\[ [118]), [94])\\]. In this work we test our models on many of these datasets.\\\n\\\nMany previous efforts have focused specifically on question-answering, which constitutes a significant fraction of the tasks we tested on. Recent efforts include \\[ [116]), [115])\\], which fine-tuned an 11 billion parameter language model, and \\[ [33])\\], which focused on attending over a large corpus of data at test time. Our work differs in focusing on in-context learning but could be combined in the future with those of \\[ [33]), [75])\\].\\\n\\\nMetalearning in language models has been utilized in \\[ [117])\\], though with much more limited results and no systematic study. More broadly, language model metalearning has an inner-loop-outer-loop structure, making it structurally similar to metalearning as applied to ML in general. Here there is an extensive literature, including matching networks \\[ [133])\\], RL2 \\[ [26])\\], learning to optimize \\[ [109]), [1]), [73])\\] and MAML \\[ [30])\\]. Our approach of stuffing the model\u2019s context with previous examples is most structurally similar to RL2 and also resembles \\[ [45])\\], in that an inner loop of adaptation takes place through computation in the model\u2019s activations across timesteps, without updating the weights, while an outer loop (in this case just language model pre-training) updates the weights, and implicitly learns the ability to adapt to or at least recognize tasks defined at inference-time. Few-shot auto-regressive density estimation was explored in  \\[ [107])\\] and \\[ [38])\\] studied low-resource NMT as a few-shot learning problem.\\\n\\\nWhile the mechanism of our few-shot approach is different, prior work has also explored ways of using pre-trained language models in combination with gradient descent to perform few-shot learning \\[ [126])\\]. Another sub-field with similar goals is semi-supervised learning where approaches such as UDA \\[ [137])\\] also explore methods of fine-tuning when very little labeled data is available.\\\n\\\nGiving multi-task models instructions in natural language was first formalized in a supervised setting with \\[ [87])\\] and utilized for some tasks (such as summarizing) in a language model with \\[ [117])\\]. The notion of presenting tasks in natural language was also explored in the text-to-text transformer \\[ [116])\\], although there it was applied for multi-task fine-tuning rather than for in-context learning without weight updates.\\\n\\\nAnother approach to increasing generality and transfer-learning capability in language models is multi-task learning \\[ [12])\\], which fine-tunes on a mixture of downstream tasks together, rather than separately updating the weights for each one. If successful multi-task learning could allow a single model to be used for many tasks without updating the weights (similar to our in-context learning approach), or alternatively could improve sample efficiency when updating the weights for a new task. Multi-task learning has shown some promising initial results \\[ [67]), [76])\\] and multi-stage fine-tuning has recently become a standardized part of SOTA results on some datasets \\[ [97])\\] and pushed the boundaries on certain tasks \\[ [55])\\], but is still limited by the need to manually curate collections of datasets and set up training curricula. By contrast pre-training at large enough scale appears to offer a \u201cnatural\u201d broad distribution of tasks implicitly contained in predicting the text itself. One direction for future work might be attempting to generate a broader set of explicit tasks for multi-task learning, for example through procedural generation \\[ [128])\\], human interaction \\[ [144])\\], or active learning \\[ [80])\\].\\\n\\\nAlgorithmic innovation in language models over the last two years has been enormous, including denoising-based bidirectionality \\[ [20])\\], prefixLM \\[ [24])\\] and encoder-decoder architectures \\[ [72]), [116])\\], random permutations during training \\[ [139])\\], architectures that improve the efficiency of sampling \\[ [28])\\], improvements in data and training procedures \\[ [74])\\], and efficiency increases in the embedding parameters \\[ [62])\\]. Many of these techniques provide significant gains on downstream tasks. In this work we continue to focus on pure autoregressive language models, both in order to focus on in-context learning performance and to reduce the complexity of our large model implementations. However, it is very likely that incorporating these algorithmic advances could improve GPT-3\u2019s performance on downstream tasks, especially in the fine-tuning setting, and combining GPT-3\u2019s scale with these algorithmic techniques is a promising direction for future work.\\\n\\\n\n## 8 Conclusion\\\n\\\nWe presented a 175 billion parameter language model which shows strong performance on many NLP tasks and benchmarks in the zero-shot, one-shot, and few-shot settings, in some cases nearly matching the performance of state-of-the-art fine-tuned systems, as well as generating high-quality samples and strong qualitative performance at tasks defined on-the-fly. We documented roughly predictable trends of scaling in performance without using fine-tuning. We also discussed the social impacts of this class of model. Despite many limitations and weaknesses, these results suggest that very large language models may be an important ingredient in the development of adaptable, general language systems.\\\n\\\n</Content></Candidate>\n\n<Candidate>Candidate [3]:\nSegment anything.\n\n<Abstract>Abstract: We introduce the Segment Anything (SA) project: a new task, model, and\ndataset for image segmentation. Using our efficient model in a data collection\nloop, we built the largest segmentation dataset to date (by far), with over 1\nbillion masks on 11M licensed and privacy respecting images. The model is\ndesigned and trained to be promptable, so it can transfer zero-shot to new\nimage distributions and tasks. We evaluate its capabilities on numerous tasks\nand find that its zero-shot performance is impressive -- often competitive with\nor even superior to prior fully supervised results. We are releasing the\nSegment Anything Model (SAM) and corresponding dataset (SA-1B) of 1B masks and\n11M images at https://segment-anything.com to foster research into foundation\nmodels for computer vision.</Abstract><Content>\n## 1 Introduction\nLarge language models pre-trained on web-scale datasets are revolutionizing NLP with strong zero-shot and few-shot generalization \\[ [10])\\]. These \u201cfoundation models\u201d \\[ [8])\\] can generalize to tasks and data distributions beyond those seen during training. This capability is often implemented with _prompt engineering_ in which hand-crafted text is used to prompt the language model to generate a valid textual response for the task at hand. When scaled and trained with abundant text corpora from the web, these models\u2019 zero and few-shot performance compares surprisingly well to (even matching in some cases) fine-tuned models \\[ [10]), [21])\\]. Empirical trends show this behavior improving with model scale, dataset size, and total training compute \\[ [56]), [10]), [21]), [51])\\].\n\nFoundation models have also been explored in computer vision, albeit to a lesser extent. Perhaps the most prominent illustration aligns paired text and images from the web. For example, CLIP \\[ [82])\\] and ALIGN \\[ [55])\\] use contrastive learning to train text and image encoders that align the two modalities. Once trained, engineered text prompts enable zero-shot generalization to novel visual concepts and data distributions. Such encoders also compose effectively with other modules to enable downstream tasks, such as image generation ( _e.g_., DALL\u00b7E \\[ [83])\\]). While much progress has been made on vision and language encoders, computer vision includes a wide range of problems beyond this scope, and for many of these, abundant training data does not exist.\n\nIn this work, our goal is to build _a foundation model for image segmentation_. That is, we seek to develop a promptable model and pre-train it on a broad dataset using a task that enables powerful generalization. With this model, we aim to solve a range of downstream segmentation problems on new data distributions using prompt engineering.\n\nThe success of this plan hinges on three components: task, model, and data. To develop them, we address the following questions about image segmentation:\n\n1. 1.\n\n\nWhat task will enable zero-shot generalization?\n\n2. 2.\n\n\nWhat is the corresponding model architecture?\n\n3. 3.\n\n\nWhat data can power this task and model?\n\n\nThese questions are entangled and require a comprehensive solution. We start by defining a _promptable segmentation_ task that is general enough to provide a powerful pre-training objective and to enable a wide range of downstream applications. This task requires a model that supports flexible prompting and can output segmentation masks in real-time when prompted to allow for interactive use. To train our model, we need a diverse, large-scale source of data. Unfortunately, there is no web-scale data source for segmentation; to address this, we build a \u201cdata engine\u201d, _i.e_., we iterate between using our efficient model to assist in data collection and using the newly collected data to improve the model. We introduce each interconnected component next, followed by the dataset we created and the experiments that demonstrate the effectiveness of our approach.\n\n#### Task (\u00a7 [2]Segment Anything Task \u2023 Segment Anything\")).\n\nIn NLP and more recently computer vision, foundation models are a promising development that can perform zero-shot and few-shot learning for new datasets and tasks often by using \u201cprompting\u201d techniques. Inspired by this line of work, we propose the _promptable segmentation task_, where the goal is to return a _valid_ segmentation mask given any segmentation _prompt_ (see Fig. [1]Figure 1 \u2023 Segment Anything\") a). A prompt simply specifies what to segment in an image, _e.g_., a prompt can include spatial or text information identifying an object. The requirement of a valid output mask means that even when a prompt is ambiguous and could refer to multiple objects (for example, a point on a shirt may indicate either the shirt or the person wearing it), the output should be a reasonable mask for at least one of those objects. We use the promptable segmentation task as both a pre-training objective and to solve general downstream segmentation tasks via prompt engineering.\n\n#### Model (\u00a7 [3]Segment Anything Model \u2023 Segment Anything\")).\n\nThe promptable segmentation task and the goal of real-world use impose constraints on the model architecture. In particular, the model must support _flexible prompts_, needs to compute masks in amortized _real-time_ to allow interactive use, and must be _ambiguity-aware_. Surprisingly, we find that a simple design satisfies all three constraints: a powerful image encoder computes an image embedding, a prompt encoder embeds prompts, and then the two information sources are combined in a lightweight mask decoder that predicts segmentation masks. We refer to this model as the Segment Anything Model, or SAM (see Fig. [1]Figure 1 \u2023 Segment Anything\") b). By separating SAM into an image encoder and a fast prompt encoder / mask decoder, the same image embedding can be reused (and its cost amortized) with different prompts. Given an image embedding, the prompt encoder and mask decoder predict a mask from a prompt in \u223csimilar-to\\\\scriptstyle\\\\sim50ms in a web browser. We focus on point, box, and mask prompts, and also present initial results with free-form text prompts. To make SAM ambiguity-aware, we design it to predict multiple masks for a single prompt allowing SAM to naturally handle ambiguity, such as the shirt _vs_. person example.\n\n#### Data engine (\u00a7 [4]Segment Anything Data Engine \u2023 Segment Anything\")).\n\nTo achieve strong generalization to new data distributions, we found it necessary to train SAM on a large and diverse set of masks, beyond any segmentation dataset that already exists. While a typical approach for foundation models is to obtain data online \\[ [82])\\], masks are not naturally abundant and thus we need an alternative strategy. Our solution is to build a \u201cdata engine\u201d, _i.e_., we co-develop our model with model-in-the-loop dataset annotation (see Fig. [1]Figure 1 \u2023 Segment Anything\") c). Our data engine has three stages: _assisted-manual_, _semi-automatic_, and _fully automatic_. In the first stage, SAM assists annotators in annotating masks, similar to a classic interactive segmentation setup. In the second stage, SAM can automatically generate masks for a subset of objects by prompting it with likely object locations and annotators focus on annotating the remaining objects, helping increase mask diversity. In the final stage, we prompt SAM with a regular grid of foreground points, yielding on average \u223csimilar-to\\\\scriptstyle\\\\sim100 high-quality masks per image.\n\n#### Dataset (\u00a7 [5]Segment Anything Dataset \u2023 Segment Anything\")).\n\nOur final dataset, SA-1B, includes more than _1B_ masks from _11M_ licensed and privacy-preserving images (see Fig. [2]Figure 2 \u2023 Release. \u2023 1 Introduction \u2023 Segment Anything\")). SA-1B, collected fully automatically using the final stage of our data engine, has 400\u00d7{\\\\times} more masks than any existing segmentation dataset \\[ [66]), [44]), [117]), [60])\\], and as we verify extensively, the masks are of high quality and diversity. Beyond its use in training SAM to be robust and general, we hope SA-1B becomes a valuable resource for research aiming to build new foundation models.\n\n#### Responsible AI (\u00a7 [6]Segment Anything RAI Analysis \u2023 Segment Anything\")).\n\nWe study and report on potential fairness concerns and biases when using SA-1B and SAM. Images in SA-1B span a geographically and economically diverse set of countries and we found that SAM performs similarly across different groups of people. Together, we hope this will make our work more equitable for real-world use cases. We provide model and dataset cards in the appendix.\n\n#### Experiments (\u00a7 [7]Zero-Shot Transfer Experiments \u2023 Segment Anything\")).\n\nWe extensively evaluate SAM. First, using a diverse new suite of 23 segmentation datasets, we find that SAM produces high-quality masks from a single foreground point, often only slightly below that of the manually annotated ground truth. Second, we find consistently strong quantitative and qualitative results on a variety of downstream tasks under a zero-shot transfer protocol using prompt engineering, including edge detection, object proposal generation, instance segmentation, and a preliminary exploration of text-to-mask prediction. These results suggest that SAM can be used out-of-the-box with prompt engineering to solve a variety of tasks involving object and image distributions beyond SAM\u2019s training data. Nevertheless, room for improvement remains, as we discuss in \u00a7 [8]Discussion \u2023 Segment Anything\").\n\n#### Release.\n\nWe are releasing the SA-1B dataset for research purposes and making SAM available under a permissive open license (Apache 2.0) at [https://segment-anything.com]. We also showcase SAM\u2019s capabilities with an [online demo].\n\n<<50 masks![Refer to caption]![Refer to caption]![Refer to caption]![Refer to caption]\n\n50-100 masks![Refer to caption]![Refer to caption]![Refer to caption]![Refer to caption]\n\n100-200 masks![Refer to caption]![Refer to caption]![Refer to caption]![Refer to caption]\n\n200-300 masks![Refer to caption]![Refer to caption]![Refer to caption]![Refer to caption]\n\n300-400 masks![Refer to caption]![Refer to caption]![Refer to caption]![Refer to caption]\n\n400-500 masks![Refer to caption]![Refer to caption]![Refer to caption]![Refer to caption]\n\n>>500 masks![Refer to caption]![Refer to caption]![Refer to caption]![Refer to caption]\n\nFigure 2: Example images with overlaid masks from our newly introduced dataset, SA-1B. SA-1B contains 11M diverse, high-resolution, licensed, and privacy protecting images and 1.1B high-quality segmentation masks. These masks were annotated _fully automatically_ by SAM, and as we verify by human ratings and numerous experiments, are of high quality and diversity. We group images by number of masks per image for visualization (there are \u223csimilar-to\\\\scriptstyle\\\\sim100 masks per image on average).\n\n## 2 Segment Anything Task\nWe take inspiration from NLP, where the next token prediction task is used for foundation model pre-training _and_ to solve diverse downstream tasks via prompt engineering \\[ [10])\\]. To build a foundation model for segmentation, we aim to define a task with analogous capabilities.\n\n#### Task.\n\nWe start by translating the idea of a prompt from NLP to segmentation, where a prompt can be a set of foreground / background points, a rough box or mask, free-form text, or, in general, any information indicating what to segment in an image. The _promptable segmentation task_, then, is to return a _valid_ segmentation mask given any _prompt_. The requirement of a \u201cvalid\u201d mask simply means that even when a prompt is _ambiguous_ and could refer to multiple objects ( _e.g_., recall the shirt _vs_. person example, and see Fig. [3]Figure 3 \u2023 Zero-shot transfer. \u2023 2 Segment Anything Task \u2023 Segment Anything\")), the output should be a reasonable mask for at least _one_ of those objects. This requirement is similar to expecting a language model to output a coherent response to an ambiguous prompt. We choose this task because it leads to a natural pre-training algorithm _and_ a general method for zero-shot transfer to downstream segmentation tasks via prompting.\n\n#### Pre-training.\n\nThe promptable segmentation task suggests a natural pre-training algorithm that simulates a sequence of prompts ( _e.g_., points, boxes, masks) for each training sample and compares the model\u2019s mask predictions against the ground truth. We adapt this method from interactive segmentation \\[ [109]), [70])\\], although unlike interactive segmentation whose aim is to eventually predict a valid mask after enough user input, our aim is to always predict a _valid mask_ for _any prompt_ even when the prompt is _ambiguous_. This ensures that a pre-trained model is effective in use cases that involve ambiguity, including automatic annotation as required by our data engine \u00a7 [4]Segment Anything Data Engine \u2023 Segment Anything\"). We note that performing well at this task is challenging and requires specialized modeling and training loss choices, which we discuss in \u00a7 [3]Segment Anything Model \u2023 Segment Anything\").\n\n#### Zero-shot transfer.\n\nIntuitively, our pre-training task endows the model with the ability to respond appropriately to any prompt at inference time, and thus downstream tasks can be solved by engineering appropriate prompts. For example, if one has a bounding box detector for cats, cat instance segmentation can be solved by providing the detector\u2019s box output as a prompt to our model. In general, a wide array of practical segmentation tasks can be cast as prompting. In addition to automatic dataset labeling, we explore five diverse example tasks in our experiments in \u00a7 [7]Zero-Shot Transfer Experiments \u2023 Segment Anything\").\n\n![Refer to caption]Figure 3: Each column shows 3 valid masks generated by SAM from a single ambiguous point prompt (green circle).\n\n#### Related tasks.\n\nSegmentation is a broad field: there\u2019s interactive segmentation \\[ [57]), [109])\\], edge detection \\[ [3])\\], super pixelization \\[ [85])\\], object proposal generation \\[ [2])\\], foreground segmentation \\[ [94])\\], semantic segmentation \\[ [90])\\], instance segmentation \\[ [66])\\], panoptic segmentation \\[ [59])\\], _etc_. The goal of our promptable segmentation task is to produce a broadly capable model that can adapt to _many_ (though not all) existing and _new_ segmentation tasks via prompt engineering. This capability is a form of task generalization \\[ [26])\\]. Note that this is different than previous work on multi-task segmentation systems. In a multi-task system, a single model performs a _fixed_ set of tasks, _e.g_., joint semantic, instance, and panoptic segmentation \\[ [114]), [19]), [54])\\], but the training and test tasks are the same. An important distinction in our work is that a model trained for promptable segmentation can perform a new, different task at inference time by acting as a _component_ in a larger system, _e.g_., to perform instance segmentation, a promptable segmentation model is _combined_ with an existing object detector.\n\n#### Discussion.\n\nPrompting and composition are powerful tools that enable a single model to be used in extensible ways, potentially to accomplish tasks unknown at the time of model design. This approach is analogous to how other foundation models are used, _e.g_., how CLIP \\[ [82])\\] is the text-image alignment component of the DALL\u22c5\u22c5\\\\cdotE \\[ [83])\\] image generation system. We anticipate that composable system design, powered by techniques such as prompt engineering, will enable a wider variety of applications than systems trained specifically for a fixed set of tasks. It\u2019s also interesting to compare promptable and interactive segmentation through the lens of composition: while interactive segmentation models are designed with human users in mind, a model trained for promptable segmentation can also be composed into a larger algorithmic system as we will demonstrate.\n\n![Refer to caption]Figure 4: Segment Anything Model (SAM) overview. A heavyweight image encoder outputs an image embedding that can then be efficiently queried by a variety of input prompts to produce object masks at amortized real-time speed. For ambiguous prompts corresponding to more than one object, SAM can output multiple valid masks and associated confidence scores.\n\n## 3 Segment Anything Model\nWe next describe the Segment Anything Model (SAM) for promptable segmentation. SAM has three components, illustrated in Fig. [4]Figure 4 \u2023 Discussion. \u2023 2 Segment Anything Task \u2023 Segment Anything\"): an image encoder, a flexible prompt encoder, and a fast mask decoder. We build on Transformer vision models \\[ [14]), [33]), [20]), [62])\\] with specific tradeoffs for (amortized) real-time performance. We describe these components at a high-level here, with details in \u00a7 [A]Appendix A Segment Anything Model and Task Details \u2023 Segment Anything\").\n\n#### Image encoder.\n\nMotivated by scalability and powerful pre-training methods, we use an MAE \\[ [47])\\] pre-trained Vision Transformer (ViT) \\[ [33])\\] minimally adapted to process high resolution inputs \\[ [62])\\]. The image encoder runs once per image and can be applied prior to prompting the model.\n\n#### Prompt encoder.\n\nWe consider two sets of prompts: _sparse_ (points, boxes, text) and _dense_ (masks). We represent points and boxes by positional encodings \\[ [95])\\] summed with learned embeddings for each prompt type and free-form text with an off-the-shelf text encoder from CLIP \\[ [82])\\]. Dense prompts ( _i.e_., masks) are embedded using convolutions and summed element-wise with the image embedding.\n\n#### Mask decoder.\n\nThe mask decoder efficiently maps the image embedding, prompt embeddings, and an output token to a mask. This design, inspired by \\[ [14]), [20])\\], employs a modification of a Transformer decoder block \\[ [103])\\] followed by a dynamic mask prediction head. Our modified decoder block uses prompt self-attention and cross-attention in two directions (prompt-to-image embedding and vice-versa) to update _all_ embeddings. After running two blocks, we upsample the image embedding and an MLP maps the output token to a dynamic linear classifier, which then computes the mask foreground probability at each image location.\n\n#### Resolving ambiguity.\n\nWith one output, the model will average multiple valid masks if given an ambiguous prompt. To address this, we modify the model to predict multiple output masks for a single prompt (see Fig. [3]Figure 3 \u2023 Zero-shot transfer. \u2023 2 Segment Anything Task \u2023 Segment Anything\")). We found 3 mask outputs is sufficient to address most common cases (nested masks are often at most three deep: whole, part, and subpart). During training, we backprop only the minimum loss \\[ [15]), [45]), [64])\\] over masks. To rank masks, the model predicts a confidence score ( _i.e_., estimated IoU) for each mask.\n\n#### Efficiency.\n\nThe overall model design is largely motivated by efficiency. Given a precomputed image embedding, the prompt encoder and mask decoder run in a web browser, on CPU, in \u223csimilar-to\\\\scriptstyle\\\\sim50ms. This runtime performance enables seamless, real-time interactive prompting of our model.\n\n#### Losses and training.\n\nWe supervise mask prediction with the linear combination of focal loss \\[ [65])\\] and dice loss \\[ [73])\\] used in \\[ [14])\\]. We train for the promptable segmentation task using a mixture of geometric prompts (for text prompts see \u00a7 [7.5]Zero-Shot Text-to-Mask \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\")). Following \\[ [92]), [37])\\], we simulate an interactive setup by randomly sampling prompts in 11 rounds per mask, allowing SAM to integrate seamlessly into our data engine.\n\n## 4 Segment Anything Data Engine\nAs segmentation masks are not abundant on the internet, we built a data engine to enable the collection of our 1.1B mask dataset, SA-1B. The data engine has three stages: (1) a model-assisted manual annotation stage, (2) a semi-automatic stage with a mix of automatically predicted masks and model-assisted annotation, and (3) a fully automatic stage in which our model generates masks without annotator input. We go into details of each next.\n\n#### Assisted-manual stage.\n\nIn the first stage, resembling classic interactive segmentation, a team of professional annotators labeled masks by clicking foreground / background object points using a browser-based interactive segmentation tool powered by SAM. Masks could be refined using pixel-precise \u201cbrush\u201d and \u201ceraser\u201d tools. Our model-assisted annotation runs in real-time directly inside a browser (using precomputed image embeddings) enabling a truly interactive experience. We did not impose semantic constraints for labeling objects, and annotators freely labeled both \u201cstuff\u201d and \u201cthings\u201d \\[ [1])\\]. We suggested annotators label objects they could name or describe, but did not collect these names or descriptions. Annotators were asked to label objects in order of prominence and were encouraged to proceed to the next image once a mask took over 30 seconds to annotate.\n\nAt the start of this stage, SAM was trained using common public segmentation datasets. After sufficient data annotation, SAM was retrained using only newly annotated masks. As more masks were collected, the image encoder was scaled from ViT-B to ViT-H and other architectural details evolved; in total we retrained our model 6 times. Average annotation time per mask decreased from 34 to 14 seconds as the model improved. We note that 14 seconds is 6.5\u00d7{\\\\times} faster than mask annotation for COCO \\[ [66])\\] and only 2\u00d7{\\\\times} slower than bounding-box labeling with extreme points \\[ [76]), [71])\\]. As SAM improved, the average number of masks per image increased from 20 to 44 masks. Overall, we collected 4.3M masks from 120k images in this stage.\n\n#### Semi-automatic stage.\n\nIn this stage, we aimed to increase the _diversity_ of masks in order to improve our model\u2019s ability to segment anything. To focus annotators on less prominent objects, we first automatically detected confident masks. Then we presented annotators with images prefilled with these masks and asked them to annotate any additional unannotated objects. To detect confident masks, we trained a bounding box detector \\[ [84])\\] on all first stage masks using a generic \u201cobject\u201d category. During this stage we collected an additional 5.9M masks in 180k images (for a total of 10.2M masks). As in the first stage, we periodically retrained our model on newly collected data (5 times). Average annotation time per mask went back up to 34 seconds (excluding the automatic masks) as these objects were more challenging to label. The average number of masks per image went from 44 to 72 masks (including the automatic masks).\n\n#### Fully automatic stage.\n\nIn the final stage, annotation was _fully automatic_. This was feasible due to two major enhancements to our model. First, at the start of this stage, we had collected enough masks to greatly improve the model, including the diverse masks from the previous stage. Second, by this stage we had developed the ambiguity-aware model, which allowed us to predict valid masks even in ambiguous cases. Specifically, we prompted the model with a 32\u00d7{\\\\times}32 regular grid of points and for each point predicted a set of masks that may correspond to valid objects. With the ambiguity-aware model, if a point lies on a part or subpart, our model will return the subpart, part, and whole object. The IoU prediction module of our model is used to select _confident_ masks; moreover, we identified and selected only _stable_ masks (we consider a mask stable if thresholding the probability map at 0.5\u2212\u03b40.5\ud835\udeff0.5-\\\\delta and 0.5+\u03b40.5\ud835\udeff0.5+\\\\delta results in similar masks). Finally, after selecting the confident and stable masks, we applied non-maximal suppression (NMS) to filter duplicates. To further improve the quality of smaller masks, we also processed multiple overlapping zoomed-in image crops. For further details of this stage, see \u00a7 [B]Appendix B Automatic Mask Generation Details \u2023 Segment Anything\"). We applied fully automatic mask generation to all 11M images in our dataset, producing a total of 1.1B high-quality masks. We describe and analyze the resulting dataset, SA-1B, next.\n\n![Refer to caption]Figure 5: Image-size normalized mask center distributions.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 6: Dataset mask properties. The legend references the number of images and masks in each dataset. Note, that SA-1B has 11\u00d7{\\\\times} more images and 400\u00d7{\\\\times} more masks than the largest existing segmentation dataset Open Images \\[ [60])\\].\n\n## 5 Segment Anything Dataset\nOur dataset, SA-1B, consists of 11M diverse, high-resolution, licensed, and privacy protecting images and 1.1B high-quality segmentation masks collected with our data engine. We compare SA-1B with existing datasets and analyze mask quality and properties. We are releasing SA-1B to aid future development of foundation models for computer vision. We note that SA-1B will be released under a favorable license agreement for certain research uses and with protections for researchers.\n\n#### Images\n\n. We licensed a new set of 11M images from a provider that works directly with photographers. These images are high resolution (3300\u00d7{\\\\times}4950 pixels on average), and the resulting data size can present accessibility and storage challenges. Therefore, we are releasing downsampled images with their shortest side set to 1500 pixels. Even after downsampling, our images are significantly higher resolution than many existing vision datasets ( _e.g_., COCO \\[ [66])\\] images are \u223csimilar-to\\\\scriptstyle\\\\sim480\u00d7{\\\\times}640 pixels). Note that most models today operate on much lower resolution inputs. Faces and vehicle license plates have been blurred in the released images.\n\n#### Masks\n\n. Our data engine produced 1.1B masks, 99.1% of which were generated fully automatically. Therefore, the quality of the automatic masks is centrally important. We compare them directly to professional annotations and look at how various mask properties compare to prominent segmentation datasets. Our main conclusion, as borne out in the analysis below and the experiments in \u00a7 [7]Zero-Shot Transfer Experiments \u2023 Segment Anything\"), is that our automatic masks are high quality and effective for training models. Motivated by these findings, SA-1B _only includes automatically generated masks._\n\n#### Mask quality.\n\nTo estimate mask quality, we randomly sampled 500 images (\u223csimilar-to\\\\scriptstyle\\\\sim50k masks) and asked our professional annotators to improve the quality of all masks in these images. Annotators did so using our model and pixel-precise \u201cbrush\u201d and \u201ceraser\u201d editing tools. This procedure resulted in pairs of automatically predicted and professionally corrected masks. We computed IoU between each pair and found that 94% of pairs have greater than 90% IoU (and 97% of pairs have greater than 75% IoU). For comparison, prior work estimates inter-annotator consistency at 85-91% IoU \\[ [44]), [60])\\]. Our experiments in \u00a7 [7]Zero-Shot Transfer Experiments \u2023 Segment Anything\") confirm by human ratings that mask quality is high relative to a variety of datasets and that training our model on automatic masks is nearly as good as using all masks produced by the data engine.\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 7: Estimated geographic distribution of SA-1B images. Most of the world\u2019s countries have more than 1000 images in SA-1B, and the three countries with the most images are from different parts of the world.\n\n#### Mask properties.\n\nIn Fig. [5]Figure 5 \u2023 Fully automatic stage. \u2023 4 Segment Anything Data Engine \u2023 Segment Anything\") we plot the spatial distribution of object centers in SA-1B compared to the largest existing segmentation datasets. Common photographer biases are present in all datasets. We observe that SA-1B has greater coverage of image corners compared to LVIS v1 \\[ [44])\\] and ADE20K \\[ [117])\\], the two most similarly distributed datasets, while COCO \\[ [66])\\] and Open Images V5 \\[ [60])\\] have a more prominent center bias. In Fig. [6]Figure 6 \u2023 Fully automatic stage. \u2023 4 Segment Anything Data Engine \u2023 Segment Anything\") (legend) we compare these datasets by size. SA-1B has 11\u00d7{\\\\times} more images and 400\u00d7{\\\\times} more masks than the second largest, Open Images. On average, it has 36\u00d7{\\\\times} more masks per image than Open Images. The closest dataset in this respect, ADE20K, still has 3.5\u00d7{\\\\times} fewer masks per image. Fig. [6]Figure 6 \u2023 Fully automatic stage. \u2023 4 Segment Anything Data Engine \u2023 Segment Anything\") (left) plots the masks-per-image distribution. Next, we look at image-relative mask size (square root of the mask area divided by image area) in Fig. [6]Figure 6 \u2023 Fully automatic stage. \u2023 4 Segment Anything Data Engine \u2023 Segment Anything\") (middle). As expected, since our dataset has more masks per image, it also tends to include a greater percentage of small and medium relative-size masks. Finally, to analyze shape complexity, we look at mask concavity (1 minus mask area divided by area of mask\u2019s convex hull) in Fig. [6]Figure 6 \u2023 Fully automatic stage. \u2023 4 Segment Anything Data Engine \u2023 Segment Anything\") (right). Since shape complexity is correlated with mask size, we control for the datasets\u2019 mask size distributions by first performing stratified sampling from binned mask sizes. We observe that the concavity distribution of our masks is broadly similar to that of other datasets.\n\n## 6 Segment Anything RAI Analysis\nWe next perform a Responsible AI (RAI) analysis of our work by investigating potential fairness concerns and biases when using SA-1B and SAM. We focus on the geographic and income distribution of SA-1B and fairness of SAM across protected attributes of people. We also provide dataset, data annotation, and model cards in \u00a7 [F]Appendix F Dataset, Annotation, and Model Cards \u2023 Segment Anything\").\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n|  |  | SA-1B | % images |\n|  | \\# countries | #imgs | #masks | SA-1B | COCO | O.I. |\n| Africa | 54 | 300k | 28M | 2.8% | 3.0% | 1.7% |\n| Asia & Oceania | 70 | 3.9M | 423M | 36.2% | 11.4% | 14.3% |\n| Europe | 47 | 5.4M | 540M | 49.8% | 34.2% | 36.2% |\n| Latin America & Carib. | 42 | 380k | 36M | 3.5% | 3.1% | 5.0% |\n| North America | 4 | 830k | 80M | 7.7% | 48.3% | 42.8% |\n| high income countries | 81 | 5.8M | 598M | 54.0% | 89.1% | 87.5% |\n| middle income countries | 108 | 4.9M | 499M | 45.0% | 10.5% | 12.0% |\n| low income countries | 28 | 100k | 9.4M | 0.9% | 0.4% | 0.5% |\n\nTable 1: Comparison of geographic and income representation. SA-1B has higher representation in Europe and Asia & Oceania as well as middle income countries. Images from Africa, Latin America & Caribbean, as well as low income countries, are underrepresented in all datasets.\n\n#### Geographic and income representation.\n\nWe infer the country images were photographed in using standard methods (see \u00a7 [C]Appendix C RAI Additional Details \u2023 Segment Anything\")). In Fig. [7]Figure 7 \u2023 Mask quality. \u2023 5 Segment Anything Dataset \u2023 Segment Anything\") we visualize the per-country image counts in SA-1B (left) and the 50 countries with the most images (right). We note that the top-three countries are from different parts of the world. Next, in Table [1]Table 1 \u2023 6 Segment Anything RAI Analysis \u2023 Segment Anything\") we compare the geographic and income representation of SA-1B, COCO \\[ [66])\\], and Open Images \\[ [60])\\]. SA-1B has a substantially higher percentage of images in Europe and Asia & Oceania as well as in middle income countries. All datasets underrepresent Africa as well as low income countries. We note that in SA-1B, all regions, including Africa, have at least 28 million masks, 10\u00d7{\\\\times} more than the _total_ number of masks of any previous dataset. Finally, we observe that the average number of masks per image (not shown) is fairly consistent across region and income (94-108 per image).\n\n#### Fairness in segmenting people.\n\nWe investigate potential fairness concerns across perceived gender presentation, perceived age group, and perceived skin tone by measuring the performance discrepancy of SAM between groups. We use the More Inclusive Annotations for People (MIAP) \\[ [87])\\] dataset for gender presentation and age and a proprietary dataset for skin tone (see \u00a7 [C]Appendix C RAI Additional Details \u2023 Segment Anything\")). Our evaluation uses simulated interactive segmentation with random sampling of 1 and 3 points (see \u00a7 [D]Appendix D Experiment Implementation Details \u2023 Segment Anything\")). Table [2]Table 2 \u2023 Fairness in segmenting people. \u2023 6 Segment Anything RAI Analysis \u2023 Segment Anything\") (top left) shows results for perceived gender presentation. We note that females have been shown to be underrepresented in detection and segmentation datasets \\[ [115])\\], but observe that SAM performs similarly across groups. We repeat the analysis for perceived age in Table [2]Table 2 \u2023 Fairness in segmenting people. \u2023 6 Segment Anything RAI Analysis \u2023 Segment Anything\") (bottom left), noting that those who are perceived to be younger and older have been shown to be underrepresented in large-scale datasets \\[ [110])\\]. SAM performs best on those who are perceived older (although the confidence interval is large). Finally, we repeat the analysis for perceived skin tone in Table [2]Table 2 \u2023 Fairness in segmenting people. \u2023 6 Segment Anything RAI Analysis \u2023 Segment Anything\") (right), noting that those with lighter apparent skin tones have been shown to be overrepresented and those with darker skin tones underrepresented in large-scale datasets \\[ [110])\\]. As MIAP does not contain perceived skin tone annotations, we use a proprietary dataset that contains annotations for the perceived Fitzpatrick skin type \\[ [36])\\], which ranges from 1 (lightest skin tone) to 6 (darkest skin tone). While the means vary somewhat, we do not find a significant difference across groups. We believe our findings stem from the nature of the task, and acknowledge biases may arise when SAM is used as a component in larger systems. Finally, in \u00a7 [C]Appendix C RAI Additional Details \u2023 Segment Anything\") we extend the analysis to segmenting clothing where we find an indication of bias across perceived gender presentation.\n\n|     |     |     |\n| --- | --- | --- |\n|  | mIoU at |\n|  | 1 point | 3 points |\n| _perceived gender presentation_ |\n| feminine | 54.4\u00b1plus-or-minus\\\\pm1.7 | 90.4\u00b1plus-or-minus\\\\pm0.6 |\n| masculine | 55.7\u00b1plus-or-minus\\\\pm1.7 | 90.1\u00b1plus-or-minus\\\\pm0.6 |\n| _perceived age group_ |\n| older | 62.9\u00b1plus-or-minus\\\\pm6.7 | 92.6\u00b1plus-or-minus\\\\pm1.3 |\n| middle | 54.5\u00b1plus-or-minus\\\\pm1.3 | 90.2\u00b1plus-or-minus\\\\pm0.5 |\n| young | 54.2\u00b1plus-or-minus\\\\pm2.2 | 91.2\u00b1plus-or-minus\\\\pm0.7 |\n\n|     |     |     |\n| --- | --- | --- |\n|  | mIoU at |\n|  | 1 point | 3 points |\n| _perceived skin tone_ |\n| 1 | 52.9\u00b1plus-or-minus\\\\pm2.2 | 91.0\u00b1plus-or-minus\\\\pm0.9 |\n| 2 | 51.5\u00b1plus-or-minus\\\\pm1.4 | 91.1\u00b1plus-or-minus\\\\pm0.5 |\n| 3 | 52.2\u00b1plus-or-minus\\\\pm1.9 | 91.4\u00b1plus-or-minus\\\\pm0.7 |\n| 4 | 51.5\u00b1plus-or-minus\\\\pm2.7 | 91.7\u00b1plus-or-minus\\\\pm1.0 |\n| 5 | 52.4\u00b1plus-or-minus\\\\pm4.2 | 92.5\u00b1plus-or-minus\\\\pm1.4 |\n| 6 | 56.7\u00b1plus-or-minus\\\\pm6.3 | 91.2\u00b1plus-or-minus\\\\pm2.4 |\n\nTable 2: SAM\u2019s performance segmenting people across perceived gender presentation, age group, and skin tone. 95% confidence intervals are shown. Within each grouping, all confidence intervals overlap except older _vs_. middle.\n\n## 7 Zero-Shot Transfer Experiments\nIn this section, we present _zero-shot transfer_ experiments with SAM, the Segment Anything Model. We consider five tasks, four of which differ significantly from the promptable segmentation task used to train SAM. These experiments evaluate SAM on datasets and tasks that were not seen during training (our usage of \u201czero-shot transfer\u201d follows its usage in CLIP \\[ [82])\\]). The datasets may include novel image distributions, such as underwater or ego-centric images ( _e.g_. Fig. [8]Figure 8 \u2023 Task. \u2023 7.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\")) that, to our knowledge, do not appear in SA-1B.\n\nOur experiments begin by testing the core goal of promptable segmentation: producing a valid mask from any prompt. We emphasize the challenging scenario of a _single_ foreground point prompt, since it is more likely to be ambiguous than other more specific prompts. Next, we present a sequence of experiments that traverse low, mid, and high-level image understanding and roughly parallel the historical development of the field. Specifically, we prompt SAM to (1) perform edge detection, (2) segment everything, _i.e_. object proposal generation, (3) segment detected objects, _i.e_. instance segmentation, and (4), as a proof-of-concept, to segment objects from free-form text. These four tasks differ significantly from the promptable segmentation task that SAM was trained on and are implemented via prompt engineering. Our experiments conclude with an ablation study.\n\n#### Implementation.\n\nUnless otherwise specified: (1) SAM uses an MAE \\[ [47])\\] pre-trained ViT-H \\[ [33])\\] image encoder and (2) SAM was trained on SA-1B, noting that this dataset includes only automatically generated masks from the final stage of our data engine. For all other model and training details, such as hyperparameters, refer to \u00a7 [A]Appendix A Segment Anything Model and Task Details \u2023 Segment Anything\").\n\n### 7.1 Zero-Shot Single Point Valid Mask Evaluation\n\n#### Task.\n\nWe evaluate segmenting an object from a _single_ foreground point. This task is ill-posed as one point can refer to multiple objects. Ground truth masks in most datasets do not enumerate _all_ possible masks, which can make automatic metrics unreliable. Therefore, we supplement the standard mIoU metric ( _i.e_., the mean of all IoUs between predicted and ground truth masks) with a human study in which annotators rate mask quality from 1 (nonsense) to 10 (pixel-perfect). See \u00a7 [D.1]D.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\"), \u00a7 [E]Appendix E Human Study Experimental Design \u2023 Segment Anything\"), and \u00a7 [G]Appendix G Annotation Guidelines \u2023 Segment Anything\") for additional details.\n\nBy default, we sample points from the \u201ccenter\u201d of ground truth masks (at a maximal value of the mask\u2019s interior distance transform), following the standard evaluation protocol in interactive segmentation \\[ [92])\\]. Since SAM is capable of predicting multiple masks, we evaluate only the model\u2019s most confident mask by default. The baselines are all single-mask methods. We compare mainly to RITM \\[ [92])\\], a strong interactive segmenter that performs best on our benchmark compared to other strong baselines \\[ [67]), [18])\\].\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| ADE20K \\[ [117])\\] | BBBC038v1 \\[ [12])\\] | Cityscapes \\[ [25])\\] | DOORS \\[ [80])\\] | DRAM \\[ [24])\\] | EgoHOS \\[ [113])\\] | GTEA \\[ [34]), [63])\\] | Hypersim \\[ [86])\\] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| IBD \\[ [17])\\] | iShape \\[ [111])\\] | LVIS \\[ [44])\\] | NDD20 \\[ [100])\\] | NDISPark \\[ [22]), [23])\\] | OVIS \\[ [81])\\] | PPDLS \\[ [74])\\] | Plittersdorf \\[ [46])\\] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| STREETS \\[ [91])\\] | TimberSeg \\[ [38])\\] | TrashCan \\[ [52])\\] | VISOR \\[ [28]), [27])\\] | WoodScape \\[ [112])\\] | PIDRay \\[ [104])\\] | ZeroWaste-f \\[ [6])\\] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\nFigure 8: Samples from the 23 diverse segmentation datasets used to evaluate SAM\u2019s zero-shot transfer capabilities.\n\n#### Datasets.\n\nWe use a newly compiled suite of 23 datasets with diverse image distributions. Fig. [8]Figure 8 \u2023 Task. \u2023 7.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") lists the datasets and shows a sample from each one (see appendix Table [7]Table 7 \u2023 D.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\") for more details). We use all 23 datasets for mIoU evaluation. For the human study, we use the subset listed in Fig. [9]Figure 9 \u2023 Datasets. \u2023 7.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") b (due to the resource requirements of such studies). This subset includes both datasets for which SAM outperforms and underperforms RITM according to automatic metrics.\n\n|     |\n| --- |\n| -200+20+40IoU delta at 1 center pointGTEA \\[ [34]), [63])\\]TrashCan \\[ [52])\\]DRAM \\[ [24])\\]PIDRay \\[ [104])\\]Cityscapes \\[ [25])\\]WoodScape \\[ [112])\\]IBD \\[ [17])\\]EgoHOS \\[ [113])\\]Plittersdorf \\[ [46])\\]VISOR \\[ [28]), [27])\\]NDISPark \\[ [22]), [23])\\]Hypersim \\[ [86])\\]OVIS \\[ [81])\\]ADE20K \\[ [117])\\]iShape \\[ [111])\\]ZeroWaste-f \\[ [6])\\]STREETS \\[ [91])\\]LVIS \\[ [44])\\]NDD20 \\[ [100])\\]TimberSeg \\[ [38])\\]DOORS \\[ [80])\\]BBBC038v1 \\[ [12])\\]PPDLS \\[ [74])\\]-21.4-15.0-6.5-5.8-2.0-0.6-0.3+0.8+1.5+1.8+2.7+6.1+7.0+7.8+8.8+9.1+17.3+18.5+21.1+28.9+41.1+44.7+46.9 |\n| (a) SAM _vs_. RITM \\[ [92])\\] on 23 datasets |\n\n|     |     |\n| --- | --- |\n| ![Refer to caption] |\n| (b) Mask quality ratings by human annotators |\n| |     |     |\n| --- | --- |\n| ![Refer to caption] | ![Refer to caption] |\n| (c) Center points (default) | (d) Random points | |\n\nFigure 9: Point to mask evaluation on 23 datasets. (a) Mean IoU of SAM and the strongest single point segmenter, RITM \\[ [92])\\]. Due to ambiguity, a single mask may not match ground truth; circles show \u201coracle\u201d results of the most relevant of SAM\u2019s 3 predictions. (b) Per-dataset comparison of mask quality ratings by annotators from 1 (worst) to 10 (best). All methods use the ground truth mask center as the prompt. (c, d) mIoU with varying number of points. SAM significantly outperforms prior interactive segmenters with 1 point and is on par with more points. Low absolute mIoU at 1 point is the result of ambiguity.\n\n#### Results.\n\nFirst, we look at automatic evaluation on the full suite of 23 datasets using mIoU. We compare per-dataset results in Fig. [9]Figure 9 \u2023 Datasets. \u2023 7.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") a against RITM. SAM yields higher results on 16 of the 23 datasets, by as much as \u223csimilar-to\\\\scriptstyle\\\\sim47 IoU. We also present an \u201coracle\u201d result, in which the most relevant of SAM\u2019s 3 masks is selected by comparing them to the ground truth, rather than selecting the most confident mask. This reveals the impact of ambiguity on automatic evaluation. In particular, with the oracle to perform ambiguity resolution, SAM outperforms RITM on _all_ datasets.\n\nResults of the human study are presented in Fig. [9]Figure 9 \u2023 Datasets. \u2023 7.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") b. Error bars are 95% confidence intervals for mean mask ratings (all differences are significant; see \u00a7 [E]Appendix E Human Study Experimental Design \u2023 Segment Anything\") for details). We observe that the annotators consistently rate the quality of SAM\u2019s masks substantially higher than the strongest baseline, RITM. An ablated, \u201cambiguity-unaware\u201d version of SAM with a single output mask has consistently lower ratings, though still higher than RITM. SAM\u2019s mean ratings fall between 7 and 9, which corresponds to the qualitative rating guideline: \u201c _A high score (7-9): The object is identifiable and errors are small and rare (e.g., missing a small, heavily obscured disconnected component, \u2026)._\u201d These results indicate that SAM has learned to segment valid masks from a single point. Note that for datasets like DRAM and IBD, where SAM is worse on automatic metrics, _it receives consistently higher ratings in the human study_.\n\nFig. [9]Figure 9 \u2023 Datasets. \u2023 7.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") c shows additional baselines, SimpleClick \\[ [67])\\] and FocalClick \\[ [18])\\], which obtain lower single point performance than RITM and SAM. As the number of points increases from 1 to 9, we observe that the gap between methods decreases. This is expected as the task becomes easier; also, SAM is not optimized for the very high IoU regime. Finally, in Fig. [9]Figure 9 \u2023 Datasets. \u2023 7.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") d we replace the default center point sampling with random point sampling. We observe that the gap between SAM and the baselines grows and SAM is able to achieve comparable results under either sampling method.\n\n### 7.2 Zero-Shot Edge Detection\n\n#### Approach.\n\nWe evaluate SAM on the classic low-level task of edge detection using BSDS500 \\[ [72]), [3])\\]. We use a simplified version of our automatic mask generation pipeline. Specifically, we prompt SAM with a 16\u00d7{\\\\times}16 regular grid of foreground points resulting in 768 predicted masks (3 per point). Redundant masks are removed by NMS. Then, edge maps are computed using Sobel filtering of unthresholded mask probability maps and standard lightweight postprocessing, including edge NMS (see \u00a7 [D.2]D.2 Zero-Shot Edge Detection \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\") for details).\n\n|     |     |     |\n| --- | --- | --- |\n| image | ground truth | SAM |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\nFigure 10: Zero-shot edge prediction on BSDS500. SAM was not trained to predict edge maps nor did it have access to BSDS images or annotations during training.\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| method | year | ODS | OIS | AP | R50 |\n| HED \\[ [108])\\] | 2015 | .788 | .808 | .840 | .923 |\n| EDETR \\[ [79])\\] | 2022 | .840 | .858 | .896 | .930 |\n| _zero-shot transfer methods:_ |\n| Sobel filter | 1968 | .539 | - | - | - |\n| Canny \\[ [13])\\] | 1986 | .600 | .640 | .580 | - |\n| Felz-Hutt \\[ [35])\\] | 2004 | .610 | .640 | .560 | - |\n| SAM | 2023 | .768 | .786 | .794 | .928 |\n\nTable 3: Zero-shot transfer to edge detection on BSDS500.\n\n#### Results.\n\nWe visualize representative edge maps in Fig. [10]Figure 10 \u2023 Approach. \u2023 7.2 Zero-Shot Edge Detection \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") (see Fig. [15]Figure 15 \u2023 Single point ambiguity and oracle evaluation. \u2023 D.1 Zero-Shot Single Point Valid Mask Evaluation \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\") for more). Qualitatively, we observe that even though SAM was not trained for edge detection, it produces reasonable edge maps. Compared to the ground truth, SAM predicts more edges, including sensible ones that are not annotated in BSDS500. This bias is reflected quantitatively in Table [3]Table 3 \u2023 Approach. \u2023 7.2 Zero-Shot Edge Detection \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\"): recall at 50% precision (R50) is high, at the cost of precision. SAM naturally lags behind state-of-the-art methods that learn the biases of BSDS500, _i.e_., which edges to suppress. Nevertheless, SAM performs well compared to pioneering deep learning methods such as HED \\[ [108])\\] (also trained on BSDS500) and significantly better than prior, though admittedly outdated, zero-shot transfer methods.\n\n### 7.3 Zero-Shot Object Proposals\n\n#### Approach.\n\nNext, we evaluate SAM on the mid-level task of object proposal generation \\[ [2]), [102])\\]. This task has played an important role in object detection research, serving as an intermediate step in pioneering systems ( _e.g_., \\[ [102]), [41]), [84])\\]). To generate object proposals, we run a slightly modified version of our automatic mask generation pipeline and output the masks as proposals (see \u00a7 [D.3]D.3 Zero-Shot Object Proposals \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\") for details).\n\nWe compute the standard average recall (AR) metric on LVIS v1 \\[ [44])\\]. We focus on LVIS because its large number of categories presents a challenging test. We compare to a _strong_ baseline implemented as a ViTDet \\[ [62])\\] detector (with cascade Mask R-CNN \\[ [48]), [11])\\] ViT-H). We note that this \u201cbaseline\u201d corresponds to the \u201cDetector Masquerading as Proposal generator\u201d (DMP) method \\[ [16])\\] that was shown to game AR, making it a truly demanding comparison.\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n|  | mask AR@1000 |\n| method | all | small | med. | large | freq. | com. | rare |\n| ViTDet-H \\[ [62])\\] | 63.0 | 51.7 | 80.8 | 87.0 | 63.1 | 63.3 | 58.3 |\n| _zero-shot transfer methods:_ |\n| SAM \u2013 single out. | 54.9 | 42.8 | 76.7 | 74.4 | 54.7 | 59.8 | 62.0 |\n| SAM | 59.3 | 45.5 | 81.6 | 86.9 | 59.1 | 63.9 | 65.8 |\n\nTable 4: Object proposal generation on LVIS v1. SAM is applied zero-shot, _i.e_. it was not trained for object proposal generation nor did it access LVIS images or annotations.\n\n#### Results.\n\nIn Table [4]Table 4 \u2023 Approach. \u2023 7.3 Zero-Shot Object Proposals \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") we see unsurprisingly that using the detections from ViTDet-H as object proposals ( _i.e_., the DMP method \\[ [16])\\] that games AR) performs the best overall. However, SAM does remarkably well on several metrics. Notably, it outperforms ViTDet-H on medium and large objects, as well as rare and common objects. In fact, SAM only underperforms ViTDet-H on small objects and frequent objects, where ViTDet-H can easily learn LVIS-specific annotation biases since it was trained on LVIS, unlike SAM. We also compare against an ablated ambiguity-unaware version of SAM (\u201csingle out.\u201d), which performs significantly worse than SAM on all AR metrics.\n\n### 7.4 Zero-Shot Instance Segmentation\n\n#### Approach.\n\nMoving to higher-level vision, we use SAM as the segmentation module of an instance segmenter. The implementation is simple: we run a object detector (the ViTDet used before) and prompt SAM with its output boxes. This illustrates _composing_ SAM in a larger system.\n\n#### Results.\n\nWe compare the masks predicted by SAM and ViTDet on COCO and LVIS in Table [5]Table 5 \u2023 Results. \u2023 7.4 Zero-Shot Instance Segmentation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\"). Looking at the mask AP metric we observe gaps on both datasets, where SAM is reasonably close, though certainly behind ViTDet. By visualizing outputs, we observed that SAM masks are often qualitatively better than those of ViTDet, with crisper boundaries (see \u00a7 [D.4]D.4 Zero-Shot Instance Segmentation \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\") and Fig. [16]Figure 16 \u2023 Method. \u2023 D.3 Zero-Shot Object Proposals \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\")). To investigate this observation, we conducted an additional human study asking annotators to rate the ViTDet masks and SAM masks on the 1 to 10 quality scale used before. In Fig. [11]Figure 11 \u2023 Results. \u2023 7.4 Zero-Shot Instance Segmentation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") we observe that SAM consistently outperforms ViTDet in the human study.\n\n|     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|  | COCO \\[ [66])\\] | LVIS v1 \\[ [44])\\] |\n| method | AP | APS | APM | APL | AP | APS | APM | APL |\n| ViTDet-H \\[ [62])\\] | 51.0 | 32.0 | 54.3 | 68.9 | 46.6 | 35.0 | 58.0 | 66.3 |\n| _zero-shot transfer methods (segmentation module only):_ |\n| SAM | 46.5 | 30.8 | 51.0 | 61.7 | 44.7 | 32.5 | 57.6 | 65.5 |\n\nTable 5: Instance segmentation results. SAM is prompted with ViTDet boxes to do zero-shot segmentation. The fully-supervised ViTDet outperforms SAM, but the gap shrinks on the higher-quality LVIS masks. Interestingly, SAM outperforms ViTDet according to human ratings (see Fig. [11]Figure 11 \u2023 Results. \u2023 7.4 Zero-Shot Instance Segmentation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\")).![Refer to caption]Figure 11: Mask quality rating distribution from our human study for ViTDet and SAM, both applied to LVIS ground truth boxes. We also report LVIS and COCO ground truth quality. The legend shows rating means and 95% confidence intervals. Despite its lower AP (Table [5]Table 5 \u2023 Results. \u2023 7.4 Zero-Shot Instance Segmentation \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\")), SAM has higher ratings than ViTDet, suggesting that ViTDet exploits biases in the COCO and LVIS training data.\n\nWe hypothesize that on COCO, where the mask AP gap is larger and the ground truth quality is relatively low (as borne out by the human study), ViTDet learns the specific biases of COCO masks. SAM, being a zero-shot method, is unable to exploit these (generally undesirable) biases. The LVIS dataset has higher quality ground truth, but there are still specific idiosyncrasies ( _e.g_., masks do not contain holes, they are simple polygons by construction) and biases for modal _vs_. amodal masks. Again, SAM is not trained to learn these biases, while ViTDet can exploit them.\n\n### 7.5 Zero-Shot Text-to-Mask\n\n#### Approach.\n\nFinally, we consider an even higher-level task: segmenting objects from free-form text. This experiment is a proof-of-concept of SAM\u2019s ability to process text prompts. While we used the exact same SAM in all prior experiments, for this one SAM\u2019s training procedure is modified to make it text-aware, but in a way that does not require new text annotations. Specifically, for each manually collected mask with area larger than 1002superscript1002\\\\textrm{100}^{\\\\textrm{2}} we extract the CLIP _image_ embedding. Then, during training, we prompt SAM with the extracted CLIP image embeddings as its first interaction. The key observation here is that because CLIP\u2019s _image_ embeddings are trained to align with its _text_ embeddings, we can train with image embeddings, but use text embeddings for inference. That is, at inference time we run text through CLIP\u2019s text encoder and then give the resulting text embedding as a prompt to SAM (see \u00a7 [D.5]D.5 Zero-Shot Text-to-Mask \u2023 Appendix D Experiment Implementation Details \u2023 Segment Anything\") for details).\n\n|     |     |\n| --- | --- |\n| ![Refer to caption]\u2713 | ![Refer to caption]\u2713 |\n| ![Refer to caption]\u2717 | ![Refer to caption]\u2713 |\n| ![Refer to caption]\u2717 | ![Refer to caption]\u2713 |\n\nFigure 12: Zero-shot text-to-mask. SAM can work with simple and nuanced text prompts. When SAM fails to make a correct prediction, an additional point prompt can help.\n\n#### Results.\n\nWe show qualitative results in Fig. [12]Figure 12 \u2023 Approach. \u2023 7.5 Zero-Shot Text-to-Mask \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\"). SAM can segment objects based on simple text prompts like \u201ca wheel\u201d as well as phrases like \u201cbeaver tooth grille\u201d. When SAM fails to pick the right object from a text prompt only, an additional point often fixes the prediction, similar to \\[ [31])\\].\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 13: Ablation studies of our data engine stages, image encoder scaling, and training data scaling. (Left) Each data engine stage leads to improvements on our 23 dataset suite, and training with only the automatic data (our default) yields similar results to using data from all three stages. (Middle) SAM trained with \u223csimilar-to\\\\scriptstyle\\\\sim10% of SA-1B and full SA-1B is comparable. We train with all 11M images by default, but using 1M images is a reasonable practical setting. (Right) Scaling SAM\u2019s image encoder shows meaningful, yet saturating gains. Nevertheless, smaller image encoders may be preferred in certain settings.\n\n### 7.6 Ablations\n\nWe perform several ablations on our 23 dataset suite with the single center point prompt protocol. Recall that a single point may be ambiguous and that ambiguity may not be represented in the ground truth, which contains only a single mask per point. Since SAM is operating in a zero-shot transfer setting there can be systematic biases between SAM\u2019s top-ranked mask _vs_. the masks resulting from data annotation guidelines. We therefore additionally report the best mask with respect to the ground truth (\u201coracle\u201d).\n\nFig. [13]Figure 13 \u2023 Results. \u2023 7.5 Zero-Shot Text-to-Mask \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") (left) plots SAM\u2019s performance when trained on cumulative data from the data engine stages. We observe that each stage increases mIoU. When training with all three stages, the automatic masks vastly outnumber the manual and semi-automatic masks. To address this, we found that oversampling the manual and semi-automatic masks during training by 10\u00d7{\\\\times} gave best results. This setup complicates training. We therefore tested a fourth setup that uses only the automatically generated masks. With this data, SAM performs only marginally lower than using all data (\u223csimilar-to\\\\scriptstyle\\\\sim0.5 mIoU). Therefore, by default we use only the automatically generated masks to simplify the training setup.\n\nIn Fig. [13]Figure 13 \u2023 Results. \u2023 7.5 Zero-Shot Text-to-Mask \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") (middle) we look at the impact of data volume. The full SA-1B contains 11M images, which we uniformly subsample to 1M and 0.1M for this ablation. At 0.1M images, we observe a large mIoU decline under all settings. However, with 1M images, about 10% of the full dataset, we observe results comparable to using the full dataset. This data regime, which still includes approximately 100M masks, may be a practical setting for many use cases.\n\nFinally, Fig. [13]Figure 13 \u2023 Results. \u2023 7.5 Zero-Shot Text-to-Mask \u2023 7 Zero-Shot Transfer Experiments \u2023 Segment Anything\") (right) shows results with ViT-B, ViT-L, and ViT-H image encoders. ViT-H improves substantially over ViT-B, but has only marginal gains over ViT-L. Further image encoder scaling does not appear fruitful at this time.\n\n## 8 Discussion\n#### Foundation models.\n\nPre-trained models have been adapted to downstream tasks since the early days of machine learning \\[ [99])\\]. This paradigm has become increasingly important in recent years with a growing emphasis on scale, and such models have recently been (re-)branded as \u201cfoundation models\u201d: _i.e_. models that are \u201ctrained on broad data at scale and are adaptable to a wide range of downstream tasks\u201d \\[ [8])\\]. Our work correlates well with this definition, though we note that a foundation model for image segmentation is an inherently limited scope, since it represents an important, yet fractional, subset of computer vision. We also contrast one aspect of our approach with \\[ [8])\\], which emphasizes the role of _self-supervised_ learning in foundation models. While our model is initialized with a self-supervised technique (MAE \\[ [47])\\]), the vast majority of its capabilities come from large-scale _supervised_ training. In cases where data engines can scale available annotations, like ours, supervised training provides an effective solution.\n\n#### Compositionality.\n\nPre-trained models can power new capabilities even beyond ones imagined at the moment of training. One prominent example is how CLIP \\[ [82])\\] is used as a _component_ in larger systems, such as DALL\u22c5\u22c5\\\\cdotE \\[ [83])\\]. Our goal is to make this kind of composition straightforward with SAM. We aim to achieve this by requiring SAM to predict a valid mask for a wide range of segmentation prompts. The effect is to create a reliable interface between SAM and other components. For example, MCC \\[ [106])\\] can easily use SAM to segment an object of interest and achieve strong generalization to unseen objects for 3D reconstruction from a single RGB-D image. In another example, SAM can be prompted with gaze points detected by a wearable device, enabling new applications. Thanks to SAM\u2019s ability to generalize to new domains like ego-centric images, such systems work without need for additional training.\n\n#### Limitations.\n\nWhile SAM performs well in general, it is not perfect. It can miss fine structures, hallucinates small disconnected components at times, and does not produce boundaries as crisply as more computationally intensive methods that \u201czoom-in\u201d, _e.g_.\\[ [18])\\]. In general, we expect dedicated interactive segmentation methods to outperform SAM when many points are provided, _e.g_.\\[ [67])\\]. Unlike these methods, SAM is designed for generality and breadth of use rather than high IoU interactive segmentation. Moreover, SAM can process prompts in real-time, but nevertheless SAM\u2019s overall performance is not real-time when using a heavy image encoder. Our foray into the text-to-mask task is exploratory and not entirely robust, although we believe it can be improved with more effort. While SAM can perform many tasks, it is unclear how to design simple prompts that implement semantic and panoptic segmentation. Finally, there are domain-specific tools, such as \\[ [7])\\], that we expect to outperform SAM in their respective domains.\n\n#### Conclusion.\n\nThe Segment Anything project is an attempt to lift image segmentation into the era of foundation models. Our principal contributions are a new task (promptable segmentation), model (SAM), and dataset (SA-1B) that make this leap possible. Whether SAM achieves the status of a foundation model remains to be seen by how it is used in the community, but regardless we expect the perspective of this work, the release of over 1B masks, and our promptable segmentation model will help pave the path ahead.\n\n#### Acknowledgments.\n\nWe would like to thank Aaron Adcock and Jitendra Malik for helpful discussion. We thank Vaibhav Aggarwal and Yanghao Li for help with scaling the model. We thank Cheng-Yang Fu, Jiabo Hu, and Robert Kuo for help with data annotation platform. We thank Allen Goodman and Bram Wasti for help in optimizing web-version of our model. Finally, we thank Morteza Behrooz, Ashley Gabriel, Ahuva Goldstand, Sumanth Gurram, Somya Jain, Devansh Kukreja, Joshua Lane, Lilian Luong, Mallika Malhotra, William Ngan, Omkar Parkhi, Nikhil Raina, Dirk Rowe, Neil Sejoor, Vanessa Stark, Bala Varadarajan, and Zachary Winstrom for their help in making the demo, dataset viewer, and other assets and tooling.\n</Content></Candidate>\n\n</References>\nRemember to output the index of the selected reference enclosed within <answer> and </answer>.",
  "reference_id": "bib.bib21",
  "label_id": 3,
  "mask_all": false,
  "citation": {
    "section_name": "4 Experiments",
    "citation_id": "bib.bib21",
    "citation_text": "Kirillov et al., [2023]",
    "citation_type": "method",
    "start_pos": 12397,
    "end_pos": 12420,
    "nearest_citations": [
      "bib.bib3",
      "bib.bib14"
    ]
  },
  "candidates": [
    {
      "id": "bib.bib4",
      "title": "Zero-shot robotic manipulation with pretrained image-editing diffusion models.",
      "token_count": 13307
    },
    {
      "id": "bib.bib12",
      "title": "Denoising diffusion probabilistic models.",
      "token_count": 20005
    },
    {
      "id": "bib.bib5",
      "title": "Language models are few-shot learners.",
      "token_count": 35902
    },
    {
      "id": "bib.bib21",
      "title": "Segment anything.",
      "token_count": 15287
    }
  ],
  "additional_fields": {
    "paper_field": "full",
    "mask_all": false,
    "candidate_fields": [
      "title",
      "abstract",
      "sections"
    ],
    "sample": "random",
    "max_selected_references_per_paper": 5
  },
  "id": 18
}