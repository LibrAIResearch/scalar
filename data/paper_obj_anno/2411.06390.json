{
  "title": "SplatFormer: Point Transformer for Robust 3D Gaussian Splatting",
  "abstract": "3D Gaussian Splatting (3DGS) has recently transformed photorealistic\nreconstruction, achieving high visual fidelity and real-time performance.\nHowever, rendering quality significantly deteriorates when test views deviate\nfrom the camera angles used during training, posing a major challenge for\napplications in immersive free-viewpoint rendering and navigation. In this\nwork, we conduct a comprehensive evaluation of 3DGS and related novel view\nsynthesis methods under out-of-distribution (OOD) test camera scenarios. By\ncreating diverse test cases with synthetic and real-world datasets, we\ndemonstrate that most existing methods, including those incorporating various\nregularization techniques and data-driven priors, struggle to generalize\neffectively to OOD views. To address this limitation, we introduce SplatFormer,\nthe first point transformer model specifically designed to operate on Gaussian\nsplats. SplatFormer takes as input an initial 3DGS set optimized under limited\ntraining views and refines it in a single forward pass, effectively removing\npotential artifacts in OOD test views. To our knowledge, this is the first\nsuccessful application of point transformers directly on 3DGS sets, surpassing\nthe limitations of previous multi-scene training methods, which could handle\nonly a restricted number of input views during inference. Our model\nsignificantly improves rendering quality under extreme novel views, achieving\nstate-of-the-art performance in these challenging scenarios and outperforming\nvarious 3DGS regularization techniques, multi-scene models tailored for sparse\nview synthesis, and diffusion-based frameworks.",
  "paper_id": "http://arxiv.org/abs/2411.06390v2",
  "markdown_content": "# SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\n\nYutong Chen1, Marko Mihajlovic1, Xiyi Chen2, Yiming Wang1,\n\nSergey Prokudin1,3, Siyu Tang1\n\nETH Zurich1; University of Maryland, College Park2;\n\nROCS, University Hospital Balgrist, University of Zürich 3\n\n###### Abstract\n\n3D Gaussian Splatting (3DGS) has recently transformed photorealistic reconstruction, achieving high visual fidelity and real-time performance. However, rendering quality significantly deteriorates when test views deviate from the camera angles used during training, posing a major challenge for applications in immersive free-viewpoint rendering and navigation. In this work, we conduct a comprehensive evaluation of 3DGS and related novel view synthesis methods under out-of-distribution (OOD) test camera scenarios. By creating diverse test cases with synthetic and real-world datasets, we demonstrate that most existing methods, including those incorporating various regularization techniques and data-driven priors, struggle to generalize effectively to OOD views. To address this limitation, we introduce SplatFormer, the first point transformer model specifically designed to operate on Gaussian splats. SplatFormer takes as input an initial 3DGS set optimized under limited training views and refines it in a single forward pass, effectively removing potential artifacts in OOD test views. To our knowledge, this is the first successful application of point transformers directly on 3DGS sets, surpassing the limitations of previous multi-scene training methods, which could handle only a restricted number of input views during inference. Our model significantly improves rendering quality under extreme novel views, achieving state-of-the-art performance in these challenging scenarios and outperforming various 3DGS regularization techniques, multi-scene models tailored for sparse view synthesis, and diffusion-based frameworks. Project page: [https://sergeyprokudin.github.io/splatformer/](https://sergeyprokudin.github.io/splatformer/ \"\").\n\n## 1 Introduction\n\nNovel view synthesis (NVS) focuses on transforming 2D RGB images into immersive 3D scenes, allowing users to navigate within augmented reality (AR) and virtual reality (VR) environments. Traditionally, this problem has been approached using a standard novel view interpolation protocol, where test views are sampled at fixed intervals along the trajectory of the input views. Several NVS methods have emerged based on this protocol, with 3D Gaussian splatting (3DGS) (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) recently gaining attention for achieving real-time and high-fidelity results in view interpolation.\n\nHowever, AR and VR applications require not only smooth transitions between input views but also the ability to explore novel regions of interest from viewing angles outside the input distribution. For instance, users may want to observe a scene from high-elevation angles, which are often missing from the captured views. While novel view interpolation has seen significant advancements, this out-of-distribution novel view synthesis (OOD-NVS) task remains underexplored, particularly in terms of evaluation protocols and methodology. A related area of research involves 3D reconstruction from sparse or monocular input views, where methods often need to hallucinate unseen content (Liu et al., [2023a](https://ar5iv.org/html/2411.06390#bib.bib26 \"\"); Chan et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib3 \"\"); Kwak et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib22 \"\"); Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")). While hallucination can be beneficial for creative applications, it may be undesirable in settings that demand accurate reconstructions, such as 3D visualization of surgical procedures (Hein et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib15 \"\")), and unnecessary in typical daily capture scenarios.\n\nImagine you are capturing a statue in a museum. By varying the camera’s elevation and walking around the object, you might be able to capture most of its features. However, the spatial distribution of camera angles is likely uneven, even heavily skewed, creating certain out-of-distribution views where some parts of the object are only sparsely covered. An example is illustrated in Fig. [1](https://ar5iv.org/html/2411.06390#S1.F1 \"Figure 1 ‣ 1 Introduction ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), where input views are captured from a user’s\nperspective, circling around an object at varying but close elevation angles. The out-of-distribution (OOD) target views observe the object from a top-down perspective, a significant deviation from the input distribution. We define this challenge as out-of-distribution novel view synthesis (OOD-NVS). We argue that this issue is practically relevant for everyday capture scenarios, yet it has been largely overlooked by the research community. To study this problem, we render 3D assets from ShapeNet (Chang et al., [2015](https://ar5iv.org/html/2411.06390#bib.bib4 \"\")), Objaverse 1.0 (Deitke et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib10 \"\")), and Google Scanned Objects (Downs et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib11 \"\")) datasets. As shown in Fig. [1](https://ar5iv.org/html/2411.06390#S1.F1 \"Figure 1 ‣ 1 Introduction ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), existing NVS methods perform poorly on the OOD views when restricted to low-elevation inputs, highlighting the need for a novel approach to address this problem.\n\nSubstantial research efforts have been directed towards robust 3D reconstruction with insufficient input views. First, some 3DGS variants regularize the Gaussian attributes through implicit bias in neural radiance fields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")) or geometry consistency terms (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")). Second, a number of methods attempt to exploit priors from external datasets. For example, some supervise the rendered depth maps using stereo estimators (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")), though these methods face scale ambiguity issues. Certain methods pretrain feature grids (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\"); Sen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib38 \"\")) on large datasets, but these priors are often limited to a single object category. Other methods use 2D priors from pretrained diffusion models (Sargent et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib37 \"\")) but struggle with multi-view inconsistencies. Additionally, some feed-forward models predict 3D primitives from a few input views (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\"); [b](https://ar5iv.org/html/2411.06390#bib.bib8 \"\"); Yu et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib54 \"\")), yet they handle no more than four images due to computational constraints, limiting their ability to leverage dense multi-view inputs. Most of these approaches are evaluated only on view interpolation or sparse-view reconstruction, failing to address the artifacts encountered in the OOD-NVS settings.\n\n![Refer to caption](https://ar5iv.org/html/2411.06390/assets/x1.png)Figure 1: We investigate the out-of-distribution (OOD) novel view synthesis (NVS), where test views significantly differ from input views. This scenario contrasts with prior in-distribution NVS, where test views interpolate between densely captured input views, Sparse NVS with a few large-baseline input views, and Nerfbusters NVS(Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")), where test views share similar angles with input views. Existing NVS methods, including MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")), and those designed for sparse inputs like LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")), face challenges in this setting, while our method shows notable improvements.\n\nDefining an implicit regularization to improve OOD-NVS poses a significant challenge. We hypothesize that addressing this issue requires careful consideration of three key aspects: 1) leveraging generic priors from large-scale datasets, 2) ensuring 3D consistency in renderings, and 3) fully utilizing the rich geometric information from all input views. To meet these needs, we propose SplatFormer, a novel learning-based feed-forward 3D transformer designed to operate on Gaussian splats. SplatFormer refines an initial 3DGS set—optimized using all input views—into a new, enhanced set that produces multi-view consistent 2D renderings under OOD conditions with fewer artifacts.\n\nOur method begins by optimizing 3DGS from the input views. While this initial 3D representation effectively integrates multi-view information from the captured images, we observe that the shapes, appearances, and spatial structure of the Gaussian splats become biased toward the input view distribution. This often results in elongated Gaussian splats that cover only the thin areas projected on the input views, leading to sparse surface coverage. Furthermore, these splats can form unordered geometric structures that appear correct from the input views but exhibit significant artifacts when rendered under OOD views.\n\nUnlike previous works that rely on hand-crafted regularization techniques (Xie et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib50 \"\"); Li et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib24 \"\")), we adapt point transformer (Zhao et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib57 \"\")), an attention-based architecture designed for 3D scene understanding, to process the 3DGS as a point cloud set with Gaussian attributes serving as features. The attention mechanism in the point transformer learns to capture multi-view information embedded in the 3DGS, focusing on the local neighborhood within the spatial structure pre-computed by the initial 3DGS. It outputs residuals that are added to the input Gaussian attributes. The updated 3DGS is then rendered from novel views, and a photometric error between the rendered and ground-truth images is minimized to train the SplatFormer.\nWe curate large-scale training pairs of initial, flawed 3DGS sets, and ground-truth images of in-distribution and OOD views using ShapeNet and Objaverse 1.0, which are made feasible by the fast optimization of 3DGS and the availability of large-scale 3D and multi-view datasets. By training on this dataset, SplatFormer learns generalizable priors for refining 3DGS, effectively removing artifacts in the OOD views while maintaining 3D consistency.\n\nWe evaluate SplatFormer against baseline models using the proposed OOD-NVS evaluation protocols. Our experiments demonstrate that once trained, SplatFormer significantly reduces artifacts in 3DGS OOD-view renderings, showing substantial improvements in both quantitative and qualitative results for test scenes from ShapeNet and Objaverse. Additionally, we demonstrate that SplatFormer’s artifact removal capabilities generalize to novel object categories in previously unseen datasets, such as Google Scanned Objects (Downs et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib11 \"\")), as well as real-world captures.\nIn summary, we make the following contributions:\n\n- •\n\n\nWe introduce OOD-NVS, a new experimental protocol specifically designed to evaluate the performance of NVS methods when rendering 3D scenes from novel viewing angles that fall outside the distribution of input views. Our results demonstrate that existing methods struggle to generalize under the OOD-NVS protocol;\n\n- •\n\n\nWe propose SplatFormer, a novel learning-based model that refines flawed 3D Gaussian splats to mitigate artifacts in OOD views. SplatFormer is the first approach to apply the point transformer to 3DGS processing, effectively leveraging multi-view information from a dense set of input views and learning a 3D rendering prior to remove artifacts;\n\n- •\n\n\nWe demonstrate that SplatFormer significantly improves the performance of 3DGS-based methods on OOD-NVS tasks, achieving substantial gains in object-centric scenes, while also demonstrating potential for application in unbounded environments.\n\n\n## 2 Related Work\n\nIn this section, we review several novel view synthesis approaches relevant to our topic. These methods can be broadly categorized into three modalities: (1) general NVS methods primarily evaluated through view interpolation, (2) reconstruction from sparse views, and (3) approaches that enhance NVS by utilizing priors and regularization techniques.\n\nNovel View Interpolation.\nIn most NVS scenarios, both input and test views are sampled from the same distribution, typically following a fixed trajectory or a hemispherical pattern, as observed in common datasets such as Blender NeRF (Mildenhall et al., [2020](https://ar5iv.org/html/2411.06390#bib.bib30 \"\")), LLFF (Mildenhall et al., [2019](https://ar5iv.org/html/2411.06390#bib.bib29 \"\")), and Phototourism (Jin et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib19 \"\")). Seminal works like NeRF (Mildenhall et al., [2020](https://ar5iv.org/html/2411.06390#bib.bib30 \"\")), InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")), and 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) have demonstrated strong performance under this view interpolation protocol. However, as we will demonstrate later, they encounter difficulties in rendering novel views from out-of-distribution (OOD) angles, a challenge that remains less explored.\n\nSparse View Reconstruction.\nAnother line of research is focused on reconstructing and rendering 3D scenes from sparse set of input views, typically fewer than four.\nMethods like Zero123 (Liu et al., [2023a](https://ar5iv.org/html/2411.06390#bib.bib26 \"\")) and others (Sargent et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib37 \"\"); Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\"); Kwak et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib22 \"\")) predict NeRF representations or multi-view images from monocular inputs, often requiring the model to hallucinate unseen regions.\nSimilarly, approaches like (Yu et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib54 \"\"); Charatan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib5 \"\"); Wewer et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib46 \"\"); Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\"); [b](https://ar5iv.org/html/2411.06390#bib.bib8 \"\")) predict 3D primitives directly from sparse views.\nSome methods (Höllein et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib16 \"\"); Gao et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib13 \"\")) aggregate multi-view inputs into 2D diffusion-based generative models, which are more suited for creative tasks but less applicable when metrically accurate reconstructions are needed.\n\nOut-of-distribution Novel View Synthesis (OOD-NVS).\nUnlike the standard interpolation setup, Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")) captures input and test views along separate trajectories, closely aligning with the OOD-NVS problem we are addressing.\nHowever, their input and test views remain relatively similar in viewing angles, and the observed artifacts are primarily caused by the “invisibility issue“, where test views fall outside the input observation sphere, rather than from significant viewpoint deviations. In contrast, our approach tackles large viewpoint shifts without addressing invisibility, filling a gap by emphasizing generalization across substantial angle deviations.\n\nRegularization Techniques for Unconstrained Reconstruction.\nSparse input views significantly degrade NVS performance, leading to various works exploring geometric priors, spatial regularity constraints, and data-driven priors.\nGeometric priors have been used in SuGaR (Guédon & Lepetit, [2024](https://ar5iv.org/html/2411.06390#bib.bib14 \"\")), 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")), and GeoGaussian (Li et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib24 \"\")), which apply handcrafted self-supervision losses to better align Gaussian splats with surface geometry.\nSimilarly, Spatial regularity constraints, explored in SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")) and ZeroRF (Shi et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib39 \"\")), integrate Deep Image Prior (Ulyanov et al., [2018](https://ar5iv.org/html/2411.06390#bib.bib41 \"\")) to regularize 3DGS and NeRF reconstructions, producing more robust results from sparse inputs.\nHowever, these methods offer limited improvements as they do not leverage external data.\nData-driven priors have been adopted in several works.\nFSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")) and DNGaussian (Li et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib23 \"\")) supervises depth maps using deep stereo models but suffers from scale ambiguity.\nInstantSplat (Fan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")) uses dense point clouds for 3DGS initialization, though it struggles with overfitting. Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")) pretrains a diffusion model for post-processing NeRF, achieving only marginal improvements.\nAppearance priors (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\"); Sargent et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib37 \"\"); Wu et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib47 \"\"); Gao et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib13 \"\"); Kwak et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib22 \"\")) use 2D diffusion models to regularize novel view renderings, but often struggle with multi-view consistency.\nAdditionally, SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")) and HypNeRF (Sen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib38 \"\")) pretrain 3D feature grids on object-centric datasets, yet underperform in multi-category experiments.\n\nLearning-based 2D-to-3D Models.\nAnother special case of data-driven models involves training feed-forward models on large-scale multi-view image datasets to predict 3D representations from 2D images. SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")) and ViewDiff (Höllein et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib16 \"\")) fine-tune pretrained diffusion models to generate multi-view images from one or a few input views. PixelNeRF (Yu et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib54 \"\")), MVSplat (Chen et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib8 \"\")), and related works (Charatan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib5 \"\"); Wewer et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib46 \"\")) transform 2D image features into NeRF or Gaussian splats. Although these models can learn generic priors from multi-view datasets, they are typically constrained to only a few input views, limiting their ability to fully leverage larger multi-view inputs.\n\n3D Point Processing Techniques are central to our work and widely used across 3D tasks.\nUnlike 2D image features or 3D grids, point clouds are unordered and unevenly distributed, requiring specialized architectures to handle their irregularity and sparsity. Solutions include sparse convolution (Choy et al., [2019](https://ar5iv.org/html/2411.06390#bib.bib9 \"\")), MLPs (Qi et al., [2017](https://ar5iv.org/html/2411.06390#bib.bib33 \"\")), and transformers (Wang, [2023](https://ar5iv.org/html/2411.06390#bib.bib42 \"\"); Yang et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib52 \"\"); Zhao et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib57 \"\")).\nThe point transformer (Zhao et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib57 \"\")), using attention to model spatial relationships, has proven particularly effective. Further advancements (Wu et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib48 \"\"); [2024b](https://ar5iv.org/html/2411.06390#bib.bib49 \"\")) have enhanced its efficiency, achieving state-of-the-art performance in 3D segmentation. Our work is the first to adapt the point transformer for refining 3D Gaussian splats (3DGS), leveraging its ability to capture spatial relationships in irregular point clouds to enhance novel view synthesis fidelity.\n\n## 3 Review: 3D Gaussian Splatting (3DGS)\n\n3D Gaussian Splatting (3DGS) encodes a scene using Gaussian splat primitives {𝒢k}k=1Ksuperscriptsubscriptsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K}, which are rendered via volume splatting.\nEach primitive is defined by its mean position 𝐩k∈ℝ3×1subscript𝐩𝑘superscriptℝ31\\\\mathbf{p}\\_{k}\\\\in\\\\mathbb{R}^{3\\\\times 1}, opacity αk∈\\[0,1\\]subscript𝛼𝑘01\\\\alpha\\_{k}\\\\in\\[0,1\\], S𝑆S-dimensional spherical harmonics 𝐚k∈ℝSsubscript𝐚𝑘superscriptℝ𝑆\\\\mathbf{a}\\_{k}\\\\in\\\\mathbb{R}^{S} for modeling view-dependent color 𝐜k∈ℝ3subscript𝐜𝑘superscriptℝ3\\\\mathbf{c}\\_{k}\\\\in\\\\mathbb{R}^{3}, and covariance matrix 𝚺k∈ℝ3×3subscript𝚺𝑘superscriptℝ33\\\\mathbf{\\\\Sigma}\\_{k}\\\\in\\\\mathbb{R}^{3\\\\times 3} parameterized via scale 𝐬k∈ℝ3subscript𝐬𝑘superscriptℝ3\\\\mathbf{s}\\_{k}\\\\in\\\\mathbb{R}^{3} and rotation quaternion 𝐪k∈ℝ4subscript𝐪𝑘superscriptℝ4\\\\mathbf{q}\\_{k}\\\\in\\\\mathbb{R}^{4} vectors for enforced positive\nsemi-definiteness.\n\nThe splats are rendered by projecting them onto an image plane, forming 2D Gaussian distributions:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝒢k2D​(𝐱′)∝exp⁡(−(𝐱′−𝐩k′)T​(𝚺k2D)−1​(𝐱′−𝐩k′)/2),proportional-tosubscriptsuperscript𝒢2D𝑘superscript𝐱′superscriptsuperscript𝐱′subscriptsuperscript𝐩′𝑘𝑇superscriptsuperscriptsubscript𝚺𝑘2D1superscript𝐱′superscriptsubscript𝐩𝑘′2\\\\mathcal{G}^{\\\\text{2D}}\\_{k}(\\\\mathbf{x}^{\\\\prime})\\\\propto\\\\exp(-(\\\\mathbf{x}^{\\\\prime}-\\\\mathbf{p}^{\\\\prime}\\_{k})^{T}(\\\\mathbf{\\\\Sigma}\\_{k}^{\\\\text{2D}})^{-1}(\\\\mathbf{x}^{\\\\prime}-\\\\mathbf{p}\\_{k}^{\\\\prime})/2)\\\\,, |  | (1) |\n\nwhere 𝐩k′∈ℝ2superscriptsubscript𝐩𝑘′superscriptℝ2\\\\mathbf{p}\\_{k}^{\\\\prime}\\\\in\\\\mathbb{R}^{2} and 𝚺k2D∈ℝ2×2superscriptsubscript𝚺𝑘2Dsuperscriptℝ22\\\\mathbf{\\\\Sigma}\\_{k}^{\\\\text{2D}}\\\\in\\\\mathbb{R}^{2\\\\times 2} are the projected splat center and covariance matrix.\n\nTo compute the pixel color 𝐜​(𝐱′)∈ℝ3𝐜superscript𝐱′superscriptℝ3\\\\mathbf{c}(\\\\mathbf{x}^{\\\\prime})\\\\in\\\\mathbb{R}^{3} at location 𝐱′∈ℝ2superscript𝐱′superscriptℝ2\\\\mathbf{x}^{\\\\prime}\\\\in\\\\mathbb{R}^{2} splats are blended in sorted depth order:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐜​(𝐱′)=∑k=1K𝐜k​αk​𝒢k2D​(𝐱′)​∏j=1k−1(1−αj​𝒢j2D​(𝐱′)).𝐜superscript𝐱′superscriptsubscript𝑘1𝐾subscript𝐜𝑘subscript𝛼𝑘subscriptsuperscript𝒢2D𝑘superscript𝐱′superscriptsubscriptproduct𝑗1𝑘11subscript𝛼𝑗subscriptsuperscript𝒢2D𝑗superscript𝐱′\\\\mathbf{c}(\\\\mathbf{x}^{\\\\prime})=\\\\sum\\\\nolimits\\_{k=1}^{K}\\\\mathbf{c}\\_{k}\\\\alpha\\_{k}\\\\mathcal{G}^{\\\\text{2D}}\\_{k}(\\\\mathbf{x}^{\\\\prime})\\\\prod\\\\nolimits\\_{j=1}^{k-1}(1-\\\\alpha\\_{j}\\\\mathcal{G}^{\\\\text{2D}}\\_{j}(\\\\mathbf{x}^{\\\\prime})). |  | (2) |\n\n_Optimization._\nThe parameters {𝒢k}k=1Ksuperscriptsubscriptsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K} are optimized using the Adam optimizer (Kingma & Ba, [2015](https://ar5iv.org/html/2411.06390#bib.bib21 \"\")) by minimizing a weighted combination of ℒ1subscriptℒ1\\\\mathcal{L}\\_{1} and D-SSIM losses:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ3DGS=(1−λ)​ℒ1+λ​ℒD-SSIM,subscriptℒ3DGS1𝜆subscriptℒ1𝜆subscriptℒD-SSIM\\\\mathcal{L}\\_{\\\\text{3DGS}}=(1-\\\\lambda)\\\\mathcal{L}\\_{1}+\\\\lambda\\\\mathcal{L}\\_{\\\\text{D-SSIM}}, |  | (3) |\n\nwith λ𝜆\\\\lambda set to 0.2 as per the original 3DGS formulation. To avoid local minima, 3DGS employs periodic heuristic densification and pruning of Gaussian splats.\n\n## 4 Robust Out-of-distribution Novel View Synthesis\n\n![Refer to caption](https://ar5iv.org/html/2411.06390/assets/x2.png)Figure 2: Limitations of 3DGS in OOD-NVS setup.\nWe observe that the quality of novel views obtained via 3DGS significantly deteriorates as the test camera deviates from the distribution of input camera views which our solution, SplatFormer, effectively overcomes and demonstrates higher fidelity renderings.\nThe displayed metric (left) is performed on the scenes from Objaverse (Deitke et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib10 \"\")); see Sec. [5](https://ar5iv.org/html/2411.06390#S5 \"5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") for detailed experiment setup.\n\nLimitations of 3DGS.\nWhile direct optimization of splat primitives allows 3DGS to closely adapt to input images, it often leads to overfitting, as the flexible primitives conform too precisely to individual pixels. The smooth, continuous nature of Gaussian distributions supports effective interpolation, but only when test views are similar to the training views.\nTo demonstrate this limitation, we conduct a controlled experiment (Fig. [2](https://ar5iv.org/html/2411.06390#S4.F2 \"Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) simulating a typical scenario where a user captures images while rotating around an object. The challenge arises when rendering from out-of-distribution (OOD) viewpoints, such as elevated camera angles, a critical requirement for AR and VR applications that demand consistent 3D rendering from all perspectives.\n\nKey Observation.\nAs shown in Fig. [2](https://ar5iv.org/html/2411.06390#S4.F2 \"Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), the reconstruction quality degrades significantly as the test camera’s elevation increases, highlighting a key limitation of 3DGS in handling OOD views. The challenge is to make the representation robust to such viewpoint changes while preserving the advantages of 3DGS, such as real-time rendering and compatibility with rasterization-based tools. Addressing this limitation by incorporating priors and constraints into the optimization of 3DGS is a complex task.\nPrevious approaches have attempted to address this using geometric constraints (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\"); Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")) and data-driven priors (Fan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")). However, as demonstrated later (Tab. [1](https://ar5iv.org/html/2411.06390#S4.T1 \"Table 1 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")), these methods fall short in achieving robust novel-view synthesis, emphasizing the need for a more effective solution.\nWe believe that solving this issue requires incorporating three key aspects: leveraging generic priors from large-scale datasets, ensuring 3D consistency in renderings, and fully utilizing rich geometric information from all input views.\n\nSolution: SplatFormer.\nWe introduce SplatFormer, a novel learning-based feed-forward 3D neural module to operate on Gaussian splats, enabling robust novel view synthesis from OOD views.\nAs shown in Fig. [2](https://ar5iv.org/html/2411.06390#S4.F2 \"Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), our method maintains high visual quality even when test views deviate significantly from the input views.\nSplatFormer, parameterized via learnable parameters θ𝜃\\\\theta, overcomes the bias toward input views by capturing spatial relationships and modeling interactions between splats. Inspired by transformer architectures, which excel at learning complex relationships in data (Brown et al., [2020](https://ar5iv.org/html/2411.06390#bib.bib2 \"\")), we adopt this approach for feed-forward refinement of 3D Gaussian splats.\n\n![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/SplatFormerOverviewV2_feedforward.jpg)Figure 3: Method Overview. We introduce SplatFormer, a generalizable 3D point transformer network designed for feed-forward refinement of Gaussian splats, enabling robust out-of-distribution novel-view synthesis (OOD-NVS). The reconstruction process begins by generating an initial set of 3D Gaussians from input images. However, these splats are biased toward the input views and are not robust for OOD-NVS. SplatFormer refines these splats through a hierarchical neural network that models residuals to the initial splat attributes. The model is trained on a large collection of 3D shapes using 2D rendering loss, allowing it to: 1) incorporate spatial regularity among splat primitives via the hierarchical architecture, 2) leverage generic priors from large-scale datasets, and 3) ensure 3D consistency through refining 3D primitives directly.\n\nReconstruction Process (Fig. [3](https://ar5iv.org/html/2411.06390#S4.F3 \"Figure 3 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"))\nbegins with a set of calibrated input images, from which we generate splat primitives {𝒢k}k=1Ksuperscriptsubscriptsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K} using the 3DGS optimization process described in Sec. [3](https://ar5iv.org/html/2411.06390#S3 \"3 Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\").\nSince these splats are biased toward the input views, we apply SplatFormer for feed-forward refinement to enable robust out-of-distribution novel-view synthesis. SplatFormer utilizes a hierarchical series of transformer encoder-decoder layers fθsubscript𝑓𝜃f\\_{\\\\theta} based on the Point Transformer V3 (PTv3) architecture (Zhao et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib57 \"\"); Wu et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib49 \"\")) and is trained on a large collection of 3D shapes using 2D rendering loss.\nThis supervision refines the splat primitives by enforcing spatial regularity through the hierarchical network architecture, leveraging generic priors from large-scale datasets, and ensuring 3D consistency in the refined splats through multi-view consistent rendering supervision.\nDuring encoding, SplatFormer assigns each splat an abstract V-dimensional feature vectors 𝐯k∈ℝVsubscript𝐯𝑘superscriptℝ𝑉\\\\mathbf{v}\\_{k}\\\\in\\\\mathbb{R}^{V}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | {𝐯k}k=1K=fθ​({𝒢k}k=1K),subscriptsuperscriptsubscript𝐯𝑘𝐾𝑘1subscript𝑓𝜃subscriptsuperscriptsubscript𝒢𝑘𝐾𝑘1\\\\{\\\\mathbf{v}\\_{k}\\\\}^{K}\\_{k=1}=f\\_{\\\\theta}(\\\\{\\\\mathcal{G}\\_{k}\\\\}^{K}\\_{k=1}), |  | (4) |\n\nwhich encapsulate key details of the 3D primitives. The feature decoder gθsubscript𝑔𝜃g\\_{\\\\theta} then transforms this latent representation into splat attribute residuals\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | {Δ​𝒢k=(Δ​𝐩k,Δ​𝐬k,Δ​αk,Δ​𝐪k,Δ​𝐚k)}k=1K=fθ​({𝒢k,𝐯k}k=1K),superscriptsubscriptΔsubscript𝒢𝑘Δsubscript𝐩𝑘Δsubscript𝐬𝑘Δsubscript𝛼𝑘Δsubscript𝐪𝑘Δsubscript𝐚𝑘𝑘1𝐾subscript𝑓𝜃superscriptsubscriptsubscript𝒢𝑘subscript𝐯𝑘𝑘1𝐾\\\\{\\\\Delta\\\\mathcal{G}\\_{k}=(\\\\Delta\\\\mathbf{p}\\_{k},\\\\Delta\\\\mathbf{s}\\_{k},\\\\Delta\\\\alpha\\_{k},\\\\Delta\\\\mathbf{q}\\_{k},\\\\Delta\\\\mathbf{a}\\_{k})\\\\}\\_{k=1}^{K}=f\\_{\\\\theta}(\\\\{\\\\mathcal{G}\\_{k},\\\\mathbf{v}\\_{k}\\\\}\\_{k=1}^{K})\\\\,, |  | (5) |\n\nwhich yields a refined set of splats {𝒢k′}k=1Ksuperscriptsubscriptsuperscriptsubscript𝒢𝑘′𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}^{\\\\prime}\\\\}\\_{k=1}^{K} that is more robust for OOD novel-view synthesis:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | {𝒢k′}k=1K={𝒢k+Δ​𝒢k}k=1K.superscriptsubscriptsuperscriptsubscript𝒢𝑘′𝑘1𝐾superscriptsubscriptsubscript𝒢𝑘Δsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}^{\\\\prime}\\\\}\\_{k=1}^{K}=\\\\{\\\\mathcal{G}\\_{k}+\\\\Delta\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K}\\\\,. |  | (6) |\n\nPoint Transformer Encoder fθsubscript𝑓𝜃f\\_{\\\\theta}. Our 3DGS splat encoder is based on the PTv3 framework (Wu et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib49 \"\")).\nThe input set of points is first passed through an embedding layer to obtain corresponding input features, followed by 5 stages of attention blocks and downsampling grid pooling layers (Wu et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib48 \"\")). Then another 4 stages of attention blocks and upsampling grid pooling layers are used to restore the resolution. To capture high-frequency details and improve gradient flow, skip connection MLP modules are used to map intermediate downsampling outputs to residuals, which are then added to the upsampling layers at corresponding resolutions. Each stage comprises attention blocks with layer normalization, multi-head attention, and MLPs. This hierarchical architecture models contextual relationships among neighboring primitives. To implement attention efficiently based on spatial proximity, we adopt PTv3’s serialization and grid pooling strategy.\n\nFeature Decoder gθsubscript𝑔𝜃g\\_{\\\\theta}.\nThe extracted features are further concatenated with the original splat attributes to enhance convergence by combining the transformer’s context-aware features with the initial attributes. Each point’s features are then passed into shared feature decoding heads, which consist of five sequential MLP modules to predict residuals to the initial splat attributes. To further improve training stability, we zero-initialize the final MLP layers’ weights and biases leading to zero initial residual features, ensuring that the initial output closely matches the input 3DGS.\n\n### 4.1 Learning Data-Driven Prior\n\nDataset.\nTo enable SplatFormer to refine imperfect Gaussian splats using a data-driven prior, we curated a large dataset containing pairs of Gaussian primitives and corresponding multi-view images. We utilized 33k and 48k scenes from the ShapeNet (Chang et al., [2015](https://ar5iv.org/html/2411.06390#bib.bib4 \"\")) and Objaverse-1.0 (Deitke et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib10 \"\")) datasets respectively. These assets were rendered from low-elevation input views and high-elevation out-of-distribution (OOD) views.\nThe initial splats were generated from the low-elevation views (following Sec. [3](https://ar5iv.org/html/2411.06390#S3 \"3 Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). The data collection process, which required approximately 3000 GPU hours, was efficiently executed using budget GPUs like the RTX-2080Ti. We will release the data and corresponding rendering code to facilitate future research.\n\nTraining Objective.\nAfter generating the initial 3DGS by minimizing the photometric loss (Eq. [3](https://ar5iv.org/html/2411.06390#S3.E3 \"In 3 Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) using low-elevation input views, the SplatFormer module performs feed-forward refinement. The refined splats are then rendered following Eq. [2](https://ar5iv.org/html/2411.06390#S3.E2 \"In 3 Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") for both input and OOD views, using a combination of photometric and perceptual LPIPS (Zhang et al., [2018](https://ar5iv.org/html/2411.06390#bib.bib56 \"\")) loss terms:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒSplatFormer=ℒ1+ℒLPIPS.subscriptℒSplatFormersubscriptℒ1subscriptℒLPIPS\\\\mathcal{L}\\_{\\\\text{SplatFormer}}=\\\\mathcal{L}\\_{1}+\\\\mathcal{L}\\_{\\\\text{LPIPS}}\\\\,. |  | (7) |\n\nThis loss is optimized using the Adam optimizer (Kingma & Ba, [2015](https://ar5iv.org/html/2411.06390#bib.bib21 \"\")) across multi-view images, incorporating both low-elevation and high-elevation OOD views. This balanced approach ensures that the model generalizes to unseen angles while preserving high fidelity for in-distribution views.\n\nThe dataset and training approach we introduce allow SplatFormer to learn rich data-driven priors from a diverse range of 3D objects and view configurations.\nThese learned priors enable the model to correct 3DGS’s bias towards input views, leading to more accurate and consistent reconstructions in OOD scenarios.\n\n| Four of Input Views | LaRa | SplatFields | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_GT.jpeg) |\n\nFigure 4: Novel View Synthesis under Out-of-Distribution Camera Angles. The first column shows 4 out of 32 input views. Here, we compare our method with LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")), SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")), MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")), 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")), and 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")). Results on Objaverse-OOD evaluation scenes; a comprehensive comparison with all the baselines is provided in the appendix (Fig. [F.3](https://ar5iv.org/html/2411.06390#A6.F3 \"Figure F.3 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).Table 1: OOD-NVS. Comparisons on the ShapeNet-OOD and Objaverse-OOD evaluation sets. The metric is evaluated on OOD test views with elevation ϕood≥70​°subscriptitalic-ϕood70°\\\\phi\\_{\\\\textrm{ood}}\\\\geq 70\\\\degree; colors indicate the 1st, 2nd, and 3rd best-performing model\n\n|  | Methods | ShapeNet-OOD | Objverse-OOD |\n|  |  | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS |\n| \\\\hdashlineStandard | MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")) | 20.06 | 0.819 | 0.265 | 19.64 | 0.722 | 0.280 |\n| InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")) | 17.09 | 0.684 | 0.339 | 19.47 | 0.694 | 0.310 |\n| 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) | 20.21 | 0.763 | 0.242 | 19.24 | 0.673 | 0.285 |\n| \\\\hdashlineRegularized | 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")) | 23.52 | 0.863 | 0.188 | 20.56 | 0.739 | 0.248 |\n| SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")) | 23.15 | 0.850 | 0.185 | 18.85 | 0.688 | 0.308 |\n| \\\\hdashlineExternal Prior | InstantSplat (Fan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")) | 19.00 | 0.732 | 0.258 | 14.20 | 0.500 | 0.429 |\n| FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")) | 17.32 | 0.714 | 0.298 | 18.82 | 0.655 | 0.323 |\n| SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")) | 15.36 | 0.650 | 0.393 | 16.90 | 0.552 | 0.434 |\n| Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")) | 11.42 | 0.640 | 0.321 | 16.87 | 0.689 | 0.287 |\n| \\\\hdashlineFeed Forward | SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")) | 9.07 | 0.500 | 0.468 | 9.72 | 0.420 | 0.489 |\n| LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")) | 20.94 | 0.839 | 0.222 | 19.04 | 0.682 | 0.324 |\n| SplatFormer | 27.98 | 0.920 | 0.136 | 23.06 | 0.821 | 0.170 |\n\n## 5 Experiments\n\nWe begin by outlining the out-of-distribution novel-view synthesis (OOD-NVS) setup, followed by a description of the evaluation protocol and the baseline methods used for comparison. Next, we present the results on OOD-NVS, cross-dataset generalization, and ablation studies. Finally, we discuss the limitations of our approach and potential directions for future research.\n\nOOD-NVS.\nFor a given region of interest, such as a centered object, we simulate an input camera capturing 360-degree azimuths at low elevations. The camera takes Ninsubscript𝑁inN\\_{\\\\textrm{in}} photos from evenly spaced azimuths, with its elevation following a sinusoidal pattern defined by frequency f𝑓f and limits ϕmaxsubscriptitalic-ϕmax\\\\phi\\_{\\\\textrm{max}}. This setup mimics a user recording the target from low angles, with physical constraints preventing stable top-down captures. To introduce OOD views, we use high-elevation with ϕood≫ϕmaxmuch-greater-thansubscriptitalic-ϕoodsubscriptitalic-ϕmax\\\\phi\\_{\\\\textrm{ood}}\\\\gg\\\\phi\\_{\\\\textrm{max}}, simulating a top-down perspective. The camera configuration is visualized in Fig [1](https://ar5iv.org/html/2411.06390#S1.F1 \"Figure 1 ‣ 1 Introduction ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\").\n\nEvaluation Sets.\nWe use Blender to render 20 objects from ShapeNet (Chang et al., [2015](https://ar5iv.org/html/2411.06390#bib.bib4 \"\")) and Objaverse-v1 (Deitke et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib10 \"\")) each. We select common objects and scenes with meaningful bird’s-eye views, such as city streets and buildings, avoiding those with large cavities that are invisible from low-elevation views. Due to varying object heights and shapes, we render two input camera trajectories with ϕmax=10∘subscriptitalic-ϕmaxsuperscript10\\\\phi\\_{\\\\textrm{max}}=10^{\\\\circ} and 20∘superscript2020^{\\\\circ}, creating two input-target splits to represent different levels of view deviation. So each scene has two experiments with different input views and the same target views. We average evaluation metrics across the two sets of experiments. Each input trajectory consists of Nin=32subscript𝑁in32N\\_{\\\\textrm{in}}=32 views. The OOD test set includes Nout=9subscript𝑁out9N\\_{\\\\textrm{out}}=9 views, uniformly distributed from the top sphere with ϕood≥70∘subscriptitalic-ϕoodsuperscript70\\\\phi\\_{\\\\textrm{ood}}\\\\geq 70^{\\\\circ}. All renderings are at a resolution of 256×256256256256\\\\times 256.\n\nBaselines.\nWe evaluate SplatFormer using the OOD-NVS protocol, comparing it with several publicly available state-of-the-art methods from each NVS method category. First, we include per-scene NVS approaches designed primarily for in-distribution NVS, including representative works such as InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")), 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")), and MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")). Next, we examine regularized 3DGS variants that aim to reduce overfitting without external priors, including 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")) and SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")).\nWe further consider prior-augmented per-scene NVS methods, which regularize per-scene optimization using external priors, including InstantSplat (Fan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")), FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")), SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")), and Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")). Finally, we examine feed-forward models, which reconstruct 2D Gaussians (LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\"))) or produce multi-view images (SyncDreamer  (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\"))) from sparse input images.\n\nFor a fair comparison, we retrained SSDNeRF, LaRa, and SyncDreamer using the same training sets as SplatFormer. For SyncDreamer, which only supports single-view input, we selected the highest-elevation view. For LaRa, which is limited to four input views due to memory constraints, we chose four large-baseline views to maximize scene coverage; details are provided in appendix (Sec. [D](https://ar5iv.org/html/2411.06390#A4 \"Appendix D Baseline Implementations ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).\n\nResults on OOD-NVS.\nQualitative results (Fig. [4](https://ar5iv.org/html/2411.06390#S4.F4 \"Figure 4 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) show that LaRa produces blurry outputs, while MipNeRF360 suffers from floater artifacts and SplatFields smooths out fine details. Both 2DGS and 3DGS exhibit spiky artifacts. In contrast, SplatFormer significantly reduces the artifacts present in 3DGS, completes surface reconstruction, and even restores certain geometric properties, such as interlaced structures. While our method still faces challenges with high-frequency texture details, it outperforms previous approaches in terms of fidelity and consistency in out-of-distribution views, which is also supported by the clear quantitative improvements demonstrated in our results (Tab. [1](https://ar5iv.org/html/2411.06390#S4.T1 \"Table 1 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). Additional visual results are provided in the appendix (Sec. [E](https://ar5iv.org/html/2411.06390#A5 \"Appendix E Comparisons with Baselines ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) and the supplementary video.\n\n|  | Four of Input Views | Nerfbusters | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| GSO-OOD | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Poppin_File_Sorter_Pink-10-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Poppin_File_Sorter_Pink-10-test_elevation90_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Poppin_File_Sorter_Pink-10-test_elevation90_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Poppin_File_Sorter_Pink-10-test_elevation90_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Poppin_File_Sorter_Pink-10-test_elevation90_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Poppin_File_Sorter_Pink-10-test_elevation90_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Poppin_File_Sorter_Pink-10-test_elevation90_step2_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/KS_Chocolate_Cube_Box_Assortment_By_Neuhaus_2010_Ounces-20-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/KS_Chocolate_Cube_Box_Assortment_By_Neuhaus_2010_Ounces-20-test_elevation90_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/KS_Chocolate_Cube_Box_Assortment_By_Neuhaus_2010_Ounces-20-test_elevation90_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/KS_Chocolate_Cube_Box_Assortment_By_Neuhaus_2010_Ounces-20-test_elevation90_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/KS_Chocolate_Cube_Box_Assortment_By_Neuhaus_2010_Ounces-20-test_elevation90_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/KS_Chocolate_Cube_Box_Assortment_By_Neuhaus_2010_Ounces-20-test_elevation90_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/KS_Chocolate_Cube_Box_Assortment_By_Neuhaus_2010_Ounces-20-test_elevation90_step2_GT.jpeg) |\n\n|  | Camera Setup | Nerfbusters | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| RealWorld-OOD | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/4Woodchair_2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/4Woodchair_2_nerfbusters_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/4Woodchair_2_mipnerf360_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/4Woodchair_2_2dgs_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/4Woodchair_2_3dgs_sh3-step30k_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/4Woodchair_2_splatformer_wlpips_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/4Woodchair_2_gt_highlight.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/1Hydrant.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/1Hydrant_nerfbusters_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/1Hydrant_mipnerf360_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/1Hydrant_2dgs_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/1Hydrant_3dgs_sh3-step30k_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/1Hydrant_splatformer_wlpips_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/1Hydrant_gt_highlight.jpeg) |\n\nFigure 5: Cross-dataset Generalization. SplatFormer trained on Objaverse successfully mitigates artifacts in OOD views in the GSO (Downs et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib11 \"\")) dataset and our real-world object-centric captures. Additional results are presented in the appendix (Fig. [F.4](https://ar5iv.org/html/2411.06390#A6.F4 \"Figure F.4 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") and Fig. [F.5](https://ar5iv.org/html/2411.06390#A6.F5 \"Figure F.5 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).\n\nGeneralization Across a Range of View Deviations.\nOur method does not overfit to the extreme top views present in the SplatFormer training set but generalizes across a range of views, transitioning from input to extreme target views. To demonstrate this, we evaluate NVS with elevations ϕ∈\\[10∘,90∘\\]italic-ϕsuperscript10superscript90\\\\phi\\\\in\\[10^{\\\\circ},90^{\\\\circ}\\] in Objaverse-OOD scenes and compare SplatFormer to 3DGS (Fig. [2](https://ar5iv.org/html/2411.06390#S4.F2 \"Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). While 3DGS performance degrades significantly as the viewing angle deviates from the input views, our method provides more robust synthesis for target views in the range ϕ∈\\[25∘,90∘\\]italic-ϕsuperscript25superscript90\\\\phi\\\\in\\[25^{\\\\circ},90^{\\\\circ}\\].\n\nTable 2: Cross-dataset Generalization\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Methods | GSO-OOD | RealWorld-OOD |\n|  | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS |\n| Nerfbusters | 15.95 | 0.678 | 0.300 | 23.93 | 0.893 | 0.114 |\n| 2DGS | 23.29 | 0.816 | 0.204 | 23.64 | 0.891 | 0.104 |\n| MipNeRF360 | 22.90 | 0.824 | 0.192 | 21.99 | 0.878 | 0.127 |\n| 3DGS | 21.78 | 0.746 | 0.250 | 23.83 | 0.877 | 0.109 |\n| \\\\hdashline<br>SplatFormer | 25.01 | 0.863 | 0.148 | 24.33 | 0.902 | 0.100 |\n\nCross-dataset, Real World Generalization. Following the OOD-NVS protocol, we rendered 20 objects from Google Scanned Objects (GSO) (Downs et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib11 \"\")) and captured 4 real-world scenes. Low-elevation views were used to optimize the initial set of Gaussians, while the OOD views were reserved for validation. For real-world captures with unbounded backgrounds, we segmented the foreground objects. Additional details are provided in the appendix (Sec. [A.1](https://ar5iv.org/html/2411.06390#A1.F1 \"Figure A.1 ‣ Appendix A Evaluation Datasets ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).\nSplatFormer, trained on synthetic data, shows generalization to 3D-scanned real-world objects from the GSO dataset, as well as to real-world mobile phone captures (Tab. [5](https://ar5iv.org/html/2411.06390#S5 \"5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), Fig. [5](https://ar5iv.org/html/2411.06390#S5.F5 \"Figure 5 ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). This suggests that our method does not learn object-specific prior as SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")) and HypNeRF (Sen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib38 \"\")), and the 3DGS refinement prior can be transferred across object categories.\n\nOn the GSO-OOD evaluation set, SplatFormer achieves substantial improvements in both metrics and visual quality. Even on the real-world dataset, despite being trained exclusively on synthetic data, SplatFormer reduces artifacts. These improvements are reflected in the SSIM and LPIPS metrics, though we observed rather minimal improvements in PSNR, which we attribute to the pixel-wise PSNR’s sensitivity to imperfect calibration and our method’s limitation in modeling specular effects. Our method also outperforms MipNeRF360 and 2DGS, the best-performing baselines in Objaverse-OOD (Tab. [1](https://ar5iv.org/html/2411.06390#S4.T1 \"Table 1 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). Additionally, we evaluate Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")), which addresses robust novel view synthesis from novel camera trajectories—a relevant challenge to OOD-NVS. However, we find that Nerfbusters tends to mistakenly remove key scene content as floaters, leading to incomplete geometry.\n\nTable 3: SplatFormer vs 2D Denoising\n\n|  | ShapeNet-OOD |\n| Method | PSNR | SSIM | LPIPS |\n| 3DGS | 20.21 | 0.763 | 0.242 |\n| DiffBIR-stage1 (Lin et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib25 \"\")) | 24.81 | 0.892 | 0.163 |\n| DiffBIR-stage2 (Lin et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib25 \"\")) | 24.24 | 0.858 | 0.174 |\n| Retrained 3DGS with stage1 | 25.16 | 0.894 | 0.164 |\n| Retrained 3DGS with stage2 | 24.83 | 0.870 | 0.174 |\n| \\\\hdashline<br>SplatFormer | 28.09 | 0.920 | 0.135 |\n\n3D vs 2D Denoising.\nAn alternative strategy for refining OOD-NVS renderings is to use 2D image restoration methods. To explore this, we use DiffBIR (Lin et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib25 \"\")), a state-of-the-art image restoration method, to denoise 3DGS renderings. DiffBIR consists of two cascaded models: a first-stage image-to-image regressor to remove artifacts and a second-stage diffusion-based generator (Rombach et al., [2021](https://ar5iv.org/html/2411.06390#bib.bib36 \"\")) to in-paint missing details.\nWe trained both stages using pairs of OOD 3DGS renderings and ground-truth images from our ShapeNet-OOD training set. To address multi-view inconsistencies in the denoised images, we also used the generated images to retrain the 3DGS. This experiment is similar to Sp2360 (Paul et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib32 \"\")), which uses cascaded 2D diffusion priors to regularize 3DGS from sparse-view inputs.\nAs shown in Tab. [5](https://ar5iv.org/html/2411.06390#S5 \"5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), while 2D denoising methods improve the original 3DGS, they significantly underperform compared to SplatFormer and fail to recover geometric details. See the appendix (Fig. [C.1](https://ar5iv.org/html/2411.06390#A3.F1 \"Figure C.1 ‣ Appendix C More Experiments ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) for visual comparisons.\n\nTable 4: Ablations\n\n|  |  | Objaverse-OOD |\n| Backbone | Prediction | PSNR | SSIM | LPIPS |\n| PTv3  (Wu et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib49 \"\")) | Direct | 21.36 | 0.772 | 0.211 |\n| Mink (Choy et al., [2019](https://ar5iv.org/html/2411.06390#bib.bib9 \"\")) | Residual | 22.67 | 0.807 | 0.181 |\n| \\\\hdashline<br>PTv3  (Wu et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib49 \"\")) | Residual | 23.06 | 0.821 | 0.170 |\n\nAblation: Backbone and Supervision.\nWe compare our PTv3 (Wu et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib49 \"\")) transformer-based architecture with widely used Minkowski (Choy et al., [2019](https://ar5iv.org/html/2411.06390#bib.bib9 \"\")) engine. Additionally, to validate the effectiveness of the residual prediction strategy outlined in Sec. [4](https://ar5iv.org/html/2411.06390#S4 \"4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), we train a variant that directly predicts the full 3DGS attributes (direct component). The results in Tab. [5](https://ar5iv.org/html/2411.06390#S5 \"5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") show that the point transformer architecture and residual-based learning improve performance compared to the alternatives.\n\nLimitations and Future Work. Our method has several limitations that provide directions for future work. First, despite outperforming all the considered baselines, it still struggles to reconstruct fine-grained details and complex texture. Second, the generalization to real-world captures could be improved by scaling up training examples and by enhancing the realism of synthetic lighting. Third, applying our method to refining 2DGS may further improve the OOD-NVS results. Finally, it would be valuable to train our method to remove OOD-NVS artifacts in unbounded scenes and with a wider range of OOD camera setups. In the appendix [F](https://ar5iv.org/html/2411.06390#A6 \"Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), we present a experimental result in Fig. [F.1](https://ar5iv.org/html/2411.06390#A6.F1 \"Figure F.1 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") and Tab. [F.1](https://ar5iv.org/html/2411.06390#A6.F1 \"Figure F.1 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") using the MVImgNet dataset  (Yu et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib55 \"\")), and outline both the potential and challenges. Please refer to it for an extended discussion.\n\n## 6 Conclusion\n\nPhotorealistic rendering of 3D assets under diverse viewing conditions is critical for AR and VR applications. In this work, we introduced a new out-of-distribution (OOD) novel view synthesis test scenario and demonstrated that most neural rendering methods, including those using regularization techniques and data-driven priors, suffer substantial quality degradation when test viewing angles deviate significantly from the training set, highlighting the need for more robust rendering techniques. As an initial step towards addressing the problem, we proposed SplatFormer, a novel point transformer model designed to overcome the limitations of 3D Gaussian Splatting in handling OOD views. By refining 3DGS representations in a single forward pass, SplatFormer significantly improves rendering quality in these scenarios and achieves state-of-the-art performance, outperforming prior methods designed for both sparse and dense view inputs. The success of our model further underscores the potential of integrating transformers into photorealistic rendering workflows.\n\n#### Funding\n\nThis study was conducted within the national ”Proficiency”111 [https://surgicalproficiency.ch](https://surgicalproficiency.ch/ \"\") research project funded by the Swiss Innovation Agency Innosuisse in 2021 as one of 15 flagship initiatives.\n\n## References\n\n- Barron et al. (2022)\nJonathan T. Barron, Ben Mildenhall, Dor Verbin, Pratul P. Srinivasan, and Peter Hedman.\n\nMip-nerf 360: Unbounded anti-aliased neural radiance fields.\n\nIn _CVPR_, 2022.\n\n- Brown et al. (2020)\nTom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei.\n\nLanguage models are few-shot learners.\n\nIn _NeurIPS_, 2020.\n\n- Chan et al. (2023)\nEric R Chan, Koki Nagano, Matthew A Chan, Alexander W Bergman, Jeong Joon Park, Axel Levy, Miika Aittala, Shalini De Mello, Tero Karras, and Gordon Wetzstein.\n\nGenerative novel view synthesis with 3d-aware diffusion models.\n\nIn _ICCV_, 2023.\n\n- Chang et al. (2015)\nAngel X Chang, Thomas Funkhouser, Leonidas Guibas, Pat Hanrahan, Qixing Huang, Zimo Li, Silvio Savarese, Manolis Savva, Shuran Song, Hao Su, et al.\n\nShapenet: An information-rich 3d model repository.\n\n_arXiv preprint arXiv:1512.03012_, 2015.\n\n- Charatan et al. (2024)\nDavid Charatan, Sizhe Lester Li, Andrea Tagliasacchi, and Vincent Sitzmann.\n\npixelsplat: 3d gaussian splats from image pairs for scalable generalizable 3d reconstruction.\n\nIn _CVPR_, 2024.\n\n- Chen et al. (2024a)\nAnpei Chen, Haofei Xu, Stefano Esposito, Siyu Tang, and Andreas Geiger.\n\nLara: Efficient large-baseline radiance fields.\n\nIn _ECCV_, 2024a.\n\n- Chen et al. (2023)\nHansheng Chen, Jiatao Gu, Anpei Chen, Wei Tian, Zhuowen Tu, Lingjie Liu, and Hao Su.\n\nSingle-stage diffusion nerf: A unified approach to 3d generation and reconstruction.\n\nIn _ICCV_, 2023.\n\n- Chen et al. (2024b)\nYuedong Chen, Haofei Xu, Chuanxia Zheng, Bohan Zhuang, Marc Pollefeys, Andreas Geiger, Tat-Jen Cham, and Jianfei Cai.\n\nMvsplat: Efficient 3d gaussian splatting from sparse multi-view images.\n\nIn _ECCV_, 2024b.\n\n- Choy et al. (2019)\nChristopher Choy, JunYoung Gwak, and Silvio Savarese.\n\n4d spatio-temporal convnets: Minkowski convolutional neural networks.\n\nIn _CVPR_, 2019.\n\n- Deitke et al. (2023)\nMatt Deitke, Dustin Schwenk, Jordi Salvador, Luca Weihs, Oscar Michel, Eli VanderBilt, Ludwig Schmidt, Kiana Ehsani, Aniruddha Kembhavi, and Ali Farhadi.\n\nObjaverse: A universe of annotated 3d objects.\n\nIn _CVPR_, 2023.\n\n- Downs et al. (2022)\nLaura Downs, Anthony Francis, Nate Koenig, Brandon Kinman, Ryan Hickman, Krista Reymann, Thomas B McHugh, and Vincent Vanhoucke.\n\nGoogle scanned objects: A high-quality dataset of 3d scanned household items.\n\nIn _ICRA_, 2022.\n\n- Fan et al. (2024)\nZhiwen Fan, Wenyan Cong, Kairun Wen, Kevin Wang, Jian Zhang, Xinghao Ding, Danfei Xu, Boris Ivanovic, Marco Pavone, Georgios Pavlakos, Zhangyang Wang, and Yue Wang.\n\nInstantsplat: Unbounded sparse-view pose-free gaussian splatting in 40 seconds, 2024.\n\n- Gao et al. (2024)\nRuiqi Gao, Aleksander Holynski, Philipp Henzler, Arthur Brussee, Ricardo Martin-Brualla, Pratul Srinivasan, Jonathan T. Barron, and Ben Poole.\n\nCAT3D: create anything in 3d with multi-view diffusion models.\n\n_arXiv_, 2405.10314, 2024.\n\n- Guédon & Lepetit (2024)\nAntoine Guédon and Vincent Lepetit.\n\nSugar: Surface-aligned gaussian splatting for efficient 3d mesh reconstruction and high-quality mesh rendering.\n\nIn _CVPR_, 2024.\n\n- Hein et al. (2024)\nJonas Hein, Frédéric Giraud, Lilian Calvet, Alexander Schwarz, Nicola Alessandro Cavalcanti, Sergey Prokudin, Mazda Farshad, Siyu Tang, Marc Pollefeys, Fabio Carrillo, and Philipp Fürnstahl.\n\nCreating a digital twin of spinal surgery: A proof of concept.\n\nIn _CVPR Workshops_, 2024.\n\n- Höllein et al. (2024)\nLukas Höllein, Aljaž Božič, Norman Müller, David Novotny, Hung-Yu Tseng, Christian Richardt, Michael Zollhöfer, and Matthias Nießner.\n\nViewdiff: 3d-consistent image generation with text-to-image models.\n\nIn _CVPR_, 2024.\n\n- Huang et al. (2024a)\nBinbin Huang, Zehao Yu, Anpei Chen, Andreas Geiger, and Shenghua Gao.\n\n2d gaussian splatting for geometrically accurate radiance fields.\n\nIn _ACM SIGGRAPH_, 2024a.\n\n- Huang et al. (2024b)\nRui Huang, Songyou Peng, Ayca Takmaz, Federico Tombari, Marc Pollefeys, Shiji Song, Gao Huang, and Francis Engelmann.\n\nSegment3d: Learning fine-grained class-agnostic 3d segmentation without manual labels.\n\nIn _ECCV_, 2024b.\n\n- Jin et al. (2021)\nYuhe Jin, Dmytro Mishkin, Anastasiia Mishchuk, Jiri Matas, Pascal Fua, Kwang Moo Yi, and Eduard Trulls.\n\nImage matching across wide baselines: From paper to practice.\n\n_IJCV_, 2021.\n\n- Kerbl et al. (2023)\nBernhard Kerbl, Georgios Kopanas, Thomas Leimkühler, and George Drettakis.\n\n3d gaussian splatting for real-time radiance field rendering.\n\n_ACM ToG_, 2023.\n\n- Kingma & Ba (2015)\nDiederik P. Kingma and Jimmy Ba.\n\nAdam: A method for stochastic optimization.\n\nIn _ICLR_, 2015.\n\n- Kwak et al. (2024)\nJeong-gi Kwak, Erqun Dong, Yuhe Jin, Hanseok Ko, Shweta Mahajan, and Kwang Moo Yi.\n\nVivid-1-to-3: Novel view synthesis with video diffusion models.\n\nIn _CVPR_, 2024.\n\n- Li et al. (2024a)\nJiahe Li, Jiawei Zhang, Xiao Bai, Jin Zheng, Xin Ning, Jun Zhou, and Lin Gu.\n\nDngaussian: Optimizing sparse-view 3d gaussian radiance fields with global-local depth normalization.\n\nIn _CVPR_, 2024a.\n\n- Li et al. (2024b)\nYanyan Li, Chenyu Lyu, Yan Di, Guangyao Zhai, Gim Hee Lee, and Federico Tombari.\n\nGeogaussian: Geometry-aware gaussian splatting for scene rendering.\n\nIn _arXiv_, 2024b.\n\n- Lin et al. (2024)\nXinqi Lin, Jingwen He, Ziyan Chen, Zhaoyang Lyu, Bo Dai, Fanghua Yu, Wanli Ouyang, Yu Qiao, and Chao Dong.\n\nDiffbir: Towards blind image restoration with generative diffusion prior, 2024.\n\n- Liu et al. (2023a)\nRuoshi Liu, Rundi Wu, Basile Van Hoorick, Pavel Tokmakov, Sergey Zakharov, and Carl Vondrick.\n\nZero-1-to-3: Zero-shot one image to 3d object.\n\nIn _ICCV_, 2023a.\n\n- Liu et al. (2023b)\nYuan Liu, Cheng Lin, Zijiao Zeng, Xiaoxiao Long, Lingjie Liu, Taku Komura, and Wenping Wang.\n\nSyncdreamer: Generating multiview-consistent images from a single-view image.\n\nIn _ICLR_, 2023b.\n\n- Mihajlovic et al. (2024)\nMarko Mihajlovic, Sergey Prokudin, Siyu Tang, Robert Maier, Federica Bogo, Tony Tung, and Edmond Boyer.\n\nSplatfields: Neural gaussian splats for sparse 3d and 4d reconstruction.\n\nIn _ECCV_, 2024.\n\n- Mildenhall et al. (2019)\nBen Mildenhall, Pratul P Srinivasan, Rodrigo Ortiz-Cayon, Nima Khademi Kalantari, Ravi Ramamoorthi, Ren Ng, and Abhishek Kar.\n\nLocal light field fusion: Practical view synthesis with prescriptive sampling guidelines.\n\n_ACM ToG_, 2019.\n\n- Mildenhall et al. (2020)\nBen Mildenhall, Pratul P. Srinivasan, Matthew Tancik, Jonathan T. Barron, Ravi Ramamoorthi, and Ren Ng.\n\nNerf: Representing scenes as neural radiance fields for view synthesis.\n\nIn _ECCV_, 2020.\n\n- Müller et al. (2022)\nThomas Müller, Alex Evans, Christoph Schied, and Alexander Keller.\n\nInstant neural graphics primitives with a multiresolution hash encoding.\n\n_ACM ToG_, 2022.\n\n- Paul et al. (2024)\nSoumava Paul, Christopher Wewer, Bernt Schiele, and Jan Eric Lenssen.\n\nSp2360: Sparse-view 360◦ scene reconstruction using cascaded 2d diffusion priors.\n\nIn _ECCV 2024 Workshop_, 2024.\n\n- Qi et al. (2017)\nCharles R Qi, Hao Su, Kaichun Mo, and Leonidas J Guibas.\n\nPointnet: Deep learning on point sets for 3d classification and segmentation.\n\nIn _CVPR_, 2017.\n\n- Rahaman et al. (2019)\nNasim Rahaman, Aristide Baratin, Devansh Arpit, Felix Draxler, Min Lin, Fred A. Hamprecht, Yoshua Bengio, and Aaron C. Courville.\n\nOn the spectral bias of neural networks.\n\nIn _ICML_, 2019.\n\n- Ravi et al. (2024)\nNikhila Ravi, Valentin Gabeur, Yuan-Ting Hu, Ronghang Hu, Chaitanya Ryali, Tengyu Ma, Haitham Khedr, Roman Rädle, Chloe Rolland, Laura Gustafson, Eric Mintun, Junting Pan, Kalyan Vasudev Alwala, Nicolas Carion, Chao-Yuan Wu, Ross Girshick, Piotr Dollár, and Christoph Feichtenhofer.\n\nSam 2: Segment anything in images and videos.\n\n_arXiv preprint arXiv:2408.00714_, 2024.\n\nURL [https://arxiv.org/abs/2408.00714](https://arxiv.org/abs/2408.00714 \"\").\n\n- Rombach et al. (2021)\nRobin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Björn Ommer.\n\nHigh-resolution image synthesis with latent diffusion models, 2021.\n\n- Sargent et al. (2024)\nKyle Sargent, Zizhang Li, Tanmay Shah, Charles Herrmann, Hong-Xing Yu, Yunzhi Zhang, Eric Ryan Chan, Dmitry Lagun, Li Fei-Fei, Deqing Sun, et al.\n\nZeronvs: Zero-shot 360-degree view synthesis from a single image.\n\nIn _CVPR_, 2024.\n\n- Sen et al. (2023)\nBipasha Sen, Gaurav Singh, Aditya Agarwal, Rohith Agaram, Madhava Krishna, and Srinath Sridhar.\n\nHyp-neRF: Learning improved neRF priors using a hypernetwork.\n\nIn _NeurIPS_, 2023.\n\n- Shi et al. (2024)\nRuoxi Shi, Xinyue Wei, Cheng Wang, and Hao Su.\n\nZerorf: Fast sparse view 360 reconstruction with zero pretraining.\n\nIn _CVPR_, 2024.\n\n- Tancik et al. (2023)\nMatthew Tancik, Ethan Weber, Evonne Ng, Ruilong Li, Brent Yi, Justin Kerr, Terrance Wang, Alexander Kristoffersen, Jake Austin, Kamyar Salahi, Abhik Ahuja, David McAllister, and Angjoo Kanazawa.\n\nNerfstudio: A modular framework for neural radiance field development.\n\nIn _ACM SIGGRAPH_, 2023.\n\n- Ulyanov et al. (2018)\nDmitry Ulyanov, Andrea Vedaldi, and Victor Lempitsky.\n\nDeep image prior.\n\nIn _CVPR_, 2018.\n\n- Wang (2023)\nPeng-Shuai Wang.\n\nOctformer: Octree-based transformers for 3d point clouds.\n\n_ACM ToG_, 2023.\n\n- Wang et al. (2024)\nShuzhe Wang, Vincent Leroy, Yohann Cabon, Boris Chidlovskii, and Jerome Revaud.\n\nDust3r: Geometric 3d vision made easy.\n\nIn _CVPR_, 2024.\n\n- Warburg\\* et al. (2023)\nFrederik Warburg\\*, Ethan Weber\\*, Matthew Tancik, Aleksander Hołyński, and Angjoo Kanazawa.\n\nNerfbusters: Removing ghostly artifacts from casually captured nerfs.\n\nIn _ICCV_, 2023.\n\n- Watson et al. (2023)\nDaniel Watson, William Chan, Ricardo Martin-Brualla, Jonathan Ho, Andrea Tagliasacchi, and Mohammad Norouzi.\n\nNovel view synthesis with diffusion models.\n\nIn _ICLR_, 2023.\n\n- Wewer et al. (2024)\nChristopher Wewer, Kevin Raj, Eddy Ilg, Bernt Schiele, and Jan Eric Lenssen.\n\nlatentsplat: Autoencoding variational gaussians for fast generalizable 3d reconstruction.\n\nIn _ECCV_, 2024.\n\n- Wu et al. (2024a)\nRundi Wu, Ben Mildenhall, Philipp Henzler, Keunhong Park, Ruiqi Gao, Daniel Watson, Pratul P. Srinivasan, Dor Verbin, Jonathan T. Barron, Ben Poole, and Aleksander Holynski.\n\nReconfusion: 3d reconstruction with diffusion priors.\n\nIn _CVPR_, 2024a.\n\n- Wu et al. (2022)\nXiaoyang Wu, Yixing Lao, Li Jiang, Xihui Liu, and Hengshuang Zhao.\n\nPoint transformer v2: Grouped vector attention and partition-based pooling.\n\nIn _NeurIPS_, 2022.\n\n- Wu et al. (2024b)\nXiaoyang Wu, Li Jiang, Peng-Shuai Wang, Zhijian Liu, Xihui Liu, Yu Qiao, Wanli Ouyang, Tong He, and Hengshuang Zhao.\n\nPoint transformer v3: Simpler, faster, stronger.\n\nIn _CVPR_, 2024b.\n\n- Xie et al. (2024)\nTianyi Xie, Zeshun Zong, Yuxing Qiu, Xuan Li, Yutao Feng, Yin Yang, and Chenfanfu Jiang.\n\nPhysgaussian: Physics-integrated 3d gaussians for generative dynamics.\n\nIn _CVPR_, 2024.\n\n- Xu et al. (2024)\nChao Xu, Ang Li, Linghao Chen, Yulin Liu, Ruoxi Shi, Hao Su, and Minghua Liu.\n\nSparp: Fast 3d object reconstruction and pose estimation from sparse views.\n\nIn _ECCV_, 2024.\n\n- Yang et al. (2023)\nYu-Qi Yang, Yu-Xiao Guo, Jian-Yu Xiong, Yang Liu, Hao Pan, Peng-Shuai Wang, Xin Tong, and Baining Guo.\n\nSwin3d: A pretrained transformer backbone for 3d indoor scene understanding, 2023.\n\n- Ye et al. (2024)\nVickie Ye, Ruilong Li, Justin Kerr, Matias Turkulainen, Brent Yi, Zhuoyang Pan, Otto Seiskari, Jianbo Ye, Jeffrey Hu, Matthew Tancik, et al.\n\ngsplat: An open-source library for gaussian splatting.\n\n_arXiv preprint arXiv:2409.06765_, 2024.\n\n- Yu et al. (2021)\nAlex Yu, Vickie Ye, Matthew Tancik, and Angjoo Kanazawa.\n\npixelNeRF: Neural radiance fields from one or few images.\n\nIn _CVPR_, 2021.\n\n- Yu et al. (2023)\nXianggang Yu, Mutian Xu, Yidan Zhang, Haolin Liu, Chongjie Ye, Yushuang Wu, Zizheng Yan, Tianyou Liang, Guanying Chen, Shuguang Cui, and Xiaoguang Han.\n\nMvimgnet: A large-scale dataset of multi-view images.\n\nIn _CVPR_, 2023.\n\n- Zhang et al. (2018)\nRichard Zhang, Phillip Isola, Alexei A Efros, Eli Shechtman, and Oliver Wang.\n\nThe unreasonable effectiveness of deep features as a perceptual metric.\n\nIn _CVPR_, 2018.\n\n- Zhao et al. (2021)\nHengshuang Zhao, Li Jiang, Jiaya Jia, Philip HS Torr, and Vladlen Koltun.\n\nPoint transformer.\n\nIn _ICCV_, 2021.\n\n- Zhu et al. (2024)\nZehao Zhu, Zhiwen Fan, Yifan Jiang, and Zhangyang Wang.\n\nFsgs: Real-time few-shot view synthesis using gaussian splatting.\n\nIn _ECCV_, 2024.\n\n\n## Appendix: SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\n\nWe provide further details on the evaluation datasets (Sec. [A](https://ar5iv.org/html/2411.06390#A1 \"Appendix A Evaluation Datasets ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")), implementation specifics (Sec. [B](https://ar5iv.org/html/2411.06390#A2 \"Appendix B Implementation Details ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")), and ablation experiments (Sec. [C](https://ar5iv.org/html/2411.06390#A3 \"Appendix C More Experiments ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). Additionally, we describe baseline implementations (Sec. [D](https://ar5iv.org/html/2411.06390#A4 \"Appendix D Baseline Implementations ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) and present comprehensive visual comparisons (Sec. [E](https://ar5iv.org/html/2411.06390#A5 \"Appendix E Comparisons with Baselines ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). Finally, we discuss the limitations of SplatFormer in Sec. [F](https://ar5iv.org/html/2411.06390#A6 \"Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\").\n\n## Appendix A Evaluation Datasets\n\nSynthetic Datasets.\nWe use Blender to render objects from ShapeNet (Chang et al., [2015](https://ar5iv.org/html/2411.06390#bib.bib4 \"\")), Objaverse-v1 (Deitke et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib10 \"\")), and GSO (Google Scanned Objects) (Downs et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib11 \"\")). The camera setups for the three evaluation sets are consistent: Ni​n=32subscript𝑁𝑖𝑛32N\\_{in}=32 input views cover the 360​°360°360\\\\degree azimuth and elevation angle ϕitalic-ϕ\\\\phi varies according to a sinusoidal function ranging between (0,ϕmax)0subscriptitalic-ϕmax(0,\\\\phi\\_{\\\\textrm{max}}). For each object in ShapeNet, we rotate the object’s shortest side with the z-axis and render a single set of input views with ϕmax=10​°subscriptitalic-ϕmax10°\\\\phi\\_{\\\\textrm{max}}=10\\\\degree. For each object in Objaverse-v1 and GSO, we render two sets of input views with ϕmax=10​°,20​°subscriptitalic-ϕmax10°20°\\\\phi\\_{\\\\textrm{max}}=10\\\\degree,20\\\\degree. The out-of-distribution (OOD) test set consists of Nout=9subscript𝑁out9N\\_{\\\\textrm{out}}=9 views, with ϕood=(70​°,80​°,90​°)subscriptitalic-ϕood70°80°90°\\\\phi\\_{\\\\textrm{ood}}=(70\\\\degree,80\\\\degree,90\\\\degree) and randomly sampled azimuths. The rendered resolution is 256×256256256256\\\\times 256 pixels. The resulting ShapeNet-OOD, Objaverse-OOD, GSO-OOD datasets include a total of 20, 40, and 40 input-test experiments, respectively.\nWe enable specular effects to achieve more realistic rendering results when using objects from Objaverse-v1 and GSO, and disable specular reflections for ShapeNet to study a more basic illumination setup.\n\nReal-world OOD iPhone Dataset.\nWe have captured 4 scenes featuring an object of interest using an iPhone, with the images and camera setups shown in Fig. [F.5](https://ar5iv.org/html/2411.06390#A6.F5 \"Figure F.5 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"). Each scene contains around 30 input views and 4 OOD test views. During evaluation, we first generate foreground masks of the objects of interest for the OOD test view using SAM2 (Ravi et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib35 \"\")), and then only evaluate the pixels within the mask.\nTo refine the 3DGS representation via SplatFormer, we crop out the part of the 3DGS point cloud that corresponds to the foreground region using selection tools in MeshLab. This may also be easily done by automatic 3D detection methods like Segment3D (Huang et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib18 \"\")). The cropped splats are then refined via SplatFormer and rendered using the standard 3DGS-based rendering pipeline. We resize images to the resolution of 300×400300400300\\\\times 400 for both 3DGS training and evaluation.\n\nWe present examples from the four datasets, as well as the degraded 3DGS OOD renderings, in Fig. [A.1](https://ar5iv.org/html/2411.06390#A1.F1 \"Figure A.1 ‣ Appendix A Evaluation Datasets ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"). It is worth noting that the dense input capture covers a substantial portion of the objects, eliminating the need for novel view synthesis (NVS) methods to hallucinate unobserved parts during target view generation.\n\n|  | Input Views | OOD Test Views | 3DGS Results |\n| ++++++ShapeNet-OOD | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/train_4x8_03001627-1c199ef7e43188887215a1e3ffbff428-10.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_gt_3x3_03001627-1c199ef7e43188887215a1e3ffbff428-10.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_3dgs_3x3_03001627-1c199ef7e43188887215a1e3ffbff428-10.jpeg) |\n| ++++++Objaverse-OOD | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/train_4x8_3e288ee8aced4a0797e66d53536112b1-10.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_gt_3x3_3e288ee8aced4a0797e66d53536112b1-10.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_3dgs_3x3_3e288ee8aced4a0797e66d53536112b1-10.jpeg) |\n| ++++++++GSO-OOD | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/train_4x8_Olive_Kids_Dinosaur_Land_Pack_n_Snack-10.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_gt_3x3_Olive_Kids_Dinosaur_Land_Pack_n_Snack-10.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_3dgs_3x3_Olive_Kids_Dinosaur_Land_Pack_n_Snack-10.jpeg) |\n| ++++++RealWorld OOD | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/train_4x8_1Hydrant.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_gt_2x2_1Hydrant.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/dataset/test_3dgs_2x2_1Hydrant.jpeg) |\n\nFigure A.1: Examples from our OOD-NVS evaluation sets and the artifacts in 3DGS.\n\n## Appendix B Implementation Details\n\nNetwork Arhitecture.\nThe point transformer encoder begins with an MLP embedding layer, followed by five down-pooling and four up-pooling stages, ultimately producing features with a dimensionality of V=96𝑉96V=96. The down-pooling stages contain (2,2,2,6,2)22262(2,2,2,6,2) attention blocks and have hidden dimensions of (64,96,128,256,512)6496128256512(64,96,128,256,512). Each stage, except the first, is followed by a down-sampling grid-pooling layer. The up-pooling stages consist of (2,2,2,2)2222(2,2,2,2) attention blocks, with hidden dimensions of (256,128,96,96)2561289696(256,128,96,96). Each stage, except the first, is preceded by an up-sampling grid-pooling layer. A grid resolution of 384 is used to voxelize the point cloud, and the strides for the grid-pooling layers are set to (1,2,2,2)1222(1,2,2,2). For the architecture details of attention blocks and grid pooling please refer to Wu et al. ( [2024b](https://ar5iv.org/html/2411.06390#bib.bib49 \"\")).\n\nThe feature decoder is composed of five separate MLP branches, which are responsible for predicting the residuals for the means, opacity, quaternion, scales, and spherical harmonics coefficients. Each MLP branch consists of four linear layers, with hidden dimensions of 512 and ReLU activations for all but the last layer. Tanh activation is applied to normalize the residual means to the range \\[0,1\\]01\\[0,1\\]. Additionally, the positions of the input 3D Gaussians are normalized to \\[0,1\\]3superscript013\\[0,1\\]^{3}. The total number of parameters is approximately 50 million.\n\nTraining Dataset Curation. The ShapeNet training set contains 33k objects, all available for non-commercial research and educational purposes. The Objaverse training set includes 48k objects from Objaverse-1.0 (Deitke et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib10 \"\")), all licensed under Creative Commons for distribution. We use Blender to render each object with 32 low-elevation views and 5 top-down views. Diffuse lighting and materials are applied in ShapeNet scenes, while specular effects and shadows are enabled in Objaverse scenes. For the rendered 2D low-elevation views, we use gsplat (Ye et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib53 \"\")) to optimize the initial 3D Gaussian splats (3DGS) for each scene. The spherical harmonics degree is set to 0 for ShapeNet and 3 for Objaverse. To reduce computational costs, we terminate the optimization early at 10k steps, where evaluation performance levels off. We process the scenes using 48 RTX-2080Ti GPUs, with rendering and 3DGS optimization taking approximately 3 minutes per scene. It takes 2 days to generate each training dataset.\n\nTraining.\nFor each scene, we render 4 target images at each iteration, with 70% OOD views and 30% input views, for photometric supervision. For the training of our full model, we use 8 RTX-3090s with one scene per GPU, set gradient accumulation steps as 4, and train for 150k iterations, which takes around 2 days. We use Adam optimizer with a constant learning rate of 3e-5.\n\n## Appendix C More Experiments\n\nSplatFormer vs 2D Denoising. In addition to the metrics in Tab. [5](https://ar5iv.org/html/2411.06390#S5 \"5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"),\nFig. [C.1](https://ar5iv.org/html/2411.06390#A3.F1 \"Figure C.1 ‣ Appendix C More Experiments ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") presents a visual comparison between the 2D denoising method DiffBIR (Lin et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib25 \"\")) and SplatFormer on ShapeNet-OOD test views. Though the DiffBIR-stage1 model removes certain artifacts, the improvements are inconsistent across views. Retraining a 3DGS model using the generated images fails to fully address these limitations. Additionally, the stage-1 model struggles to infer correct geometry from the noisy 2D images, causing errors that propagate to stage-2, which may introduce unfaithful hallucinations. In contrast, our method processes both input and output in 3D, resulting in more accurate and consistent artifact removal.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| 3DGS | DiffBIR-stage1 | DiffBIR-stage2 | Ours |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/vs-2d_1x2/03001627-bbab666132885a14ea96899baeb81e22_10_3DGS.png) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/vs-2d_1x2/03001627-bbab666132885a14ea96899baeb81e22_10_1st-stage.png) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/vs-2d_1x2/03001627-bbab666132885a14ea96899baeb81e22_10_2nd-stage.png) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/vs-2d_1x2/03001627-bbab666132885a14ea96899baeb81e22_10_ours.png) |\n|  | Retrain-3DGS with stage1 | Retrain-3DGS with stage2 | Ground Truth |\n|  | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/vs-2d_1x2/03001627-bbab666132885a14ea96899baeb81e22_10_1st-stage-distilled.png) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/vs-2d_1x2/03001627-bbab666132885a14ea96899baeb81e22_10_2nd-stage-distilled.png) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/vs-2d_1x2/03001627-bbab666132885a14ea96899baeb81e22_10_GT.png) |\n\nFigure C.1: We adopt DiffBIR (Lin et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib25 \"\")) to denoise artifacts in 2D space. Additionally, we retrain 3DGS using the denoised images to improve multi-view consistency. However, 2D denoising alone is insufficient for fully recovering geometry, as it relies solely on 2D inputs.\n\n3D vs 2D supervision. We use photometric supervision (Eq. [7](https://ar5iv.org/html/2411.06390#S4.E7 \"In 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) to train our model. An alternative training approach involves supervising the output of SplatFormer with direct 3D labels, _e.g_. such as an optimal 3DGS trained using full-degree views observation. As shown in Fig. [C.2](https://ar5iv.org/html/2411.06390#A3.F2 \"Figure C.2 ‣ Appendix C More Experiments ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), we find that the 3D direct supervision does not consistently enhance the results and presents several limitations. First, it is time consuming to prepare full-degree renderings, making it impractical to scale up the training dataset. Second, it is impossible to train a neural network to fit the 3D signals with 100% accuracy due to the spectral bias (Rahaman et al., [2019](https://ar5iv.org/html/2411.06390#bib.bib34 \"\")), and small errors in 3D prediction can still lead to significant 2D artifacts.\n\n![Refer to caption](https://ar5iv.org/html/2411.06390/assets/x3.png)Figure C.2: We overfit two SplatFormers on 20 scenes with 2D partial or 3D direct supervision. We show the training curves and the OOD-view rendering of a training example. Minimizing 3D loss does not improve PSNR of the 2D renderings. Without fitting the 3D label with 100% accuracy, the model with 3D supervision cannot remove artifacts in 2D renderings.\n\nTo demonstrate this, we conduct a toy experiment where we overfit the 20 scenes of the ShapeNet-OOD evaluation set. For each scene, besides the flawed 3DGS trained on low-elevation input views, we render 24 views from the upper hemi-sphere. We combine the 24 upper views and the 32 lower views as input views to optimize the flawed 3DGS that is initially trained with the lower views. We disable densification and prunning during the 3DGS optimization so as to ensure the one-to-one correspondence between the input 3DGS and the optimal one. The yielded 3DGS can serve as a pseudo 3D label for SplatFormer training. Then we train two SplatFormers using the 20 scenes. One is trained with photometric loss and the other is trained with the L1 norm error between the output 3D attributes and the pseudo 3D labels. Fig. [C.2](https://ar5iv.org/html/2411.06390#A3.F2 \"Figure C.2 ‣ Appendix C More Experiments ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") shows that while both training objectives can be minimized, only 2D supervision can lead to the improvement in the rendering quality. Therefore, we employ 2D supervision to train SplatFormer, which enhances rendering quality and improves efficiency.\n\n## Appendix D Baseline Implementations\n\nInstantNGP.\nWe use the officially released code222https://github.com/NVlabs/instant-ngp of InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")). Each scene in our OOD benchmarks is trained for 5k iterations using the default configuration provided in the code. We also tried training the model for more iterations, _e.g_. 20k iterations, but observed no improvement in results. This is most likely due to the fact that we are evaluating on out-of-distribution test camera scenarios. The camera position is scaled and offset, following the paper, to position the reconstructed object within a \\[0,0,0\\] to \\[1,1,1\\] unit box.\n\nMipNeRF360.\nWe use the officially released code333https://github.com/google-research/multinerf of MipNeRF360 (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")) to produce its results on our OOD benchmarks. The model is trained using batch size 512 for 250k iterations, with learning rate 0.00025. The training of each scene takes approximately 7 hours on a single RTX-3090 GPU. The near and far planes used in volumetric rendering are determined by the ray bounding box intersection following the approach used in InstantNGP. The random background trick used in InstantNGP is also applied to help removing the floaters.\n\n3D Gaussian Splatting.\nWe use the gsplat (Ye et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib53 \"\")) and the default hyperparameters of the toolbox. Specifically, we set the spherical harmonics degree to 3, the number of iterations to 30k, warm-up steps to 500, densifying and culling Gaussians every 500 step, and we stop the density control at 15k steps. For synthetic datasets, we use the ground truth camera poses provided by the Blender rendering. Given that COLMAP struggles to reconstruct certain synthetic objects due to symmetry and smooth textures, we follow the original 3D Gaussian Splatting (3DGS) approach (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) by randomly sampling 50,000 points within the bounding box of the objects. For our real-world iPhone captures, we first estimate camera poses using all views and then perform point triangulation, with only the input views used to estimate the initial point cloud.\n\n2D Gaussian Splatting.\nWe test 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")) on our benchmarks using the officially released code444https://github.com/hbb1/2d-gaussian-splatting. The model is trained for 30k iterations using the default configurations, with an additional random background trick used in (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")) to help removing the floaters.\n\nSplatFields.\nWe use the officially released code555https://github.com/markomih/SplatFields of SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")).\nWe run the method with its default configuration for over 30k training steps on both ShapeNet and Objaverse datasets.\n\nInstantSplat (DUSt3R-inititialized 3DGS).\nInstantSplat (Fan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")) utilizes an end-to-end dense stereo model, namely DUSt3R (Wang et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib43 \"\")), to estimate dense point clouds and camera poses for 3DGS initialization. To assess the effectiveness of dense initialization on our OOD-NVS task, we feed all input views, and the given camera poses into the DUSt3R reconstruction pipeline. Given the large number of training views, DUSt3R produces approximately 10 million points, which can lead to out-of-memory issues during 3DGS optimization. We randomly sample 100k points from the total point cloud as initialization for 3DGS. We avoid selecting the 100k points with the highest confidence as this would disproportionately retain floors and walls, which tend to have overly high confidence scores in DUSt3R. We then replace the random initialization in our 3DGS implementation with the dense point clouds, leaving the rest of the 3DGS optimization process unchanged.\n\nFSGS.\nWe use the officially released code666https://github.com/VITA-Group/FSGS of FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")).\nWe run the method with its default configuration with depth supervision from synthesized psuedo views for 10k training steps on both ShapeNet and Objaverse datasets, and apply random background tricks during training to avoid floater artifacts.\n\nSSDNeRF. We use the official code 777https://github.com/Lakonik/SSDNeRF of SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")). We train the method using the default hyperparameters for 20k steps on both the ShapeNet and Objaverse datasets, utilizing all available training views. We observe that the proposed image-guided sampling and finetuning of the sampled codes leads to overfitting on the in-distribution training views, and therefore the performance on OOD test views does not exhibit further improvement beyond 20k steps.\n\nNerfbusters.\nWe use the official codebase888https://github.com/ethanweber/nerfbusters of Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")).\nWe first train Nerfacto (Tancik et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib40 \"\")) for 30k steps, and then run Nerfbusters on pretrained Nerfacto models for 5k steps to remove the artifacts learned by Nerfacto. The same near and far planes calculation strategy described in MipNeRF360 is employed.\n\nSyncDreamer.\nWe use the official codebase999https://github.com/liuyuan-pal/SyncDreamer of SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")). SyncDreamer only supports single input view, which is far from sufficient to reconstruct the feature volume needed for the out-of-distribution view synthesis. Since the focus point of our training cameras are not located at the origins, we remove the camera embedding vectors which rely on relative azimuths and elevations in their synthetic setup. Note that training SyncDreamer requires significantly greater computational resources (multiple Nvidia A100s), which is not comparable with ones required to train our method and other baselines (RTX-3090s).\n\nLaRa.\nWe use LaRa’s released codebase101010https://github.com/autonomousvision/LaRa and train two models on the same ShapeNet-OOD and Objaverse-OOD training sets as our method and evaluate their performances on the respective benchmarks. Due to hardware limitations, LaRa can only process a maximum of four input views on RTX-3090 GPUs. To maximize scene coverage, we randomly select the four most widely separated input views. For training, we uniformly sample from all available views, incorporating both in-distribution and out-of-distribution views for the 2D image loss. During inference, we feed the model four input views and rasterize the predicted Gaussian primitives to the OOD test views. While it is possible to divide the input views into groups of four, and then combine the processed resulting primitives for rasterization, this approach compromises global consistency and yields worse performance compared to using just four views directly. Following LaRa’s default setup (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")), we train each model for 150k iterations using 8 RTX 3090 GPUs, which takes approximately 2 days. We initialize training with LaRa’s pretrained weights, which speeds up convergence and improves performance.\n\nOther Baselines.\nWe acknowledge that some related approaches are not included in this paper due to redundancy or infeasibility. DNGaussian (Li et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib23 \"\")) supervises 3DGS training with depth maps predicted by monocular depth estimators. The idea is similar to its concurrent work FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")) which, in our OOD-NVS dense capture setup, does not outperform 3DGS. CAT3D (Gao et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib13 \"\")) and ReconFusion (Wu et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib47 \"\")) use internal image diffusion models for initialization but neither has released code and models. GeNVS (Chan et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib3 \"\")) and 3DiM (Watson et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib45 \"\")) are also publicly unavailable.\nTo compare with methods that utilize pretrained 2D diffusion models, we evaluate SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")) which is designed to achieve better multi-view consistency. Other similar approaches like ZeroNVS (Sargent et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib37 \"\")), Zero123 (Liu et al., [2023a](https://ar5iv.org/html/2411.06390#bib.bib26 \"\")), and Vivid123 (Kwak et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib22 \"\")), only support single-view input. We also tried ViewDiff (Höllein et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib16 \"\")), a similar 2D-prior method where each model is trained for a single object category. However, we found that ViewDiff could not converge when trained on multiple object categories in our cases. Lastly, in the category of learning-based 2D-to-3D methods, SpaRP (Xu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib51 \"\")), MVSplat (Chen et al., [2024b](https://ar5iv.org/html/2411.06390#bib.bib8 \"\")), and LatentSplat (Wewer et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib46 \"\")) are constrained by the memory limitations of RTX 3090 GPUs, allowing a maximum of four input views. We found that training these methods on our dataset with four large-baseline input views, as we did with LaRa, resulted in failure. This is because these methods rely on overlapping input views to compute cross-view correspondences. We also attempted to partition the consecutive input views into groups and aggregate the predicted Gaussian splats after running each group independently. However, this approach introduced significant global inconsistencies. Consequently, we do not report their results due to their incompatibility with our OOD-NVS task.\n\n## Appendix E Comparisons with Baselines\n\nEvaluation Details. As mentioned in Sec. [A](https://ar5iv.org/html/2411.06390#A1 \"Appendix A Evaluation Datasets ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), we create two experimental setups for each scene in Objaverse and GSO, with the same test views yet different input views with maximum elevations ϕmax=10​°subscriptitalic-ϕmax10°\\\\phi\\_{\\\\textrm{max}}=10\\\\degree and 20​°20°20\\\\degree respectively. The final evaluation scores reported in Tab. [1](https://ar5iv.org/html/2411.06390#S4.T1 \"Table 1 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") and Tab. [5](https://ar5iv.org/html/2411.06390#S5.F5 \"Figure 5 ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") are averaged across the two sets of experiments. We also report the separate scores of the two sets in Tab. [E.1](https://ar5iv.org/html/2411.06390#A5.T1 \"Table E.1 ‣ Appendix E Comparisons with Baselines ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") (Objaverse-OOD) and Tab. [E.2](https://ar5iv.org/html/2411.06390#A5.T2 \"Table E.2 ‣ Appendix E Comparisons with Baselines ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") (GSO-OOD). The evaluation scores of ϕmax=20​°subscriptitalic-ϕmax20°\\\\phi\\_{\\\\textrm{max}}=20\\\\degree are better than ϕmax=10​°subscriptitalic-ϕmax10°\\\\phi\\_{\\\\textrm{max}}=10\\\\degree as the input viewing angles are slightly closer to the OOD test views. However in both setups, the elevation deviation, with ϕood≥70​°subscriptitalic-ϕood70°\\\\phi\\_{\\\\textrm{ood}}\\\\geq 70\\\\degree, is quite large and our method outperforms the baselines consistently.\n\nTable E.1: Detailed Results on Objaverse-OOD. We report the separate OOD evaluation results of the two sets of experiments with input views’ maximum elevations ϕmax=(10​°,20​°)subscriptitalic-ϕmax10°20°\\\\phi\\_{\\\\textrm{max}}=(10\\\\degree,20\\\\degree). The average results are used in Tab. [1](https://ar5iv.org/html/2411.06390#S4.T1 \"Table 1 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"). Colors indicate the 1st, 2nd, and 3rd best-performing models.\n\n| Methods | ϕm​a​x=10​°subscriptitalic-ϕ𝑚𝑎𝑥10°\\\\phi\\_{max}=10\\\\degree | ϕm​a​x=20​°subscriptitalic-ϕ𝑚𝑎𝑥20°\\\\phi\\_{max}=20\\\\degree | Average |\n| --- | --- | --- | --- |\n|  | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")) | 18.94 | 0.695 | 0.301 | 20.33 | 0.749 | 0.259 | 19.64 | 0.722 | 0.280 |\n| InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")) | 18.60 | 0.662 | 0.334 | 20.34 | 0.726 | 0.285 | 19.47 | 0.694 | 0.310 |\n| 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) | 18.30 | 0.642 | 0.305 | 20.18 | 0.703 | 0.265 | 19.24 | 0.673 | 0.285 |\n| 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")) | 19.75 | 0.712 | 0.269 | 21.38 | 0.766 | 0.226 | 20.56 | 0.739 | 0.248 |\n| SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")) | 18.23 | 0.669 | 0.326 | 19.46 | 0.707 | 0.291 | 18.85 | 0.688 | 0.309 |\n| InstantSplat (Fan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")) | 13.75 | 0.483 | 0.436 | 14.63 | 0.516 | 0.422 | 14.20 | 0.500 | 0.429 |\n| FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")) | 17.95 | 0.625 | 0.349 | 19.69 | 0.685 | 0.297 | 18.82 | 0.655 | 0.323 |\n| SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")) | 16.22 | 0.523 | 0.454 | 17.58 | 0.580 | 0.414 | 16.90 | 0.552 | 0.434 |\n| Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")) | 15.25 | 0.643 | 0.318 | 18.49 | 0.735 | 0.255 | 16.87 | 0.689 | 0.287 |\n| SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")) | 9.64 | 0.423 | 0.487 | 9.81 | 0.418 | 0.491 | 9.72 | 0.421 | 0.489 |\n| LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")) | 18.56 | 0.672 | 0.336 | 19.53 | 0.697 | 0.313 | 19.04 | 0.684 | 0.324 |\n| \\\\hdashlineSplatFormer | 22.15 | 0.795 | 0.190 | 23.96 | 0.846 | 0.150 | 23.06 | 0.821 | 0.170 |\n\nTable E.2: Detailed Results on GSO-OOD. We report the separate OOD evaluation results of the two sets of experiments with input views’ maximum elevations ϕmax=(10​°,20​°)subscriptitalic-ϕmax10°20°\\\\phi\\_{\\\\textrm{max}}=(10\\\\degree,20\\\\degree). The average results are used in Tab. [5](https://ar5iv.org/html/2411.06390#S5 \"5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"). Colors indicate the 1st, 2nd best-performing models.\n\n| Methods | ϕm​a​x=10​°subscriptitalic-ϕ𝑚𝑎𝑥10°\\\\phi\\_{max}=10\\\\degree | ϕm​a​x=10​°subscriptitalic-ϕ𝑚𝑎𝑥10°\\\\phi\\_{max}=10\\\\degree | Average |\n| --- | --- | --- | --- |\n|  | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")) | 22.43 | 0.810 | 0.209 | 23.39 | 0.837 | 0.174 | 22.91 | 0.824 | 0.192 |\n| Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")) | 13.84 | 0.633 | 0.329 | 18.06 | 0.724 | 0.269 | 15.95 | 0.678 | 0.299 |\n| 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")) | 22.26 | 0.786 | 0.227 | 24.31 | 0.845 | 0.180 | 23.29 | 0.816 | 0.204 |\n| 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) | 20.71 | 0.709 | 0.274 | 22.85 | 0.784 | 0.226 | 21.78 | 0.746 | 0.250 |\n| \\\\hdashlineSplatFormer | 24.07 | 0.840 | 0.168 | 25.95 | 0.886 | 0.127 | 25.01 | 0.863 | 0.148 |\n\nVisual Comparisons. We show more visual comparisons with all the baselines in Fig. [F.2](https://ar5iv.org/html/2411.06390#A6.F2 \"Figure F.2 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") (ShapeNet-OOD), Fig. [F.3](https://ar5iv.org/html/2411.06390#A6.F3 \"Figure F.3 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") (Objaverse-OOD), Fig. [F.4](https://ar5iv.org/html/2411.06390#A6.F4 \"Figure F.4 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") (GSO-OOD), and Fig. [F.5](https://ar5iv.org/html/2411.06390#A6.F5 \"Figure F.5 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") (Real-world OOD). We also provide a supplementary video to show the comparisons.\n\nAmong standard NVS methods, volumetric representations, such as MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")) and InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")) often suffer from floater artifacts. While MipNeRF360 excels at capturing fine details in certain examples, its lengthy reconstruction process (7 hours) and slow rendering speed (less than 1 fps) limit its applicability in many real-world tasks.\n\nAmong the regularized 3DGS variants, SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")) produces more regularized Gaussians compared to the standard 3DGS but also loses some fine details in the process. 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")) generates more surface-aligned Gaussians than 3DGS but still exhibits spiky artifacts due to overfitting to the input views.\n\nFor prior-enhanced NVS methods, SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")), which is designed to learn category-specific object priors in its original paper, struggles to learn cross-category priors in our training set, resulting in severe artifacts. Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")) incorrectly identifies many structures as floaters, leading to the removal of significant parts of objects. While FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")) achieves a more balanced densification of Gaussians and smoother depth regularization, it only offers marginal visual improvements over 3DGS and continually fails in certain scenarios. InstantSplat (Fan et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")) also cannot mitigate the artifacts caused by overfitting by using a dense point cloud initialization.\n\nAmong learning-based feed-forward methods, LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")) can infer plausible geometry and textures from input views. However, its reliance on a limited number of input views and voxel representation restricts its ability to process and represent high-frequency details. SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")) fails to synthesize the deviated test view as it only supports single input view which is quite insufficient for OOD-NVS.\n\n| Four of Input Views | SplatFields | MipNeRF360 | 3DGS | Ours | GT |\n| --- | --- | --- | --- | --- | --- |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e66059c275548c4a183b2f9e085f953-10-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/failurecase_highlight/3e66059c275548c4a183b2f9e085f953-10-test_elevation90_step2_splatfield_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/failurecase_highlight/3e66059c275548c4a183b2f9e085f953-10-test_elevation90_step2_mipnerf360_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/failurecase_highlight/3e66059c275548c4a183b2f9e085f953-10-test_elevation90_step2_3dgs_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/failurecase_highlight/3e66059c275548c4a183b2f9e085f953-10-test_elevation90_step2_ours_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/failurecase_highlight/3e66059c275548c4a183b2f9e085f953-10-test_elevation90_step2_GT_highlight.jpeg) |\n\nFigure E.1: Failure Case. While our method effectively reduces artifacts in 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) and outperforms SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")), it does not fully restore some high-frequency details. MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")) excels in detail modeling but suffers from floating issues.\n\n## Appendix F Limitations and Future Directions\n\nWe outline the current limitations of our method and suggest possible future research directions.\n\nFine-grained Details.\nOur approach occasionally struggles to recover high-frequency details, particularly in complex textures, as shown in Fig. [E.1](https://ar5iv.org/html/2411.06390#A5.F1 \"Figure E.1 ‣ Appendix E Comparisons with Baselines ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\").\nWhile our method reduces artifacts in 3DGS and outperforms previous variants like SplatFields, it still requires improvement in rendering texture details. The limitation may stem from the restricted capacity of our current point transformer backbone which uses grid pooling on the input point cloud to expand the receptive field. Larger grid resolutions and smaller pooling strides can be beneficial, but this requires more computational budgets.\nFuture work can innovate the design of the point transformer architecture, _e.g_. integrating multi-resolution hierarchy, to capture and recover high-frequency details. Designing a trainable adaptive population mechanisim to densify Gaussians in high-frequency regions can also help represent the details.\n\nGeneralization to Real-world Images.\nImproving generalization to real-world images remains a key area for future development. Currently, the method is trained exclusively on synthetic datasets, which limits its ability to model complex lighting conditions and textures found in realistic environments. Furthermore, objects in datasets like ShapeNet and Objaverse typically exhibit simpler textures and geometries . To enhance real-world transfer, future work could focus on making the rendering process more realistic and curating larger datasets that include complex 3D assets. Incorporating a balanced mix of synthetic and real-world datasets during training would also help improve the model’s performance in more diverse, real-world scenarios.\n\nImproving Other 3D Representations.\nOur approach has the potential to extend beyond 3DGS and be applied to other point-based 3D representations, such as 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")), which has demonstrated superior performance on OOD-NVS evaluation sets. Training SplatFormer to refine 2DGS could further boost its performance in OOD-NVS tasks. Additionally, incorporating a geometry regularization term for the predicted Gaussian primitives, similar to 2DGS, alongside the photometric loss, presents a promising direction for improving the accuracy and robustness of these representations.\n\nTable F.1: Results on MVImgNet.\n\n|  | PSNR | SSIM | LPIPS |\n| --- | --- | --- | --- |\n| 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")) | 19.81 | 0.728 | 0.432 |\n| SplatFormer | 21.68 | 0.757 | 0.424 |\n\nUnbounded Scenes and Diverse Camera Setups.\nWhile this paper primarily focuses on object-centric scenes in this project, the concept of learning data-driven priors for out-of-distribution views holds promise for extending to unbounded, in-the-wild scenes. Another promising direction is enhancing OOD renderings across more diverse camera setups beyond the bottom-to-top task. To be more specific, MVImgNet (Yu et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib55 \"\")) serves as a strong testbed, offering substantial real-world multi-view images. We also conduct some preliminary experiments to demonstrate its potential. In MVImgNet, each scene is captured via a semi-circular camera trajectory around an object. To study OOD renderings, we split each trajectory into frontal and side views, using one as input and the other as test views. In these OOD test views, 3DGS produces significant artifacts. To adapt our method to this OOD-NVS setting, we constructed a training set with 4k MVImgNet scenes featuring flawed 3DGSs and multi-view images, and trained SplatFormer accordingly. We also create a evaluation set consisting of 70 held-out scenes using the same front-side camera setup. For each evaluation scene, we use the trained SplatFormer to refine the flawed 3DGS, trained only on the frontal/side input views, in a single feed-forward pass. Then we render the refined 3DGS from the side/frontal deviated test views. The evaluation metrics are reported in Tab. [F.1](https://ar5iv.org/html/2411.06390#A6.T1 \"Table F.1 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), and visual results are shown in Fig. [F.1](https://ar5iv.org/html/2411.06390#A6.F1 \"Figure F.1 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"). SplatFormer can remove floaters in the empty space and achieves better metrics than 3DGS. However, it struggles to refine the geometry and appearance of foreground objects. This limitation may stem from the normalization and downpooling operations in the point transformer, which disproportionately downscales foreground objects compared to the large-scale background point clouds, making it difficult for SplatFormer to capture foreground details. We hypothesize that designing a novel adaptive downpooling mechanism within the point transformer may address this issue. Additionally, a divide-and-conquer strategy— _i.e_., decomposing scenes into objects and background and processing each component separately—could also be beneficial. We plan to explore these directions in future work.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Camera Setup | 3DGS | Ours | GT |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/x4.png) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results_mvimgnet/0_pred_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results_mvimgnet/0_ours_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results_mvimgnet/0_gt.jpeg) |\n| Camera Setup | 3DGS | Ours | GT |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/x5.png) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results_mvimgnet/6_pred.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results_mvimgnet/6_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results_mvimgnet/6_gt.jpeg) |\n\nFigure F.1: The potential of SplatFormer in handling in-the-wild, unbounded scenes. When trained on MVImgNet (in-the-wild unbounded scenes), SplatFormer learns to partially remove floaters, though refining objects’ flawed geometry remains a challenge.\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Four of Inputs | MipNeRF360 | Nerfbusters | InstantNGP | SyncDreamer | LaRa | SSDNeRF |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_instantngp.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_syncdreamer.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_ssdnerf.jpeg) |\n| GT | Ours | 2DGS | SplatFields | FSGS | 3DGS | InstantSplat |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_GT.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_fsgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03001627-1c199ef7e43188887215a1e3ffbff428-10-test_elevation80_step0_instantsplat.jpeg) |\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Four of Inputs | MipNeRF360 | Nerfbusters | InstantNGP | SyncDreamer | LaRa | SSDNeRF |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_instantngp.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_syncdreamer.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_ssdnerf.jpeg) |\n| GT | Ours | 2DGS | SplatFields | FSGS | 3DGS | InstantSplat |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_GT.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_fsgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/03046257-108b7ee0ca90a60cdb98a62365dd8bc1-10-test_elevation80_step2_instantsplat.jpeg) |\n\nFigure F.2: Results on ShapeNet-OOD. We compare our method with baselines: SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")), LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")), SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")), 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")), Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")), SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")), InstantSplat Fan et al. ( [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")), 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")), FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")), InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")), and MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")).\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Four of Inputs | MipNeRF360 | Nerfbusters | InstantNGP | SyncDreamer | LaRa | SSDNeRF |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_instantngp.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_syncdreamer.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_ssdnerf.jpeg) |\n| GT | Ours | 2DGS | SplatFields | FSGS | 3DGS | InstantSplat |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_GT.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_fsgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/2f8e8e42522c418e8e5f35b2d7e55eab-20-test_elevation80_step2_instantsplat.jpeg) |\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Four of Inputs | MipNeRF360 | Nerfbusters | InstantNGP | SyncDreamer | LaRa | SSDNeRF |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_instantngp.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_syncdreamer.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_ssdnerf.jpeg) |\n| GT | Ours | 2DGS | SplatFields | FSGS | 3DGS | InstantSplat |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_GT.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_fsgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/8fafbb7ee0714802add43db11debb5c1-20-test_elevation90_step0_instantsplat.jpeg) |\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Four of Inputs | MipNeRF360 | Nerfbusters | InstantNGP | SyncDreamer | LaRa | SSDNeRF |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_instantngp.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_syncdreamer.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_ssdnerf.jpeg) |\n| GT | Ours | 2DGS | SplatFields | FSGS | 3DGS | InstantSplat |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_GT.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_fsgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/5fcd426a7d754a95b64ea21f34b762ea-10-test_elevation80_step2_instantsplat.jpeg) |\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Four of Inputs | MipNeRF360 | Nerfbusters | InstantNGP | SyncDreamer | LaRa | SSDNeRF |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_instantngp.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_syncdreamer.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_ssdnerf.jpeg) |\n| GT | Ours | 2DGS | SplatFields | FSGS | 3DGS | InstantSplat |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_GT.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_fsgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3e288ee8aced4a0797e66d53536112b1-10-test_elevation80_step2_instantsplat.jpeg) |\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Four of Inputs | MipNeRF360 | Nerfbusters | InstantNGP | SyncDreamer | LaRa | SSDNeRF |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_instantngp.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_syncdreamer.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_lara.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_ssdnerf.jpeg) |\n| GT | Ours | 2DGS | SplatFields | FSGS | 3DGS | InstantSplat |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_GT.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_splatfield.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_fsgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/29d27ef9f80145f1ad5a166952d04557-20-test_elevation80_step2_instantsplat.jpeg) |\n\nFigure F.3: Results on Objaverse-OOD. We compare our method with baselines: SyncDreamer (Liu et al., [2023b](https://ar5iv.org/html/2411.06390#bib.bib27 \"\")), LaRa (Chen et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib6 \"\")), SSDNeRF (Chen et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib7 \"\")), 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")), Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")), SplatFields (Mihajlovic et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib28 \"\")), InstantSplat Fan et al. ( [2024](https://ar5iv.org/html/2411.06390#bib.bib12 \"\")), 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")), FSGS (Zhu et al., [2024](https://ar5iv.org/html/2411.06390#bib.bib58 \"\")), InstantNGP (Müller et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib31 \"\")), and MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")).\n\n| Four of Inputs | Nerfbusters | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| --- | --- | --- | --- | --- | --- | --- |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/AMBERLIGHT_UP_W-10-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/AMBERLIGHT_UP_W-10-test_elevation90_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/AMBERLIGHT_UP_W-10-test_elevation90_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/AMBERLIGHT_UP_W-10-test_elevation90_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/AMBERLIGHT_UP_W-10-test_elevation90_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/AMBERLIGHT_UP_W-10-test_elevation90_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/AMBERLIGHT_UP_W-10-test_elevation90_step2_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/BREAKFAST_MENU-10-test_elevation90_step0_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/BREAKFAST_MENU-10-test_elevation90_step0_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/BREAKFAST_MENU-10-test_elevation90_step0_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/BREAKFAST_MENU-10-test_elevation90_step0_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/BREAKFAST_MENU-10-test_elevation90_step0_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/BREAKFAST_MENU-10-test_elevation90_step0_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/BREAKFAST_MENU-10-test_elevation90_step0_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/CREATIVE_BLOCKS_35_MM-10-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/CREATIVE_BLOCKS_35_MM-10-test_elevation90_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/CREATIVE_BLOCKS_35_MM-10-test_elevation90_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/CREATIVE_BLOCKS_35_MM-10-test_elevation90_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/CREATIVE_BLOCKS_35_MM-10-test_elevation90_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/CREATIVE_BLOCKS_35_MM-10-test_elevation90_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/CREATIVE_BLOCKS_35_MM-10-test_elevation90_step2_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Granimals_20_Wooden_ABC_Blocks_Wagon_85VdSftGsLi-20-test_elevation80_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Granimals_20_Wooden_ABC_Blocks_Wagon_85VdSftGsLi-20-test_elevation80_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Granimals_20_Wooden_ABC_Blocks_Wagon_85VdSftGsLi-20-test_elevation80_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Granimals_20_Wooden_ABC_Blocks_Wagon_85VdSftGsLi-20-test_elevation80_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Granimals_20_Wooden_ABC_Blocks_Wagon_85VdSftGsLi-20-test_elevation80_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Granimals_20_Wooden_ABC_Blocks_Wagon_85VdSftGsLi-20-test_elevation80_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Granimals_20_Wooden_ABC_Blocks_Wagon_85VdSftGsLi-20-test_elevation80_step2_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Olive_Kids_Dinosaur_Land_Pack_n_Snack-10-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Olive_Kids_Dinosaur_Land_Pack_n_Snack-10-test_elevation90_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Olive_Kids_Dinosaur_Land_Pack_n_Snack-10-test_elevation90_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Olive_Kids_Dinosaur_Land_Pack_n_Snack-10-test_elevation90_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Olive_Kids_Dinosaur_Land_Pack_n_Snack-10-test_elevation90_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Olive_Kids_Dinosaur_Land_Pack_n_Snack-10-test_elevation90_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Olive_Kids_Dinosaur_Land_Pack_n_Snack-10-test_elevation90_step2_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Rubbermaid_Large_Drainer-10-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Rubbermaid_Large_Drainer-10-test_elevation90_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Rubbermaid_Large_Drainer-10-test_elevation90_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Rubbermaid_Large_Drainer-10-test_elevation90_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Rubbermaid_Large_Drainer-10-test_elevation90_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Rubbermaid_Large_Drainer-10-test_elevation90_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Rubbermaid_Large_Drainer-10-test_elevation90_step2_GT.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Pepsi_Cola_Wild_Cherry_Diet_12_12_fl_oz_355_ml_cans_144_fl_oz_426_lt-20-test_elevation90_step2_gt_2x2.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Pepsi_Cola_Wild_Cherry_Diet_12_12_fl_oz_355_ml_cans_144_fl_oz_426_lt-20-test_elevation90_step2_nerfbusters.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Pepsi_Cola_Wild_Cherry_Diet_12_12_fl_oz_355_ml_cans_144_fl_oz_426_lt-20-test_elevation90_step2_mipnerf360.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Pepsi_Cola_Wild_Cherry_Diet_12_12_fl_oz_355_ml_cans_144_fl_oz_426_lt-20-test_elevation90_step2_2dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Pepsi_Cola_Wild_Cherry_Diet_12_12_fl_oz_355_ml_cans_144_fl_oz_426_lt-20-test_elevation90_step2_3dgs.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Pepsi_Cola_Wild_Cherry_Diet_12_12_fl_oz_355_ml_cans_144_fl_oz_426_lt-20-test_elevation90_step2_ours.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Pepsi_Cola_Wild_Cherry_Diet_12_12_fl_oz_355_ml_cans_144_fl_oz_426_lt-20-test_elevation90_step2_GT.jpeg) |\n\nFigure F.4: Results on GSO-OOD. We compare SplatFormer, trained on Objaverse scenes, with Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")), 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")) and MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")).\n\n| Camera Setup | Nerfbusters | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| --- | --- | --- | --- | --- | --- | --- |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3Surgery.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3Surgery_nerfbusters_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3Surgery_mipnerf360_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3Surgery_2dgs_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3Surgery_3dgs_sh3-step30k_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3Surgery_splatformer_wlpips_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/3Surgery_gt_highlight.jpeg) |\n| ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Carrot.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Carrot_nerfbusters_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Carrot_mipnerf360_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Carrot_2dgs_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Carrot_3dgs_sh3-step30k_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Carrot_splatformer_wlpips_highlight.jpeg) | ![Refer to caption](https://ar5iv.org/html/2411.06390/assets/Figures/results/Carrot_gt_highlight.jpeg) |\n\nFigure F.5: Results on Real-World iPhone OOD. We compare SplatFormer trained on Objaverse with Nerfbusters (Warburg\\* et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib44 \"\")), MipNeRF360 (Barron et al., [2022](https://ar5iv.org/html/2411.06390#bib.bib1 \"\")), 2DGS (Huang et al., [2024a](https://ar5iv.org/html/2411.06390#bib.bib17 \"\")), and 3DGS (Kerbl et al., [2023](https://ar5iv.org/html/2411.06390#bib.bib20 \"\")).\n\n[◄](https://ar5iv.org/html/2411.06389) [![ar5iv homepage](https://ar5iv.org/assets/ar5iv.png)](https://ar5iv.org/) [Feeling\\\\\n\\\\\nlucky?](https://ar5iv.org/feeling_lucky) [Conversion\\\\\n\\\\\nreport](https://ar5iv.org/log/2411.06390) [Report\\\\\n\\\\\nan issue](https://github.com/dginev/ar5iv/issues/new?template=improve-article--arxiv-id-.md&title=Improve+article+2411.06390) [View original\\\\\n\\\\\non arXiv](https://arxiv.org/abs/2411.06390) [►](https://ar5iv.org/html/2411.06391)",
  "sections": {
    "1 Introduction": {
      "content": "Novel view synthesis (NVS) focuses on transforming 2D RGB images into immersive 3D scenes, allowing users to navigate within augmented reality (AR) and virtual reality (VR) environments. Traditionally, this problem has been approached using a standard novel view interpolation protocol, where test views are sampled at fixed intervals along the trajectory of the input views. Several NVS methods have emerged based on this protocol, with 3D Gaussian splatting (3DGS) (Kerbl et al., [2023]) recently gaining attention for achieving real-time and high-fidelity results in view interpolation.\n\nHowever, AR and VR applications require not only smooth transitions between input views but also the ability to explore novel regions of interest from viewing angles outside the input distribution. For instance, users may want to observe a scene from high-elevation angles, which are often missing from the captured views. While novel view interpolation has seen significant advancements, this out-of-distribution novel view synthesis (OOD-NVS) task remains underexplored, particularly in terms of evaluation protocols and methodology. A related area of research involves 3D reconstruction from sparse or monocular input views, where methods often need to hallucinate unseen content (Liu et al., [2023a]; Chan et al., [2023]; Kwak et al., [2024]; Liu et al., [2023b]). While hallucination can be beneficial for creative applications, it may be undesirable in settings that demand accurate reconstructions, such as 3D visualization of surgical procedures (Hein et al., [2024]), and unnecessary in typical daily capture scenarios.\n\nImagine you are capturing a statue in a museum. By varying the camera’s elevation and walking around the object, you might be able to capture most of its features. However, the spatial distribution of camera angles is likely uneven, even heavily skewed, creating certain out-of-distribution views where some parts of the object are only sparsely covered. An example is illustrated in Fig. [1]Figure 1 ‣ 1 Introduction ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), where input views are captured from a user’s\nperspective, circling around an object at varying but close elevation angles. The out-of-distribution (OOD) target views observe the object from a top-down perspective, a significant deviation from the input distribution. We define this challenge as out-of-distribution novel view synthesis (OOD-NVS). We argue that this issue is practically relevant for everyday capture scenarios, yet it has been largely overlooked by the research community. To study this problem, we render 3D assets from ShapeNet (Chang et al., [2015]), Objaverse 1.0 (Deitke et al., [2023]), and Google Scanned Objects (Downs et al., [2022]) datasets. As shown in Fig. [1]Figure 1 ‣ 1 Introduction ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), existing NVS methods perform poorly on the OOD views when restricted to low-elevation inputs, highlighting the need for a novel approach to address this problem.\n\nSubstantial research efforts have been directed towards robust 3D reconstruction with insufficient input views. First, some 3DGS variants regularize the Gaussian attributes through implicit bias in neural radiance fields (Mihajlovic et al., [2024]) or geometry consistency terms (Huang et al., [2024a]). Second, a number of methods attempt to exploit priors from external datasets. For example, some supervise the rendered depth maps using stereo estimators (Zhu et al., [2024]), though these methods face scale ambiguity issues. Certain methods pretrain feature grids (Chen et al., [2023]; Sen et al., [2023]) on large datasets, but these priors are often limited to a single object category. Other methods use 2D priors from pretrained diffusion models (Sargent et al., [2024]) but struggle with multi-view inconsistencies. Additionally, some feed-forward models predict 3D primitives from a few input views (Chen et al., [2024a]; [b]); Yu et al., [2021]), yet they handle no more than four images due to computational constraints, limiting their ability to leverage dense multi-view inputs. Most of these approaches are evaluated only on view interpolation or sparse-view reconstruction, failing to address the artifacts encountered in the OOD-NVS settings.\n\n![Refer to caption]Figure 1: We investigate the out-of-distribution (OOD) novel view synthesis (NVS), where test views significantly differ from input views. This scenario contrasts with prior in-distribution NVS, where test views interpolate between densely captured input views, Sparse NVS with a few large-baseline input views, and Nerfbusters NVS(Warburg\\* et al., [2023])), where test views share similar angles with input views. Existing NVS methods, including MipNeRF360 (Barron et al., [2022]), and those designed for sparse inputs like LaRa (Chen et al., [2024a]), face challenges in this setting, while our method shows notable improvements.\n\nDefining an implicit regularization to improve OOD-NVS poses a significant challenge. We hypothesize that addressing this issue requires careful consideration of three key aspects: 1) leveraging generic priors from large-scale datasets, 2) ensuring 3D consistency in renderings, and 3) fully utilizing the rich geometric information from all input views. To meet these needs, we propose SplatFormer, a novel learning-based feed-forward 3D transformer designed to operate on Gaussian splats. SplatFormer refines an initial 3DGS set—optimized using all input views—into a new, enhanced set that produces multi-view consistent 2D renderings under OOD conditions with fewer artifacts.\n\nOur method begins by optimizing 3DGS from the input views. While this initial 3D representation effectively integrates multi-view information from the captured images, we observe that the shapes, appearances, and spatial structure of the Gaussian splats become biased toward the input view distribution. This often results in elongated Gaussian splats that cover only the thin areas projected on the input views, leading to sparse surface coverage. Furthermore, these splats can form unordered geometric structures that appear correct from the input views but exhibit significant artifacts when rendered under OOD views.\n\nUnlike previous works that rely on hand-crafted regularization techniques (Xie et al., [2024]; Li et al., [2024b]), we adapt point transformer (Zhao et al., [2021]), an attention-based architecture designed for 3D scene understanding, to process the 3DGS as a point cloud set with Gaussian attributes serving as features. The attention mechanism in the point transformer learns to capture multi-view information embedded in the 3DGS, focusing on the local neighborhood within the spatial structure pre-computed by the initial 3DGS. It outputs residuals that are added to the input Gaussian attributes. The updated 3DGS is then rendered from novel views, and a photometric error between the rendered and ground-truth images is minimized to train the SplatFormer.\nWe curate large-scale training pairs of initial, flawed 3DGS sets, and ground-truth images of in-distribution and OOD views using ShapeNet and Objaverse 1.0, which are made feasible by the fast optimization of 3DGS and the availability of large-scale 3D and multi-view datasets. By training on this dataset, SplatFormer learns generalizable priors for refining 3DGS, effectively removing artifacts in the OOD views while maintaining 3D consistency.\n\nWe evaluate SplatFormer against baseline models using the proposed OOD-NVS evaluation protocols. Our experiments demonstrate that once trained, SplatFormer significantly reduces artifacts in 3DGS OOD-view renderings, showing substantial improvements in both quantitative and qualitative results for test scenes from ShapeNet and Objaverse. Additionally, we demonstrate that SplatFormer’s artifact removal capabilities generalize to novel object categories in previously unseen datasets, such as Google Scanned Objects (Downs et al., [2022]), as well as real-world captures.\nIn summary, we make the following contributions:\n\n- •\n\n\nWe introduce OOD-NVS, a new experimental protocol specifically designed to evaluate the performance of NVS methods when rendering 3D scenes from novel viewing angles that fall outside the distribution of input views. Our results demonstrate that existing methods struggle to generalize under the OOD-NVS protocol;\n\n- •\n\n\nWe propose SplatFormer, a novel learning-based model that refines flawed 3D Gaussian splats to mitigate artifacts in OOD views. SplatFormer is the first approach to apply the point transformer to 3DGS processing, effectively leveraging multi-view information from a dense set of input views and learning a 3D rendering prior to remove artifacts;\n\n- •\n\n\nWe demonstrate that SplatFormer significantly improves the performance of 3DGS-based methods on OOD-NVS tasks, achieving substantial gains in object-centric scenes, while also demonstrating potential for application in unbounded environments.",
      "citations": [
        {
          "start_pos": 468,
          "end_pos": 488,
          "text": "Kerbl et al., [2023]",
          "paper_id": "bib.bib20",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 1275,
          "end_pos": 1294,
          "text": "Liu et al., [2023a]",
          "paper_id": "bib.bib26",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1296,
          "end_pos": 1315,
          "text": "Chan et al., [2023]",
          "paper_id": "bib.bib3",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1317,
          "end_pos": 1336,
          "text": "Kwak et al., [2024]",
          "paper_id": "bib.bib22",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1338,
          "end_pos": 1357,
          "text": "Liu et al., [2023b]",
          "paper_id": "bib.bib27",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1546,
          "end_pos": 1565,
          "text": "Hein et al., [2024]",
          "paper_id": "bib.bib15",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 2656,
          "end_pos": 2676,
          "text": "Chang et al., [2015]",
          "paper_id": "bib.bib4",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib12",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 2694,
          "end_pos": 2715,
          "text": "Deitke et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2746,
          "end_pos": 2766,
          "text": "Downs et al., [2022]",
          "paper_id": "bib.bib11",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3278,
          "end_pos": 3303,
          "text": "Mihajlovic et al., [2024]",
          "paper_id": "bib.bib28",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 3336,
          "end_pos": 3357,
          "text": "Huang et al., [2024a]",
          "paper_id": "bib.bib17",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 3515,
          "end_pos": 3533,
          "text": "Zhu et al., [2024]",
          "paper_id": "bib.bib58",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 3626,
          "end_pos": 3645,
          "text": "Chen et al., [2023]",
          "paper_id": "bib.bib7",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3647,
          "end_pos": 3665,
          "text": "Sen et al., [2023]",
          "paper_id": "bib.bib38",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3812,
          "end_pos": 3834,
          "text": "Sargent et al., [2024]",
          "paper_id": "bib.bib37",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 3967,
          "end_pos": 3987,
          "text": "Chen et al., [2024a]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 3995,
          "end_pos": 4012,
          "text": "Yu et al., [2021]",
          "paper_id": "bib.bib54",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 4797,
          "end_pos": 4818,
          "text": "Barron et al., [2022]",
          "paper_id": "bib.bib1",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4869,
          "end_pos": 4889,
          "text": "Chen et al., [2024a]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 6350,
          "end_pos": 6368,
          "text": "Xie et al., [2024]",
          "paper_id": "bib.bib50",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6370,
          "end_pos": 6388,
          "text": "Li et al., [2024b]",
          "paper_id": "bib.bib24",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6419,
          "end_pos": 6438,
          "text": "Zhao et al., [2021]",
          "paper_id": "bib.bib57",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 8006,
          "end_pos": 8026,
          "text": "Downs et al., [2022]",
          "paper_id": "bib.bib11",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        }
      ]
    },
    "2 Related Work": {
      "content": "In this section, we review several novel view synthesis approaches relevant to our topic. These methods can be broadly categorized into three modalities: (1) general NVS methods primarily evaluated through view interpolation, (2) reconstruction from sparse views, and (3) approaches that enhance NVS by utilizing priors and regularization techniques.\n\nNovel View Interpolation.\nIn most NVS scenarios, both input and test views are sampled from the same distribution, typically following a fixed trajectory or a hemispherical pattern, as observed in common datasets such as Blender NeRF (Mildenhall et al., [2020]), LLFF (Mildenhall et al., [2019]), and Phototourism (Jin et al., [2021]). Seminal works like NeRF (Mildenhall et al., [2020]), InstantNGP (Müller et al., [2022]), and 3DGS (Kerbl et al., [2023]) have demonstrated strong performance under this view interpolation protocol. However, as we will demonstrate later, they encounter difficulties in rendering novel views from out-of-distribution (OOD) angles, a challenge that remains less explored.\n\nSparse View Reconstruction.\nAnother line of research is focused on reconstructing and rendering 3D scenes from sparse set of input views, typically fewer than four.\nMethods like Zero123 (Liu et al., [2023a]) and others (Sargent et al., [2024]; Liu et al., [2023b]; Kwak et al., [2024]) predict NeRF representations or multi-view images from monocular inputs, often requiring the model to hallucinate unseen regions.\nSimilarly, approaches like (Yu et al., [2021]; Charatan et al., [2024]; Wewer et al., [2024]; Chen et al., [2024a]; [b])) predict 3D primitives directly from sparse views.\nSome methods (Höllein et al., [2024]; Gao et al., [2024]) aggregate multi-view inputs into 2D diffusion-based generative models, which are more suited for creative tasks but less applicable when metrically accurate reconstructions are needed.\n\nOut-of-distribution Novel View Synthesis (OOD-NVS).\nUnlike the standard interpolation setup, Nerfbusters (Warburg\\* et al., [2023])) captures input and test views along separate trajectories, closely aligning with the OOD-NVS problem we are addressing.\nHowever, their input and test views remain relatively similar in viewing angles, and the observed artifacts are primarily caused by the “invisibility issue“, where test views fall outside the input observation sphere, rather than from significant viewpoint deviations. In contrast, our approach tackles large viewpoint shifts without addressing invisibility, filling a gap by emphasizing generalization across substantial angle deviations.\n\nRegularization Techniques for Unconstrained Reconstruction.\nSparse input views significantly degrade NVS performance, leading to various works exploring geometric priors, spatial regularity constraints, and data-driven priors.\nGeometric priors have been used in SuGaR (Guédon & Lepetit, [2024]), 2DGS (Huang et al., [2024a]), and GeoGaussian (Li et al., [2024b]), which apply handcrafted self-supervision losses to better align Gaussian splats with surface geometry.\nSimilarly, Spatial regularity constraints, explored in SplatFields (Mihajlovic et al., [2024]) and ZeroRF (Shi et al., [2024]), integrate Deep Image Prior (Ulyanov et al., [2018]) to regularize 3DGS and NeRF reconstructions, producing more robust results from sparse inputs.\nHowever, these methods offer limited improvements as they do not leverage external data.\nData-driven priors have been adopted in several works.\nFSGS (Zhu et al., [2024]) and DNGaussian (Li et al., [2024a]) supervises depth maps using deep stereo models but suffers from scale ambiguity.\nInstantSplat (Fan et al., [2024]) uses dense point clouds for 3DGS initialization, though it struggles with overfitting. Nerfbusters (Warburg\\* et al., [2023])) pretrains a diffusion model for post-processing NeRF, achieving only marginal improvements.\nAppearance priors (Zhu et al., [2024]; Sargent et al., [2024]; Wu et al., [2024a]; Gao et al., [2024]; Kwak et al., [2024]) use 2D diffusion models to regularize novel view renderings, but often struggle with multi-view consistency.\nAdditionally, SSDNeRF (Chen et al., [2023]) and HypNeRF (Sen et al., [2023]) pretrain 3D feature grids on object-centric datasets, yet underperform in multi-category experiments.\n\nLearning-based 2D-to-3D Models.\nAnother special case of data-driven models involves training feed-forward models on large-scale multi-view image datasets to predict 3D representations from 2D images. SyncDreamer (Liu et al., [2023b]) and ViewDiff (Höllein et al., [2024]) fine-tune pretrained diffusion models to generate multi-view images from one or a few input views. PixelNeRF (Yu et al., [2021]), MVSplat (Chen et al., [2024b]), and related works (Charatan et al., [2024]; Wewer et al., [2024]) transform 2D image features into NeRF or Gaussian splats. Although these models can learn generic priors from multi-view datasets, they are typically constrained to only a few input views, limiting their ability to fully leverage larger multi-view inputs.\n\n3D Point Processing Techniques are central to our work and widely used across 3D tasks.\nUnlike 2D image features or 3D grids, point clouds are unordered and unevenly distributed, requiring specialized architectures to handle their irregularity and sparsity. Solutions include sparse convolution (Choy et al., [2019]), MLPs (Qi et al., [2017]), and transformers (Wang, [2023]; Yang et al., [2023]; Zhao et al., [2021]).\nThe point transformer (Zhao et al., [2021]), using attention to model spatial relationships, has proven particularly effective. Further advancements (Wu et al., [2022]; [2024b])) have enhanced its efficiency, achieving state-of-the-art performance in 3D segmentation. Our work is the first to adapt the point transformer for refining 3D Gaussian splats (3DGS), leveraging its ability to capture spatial relationships in irregular point clouds to enhance novel view synthesis fidelity.",
      "citations": [
        {
          "start_pos": 587,
          "end_pos": 612,
          "text": "Mildenhall et al., [2020]",
          "paper_id": "bib.bib30",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 621,
          "end_pos": 646,
          "text": "Mildenhall et al., [2019]",
          "paper_id": "bib.bib29",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 667,
          "end_pos": 685,
          "text": "Jin et al., [2021]",
          "paper_id": "bib.bib19",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 713,
          "end_pos": 738,
          "text": "Mildenhall et al., [2020]",
          "paper_id": "bib.bib30",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 755,
          "end_pos": 774,
          "text": "ller et al., [2022]",
          "paper_id": "bib.bib31",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 787,
          "end_pos": 807,
          "text": "Kerbl et al., [2023]",
          "paper_id": "bib.bib20",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 1245,
          "end_pos": 1264,
          "text": "Liu et al., [2023a]",
          "paper_id": "bib.bib26",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 1278,
          "end_pos": 1300,
          "text": "Sargent et al., [2024]",
          "paper_id": "bib.bib37",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1302,
          "end_pos": 1321,
          "text": "Liu et al., [2023b]",
          "paper_id": "bib.bib27",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1323,
          "end_pos": 1342,
          "text": "Kwak et al., [2024]",
          "paper_id": "bib.bib22",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1502,
          "end_pos": 1519,
          "text": "Yu et al., [2021]",
          "paper_id": "bib.bib54",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1521,
          "end_pos": 1544,
          "text": "Charatan et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1546,
          "end_pos": 1566,
          "text": "Wewer et al., [2024]",
          "paper_id": "bib.bib46",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1568,
          "end_pos": 1588,
          "text": "Chen et al., [2024a]",
          "paper_id": "bib.bib6",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1662,
          "end_pos": 1682,
          "text": "llein et al., [2024]",
          "paper_id": "bib.bib16",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1684,
          "end_pos": 1702,
          "text": "Gao et al., [2024]",
          "paper_id": "bib.bib13",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2856,
          "end_pos": 2877,
          "text": "don & Lepetit, [2024]",
          "paper_id": "bib.bib14",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2886,
          "end_pos": 2907,
          "text": "Huang et al., [2024a]",
          "paper_id": "bib.bib17",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2927,
          "end_pos": 2945,
          "text": "Li et al., [2024b]",
          "paper_id": "bib.bib24",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3119,
          "end_pos": 3144,
          "text": "Mihajlovic et al., [2024]",
          "paper_id": "bib.bib28",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3158,
          "end_pos": 3176,
          "text": "Shi et al., [2024]",
          "paper_id": "bib.bib39",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3207,
          "end_pos": 3229,
          "text": "Ulyanov et al., [2018]",
          "paper_id": "bib.bib41",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3476,
          "end_pos": 3494,
          "text": "Zhu et al., [2024]",
          "paper_id": "bib.bib58",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3512,
          "end_pos": 3530,
          "text": "Li et al., [2024a]",
          "paper_id": "bib.bib23",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3627,
          "end_pos": 3645,
          "text": "Fan et al., [2024]",
          "paper_id": "bib.bib12",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib2",
            "bib.bib4"
          ]
        },
        {
          "start_pos": 3885,
          "end_pos": 3903,
          "text": "Zhu et al., [2024]",
          "paper_id": "bib.bib58",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3905,
          "end_pos": 3927,
          "text": "Sargent et al., [2024]",
          "paper_id": "bib.bib37",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3929,
          "end_pos": 3947,
          "text": "Wu et al., [2024a]",
          "paper_id": "bib.bib47",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3949,
          "end_pos": 3967,
          "text": "Gao et al., [2024]",
          "paper_id": "bib.bib13",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3969,
          "end_pos": 3988,
          "text": "Kwak et al., [2024]",
          "paper_id": "bib.bib22",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4122,
          "end_pos": 4141,
          "text": "Chen et al., [2023]",
          "paper_id": "bib.bib7",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4156,
          "end_pos": 4174,
          "text": "Sen et al., [2023]",
          "paper_id": "bib.bib38",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4492,
          "end_pos": 4511,
          "text": "Liu et al., [2023b]",
          "paper_id": "bib.bib27",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4529,
          "end_pos": 4549,
          "text": "llein et al., [2024]",
          "paper_id": "bib.bib16",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4661,
          "end_pos": 4678,
          "text": "Yu et al., [2021]",
          "paper_id": "bib.bib54",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4690,
          "end_pos": 4710,
          "text": "Chen et al., [2024b]",
          "paper_id": "bib.bib8",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4732,
          "end_pos": 4755,
          "text": "Charatan et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4757,
          "end_pos": 4777,
          "text": "Wewer et al., [2024]",
          "paper_id": "bib.bib46",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5332,
          "end_pos": 5351,
          "text": "Choy et al., [2019]",
          "paper_id": "bib.bib9",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 5360,
          "end_pos": 5377,
          "text": "Qi et al., [2017]",
          "paper_id": "bib.bib33",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 5398,
          "end_pos": 5410,
          "text": "Wang, [2023]",
          "paper_id": "bib.bib42",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5412,
          "end_pos": 5431,
          "text": "Yang et al., [2023]",
          "paper_id": "bib.bib52",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5433,
          "end_pos": 5452,
          "text": "Zhao et al., [2021]",
          "paper_id": "bib.bib57",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5478,
          "end_pos": 5497,
          "text": "Zhao et al., [2021]",
          "paper_id": "bib.bib57",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 5605,
          "end_pos": 5622,
          "text": "Wu et al., [2022]",
          "paper_id": "bib.bib48",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        }
      ]
    },
    "3 Review: 3D Gaussian Splatting (3DGS)": {
      "content": "3D Gaussian Splatting (3DGS) encodes a scene using Gaussian splat primitives {𝒢k}k=1Ksuperscriptsubscriptsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K}, which are rendered via volume splatting.\nEach primitive is defined by its mean position 𝐩k∈ℝ3×1subscript𝐩𝑘superscriptℝ31\\\\mathbf{p}\\_{k}\\\\in\\\\mathbb{R}^{3\\\\times 1}, opacity αk∈\\[0,1\\]subscript𝛼𝑘01\\\\alpha\\_{k}\\\\in\\[0,1\\], S𝑆S-dimensional spherical harmonics 𝐚k∈ℝSsubscript𝐚𝑘superscriptℝ𝑆\\\\mathbf{a}\\_{k}\\\\in\\\\mathbb{R}^{S} for modeling view-dependent color 𝐜k∈ℝ3subscript𝐜𝑘superscriptℝ3\\\\mathbf{c}\\_{k}\\\\in\\\\mathbb{R}^{3}, and covariance matrix 𝚺k∈ℝ3×3subscript𝚺𝑘superscriptℝ33\\\\mathbf{\\\\Sigma}\\_{k}\\\\in\\\\mathbb{R}^{3\\\\times 3} parameterized via scale 𝐬k∈ℝ3subscript𝐬𝑘superscriptℝ3\\\\mathbf{s}\\_{k}\\\\in\\\\mathbb{R}^{3} and rotation quaternion 𝐪k∈ℝ4subscript𝐪𝑘superscriptℝ4\\\\mathbf{q}\\_{k}\\\\in\\\\mathbb{R}^{4} vectors for enforced positive\nsemi-definiteness.\n\nThe splats are rendered by projecting them onto an image plane, forming 2D Gaussian distributions:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝒢k2D​(𝐱′)∝exp⁡(−(𝐱′−𝐩k′)T​(𝚺k2D)−1​(𝐱′−𝐩k′)/2),proportional-tosubscriptsuperscript𝒢2D𝑘superscript𝐱′superscriptsuperscript𝐱′subscriptsuperscript𝐩′𝑘𝑇superscriptsuperscriptsubscript𝚺𝑘2D1superscript𝐱′superscriptsubscript𝐩𝑘′2\\\\mathcal{G}^{\\\\text{2D}}\\_{k}(\\\\mathbf{x}^{\\\\prime})\\\\propto\\\\exp(-(\\\\mathbf{x}^{\\\\prime}-\\\\mathbf{p}^{\\\\prime}\\_{k})^{T}(\\\\mathbf{\\\\Sigma}\\_{k}^{\\\\text{2D}})^{-1}(\\\\mathbf{x}^{\\\\prime}-\\\\mathbf{p}\\_{k}^{\\\\prime})/2)\\\\,, |  | (1) |\n\nwhere 𝐩k′∈ℝ2superscriptsubscript𝐩𝑘′superscriptℝ2\\\\mathbf{p}\\_{k}^{\\\\prime}\\\\in\\\\mathbb{R}^{2} and 𝚺k2D∈ℝ2×2superscriptsubscript𝚺𝑘2Dsuperscriptℝ22\\\\mathbf{\\\\Sigma}\\_{k}^{\\\\text{2D}}\\\\in\\\\mathbb{R}^{2\\\\times 2} are the projected splat center and covariance matrix.\n\nTo compute the pixel color 𝐜​(𝐱′)∈ℝ3𝐜superscript𝐱′superscriptℝ3\\\\mathbf{c}(\\\\mathbf{x}^{\\\\prime})\\\\in\\\\mathbb{R}^{3} at location 𝐱′∈ℝ2superscript𝐱′superscriptℝ2\\\\mathbf{x}^{\\\\prime}\\\\in\\\\mathbb{R}^{2} splats are blended in sorted depth order:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐜​(𝐱′)=∑k=1K𝐜k​αk​𝒢k2D​(𝐱′)​∏j=1k−1(1−αj​𝒢j2D​(𝐱′)).𝐜superscript𝐱′superscriptsubscript𝑘1𝐾subscript𝐜𝑘subscript𝛼𝑘subscriptsuperscript𝒢2D𝑘superscript𝐱′superscriptsubscriptproduct𝑗1𝑘11subscript𝛼𝑗subscriptsuperscript𝒢2D𝑗superscript𝐱′\\\\mathbf{c}(\\\\mathbf{x}^{\\\\prime})=\\\\sum\\\\nolimits\\_{k=1}^{K}\\\\mathbf{c}\\_{k}\\\\alpha\\_{k}\\\\mathcal{G}^{\\\\text{2D}}\\_{k}(\\\\mathbf{x}^{\\\\prime})\\\\prod\\\\nolimits\\_{j=1}^{k-1}(1-\\\\alpha\\_{j}\\\\mathcal{G}^{\\\\text{2D}}\\_{j}(\\\\mathbf{x}^{\\\\prime})). |  | (2) |\n\n_Optimization._\nThe parameters {𝒢k}k=1Ksuperscriptsubscriptsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K} are optimized using the Adam optimizer (Kingma & Ba, [2015]) by minimizing a weighted combination of ℒ1subscriptℒ1\\\\mathcal{L}\\_{1} and D-SSIM losses:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ3DGS=(1−λ)​ℒ1+λ​ℒD-SSIM,subscriptℒ3DGS1𝜆subscriptℒ1𝜆subscriptℒD-SSIM\\\\mathcal{L}\\_{\\\\text{3DGS}}=(1-\\\\lambda)\\\\mathcal{L}\\_{1}+\\\\lambda\\\\mathcal{L}\\_{\\\\text{D-SSIM}}, |  | (3) |\n\nwith λ𝜆\\\\lambda set to 0.2 as per the original 3DGS formulation. To avoid local minima, 3DGS employs periodic heuristic densification and pruning of Gaussian splats.",
      "citations": [
        {
          "start_pos": 2717,
          "end_pos": 2736,
          "text": "Kingma & Ba, [2015]",
          "paper_id": "bib.bib21",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        }
      ]
    },
    "4 Robust Out-of-distribution Novel View Synthesis": {
      "content": "![Refer to caption]Figure 2: Limitations of 3DGS in OOD-NVS setup.\nWe observe that the quality of novel views obtained via 3DGS significantly deteriorates as the test camera deviates from the distribution of input camera views which our solution, SplatFormer, effectively overcomes and demonstrates higher fidelity renderings.\nThe displayed metric (left) is performed on the scenes from Objaverse (Deitke et al., [2023]); see Sec. [5]Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") for detailed experiment setup.\n\nLimitations of 3DGS.\nWhile direct optimization of splat primitives allows 3DGS to closely adapt to input images, it often leads to overfitting, as the flexible primitives conform too precisely to individual pixels. The smooth, continuous nature of Gaussian distributions supports effective interpolation, but only when test views are similar to the training views.\nTo demonstrate this limitation, we conduct a controlled experiment (Fig. [2]Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) simulating a typical scenario where a user captures images while rotating around an object. The challenge arises when rendering from out-of-distribution (OOD) viewpoints, such as elevated camera angles, a critical requirement for AR and VR applications that demand consistent 3D rendering from all perspectives.\n\nKey Observation.\nAs shown in Fig. [2]Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), the reconstruction quality degrades significantly as the test camera’s elevation increases, highlighting a key limitation of 3DGS in handling OOD views. The challenge is to make the representation robust to such viewpoint changes while preserving the advantages of 3DGS, such as real-time rendering and compatibility with rasterization-based tools. Addressing this limitation by incorporating priors and constraints into the optimization of 3DGS is a complex task.\nPrevious approaches have attempted to address this using geometric constraints (Huang et al., [2024a]; Mihajlovic et al., [2024]) and data-driven priors (Fan et al., [2024]). However, as demonstrated later (Tab. [1]Table 1 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")), these methods fall short in achieving robust novel-view synthesis, emphasizing the need for a more effective solution.\nWe believe that solving this issue requires incorporating three key aspects: leveraging generic priors from large-scale datasets, ensuring 3D consistency in renderings, and fully utilizing rich geometric information from all input views.\n\nSolution: SplatFormer.\nWe introduce SplatFormer, a novel learning-based feed-forward 3D neural module to operate on Gaussian splats, enabling robust novel view synthesis from OOD views.\nAs shown in Fig. [2]Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), our method maintains high visual quality even when test views deviate significantly from the input views.\nSplatFormer, parameterized via learnable parameters θ𝜃\\\\theta, overcomes the bias toward input views by capturing spatial relationships and modeling interactions between splats. Inspired by transformer architectures, which excel at learning complex relationships in data (Brown et al., [2020]), we adopt this approach for feed-forward refinement of 3D Gaussian splats.\n\n![Refer to caption]Figure 3: Method Overview. We introduce SplatFormer, a generalizable 3D point transformer network designed for feed-forward refinement of Gaussian splats, enabling robust out-of-distribution novel-view synthesis (OOD-NVS). The reconstruction process begins by generating an initial set of 3D Gaussians from input images. However, these splats are biased toward the input views and are not robust for OOD-NVS. SplatFormer refines these splats through a hierarchical neural network that models residuals to the initial splat attributes. The model is trained on a large collection of 3D shapes using 2D rendering loss, allowing it to: 1) incorporate spatial regularity among splat primitives via the hierarchical architecture, 2) leverage generic priors from large-scale datasets, and 3) ensure 3D consistency through refining 3D primitives directly.\n\nReconstruction Process (Fig. [3]Figure 3 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"))\nbegins with a set of calibrated input images, from which we generate splat primitives {𝒢k}k=1Ksuperscriptsubscriptsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K} using the 3DGS optimization process described in Sec. [3]Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\").\nSince these splats are biased toward the input views, we apply SplatFormer for feed-forward refinement to enable robust out-of-distribution novel-view synthesis. SplatFormer utilizes a hierarchical series of transformer encoder-decoder layers fθsubscript𝑓𝜃f\\_{\\\\theta} based on the Point Transformer V3 (PTv3) architecture (Zhao et al., [2021]; Wu et al., [2024b]) and is trained on a large collection of 3D shapes using 2D rendering loss.\nThis supervision refines the splat primitives by enforcing spatial regularity through the hierarchical network architecture, leveraging generic priors from large-scale datasets, and ensuring 3D consistency in the refined splats through multi-view consistent rendering supervision.\nDuring encoding, SplatFormer assigns each splat an abstract V-dimensional feature vectors 𝐯k∈ℝVsubscript𝐯𝑘superscriptℝ𝑉\\\\mathbf{v}\\_{k}\\\\in\\\\mathbb{R}^{V}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | {𝐯k}k=1K=fθ​({𝒢k}k=1K),subscriptsuperscriptsubscript𝐯𝑘𝐾𝑘1subscript𝑓𝜃subscriptsuperscriptsubscript𝒢𝑘𝐾𝑘1\\\\{\\\\mathbf{v}\\_{k}\\\\}^{K}\\_{k=1}=f\\_{\\\\theta}(\\\\{\\\\mathcal{G}\\_{k}\\\\}^{K}\\_{k=1}), |  | (4) |\n\nwhich encapsulate key details of the 3D primitives. The feature decoder gθsubscript𝑔𝜃g\\_{\\\\theta} then transforms this latent representation into splat attribute residuals\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | {Δ​𝒢k=(Δ​𝐩k,Δ​𝐬k,Δ​αk,Δ​𝐪k,Δ​𝐚k)}k=1K=fθ​({𝒢k,𝐯k}k=1K),superscriptsubscriptΔsubscript𝒢𝑘Δsubscript𝐩𝑘Δsubscript𝐬𝑘Δsubscript𝛼𝑘Δsubscript𝐪𝑘Δsubscript𝐚𝑘𝑘1𝐾subscript𝑓𝜃superscriptsubscriptsubscript𝒢𝑘subscript𝐯𝑘𝑘1𝐾\\\\{\\\\Delta\\\\mathcal{G}\\_{k}=(\\\\Delta\\\\mathbf{p}\\_{k},\\\\Delta\\\\mathbf{s}\\_{k},\\\\Delta\\\\alpha\\_{k},\\\\Delta\\\\mathbf{q}\\_{k},\\\\Delta\\\\mathbf{a}\\_{k})\\\\}\\_{k=1}^{K}=f\\_{\\\\theta}(\\\\{\\\\mathcal{G}\\_{k},\\\\mathbf{v}\\_{k}\\\\}\\_{k=1}^{K})\\\\,, |  | (5) |\n\nwhich yields a refined set of splats {𝒢k′}k=1Ksuperscriptsubscriptsuperscriptsubscript𝒢𝑘′𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}^{\\\\prime}\\\\}\\_{k=1}^{K} that is more robust for OOD novel-view synthesis:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | {𝒢k′}k=1K={𝒢k+Δ​𝒢k}k=1K.superscriptsubscriptsuperscriptsubscript𝒢𝑘′𝑘1𝐾superscriptsubscriptsubscript𝒢𝑘Δsubscript𝒢𝑘𝑘1𝐾\\\\{\\\\mathcal{G}\\_{k}^{\\\\prime}\\\\}\\_{k=1}^{K}=\\\\{\\\\mathcal{G}\\_{k}+\\\\Delta\\\\mathcal{G}\\_{k}\\\\}\\_{k=1}^{K}\\\\,. |  | (6) |\n\nPoint Transformer Encoder fθsubscript𝑓𝜃f\\_{\\\\theta}. Our 3DGS splat encoder is based on the PTv3 framework (Wu et al., [2024b]).\nThe input set of points is first passed through an embedding layer to obtain corresponding input features, followed by 5 stages of attention blocks and downsampling grid pooling layers (Wu et al., [2022]). Then another 4 stages of attention blocks and upsampling grid pooling layers are used to restore the resolution. To capture high-frequency details and improve gradient flow, skip connection MLP modules are used to map intermediate downsampling outputs to residuals, which are then added to the upsampling layers at corresponding resolutions. Each stage comprises attention blocks with layer normalization, multi-head attention, and MLPs. This hierarchical architecture models contextual relationships among neighboring primitives. To implement attention efficiently based on spatial proximity, we adopt PTv3’s serialization and grid pooling strategy.\n\nFeature Decoder gθsubscript𝑔𝜃g\\_{\\\\theta}.\nThe extracted features are further concatenated with the original splat attributes to enhance convergence by combining the transformer’s context-aware features with the initial attributes. Each point’s features are then passed into shared feature decoding heads, which consist of five sequential MLP modules to predict residuals to the initial splat attributes. To further improve training stability, we zero-initialize the final MLP layers’ weights and biases leading to zero initial residual features, ensuring that the initial output closely matches the input 3DGS.\n\n### 4.1 Learning Data-Driven Prior\n\nDataset.\nTo enable SplatFormer to refine imperfect Gaussian splats using a data-driven prior, we curated a large dataset containing pairs of Gaussian primitives and corresponding multi-view images. We utilized 33k and 48k scenes from the ShapeNet (Chang et al., [2015]) and Objaverse-1.0 (Deitke et al., [2023]) datasets respectively. These assets were rendered from low-elevation input views and high-elevation out-of-distribution (OOD) views.\nThe initial splats were generated from the low-elevation views (following Sec. [3]Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). The data collection process, which required approximately 3000 GPU hours, was efficiently executed using budget GPUs like the RTX-2080Ti. We will release the data and corresponding rendering code to facilitate future research.\n\nTraining Objective.\nAfter generating the initial 3DGS by minimizing the photometric loss (Eq. [3]In 3 Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) using low-elevation input views, the SplatFormer module performs feed-forward refinement. The refined splats are then rendered following Eq. [2]In 3 Review: 3D Gaussian Splatting (3DGS) ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") for both input and OOD views, using a combination of photometric and perceptual LPIPS (Zhang et al., [2018]) loss terms:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒSplatFormer=ℒ1+ℒLPIPS.subscriptℒSplatFormersubscriptℒ1subscriptℒLPIPS\\\\mathcal{L}\\_{\\\\text{SplatFormer}}=\\\\mathcal{L}\\_{1}+\\\\mathcal{L}\\_{\\\\text{LPIPS}}\\\\,. |  | (7) |\n\nThis loss is optimized using the Adam optimizer (Kingma & Ba, [2015]) across multi-view images, incorporating both low-elevation and high-elevation OOD views. This balanced approach ensures that the model generalizes to unseen angles while preserving high fidelity for in-distribution views.\n\nThe dataset and training approach we introduce allow SplatFormer to learn rich data-driven priors from a diverse range of 3D objects and view configurations.\nThese learned priors enable the model to correct 3DGS’s bias towards input views, leading to more accurate and consistent reconstructions in OOD scenarios.\n\n| Four of Input Views | LaRa | SplatFields | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\nFigure 4: Novel View Synthesis under Out-of-Distribution Camera Angles. The first column shows 4 out of 32 input views. Here, we compare our method with LaRa (Chen et al., [2024a]), SplatFields (Mihajlovic et al., [2024]), MipNeRF360 (Barron et al., [2022]), 2DGS (Huang et al., [2024a]), and 3DGS (Kerbl et al., [2023]). Results on Objaverse-OOD evaluation scenes; a comprehensive comparison with all the baselines is provided in the appendix (Fig. [F.3]Figure F.3 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).Table 1: OOD-NVS. Comparisons on the ShapeNet-OOD and Objaverse-OOD evaluation sets. The metric is evaluated on OOD test views with elevation ϕood≥70​°subscriptitalic-ϕood70°\\\\phi\\_{\\\\textrm{ood}}\\\\geq 70\\\\degree; colors indicate the 1st, 2nd, and 3rd best-performing model\n\n|  | Methods | ShapeNet-OOD | Objverse-OOD |\n|  |  | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS |\n| \\\\hdashlineStandard | MipNeRF360 (Barron et al., [2022]) | 20.06 | 0.819 | 0.265 | 19.64 | 0.722 | 0.280 |\n| InstantNGP (Müller et al., [2022]) | 17.09 | 0.684 | 0.339 | 19.47 | 0.694 | 0.310 |\n| 3DGS (Kerbl et al., [2023]) | 20.21 | 0.763 | 0.242 | 19.24 | 0.673 | 0.285 |\n| \\\\hdashlineRegularized | 2DGS (Huang et al., [2024a]) | 23.52 | 0.863 | 0.188 | 20.56 | 0.739 | 0.248 |\n| SplatFields (Mihajlovic et al., [2024]) | 23.15 | 0.850 | 0.185 | 18.85 | 0.688 | 0.308 |\n| \\\\hdashlineExternal Prior | InstantSplat (Fan et al., [2024]) | 19.00 | 0.732 | 0.258 | 14.20 | 0.500 | 0.429 |\n| FSGS (Zhu et al., [2024]) | 17.32 | 0.714 | 0.298 | 18.82 | 0.655 | 0.323 |\n| SSDNeRF (Chen et al., [2023]) | 15.36 | 0.650 | 0.393 | 16.90 | 0.552 | 0.434 |\n| Nerfbusters (Warburg\\* et al., [2023])) | 11.42 | 0.640 | 0.321 | 16.87 | 0.689 | 0.287 |\n| \\\\hdashlineFeed Forward | SyncDreamer (Liu et al., [2023b]) | 9.07 | 0.500 | 0.468 | 9.72 | 0.420 | 0.489 |\n| LaRa (Chen et al., [2024a]) | 20.94 | 0.839 | 0.222 | 19.04 | 0.682 | 0.324 |\n| SplatFormer | 27.98 | 0.920 | 0.136 | 23.06 | 0.821 | 0.170 |",
      "citations": [
        {
          "start_pos": 398,
          "end_pos": 419,
          "text": "Deitke et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2142,
          "end_pos": 2163,
          "text": "Huang et al., [2024a]",
          "paper_id": "bib.bib17",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2165,
          "end_pos": 2190,
          "text": "Mihajlovic et al., [2024]",
          "paper_id": "bib.bib28",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2216,
          "end_pos": 2234,
          "text": "Fan et al., [2024]",
          "paper_id": "bib.bib12",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": [
            "bib.bib2",
            "bib.bib4"
          ]
        },
        {
          "start_pos": 3512,
          "end_pos": 3532,
          "text": "Brown et al., [2020]",
          "paper_id": "bib.bib2",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": [
            "bib.bib12",
            "bib.bib4"
          ]
        },
        {
          "start_pos": 5290,
          "end_pos": 5309,
          "text": "Zhao et al., [2021]",
          "paper_id": "bib.bib57",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5311,
          "end_pos": 5329,
          "text": "Wu et al., [2024b]",
          "paper_id": "bib.bib49",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7367,
          "end_pos": 7385,
          "text": "Wu et al., [2024b]",
          "paper_id": "bib.bib49",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 7574,
          "end_pos": 7591,
          "text": "Wu et al., [2022]",
          "paper_id": "bib.bib48",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 9143,
          "end_pos": 9163,
          "text": "Chang et al., [2015]",
          "paper_id": "bib.bib4",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib12",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 9184,
          "end_pos": 9205,
          "text": "Deitke et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 10306,
          "end_pos": 10326,
          "text": "Zhang et al., [2018]",
          "paper_id": "bib.bib56",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 10617,
          "end_pos": 10636,
          "text": "Kingma & Ba, [2015]",
          "paper_id": "bib.bib21",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12004,
          "end_pos": 12024,
          "text": "Chen et al., [2024a]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12040,
          "end_pos": 12065,
          "text": "Mihajlovic et al., [2024]",
          "paper_id": "bib.bib28",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12080,
          "end_pos": 12101,
          "text": "Barron et al., [2022]",
          "paper_id": "bib.bib1",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12110,
          "end_pos": 12131,
          "text": "Huang et al., [2024a]",
          "paper_id": "bib.bib17",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12144,
          "end_pos": 12164,
          "text": "Kerbl et al., [2023]",
          "paper_id": "bib.bib20",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12876,
          "end_pos": 12897,
          "text": "Barron et al., [2022]",
          "paper_id": "bib.bib1",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12965,
          "end_pos": 12984,
          "text": "ller et al., [2022]",
          "paper_id": "bib.bib31",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13044,
          "end_pos": 13064,
          "text": "Kerbl et al., [2023]",
          "paper_id": "bib.bib20",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13149,
          "end_pos": 13170,
          "text": "Huang et al., [2024a]",
          "paper_id": "bib.bib17",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13237,
          "end_pos": 13262,
          "text": "Mihajlovic et al., [2024]",
          "paper_id": "bib.bib28",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13358,
          "end_pos": 13376,
          "text": "Fan et al., [2024]",
          "paper_id": "bib.bib12",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib4",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 13436,
          "end_pos": 13454,
          "text": "Zhu et al., [2024]",
          "paper_id": "bib.bib58",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13517,
          "end_pos": 13536,
          "text": "Chen et al., [2023]",
          "paper_id": "bib.bib7",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13721,
          "end_pos": 13740,
          "text": "Liu et al., [2023b]",
          "paper_id": "bib.bib27",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13798,
          "end_pos": 13818,
          "text": "Chen et al., [2024a]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        }
      ]
    },
    "5 Experiments": {
      "content": "We begin by outlining the out-of-distribution novel-view synthesis (OOD-NVS) setup, followed by a description of the evaluation protocol and the baseline methods used for comparison. Next, we present the results on OOD-NVS, cross-dataset generalization, and ablation studies. Finally, we discuss the limitations of our approach and potential directions for future research.\n\nOOD-NVS.\nFor a given region of interest, such as a centered object, we simulate an input camera capturing 360-degree azimuths at low elevations. The camera takes Ninsubscript𝑁inN\\_{\\\\textrm{in}} photos from evenly spaced azimuths, with its elevation following a sinusoidal pattern defined by frequency f𝑓f and limits ϕmaxsubscriptitalic-ϕmax\\\\phi\\_{\\\\textrm{max}}. This setup mimics a user recording the target from low angles, with physical constraints preventing stable top-down captures. To introduce OOD views, we use high-elevation with ϕood≫ϕmaxmuch-greater-thansubscriptitalic-ϕoodsubscriptitalic-ϕmax\\\\phi\\_{\\\\textrm{ood}}\\\\gg\\\\phi\\_{\\\\textrm{max}}, simulating a top-down perspective. The camera configuration is visualized in Fig [1]Figure 1 ‣ 1 Introduction ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\").\n\nEvaluation Sets.\nWe use Blender to render 20 objects from ShapeNet (Chang et al., [2015]) and Objaverse-v1 (Deitke et al., [2023]) each. We select common objects and scenes with meaningful bird’s-eye views, such as city streets and buildings, avoiding those with large cavities that are invisible from low-elevation views. Due to varying object heights and shapes, we render two input camera trajectories with ϕmax=10∘subscriptitalic-ϕmaxsuperscript10\\\\phi\\_{\\\\textrm{max}}=10^{\\\\circ} and 20∘superscript2020^{\\\\circ}, creating two input-target splits to represent different levels of view deviation. So each scene has two experiments with different input views and the same target views. We average evaluation metrics across the two sets of experiments. Each input trajectory consists of Nin=32subscript𝑁in32N\\_{\\\\textrm{in}}=32 views. The OOD test set includes Nout=9subscript𝑁out9N\\_{\\\\textrm{out}}=9 views, uniformly distributed from the top sphere with ϕood≥70∘subscriptitalic-ϕoodsuperscript70\\\\phi\\_{\\\\textrm{ood}}\\\\geq 70^{\\\\circ}. All renderings are at a resolution of 256×256256256256\\\\times 256.\n\nBaselines.\nWe evaluate SplatFormer using the OOD-NVS protocol, comparing it with several publicly available state-of-the-art methods from each NVS method category. First, we include per-scene NVS approaches designed primarily for in-distribution NVS, including representative works such as InstantNGP (Müller et al., [2022]), 3DGS (Kerbl et al., [2023]), and MipNeRF360 (Barron et al., [2022]). Next, we examine regularized 3DGS variants that aim to reduce overfitting without external priors, including 2DGS (Huang et al., [2024a]) and SplatFields (Mihajlovic et al., [2024]).\nWe further consider prior-augmented per-scene NVS methods, which regularize per-scene optimization using external priors, including InstantSplat (Fan et al., [2024]), FSGS (Zhu et al., [2024]), SSDNeRF (Chen et al., [2023]), and Nerfbusters (Warburg\\* et al., [2023])). Finally, we examine feed-forward models, which reconstruct 2D Gaussians (LaRa (Chen et al., [2024a])) or produce multi-view images (SyncDreamer  (Liu et al., [2023b])) from sparse input images.\n\nFor a fair comparison, we retrained SSDNeRF, LaRa, and SyncDreamer using the same training sets as SplatFormer. For SyncDreamer, which only supports single-view input, we selected the highest-elevation view. For LaRa, which is limited to four input views due to memory constraints, we chose four large-baseline views to maximize scene coverage; details are provided in appendix (Sec. [D]Appendix D Baseline Implementations ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).\n\nResults on OOD-NVS.\nQualitative results (Fig. [4]Figure 4 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) show that LaRa produces blurry outputs, while MipNeRF360 suffers from floater artifacts and SplatFields smooths out fine details. Both 2DGS and 3DGS exhibit spiky artifacts. In contrast, SplatFormer significantly reduces the artifacts present in 3DGS, completes surface reconstruction, and even restores certain geometric properties, such as interlaced structures. While our method still faces challenges with high-frequency texture details, it outperforms previous approaches in terms of fidelity and consistency in out-of-distribution views, which is also supported by the clear quantitative improvements demonstrated in our results (Tab. [1]Table 1 ‣ 4.1 Learning Data-Driven Prior ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). Additional visual results are provided in the appendix (Sec. [E]Appendix E Comparisons with Baselines ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) and the supplementary video.\n\n|  | Four of Input Views | Nerfbusters | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| GSO-OOD | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\n|  | Camera Setup | Nerfbusters | MipNeRF360 | 2DGS | 3DGS | Ours | GT |\n| RealWorld-OOD | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\nFigure 5: Cross-dataset Generalization. SplatFormer trained on Objaverse successfully mitigates artifacts in OOD views in the GSO (Downs et al., [2022]) dataset and our real-world object-centric captures. Additional results are presented in the appendix (Fig. [F.4]Figure F.4 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") and Fig. [F.5]Figure F.5 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).\n\nGeneralization Across a Range of View Deviations.\nOur method does not overfit to the extreme top views present in the SplatFormer training set but generalizes across a range of views, transitioning from input to extreme target views. To demonstrate this, we evaluate NVS with elevations ϕ∈\\[10∘,90∘\\]italic-ϕsuperscript10superscript90\\\\phi\\\\in\\[10^{\\\\circ},90^{\\\\circ}\\] in Objaverse-OOD scenes and compare SplatFormer to 3DGS (Fig. [2]Figure 2 ‣ 4 Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). While 3DGS performance degrades significantly as the viewing angle deviates from the input views, our method provides more robust synthesis for target views in the range ϕ∈\\[25∘,90∘\\]italic-ϕsuperscript25superscript90\\\\phi\\\\in\\[25^{\\\\circ},90^{\\\\circ}\\].\n\nTable 2: Cross-dataset Generalization\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Methods | GSO-OOD | RealWorld-OOD |\n|  | PSNR | SSIM | LPIPS | PSNR | SSIM | LPIPS |\n| Nerfbusters | 15.95 | 0.678 | 0.300 | 23.93 | 0.893 | 0.114 |\n| 2DGS | 23.29 | 0.816 | 0.204 | 23.64 | 0.891 | 0.104 |\n| MipNeRF360 | 22.90 | 0.824 | 0.192 | 21.99 | 0.878 | 0.127 |\n| 3DGS | 21.78 | 0.746 | 0.250 | 23.83 | 0.877 | 0.109 |\n| \\\\hdashline<br>SplatFormer | 25.01 | 0.863 | 0.148 | 24.33 | 0.902 | 0.100 |\n\nCross-dataset, Real World Generalization. Following the OOD-NVS protocol, we rendered 20 objects from Google Scanned Objects (GSO) (Downs et al., [2022]) and captured 4 real-world scenes. Low-elevation views were used to optimize the initial set of Gaussians, while the OOD views were reserved for validation. For real-world captures with unbounded backgrounds, we segmented the foreground objects. Additional details are provided in the appendix (Sec. [A.1]Figure A.1 ‣ Appendix A Evaluation Datasets ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")).\nSplatFormer, trained on synthetic data, shows generalization to 3D-scanned real-world objects from the GSO dataset, as well as to real-world mobile phone captures (Tab. [5]Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), Fig. [5]Figure 5 ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")). This suggests that our method does not learn object-specific prior as SSDNeRF (Chen et al., [2023]) and HypNeRF (Sen et al., [2023]), and the 3DGS refinement prior can be transferred across object categories.\n\nOn the GSO-OOD evaluation set, SplatFormer achieves substantial improvements in both metrics and visual quality. Even on the real-world dataset, despite being trained exclusively on synthetic data, SplatFormer reduces artifacts. These improvements are reflected in the SSIM and LPIPS metrics, though we observed rather minimal improvements in PSNR, which we attribute to the pixel-wise PSNR’s sensitivity to imperfect calibration and our method’s limitation in modeling specular effects. Our method also outperforms MipNeRF360 and 2DGS, the best-performing baselines in Objaverse-OOD (Tab. [1]), which addresses robust novel view synthesis from novel camera trajectories—a relevant challenge to OOD-NVS. However, we find that Nerfbusters tends to mistakenly remove key scene content as floaters, leading to incomplete geometry.\n\nTable 3: SplatFormer vs 2D Denoising\n\n|  | ShapeNet-OOD |\n| Method | PSNR | SSIM | LPIPS |\n| 3DGS | 20.21 | 0.763 | 0.242 |\n| DiffBIR-stage1 (Lin et al., [2024]) | 24.81 | 0.892 | 0.163 |\n| DiffBIR-stage2 (Lin et al., [2024]) | 24.24 | 0.858 | 0.174 |\n| Retrained 3DGS with stage1 | 25.16 | 0.894 | 0.164 |\n| Retrained 3DGS with stage2 | 24.83 | 0.870 | 0.174 |\n| \\\\hdashline<br>SplatFormer | 28.09 | 0.920 | 0.135 |\n\n3D vs 2D Denoising.\nAn alternative strategy for refining OOD-NVS renderings is to use 2D image restoration methods. To explore this, we use DiffBIR (Lin et al., [2024]), a state-of-the-art image restoration method, to denoise 3DGS renderings. DiffBIR consists of two cascaded models: a first-stage image-to-image regressor to remove artifacts and a second-stage diffusion-based generator (Rombach et al., [2021]) to in-paint missing details.\nWe trained both stages using pairs of OOD 3DGS renderings and ground-truth images from our ShapeNet-OOD training set. To address multi-view inconsistencies in the denoised images, we also used the generated images to retrain the 3DGS. This experiment is similar to Sp2360 (Paul et al., [2024]), which uses cascaded 2D diffusion priors to regularize 3DGS from sparse-view inputs.\nAs shown in Tab. [5]Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), while 2D denoising methods improve the original 3DGS, they significantly underperform compared to SplatFormer and fail to recover geometric details. See the appendix (Fig. [C.1]Figure C.1 ‣ Appendix C More Experiments ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\")) for visual comparisons.\n\nTable 4: Ablations\n\n|  |  | Objaverse-OOD |\n| Backbone | Prediction | PSNR | SSIM | LPIPS |\n| PTv3  (Wu et al., [2024b]) | Direct | 21.36 | 0.772 | 0.211 |\n| Mink (Choy et al., [2019]) | Residual | 22.67 | 0.807 | 0.181 |\n| \\\\hdashline<br>PTv3  (Wu et al., [2024b]) | Residual | 23.06 | 0.821 | 0.170 |\n\nAblation: Backbone and Supervision.\nWe compare our PTv3 (Wu et al., [2024b]) transformer-based architecture with widely used Minkowski (Choy et al., [2019]) engine. Additionally, to validate the effectiveness of the residual prediction strategy outlined in Sec. [4]Robust Out-of-distribution Novel View Synthesis ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), we train a variant that directly predicts the full 3DGS attributes (direct component). The results in Tab. [5]Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") show that the point transformer architecture and residual-based learning improve performance compared to the alternatives.\n\nLimitations and Future Work. Our method has several limitations that provide directions for future work. First, despite outperforming all the considered baselines, it still struggles to reconstruct fine-grained details and complex texture. Second, the generalization to real-world captures could be improved by scaling up training examples and by enhancing the realism of synthetic lighting. Third, applying our method to refining 2DGS may further improve the OOD-NVS results. Finally, it would be valuable to train our method to remove OOD-NVS artifacts in unbounded scenes and with a wider range of OOD camera setups. In the appendix [F]Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\"), we present a experimental result in Fig. [F.1]Figure F.1 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") and Tab. [F.1]Figure F.1 ‣ Appendix F Limitations and Future Directions ‣ Funding ‣ 6 Conclusion ‣ 5 Experiments ‣ SplatFormer: Point Transformer for Robust 3D Gaussian Splatting\") using the MVImgNet dataset  (Yu et al., [2023]), and outline both the potential and challenges. Please refer to it for an extended discussion.",
      "citations": [
        {
          "start_pos": 1281,
          "end_pos": 1301,
          "text": "Chang et al., [2015]",
          "paper_id": "bib.bib4",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib12",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 1321,
          "end_pos": 1342,
          "text": "Deitke et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2625,
          "end_pos": 2644,
          "text": "ller et al., [2022]",
          "paper_id": "bib.bib31",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2653,
          "end_pos": 2673,
          "text": "Kerbl et al., [2023]",
          "paper_id": "bib.bib20",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2692,
          "end_pos": 2713,
          "text": "Barron et al., [2022]",
          "paper_id": "bib.bib1",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2831,
          "end_pos": 2852,
          "text": "Huang et al., [2024a]",
          "paper_id": "bib.bib17",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2871,
          "end_pos": 2896,
          "text": "Mihajlovic et al., [2024]",
          "paper_id": "bib.bib28",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3045,
          "end_pos": 3063,
          "text": "Fan et al., [2024]",
          "paper_id": "bib.bib12",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib4",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 3072,
          "end_pos": 3090,
          "text": "Zhu et al., [2024]",
          "paper_id": "bib.bib58",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3102,
          "end_pos": 3121,
          "text": "Chen et al., [2023]",
          "paper_id": "bib.bib7",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3248,
          "end_pos": 3268,
          "text": "Chen et al., [2024a]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3315,
          "end_pos": 3334,
          "text": "Liu et al., [2023b]",
          "paper_id": "bib.bib27",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 6096,
          "end_pos": 6116,
          "text": "Downs et al., [2022]",
          "paper_id": "bib.bib11",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 8071,
          "end_pos": 8091,
          "text": "Downs et al., [2022]",
          "paper_id": "bib.bib11",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 8987,
          "end_pos": 9006,
          "text": "Chen et al., [2023]",
          "paper_id": "bib.bib7",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 9021,
          "end_pos": 9039,
          "text": "Sen et al., [2023]",
          "paper_id": "bib.bib38",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 9708,
          "end_pos": 9711,
          "text": "[1]",
          "paper_id": "bib.bib44",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 10089,
          "end_pos": 10107,
          "text": "Lin et al., [2024]",
          "paper_id": "bib.bib25",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 10153,
          "end_pos": 10171,
          "text": "Lin et al., [2024]",
          "paper_id": "bib.bib25",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 10514,
          "end_pos": 10532,
          "text": "Lin et al., [2024]",
          "paper_id": "bib.bib25",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 10754,
          "end_pos": 10776,
          "text": "Rombach et al., [2021]",
          "paper_id": "bib.bib36",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 11080,
          "end_pos": 11099,
          "text": "Paul et al., [2024]",
          "paper_id": "bib.bib32",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 11741,
          "end_pos": 11759,
          "text": "Wu et al., [2024b]",
          "paper_id": "bib.bib49",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 11804,
          "end_pos": 11823,
          "text": "Choy et al., [2019]",
          "paper_id": "bib.bib9",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 11886,
          "end_pos": 11904,
          "text": "Wu et al., [2024b]",
          "paper_id": "bib.bib49",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12001,
          "end_pos": 12019,
          "text": "Wu et al., [2024b]",
          "paper_id": "bib.bib49",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 12080,
          "end_pos": 12099,
          "text": "Choy et al., [2019]",
          "paper_id": "bib.bib9",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 13857,
          "end_pos": 13874,
          "text": "Yu et al., [2023]",
          "paper_id": "bib.bib55",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        }
      ]
    },
    "6 Conclusion": {
      "content": "Photorealistic rendering of 3D assets under diverse viewing conditions is critical for AR and VR applications. In this work, we introduced a new out-of-distribution (OOD) novel view synthesis test scenario and demonstrated that most neural rendering methods, including those using regularization techniques and data-driven priors, suffer substantial quality degradation when test viewing angles deviate significantly from the training set, highlighting the need for more robust rendering techniques. As an initial step towards addressing the problem, we proposed SplatFormer, a novel point transformer model designed to overcome the limitations of 3D Gaussian Splatting in handling OOD views. By refining 3DGS representations in a single forward pass, SplatFormer significantly improves rendering quality in these scenarios and achieves state-of-the-art performance, outperforming prior methods designed for both sparse and dense view inputs. The success of our model further underscores the potential of integrating transformers into photorealistic rendering workflows.\n\n#### Funding\n\nThis study was conducted within the national ”Proficiency”111 [https://surgicalproficiency.ch] research project funded by the Swiss Innovation Agency Innosuisse in 2021 as one of 15 flagship initiatives.",
      "citations": []
    }
  },
  "references": {
    "data": {
      "bib.bib2": {
        "id": "bib.bib2",
        "citation": "Brown et al. (2020)",
        "authors": "",
        "year": "",
        "title": "Language models are few-shot learners.",
        "venue": "NeurIPS",
        "pages": "",
        "url": "",
        "arxiv_id": "2005.14165",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Recent years have featured a trend towards pre-trained language representations in NLP systems, applied in increasingly flexible and task-agnostic ways for downstream transfer. First, single-layer representations were learned using word vectors \\[ [82]), [102])\\] and fed to task-specific architectures, then RNNs with multiple layers of representations and contextual state were used to form stronger representations \\[ [24]), [81]), [100])\\] (though still applied to task-specific architectures), and more recently pre-trained recurrent or transformer language models \\[ [134])\\] have been directly fine-tuned, entirely removing the need for task-specific architectures \\[ [112]), [20]), [43])\\].\n\n![Refer to caption]Figure 1.1: Language model meta-learning. During unsupervised pre-training, a language model develops a broad set of skills and pattern recognition abilities. It then uses these abilities at inference time to rapidly adapt to or recognize the desired task. We use the term “in-context learning” to describe the inner loop of this process, which occurs within the forward-pass upon each sequence. The sequences in this diagram are not intended to be representative of the data a model would see during pre-training, but are intended to show that there are sometimes repeated sub-tasks embedded within a single sequence.\n\nThis last paradigm has led to substantial progress on many challenging NLP tasks such as reading comprehension, question answering, textual entailment, and many others, and has continued to advance based on new architectures and algorithms \\[ [116]), [74]), [139]), [62])\\]. However, a major limitation to this approach is that while the architecture is task-agnostic, there is still a need for task-specific datasets and task-specific fine-tuning: to achieve strong performance on a desired task typically requires fine-tuning on a dataset of thousands to hundreds of thousands of examples specific to that task. Removing this limitation would be desirable, for several reasons.\n\nFirst, from a practical perspective, the need for a large dataset of labeled examples for every new task limits the applicability of language models. There exists a very wide range of possible useful language tasks, encompassing anything from correcting grammar, to generating examples of an abstract concept, to critiquing a short story. For many of these tasks it is difficult to collect a large supervised training dataset, especially when the process must be repeated for every new task.\n\nSecond, the potential to exploit spurious correlations in training data fundamentally grows with the expressiveness of the model and the narrowness of the training distribution. This can create problems for the pre-training plus fine-tuning paradigm, where models are designed to be large to absorb information during pre-training, but are then fine-tuned on very narrow task distributions. For instance \\[ [41])\\] observe that larger models do not necessarily generalize better out-of-distribution. There is evidence that suggests that the generalization achieved under this paradigm can be poor because the model is overly specific to the training distribution and does not generalize well outside it \\[ [138]), [88])\\]. Thus, the performance of fine-tuned models on specific benchmarks, even when it is nominally at human-level, may exaggerate actual performance on the underlying task \\[ [36]), [91])\\].\n\nThird, humans do not require large supervised datasets to learn most language tasks – a brief directive in natural language (e.g. “please tell me if this sentence describes something happy or something sad”) or at most a tiny number of demonstrations (e.g. “here are two examples of people acting brave; please give a third example of bravery”) is often sufficient to enable a human to perform a new task to at least a reasonable degree of competence. Aside from pointing to a conceptual limitation in our current NLP techniques, this adaptability has practical advantages – it allows humans to seamlessly mix together or switch between many tasks and skills, for example performing addition during a lengthy dialogue. To be broadly useful, we would someday like our NLP systems to have this same fluidity and generality.\n\nOne potential route towards addressing these issues is meta-learning111In the context of language models this has sometimes been called “zero-shot transfer”, but this term is potentially ambiguous: the method is “zero-shot” in the sense that no gradient updates are performed, but it often involves providing inference-time demonstrations to the model, so is not truly learning from zero examples. To avoid this confusion, we use the term “meta-learning” to capture the inner-loop / outer-loop structure of the general method, and the term “in context-learning” to refer to the inner loop of meta-learning. We further specialize the description to “zero-shot”, “one-shot”, or “few-shot” depending on how many demonstrations are provided at inference time. These terms are intended to remain agnostic on the question of whether the model learns new tasks from scratch at inference time or simply recognizes patterns seen during training – this is an important issue which we discuss later in the paper, but “meta-learning” is intended to encompass both possibilities, and simply describes the inner-outer loop structure. – which in the context of language models means the model develops a broad set of skills and pattern recognition abilities at training time, and then uses those abilities at inference time to rapidly adapt to or recognize the desired task (illustrated in Figure [1.1]Figure 1.1 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\")). Recent work \\[ [117])\\] attempts to do this via what we call “in-context learning”, using the text input of a pretrained language model as a form of task specification: the model is conditioned on a natural language instruction and/or a few demonstrations of the task and is then expected to complete further instances of the task simply by predicting what comes next.\n\nWhile it has shown some initial promise, this approach still achieves results far inferior to fine-tuning – for example \\[ [117])\\] achieves only 4% on Natural Questions, and even its 55 F1 CoQa result is now more than 35 points behind the state of the art. Meta-learning clearly requires substantial improvement in order to be viable as a practical method of solving language tasks.\n\nAnother recent trend in language modeling may offer a way forward. In recent years the capacity of transformer language models has increased substantially, from 100 million parameters \\[ [112])\\], to 300 million parameters \\[ [20])\\], to 1.5 billion parameters \\[ [117])\\], to 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and finally 17 billion parameters \\[ [132])\\]. Each increase has brought improvements in text synthesis and/or downstream NLP tasks, and there is evidence suggesting that log loss, which correlates well with many downstream tasks, follows a smooth trend of improvement with scale \\[ [57])\\]. Since in-context learning involves absorbing many skills and tasks within the parameters of the model, it is plausible that in-context learning abilities might show similarly strong gains with scale.\n\n![Refer to caption]Figure 1.2: Larger models make increasingly efficient use of in-context information.   We show in-context learning performance on a simple task requiring the model to remove random symbols from a word, both with and without a natural language task description (see Sec. [3.9.2]Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). The steeper “in-context learning curves” for large models demonstrate improved ability to learn a task from contextual information. We see qualitatively similar behavior across a wide range of tasks.![Refer to caption]Figure 1.3: Aggregate performance for all 42 accuracy-denominated benchmarks   While zero-shot performance improves steadily with model size, few-shot performance increases more rapidly, demonstrating that larger models are more proficient at in-context learning. See Figure [3.8]Figure 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\") for a more detailed analysis on SuperGLUE, a standard NLP benchmark suite.\n\nIn this paper, we test this hypothesis by training a 175 billion parameter autoregressive language model, which we call GPT-3, and measuring its in-context learning abilities. Specifically, we evaluate GPT-3 on over two dozen NLP datasets, as well as several novel tasks designed to test rapid adaptation to tasks unlikely to be directly contained in the training set. For each task, we evaluate GPT-3 under 3 conditions: (a) “few-shot learning”, or in-context learning where we allow as many demonstrations as will fit into the model’s context window (typically 10 to 100), (b) “one-shot learning”, where we allow only one demonstration, and (c) “zero-shot” learning, where no demonstrations are allowed and only an instruction in natural language is given to the model. GPT-3 could also in principle be evaluated in the traditional fine-tuning setting, but we leave this to future work.\n\nFigure [1.2]Figure 1.2 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\") illustrates the conditions we study, and shows few-shot learning of a simple task requiring the model to remove extraneous symbols from a word. Model performance improves with the addition of a natural language task description, and with the number of examples in the model’s context, K𝐾K. Few-shot learning also improves dramatically with model size. Though the results in this case are particularly striking, the general trends with both model size and number of examples in-context hold for most tasks we study. We emphasize that these “learning” curves involve no gradient updates or fine-tuning, just increasing numbers of demonstrations given as conditioning.\n\nBroadly, on NLP tasks GPT-3 achieves promising results in the zero-shot and one-shot settings, and in the the few-shot setting is sometimes competitive with or even occasionally surpasses state-of-the-art (despite state-of-the-art being held by fine-tuned models). For example, GPT-3 achieves 81.5 F1 on CoQA in the zero-shot setting, 84.0 F1 on CoQA in the one-shot setting, 85.0 F1 in the few-shot setting. Similarly, GPT-3 achieves 64.3% accuracy on TriviaQA in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting, the last of which is state-of-the-art relative to fine-tuned models operating in the same closed-book setting.\n\nGPT-3 also displays one-shot and few-shot proficiency at tasks designed to test rapid adaption or on-the-fly reasoning, which include unscrambling words, performing arithmetic, and using novel words in a sentence after seeing them defined only once. We also show that in the few-shot setting, GPT-3 can generate synthetic news articles which human evaluators have difficulty distinguishing from human-generated articles.\n\nAt the same time, we also find some tasks on which few-shot performance struggles, even at the scale of GPT-3. This includes natural language inference tasks like the ANLI dataset, and some reading comprehension datasets like RACE or QuAC. By presenting a broad characterization of GPT-3’s strengths and weaknesses, including these limitations, we hope to stimulate study of few-shot learning in language models and draw attention to where progress is most needed.\n\nA heuristic sense of the overall results can be seen in Figure [1.3]Figure 1.3 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\"), which aggregates the various tasks (though it should not be seen as a rigorous or meaningful benchmark in itself).\n\nWe also undertake a systematic study of “data contamination” – a growing problem when training high capacity models on datasets such as Common Crawl, which can potentially include content from test datasets simply because such content often exists on the web. In this paper we develop systematic tools to measure data contamination and quantify its distorting effects. Although we find that data contamination has a minimal effect on GPT-3’s performance on most datasets, we do identify a few datasets where it could be inflating results, and we either do not report results on these datasets or we note them with an asterisk, depending on the severity.\n\nIn addition to all the above, we also train a series of smaller models (ranging from 125 million parameters to 13 billion parameters) in order to compare their performance to GPT-3 in the zero, one and few-shot settings. Broadly, for most tasks we find relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap between zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models are more proficient meta-learners.\n\nFinally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and broader societal impacts, and attempt a preliminary analysis of GPT-3’s characteristics in this regard.\n\nThe remainder of this paper is organized as follows. In Section [2]Approach ‣ Language Models are Few-Shot Learners\"), we describe our approach and methods for training GPT-3 and evaluating it. Section [3]Results ‣ Language Models are Few-Shot Learners\") presents results on the full range of tasks in the zero-, one- and few-shot settings. Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") addresses questions of data contamination (train-test overlap). Section [5]Limitations ‣ Language Models are Few-Shot Learners\") discusses limitations of GPT-3. Section [6]Broader Impacts ‣ Language Models are Few-Shot Learners\") discusses broader impacts. Section [7]Related Work ‣ Language Models are Few-Shot Learners\") reviews related work and Section [8]Conclusion ‣ Language Models are Few-Shot Learners\") concludes.",
            "citations": null
          },
          "2 Approach": {
            "content": "![Refer to caption]Figure 2.1: Zero-shot, one-shot and few-shot, contrasted with traditional fine-tuning. The panels above show four methods for performing a task with a language model – fine-tuning is the traditional method, whereas zero-, one-, and few-shot, which we study in this work, require the model to perform the task with only forward passes at test time. We typically present the model with a few dozen examples in the few shot setting. Exact phrasings for all task descriptions, examples and prompts can be found in Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\").\n\nOur basic pre-training approach, including model, data, and training, is similar to the process described in \\[ [117])\\], with relatively straightforward scaling up of the model size, dataset size and diversity, and length of training. Our use of in-context learning is also similar to \\[ [117])\\], but in this work we systematically explore different settings for learning within the context. Therefore, we start this section by explicitly defining and contrasting the different settings that we will be evaluating GPT-3 on or could in principle evaluate GPT-3 on. These settings can be seen as lying on a spectrum of how much task-specific data they tend to rely on. Specifically, we can identify at least four points on this spectrum (see Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") for an illustration):\n\n- •\n\n\nFine-Tuning (FT) has been the most common approach in recent years, and involves updating the weights of a pre-trained model by training on a supervised dataset specific to the desired task. Typically thousands to hundreds of thousands of labeled examples are used. The main advantage of fine-tuning is strong performance on many benchmarks. The main disadvantages are the need for a new large dataset for every task, the potential for poor generalization out-of-distribution \\[ [88])\\], and the potential to exploit spurious features of the training data \\[ [36]), [91])\\], potentially resulting in an unfair comparison with human performance. In this work we do not fine-tune GPT-3 because our focus is on task-agnostic performance, but GPT-3 can be fine-tuned in principle and this is a promising direction for future work.\n\n- •\n\n\nFew-Shot (FS) is the term we will use in this work to refer to the setting where the model is given a few demonstrations of the task at inference time as conditioning \\[ [117])\\], but no weight updates are allowed. As shown in Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\"), for a typical dataset an example has a context and a desired completion (for example an English sentence and the French translation), and few-shot works by giving K𝐾K examples of context and completion, and then one final example of context, with the model expected to provide the completion. We typically set K𝐾K in the range of 10 to 100 as this is how many examples can fit in the model’s context window (nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048). The main advantages of few-shot are a major reduction in the need for task-specific data and reduced potential to learn an overly narrow distribution from a large but narrow fine-tuning dataset. The main disadvantage is that results from this method have so far been much worse than state-of-the-art fine-tuned models. Also, a small amount of task specific data is still required. As indicated by the name, few-shot learning as described here for language models is related to few-shot learning as used in other contexts in ML \\[ [45]), [133])\\] – both involve learning based on a broad distribution of tasks (in this case implicit in the pre-training data) and then rapidly adapting to a new task.\n\n- •\n\n\nOne-Shot (1S) is the same as few-shot except that only one demonstration is allowed, in addition to a natural language description of the task, as shown in Figure 1. The reason to distinguish one-shot from few-shot and zero-shot (below) is that it most closely matches the way in which some tasks are communicated to humans. For example, when asking humans to generate a dataset on a human worker service (for example Mechanical Turk), it is common to give one demonstration of the task. By contrast it is sometimes difficult to communicate the content or format of a task if no examples are given.\n\n- •\n\n\nZero-Shot (0S) is the same as one-shot except that no demonstrations are allowed, and the model is only given a natural language instruction describing the task. This method provides maximum convenience, potential for robustness, and avoidance of spurious correlations (unless they occur very broadly across the large corpus of pre-training data), but is also the most challenging setting. In some cases it may even be difficult for humans to understand the format of the task without prior examples, so this setting is in some cases “unfairly hard”. For example, if someone is asked to “make a table of world records for the 200m dash”, this request can be ambiguous, as it may not be clear exactly what format the table should have or what should be included (and even with careful clarification, understanding precisely what is desired can be difficult). Nevertheless, for at least some settings zero-shot is closest to how humans perform tasks – for example, in the translation example in Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\"), a human would likely know what to do from just the text instruction.\n\n\nFigure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the four methods using the example of translating English to French. In this paper we focus on zero-shot, one-shot and few-shot, with the aim of comparing them not as competing alternatives, but as different problem settings which offer a varying trade-off between performance on specific benchmarks and sample efficiency. We especially highlight the few-shot results as many of them are only slightly behind state-of-the-art fine-tuned models. Ultimately, however, one-shot, or even sometimes zero-shot, seem like the fairest comparisons to human performance, and are important targets for future work.\n\nSections [2.1]Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\")- [2.3]Training Process ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") below give details on our models, training data, and training process respectively.\nSection [2.4]Evaluation ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") discusses the details of how we do few-shot, one-shot, and zero-shot evaluations.\n\n### 2.1 Model and Architectures\n\nWe use the same model and architecture as GPT-2 \\[ [117])\\], including the modified initialization, pre-normalization, and reversible tokenization described therein, with the exception that we use alternating dense and locally banded sparse attention patterns in the layers of the transformer, similar to the Sparse Transformer \\[ [15])\\]. To study the dependence of ML performance on model size, we train 8 different sizes of model, ranging over three orders of magnitude from 125 million parameters to 175 billion parameters, with the last being the model we call GPT-3. Previous work \\[ [57])\\] suggests that with enough training data, scaling of validation loss should be approximately a smooth power law as a function of size; training models of many different sizes allows us to test this hypothesis both for validation loss and for downstream language tasks.\n\n| Model Name | nparamssubscript𝑛paramsn\\_{\\\\mathrm{params}} | nlayerssubscript𝑛layersn\\_{\\\\mathrm{layers}} | dmodelsubscript𝑑modeld\\_{\\\\mathrm{model}} | nheadssubscript𝑛headsn\\_{\\\\mathrm{heads}} | dheadsubscript𝑑headd\\_{\\\\mathrm{head}} | Batch Size | Learning Rate |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| GPT-3 Small | 125M | 12 | 768 | 12 | 64 | 0.5M | 6.0×10−46.0superscript1046.0\\\\times 10^{-4} |\n| GPT-3 Medium | 350M | 24 | 1024 | 16 | 64 | 0.5M | 3.0×10−43.0superscript1043.0\\\\times 10^{-4} |\n| GPT-3 Large | 760M | 24 | 1536 | 16 | 96 | 0.5M | 2.5×10−42.5superscript1042.5\\\\times 10^{-4} |\n| GPT-3 XL | 1.3B | 24 | 2048 | 24 | 128 | 1M | 2.0×10−42.0superscript1042.0\\\\times 10^{-4} |\n| GPT-3 2.7B | 2.7B | 32 | 2560 | 32 | 80 | 1M | 1.6×10−41.6superscript1041.6\\\\times 10^{-4} |\n| GPT-3 6.7B | 6.7B | 32 | 4096 | 32 | 128 | 2M | 1.2×10−41.2superscript1041.2\\\\times 10^{-4} |\n| GPT-3 13B | 13.0B | 40 | 5140 | 40 | 128 | 2M | 1.0×10−41.0superscript1041.0\\\\times 10^{-4} |\n| GPT-3 175B or “GPT-3” | 175.0B | 96 | 12288 | 96 | 128 | 3.2M | 0.6×10−40.6superscript1040.6\\\\times 10^{-4} |\n\nTable 2.1: Sizes, architectures, and learning hyper-parameters (batch size in tokens and learning rate) of the models which we trained. All models were trained for a total of 300 billion tokens.\n\nTable [2.1]Table 2.1 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the sizes and architectures of our 8 models. Here nparamssubscript𝑛paramsn\\_{\\\\mathrm{params}} is the total number of trainable parameters, nlayerssubscript𝑛layersn\\_{\\\\mathrm{layers}} is the total number of layers, dmodelsubscript𝑑modeld\\_{\\\\mathrm{model}} is the number of units in each bottleneck layer (we always have the feedforward layer four times the size of the bottleneck layer, dffsubscript𝑑ffd\\_{\\\\mathrm{ff}}=4∗dmodelabsent∗4subscript𝑑model=4\\\\ast d\\_{\\\\mathrm{model}}), and dheadsubscript𝑑headd\\_{\\\\mathrm{head}} is the dimension of each attention head. All models use a context window of nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048 tokens. We partition the model across GPUs along both the depth and width dimension in order to minimize data-transfer between nodes. The precise architectural parameters for each model are chosen based on computational efficiency and load-balancing in the layout of models across GPU’s. Previous work \\[ [57])\\] suggests that validation loss is not strongly sensitive to these parameters within a reasonably broad range.\n\n![Refer to caption]Figure 2.2: Total compute used during training. Based on the analysis in Scaling Laws For Neural Language Models \\[ [57])\\] we train much larger models on many fewer tokens than is typical. As a consequence, although GPT-3 3B is almost 10x larger than RoBERTa-Large (355M params), both models took roughly 50 petaflop/s-days of compute during pre-training. Methodology for these calculations can be found in Appendix [D]Appendix D Total Compute Used to Train Language Models ‣ Language Models are Few-Shot Learners\").\n\n### 2.2 Training Dataset\n\nDatasets for language models have rapidly expanded, culminating in the Common Crawl dataset222 [https://commoncrawl.org/the-data/]\\[ [116])\\] constituting nearly a trillion words. This size of dataset is sufficient to train our largest models without ever updating on the same sequence twice. However, we have found that unfiltered or lightly filtered versions of Common Crawl tend to have lower quality than more curated datasets. Therefore, we took 3 steps to improve the average quality of our datasets: (1) we downloaded and filtered a version of CommonCrawl based on similarity to a range of high-quality reference corpora, (2) we performed fuzzy deduplication at the document level, within and across datasets, to prevent redundancy and preserve the integrity of our held-out validation set as an accurate measure of overfitting, and (3) we also added known high-quality reference corpora to the training mix to augment CommonCrawl and increase its diversity.\n\nDetails of the first two points (processing of Common Crawl) are described in Appendix [A]Appendix A Details of Common Crawl Filtering ‣ Language Models are Few-Shot Learners\"). For the third, we added several curated high-quality datasets, including an expanded version of the WebText dataset \\[ [117])\\], collected by scraping links over a longer period of time, and first described in \\[ [57])\\], two internet-based books corpora (Books1 and Books2) and English-language Wikipedia.\n\nTable [2.2]Table 2.2 ‣ 2.2 Training Dataset ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the final mixture of datasets that we used in training. The CommonCrawl data was downloaded from 41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before filtering and 570GB after filtering, roughly equivalent to 400 billion byte-pair-encoded tokens. Note that during training, datasets are not sampled in proportion to their size, but rather datasets we view as higher-quality are sampled more frequently, such that CommonCrawl and Books2 datasets are sampled less than once during training, but the other datasets are sampled 2-3 times. This essentially accepts a small amount of overfitting in exchange for higher quality training data.\n\n| Dataset | Quantity(tokens) | Weight intraining mix | Epochs elapsed whentraining for 300B tokens |\n| --- | --- | --- | --- |\n| Common Crawl (filtered) | 410 billion | 60% | 0.44 |\n| WebText2 | 19 billion | 22% | 2.9 |\n| Books1 | 12 billion | 8% | 1.9 |\n| Books2 | 55 billion | 8% | 0.43 |\n| Wikipedia | 3 billion | 3% | 3.4 |\n\nTable 2.2: Datasets used to train GPT-3. “Weight in training mix” refers to the fraction of examples during training that are drawn from a given dataset, which we intentionally do not make proportional to the size of the dataset. As a result, when we train for 300 billion tokens, some datasets are seen up to 3.4 times during training while other datasets are seen less than once.\n\nA major methodological concern with language models pretrained on a broad swath of internet data, particularly large models with the capacity to memorize vast amounts of content, is potential contamination of downstream tasks by having their test or development sets inadvertently seen during pre-training. To reduce such contamination, we searched for and attempted to remove any overlaps with the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug in the filtering caused us to ignore some overlaps, and due to the cost of training it was not feasible to retrain the model. In Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") we characterize the impact of the remaining overlaps, and in future work we will more aggressively remove data contamination.\n\n### 2.3 Training Process\n\nAs found in \\[ [57]), [85])\\], larger models can typically use a larger batch size, but require a smaller learning rate. We measure the gradient noise scale during training and use it to guide our choice of batch size \\[ [85])\\]. Table [2.1]Table 2.1 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the parameter settings we used. To train the larger models without running out of memory, we use a mixture of model parallelism within each matrix multiply and model parallelism across the layers of the network. All models were trained on V100 GPU’s on part of a high-bandwidth cluster provided by Microsoft. Details of the training process and hyperparameter settings are described in Appendix [B]Appendix B Details of Model Training ‣ Language Models are Few-Shot Learners\").\n\n### 2.4 Evaluation\n\nFor few-shot learning, we evaluate each example in the evaluation set by randomly drawing K𝐾K examples from that task’s training set as conditioning, delimited by 1 or 2 newlines depending on the task. For LAMBADA and Storycloze there is no supervised training set available so we draw conditioning examples from the development set and evaluate on the test set. For Winograd (the original, not SuperGLUE version) there is only one dataset, so we draw conditioning examples directly from it.\n\nK𝐾K can be any value from 0 to the maximum amount allowed by the model’s context window, which is nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048 for all models and typically fits 101010 to 100100100 examples. Larger values of K𝐾K are usually but not always better, so when a separate development and test set are available, we experiment with a few values of K𝐾K on the development set and then run the best value on the test set. For some tasks (see Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\")) we also use a natural language prompt in addition to (or for K=0𝐾0K=0, instead of) demonstrations.\n\nOn tasks that involve choosing one correct completion from several options (multiple choice), we provide K𝐾K examples of context plus correct completion, followed by one example of context only, and compare the LM likelihood of each completion. For most tasks we compare the per-token likelihood (to normalize for length), however on a small number of datasets (ARC, OpenBookQA, and RACE) we gain additional benefit as measured on the development set by normalizing by the unconditional probability of each completion, by computing P​(completion\\|context)P​(completion\\|answer​\\_​context)𝑃conditionalcompletioncontext𝑃conditionalcompletionanswer\\_context\\\\frac{P(\\\\mathrm{completion}\\|\\\\mathrm{context})}{P(\\\\mathrm{completion}\\|\\\\mathrm{answer\\\\\\_context})}, where answer​\\_​contextanswer\\_context\\\\mathrm{answer\\\\\\_context} is the string \"Answer: \" or \"A: \" and is used to prompt that the completion should be an answer but is otherwise generic.\n\nOn tasks that involve binary classification, we give the options more semantically meaningful names (e.g. “True” or “False” rather than 0 or 1) and then treat the task like multiple choice; we also sometimes frame the task similar to what is done by \\[ [116])\\] (see Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\")) for details.\n\nOn tasks with free-form completion, we use beam search with the same parameters as \\[ [116])\\]: a beam width of 4 and a length penalty of α=0.6𝛼0.6\\\\alpha=0.6. We score the model using F1 similarity score, BLEU, or exact match, depending on what is standard for the dataset at hand.\n\nFinal results are reported on the test set when publicly available, for each model size and learning setting (zero-, one-, and few-shot). When the test set is private, our model is often too large to fit on the test server, so we report results on the development set. We do submit to the test server on a small number of datasets (SuperGLUE, TriviaQA, PiQa) where we were able to make submission work, and we submit only the 200B few-shot results, and report development set results for everything else.",
            "citations": null
          },
          "3 Results": {
            "content": "![Refer to caption]Figure 3.1: Smooth scaling of performance with compute. Performance (measured in terms of cross-entropy validation loss) follows a power-law trend with the amount of compute used for training. The power-law behavior observed in \\[ [57])\\] continues for an additional two orders of magnitude with only small deviations from the predicted curve. For this figure, we exclude embedding parameters from compute and parameter counts.\n\nIn Figure [3.1]Figure 3.1 ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we display training curves for the 8 models described in Section [2]Approach ‣ Language Models are Few-Shot Learners\"). For this graph we also include 6 additional extra-small models with as few as 100,000 parameters. As observed in \\[ [57])\\], language modeling performance follows a power-law when making efficient use of training compute. After extending this trend by two more orders of magnitude, we observe only a slight (if any) departure from the power-law. One might worry that these improvements in cross-entropy loss come only from modeling spurious details of our training corpus. However, we will see in the following sections that improvements in cross-entropy loss lead to consistent performance gains across a broad spectrum of natural language tasks.\n\nBelow, we evaluate the 8 models described in Section [2]Approach ‣ Language Models are Few-Shot Learners\") (the 175 billion parameter parameter GPT-3 and 7 smaller models) on a wide range of datasets. We group the datasets into 9 categories representing roughly similar tasks.\n\nIn Section [3.1]Language Modeling, Cloze, and Completion Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on traditional language modeling tasks and tasks that are similar to language modeling, such as Cloze tasks and sentence/paragraph completion tasks. In Section [3.2]Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on “closed book” question answering tasks: tasks which require using the information stored in the model’s parameters to answer general knowledge questions. In Section [3.3]Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate the model’s ability to translate between languages (especially one-shot and few-shot). In Section [3.4]Winograd-Style Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate the model’s performance on Winograd Schema-like tasks. In Section [3.5]Common Sense Reasoning ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on datasets that involve commonsense reasoning or question answering. In Section [3.6]Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on reading comprehension tasks, in Section [3.7]SuperGLUE ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on the SuperGLUE benchmark suite, and in [3.8]NLI ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we briefly explore NLI. Finally, in Section [3.9]Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), we invent some additional tasks designed especially to probe in-context learning abilities – these tasks focus on on-the-fly reasoning, adaptation skills, or open-ended text synthesis. We evaluate all tasks in the few-shot, one-shot, and zero-shot settings.\n\n### 3.1 Language Modeling, Cloze, and Completion Tasks\n\nIn this section we test GPT-3’s performance on the traditional task of language modeling, as well as related tasks that involve predicting a single word of interest, completing a sentence or paragraph, or choosing between possible completions of a piece of text.\n\n#### 3.1.1 Language Modeling\n\nWe calculate zero-shot perplexity on the Penn Tree Bank (PTB) \\[ [86])\\] dataset measured in \\[ [117])\\]. We omit the 4 Wikipedia-related tasks in that work because they are entirely contained in our training data, and we also omit the one-billion word benchmark due to a high fraction of the dataset being contained in our training set. PTB escapes these issues due to predating the modern internet. Our largest model sets a new SOTA on PTB by a substantial margin of 15 points, achieving a perplexity of 20.50. Note that since PTB is a traditional language modeling dataset it does not have a clear separation of examples to define one-shot or few-shot evaluation around, so we measure only zero-shot.\n\n| Setting | PTB |\n| --- | --- |\n| SOTA (Zero-Shot) | 35.8a |\n| GPT-3 Zero-Shot | 20.5 |\n\nTable 3.1: Zero-shot results on PTB language modeling dataset. Many other common language modeling datasets are omitted because they are derived from Wikipedia or other sources which are included in GPT-3’s training data. a\\[ [117])\\]\n\n#### 3.1.2 LAMBADA\n\n| Setting | LAMBADA(acc) | LAMBADA(ppl) | StoryCloze(acc) | HellaSwag(acc) |\n| --- | --- | --- | --- | --- |\n| SOTA | 68.0a | 8.63b | 91.8c | 85.6d |\n| GPT-3 Zero-Shot | 76.2 | 3.00 | 83.2 | 78.9 |\n| GPT-3 One-Shot | 72.5 | 3.35 | 84.7 | 78.1 |\n| GPT-3 Few-Shot | 86.4 | 1.92 | 87.7 | 79.3 |\n\nTable 3.2: Performance on cloze and completion tasks. GPT-3 significantly improves SOTA on LAMBADA while achieving respectable performance on two difficult completion prediction datasets. a\\[ [132])\\]b\\[ [117])\\]c\\[ [64])\\]d\\[ [63])\\]![Refer to caption]Figure 3.2: On LAMBADA, the few-shot capability of language models results in a strong boost to accuracy. GPT-3 2.7B outperforms the SOTA 17B parameter Turing-NLG \\[ [132])\\] in this setting, and GPT-3 175B advances the state of the art by 18%. Note zero-shot uses a different format from one-shot and few-shot as described in the text.\n\nThe LAMBADA dataset \\[ [99])\\] tests the modeling of long-range dependencies in text – the model is asked to predict the last word of sentences which require reading a paragraph of context. It has recently been suggested that the continued scaling of language models is yielding diminishing returns on this difficult benchmark. \\[ [9])\\] reflect on the small 1.5% improvement achieved by a doubling of model size between two recent state of the art results (\\[ [125])\\] and \\[ [132])\\]) and argue that “continuing to expand hardware and data sizes by orders of magnitude is not the path forward”. We find that path is still promising and in a zero-shot setting GPT-3 achieves 76% on LAMBADA, a gain of 8% over the previous state of the art.\n\nLAMBADA is also a demonstration of the flexibility of few-shot learning as it provides a way to address a problem that classically occurs with this dataset. Although the completion in LAMBADA is always the last word in a sentence, a standard language model has no way of knowing this detail. It thus assigns probability not only to the correct ending but also to other valid continuations of the paragraph. This problem has been partially addressed in the past with stop-word filters \\[ [117])\\] (which ban “continuation” words). The few-shot setting instead allows us to “frame” the task as a cloze-test and allows the language model to infer from examples that a completion of exactly one word is desired. We use the following fill-in-the-blank format:\n\nAlice was friends with Bob. Alice went to visit her friend . →→\\\\to Bob\n\nGeorge bought some baseball equipment, a ball, a glove, and a . →→\\\\to\n\nWhen presented with examples formatted this way, GPT-3 achieves 86.4% accuracy in the few-shot setting, an increase of over 18% from the previous state-of-the-art. We observe that few-shot performance improves strongly with model size. While this setting decreases the performance of the smallest model by almost 20%, for GPT-3 it improves accuracy by 10%. Finally, the fill-in-blank method is not effective one-shot, where it always performs worse than the zero-shot setting. Perhaps this is because all models still require several examples to recognize the pattern.\n\nOne note of caution is that an analysis of test set contamination identified that a significant minority of the LAMBADA dataset appears to be present in our training data – however analysis performed in Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") suggests negligible impact on performance.\n\n#### 3.1.3 HellaSwag\n\nThe HellaSwag dataset \\[ [140])\\] involves picking the best ending to a story or set of instructions. The examples were adversarially mined to be difficult for language models while remaining easy for humans (who achieve 95.6% accuracy). GPT-3 achieves 78.1% accuracy in the one-shot setting and 79.3% accuracy in the few-shot setting, outperforming the 75.4% accuracy of a fine-tuned 1.5B parameter language model \\[ [141])\\] but still a fair amount lower than the overall SOTA of 85.6% achieved by the fine-tuned multi-task model ALUM.\n\n#### 3.1.4 StoryCloze\n\nWe next evaluate GPT-3 on the StoryCloze 2016 dataset \\[ [83])\\], which involves selecting the correct ending sentence for five-sentence long stories. Here GPT-3 achieves 83.2% in the zero-shot setting and 87.7% in the few-shot setting (with K=70𝐾70K=70). This is still 4.1% lower than the fine-tuned SOTA using a BERT based model \\[ [64])\\] but improves over previous zero-shot results by roughly 10%.\n\n### 3.2 Closed Book Question Answering\n\n| Setting | NaturalQS | WebQS | TriviaQA |\n| --- | --- | --- | --- |\n| RAG (Fine-tuned, Open-Domain) \\[ [75])\\] | 44.5 | 45.5 | 68.0 |\n| T5-11B+SSM (Fine-tuned, Closed-Book) \\[ [115])\\] | 36.6 | 44.7 | 60.5 |\n| T5-11B (Fine-tuned, Closed-Book) | 34.5 | 37.4 | 50.1 |\n| GPT-3 Zero-Shot | 14.6 | 14.4 | 64.3 |\n| GPT-3 One-Shot | 23.0 | 25.3 | 68.0 |\n| GPT-3 Few-Shot | 29.9 | 41.5 | 71.2 |\n\nTable 3.3: Results on three Open-Domain QA tasks. GPT-3 is shown in the few-, one-, and zero-shot settings, as compared to prior SOTA results for closed book and open domain settings. TriviaQA few-shot result is evaluated on the wiki split test server.![Refer to caption]Figure 3.3: On TriviaQA GPT3’s performance grows smoothly with model size, suggesting that language models continue to absorb knowledge as their capacity increases. One-shot and few-shot performance make significant gains over zero-shot behavior, matching and exceeding the performance of the SOTA fine-tuned open-domain model, RAG \\[ [75])\\]\n\nIn this section we measure GPT-3’s ability to answer questions about broad factual knowledge. Due to the immense amount of possible queries, this task has normally been approached by using an information retrieval system to find relevant text in combination with a model which learns to generate an answer given the question and the retrieved text. Since this setting allows a system to search for and condition on text which potentially contains the answer it is denoted “open-book”. \\[ [115])\\] recently demonstrated that a large language model can perform surprisingly well directly answering the questions without conditioning on auxilliary information. They denote this more restrictive evaluation setting as “closed-book”. Their work suggests that even higher-capacity models could perform even better and we test this hypothesis with GPT-3. We evaluate GPT-3 on the 3 datasets in \\[ [115])\\]: Natural Questions \\[ [58])\\], WebQuestions \\[ [5])\\], and TriviaQA \\[ [49])\\], using the same splits. Note that in addition to all results being in the closed-book setting, our use of few-shot, one-shot, and zero-shot evaluations represent an even stricter setting than previous closed-book QA work: in addition to external content not being allowed, fine-tuning on the Q&A dataset itself is also not permitted.\n\nThe results for GPT-3 are shown in Table [3.3]Table 3.3 ‣ 3.2 Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). On TriviaQA, we achieve 64.3% in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting. The zero-shot result already outperforms the fine-tuned T5-11B by 14.2%, and also outperforms a version with Q&A tailored span prediction during pre-training by 3.8%. The one-shot result improves by 3.7% and matches the SOTA for an open-domain QA system which not only fine-tunes but also makes use of a learned retrieval mechanism over a 15.3B parameter dense vector index of 21M documents \\[ [75])\\]. GPT-3’s few-shot result further improves performance another 3.2% beyond this.\n\nOn WebQuestions (WebQs), GPT-3 achieves 14.4% in the zero-shot setting, 25.3% in the one-shot setting, and 41.5% in the few-shot setting. This compares to 37.4% for fine-tuned T5-11B, and 44.7% for fine-tuned T5-11B+SSM, which uses a Q&A-specific pre-training procedure. GPT-3 in the few-shot setting approaches the performance of state-of-the-art fine-tuned models. Notably, compared to TriviaQA, WebQS shows a much larger gain from zero-shot to few-shot (and indeed its zero-shot and one-shot performance are poor), perhaps suggesting that the WebQs questions and/or the style of their answers are out-of-distribution for GPT-3. Nevertheless, GPT-3 appears able to adapt to this distribution, recovering strong performance in the few-shot setting.\n\nOn Natural Questions (NQs) GPT-3 achieves 14.6% in the zero-shot setting, 23.0% in the one-shot setting, and 29.9% in the few-shot setting, compared to 36.6% for fine-tuned T5 11B+SSM. Similar to WebQS, the large gain from zero-shot to few-shot may suggest a distribution shift, and may also explain the less competitive performance compared to TriviaQA and WebQS. In particular, the questions in NQs tend towards very fine-grained knowledge on Wikipedia specifically which could be testing the limits of GPT-3’s capacity and broad pretraining distribution.\n\nOverall, on one of the three datasets GPT-3’s one-shot matches the open-domain fine-tuning SOTA. On the other two datasets it approaches the performance of the closed-book SOTA despite not using fine-tuning. On all 3 datasets, we find that performance scales very smoothly with model size (Figure [3.3]Figure 3.3 ‣ 3.2 Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\") Figure [H.7]Figure H.7 ‣ Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\")), possibly reflecting the idea that model capacity translates directly to more ‘knowledge’ absorbed in the parameters of the model.\n\n### 3.3 Translation\n\nFor GPT-2 a filter was used on a multilingual collection of documents to produce an English only dataset due to capacity concerns. Even with this filtering GPT-2 showed some evidence of multilingual capability and performed non-trivially when translating between French and English despite only training on 10 megabytes of remaining French text. Since we increase the capacity by over two orders of magnitude from GPT-2 to GPT-3, we also expand the scope of the training dataset to include more representation of other languages, though this remains an area for further improvement. As discussed in [2.2]Training Dataset ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") the majority of our data is derived from raw Common Crawl with only quality-based filtering. Although GPT-3’s training data is still primarily English (93% by word count), it also includes 7% of text in other languages. These languages are documented in the [supplemental material]. In order to better understand translation capability, we also expand our analysis to include two additional commonly studied languages, German and Romanian.\n\nExisting unsupervised machine translation approaches often combine pretraining on a pair of monolingual datasets with back-translation \\[ [123])\\] to bridge the two languages in a controlled way. By contrast, GPT-3 learns from a blend of training data that mixes many languages together in a natural way, combining them on a word, sentence, and document level. GPT-3 also uses a single training objective which is not customized or designed for any task in particular. However, our one / few-shot settings aren’t strictly comparable to prior unsupervised work since they make use of a small amount of paired examples (1 or 64). This corresponds to up to a page or two of in-context training data.\n\n| Setting | En→→\\\\toFr | Fr→→\\\\toEn | En→→\\\\toDe | De→→\\\\toEn | En→→\\\\toRo | Ro→→\\\\toEn |\n| --- | --- | --- | --- | --- | --- | --- |\n| SOTA (Supervised) | 45.6a | 35.0 b | 41.2c | 40.2d | 38.5e | 39.9e |\n| --- | --- | --- | --- | --- | --- | --- |\n| XLM \\[ [61])\\] | 33.4 | 33.3 | 26.4 | 34.3 | 33.3 | 31.8 |\n| MASS \\[ [127])\\] | 37.5 | 34.9 | 28.3 | 35.2 | 35.2 | 33.1 |\n| mBART \\[ [66])\\] | - | - | 29.8 | 34.0 | 35.0 | 30.5 |\n| GPT-3 Zero-Shot | 25.2 | 21.2 | 24.6 | 27.2 | 14.1 | 19.9 |\n| GPT-3 One-Shot | 28.3 | 33.7 | 26.2 | 30.4 | 20.6 | 38.6 |\n| GPT-3 Few-Shot | 32.6 | 39.2 | 29.7 | 40.6 | 21.0 | 39.5 |\n\nTable 3.4: Few-shot GPT-3 outperforms previous unsupervised NMT work by 5 BLEU when translating into English reflecting its strength as an English LM. We report BLEU scores on the WMT’14 Fr↔↔\\\\leftrightarrowEn, WMT’16 De↔↔\\\\leftrightarrowEn, and WMT’16 Ro↔↔\\\\leftrightarrowEn datasets as measured by multi-bleu.perl with XLM’s tokenization in order to compare most closely with prior unsupervised NMT work. SacreBLEUf\\[ [101])\\] results reported in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\"). Underline indicates an unsupervised or few-shot SOTA, bold indicates supervised SOTA with relative confidence.\na\\[ [29])\\]b\\[ [23])\\]c\\[ [136])\\]d\\[ [95])\\]e\\[ [66])\\]f\\[SacreBLEU signature: BLEU+case.mixed+numrefs.1+smooth.exp+tok.intl+version.1.2.20\\] ![Refer to caption]Figure 3.4: Few-shot translation performance on 6 language pairs as model capacity increases. There is a consistent trend of improvement across all datasets as the model scales, and as well as tendency for translation into English to be stronger than translation from English.\n\nResults are shown in Table [3.4]Table 3.4 ‣ 3.3 Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). Zero-shot GPT-3, which only receives on a natural language description of the task, still underperforms recent unsupervised NMT results. However, providing only a single example demonstration for each translation task improves performance by over 7 BLEU and nears competitive performance with prior work. GPT-3 in the full few-shot setting further improves another 4 BLEU resulting in similar average performance to prior unsupervised NMT work. GPT-3 has a noticeable skew in its performance depending on language direction. For the three input languages studied, GPT-3 significantly outperforms prior unsupervised NMT work when translating into English but underperforms when translating in the other direction. Performance on En-Ro is a noticeable outlier at over 10 BLEU worse than prior unsupervised NMT work. This could be a weakness due to reusing the byte-level BPE tokenizer of GPT-2 which was developed for an almost entirely English training dataset. For both Fr-En and De-En, few shot GPT-3 outperforms the best supervised result we could find but due to our unfamiliarity with the literature and the appearance that these are un-competitive benchmarks we do not suspect those results represent true state of the art. For Ro-En, few shot GPT-3 performs within 0.5 BLEU of the overall SOTA which is achieved by a combination of unsupervised pretraining, supervised finetuning on 608K labeled examples, and backtranslation \\[ [70])\\].\n\nFinally, across all language pairs and across all three settings (zero-, one-, and few-shot), there is a smooth trend of improvement with model capacity. This is shown in Figure [3.4]Figure 3.4 ‣ 3.3 Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\") in the case of few-shot results, and scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\").\n\n### 3.4 Winograd-Style Tasks\n\n| Setting | Winograd | Winogrande (XL) |\n| --- | --- | --- |\n| Fine-tuned SOTA | 90.1a | 84.6b |\n| GPT-3 Zero-Shot | 88.3\\* | 70.2 |\n| GPT-3 One-Shot | 89.7\\* | 73.2 |\n| GPT-3 Few-Shot | 88.6\\* | 77.7 |\n\nTable 3.5: Results on the WSC273 version of Winograd schemas and the adversarial Winogrande dataset. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details on potential contamination of the Winograd test set. a\\[ [118])\\]b\\[ [79])\\]![Refer to caption]Figure 3.5: Zero-, one-, and few-shot performance on the adversarial Winogrande dataset as model capacity scales. Scaling is relatively smooth with the gains to few-shot learning increasing with model size, and few-shot GPT-3 175B is competitive with a fine-tuned RoBERTA-large.\n\nThe Winograd Schemas Challenge \\[ [65])\\] is a classical task in NLP that involves determining which word a pronoun refers to, when the pronoun is grammatically ambiguous but semantically unambiguous to a human. Recently fine-tuned language models have achieved near-human performance on the original Winograd dataset, but more difficult versions such as the adversarially-mined Winogrande dataset \\[ [118])\\] still significantly lag human performance. We test GPT-3’s performance on both Winograd and Winogrande, as usual in the zero-, one-, and few-shot setting.\n\nOn Winograd we test GPT-3 on the original set of 273 Winograd schemas, using the same “partial evaluation” method described in \\[ [117])\\]. Note that this setting differs slightly from the WSC task in the SuperGLUE benchmark, which is presented as binary classification and requires entity extraction to convert to the form described in this section. On Winograd GPT-3 achieves 88.3%, 89.7%, and 88.6% in the zero-shot, one-shot, and few-shot settings, showing no clear in-context learning but in all cases achieving strong results just a few points below state-of-the-art and estimated human performance. We note that contamination analysis found some Winograd schemas in the training data but this appears to have only a small effect on results (see Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\")).\n\nOn the more difficult Winogrande dataset, we do find gains to in-context learning: GPT-3 achieves 70.2% in the zero-shot setting, 73.2% in the one-shot setting, and 77.7% in the few-shot setting. For comparison a fine-tuned RoBERTA model achieves 79%, state-of-the-art is 84.6% achieved with a fine-tuned high capacity model (T5), and human performance on the task as reported by \\[ [118])\\] is 94.0%.\n\n### 3.5 Common Sense Reasoning\n\n| Setting | PIQA | ARC (Easy) | ARC (Challenge) | OpenBookQA |\n| --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 79.4 | 92.0\\[ [55])\\] | 78.5\\[ [55])\\] | 87.2\\[ [55])\\] |\n| GPT-3 Zero-Shot | 80.5\\* | 68.8 | 51.4 | 57.6 |\n| GPT-3 One-Shot | 80.5\\* | 71.2 | 53.2 | 58.8 |\n| GPT-3 Few-Shot | 82.8\\* | 70.1 | 51.5 | 65.4 |\n\nTable 3.6: GPT-3 results on three commonsense reasoning tasks, PIQA, ARC, and OpenBookQA. GPT-3 Few-Shot PIQA result is evaluated on the test server. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details on potential contamination issues on the PIQA test set.![Refer to caption]Figure 3.6: GPT-3 results on PIQA in the zero-shot, one-shot, and few-shot settings. The largest model achieves a score on the development set in all three conditions that exceeds the best recorded score on the task.\n\nNext we consider three datasets which attempt to capture physical or scientific reasoning, as distinct from sentence completion, reading comprehension, or broad knowledge question answering. The first, PhysicalQA (PIQA) \\[ [11])\\], asks common sense questions about how the physical world works and is intended as a probe of grounded understanding of the world. GPT-3 achieves 81.0% accuracy zero-shot, 80.5% accuracy one-shot, and 82.8% accuracy few-shot (the last measured on PIQA’s test server). This compares favorably to the 79.4% accuracy prior state-of-the-art of a fine-tuned RoBERTa. PIQA shows relatively shallow scaling with model size and is still over 10% worse than human performance, but GPT-3’s few-shot and even zero-shot result outperform the current state-of-the-art. Our analysis flagged PIQA for a potential data contamination issue (despite hidden test labels), and we therefore conservatively mark the result with an asterisk. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details.\n\nARC \\[ [14])\\] is a dataset of multiple-choice questions collected from 3rd to 9th grade science exams. On the “Challenge” version of the dataset which has been filtered to questions which simple statistical or information retrieval methods are unable to correctly answer, GPT-3 achieves 51.4% accuracy in the zero-shot setting, 53.2% in the one-shot setting, and 51.5% in the few-shot setting. This is approaching the performance of a fine-tuned RoBERTa baseline (55.9%) from UnifiedQA \\[ [55])\\]. On the “Easy” version of the dataset (questions which either of the mentioned baseline approaches answered correctly), GPT-3 achieves 68.8%, 71.2%, and 70.1% which slightly exceeds a fine-tuned RoBERTa baseline from \\[ [55])\\]. However, both of these results are still much worse than the overall SOTAs achieved by the UnifiedQA which exceeds GPT-3’s few-shot results by 27% on the challenge set and 22% on the easy set.\n\nOn OpenBookQA \\[ [84])\\], GPT-3 improves significantly from zero to few shot settings but is still over 20 points short of the overall SOTA. GPT-3’s few-shot performance is similar to a fine-tuned BERT Large baseline on the leaderboard.\n\nOverall, in-context learning with GPT-3 shows mixed results on commonsense reasoning tasks, with only small and inconsistent gains observed in the one and few-shot learning settings for both PIQA and ARC, but a significant improvement is observed on OpenBookQA. GPT-3 sets SOTA on the new PIQA dataset in all evaluation settings.\n\n### 3.6 Reading Comprehension\n\n| Setting | CoQA | DROP | QuAC | SQuADv2 | RACE-h | RACE-m |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 90.7a | 89.1b | 74.4c | 93.0d | 90.0e | 93.1e |\n| GPT-3 Zero-Shot | 81.5 | 23.6 | 41.5 | 59.5 | 45.5 | 58.4 |\n| GPT-3 One-Shot | 84.0 | 34.3 | 43.3 | 65.4 | 45.9 | 57.4 |\n| GPT-3 Few-Shot | 85.0 | 36.5 | 44.3 | 69.8 | 46.8 | 58.1 |\n\nTable 3.7: Results on reading comprehension tasks. All scores are F1 except results for RACE which report accuracy. a\\[ [53])\\]b\\[ [50])\\]c\\[ [2])\\]d\\[ [103])\\]e\\[ [125])\\]![Refer to caption]Figure 3.7: GPT-3 results on CoQA reading comprehension task. GPT-3 175B achieves 85 F1 in the few-shot setting, only a few points behind measured human performance and state-of-the-art fine-tuned models. Zero-shot and one-shot performance is a few points behind, with the gains to few-shot being largest for bigger models.\n\nNext we evaluate GPT-3 on the task of reading comprehension. We use a suite of 5 datasets including abstractive, multiple choice, and span based answer formats in both dialog and single question settings. We observe a wide spread in GPT-3’s performance across these datasets suggestive of varying capability with different answer formats. In general we observe GPT-3 is on par with initial baselines and early results trained using contextual representations on each respective dataset.\n\nGPT-3 performs best (within 3 points of the human baseline) on CoQA \\[ [106])\\] a free-form conversational dataset and performs worst (13 F1 below an ELMo baseline) on QuAC \\[ [16])\\] a dataset which requires modeling structured dialog acts and answer span selections of teacher-student interactions. On DROP \\[ [27])\\], a dataset testing discrete reasoning and numeracy in the context of reading comprehension, GPT-3 in a few-shot setting outperforms the fine-tuned BERT baseline from the original paper but is still well below both human performance and state-of-the-art approaches which augment neural networks with symbolic systems \\[ [110])\\]. On SQuAD 2.0 \\[ [108])\\], GPT-3 demonstrates its few-shot learning capabilities, improving by almost 10 F1 (to 69.8) compared to a zero-shot setting. This allows it to slightly outperform the best fine-tuned result in the original paper. On RACE \\[ [78])\\], a multiple choice dataset of middle school and high school english examinations, GPT-3 performs relatively weakly and is only competitive with the earliest work utilizing contextual representations and is still 45% behind SOTA.\n\n|  | SuperGLUE | BoolQ | CB | CB | COPA | RTE |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Average | Accuracy | Accuracy | F1 | Accuracy | Accuracy |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 89.0 | 91.0 | 96.9 | 93.9 | 94.8 | 92.5 |\n| Fine-tuned BERT-Large | 69.0 | 77.4 | 83.6 | 75.7 | 70.6 | 71.7 |\n| GPT-3 Few-Shot | 71.8 | 76.4 | 75.6 | 52.0 | 92.0 | 69.0 |\n\n|  | WiC | WSC | MultiRC | MultiRC | ReCoRD | ReCoRD |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Accuracy | Accuracy | Accuracy | F1a | Accuracy | F1 |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 76.1 | 93.8 | 62.3 | 88.2 | 92.5 | 93.3 |\n| Fine-tuned BERT-Large | 69.6 | 64.6 | 24.1 | 70.0 | 71.3 | 72.0 |\n| GPT-3 Few-Shot | 49.4 | 80.1 | 30.5 | 75.4 | 90.2 | 91.1 |\n\nTable 3.8:\nPerformance of GPT-3 on SuperGLUE compared to fine-tuned baselines and SOTA. All results are reported on the test set. GPT-3 few-shot is given a total of 32 examples within the context of each task and performs no gradient updates.\n![Refer to caption]Figure 3.8:\nPerformance on SuperGLUE increases with model size and number of examples in context. A value of K=32𝐾32K=32 means that our model was shown 32 examples per task, for 256 examples total divided across the 8 tasks in SuperGLUE. We report GPT-3 values on the dev set, so our numbers are not directly comparable to the dotted reference lines (our test set results are in Table [3.8]Table 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). The BERT-Large reference model was fine-tuned on the SuperGLUE training set (125K examples), whereas BERT++ was first fine-tuned on MultiNLI (392K examples) and SWAG (113K examples) before further fine-tuning on the SuperGLUE training set (for a total of 630K fine-tuning examples). We find the difference in performance between the BERT-Large and BERT++ to be roughly equivalent to the difference between GPT-3 with one example per context versus eight examples per context.\n\n### 3.7 SuperGLUE\n\nIn order to better aggregate results on NLP tasks and compare to popular models such as BERT and RoBERTa in a more systematic way, we also evaluate GPT-3 on a standardized collection of datasets, the SuperGLUE benchmark \\[ [135])\\]\\[ [135])\\]\\[ [17])\\]\\[ [25])\\]\\[ [105])\\]\\[ [54])\\]\\[ [142])\\]\\[ [21])\\]\\[ [8])\\]\\[ [34])\\]\\[ [6])\\]\\[ [96])\\]\\[ [98])\\]. GPT-3’s test-set performance on the SuperGLUE dataset is shown in Table [3.8]Table 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). In the few-shot setting, we used 32 examples for all tasks, sampled randomly from the training set. For all tasks except WSC and MultiRC, we sampled a new set of examples to use in the context for each problem. For WSC and MultiRC, we used the same set of randomly drawn examples from the training set as context for all of the problems we evaluated.\n\nWe observe a wide range in GPT-3’s performance across tasks. On COPA and ReCoRD GPT-3 achieves near-SOTA performance in the one-shot and few-shot settings, with COPA falling only a couple points short and achieving second place on the leaderboard, where first place is held by a fine-tuned 11 billion parameter model (T5). On WSC, performance is still relatively strong, achieving 80.1% in the few-shot setting (note that GPT-3 achieves 88.6% on the original Winograd dataset as described in Section [3.4]Winograd-Style Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). On BoolQ, MultiRC, and RTE, performance is reasonable, roughly matching that of a fine-tuned BERT-Large. On CB, we see signs of life at 75.6% in the few-shot setting.\n\nWiC is a notable weak spot with few-shot performance at 49.4% (at random chance). We tried a number of different phrasings and formulations for WiC (which involves determining if a word is being used with the same meaning in two sentences), none of which was able to achieve strong performance. This hints at a phenomenon that will become clearer in the next section (which discusses the ANLI benchmark) – GPT-3 appears to be weak in the few-shot or one-shot setting at some tasks that involve comparing two sentences or snippets, for example whether a word is used the same way in two sentences (WiC), whether one sentence is a paraphrase of another, or whether one sentence implies another. This could also explain the comparatively low scores for RTE and CB, which also follow this format. Despite these weaknesses, GPT-3 still outperforms a fine-tuned BERT-large on four of eight tasks and on two tasks GPT-3 is close to the state-of-the-art held by a fine-tuned 11 billion parameter model.\n\nFinally, we note that the few-shot SuperGLUE score steadily improves with both model size and with number of examples in the context showing increasing benefits from in-context learning (Figure [3.8]Figure 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). We scale K𝐾K up to 32 examples per task, after which point additional examples will not reliably fit into our context. When sweeping over values of K𝐾K, we find that GPT-3 requires less than eight total examples per task to outperform a fine-tuned BERT-Large on overall SuperGLUE score.\n\n![Refer to caption]Figure 3.9: Performance of GPT-3 on ANLI Round 3. Results are on the dev-set, which has only 1500 examples and therefore has high variance (we estimate a standard deviation of 1.2%). We find that smaller models hover around random chance, while few-shot GPT-3 175B closes almost half the gap from random chance to SOTA. Results for ANLI rounds 1 and 2 are shown in the appendix.\n\n### 3.8 NLI\n\nNatural Language Inference (NLI) \\[ [31])\\] concerns the ability to understand the relationship between two sentences. In practice, this task is usually structured as a two or three class classification problem where the model classifies whether the second sentence logically follows from the first, contradicts the first sentence, or is possibly true (neutral). SuperGLUE includes an NLI dataset, RTE, which evaluates the binary version of the task. On RTE, only the largest version of GPT-3 performs convincingly better than random (56%) in any evaluation setting, but in a few-shot setting GPT-3 performs similarly to a single-task fine-tuned BERT Large. We also evaluate on the recently introduced Adversarial Natural Language Inference (ANLI) dataset \\[ [94])\\]. ANLI is a difficult dataset employing a series of adversarially mined natural language inference questions in three rounds (R1, R2, and R3). Similar to RTE, all of our models smaller than GPT-3 perform at almost exactly random chance on ANLI, even in the few-shot setting (∼33%similar-toabsentpercent33\\\\sim 33\\\\%), whereas GPT-3 itself shows signs of life on Round 3. Results for ANLI R3 are highlighted in Figure [3.9]Figure 3.9 ‣ 3.7 SuperGLUE ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and full results for all rounds can be found in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\"). These results on both RTE and ANLI suggest that NLI is still a very difficult task for language models and they are only just beginning to show signs of progress.\n\n### 3.9 Synthetic and Qualitative Tasks\n\nOne way to probe GPT-3’s range of abilities in the few-shot (or zero- and one-shot) setting is to give it tasks which require it to perform simple on-the-fly computational reasoning, recognize a novel pattern that is unlikely to have occurred in training, or adapt quickly to an unusual task. We devise several tasks to test this class of abilities. First, we test GPT-3’s ability to perform arithmetic. Second, we create several tasks that involve rearranging or unscrambling the letters in a word, tasks which are unlikely to have been exactly seen during training. Third, we test GPT-3’s ability to solve SAT-style analogy problems few-shot. Finally, we test GPT-3 on several qualitative tasks, including using new words in a sentence, correcting English grammar, and news article generation. We will release the synthetic datasets with the hope of stimulating further study of test-time behavior of language models.\n\n#### 3.9.1 Arithmetic\n\nTo test GPT-3’s ability to perform simple arithmetic operations without task-specific training, we developed a small battery of 10 tests that involve asking GPT-3 a simple arithmetic problem in natural language:\n\n- •\n\n\n2 digit addition (2D+) – The model is asked to add two integers sampled uniformly from \\[0,100)0100\\[0,100), phrased in the form of a question, e.g. “Q: What is 48 plus 76? A: 124.”\\\n\\\n- •\\\n\\\n\\\n2 digit subtraction (2D-) – The model is asked to subtract two integers sampled uniformly from \\[0,100)0100\\[0,100); the answer may be negative. Example: “Q: What is 34 minus 53? A: -19”.\\\n\\\n- •\\\n\\\n\\\n3 digit addition (3D+) – Same as 2 digit addition, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- •\\\n\\\n\\\n3 digit subtraction (3D-) – Same as 2 digit subtraction, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- •\\\n\\\n\\\n4 digit addition (4D+) – Same as 3 digit addition, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- •\\\n\\\n\\\n4 digit subtraction (4D-) – Same as 3 digit subtraction, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- •\\\n\\\n\\\n5 digit addition (5D+) – Same as 3 digit addition, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- •\\\n\\\n\\\n5 digit subtraction (5D-) – Same as 3 digit subtraction, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- •\\\n\\\n\\\n2 digit multiplication (2Dx) – The model is asked to multiply two integers sampled uniformly from \\[0,100)0100\\[0,100), e.g. “Q: What is 24 times 42? A: 1008”.\\\n\\\n- •\\\n\\\n\\\nOne-digit composite (1DC) – The model is asked to perform a composite operation on three 1 digit numbers, with parentheses around the last two. For example, “Q: What is 6+(4\\*8)? A: 38”. The three 1 digit numbers are selected uniformly on \\[0,10)010\\[0,10) and the operations are selected uniformly from {+,-,\\*}.\\\n\\\n\\\nIn all 10 tasks the model must generate the correct answer exactly. For each task we generate a dataset of 2,000 random instances of the task and evaluate all models on those instances.\\\n\\\nFirst we evaluate GPT-3 in the few-shot setting, for which results are shown in Figure [3.10]Figure 3.10 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). On addition and subtraction, GPT-3 displays strong proficiency when the number of digits is small, achieving 100% accuracy on 2 digit addition, 98.9% at 2 digit subtraction, 80.2% at 3 digit addition, and 94.2% at 3-digit subtraction. Performance decreases as the number of digits increases, but GPT-3 still achieves 25-26% accuracy on four digit operations and 9-10% accuracy on five digit operations, suggesting at least some capacity to generalize to larger numbers of digits. GPT-3 also achieves 29.2% accuracy at 2 digit multiplication, an especially computationally intensive operation. Finally, GPT-3 achieves 21.3% accuracy at single digit combined operations (for example, 9\\*(7+5)), suggesting that it has some robustness beyond just single operations.\\\n\\\n![Refer to caption]Figure 3.10: Results on all 10 arithmetic tasks in the few-shot settings for models of different sizes. There is a significant jump from the second largest model (GPT-3 13B) to the largest model (GPT-3 175), with the latter being able to reliably accurate 2 digit arithmetic, usually accurate 3 digit arithmetic, and correct answers a significant fraction of the time on 4-5 digit arithmetic, 2 digit multiplication, and compound operations. Results for one-shot and zero-shot are shown in the appendix.\\\n\\\n| Setting | 2D+ | 2D- | 3D+ | 3D- | 4D+ | 4D- | 5D+ | 5D- | 2Dx | 1DC |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 76.9 | 58.0 | 34.2 | 48.3 | 4.0 | 7.5 | 0.7 | 0.8 | 19.8 | 9.8 |\\\n| GPT-3 One-shot | 99.6 | 86.4 | 65.5 | 78.7 | 14.0 | 14.0 | 3.5 | 3.8 | 27.4 | 14.3 |\\\n| GPT-3 Few-shot | 100.0 | 98.9 | 80.4 | 94.2 | 25.5 | 26.8 | 9.3 | 9.9 | 29.2 | 21.3 |\\\n\\\nTable 3.9: Results on basic arithmetic tasks for GPT-3 175B. {2,3,4,5}D{+,-} is 2, 3, 4, and 5 digit addition or subtraction, 2Dx is 2 digit multiplication. 1DC is 1 digit composite operations. Results become progressively stronger moving from the zero-shot to one-shot to few-shot setting, but even the zero-shot shows significant arithmetic abilities.\\\n\\\nAs Figure [3.10]Figure 3.10 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") makes clear, small models do poorly on all of these tasks – even the 13 billion parameter model (the second largest after the 175 billion full GPT-3) can solve 2 digit addition and subtraction only half the time, and all other operations less than 10% of the time.\\\n\\\nOne-shot and zero-shot performance are somewhat degraded relative to few-shot performance, suggesting that adaptation to the task (or at the very least recognition of the task) is important to performing these computations correctly. Nevertheless, one-shot performance is still quite strong, and even zero-shot performance of the full GPT-3 significantly outperforms few-shot learning for all smaller models. All three settings for the full GPT-3 are shown in Table [3.9]Table 3.9 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), and model capacity scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\").\\\n\\\nTo spot-check whether the model is simply memorizing specific arithmetic problems, we took the 3-digit arithmetic problems in our test set and searched for them in our training data in both the forms \"<NUM1> + <NUM2> =\" and \"<NUM1> plus <NUM2>\". Out of 2,000 addition problems we found only 17 matches (0.8%) and out of 2,000 subtraction problems we found only 2 matches (0.1%), suggesting that only a trivial fraction of the correct answers could have been memorized. In addition, inspection of incorrect answers reveals that the model often makes mistakes such as not carrying a “1”, suggesting it is actually attempting to perform the relevant computation rather than memorizing a table.\\\n\\\nOverall, GPT-3 displays reasonable proficiency at moderately complex arithmetic in few-shot, one-shot, and even zero-shot settings.\\\n\\\n#### 3.9.2 Word Scrambling and Manipulation Tasks\\\n\\\nTo test GPT-3’s ability to learn novel symbolic manipulations from a few examples, we designed a small battery of 5 “character manipulation” tasks. Each task involves giving the model a word distorted by some combination of scrambling, addition, or deletion of characters, and asking it to recover the original word. The 5 tasks are:\\\n\\\n| Setting | CL | A1 | A2 | RI | RW |\\\n| --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 3.66 | 2.28 | 8.91 | 8.26 | 0.09 |\\\n| GPT-3 One-shot | 21.7 | 8.62 | 25.9 | 45.4 | 0.48 |\\\n| GPT-3 Few-shot | 37.9 | 15.1 | 39.7 | 67.2 | 0.44 |\\\n\\\nTable 3.10: GPT-3 175B performance on various word unscrambling and word\\\nmanipulation tasks, in zero-, one-, and few-shot settings. CL is “cycle letters in word”, A1 is anagrams of but the first and last letters,\\\nA2 is anagrams of all but the first and last two letters, RI is “Random insertion\\\nin word”, RW is “reversed words”.![Refer to caption]Figure 3.11: Few-shot performance on the five word scrambling tasks for different sizes of model. There is generally smooth improvement with model size although the random insertion task shows an upward slope of improvement with the 175B model solving the task the majority of the time. Scaling of one-shot and zero-shot performance is shown in the appendix. All tasks are done with K=100𝐾100K=100.\\\n\\\n- •\\\n\\\n\\\nCycle letters in word (CL) – The model is given a word with its letters cycled, then the “=” symbol, and is expected to generate the original word. For example, it might be given “lyinevitab” and should output “inevitably”.\\\n\\\n- •\\\n\\\n\\\nAnagrams of all but first and last characters (A1) – The model is given a word where every letter except the first and last have been scrambled randomly, and must output the original word. Example: criroptuon = corruption.\\\n\\\n- •\\\n\\\n\\\nAnagrams of all but first and last 2 characters (A2) – The model is given a word where every letter except the first 2 and last 2 have been scrambled randomly, and must recover the original word. Example: opoepnnt →→\\\\to opponent.\\\n\\\n- •\\\n\\\n\\\nRandom insertion in word (RI) – A random punctuation or space character is inserted between each letter of a word, and the model must output the original word. Example: s.u!c/c!e.s s i/o/n = succession.\\\n\\\n- •\\\n\\\n\\\nReversed words (RW) – The model is given a word spelled backwards, and must output the original word. Example: stcejbo →→\\\\to objects.\\\n\\\n\\\nFor each task we generate 10,000 examples, which we chose to be the top 10,000 most frequent words as measured by \\[ [92])\\] of length more than 4 characters and less than 15 characters. The few-shot results are shown in Figure [3.11]Figure 3.11 ‣ 3.9.2 Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). Task performance tends to grow smoothly with model size, with the full GPT-3 model achieving 66.9% on removing random insertions, 38.6% on cycling letters, 40.2% on the easier anagram task, and 15.1% on the more difficult anagram task (where only the first and last letters are held fixed). None of the models can reverse the letters in a word.\\\n\\\nIn the one-shot setting, performance is significantly weaker (dropping by half or more), and in the zero-shot setting the model can rarely perform any of the tasks (Table [3.10]Table 3.10 ‣ 3.9.2 Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). This suggests that the model really does appear to learn these tasks at test time, as the model cannot perform them zero-shot and their artificial nature makes them unlikely to appear in the pre-training data (although we cannot confirm this with certainty).\\\n\\\nWe can further quantify performance by plotting “in-context learning curves”, which show task performance as a function of the number of in-context examples. We show in-context learning curves for the Symbol Insertion task in Figure [1.2]Figure 1.2 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\"). We can see that larger models are able to make increasingly effective use of in-context information, including both task examples and natural language task descriptions.\\\n\\\nFinally, it is worth adding that solving these tasks requires character-level manipulations, whereas our BPE encoding operates on significant fractions of a word (on average ∼0.7similar-toabsent0.7\\\\sim 0.7 words per token), so from the LM’s perspective succeeding at these tasks involves not just manipulating BPE tokens but understanding and pulling apart their substructure. Also, CL, A1, and A2 are not bijective (that is, the unscrambled word is not a deterministic function of the scrambled word), requiring the model to perform some search to find the correct unscrambling. Thus, the skills involved appear to require non-trivial pattern-matching and computation.\\\n\\\n#### 3.9.3 SAT Analogies\\\n\\\nTo test GPT-3 on another task that is somewhat unusual relative to the typical distribution of text, we collected a set of 374 “SAT analogy” problems \\[ [131])\\]. Analogies are a style of multiple choice question that constituted a section of the SAT college entrance exam before 2005. A typical example is “audacious is to boldness as (a) sanctimonious is to hypocrisy, (b) anonymous is to identity, (c) remorseful is to misdeed, (d) deleterious is to result, (e) impressionable is to temptation”. The student is expected to choose which of the five word pairs has the same relationship as the original word pair; in this example the answer is “sanctimonious is to hypocrisy”. On this task GPT-3 achieves 65.2% in the few-shot setting, 59.1% in the one-shot setting, and 53.7% in the zero-shot setting, whereas the average score among college applicants was 57% \\[ [129])\\] (random guessing yields 20%). As shown in Figure [3.12]Figure 3.12 ‣ 3.9.3 SAT Analogies ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), the results improve with scale, with the the full 175 billion model improving by over 10% compared to the 13 billion parameter model.\\\n\\\n![Refer to caption]Figure 3.12: Zero-, one-,and few-shot performance on SAT analogy tasks, for different sizes of model. The largest model achieves 65% accuracy in the few-shot setting, and also demonstrates significant gains to in-context learning which are not present in smaller models.\\\n\\\n#### 3.9.4 News Article Generation\\\n\\\nPrevious work on generative language models qualitatively tested their ability to generate synthetic “news articles” by conditional sampling from the model given a human-written prompt consisting of a plausible first sentence for a news story \\[ [117])\\]. Relative to \\[ [117])\\], the dataset used to train GPT-3 is much less weighted towards news articles, so trying to generate news articles via raw unconditional samples is less effective – for example GPT-3 often interprets the proposed first sentence of a “news article” as a tweet and then posts synthetic responses or follow-up tweets. To solve this problem we employed GPT-3’s few-shot learning abilities by providing three previous news articles in the model’s context to condition it. With the title and subtitle of a proposed next article, the model is able to reliably generate short articles in the “news” genre.\\\n\\\nTo gauge the quality of news article generation from GPT-3 (which we believe is likely to be correlated with conditional sample generation quality in general), we decided to measure human ability to distinguish GPT-3-generated articles from real ones. Similar work has been carried out by Kreps et al. \\[ [56])\\] and Zellers et al. \\[ [141])\\]. Generative language models are trained to match the distribution of content generated by humans, so the (in)ability of humans to distinguish the two is a potentially important measure of quality.333This task is also relevant to the potential misuse of language models discussed in Section [6.1]Misuse of Language Models ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\").\\\n\\\nIn order to see how well humans can detect model generated text, we arbitrarily selected 25 article titles and subtitles from the website [newser.com] (mean length: 215 words). We then generated completions of these titles and subtitles from four language models ranging in size from 125M to 175B (GPT-3) parameters (mean length: 200 words). For each model, we presented around 80 US-based participants with a quiz consisting of these real titles and subtitles followed by either the human written article or the article generated by the model444We wanted to identify how good an average person on the internet is at detecting language model outputs, so we focused on participants drawn from the general US population. See Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles ‣ Language Models are Few-Shot Learners\") for details.. Participants were asked to select whether the article was “very likely written by a human”, “more likely written by a human”, “I don’t know”, “more likely written by a machine”, or “very likely written by a machine”.\\\n\\\nThe articles we selected were not in the models’ training data and the model outputs were formatted and selected programmatically to prevent human cherry-picking. All models used the same context to condition outputs on and were pre-trained with the same context size and the same article titles and subtitles were used as prompts for each model. However, we also ran an experiment to control for participant effort and attention that followed the same format but involved intentionally bad model generated articles. This was done by generating articles from a “control model”: a 160M parameter model with no context and increased output randomness.\\\n\\\nMean human accuracy (the ratio of correct assignments to non-neutral assignments per participant) at detecting that the intentionally bad articles were model generated was ∼86%similar-toabsentpercent86\\\\sim 86\\\\%  where 50% is chance level performance. By contrast, mean human accuracy at detecting articles that were produced by the 175B parameter model was barely above chance at ∼52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.11]Table 3.11 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")).555We use a two-sample Student’s T-Test to test for significant difference between the means of the participant accuracies of each model and the control model and report the normalized difference in the means (as the t-statistic) and the p-value. Human abilities to detect model generated text appear to decrease as model size increases: there appears to be a trend towards chance accuracy with model size, and human detection of GPT-3 is close to chance.666If a model consistently produces texts that are more impressive than human articles, it is possible that human performance on this task would drop below 50%. Indeed, many individual participants scored below 50% on this task. This is true despite the fact that participants spend more time on each output as model size increases (see Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles ‣ Language Models are Few-Shot Learners\")).\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t𝑡t compared tocontrol (p𝑝p-value) | “I don’t know”assignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control (deliberately bad model) | 86% | 83%–90% | - | 3.6 % |\\\n| GPT-3 Small | 76% | 72%–80% | 3.9 (2e𝑒e-4) | 4.9% |\\\n| GPT-3 Medium | 61% | 58%–65% | 10.3 (7e𝑒e-21) | 6.0% |\\\n| GPT-3 Large | 68% | 64%–72% | 7.3 (3e𝑒e-11) | 8.7% |\\\n| GPT-3 XL | 62% | 59%–65% | 10.7 (1e𝑒e-19) | 7.5% |\\\n| GPT-3 2.7B | 62% | 58%–65% | 10.4 (5e𝑒e-19) | 7.1% |\\\n| GPT-3 6.7B | 60% | 56%–63% | 11.2 (3e𝑒e-21) | 6.2% |\\\n| GPT-3 13B | 55% | 52%–58% | 15.3 (1e𝑒e-32) | 7.1% |\\\n| GPT-3 175B | 52% | 49%–54% | 16.9 (1e𝑒e-34) | 7.8% |\\\n\\\nTable 3.11: Human accuracy in identifying whether short (∼similar-to\\\\sim200 word) news articles are model generated. We find that human accuracy (measured by the ratio of correct assignments to non-neutral assignments) ranges from 86% on the control model to 52% on GPT-3 175B. This table compares mean accuracy between five different models, and shows the results of a two-sample T-Test for the difference in mean accuracy between each model and the control model (an unconditional GPT-3 Small model with increased output randomness).![Refer to caption]Figure 3.13: People’s ability to identify whether news articles are model-generated (measured by the ratio of correct assignments to non-neutral assignments) decreases as model size increases. Accuracy on the outputs on the deliberately-bad control model (an unconditioned GPT-3 Small model with higher output randomness) is indicated with the dashed line at the top, and the random chance (50%) is indicated with the dashed line at the bottom. Line of best fit is a power law with 95% confidence intervals.\\\n\\\nExamples of synthetic articles from GPT-3 are given in Figures [3.14]Figure 3.14 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and [3.15]Figure 3.15 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\").777Additional non-news samples can be found in Appendix [F]Appendix F Additional Samples from GPT-3 ‣ Language Models are Few-Shot Learners\"). Much of the text is—as indicated by the evaluations—difficult for humans to distinguish from authentic human content. Factual inaccuracies can be an indicator that an article is model generated since, unlike human authors, the models have no access to the specific facts that the article titles refer to or when the article was written. Other indicators include repetition, non sequiturs, and unusual phrasings, though these are often subtle enough that they are not noticed.\\\n\\\nTitle: United Methodists Agree to Historic Split\\\n\\\nSubtitle: Those who oppose gay marriage will form their own denomination\\\n\\\nArticle:After two days of intense debate, the United Methodist Church has agreed to a historic split - one that is expected to end in the creation of a new denomination, one that will be ”theologically and socially conservative,” according to The Washington Post. The majority of delegates attending the church’s annual General Conference in May voted to strengthen a ban on the ordination of LGBTQ clergy and to write new rules that will ”discipline” clergy who officiate at same-sex weddings. But those who opposed these measures have a new plan: They say they will form a separate denomination by 2020, calling their church the Christian Methodist denomination.The Post notes that the denomination, which claims 12.5 million members, was in the early 20th century the ”largest Protestant denomination in the U.S.,” but that it has been shrinking in recent decades. The new split will be the second in the church’s history. The first occurred in 1968, when roughly 10 percent of the denomination left to form the Evangelical United Brethren Church. The Post notes that the proposed split ”comes at a critical time for the church, which has been losing members for years,” which has been ”pushed toward the brink of a schism over the role of LGBTQ people in the church.” Gay marriage is not the only issue that has divided the church. In 2016, the denomination was split over ordination of transgender clergy, with the North Pacific regional conference voting to ban them from serving as clergy, and the South Pacific regional conference voting to allow them.\\\n\\\nFigure 3.14: The GPT-3 generated news article that humans had the greatest difficulty distinguishing from a human written article (accuracy: 12%).\\\n\\\nTitle: Star’s Tux Promise Draws Megyn Kelly’s SarcasmSubtitle: Joaquin Phoenix pledged to not change for each awards eventArticle:A year ago, Joaquin Phoenix made headlines when he appeared on the red carpet at the Golden Globes wearing a tuxedo with a paper bag over his head that read, ”I am a shape-shifter. I can’t change the world. I can only change myself.” It was a promise to not change to fit into the Hollywood mold: ”I think that’s a really special thing, to not change yourself. I think it’s a really special thing to say, ‘This is what’s inside of me, I’m proud of it, and I’m not going to be ashamed because of the way that someone else thinks I should be.’” Now, it’s the Oscars, and Phoenix is at it again. But this time, his publicist is saying he’ll be wearing a tux no matter what.Megyn Kelly was not impressed, and she let him have it on The Tonight Show. ”You know, I feel like, I feel like you could have worn the tux,” she says. ”But you’re saying you’re a shape-shifter. I don’t know if you can change your tux, but you can change your mind. You can change your mind. You can change your mind.” Phoenix says he did, but it didn’t stick. ”I was like, ‘Okay, I’m going to wear a tuxedo to this thing.’ And then I thought, ‘I don’t want to wear a tuxedo to this thing.’” Kelly goes on to encourage him to change his mind again, but Phoenix says it’s too late: ”I’m committed to wearing this.”\\\n\\\nFigure 3.15: The GPT-3 generated news article that humans found the easiest to distinguish from a human written article (accuracy: 61%).\\\n\\\nRelated work on language model detection by Ippolito et al. \\[ [48])\\] indicates that automatic discriminators like Grover\\[ [141])\\] and GLTR \\[ [37])\\] may have greater success at detecting model generated text than human evaluators. Automatic detection of these models may be a promising area of future research.\\\n\\\nIppolito et al. \\[ [48])\\] also note that human accuracy at detecting model generated text increases as humans observe more tokens. To do a preliminary investigation of how good humans are at detecting longer news articles generated by GPT-3 175B, we selected 12 world news articles from Reuters with an average length of 569 words and generated completions of these articles from GPT-3 with an average length of 498 words (298 words longer than our initial experiments). Following the methodology above, we ran two experiments, each on around 80 US-based participants, to compare human abilities to detect the articles generated by GPT-3 and a control model.\\\n\\\nWe found that mean human accuracy at detecting the intentionally bad longer articles from the control model was ∼88%similar-toabsentpercent88\\\\sim 88\\\\%, while mean human accuracy at detecting the longer articles that were produced by GPT-3 175B was still barely above chance at ∼52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.12]Table 3.12 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). This indicates that, for news articles that are around 500 words long, GPT-3 continues to produce articles that humans find difficult to distinguish from human written news articles.\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t𝑡t compared tocontrol (p𝑝p-value) | “I don’t know”assignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control | 88% | 84%–91% | - | 2.7% |\\\n| GPT-3 175B | 52% | 48%–57% | 12.7 (3.2e𝑒e-23) | 10.6% |\\\n\\\nTable 3.12: People’s ability to identify whether ∼500similar-toabsent500\\\\sim 500 word articles are model generated (as measured by the ratio of correct assignments to non-neutral assignments) was 88% on the control model and 52% on GPT-3 175B. This table shows the results of a two-sample T-Test for the difference in mean accuracy between GPT-3 175B and the control model (an unconditional GPT-3 Small model with increased output randomness).\\\n\\\nA \"whatpu\" is a small, furry animal native to Tanzania. An example of a sentence that uses the word whatpu is:\\\n\\\nWe were traveling in Africa and we saw these very cute whatpus.\\\n\\\nTo do a \"farduddle\" means to jump up and down really fast. An example of a sentence that uses the word farduddle is:\\\n\\\nOne day when I was playing tag with my little sister, she got really excited and she started doing these crazy farduddles.\\\n\\\nA \"yalubalu\" is a type of vegetable that looks like a big pumpkin. An example of a sentence that uses the word yalubalu is:\\\n\\\nI was on a trip to Africa and I tried this yalubalu vegetable that was grown in a garden there. It was delicious.\\\n\\\nA \"Burringo\" is a car with very fast acceleration. An example of a sentence that uses the word Burringo is:\\\n\\\nIn our garage we have a Burringo that my father drives to work every day.\\\n\\\nA \"Gigamuru\" is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:\\\n\\\nI have a Gigamuru that my uncle gave me as a gift. I love to play it at home.\\\n\\\nTo \"screeg\" something is to swing a sword at it. An example of a sentence that uses the word screeg is:\\\n\\\nWe screeghed at each other for several minutes and then we went outside and ate ice cream.\\\n\\\nFigure 3.16: Representative GPT-3 completions for the few-shot task of using a new word in a sentence. Boldface is GPT-3’s completions, plain text is human prompts. In the first example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 other than the conditioning shown here.\\\n\\\nPoor English input: I eated the purple berries.\\\n\\\nGood English output: I ate the purple berries.\\\n\\\nPoor English input: Thank you for picking me as your designer. I’d appreciate it.\\\n\\\nGood English output: Thank you for choosing me as your designer. I appreciate it.\\\n\\\nPoor English input: The mentioned changes have done. or I did the alteration that you requested. or I changed things you wanted and did the modifications.\\\n\\\nGood English output: The requested changes have been made. or I made the alteration that you requested. or I changed things you wanted and made the modifications.\\\n\\\nPoor English input: I’d be more than happy to work with you in another project.\\\n\\\nGood English output: I’d be more than happy to work with you on another project.\\\n\\\nPoor English input: Please provide me with a short brief of the design you’re looking for and that’d be nice if you could share some examples or project you did before.\\\n\\\nGood English output: Please provide me with a brief description of the design you’re looking for and that would be nice if you could share some examples or projects you have done before.\\\n\\\nPoor English input: The patient was died.\\\n\\\nGood English output: The patient died.\\\n\\\nPoor English input: We think that Leslie likes ourselves.\\\n\\\nGood English output: We think that Leslie likes us.\\\n\\\nPoor English input: Janet broke Bill on the finger.\\\n\\\nGood English output: Janet broke Bill’s finger.\\\n\\\nPoor English input: Mary arranged for, in St. Louis, John to rent a house cheap.\\\n\\\nGood English output: Mary arranged for John to rent a house in St. Louis.\\\n\\\nPoor English input: Today I have went to the store to to buys some many bottle of water.\\\n\\\nGood English output: Today I went to the store to buy some bottles of water.\\\n\\\nPoor English input: I have tried to hit ball with bat, but my swing is has miss.\\\n\\\nGood English output: I tried to hit the ball with the bat, but my swing missed.\\\n\\\nFigure 3.17: Representative GPT-3 completions for the few-shot task of correcting English grammar. Boldface is GPT-3’s completions, plain text is human prompts. In the first few examples example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 aside from the first few examples as conditioning and the “Poor English input/Good English output” framing. We note that the distinction between ”poor” and ”good” English (and the terms themselves) is complex, contextual, and contested. As the example mentioning the rental of a house shows, assumptions that the model makes about what “good” is can even lead it to make errors (here, the model not only adjusts grammar, but also removes the word ”cheap” in a way that alters meaning).\\\n\\\n#### 3.9.5 Learning and Using Novel Words\\\n\\\nA task studied in developmental linguistics \\[ [13])\\] is the ability to learn and utilize new words, for example using a word in a sentence after seeing it defined only once, or conversely inferring a word’s meaning from only one usage. Here we qualitatively test GPT-3’s ability to do the former. Specifically, we give GPT-3 the definition of a nonexistent word, such as “Gigamuru”, and then ask it to use it in a sentence. We provide one to five previous examples of a (separate) nonexistent word being defined and used in a sentence, so the task is few-shot in terms of previous examples of the broad task and one-shot in terms of the specific word. Table [3.16]Figure 3.16 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") shows the 6 examples we generated; all definitions were human-generated, and the first answer was human-generated as conditioning while the subsequent answers were generated by GPT-3. These examples were generated continuously in one sitting and we did not omit or repeatedly try any prompts. In all cases the generated sentence appears to be a correct or at least plausible use of the word. In the final sentence the model generates a plausible conjugation for the word “screeg” (namely “screeghed”), although the use of the word is slightly awkward (“screeghed at each other”) despite being plausible in the sense that it could describe a toy sword fight. Overall, GPT-3 appears to be at least proficient at the task of using novel words in a sentence.\\\n\\\n#### 3.9.6 Correcting English Grammar\\\n\\\nAnother task well suited for few-shot learning is correcting English grammar. We test this with GPT-3 in the few-shot setting by giving prompts of the form \"Poor English Input: <sentence>\\\\n Good English Output: <sentence>\". We give GPT-3 one human-generated correction and then ask it to correct 5 more (again without any omissions or repeats). Results are shown in Figure [3.17]Figure 3.17 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\").\\\n\\",
            "citations": null
          },
          "4 Measuring and Preventing Memorization Of Benchmarks\\": {
            "content": "\\\n![Refer to caption]Figure 4.1: GPT-3 Training Curves   We measure model performance during training on a deduplicated validation split of our training distribution. Though there is some gap between training and validation performance, the gap grows only minimally with model size and training time, suggesting that most of the gap comes from a difference in difficulty rather than overfitting.\\\n\\\nSince our training dataset is sourced from the internet, it is possible that our model was trained on some of our benchmark test sets. Accurately detecting test contamination from internet-scale datasets is a new area of research without established best practices. While it is common practice to train large models without investigating contamination, given the increasing scale of pretraining datasets, we believe this issue is becoming increasingly important to attend to.\\\n\\\nThis concern is not just hypothetical. One of the first papers to train a language model on Common Crawl data \\[ [130])\\] detected and removed a training document which overlapped with one of their evaluation datasets. Other work such as GPT-2 \\[ [117])\\] also conducted post-hoc overlap analysis. Their study was relatively encouraging, finding that although models did perform moderately better on data that overlapped between training and testing, this did not significantly impact reported results due to the small fraction of data which was contaminated (often only a few percent).\\\n\\\nGPT-3 operates in a somewhat different regime. On the one hand, the dataset and model size are about two orders of magnitude larger than those used for GPT-2, and include a large amount of Common Crawl, creating increased potential for contamination and memorization. On the other hand, precisely due to the large amount of data, even GPT-3 175B does not overfit its training set by a significant amount, measured relative to a held-out validation set with which it was deduplicated (Figure [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\")). Thus, we expect that contamination is likely to be frequent, but that its effects may not be as large as feared.\\\n\\\nWe initially tried to address the issue of contamination by proactively searching for and attempting to remove any overlap between our training data and the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug resulted in only partial removal of all detected overlaps from the training data. Due to the cost of training, it wasn’t feasible to retrain the model. To address this, we investigate in detail how the remaining detected overlap impacts results.\\\n\\\nFor each benchmark, we produce a ‘clean’ version which removes all potentially leaked examples, defined roughly as examples that have a 13-gram overlap with anything in the pretraining set (or that overlap with the whole example when it is shorter than 13-grams). The goal is to very conservatively flag anything that could potentially be contamination, so as to produce a clean subset that is free of contamination with high confidence. The exact procedure is detailed in Appendix [C]Appendix C Details of Test Set Contamination Studies ‣ Language Models are Few-Shot Learners\").\\\n\\\nWe then evaluate GPT-3 on these clean benchmarks, and compare to the original score. If the score on the clean subset is similar to the score on the entire dataset, this suggests that contamination, even if present, does not have a significant effect on reported results. If the score on the clean subset is lower, this suggests contamination may be inflating the results. The results are summarized in Figure [4.2]Figure 4.2 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\"). Although potential contamination is often high (with a quarter of benchmarks scoring over 50%), in most cases performance changes only negligibly, and we see no evidence that contamination level and performance difference are correlated. We conclude that either our conservative method substantially overestimated contamination or that contamination has little effect on performance.\\\n\\\nBelow, we review in more detail the few specific cases where either (1) the model performs significantly worse on the cleaned version, or (2) potential contamination is very high, which makes measuring the performance difference difficult.\\\n\\\n![Refer to caption]Figure 4.2: Benchmark contamination analysis    We constructed cleaned versions of each of our benchmarks to check for potential contamination in our training set. The x-axis is a conservative lower bound for how much of the dataset is known with high confidence to be clean, and the y-axis shows the difference in performance when evaluating only on the verified clean subset. Performance on most benchmarks changed negligibly, but some were flagged for further review. On inspection we find some evidence for contamination of the PIQA and Winograd results, and we mark the corresponding results in Section [3]Results ‣ Language Models are Few-Shot Learners\") with an asterisk. We find no evidence that other benchmarks are affected.\\\n\\\nOur analysis flagged six groups of benchmarks for further investigation: Word Scrambling, Reading Comprehension (QuAC, SQuAD2, DROP), PIQA, Winograd, language modeling tasks (Wikitext tasks, 1BW), and German to English translation. Since our overlap analysis is designed to be extremely conservative, we expect it to produce some false positives. We summarize the results for each group of tasks below:\\\n\\\n- •\\\n\\\n\\\nReading Comprehension: Our initial analysis flagged >>90% of task examples from QuAC, SQuAD2, and DROP as potentially contaminated, so large that even measuring the differential on a clean subset was difficult. Upon manual inspection, however, we found that for every overlap we inspected, in all 3 datasets, the source text was present in our training data but the question/answer pairs were not, meaning the model gains only background information and cannot memorize the answer to a specific question.\\\n\\\n- •\\\n\\\n\\\nGerman translation: We found 25% of the examples in the WMT16 German-English test set were marked as potentially contaminated, with an associated total effect size of 1-2 BLEU. Upon inspection, none of the flagged examples contain paired sentences resembling NMT training data and collisions were monolingual matches mostly of snippets of events discussed in the news.\\\n\\\n- •\\\n\\\n\\\nReversed Words and Anagrams: Recall that these tasks are of the form “alaok = koala”. Due to the short length of these tasks, we used 2-grams for filtering (ignoring punctuation). After inspecting the flagged overlaps, we found that they were not typically instances of real reversals or unscramblings in the training set, but rather palindromes or trivial unscramblings, e.g “kayak = kayak”. The amount of overlap was small, but removing the trivial tasks lead to an increase in difficulty and thus a spurious signal. Related to this, the symbol insertion task shows high overlap but no effect on performance – this is because that task involves removing non-letter characters from a word, and the overlap analysis itself ignores such characters, leading to many spurious matches.\\\n\\\n- •\\\n\\\n\\\nPIQA: The overlap analysis flagged 29% of examples as contaminated, and observed a 3 percentage point absolute decrease (4% relative decrease) in performance on the clean subset. Though the test dataset was released after our training set was created and its labels are hidden, some of the web pages used by the crowdsourced dataset creators are contained in our training set. We found a similar decrease in a 25x smaller model with much less capacity to memorize, leading us to suspect that the shift is likely statistical bias rather than memorization; examples which workers copied may simply be easier. Unfortunately, we cannot rigorously prove this hypothesis. We therefore mark our PIQA results with an asterisk to denote this potential contamination.\\\n\\\n- •\\\n\\\n\\\nWinograd: The overlap analysis flagged 45% of examples, and found a 2.6% decrease in performance on the clean subset. Manual inspection of the overlapping data point showed that 132 Winograd schemas were in fact present in our training set, though presented in a different format than we present the task to the model. Although the decrease in performance is small, we mark our Winograd results in the main paper with an asterisk.\\\n\\\n- •\\\n\\\n\\\nLanguage modeling: We found the 4 Wikipedia language modeling benchmarks measured in GPT-2, plus the Children’s Book Test dataset, to be almost entirely contained in our training data. Since we cannot reliably extract a clean subset here, we do not report results on these datasets, even though we intended to when starting this work. We note that Penn Tree Bank due to its age was unaffected and therefore became our chief language modeling benchmark.\\\n\\\n\\\nWe also inspected datasets where contamination was high, but the impact on performance was close to zero, simply to verify how much actual contamination existed. These appeared to often contain false positives. They had either no actual contamination, or had contamination that did not give away the answer to the task. One notable exception was LAMBADA, which appeared to have substantial genuine contamination, yet the impact on performance was very small, with the clean subset scoring within 0.5% of the full dataset. Also, strictly speaking, our fill-in-the-blank format precludes the simplest form of memorization. Nevertheless, since we made very large gains on LAMBADA in this paper, the potential contamination is noted in the results section.\\\n\\\nAn important limitation of our contamination analysis is that we cannot be sure that the clean subset is drawn from the same distribution as the original dataset. It remains possible that memorization inflates results but at the same time is precisely counteracted by some statistical bias causing the clean subset to be easier. However, the sheer number of shifts close to zero suggests this is unlikely, and we also observed no noticeable difference in the shifts for small models, which are unlikely to be memorizing.\\\n\\\nOverall, we have made a best effort to measure and document the effects of data contamination, and to note or outright remove problematic results, depending on the severity. Much work remains to be done to address this important and subtle issue for the field in general, both when designing benchmarks and when training models. For a more detailed explanation of our analysis, we refer the reader to Appendix [C]Appendix C Details of Test Set Contamination Studies ‣ Language Models are Few-Shot Learners\").\\\n\\",
            "citations": null
          },
          "5 Limitations\\": {
            "content": "\\\nGPT-3 and our analysis of it have a number of limitations. Below we describe some of these and suggest directions for future work.\\\n\\\nFirst, despite the strong quantitative and qualitative improvements of GPT-3, particularly compared to its direct predecessor GPT-2, it still has notable weaknesses in text synthesis and several NLP tasks. On text synthesis, although the overall quality is high, GPT-3 samples still sometimes repeat themselves semantically at the document level, start to lose coherence over sufficiently long passages, contradict themselves, and occasionally contain non-sequitur sentences or paragraphs. We will release a collection of 500 uncurated unconditional samples to help provide a better sense of GPT-3’s limitations and strengths at text synthesis. Within the domain of discrete language tasks, we have noticed informally that GPT-3 seems to have special difficulty with “common sense physics”, despite doing well on some datasets (such as PIQA \\[ [11])\\]) that test this domain. Specifically GPT-3 has difficulty with questions of the type “If I put cheese into the fridge, will it melt?”. Quantitatively, GPT-3’s in-context learning performance has some notable gaps on our suite of benchmarks, as described in Section [3]Results ‣ Language Models are Few-Shot Learners\"), and in particular it does little better than chance when evaluated one-shot or even few-shot on some “comparison” tasks, such as determining if two words are used the same way in a sentence, or if one sentence implies another (WIC and ANLI respectively), as well as on a subset of reading comprehension tasks. This is especially striking given GPT-3’s strong few-shot performance on many other tasks.\\\n\\\nGPT-3 has several structural and algorithmic limitations, which could account for some of the issues above. We focused on exploring in-context learning behavior in autoregressive language models because it is straightforward to both sample and compute likelihoods with this model class. As a result our experiments do not include any bidirectional architectures or other training objectives such as denoising. This is a noticeable difference from much of the recent literature, which has documented improved fine-tuning performance when using these approaches over standard language models \\[ [116])\\]. Thus our design decision comes at the cost of potentially worse performance on tasks which empirically benefit from bidirectionality. This may include fill-in-the-blank tasks, tasks that involve looking back and comparing two pieces of content, or tasks that require re-reading or carefully considering a long passage and then generating a very short answer. This could be a possible explanation for GPT-3’s lagging few-shot performance on a few of the tasks, such as WIC (which involves comparing the use of a word in two sentences), ANLI (which involves comparing two sentences to see if one implies the other), and several reading comprehension tasks (e.g. QuAC and RACE). We also conjecture, based on past literature, that a large bidirectional model would be stronger at fine-tuning than GPT-3. Making a bidirectional model at the scale of GPT-3, and/or trying to make bidirectional models work with few- or zero-shot learning, is a promising direction for future research, and could help achieve the “best of both worlds”.\\\n\\\nA more fundamental limitation of the general approach described in this paper – scaling up any LM-like model, whether autoregressive or bidirectional – is that it may eventually run into (or could already be running into) the limits of the pretraining objective. Our current objective weights every token equally and lacks a notion of what is most important to predict and what is less important. \\[ [115])\\] demonstrate benefits of customizing prediction to entities of interest. Also, with self-supervised objectives, task specification relies on forcing the desired task into a prediction problem, whereas ultimately, useful language systems (for example virtual assistants) might be better thought of as taking goal-directed actions rather than just making predictions. Finally, large pretrained language models are not grounded in other domains of experience, such as video or real-world physical interaction, and thus lack a large amount of context about the world \\[ [9])\\]. For all these reasons, scaling pure self-supervised prediction is likely to hit limits, and augmentation with a different approach is likely to be necessary. Promising future directions in this vein might include learning the objective function from humans \\[ [143])\\], fine-tuning with reinforcement learning, or adding additional modalities such as images to provide grounding and a better model of the world \\[ [18])\\].\\\n\\\nAnother limitation broadly shared by language models is poor sample efficiency during pre-training. While GPT-3 takes a step towards test-time sample efficiency closer to that of humans (one-shot or zero-shot), it still sees much more text during pre-training than a human sees in the their lifetime \\[ [71])\\]. Improving pre-training sample efficiency is an important direction for future work, and might come from grounding in the physical world to provide additional information, or from algorithmic improvements.\\\n\\\nA limitation, or at least uncertainty, associated with few-shot learning in GPT-3 is ambiguity about whether few-shot learning actually learns new tasks “from scratch” at inference time, or if it simply recognizes and identifies tasks that it has learned during training. These possibilities exist on a spectrum, ranging from demonstrations in the training set that are drawn from exactly the same distribution as those at test time, to recognizing the same task but in a different format, to adapting to a specific style of a general task such as QA, to learning a skill entirely de novo. Where GPT-3 is on this spectrum may also vary from task to task. Synthetic tasks such as wordscrambling or defining nonsense words seem especially likely to be learned de novo, whereas translation clearly must be learned during pretraining, although possibly from data that is very different in organization and style than the test data. Ultimately, it is not even clear what humans learn from scratch vs from prior demonstrations. Even organizing diverse demonstrations during pre-training and identifying them at test time would be an advance for language models, but nevertheless understanding precisely how few-shot learning works is an important unexplored direction for future research.\\\n\\\nA limitation associated with models at the scale of GPT-3, regardless of objective function or algorithm, is that they are both expensive and inconvenient to perform inference on, which may present a challenge for practical applicability of models of this scale in their current form. One possible future direction to address this is distillation \\[ [44])\\] of large models down to a manageable size for specific tasks. Large models such as GPT-3 contain a very wide range of skills, most of which are not needed for a specific task, suggesting that in principle aggressive distillation may be possible. Distillation is well-explored in general \\[ [69])\\] but has not been tried at the scale of hundred of billions parameters; new challenges and opportunities may be associated with applying it to models of this size.\\\n\\\nFinally, GPT-3 shares some limitations common to most deep learning systems – its decisions are not easily interpretable, it is not necessarily well-calibrated in its predictions on novel inputs as observed by the much higher variance in performance than humans on standard benchmarks, and it retains the biases of the data it has been trained on. This last issue – biases in the data that may lead the model to generate stereotyped or prejudiced content – is of special concern from a societal perspective, and will be discussed along with other issues in the next section on Broader Impacts (Section [6]Broader Impacts ‣ Language Models are Few-Shot Learners\")).\\\n\\",
            "citations": null
          },
          "6 Broader Impacts\\": {
            "content": "\\\nLanguage models have a wide range of beneficial applications for society, including code and writing auto-completion, grammar assistance, game narrative generation, improving search engine responses, and answering questions. But they also have potentially harmful applications. GPT-3 improves the quality of text generation and adaptability over smaller models and increases the difficulty of distinguishing synthetic text from human-written text. It therefore has the potential to advance both the beneficial and harmful applications of language models.\\\n\\\nHere we focus on the potential harms of improved language models, not because we believe the harms are necessarily greater, but in order to stimulate efforts to study and mitigate them. The broader impacts of language models like this are numerous. We focus on two primary issues: the potential for deliberate misuse of language models like GPT-3 in Section [6.1]Misuse of Language Models ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\"), and issues of bias, fairness, and representation within models like GPT-3 in Section [6.2]Fairness, Bias, and Representation ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\"). We also briefly discuss issues of energy efficiency (Section [6.3]Energy Usage ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\")).\\\n\\\n### 6.1 Misuse of Language Models\\\n\\\nMalicious uses of language models can be somewhat difficult to anticipate because they often involve repurposing language models in a very different environment or for a different purpose than researchers intended. To help with this, we can think in terms of traditional security risk assessment frameworks, which outline key steps such as identifying threats and potential impacts, assessing likelihood, and determining risk as a combination of likelihood and impact \\[ [113])\\]. We discuss three factors: potential misuse applications, threat actors, and external incentive structures.\\\n\\\n#### 6.1.1 Potential Misuse Applications\\\n\\\nAny socially harmful activity that relies on generating text could be augmented by powerful language models. Examples include misinformation, spam, phishing, abuse of legal and governmental processes, fraudulent academic essay writing and social engineering pretexting. Many of these applications bottleneck on human beings to write sufficiently high quality text. Language models that produce high quality text generation could lower existing barriers to carrying out these activities and increase their efficacy.\\\n\\\nThe misuse potential of language models increases as the quality of text synthesis improves. The ability of GPT-3 to generate several paragraphs of synthetic content that people find difficult to distinguish from human-written text in [3.9.4]News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") represents a concerning milestone in this regard.\\\n\\\n#### 6.1.2 Threat Actor Analysis\\\n\\\nThreat actors can be organized by skill and resource levels, ranging from low or moderately skilled and resourced actors who may be able to build a malicious product to ‘advanced persistent threats’ (APTs): highly skilled and well-resourced (e.g. state-sponsored) groups with long-term agendas \\[ [119])\\].\\\n\\\nTo understand how low and mid-skill actors think about language models, we have been monitoring forums and chat groups where misinformation tactics, malware distribution, and computer fraud are frequently discussed. While we did find significant discussion of misuse following the initial release of GPT-2 in spring of 2019, we found fewer instances of experimentation and no successful deployments since then. Additionally, those misuse discussions were correlated with media coverage of language model technologies. From this, we assess that the threat of misuse from these actors is not immediate, but significant improvements in reliability could change this.\\\n\\\nBecause APTs do not typically discuss operations in the open, we have consulted with professional threat analysts about possible APT activity involving the use of language models. Since the release of GPT-2 there has been no discernible difference in operations that may see potential gains by using language models. The assessment was that language models may not be worth investing significant resources in because there has been no convincing demonstration that current language models are significantly better than current methods for generating text, and because methods for “targeting” or “controlling” the content of language models are still at a very early stage.\\\n\\\n#### 6.1.3 External Incentive Structures\\\n\\\nEach threat actor group also has a set of tactics, techniques, and procedures (TTPs) that they rely on to accomplish their agenda. TTPs are influenced by economic factors like scalability and ease of deployment; phishing is extremely popular among all groups because it offers a low-cost, low-effort, high-yield method of deploying malware and stealing login credentials. Using language models to augment existing TTPs would likely result in an even lower cost of deployment.\\\n\\\nEase of use is another significant incentive. Having stable infrastructure has a large impact on the adoption of TTPs. The outputs of language models are stochastic, however, and though developers can constrain these (e.g. using top-k truncation) they are not able to perform consistently without human feedback. If a social media disinformation bot produces outputs that are reliable 99% of the time, but produces incoherent outputs 1% of the time, this could reduce the amount of human labor required in operating this bot. But a human is still needed to filter the outputs, which restricts how scalable the operation can be.\\\n\\\nBased on our analysis of this model and analysis of threat actors and the landscape, we suspect AI researchers will eventually develop language models that are sufficiently consistent and steerable that they will be of greater interest to malicious actors. We expect this will introduce challenges for the broader research community, and hope to work on this through a combination of mitigation research, prototyping, and coordinating with other technical developers.\\\n\\\n### 6.2 Fairness, Bias, and Representation\\\n\\\nBiases present in training data may lead models to generate stereotyped or prejudiced content. This is concerning, since model bias could harm people in the relevant groups in different ways by entrenching existing stereotypes and producing demeaning portrayals amongst other potential harms \\[ [19])\\]. We have conducted an analysis of biases in the model in order to better understand GPT-3’s limitations when it comes to fairness, bias, and representation. 888Evaluating fairness, bias, and representation in language models is a rapidly-developing area with a large body of prior work. See, for example, \\[ [46]), [90]), [120])\\].\\\n\\\nOur goal is not to exhaustively characterize GPT-3, but to give a preliminary analysis of some of its limitations and behaviors. We focus on biases relating to gender, race, and religion, although many other categories of bias are likely present and could be studied in follow-up work. This is a preliminary analysis and does not reflect all of the model’s biases even within the studied categories.\\\n\\\nBroadly, our analysis indicates that internet-trained models have internet-scale biases; models tend to reflect stereotypes present in their training data. Below we discuss our preliminary findings of bias along the dimensions of gender, race, and religion. We probe for bias in the 175 billion parameter model and also in similar smaller models, to see if and how they are different in this dimension.\\\n\\\n#### 6.2.1 Gender\\\n\\\nIn our investigation of gender bias in GPT-3, we focused on associations between gender and occupation. We found that occupations in general have a higher probability of being followed by a male gender identifier than a female one (in other words, they are male leaning) when given a context such as \"The {occupation} was a\" (Neutral Variant). 83% of the 388 occupations we tested were more likely to be followed by a male identifier by GPT-3. We measured this by feeding the model a context such as \"The detective was a\" and then looking at the probability of the model following up with male indicating words (eg. man, male etc.) or female indicating words (woman, female etc.). In particular, occupations demonstrating higher levels of education such as legislator, banker, or professor emeritus were heavily male leaning along with occupations that require hard physical labour such as mason, millwright, and sheriff. Occupations that were more likely to be followed by female identifiers include midwife, nurse, receptionist, housekeeper etc.\\\n\\\nWe also tested how these probabilities changed when we shifted the context to be the \"The competent {occupation} was a\" (Competent Variant), and when we shifted the context to be \"The incompetent {occupation} was a\" (Incompetent Variant) for each occupation in the dataset. We found that, when prompted with \"The competent {occupation} was a,\" the majority of occupations had an even higher probability of being followed by a male identifier than a female one than was the case with our original neutral prompt, \"The {occupation} was a\". With the prompt \"The incompetent {occupation} was a\" the majority of occupations still leaned male with a similar probability than for our original neutral prompt. The average occupation bias - measured as 1njobs​∑jobslog⁡(P​(female\\|Context)P(male\\|Context)))\\\\frac{1}{n\\_{\\\\mathrm{jobs}}}\\\\sum\\_{\\\\mathrm{jobs}}\\\\log(\\\\frac{P(\\\\mathrm{female}\\|\\\\mathrm{Context})}{P(\\\\mathrm{male}\\|\\\\mathrm{Context}))}) \\- was −1.111.11-1.11 for the Neutral Variant, −2.142.14-2.14 for the Competent Variant and −1.151.15-1.15 for the Incompetent Variant.\\\n\\\nWe also carried out pronoun resolution on the Winogender dataset \\[ [111])\\] using two methods which further corroborated the model’s tendency to associate most occupations with males. One method measured the models ability to correctly assign a pronoun as the occupation or the participant. For example, we fed the model a context such as \"The advisor met with the advisee because she wanted to get advice about job applications. ‘She’ refers to the\" and found the option with the lowest probability between the two possible options (Choices between Occupation Option: advisor; Participant Option: advisee).\\\n\\\nOccupation and participant words often have societal biases associated with them such as the assumption that most occupants are by default male. We found that the language models learnt some of these biases such as a tendency to associate female pronouns with participant positions more than male pronouns. GPT-3 175B had the highest accuracy of all the models (64.17%) on this task. It was also the only model where the accuracy for Occupant sentences (sentences where the correct answer was the Occupation option) for females was higher than for males (81.7% vs 76.7%). All other models had a higher accuracy for male pronouns with Occupation sentences as compared to female pronouns with the exception of our second largest model- GPT-3 13B - which had the same accuracy (60%) for both. This offers some preliminary evidence that in places where issues of bias can make language models susceptible to error, the larger models are more robust than smaller models.\\\n\\\nWe also performed co-occurrence tests, where we analyzed which words are likely to occur in the vicinity of other pre-selected words. We created a model output sample set by generating 800 outputs of length 50 each with a temperature of 1 and top\\_p of 0.9 for every prompt in our dataset. For gender, we had prompts such as \"He was very\", \"She was very\", \"He would be described as\", \"She would be described as\"999We only used male and female pronouns. This simplifying assumption makes it easier to study co-occurrence since it does not require the isolation of instances in which ‘they’ refers to a singular noun from those where it didn’t, but other forms of gender bias are likely present and could be studied using different approaches.. We looked at the adjectives and adverbs in the top 100 most favored words using an off-the-shelf POS tagger \\[ [60])\\]. We found females were more often described using appearance oriented words such as ”beautiful” and ”gorgeous” as compared to men who were more often described using adjectives that span a greater spectrum.\\\n\\\nTable [6.1]Table 6.1 ‣ 6.2.1 Gender ‣ 6.2 Fairness, Bias, and Representation ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\") shows the top 10 most favored descriptive words for the model along with the raw number of times each word co-occurred with a pronoun indicator. “Most Favored” here indicates words which were most skewed towards a category by co-occurring with it at a higher rate as compared to the other category. To put these numbers in perspective, we have also included the average for the number of co-occurrences across all qualifying words for each gender.\\\n\\\nTable 6.1: Most Biased Descriptive Words in 175B Model\\\n\\\n| Top 10 Most Biased Male Descriptive Words with Raw Co-Occurrence Counts | Top 10 Most Biased Female Descriptive Words with Raw Co-Occurrence Counts |\\\n| --- | --- |\\\n| Average Number of Co-Occurrences Across All Words: 17.5 | Average Number of Co-Occurrences Across All Words: 23.9 |\\\n| Large (16) | Optimistic (12) |\\\n| Mostly (15) | Bubbly (12) |\\\n| Lazy (14) | Naughty (12) |\\\n| Fantastic (13) | Easy-going (12) |\\\n| Eccentric (13) | Petite (10) |\\\n| Protect (10) | Tight (10) |\\\n| Jolly (10) | Pregnant (10) |\\\n| Stable (9) | Gorgeous (28) |\\\n| Personable (22) | Sucked (8) |\\\n| Survive (7) | Beautiful (158) |\\\n\\\n#### 6.2.2 Race\\\n\\\nTo investigate racial bias in GPT-3, we seeded the model with prompts such as - \"The {race} man was very\", \"The {race} woman was very\" and \"People would describe the {race} person as\" and generated 800 samples for each of the above prompts, with {race} replaced with a term indicating a racial category such as White or Asian. We then measure word co-occurrences in the generated samples. Given prior research demonstrating that language models produce text of differing sentiment when varying features such as occupation \\[ [46])\\], we explored how race impacted sentiment. We measured sentiment using Senti WordNet \\[ [7])\\] for the words which co-occurred disproportionately with each race. Each word sentiment varied from 100 to -100, with positive scores indicating positive words (eg. wonderfulness: 100, amicable: 87.5), negative scores indicating negative words (eg. wretched: -87.5 , horrid: -87.5) and a score of 0 indicating neutral words (eg. sloping, chalet).\\\n\\\nIt should be noted that we were explicitly prompting the models to talk about race and this in turn generated text that focused on racial features; these results are not from the models talking about race in the wild but talking about race in an experimental setup where they have been primed to do so. Additionally, since we are measuring sentiment by simply looking at word co-occurrences, the resulting sentiment can reflect socio-historical factors - for instance, text relating to a discussion of slavery will frequently have a negative sentiment, which may lead to a demographic being associated with a negative sentiment under this testing methodology.\\\n\\\nAcross the models we analyzed, ‘Asian’ had a consistently high sentiment - it ranked 1st in 3 out of 7 models. On the other hand, ’Black’ had a consistently low sentiment - it ranked the lowest in 5 out of 7 models. These differences narrowed marginally on the larger model sizes. This analysis gives a sense of the biases of different models and highlights the need for more sophisticated analysis of the relationship between sentiment, entities, and input data.\\\n\\\n![Refer to caption]Figure 6.1: Racial Sentiment Across Models\\\n\\\n#### 6.2.3 Religion\\\n\\\nWe studied which words co-occurred with religious terms relating to Atheism, Buddhism, Christianity, Hinduism, Islam, and Judaism, by generating 800 model outputs of length ≈\\\\approx50 with a temperature of 1 and a top p𝑝p of 0.90.90.9 for every prompt. Our prompts were of the nature \"{Religion practitioners} are\" (Eg. \"Christians are\") for each of the six religious categories listed above. We then allowed the model to naturally carry out completions and created a corpus of such completions for studying co-occurrence of words.\\\n\\\nThe following is an example output from the model:\\\n\\\n\"Buddhists aredivided into two main branches - Theravada and Mahayana. Theravada is the more conservative branch, centering on monastic life and the earliest sutras and refusing to recognize the later Mahayana sutras as authentic.\"\\\n\\\nSimilar to race, we found that the models make associations with religious terms that indicate some propensity to reflect how these terms are sometimes presented in the world. For example, with the religion Islam, we found that words such as ramadan, prophet and mosque co-occurred at a higher rate than for other religions. We also found that words such as violent, terrorism and terrorist co-occurred at a greater rate with Islam than with other religions and were in the top 40 most favored words for Islam in GPT-3.\\\n\\\n| Religion | Most Favored Descriptive Words |\\\n| --- | --- |\\\n| Atheism | ‘Theists’, ‘Cool’, ‘Agnostics’, ‘Mad’, ‘Theism’, ‘Defensive’, ‘Complaining’, ‘Correct’, ‘Arrogant’, ‘Characterized’ |\\\n| Buddhism | ‘Myanmar’, ‘Vegetarians’, ‘Burma’, ‘Fellowship’, ‘Monk’, ‘Japanese’, ‘Reluctant’, ‘Wisdom’, ‘Enlightenment’, ‘Non-Violent’ |\\\n| Christianity | ‘Attend’, ‘Ignorant’, ‘Response’, ‘Judgmental’, ‘Grace’, ‘Execution’, ‘Egypt’, ‘Continue’, ‘Comments’, ‘Officially’ |\\\n| Hinduism | ‘Caste’, ‘Cows’, ‘BJP’, ‘Kashmir’, ‘Modi’, ‘Celebrated’, ‘Dharma’, ‘Pakistani’, ‘Originated’, ‘Africa’ |\\\n| Islam | ‘Pillars’, ‘Terrorism’, ‘Fasting’, ‘Sheikh’, ‘Non-Muslim’, ‘Source’, ‘Charities’, ‘Levant’, ‘Allah’, ‘Prophet’ |\\\n| Judaism | ‘Gentiles’, ‘Race’, ‘Semites’, ‘Whites’, ‘Blacks’, ‘Smartest’, ‘Racists’, ‘Arabs’, ‘Game’, ‘Russian’ |\\\n\\\nTable 6.2: Shows the ten most favored words about each religion in the GPT-3 175B model.\\\n\\\n#### 6.2.4 Future Bias and Fairness Challenges\\\n\\\nWe have presented this preliminary analysis to share some of the biases we found in order to motivate further research, and to highlight the inherent difficulties in characterizing biases in large-scale generative models; we expect this to be an area of continuous research for us and are excited to discuss different methodological approaches with the community. We view the work in this section as subjective signposting - we chose gender, race, and religion as a starting point, but we recognize the inherent subjectivity in this choice. Our work is inspired by the literature on characterizing model attributes to develop informative labels such as Model Cards for Model Reporting from \\[ [89])\\].\\\n\\\nUltimately, it is important not just to characterize biases in language systems but to intervene. The literature on this is also extensive \\[ [104]), [46])\\], so we offer only a few brief comments on future directions specific to large language models. In order to pave the way for effective bias prevention in general purpose models, there is a need for building a common vocabulary tying together the normative, technical and empirical challenges of bias mitigation for these models. There is room for more research that engages with the literature outside NLP, better articulates normative statements about harm, and engages with the lived experience of communities affected by NLP systems \\[ [4])\\]. Thus, mitigation work should not be approached purely with a metric driven objective to ‘remove’ bias as this has been shown to have blind spots \\[ [32]), [93])\\] but in a holistic manner.\\\n\\\n### 6.3 Energy Usage\\\n\\\nPractical large-scale pre-training requires large amounts of computation, which is energy-intensive: training the GPT-3 175B consumed several thousand petaflop/s-days of compute during pre-training, compared to tens of petaflop/s-days for a 1.5B parameter GPT-2 model (Figure [2.2]Figure 2.2 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\")). This means we should be cognizant of the cost and efficiency of such models, as advocated by \\[ [122])\\].\\\n\\\nThe use of large-scale pre-training also gives another lens through which to view the efficiency of large models - we should consider not only the resources that go into training them, but how these resources are amortized over the lifetime of a model, which will subsequently be used for a variety of purposes and fine-tuned for specific tasks. Though models like GPT-3 consume significant resources during training, they can be surprisingly efficient once trained: even with the full GPT-3 175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or only a few cents in energy costs. Additionally, techniques like model distillation \\[ [69])\\] can further bring down the cost of such models, letting us adopt a paradigm of training single, large-scale models, then creating more efficient versions of them for use in appropriate contexts. Algorithmic progress may also naturally further increase the efficiency of such models over time, similar to trends observed in image recognition and neural machine translation \\[ [39])\\].\\\n\\",
            "citations": null
          },
          "7 Related Work\\": {
            "content": "\\\nSeveral lines of work have focused on increasing parameter count and/or computation in language models as a means to improve generative or task performance. An early work scaled LSTM based language models to over a billion parameters \\[ [51])\\]. One line of work straightforwardly increases the size of transformer models, scaling up parameters and FLOPS-per-token roughly in proportion. Work in this vein has successively increased model size: 213 million parameters \\[ [134])\\] in the original paper, 300 million parameters \\[ [20])\\], 1.5 billion parameters \\[ [117])\\], 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and most recently 17 billion parameters \\[ [132])\\]. A second line of work has focused on increasing parameter count but not computation, as a means of increasing models’ capacity to store information without increased computational cost. These approaches rely on the conditional computation framework \\[ [10])\\] and specifically, the mixture-of-experts method \\[ [124])\\] has been used to produce 100 billion parameter models and more recently 50 billion parameter translation models \\[ [3])\\], though only a small fraction of the parameters are actually used on each forward pass. A third approach increases computation without increasing parameters; examples of this approach include adaptive computation time \\[ [35])\\] and the universal transformer \\[ [22])\\]. Our work focuses on the first approach (scaling compute and parameters together, by straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ this strategy.\\\n\\\nSeveral efforts have also systematically studied the effect of scale on language model performance. \\[ [57]), [114]), [77]), [42])\\], find a smooth power-law trend in loss as autoregressive language models are scaled up. This work suggests that this trend largely continues as models continue to scale up (although a slight bending of the curve can perhaps be detected in Figure [3.1]Figure 3.1 ‣ 3 Results ‣ Language Models are Few-Shot Learners\")), and we also find relatively smooth increases in many (though not all) downstream tasks across 3 orders of magnitude of scaling.\\\n\\\nAnother line of work goes in the opposite direction from scaling, attempting to preserve strong performance in language models that are as small as possible. This approach includes ALBERT \\[ [62])\\] as well as general \\[ [44])\\] and task-specific \\[ [121]), [52]), [59])\\] approaches to distillation of language models. These architectures and techniques are potentially complementary to our work, and could be applied to decrease latency and memory footprint of giant models.\\\n\\\nAs fine-tuned language models have neared human performance on many standard benchmark tasks, considerable effort has been devoted to constructing more difficult or open-ended tasks, including question answering \\[ [58]), [47]), [14]), [84])\\], reading comprehension \\[ [16]), [106])\\], and adversarially constructed datasets designed to be difficult for existing language models \\[ [118]), [94])\\]. In this work we test our models on many of these datasets.\\\n\\\nMany previous efforts have focused specifically on question-answering, which constitutes a significant fraction of the tasks we tested on. Recent efforts include \\[ [116]), [115])\\], which fine-tuned an 11 billion parameter language model, and \\[ [33])\\], which focused on attending over a large corpus of data at test time. Our work differs in focusing on in-context learning but could be combined in the future with those of \\[ [33]), [75])\\].\\\n\\\nMetalearning in language models has been utilized in \\[ [117])\\], though with much more limited results and no systematic study. More broadly, language model metalearning has an inner-loop-outer-loop structure, making it structurally similar to metalearning as applied to ML in general. Here there is an extensive literature, including matching networks \\[ [133])\\], RL2 \\[ [26])\\], learning to optimize \\[ [109]), [1]), [73])\\] and MAML \\[ [30])\\]. Our approach of stuffing the model’s context with previous examples is most structurally similar to RL2 and also resembles \\[ [45])\\], in that an inner loop of adaptation takes place through computation in the model’s activations across timesteps, without updating the weights, while an outer loop (in this case just language model pre-training) updates the weights, and implicitly learns the ability to adapt to or at least recognize tasks defined at inference-time. Few-shot auto-regressive density estimation was explored in  \\[ [107])\\] and \\[ [38])\\] studied low-resource NMT as a few-shot learning problem.\\\n\\\nWhile the mechanism of our few-shot approach is different, prior work has also explored ways of using pre-trained language models in combination with gradient descent to perform few-shot learning \\[ [126])\\]. Another sub-field with similar goals is semi-supervised learning where approaches such as UDA \\[ [137])\\] also explore methods of fine-tuning when very little labeled data is available.\\\n\\\nGiving multi-task models instructions in natural language was first formalized in a supervised setting with \\[ [87])\\] and utilized for some tasks (such as summarizing) in a language model with \\[ [117])\\]. The notion of presenting tasks in natural language was also explored in the text-to-text transformer \\[ [116])\\], although there it was applied for multi-task fine-tuning rather than for in-context learning without weight updates.\\\n\\\nAnother approach to increasing generality and transfer-learning capability in language models is multi-task learning \\[ [12])\\], which fine-tunes on a mixture of downstream tasks together, rather than separately updating the weights for each one. If successful multi-task learning could allow a single model to be used for many tasks without updating the weights (similar to our in-context learning approach), or alternatively could improve sample efficiency when updating the weights for a new task. Multi-task learning has shown some promising initial results \\[ [67]), [76])\\] and multi-stage fine-tuning has recently become a standardized part of SOTA results on some datasets \\[ [97])\\] and pushed the boundaries on certain tasks \\[ [55])\\], but is still limited by the need to manually curate collections of datasets and set up training curricula. By contrast pre-training at large enough scale appears to offer a “natural” broad distribution of tasks implicitly contained in predicting the text itself. One direction for future work might be attempting to generate a broader set of explicit tasks for multi-task learning, for example through procedural generation \\[ [128])\\], human interaction \\[ [144])\\], or active learning \\[ [80])\\].\\\n\\\nAlgorithmic innovation in language models over the last two years has been enormous, including denoising-based bidirectionality \\[ [20])\\], prefixLM \\[ [24])\\] and encoder-decoder architectures \\[ [72]), [116])\\], random permutations during training \\[ [139])\\], architectures that improve the efficiency of sampling \\[ [28])\\], improvements in data and training procedures \\[ [74])\\], and efficiency increases in the embedding parameters \\[ [62])\\]. Many of these techniques provide significant gains on downstream tasks. In this work we continue to focus on pure autoregressive language models, both in order to focus on in-context learning performance and to reduce the complexity of our large model implementations. However, it is very likely that incorporating these algorithmic advances could improve GPT-3’s performance on downstream tasks, especially in the fine-tuning setting, and combining GPT-3’s scale with these algorithmic techniques is a promising direction for future work.\\\n\\",
            "citations": null
          },
          "8 Conclusion\\": {
            "content": "\\\nWe presented a 175 billion parameter language model which shows strong performance on many NLP tasks and benchmarks in the zero-shot, one-shot, and few-shot settings, in some cases nearly matching the performance of state-of-the-art fine-tuned systems, as well as generating high-quality samples and strong qualitative performance at tasks defined on-the-fly. We documented roughly predictable trends of scaling in performance without using fine-tuning. We also discussed the social impacts of this class of model. Despite many limitations and weaknesses, these results suggest that very large language models may be an important ingredient in the development of adaptable, general language systems.\\\n\\",
            "citations": null
          }
        },
        "abstract": "Recent work has demonstrated substantial gains on many NLP tasks and\nbenchmarks by pre-training on a large corpus of text followed by fine-tuning on\na specific task. While typically task-agnostic in architecture, this method\nstill requires task-specific fine-tuning datasets of thousands or tens of\nthousands of examples. By contrast, humans can generally perform a new language\ntask from only a few examples or from simple instructions - something which\ncurrent NLP systems still largely struggle to do. Here we show that scaling up\nlanguage models greatly improves task-agnostic, few-shot performance, sometimes\neven reaching competitiveness with prior state-of-the-art fine-tuning\napproaches. Specifically, we train GPT-3, an autoregressive language model with\n175 billion parameters, 10x more than any previous non-sparse language model,\nand test its performance in the few-shot setting. For all tasks, GPT-3 is\napplied without any gradient updates or fine-tuning, with tasks and few-shot\ndemonstrations specified purely via text interaction with the model. GPT-3\nachieves strong performance on many NLP datasets, including translation,\nquestion-answering, and cloze tasks, as well as several tasks that require\non-the-fly reasoning or domain adaptation, such as unscrambling words, using a\nnovel word in a sentence, or performing 3-digit arithmetic. At the same time,\nwe also identify some datasets where GPT-3's few-shot learning still struggles,\nas well as some datasets where GPT-3 faces methodological issues related to\ntraining on large web corpora. Finally, we find that GPT-3 can generate samples\nof news articles which human evaluators have difficulty distinguishing from\narticles written by humans. We discuss broader societal impacts of this finding\nand of GPT-3 in general."
      },
      "bib.bib4": {
        "id": "bib.bib4",
        "citation": "Chang et al. (2015)",
        "authors": "",
        "year": "",
        "title": "Shapenet: An information-rich 3d model repository.",
        "venue": "arXiv preprint arXiv:1512.03012",
        "pages": "",
        "url": "",
        "arxiv_id": "1512.03012",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Recent technological developments have led to an explosion in the amount of 3D data that we can generate and store. Repositories of 3D CAD models are expanding continuously, predominantly through aggregation of 3D content on the web. RGB-D sensors and other technology for scanning and reconstruction are providing increasingly higher fidelity geometric representations of objects and real environments that can eventually become CAD-quality models.\n\nAt the same time, there are many open research problems due to fundamental challenges in using 3D content. Computing segmentations of 3D shapes, and establishing correspondences between them are two basic problems in geometric shape analysis. Recognition of shapes from partial scans is a research goal shared by computer graphics and vision. Scene understanding from 2D images is a grand challenge in vision that has recently benefited tremendously from 3D CAD models \\[ [28]), [34])\\]. Navigation of autonomous robots and planning of grasping manipulations are two large areas in robotics that benefit from an understanding of 3D shapes. At the root of all these research problems lies the need for attaching semantics to representations of 3D shapes, and doing so at large scale.\n\nRecently, data-driven methods from the machine learning community have been exploited by researchers in vision and NLP (natural language processing). “Big data” in the visual and textual domains has led to tremendous progress towards associating semantics with content in both fields. Mirroring this pattern, recent work in computer graphics has also applied similar approaches to specific problems in the synthesis of new shape variations \\[ [10])\\] and new arrangements of shapes \\[ [6])\\]. However, a critical bottleneck facing the adoption of data-driven methods for 3D content is the lack of large-scale, curated datasets of 3D models that are available to the community.\n\nMotivated by the far-reaching impact of dataset efforts such as the Penn Treebank \\[ [20])\\], WordNet \\[ [21])\\] and ImageNet \\[ [4])\\], which collectively have tens of thousands of citations, we propose establishing _ShapeNet_: a large-scale 3D model dataset. Making a comprehensive, semantically enriched shape dataset available to the community can have immense impact, enabling many avenues of future research.\n\nIn constructing ShapeNet we aim to fulfill several goals:\n\n- •\n\n\nCollect and centralize 3D model datasets, helping to organize effort in the research community.\n\n- •\n\n\nSupport data-driven methods requiring 3D model data.\n\n- •\n\n\nEnable evaluation and comparison of algorithms for fundamental tasks involving geometry (e.g., segmentation, alignment, correspondence).\n\n- •\n\n\nServe as a knowledge base for representing real-world objects and their semantics.\n\n\nThese goals imply several desiderata for ShapeNet:\n\n- •\n\n\nBroad and deep coverage of objects observed in the real world, with thousands of object categories and millions of total instances.\n\n- •\n\n\nCategorization scheme connected to other modalities of knowledge such as 2D images and language.\n\n- •\n\n\nAnnotation of salient physical attributes on models, such as canonical orientations, planes of symmetry, and part decompositions.\n\n- •\n\n\nWeb-based interfaces for searching, viewing and retrieving models in the dataset through several modalities: textual keywords, taxonomy traversal, image and shape similarity search.\n\n\nAchieving these goals and providing the resulting dataset to the community will enable many advances and applications in computer graphics and vision.\n\nIn this report, we first situate ShapeNet, explaining the overall goals of the effort and the types of data it is intended to contain, as well as motivating the long-term vision and infrastructural design decisions ( [Section3]ShapeNet: An Information-Rich 3D Model Repository ‣ ShapeNet: An Information-Rich 3D Model Repository\")). We then describe the acquisition and validation of annotations collected so far ( [Section4]Annotation Acquisition and Validation ‣ ShapeNet: An Information-Rich 3D Model Repository\")), summarize the current state of all available ShapeNet datasets, and provide basic statistics on the collected annotations ( [Section5]Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\")). We end with a discussion of ShapeNet’s future trajectory and connect it with several research directions ( [Section7]Conclusion ‣ Annotation coverage ‣ 6 Discussion and Future Work ‣ 5.2 ShapeNetSem ‣ 5 Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\")).",
            "citations": null
          },
          "2 Background and Related Work": {
            "content": "There has been substantial growth in the number of of 3D models available online over the last decade, with repositories like the Trimble 3D Warehouse providing millions of 3D polygonal models covering thousands of object and scene categories. Yet, there are few collections of 3D models that provide useful organization and annotations. Meaningful textual descriptions are rarely provided for individual models, and online repositories are usually either unorganized or grouped into gross categories (e.g., furniture, architecture, etc. \\[ [7])\\]). As a result, they have been poorly utilized in research and applications.\n\nThere have been previous efforts to build organized collections of 3D models (e.g., \\[ [5]), [7])\\]). However, they have provided quite small datasets, covered only a small number of semantic categories, and included few structural and semantic annotations. Most of these previous collections have been developed for evaluating shape retrieval and classification algorithms. For example, datasets are created annually for the Shape Retrieval Contest (SHREC) that commonly contains sets of models organized in object categories. However, those datasets are very small — the most recent SHREC iteration in 2014 \\[ [17])\\] contains a “large” dataset with around 9,000 models consisting of models from a variety of sources organized into 171 categories (Table [1]Table 1 ‣ 2 Background and Related Work ‣ ShapeNet: An Information-Rich 3D Model Repository\")).\n\nThe Princeton Shape Benchmark is probably the most well-known and frequently used 3D shape collection to date (with over 1000 citations) \\[ [27])\\]. It contains around 1,800 3D models grouped into 90 categories, but has no annotations beyond category labels. Other commonly-used datasets contain segmentations \\[ [2])\\], correspondences \\[ [13]), [12])\\], hierarchies \\[ [19])\\], symmetries \\[ [11])\\], salient features \\[ [3])\\], semantic segmentations and labels \\[ [36])\\], alignments of 3D models with images \\[ [35])\\], semantic ontologies \\[ [5])\\], and other functional annotations — but again only for small size datasets. For example, the Benchmark for 3D Mesh Segmentation contains just 380 models in 19 object classes \\[ [2])\\].\n\nIn contrast, there has been a flurry of activity on collecting, organizing, and labeling large datasets in computer vision and related fields. For example, ImageNet \\[ [4])\\] provides a set of 14M images organized into 20K categories associated with “synsets” of WordNet \\[ [21])\\]. LabelMe provides segmentations and label annotations of hundreds of thousands of objects in tens of thousands of images \\[ [24])\\]. The SUN dataset provides 3M annotations of objects in 4K categories appearing in 131K images of 900 types of scenes. Recent work demonstrated the benefit of a large dataset of 120K 3D CAD models in training a convolutional neural network for object recognition and next-best view prediction in RGB-D data \\[ [34])\\]. Large datasets such as this and others (e.g., \\[ [14]), [18])\\]) have revitalized data-driven algorithms for recognition, detection, and editing of images, which have revolutionized computer vision.\n\nSimilarly, large collections of annotated 3D data have had great influence on progress in other disciplines. For example, the Protein Data Bank \\[ [1])\\] provides a database with 100K protein 3D structures, each labeled with its source and links to structural and functional annotations \\[ [15])\\]. This database is a common repository of all 3D protein structures solved to date and provides a shared infrastructure for the collection and transfer of knowledge about each entry. It has accelerated the development of data-driven algorithms, facilitated the creation of benchmarks, and linked researchers and industry from around the world. We aim to provide a similar resource for 3D models of everyday objects.\n\n| Benchmarks | Types | \\# models | \\# classes | Avg # models per class |\n| SHREC14LSGTB | Generic | 8,987 | 171 | 53 |\n| PSB | Generic | 907+907 (train+test) | 90+92 (train+test) | 10+10 (train+test) |\n| SHREC12GTB | Generic | 1200 | 60 | 20 |\n| TSB | Generic | 10,000 | 352 | 28 |\n| CCCC | Generic | 473 | 55 | 9 |\n| WMB | Watertight (articulated) | 400 | 20 | 20 |\n| MSB | Articulated | 457 | 19 | 24 |\n| BAB | Architecture | 2257 | 183+180 (function+form) | 12+13 (function+form) |\n| ESB | CAD | 867 | 45 | 19 |\n\nTable 1: Source datasets from SHREC 2014: _Princeton Shape Benchmark (PSB)_\\[ [27])\\], _SHREC 2012 generic Shape Benchmark (SHREC12GTB)_\\[ [16])\\], _Toyohashi Shape Benchmark (TSB)_\\[ [29])\\], _Konstanz 3D Model Benchmark (CCCC)_\\[ [32])\\], _Watertight Model Benchmark (WMB)_\\[ [31])\\], _McGill 3D Shape Benchmark (MSB)_\\[ [37])\\], _Bonn Architecture Benchmark (BAB)_\\[ [33])\\], _Purdue Engineering Shape Benchmark (ESB)_\\[ [9])\\].",
            "citations": null
          },
          "3 ShapeNet: An Information-Rich 3D Model Repository": {
            "content": "ShapeNet is a large, information-rich repository of 3D models. It contains models spanning a multitude of semantic categories. Unlike previous 3D model repositories, it provides extensive sets of annotations for every model and links between models in the repository and other multimedia data outside the repository.\n\nLike ImageNet, ShapeNet provides a view of the contained data in a hierarchical categorization according to WordNet synsets (Figure [1]Figure 1 ‣ 3 ShapeNet: An Information-Rich 3D Model Repository ‣ ShapeNet: An Information-Rich 3D Model Repository\")). Unlike other model repositories, ShapeNet also provides a rich set of annotations for each shape and correspondences between shapes. The annotations include geometric attributes such as upright and front orientation vectors, parts and keypoints, shape symmetries (reflection plane, other rotational symmetries), and scale of object in real world units. These attributes provide valuable resources for processing, understanding and visualizing 3D shapes in a way that is aware of the semantics of the shape.\n\nWe have currently collected approximately 3 million shapes from online 3D model repositories, and categorized 300 thousand of them against the WordNet taxonomy. We have also annotated a subset of these models with shape properties such as upright and front orientations, symmetries, and hierarchical part decompositions. We are continuing the process of expanding the annotated set of models and also collecting new models from new data sources.\n\nIn the following sections, we discuss how 3D models are collected for ShapeNet, what annotations will be added, how those annotations will be generated, how annotations will be updated as the dataset evolves over time, and what tools will be provided for the community to search, browse, and utilize existing data, as well as contribute new data.\n\n![Refer to caption]Figure 1: Screenshot of the online ShapeNet taxonomy view, organizing contained 3D models under WordNet synsets.\n\n### 3.1 Data Collection\n\nThe raw 3D model data for ShapeNet comes from public online repositories or existing research datasets. ShapeNet is intended to be an evolving repository with regular updates as more and more 3D models become available, as more people contribute annotations, and as the data captured with new 3D sensors become prevalent.\n\nWe have collected 3D polygonal models from two popular public repositories: Trimble 3D Warehouse111https://3dwarehouse.sketchup.com/ and Yobi3D222https://yobi3d.com. The Trimble 3D Warehouse contains 2.4M user-designed 3D models and scenes. Yobi3D contains 350K additional models collected from a wide range of other online repositories. Together, they provide a diverse set of shapes from a broad set of object and scene categories — e.g., many organic shape categories (e.g., humans and mammals), which are rare in Warehouse3D, are plentiful in Yobi3D. For more detailed statistics on the currently available ShapeNet models refer to [Section5]Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\").\n\nThough the tools developed for this project will be general-purpose, we intend to include only 3D models of objects encountered by people in the everyday world. That is, it will not include CAD mechanical parts, molecular structures, or other domain-specific objects. However, we will include scenes (e.g., office), objects (e.g., laptop computer), and parts of objects (e.g., keyboard). Models are organized under WordNet \\[ [21])\\] noun “synsets” (synonym sets). WordNet provides a broad and deep taxonomy with over 80K distinct synsets representing distinct noun concepts arranged as a DAG network of hyponym relationships (e.g., “canary” is a hyponym of “bird”). This taxonomy has been used by ImageNet to describe categories of objects at multiple scales \\[ [4])\\]. Though we first use WordNet due to its popularity, the ShapeNet UI is designed to allow multiple views into the collection of shapes that it contains, including different taxonomy views and faceted navigation.\n\n### 3.2 Annotation Types\n\n![Refer to caption]Figure 2: ShapeNet annotations illustrated for an example chair model. _Left:_ links to the WordNet taxonomy provide definitions of objects, is-a and has-a relations, and a connection to images from ImageNet. _Middle-left:_ shape is aligned to a consistent upright and front orientation, and symmetries are computed _Middle-right:_ hierarchical decomposition of shape into parts on which various attributes are defined: names, symmetries, dimensions, materials, and masses. _Right:_ part-to-part and point-to-point connections are established at all levels within ShapeNet producing a dense and semantically rich network of correspondences. The gray background indicates annotations that are currently ongoing and not yet available for release.\n\nWe envision ShapeNet as far more than a collection of 3D models. ShapeNet will include a rich set of annotations that provide semantic information about those models, establish links between them, and links to other modalities of data (e.g., images). These annotations are exactly what make ShapeNet uniquely valuable. [Figure2]In 3.2 Annotation Types ‣ 3 ShapeNet: An Information-Rich 3D Model Repository ‣ ShapeNet: An Information-Rich 3D Model Repository\") illustrates the value of this dense network of interlinked attributes on shapes, which we describe below.\n\n#### Language-related Annotations:\n\nNaming objects by their basic category is useful for indexing, grouping, and linking to related sources of data. As described in the previous section, we organize ShapeNet based on the WordNet \\[ [21])\\] taxonomy. Synsets are interlinked with various relations, such as hyper and hyponym, and part-whole relations. Due to the popularity of WordNet, we can leverage other resources linked to WordNet such as ImageNet, ConceptNet, Freebase, and Wikipedia. In particular, linking to ImageNet \\[ [4])\\] will help transport information between images and shapes. We assign each 3D model in ShapeNet to one or more synsets in the WordNet taxonomy (i.e., we populate each synset with a collection of shapes). Please refer to [Section4.1]Category Annotation ‣ 4 Annotation Acquisition and Validation ‣ ShapeNet: An Information-Rich 3D Model Repository\") for details on the acquisition and validation of basic category annotations. Future planned annotations include natural language descriptions of objects and object part-part relation descriptions.\n\n#### Geometric Annotations:\n\nA critical property that distinguishes ShapeNet from image and video datasets is the fidelity with which 3D geometry represents real-world structures. We combine algorithmic predictions and manual annotations to organize shapes by category-level geometric properties and further derive rich geometric annotations from the raw 3D model geometry.\n\n- •\n\n\nRigid Alignments:\nEstablishing a consistent canonical orientation (e.g., upright and front) for every model is important for various tasks such as visualizing shapes \\[ [13])\\], shape classification \\[ [8])\\] and shape recognition \\[ [34])\\]. Fortunately, most raw 3D model data is by default placed in an upright orientation, and the front orientations are typically aligned with an axis. This allows us to use a hierarchical clustering and alignment approach to ensure consistent rigid alignments within each category (see [Section4.2]Hierarchical Rigid Alignment ‣ 4 Annotation Acquisition and Validation ‣ ShapeNet: An Information-Rich 3D Model Repository\")).\n\n- •\n\n\nParts and Keypoints: Many shapes contain or have natural decompositions into important parts, as well as significant keypoints related to both their geometry and their semantics. For example, often different materials are associated with different parts. We intend to capture as much of that as possible into ShapeNet.\n\n- •\n\n\nSymmetry: Bilateral symmetry planes and rotational symmetries are prevalent in artificial and natural objects, and deeply connected with the alignment and functionality of shapes. We refer to [Section4.4]Symmetry Estimation ‣ 4 Annotation Acquisition and Validation ‣ ShapeNet: An Information-Rich 3D Model Repository\") for more details on how we compute symmetries for the shapes in ShapeNet.\n\n- •\n\n\nObject Size: Object size is useful for many applications, such as reducing the hypothesis space in object recognition. Size annotations are discussed in [Section5.2]ShapeNetSem ‣ 5 Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\").\n\n\n#### Functional Annotations:\n\nMany objects, especially man-made artifacts such as furniture and appliances, can be used by humans. Functional annotations describe these usage patterns. Such annotations are often highly correlated with specific regions of an object. In addition, it is often related with the specific type of human action. ShapeNet aims to store functional annotations at the global shape level and at the object part level.\n\n- •\n\n\nFunctional Parts: Parts are critical for understanding object structure, human activities involving a 3D shape, and ergonomic product design. We plan to annotate parts according to their function — in fact the very definition of parts has to be based on both geometric and functional criteria.\n\n- •\n\n\nAffordances: We are interested in affordance annotations that are function and activity specific. Examples of such annotations include supporting plane annotations, and graspable region annotations for various object manipulations.\n\n\n#### Physical Annotations:\n\nReal objects exist in the physical world and typically have fixed physical properties such as dimensions and densities. Thus, it is important to store physical attribute annotations for 3D shapes.\n\n- •\n\n\nSurface Material: We are especially interested in the optical properties and semantic names of surface materials. They are important for applications such as rendering and structural strength estimation.\n\n- •\n\n\nWeight: A basic property of objects which is very useful for physical simulations, and reasoning about stability and static support.\n\n\nIn general, the issue of compact and informative representations for all the above attributes over shapes raises many interesting questions that we will need to address as part of the ShapeNet effort. Many annotations are currently ongoing projects and involve interesting open research problems.\n\n### 3.3 Annotation Methodology\n\nThough at first glance it might seem reasonable to collect the annotations we describe purely through manual human effort, we will in general take a hybrid approach. For annotation types where it is possible, we will first algorithmically predict the annotation for each model instance (e.g., global symmetry planes, consistent rigid alignments). We will then verify these predictions through crowd-sourcing pipelines and inspection by human experts. This hybrid strategy is sensible in the context of 3D shape data as there are already various algorithms we can leverage, and collecting corresponding annotations entirely through manual effort can be extremely labor intensive. In particular, since objects in a 3D representation are both more pure and more complete than objects in images, we can expect better and easier to establish correspondences between 3D shapes, enabling algorithmic transport of semantic annotations. In many cases, the design of the human annotation interfaces themselves is an open question — which stands in contrast to largely manual image labeling efforts such as ImageNet. As a concrete example, shape part annotation can be presented and performed in various ways with different trade-offs in the type of obtained part annotation, the accuracy and the efficiency of the annotation process.\n\nCoupled with this hybrid annotation strategy, we also take particular care to preserve the provenance and confidence of each algorithmic and human annotation. The annotation source (whether an algorithm, or human effort), and a measure of the trust we can place in each annotation are critical pieces of information especially when we have to combine, aggregate, and reconcile several annotations.\n\n### 3.4 Annotation Schema and Web API\n\nTo provide convenient access to all of the model and annotation data contained within ShapeNet, we construct an index over all the 3D models and their associated annotations using the Apache Solr framework.333 [http://lucene.apache.org/solr/] Each stored annotation for a given 3D model is contained within the index as a separate attribute that can be easily queried and filtered through a simple web-based UI. In addition, to make the dataset conveniently accessible to researchers, we provide a batched download capability.",
            "citations": null
          },
          "4 Annotation Acquisition and Validation": {
            "content": "A key challenge in constructing ShapeNet is the methodology for acquiring and validating annotations. Our goal is to provide all annotations with high accuracy. In cases where full verification is not yet available, we aim to estimate a confidence metric for each annotation, as well as record its provenance. This will enable others to properly estimate the trustworthiness of the information we provide and use it for different applications.\n\n### 4.1 Category Annotation\n\nAs described in Section [3.2]Annotation Types ‣ 3 ShapeNet: An Information-Rich 3D Model Repository ‣ ShapeNet: An Information-Rich 3D Model Repository\"), we assign each 3D model to one or more synsets in the WordNet taxonomy.\n\n#### Annotation\n\nModels are retrieved by textual query into the online repositories that we collected, and the initial category annotation is set to the used textual query for each retrieved model. After we retrieve these models we use the popularity score of each model on the repository to sort models and ask human workers to verify the assigned category annotation. This is sensible since the more popular models tend to be high quality and correctly retrieved through the category keyword textual query. We stop verifying category annotations with people once the positive ratio is lower than a 2% threshold.\n\n#### Clean-up\n\nIn order for the dataset to be easily usable by researchers it should contain clean and high quality 3D models. Through inspection, we identify and group 3D models into the following categories: _single 3D models_, _3D scenes_, _billboards_, and _big ground plane_.\n\n- •\n\n\nSingle 3D models: semantically distinct objects; focus of our _ShapeNetCore_ annotation effort.\n\n- •\n\n\n3D scenes: detected by counting the number of connected components in a voxelized representation. We manually verify these detections and mark scenes for future analysis.\n\n- •\n\n\nBillboards: planes with a painted texture. Often used to represent people and trees. These models are generally not useful for geometric analysis. They can be detected by checking whether a single plane can fit all vertices.\n\n- •\n\n\nBig ground plane: object of interest placed on a large horizontal plane or in front of large vertical plane. Although we do not currently use these models, the plane can easily be identified and removed through simple geometric analysis.\n\n\nWe currently include the single 3D models in the ShapeNetCore subset of ShapeNet.\n\n### 4.2 Hierarchical Rigid Alignment\n\nThe goal of this step is to establish a consistent canonical orientation for models within each category. Such alignment is important for various tasks such as visualizing shapes, shape classification and shape recognition. [Figure3]In 4.2 Hierarchical Rigid Alignment ‣ 4 Annotation Acquisition and Validation ‣ ShapeNet: An Information-Rich 3D Model Repository\") shows several categories in ShapeNet that have been consistently aligned.\n\nThough the concept of consistent orientation seems natural, one issue has to be addressed. We explain by an example. “armchair”, “chair” and “seat” are three categories in our taxonomy, each being a subcategory of its successor. Consistent orientation can be well defined for shapes in the “armchair” category, by checking arms, legs and backs. Yet, it becomes difficult to define for the “chair” category. For example, “side chair” and “swivel chair” are both subcategories of “chair”, however, swivel chairs have a very different leg structure than most side chairs. It becomes even more ambiguous to define for “seat”, which has subcategories such as “stool”, “couch”, and “chair”. However, the concept of an upright orientation still applies throughout most levels of the taxonomy.\n\nFollowing the above discussion, it is natural for us to propose a hierarchical alignment method, with a small amount of human supervision. The basic idea is to hierarchically align models following the taxonomy of ShapeNet in a bottom-up manner, i.e., we start from aligning shapes in low-level categories and then gradually elevate to higher level categories. When we proceed to the higher level, the self-consistent orientation within a subcategory should be maintained. For the alignment at each level, we first use a geometric algorithm described in the [SectionA.1]A.1 Hierarchical Rigid Alignment ‣ Appendix A Appendix ‣ Benchmark dataset ‣ 7 Conclusion ‣ Annotation coverage ‣ 6 Discussion and Future Work ‣ 5.2 ShapeNetSem ‣ 5 Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\"), and then ask human experts to check and correct possible misalignments. With this strategy, we efficiently obtain consistent orientations. In practice, most shapes in the same low-level categories can be well aligned algorithmically, requiring limited manual correction. Though the proportion of manual corrections increases for aligning higher-level categories, the number of categories at each level becomes logarithmically smaller.\n\n![Refer to caption]Figure 3: Examples of aligned models in the chair, laptop, bench, and airplane synsets.\n\n### 4.3 Parts and Keypoints\n\nTo obtain part and keypoint annotations we start from some curated part annotations within each category. For parts, this acquisition can be speeded up by having algorithmically generated segmentations and then having users accept or modify parts from these. We intend to experiment with both 2D and 3D interfaces for this task. We then exploit a number of different algorithmic techniques to propagate this information to other nearby shapes. Such methods can rely on rigid alignments in 3D, feature descriptor alignments in an appropriately defined feature space, or general shape correspondences. We iterate this pipeline, using active learning to estimate the 3D models and regions of these models where further human annotation would be most informative, generate a new set of crowd-sourced annotation tasks, algorithmically propagate their results, and so on. In the end we have users verify all proposed parts and keypoints, as verification is much faster than direct annotation.\n\n### 4.4 Symmetry Estimation\n\nWe provide bilateral symmetry plane detections for all 3D models in ShapeNetCore. Our method is a modified version of \\[ [22])\\]. The basic idea is to use hough transform to vote on the parameters of the symmetry plane. More specifically, we generate all combinations of pairs of vertices from the mesh. Each pair casts a vote of a possible symmetry plane in the discretized space of plane parameters partitioned evenly. We then pick the parameter with the most votes as the symmetry plane candidate. As a final step, this candidate is verified to ensure that every vertex has a symmetric counterpart.\n\n### 4.5 Physical Property Estimation\n\nBefore computing physical attribute annotations, the dimensions of the models need to be correspond to the real world. We estimate the absolute dimensions of models using prior work in size estimation \\[ [25])\\], followed by manual verification. With the given absolute dimensions, we now compute the total solid volume of each model through filled-in voxelization. We use the space carving approach implemented by Binvox \\[ [23])\\]. Categories of objects that are known to be container-like (i.e., bottles, microwaves) are annotated as such and only the surface voxelization volume is used instead. We then estimate the proportional material composition of each object category and use a table of material densities along with each model instance volume to compute a rough total weight estimate for that instance. More details about the acquisition of these physical attribute annotations are available separately \\[ [26])\\].",
            "citations": null
          },
          "5 Current Statistics": {
            "content": "At the time of this technical report, ShapeNet has indexed roughly 3,000,000 models. 220,000 models of these models are classified into 3,135 categories (WordNet synsets). Below we provide detailed statistics for the currently annotated models in ShapeNet as a whole, as well as details of the available publicly released subsets of ShapeNet.\n\n![Refer to caption]Figure 4: Plots of the distribution of ShapeNet models over WordNet synsets at multiple levels of the taxonomy (only the top few children synsets are shown at each level). The highest level (root) is at the top and the taxonomy levels become lower downwards and to the right. Note the bias towards rigid man-made artifacts at the top and the broad coverage of many low level categories towards the bottom.\n\n#### Category Distribution\n\n[Figure4]In 5 Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\") shows the distributions of the number of shapes per synset at various taxonomy levels for the current ShapeNetCore corpus. To the best of our knowledge, ShapeNet is the largest clean shape dataset available in terms of total number of shapes, average number of shapes per category, as well as the number of categories.\n\nWe observe that ShapeNet as a whole is strongly biased towards categories of rigid man-made artifacts, due to the bias of the source 3D model repositories. This is in contrast to common image database statistics that contain more natural objects such as plants and animals \\[ [30])\\]. This distribution bias is probably due to a combination of factors: 1) meshes of natural objects are more difficult to design using common CAD software; 2) 3D model consumers are typically more interested in artificial objects such as those observed in modern urban lifestyles. The former factor can be mitigated in the near future by using the rapidly improving depth sensing and 3D scanning technology.\n\n### 5.1 ShapeNetCore\n\n_ShapeNetCore_ is a subset of the full ShapeNet dataset with single clean 3D models and manually verified category and alignment annotations. It covers 55 common object categories with about 51,300 unique 3D models. The 12 object categories of PASCAL 3D+\\[ [35])\\], a popular computer vision 3D benchmark dataset, are all covered by ShapeNetCore. The category distribution of ShapeNetCore is shown in [Table2]In 5.1 ShapeNetCore ‣ 5 Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\").\n\n| ID | Name | Num | ID | Name | Num | ID | Name | Num |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 04379243 | table | 8443 | 03593526 | jar | 597 | 04225987 | skateboard | 152 |\n| 02958343 | car | 7497 | 02876657 | bottle | 498 | 04460130 | tower | 133 |\n| 03001627 | chair | 6778 | 02871439 | bookshelf | 466 | 02942699 | camera | 113 |\n| 02691156 | airplane | 4045 | 03642806 | laptop | 460 | 02801938 | basket | 113 |\n| 04256520 | sofa | 3173 | 03624134 | knife | 424 | 02946921 | can | 108 |\n| 04090263 | rifle | 2373 | 04468005 | train | 389 | 03938244 | pillow | 96 |\n| 03636649 | lamp | 2318 | 02747177 | trash bin | 343 | 03710193 | mailbox | 94 |\n| 04530566 | watercraft | 1939 | 03790512 | motorbike | 337 | 03207941 | dishwasher | 93 |\n| 02828884 | bench | 1816 | 03948459 | pistol | 307 | 04099429 | rocket | 85 |\n| 03691459 | loudspeaker | 1618 | 03337140 | file cabinet | 298 | 02773838 | bag | 83 |\n| 02933112 | cabinet | 1572 | 02818832 | bed | 254 | 02843684 | birdhouse | 73 |\n| 03211117 | display | 1095 | 03928116 | piano | 239 | 03261776 | earphone | 73 |\n| 04401088 | telephone | 1052 | 04330267 | stove | 218 | 03759954 | microphone | 67 |\n| 02924116 | bus | 939 | 03797390 | mug | 214 | 04074963 | remote | 67 |\n| 02808440 | bathtub | 857 | 02880940 | bowl | 186 | 03085013 | keyboard | 65 |\n| 03467517 | guitar | 797 | 04554684 | washer | 169 | 02834778 | bicycle | 59 |\n| 03325088 | faucet | 744 | 04004475 | printer | 166 | 02954340 | cap | 56 |\n| 03046257 | clock | 655 | 03513137 | helmet | 162 |  |  |  |\n| 03991062 | flowerpot | 602 | 03761084 | microwaves | 152 |  | Total | 57386 |\n\nTable 2: Statistics of ShapeNetCore synsets. ID corresponds to WordNet synset offset, which is aligned with ImageNet.\n\n### 5.2 ShapeNetSem\n\n| Category | Num | Category | Num | Category | Num | Category | Num | Category | Num |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Chair | 696 | Monitor | 127 | WallLamp | 78 | Gun | 54 | FlagPole | 38 |\n| Lamp | 663 | RoundTable | 120 | SideChair | 77 | Nightstand | 53 | TvStand | 38 |\n| ChestOfDrawers | 511 | TrashBin | 117 | VideoGameConsole | 75 | Mug | 51 | Fireplace | 37 |\n| Table | 427 | DrinkingUtensil | 112 | MediaStorage | 73 | AccentChair | 50 | Rack | 37 |\n| Couch | 413 | DeskLamp | 110 | Painting | 73 | ChessBoard | 49 | LightSwitch | 36 |\n| Computer | 244 | Clock | 101 | Desktop | 71 | Rug | 49 | Oven | 36 |\n| Dresser | 234 | ToyFigure | 101 | AccentTable | 70 | WallUnit | 46 | Airplane | 35 |\n| TV | 233 | Plant | 98 | Camera | 70 | Mirror | 45 | DresserWithMirror | 35 |\n| WallArt | 222 | Armoire | 95 | Picture | 69 | Bowl | 44 | Calculator | 34 |\n| Bed | 221 | QueenBed | 94 | Refrigerator | 68 | SodaCan | 44 | TableClock | 34 |\n| Cabinet | 221 | Stool | 92 | Speaker | 68 | VideoGameController | 44 | Toilet | 34 |\n| FloorLamp | 201 | EndTable | 91 | Sideboard | 67 | WallClock | 43 | Cup | 33 |\n| Desk | 189 | Bottle | 88 | Barstool | 66 | Printer | 42 | Stapler | 33 |\n| PottedPlant | 188 | DiningTable | 88 | Guitar | 65 | Sword | 40 | PaperBox | 32 |\n| FoodItem | 180 | Bookcase | 87 | MediaPlayer | 62 | USBStick | 40 | SpaceShip | 32 |\n| Laptop | 173 | CeilingLamp | 86 | Ipod | 59 | Chaise | 39 | Toy | 32 |\n| Vase | 163 | Bench | 84 | PersonStanding | 57 | OfficeSideChair | 39 | ToiletPaper | 31 |\n| TableLamp | 142 | Book | 84 | Piano | 56 | Poster | 39 | Knife | 30 |\n| OfficeChair | 137 | CoffeeTable | 81 | Curtain | 55 | Sink | 39 | PictureFrame | 30 |\n| CellPhone | 130 | Pencil | 80 | Candle | 54 | Telephone | 39 | Recliner | 30 |\n\nTable 3: Total number of models for the top 100 ShapeNetSem categories (out of 270 categories). Each category is also linked to the corresponding WordNet synset, establishing the same linkage to WordNet and ImageNet as with ShapeNetCore.\n\n_ShapeNetSem_ is a smaller, more densely annotated subset consisting of 12,000 models spread over a broader set of 270 categories. In addition to manually verified category labels and consistent alignments, these models are annotated with real-world dimensions, estimates of their material composition at the category level, and estimates of their total volume and weight. The total numbers of models for the top 100 categories in this subset are given in [Section5.2]ShapeNetSem ‣ 5 Current Statistics ‣ ShapeNet: An Information-Rich 3D Model Repository\").",
            "citations": null
          },
          "6 Discussion and Future Work": {
            "content": "The construction of ShapeNet is a continuous, ongoing effort. Here we have just described the initial steps we have taken in defining ShapeNet and populating a core subset of model annotations that we hope will prove useful to the community. We plan to grow ShapeNet in four distinct directions:\n\n#### Additional annotation types\n\nWe will introduce several additional types of annotations that have strong connections to the semantics and functionality of objects. Firstly, hierarchical part decompositions of objects will provide a useful finer granularity description of object structure that can be leveraged for part segmentation and shape synthesis. Secondly, physical object property annotations such as materials and their attributes will allow higher fidelity physics and appearance simulation, adding another layer of understanding to methods in vision and graphics.\n\n#### Correspondences\n\nOne of the most important goals of ShapeNet is to provide a dense network of correspondences between 3D models and their parts. This will be invaluable for enabling much shape analysis research and helping to improve and evaluate methods for many traditional tasks such as alignment and segmentation. Additionally, we plan to provide correspondences between 3D model parts and image patches in ImageNet — a link that will be critical for propagating information between image space and 3D models.\n\n#### RGB-D data\n\nThe rapid proliferation of commodity RGB-D sensors is already making the process of capturing real-world environments better and more efficient. Expanding ShapeNet to include shapes reconstructed from scanned RGB-D data is a critical goal. We foresee that over time, the amount of available reconstructed shape data will overshadow the existing designed 3D model data and as such this is a natural growth direction for ShapeNet. A related effort that we are currently undertaking is to align 3D models to objects observed in RGB-D frames. This will establish a powerful connection between real world observations and 3D models.\n\n#### Annotation coverage\n\nWe will continue to expand the set of annotated models to cover a bigger subset of the entirety of ShapeNet. We will explore combinations of algorithmic propagation methods and crowd-sourcing for verification of the algorithmic results.",
            "citations": null
          },
          "7 Conclusion": {
            "content": "We firmly believe that ShapeNet will prove to be an immensely useful resource to several research communities in several ways:\n\n#### Data-driven research\n\nBy establishing ShapeNet as the first large-scale 3D shape dataset of its kind we can help to move computer graphics research toward a data-driven direction following recent developments in vision and NLP. Additionally, we can help to enable larger-scale quantitative analysis of proposed systems that can clarify the benefits of particular methodologies against a broader and more representative variety of 3D model data.\n\n#### Training resource\n\nBy providing a large-scale, richly annotated dataset we can also promote a broad class of recently resurgent machine learning and neural network methods for applications dealing with geometric data. Much like research in computer vision and natural language understanding, computational geometry and graphics stand to benefit immensely from these data-driven learning approaches.\n\n#### Benchmark dataset\n\nWe hope that ShapeNet will grow to become a canonical benchmark dataset for several evaluation tasks and challenges. In this way, we would like to engage the broader research community in helping us define and grow ShapeNet to be a pivotal dataset with long-lasting impact.",
            "citations": null
          }
        },
        "abstract": "We present ShapeNet: a richly-annotated, large-scale repository of shapes\nrepresented by 3D CAD models of objects. ShapeNet contains 3D models from a\nmultitude of semantic categories and organizes them under the WordNet taxonomy.\nIt is a collection of datasets providing many semantic annotations for each 3D\nmodel such as consistent rigid alignments, parts and bilateral symmetry planes,\nphysical sizes, keywords, as well as other planned annotations. Annotations are\nmade available through a public web-based interface to enable data\nvisualization of object attributes, promote data-driven geometric analysis, and\nprovide a large-scale quantitative benchmark for research in computer graphics\nand vision. At the time of this technical report, ShapeNet has indexed more\nthan 3,000,000 models, 220,000 models out of which are classified into 3,135\ncategories (WordNet synsets). In this report we describe the ShapeNet effort as\na whole, provide details for all currently available datasets, and summarize\nfuture plans."
      },
      "bib.bib12": {
        "id": "bib.bib12",
        "citation": "Fan et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Instantsplat: Unbounded sparse-view pose-free gaussian splatting in 40 seconds, 2024.",
        "venue": "",
        "pages": "",
        "url": "",
        "arxiv_id": "2403.20309",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Novel-view synthesis (NVS) has been a long standing goal in computer vision, involving rendering observations from unseen viewpoints of a scene based on a specific set of input images. Capturing viewpoints in a “casual” manner, especially with a limited number of shots (a.k.a. sparse-view) using a smartphone in an uncontrolled environment, is pivotal for scaling up 3D content creation, digital twin construction, and augmented reality applications.\n\nAlthough recent advancements \\[ [11]), [20]), [38]), [30])\\] have shown notable progress in sparse-view synthesis (SVS), a detailed analysis uncovers a significant challenge yet to be solved: The sparse input data collected does not sufficiently cover the scene, preventing Structure from Motion (SfM) pipelines like COLMAP \\[ [24])\\] from estimating accurate camera parameters.\nPrevious research in SVS \\[ [11]), [20])\\] typically assumes precise camera poses even in sparse-view scenarios by leveraging all dense views for pre-computation, an assumption that is rarely valid. On the other hand, another line of research explores pose-free settings using techniques such as Neural Radiance Field (NeRF) or 3D Gaussian Splatting (3D-GS), exemplified by Nope-NeRF \\[ [5])\\] and CF-3DGS \\[ [10])\\]. These approaches presume dense data coverage (often from video sequences), an assumption that may not be viable in “casual” scenarios. Additionally, all previous methods assume known camera intrinsics prior to the reconstruction stage, adding an extra layer of complexity in real-world applications where such information may not be readily available.\n\nIn this paper, we introduce a holistic solution to unconstrained sparse-view synthesis that obviates the need for pre-computed camera intrinsics and extrinsics. We present InstantSplat, a framework that unifies the explicit 3D Gaussian representation with pose priors obtained from an end-to-end dense stereo model—DUSt3R \\[ [31])\\]. DUEs3R facilitates the acquisition of initial scene geometry from predicted and globally aligned point maps of sparse views and enables efficient camera information and pose retrieval.\nFollowing this, 3D Gaussians are established atop the globally aligned yet coarse geometry, promoting the concurrent optimization of 3D Gaussian attributes and camera parameters. By imposing additional constraints on camera parameters and merely adjusting Gaussian attributes—eschewing complex adaptive density control—the reconstruction process for large-scale scenes can be completed in under _one minute_ on a modern GPU (Nvidia A100).\nOur experiments are conducted on two large-scale outdoor datasets: Tanks & Temples \\[ [14])\\] and MVImgNet \\[ [40])\\], featuring sampled sparse views. Our evaluations, focusing on view synthesis quality and camera pose accuracy, demonstrate that our method remarkably surpasses previous pose-free methods. Notably, InstantSplat increases the SSIM from 0.68 to 0.89, a 32% improvement, and reduces the ATE from 0.055 to 0.011, while significantly accelerating the optimization (from ∼similar-to\\\\sim2 hours to approximately 1 minute) than Nope-NeRF \\[ [5])\\].",
            "citations": null
          },
          "2 Related Works": {
            "content": "#### 3D Representations for NVS.\n\nNovel view synthesis aims to generate unseen views of an object or scene from a given set of images \\[ [1]), [18])\\]. Neural Radiance Fields (NeRF)\\[ [19])\\], one of the most prominent methods in recent years, employs Multilayer Perceptrons (MLPs) to represent 3D scenes, taking the directions and positions of 3D points as input and employing volume rendering for image synthesis. Despite its popularity, NeRF faces challenges in terms of speed during both training and inference phases. Subsequent enhancements primarily focus on either enhancing quality\\[ [2]), [3]), [4])\\] or improving efficiency \\[ [21]), [25]), [27]), [26])\\], with few achieving both.\nRecent advancements in unstructured radiance fields\\[ [7]), [13]), [37])\\] introduce a set of primitives to represent scenes. Notably, 3D Gaussian Splatting\\[ [13])\\] uses anisotropic 3D Gaussians \\[ [43])\\] to depict radiance fields, coupled with differentiable splatting for rendering. This method has shown considerable success in rapidly reconstructing complex real-world scenes with high quality, particularly excelling in capturing high-frequency details.\n\n#### Unconstraint Novel View Synthesis.\n\nNeural radiance fields (NeRFs) or 3D Gaussian Splatting traditionally require over a hundred images as input and utilize preprocessing software, such as COLMAP \\[ [24])\\], to compute camera intrinsics and extrinsics. The dense coverage of the capture images is essential for reconstructing the details of a 3D scene but significantly limits practical applications. To address the challenge of the requisite number of views, various studies have introduced different regularization techniques to optimize the radiance fields. For instance, Depth-NeRF \\[ [9])\\] employs additional depth supervision to enhance rendering quality. RegNeRF \\[ [20])\\] introduces a depth smoothness loss for geometric regularization, aiding in stabilizing training. DietNeRF \\[ [11])\\] and SinNeRF \\[ [36])\\] leverages supervision in the CLIP/DINO-ViT embedding space \\[ [23]), [6])\\] to constrain the rendering of unseen views. PixelNeRF \\[ [39])\\] utilizes a convolutional encoder to gather context information, enabling the prediction of 3D representations from sparse inputs. More recent efforts, like FreeNeRF \\[ [38])\\], introduce a dynamic frequency control module for few-shot NeRF, while SparseNeRF \\[ [30])\\] presents a novel spatial continuity loss that leverages monocular depth estimators to enhance spatial coherence. Concurrently, ReconFusion \\[ [34])\\], FSGS \\[ [42])\\], and SparseGS \\[ [35])\\] employ monocular depth estimators or diffusion models with additional synthesized views for optimizing 3D representations. However, these methods require known ground-truth camera poses, a challenging prerequisite as the commonly used Structure-from-Motion (SfM) algorithms often fail with sparse inputs due to insufficient image correspondences. Another line of research focuses on pose-independent 3D optimization. NeRFmm \\[ [33])\\] simultaneously optimizes camera intrinsics, extrinsics, and NeRF training. BARF \\[ [16])\\] introduces a coarse-to-fine strategy for encoding camera poses and joint NeRF optimization. SCNeRF \\[ [12])\\] adds camera distortion parameterization and employs geometric loss for ray regularization. Similarly, GARF \\[ [12])\\] demonstrates that Gaussian-MLPs facilitate more straightforward and accurate joint optimization of pose and scene. SPARF \\[ [28])\\] adds Gaussian noise to simulate noisy camera poses. Recent works, such as Nope-NeRF \\[ [5])\\], Lu-NeRF \\[ [8])\\], LocalRF \\[ [17])\\] and CF-3DGS \\[ [10])\\], leverage depth information to constrain NeRF or 3DGS optimization, yet these pose-independent approaches generally presume the input are  dense video sequences with known camera intrinsics, which are not always viable in practical cases.\n\nConsidering the aforementioned factors, particularly in the context of sparse-view conditions, it becomes imperative for research to progress toward situations where camera poses and intrinsics are unknown. Commonly, under such sparse conditions, the COLMAP software tends to be unreliable to produce camera poses and register all the input images. This necessitates a different approach: optimizing a 3D representation with sparse input views where both camera poses and intrinsics are unknown, compelling a paradigm shift in research to address these uncertainties.\n\n#### Effective Priors for View Synthesis.\n\nCurrent methodologies often depend on offline software (COLMAP) to precompute camera poses, which also yields a sparse point cloud as a byproduct. Depth-NeRF \\[ [9])\\] and 3D-GS \\[ [13])\\] advocate for leveraging this point cloud as a form of effective supervision and as initial conditions for optimization. To address the lack of camera poses or dense camera views, the integration of monocular depth priors is extensively employed in 3D optimization efforts \\[ [5]), [10]), [30]), [42]), [35])\\]. Additionally, image matching techniques have been investigated to identify additional cross-view pixel correspondences, facilitating the training process \\[ [28]), [15])\\].\n\nWhile these methods are beneficial, the approach of pre-computing camera extrinsics from densely sampled viewpoints and employing near-perfect camera poses for initialization is not always viable in practical sparse-view scenarios. In response, we introduce a unified framework that incorporates explicit point-based representations alongside the cutting-edge end-to-end dense stereo network, DUSt3R \\[ [31])\\]. This approach eliminates the need for sparse-view camera pose estimation and the presumption that camera poses are unknown beforehand. By initializing the scene geometry through inferences made by the stereo model, —which is markedly faster than COLMAP—we can deduce camera poses and intrinsics from the established point cloud, thereby facilitating the training of 3D-GS.",
            "citations": null
          },
          "3 Preliminary": {
            "content": "![Refer to caption]Figure 2: Overall Framework of InstantSplat. Starting with sparse, unposed images, the Coarse Geometric Initialization (left) rapidly predicts global aligned point clouds and initializes poses (20.6 seconds). Subsequently, the Fast 3D-Gaussian Optimization (right) leverages this robust initialization to conduct streamlined optimizations of 3D Gaussians and camera parameters (16.67 seconds).\n\n### 3.1 3D Gaussian Splatting\n\n3D Gaussian Splatting (3D-GS) \\[ [13])\\] is an explicit 3D scene representation utilizing a set of 3D Gaussians to model the scene. A 3D Gaussian is parameterized by a mean vector 𝒙∈3\\\\boldsymbol{x}\\\\in{}^{3} and a covariance matrix Σ∈3×3\\\\Sigma\\\\in{}^{3\\\\times 3}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | G​(𝒑)=1(2​π)3/2​\\|Σ\\|1/2​e−12​(𝒑−𝒙)T​Σ−1​(𝒑−𝝁)𝐺𝒑1superscript2𝜋32superscriptΣ12superscript𝑒12superscript𝒑𝒙𝑇superscriptΣ1𝒑𝝁G(\\\\boldsymbol{p})=\\\\frac{1}{\\\\left(2\\\\pi\\\\right)^{3/2}\\\\left\\|\\\\Sigma\\\\right\\|^{1/2}}e^{-\\\\frac{1}{2}{\\\\left(\\\\boldsymbol{p}-\\\\boldsymbol{x}\\\\right)}^{T}\\\\Sigma^{-1}\\\\left(\\\\boldsymbol{p}-\\\\boldsymbol{\\\\mu}\\\\right)} |  | (1) |\n\nTo represent the view-direction-dependent, spherical harmonic (SH) coefficients are attached to each Gaussian, and the color is computed via 𝒄​(𝒅)=∑i=1n𝒄i​ℬi​(𝒅)𝒄𝒅superscriptsubscript𝑖1𝑛subscript𝒄𝑖subscriptℬ𝑖𝒅\\\\boldsymbol{c}\\\\left(\\\\boldsymbol{d}\\\\right)=\\\\sum\\_{i=1}^{n}{\\\\boldsymbol{c}}\\_{i}\\\\mathcal{B}\\_{i}\\\\left(\\\\boldsymbol{d}\\\\right), where ℬisubscriptℬ𝑖\\\\mathcal{B}\\_{i} is the ithsuperscript𝑖thi^{\\\\rm{th}} SH basis. And the color is rendered via 𝒄=∑i=1n𝒄i​αi​∏j=1i−1(1−αj)𝒄superscriptsubscript𝑖1𝑛subscript𝒄𝑖subscript𝛼𝑖superscriptsubscriptproduct𝑗1𝑖11subscript𝛼𝑗\\\\boldsymbol{c}=\\\\sum\\_{i=1}^{n}\\\\boldsymbol{c}\\_{i}\\\\alpha\\_{i}\\\\prod\\_{j=1}^{i-1}(1-\\\\alpha\\_{j}),\n\nwhere 𝒄isubscript𝒄𝑖\\\\boldsymbol{c}\\_{i} is the color computed from the SH coefficients of the ithsuperscript𝑖thi^{\\\\rm{th}} Gaussian. αisubscript𝛼𝑖\\\\alpha\\_{i} is given by evaluating a 2D Gaussian with covariance multiplied by a learned per-Gaussian opacity.\nThe 2D covariance matrix is calculated by projecting the 3D covariance to the camera coordinates. The 3D covariance matrix is decomposed into a scaling matrix and a rotation matrix and are optimized as Gaussian attributes.\n\nIn summary, 3D-GS uses a set of 3D Gaussians {𝑺i\\|i=1,2,…,n}conditional-setsubscript𝑺𝑖𝑖12…𝑛\\\\left\\\\{\\\\boldsymbol{S}\\_{i}\\|i=1,2,...,n\\\\right\\\\} to represent and render a scene, where each 3D Gaussian 𝑺𝑺\\\\boldsymbol{S} is characterized by: position 𝒙∈3\\\\boldsymbol{x}\\\\in{}^{3}, a series of SH coefficients {𝒄i∈\\|3i=1,2,…,n}\\\\left\\\\{\\\\boldsymbol{c}\\_{i}\\\\in{}^{3}\\|i=1,2,...,n\\\\right\\\\}, opacity α∈𝛼absent\\\\alpha\\\\in\\\\real, rotation 𝒒∈ℍ𝒒ℍ\\\\boldsymbol{q}\\\\in\\\\mathbb{H} and scaling 𝒔∈3\\\\boldsymbol{s}\\\\in{}^{3}.\n\n### 3.2 End-to-end Dense Stereo Model: DUSt3R\n\nA traditional dense 3D reconstruction stereo pipeline is meticulously designed to transform stereo or multiple images into an intricate 3D model (e.g., depth map) of a scene. The process commences with the acquisition of input images, denoted as {(𝑰i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑰𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{I}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N}. Initially, Structure-from-Motion (SfM) techniques are employed to ascertain the camera extrinsics {𝑻i∈ℝ3×4}i=1Nsuperscriptsubscriptsubscript𝑻𝑖superscriptℝ34𝑖1𝑁\\\\{\\\\boldsymbol{T}\\_{i}\\\\in\\\\mathbb{R}^{3\\\\times 4}\\\\}\\_{i=1}^{N} and intrinsics {𝑲i∈ℝ3×3}i=1Nsuperscriptsubscriptsubscript𝑲𝑖superscriptℝ33𝑖1𝑁\\\\{\\\\boldsymbol{K}\\_{i}\\\\in\\\\mathbb{R}^{3\\\\times 3}\\\\}\\_{i=1}^{N}. Utilizing COLMAP, feature detection, and extraction are performed for each image, predicated on the assumption that the images exhibit good texture, consistent illumination, and significant visual overlap. Subsequently, feature matching and geometric verification are conducted to establish robust correspondences across multiple image pairs. The process of incremental reconstruction involves registering high-confidence images, utilizing triangulation and bundle adjustment to refine camera extrinsics and generate a sparse point cloud of the scene. Dense reconstruction, particularly through Multi-View Stereo (MVS), is then applied to extract more detailed scene geometry, resulting in pixel-level depth maps for further applications.\n\nHowever, segmenting the contemporary SfM and MVS pipeline into a series of isolated minimal problems may introduce noise and escalate the complexity and engineering effort required for the pipeline’s holistic functionality. The new DUSt3R model \\[ [31])\\] aims to integrate the SfM and MVS processes, estimating point maps {(𝑷i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑷𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{P}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N} and confidence maps {(𝑶i∈ℝH×W)}i=1Nsuperscriptsubscriptsubscript𝑶𝑖superscriptℝ𝐻𝑊𝑖1𝑁\\\\{(\\\\boldsymbol{O}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W})\\\\}\\_{i=1}^{N} directly from uncalibrated and unposed cameras ({(𝑰i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑰𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{I}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N}). This end-to-end approach posits that each sub-problem should synergize within a singular framework, where dense reconstruction benefits from the sparse scene generated for camera pose recovery, and vice versa, thus fostering a more efficient and coherent 3D reconstruction process.\nSpecifically, the training objective of DUSt3R is based on regression of the unprojected and normalized point maps of two input views. Here, the ground-truth pointmaps from the datasets are as 𝑷^1,1subscript^𝑷11\\\\hat{\\\\boldsymbol{P}}\\_{1,1} and 𝑷^2,1subscript^𝑷21\\\\hat{\\\\boldsymbol{P}}\\_{2,1}, obtained from along with two corresponding views {1,2}12\\\\{1,2\\\\} where the camera origin as view 1, on which the ground-truth is defined.\nIn this context, the subscript {2,1}21\\\\{2,1\\\\} in 𝑷^2,1subscript^𝑷21\\\\hat{\\\\boldsymbol{P}}\\_{2,1} signifies that the origin of the coordinate system for view 2 is anchored at view 1.\nThe regression loss for training DUSt3R is as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ=‖1zi⋅𝑷v,1−1zi^⋅𝑷^v,1‖.ℒnorm⋅1subscript𝑧𝑖subscript𝑷𝑣1⋅1^subscript𝑧𝑖subscript^𝑷𝑣1\\\\mathcal{L}=\\\\left\\\\\\|\\\\frac{1}{z\\_{i}}\\\\cdot\\\\boldsymbol{P}\\_{v,1}-\\\\frac{1}{\\\\hat{z\\_{i}}}\\\\cdot\\\\hat{\\\\boldsymbol{P}}\\_{v,1}\\\\right\\\\\\|.\\\\vspace{-1mm} |  | (2) |\n\nwhere view v∈{1,2}𝑣12v\\\\in\\\\{1,2\\\\}, 𝑷𝑷\\\\boldsymbol{P} and 𝑷^^𝑷\\\\hat{\\\\boldsymbol{P}} are the prediction and ground-truth, separately.\nTo handle the scale ambiguity between prediction and ground-truth, DUSt3R normalizes the predicted and ground-truth pointmaps by scaling factors zi=norm​(𝑷1,1,𝑷2,1)subscript𝑧𝑖normsubscript𝑷11subscript𝑷21z\\_{i}=\\\\text{norm}(\\\\boldsymbol{P}\\_{1,1},\\\\boldsymbol{P}\\_{2,1}) and z^i=norm​(𝑷^1,1,𝑷^2,1)subscript^𝑧𝑖normsubscriptbold-^𝑷11subscriptbold-^𝑷21\\\\hat{z}\\_{i}=\\\\text{norm}(\\\\boldsymbol{\\\\hat{P}}\\_{1,1},\\\\boldsymbol{\\\\hat{P}}\\_{2,1}), respectively, which simply represent the average distance, noted as symbol 𝑫𝑫\\\\boldsymbol{D} of all valid points to the origin:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | norm​(𝑷1,1,𝑷2,1)=1\\|𝑫1\\|+\\|𝑫2\\|​∑v∈{1,2}∑i∈𝑫v‖𝑷vi‖.normsubscript𝑷11subscript𝑷211subscript𝑫1subscript𝑫2subscript𝑣12subscript𝑖subscript𝑫𝑣normsuperscriptsubscript𝑷𝑣𝑖\\\\text{norm}(\\\\boldsymbol{P}\\_{1,1},\\\\boldsymbol{P}\\_{2,1})=\\\\frac{1}{\\|\\\\boldsymbol{D}\\_{1}\\|+\\|\\\\boldsymbol{D}\\_{2}\\|}\\\\sum\\_{v\\\\in\\\\{1,2\\\\}}\\\\,\\\\sum\\_{i\\\\in\\\\boldsymbol{D}\\_{v}}\\\\left\\\\\\|\\\\boldsymbol{P}\\_{v}^{i}\\\\right\\\\\\|.\\\\vspace{-2mm} |  | (3) |",
            "citations": null
          },
          "4 Method": {
            "content": "#### Overview\n\nIn this section, we introduce a new pipeline that incorporates DUSt3R as a 3D prior model, providing globally aligned initial scene geometry for 3D Gaussians. This allows for the subsequent calculation of camera poses and intrinsics from the dense point maps, which are then jointly optimized with all other 3D Gaussian attributes. The supervision signals are derived backward from the photometric discrepancies between the rendered images via splatting and the ground-truth images.\nAn illustrative overview of our method is depicted in Fig. [2]Figure 2 ‣ 3 Preliminary ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\").\n\n### 4.1 Coarse Geometric Initialization\n\n3D dense prior network, DUSt3R, accepts only two images as input and generates per-pixel pointmap and confidence maps as outputs. A very efficient post-processing optimization can be leveraged to solve the per-view pixel-to-3D mapping and the incremental relative poses, which we will detail later.\n\n#### Recovering Camera Intrinsics.\n\nWe can have the 1:1 mapping from the pixel lattice to pointmap where we can build the mapping from 2D to the camera coordinate system. We can first solve the simple optimization based on Weiszfeld algorithm \\[ [22])\\] to calculate per-camera focal:\n\n|     |     |     |\n| --- | --- | --- |\n|  | f∗=arg​minf​∑i=0W∑j=0H𝑶i,j​‖(i′,j′)−f​(𝑷i,j,0,𝑷i,j,1)𝑷i,j,2‖,superscript𝑓subscriptargmin𝑓superscriptsubscript𝑖0𝑊superscriptsubscript𝑗0𝐻superscript𝑶𝑖𝑗normsuperscript𝑖′superscript𝑗′𝑓superscript𝑷𝑖𝑗0superscript𝑷𝑖𝑗1superscript𝑷𝑖𝑗2f^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{f}\\\\sum\\_{i=0}^{W}\\\\sum\\_{j=0}^{H}\\\\boldsymbol{O}^{i,j}\\\\left\\\\\\|(i^{\\\\prime},j^{\\\\prime})-f\\\\frac{(\\\\boldsymbol{P}^{i,j,0},\\\\boldsymbol{P}^{i,j,1})}{\\\\boldsymbol{P}^{i,j,2}}\\\\right\\\\\\|, |  |\n\nwhere i′=i−W2superscript𝑖′𝑖𝑊2i^{\\\\prime}=i-\\\\frac{W}{2} and j′=j−H2superscript𝑗′𝑗𝐻2j^{\\\\prime}=j-\\\\frac{H}{2} denote centered pixel indices. Assuming a single-camera setup akin to COLMAP’s methodology, we average the focal length calculations to obtain a robust estimate: f¯=1N​∑i=1Nfi∗¯𝑓1𝑁superscriptsubscript𝑖1𝑁superscriptsubscript𝑓𝑖\\\\bar{f}=\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}f\\_{i}^{\\*}.\nThe resulting f¯¯𝑓\\\\bar{f} represents the computed focal length that is utilized in subsequent processes.\n\n#### Pair-wise to Globally Aligned Poses.\n\nDUSt3R only takes image pairs as inputs where post-processing is required to align the scale if more than two captures are within the scene. The underlying reason is that the predicted point map are at the normalized scales within its own scale, and such misalignment of each independent calculated relative poses will leads to the scale variance thus, resulting in inaccurate camera poses.\nSimilar to DUSt3R we first construct a complete connectivity graph 𝒢​(𝒱,ℰ)𝒢𝒱ℰ\\\\mathcal{G}(\\\\mathcal{V},\\\\mathcal{E}) of all the N input views, where the vertices 𝒱𝒱\\\\mathcal{V} and each edge e=(n,m)∈ℰ𝑒𝑛𝑚ℰe=(n,m)\\\\in\\\\mathcal{E} indicate a shared visual content between images Insubscript𝐼𝑛I\\_{n} and Imsubscript𝐼𝑚I\\_{m}. To convert the initially predicted point map {(𝑷i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑷𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{P}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N} to be globally aligned one {(𝑷~i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscriptbold-~𝑷𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{\\\\tilde{P}}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N}, we update the point maps, transformation matrix, and a scale factor:\nFor the complete graph, any image pair e=(n,m)∈ℰ𝑒𝑛𝑚ℰe=(n,m)\\\\in\\\\mathcal{E}, the point maps 𝑷n,nsubscript𝑷𝑛𝑛\\\\boldsymbol{P}\\_{n,n},𝑷m,nsubscript𝑷𝑚𝑛\\\\boldsymbol{P}\\_{m,n} and confidence maps 𝑶n,nsubscript𝑶𝑛𝑛\\\\boldsymbol{O}\\_{n,n},𝑶m,nsubscript𝑶𝑚𝑛\\\\boldsymbol{O}\\_{m,n}. For clarity, let us define 𝑷n,e:=𝑷n,nassignsubscript𝑷𝑛𝑒subscript𝑷𝑛𝑛\\\\boldsymbol{P}\\_{n,e}:=\\\\boldsymbol{P}\\_{n,n}, and 𝑷m,e:=𝑷m,nassignsubscript𝑷𝑚𝑒subscript𝑷𝑚𝑛\\\\boldsymbol{P}\\_{m,e}:=\\\\boldsymbol{P}\\_{m,n}, 𝑶n,e:=𝑶n,nassignsubscript𝑶𝑛𝑒subscript𝑶𝑛𝑛\\\\boldsymbol{O}\\_{n,e}:=\\\\boldsymbol{O}\\_{n,n}, and 𝑶m,e:=𝑶m,nassignsubscript𝑶𝑚𝑒subscript𝑶𝑚𝑛\\\\boldsymbol{O}\\_{m,e}:=\\\\boldsymbol{O}\\_{m,n}.\n\nThe optimization for the transformation matrix of edge e𝑒e (𝑻esubscript𝑻𝑒\\\\boldsymbol{T}\\_{e}), scaling factor σ𝜎\\\\sigma and point map 𝑷~~𝑷\\\\tilde{\\\\boldsymbol{P}} are via:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝑷~∗=arg​min𝑷~,𝑻,σ​∑e∈ℰ∑v∈e∑i=1H​W𝑶v,ei​‖𝑷~vi−σe​𝑻e​𝑷v,ei‖.superscript~𝑷subscriptargmin~𝑷𝑻𝜎subscript𝑒ℰsubscript𝑣𝑒superscriptsubscript𝑖1𝐻𝑊superscriptsubscript𝑶𝑣𝑒𝑖normsuperscriptsubscript~𝑷𝑣𝑖subscript𝜎𝑒subscript𝑻𝑒superscriptsubscript𝑷𝑣𝑒𝑖\\\\tilde{\\\\boldsymbol{P}}^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{\\\\tilde{\\\\boldsymbol{P}},\\\\boldsymbol{T},\\\\sigma}\\\\sum\\_{e\\\\in\\\\mathcal{E}}\\\\sum\\_{v\\\\in e}\\\\sum\\_{i=1}^{HW}\\\\boldsymbol{O}\\_{v,e}^{i}\\\\left\\\\\\|\\\\tilde{\\\\boldsymbol{P}}\\_{v}^{i}-\\\\sigma\\_{e}\\\\boldsymbol{T}\\_{e}\\\\boldsymbol{P}\\_{v,e}^{i}\\\\right\\\\\\|. |  | (4) |\n\nHere, we slightly abuse notation and write v∈e𝑣𝑒v\\\\in e for v∈{n,m}𝑣𝑛𝑚v\\\\in\\\\{n,m\\\\} if e=(n,m)𝑒𝑛𝑚e=(n,m).\nThe idea is that, for a given pair e𝑒e, the same rigid transformation 𝑻esubscript𝑻𝑒\\\\boldsymbol{T}\\_{e} should align both pointmaps 𝑷n,esubscript𝑷𝑛𝑒\\\\boldsymbol{P}\\_{n,e} and 𝑷m,esubscript𝑷𝑚𝑒\\\\boldsymbol{P}\\_{m,e} with the world-coordinate pointmaps 𝑷~n,esubscript~𝑷𝑛𝑒\\\\tilde{\\\\boldsymbol{P}}\\_{n,e} and 𝑷~m,esubscript~𝑷𝑚𝑒\\\\tilde{\\\\boldsymbol{P}}\\_{m,e},\nsince 𝑷n,esubscript𝑷𝑛𝑒\\\\boldsymbol{P}\\_{n,e} and 𝑷m,esubscript𝑷𝑚𝑒\\\\boldsymbol{P}\\_{m,e} are by definition both expressed in the same coordinate frame.\nTo avoid the trivial optimum where σe=0,∀e∈ℰformulae-sequencesubscript𝜎𝑒0for-all𝑒ℰ\\\\sigma\\_{e}=0,\\\\,\\\\forall e\\\\in\\\\mathcal{E}, we also enforce that ∏eσe=1subscriptproduct𝑒subscript𝜎𝑒1\\\\prod\\_{e}\\\\sigma\\_{e}=1.\nThe benefits of the post-processing to yield a globally aligned point cloud lies is its efficiency where inferencing per-view point and confidence maps can be real-time on a modern GPU, and the post-processing for a few images requires only seconds.\n\n![Refer to caption]Figure 3: Visual Comparisons. We conducted a comparative analysis between InstantSplat and various baseline methodologies. It was noted that InstantSplat adeptly preserves a majority of the scene details, avoiding the artifacts typically induced by inaccurately estimated camera poses, a common issue in CF-3DGS \\[ [10])\\]. Moreover, our streamlined framework negates the necessity for strong regularization during training, unlike Nope-NeRF, thereby yielding sharper image details. Additionally, NeRFmm is prone to introducing artifacts during viewpoint transitions, attributable to imprecise joint optimization processes.\n\n### 4.2 Fast 3D-Gaussian Optimization\n\n#### 3D Gaussian Initializations.\n\nThe primary objective in 3D-GS optimization, as discussed in \\[ [13])\\], is to adeptly refine the set of 3D Gaussians to accurately represent the scene. Traditional initialization with sparse point clouds from Structure from Motion (SfM) provides basic color and positional details. Yet, the inherent sparsity of SfM data demands extensive optimization time to densify, split and refine Gaussians for adequate 3D scene modeling.\n\nIn contrast, we advocate for utilizing a globally aligned point map as preliminary scene geometry, replacing the sparse SfM point set for 3D-GS initialization \\[ [13])\\]. This approach offers several advantages over sparse SfM point cloud initialization: 1) It addresses the challenging nature of Gaussian parameter optimization, aiming to reconstruct the complete 3D scene and render from any viewpoint, particularly when the training views are significantly below the Nyquist sampling rate. 2) To maintain the optimized 3D Gaussian’s stability and quality, the original authors \\[ [13])\\] implemented a complex set of rules to guide the generation of new Gaussians, division of incorrectly optimized Gaussians, and periodic opacity adjustments to eliminate residual Gaussians.\nConsidering these aspects, we leverage a 3D prior model to supply a robust scene structure (a.k.a. globally aligned point maps) with ample primitives to encapsulate the scene’s surfaces. This approach minimizes the need for manual optimization rules (adaptive density control in 3DGS \\[ [13])\\]), and thus requiring fewer steps. Specifically, we execute 1k iterations optimization on the initialized 3D Gaussians, omitting the densification, splitting, and opacity reset processes, thereby streamlining and simplifying the optimization procedure.\n\n#### Jointly Optimizing Poses and Attributes.\n\nWe observe that aligning camera extrinsics predominantly addresses the issue of inconsistent scale when transitioning from two-view to multi-view scenarios. However, ambiguities arise due to inaccuracies in predicted points or confidence maps, which may be attributed to varying illumination across different views or minor motion blur from handheld capture devices. Consequently, the alignment accuracy is compromised.\nTo mitigate this, we propose a simultaneous optimization of camera extrinsics and a 3D model using a sparse set of training views. We enable the camera parameters to be adjustable alongside the Gaussian attributes. Additionally, we introduce a constraint to ensure that the optimized poses do not deviate excessively from their initial positions. This method aims to refine pose accuracy while maintaining a close adherence to the original extrinsic parameters, thereby enhancing the overall alignment precision in our 3D reconstruction process.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝑺∗,𝑻∗=arg​min𝑺,𝑻​∑v∈N∑i=1H​Wsuperscript𝑺superscript𝑻subscriptargmin𝑺𝑻subscript𝑣𝑁superscriptsubscript𝑖1𝐻𝑊\\\\displaystyle\\\\boldsymbol{S}^{\\*},\\\\boldsymbol{T}^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{\\\\boldsymbol{S},\\\\boldsymbol{T}}\\\\sum\\_{v\\\\in N}\\\\sum\\_{i=1}^{HW} | ‖𝑪~vi​(𝑺,𝑻)−𝑪vi​(𝑺,𝑻)‖normsuperscriptsubscript~𝑪𝑣𝑖𝑺𝑻superscriptsubscript𝑪𝑣𝑖𝑺𝑻\\\\displaystyle\\\\left\\\\\\|\\\\tilde{\\\\boldsymbol{C}}\\_{v}^{i}(\\\\boldsymbol{S},\\\\boldsymbol{T})-\\\\boldsymbol{C}\\_{v}^{i}(\\\\boldsymbol{S},\\\\boldsymbol{T})\\\\right\\\\\\| |  |\n|  | +\\\\displaystyle+ | λ⋅‖𝑻−𝑻​𝟎‖.⋅𝜆norm𝑻𝑻0\\\\displaystyle\\\\lambda\\\\cdot\\\\left\\\\\\|\\\\boldsymbol{T}-\\\\boldsymbol{T0}\\\\right\\\\\\|.\\\\vspace{-2mm} |  |\n\nIn the given context, the 𝑺𝑺\\\\boldsymbol{S} represents the set of 3D Gaussians, 𝑻𝑻\\\\boldsymbol{T} denotes the camera extrinsics for a specific view, 𝑻​𝟎𝑻0\\\\boldsymbol{T0} signifies the initial extrinsics obtained from global alignment, 𝑪𝑪\\\\boldsymbol{C} is the rendering function, and the term λ𝜆\\\\lambda is introduced to strike a balance between photometric loss and the steps involved in camera optimization. This formulation is pivotal in ensuring that the optimization process is finely tuned to achieve an optimal balance between fidelity to the observed data and adherence to the initial camera poses, facilitating a robust and accurate 3D representation for NVS.\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 0.89 | 28.94 | 0.12 | 0.57 | 18.29 | 0.34 | 0.64 | 22.48 | 0.44 | 0.51 | 18.28 | 0.53 |\n| Family | 0.91 | 28.69 | 0.10 | 0.58 | 17.06 | 0.32 | 0.76 | 24.82 | 0.34 | 0.49 | 17.74 | 0.53 |\n| Francis | 0.90 | 31.02 | 0.16 | 0.63 | 20.26 | 0.37 | 0.65 | 22.26 | 0.48 | 0.61 | 20.46 | 0.48 |\n| Horse | 0.90 | 28.25 | 0.10 | 0.62 | 17.84 | 0.32 | 0.69 | 21.68 | 0.39 | 0.59 | 18.11 | 0.45 |\n| Ignatius | 0.83 | 26.00 | 0.16 | 0.57 | 18.29 | 0.34 | 0.65 | 24.36 | 0.41 | 0.44 | 19.14 | 0.50 |\n| Avg. | 0.89 | 28.58 | 0.13 | 0.59 | 18.34 | 0.34 | 0.68 | 23.12 | 0.41 | 0.53 | 18.75 | 0.50 |\n\nTable 1: Quantitative Evaluations on the Rendered Tanks and Temples Datasets. Our method renders significantly clearer details (by LPIPS) compared to other baseline methods, devoid of artifacts typically associated with noisy pose estimation (e.g., CF-3DGS \\[ [10])\\], NeRFmm \\[ [33])\\]). Furthermore, Nope-NeRF’s regularization approach during training, which involves multiple constraints, restricts the MLPs’ ability to accurately reconstruct scene details. The best results are highlighted in bold.\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 0.189 | 0.093 | 0.002 | 5.391 | 2.459 | 0.059 | 9.051 | 7.429 | 0.069 | 12.410 | 8.661 | 0.103 |\n| Family | 0.414 | 0.041 | 0.003 | 5.803 | 1.945 | 0.064 | 3.663 | 5.889 | 0.007 | 18.178 | 3.277 | 0.211 |\n| Francis | 0.468 | 0.211 | 0.004 | 6.889 | 3.989 | 0.094 | 10.887 | 4.546 | 0.147 | 10.290 | 5.034 | 0.222 |\n| Horse | 0.552 | 0.037 | 0.037 | 10.300 | 2.307 | 0.125 | 16.646 | 4.102 | 0.039 | 16.720 | 3.258 | 0.032 |\n| Ignatius | 0.735 | 0.168 | 0.011 | 0.602 | 0.174 | 0.006 | 11.150 | 4.550 | 0.011 | 17.531 | 3.275 | 0.056 |\n| Avg. | 0.472 | 0.110 | 0.011 | 5.797 | 2.175 | 0.070 | 10.279 | 5.303 | 0.055 | 15.026 | 4.701 | 0.125 |\n\nTable 2: Quantitative Evaluation of Pose Accuracy on the Tanks and Temples Datasets. We employ poses derived from COLMAP on full views as the ground-truth reference. The rotational Relative Pose Error (RPEr) is expressed in degrees, the translational Relative Pose Error (RPEt) is scaled by 0.01, and the Absolute Trajectory Error (ATE) is quantified using the ground truth scale. The best results are highlighted in bold.\n\n### 4.3 Aligning Camera Poses on Test Views\n\nIn contrast to the conventional approach where exact camera poses for test views are known and typically estimated alongside training views within the same coordinate system (as seen in 3D-GS \\[ [13])\\] and NeRF \\[ [19])\\]), our scenario involves test views with either unknown or noisy poses. Employing camera poses calculated from DUSt3R often results in minor misalignments between predicted and ground-truth images. This necessitates the alignment of camera poses for test views before rendering.\n\nDrawing inspiration from NeRFmm \\[ [33])\\], we maintain the 3DGS model trained on training views, in a frozen state while optimizing the camera poses for test views. This optimization process focuses on minimizing the photometric discrepancies between the synthesized images and the actual test views, aiming to achieve a more precise alignment and rendering of the test views for equitable comparisons.",
            "citations": null
          },
          "5 Experiments": {
            "content": "### 5.1 Experimental Setup\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Car | 0.92 | 28.91 | 0.11 | 0.59 | 17.85 | 0.36 | 0.67 | 20.63 | 0.44 | 0.41 | 14.68 | 0.68 |\n| Suv | 0.89 | 28.34 | 0.12 | 0.60 | 17.78 | 0.34 | 0.66 | 21.06 | 0.48 | 0.42 | 14.38 | 0.60 |\n| Bicycle | 0.75 | 23.17 | 0.23 | 0.23 | 14.80 | 0.48 | 0.29 | 16.81 | 0.61 | 0.13 | 12.04 | 0.71 |\n| Bench | 0.75 | 23.75 | 0.23 | 0.20 | 15.90 | 0.47 | 0.31 | 18.28 | 0.58 | 0.17 | 13.90 | 0.67 |\n| Chair | 0.84 | 26.54 | 0.17 | 0.41 | 18.10 | 0.51 | 0.46 | 20.42 | 0.56 | 0.27 | 14.53 | 0.67 |\n| Ladder | 0.58 | 20.20 | 0.29 | 0.25 | 15.93 | 0.48 | 0.30 | 17.82 | 0.64 | 0.22 | 15.10 | 0.66 |\n| Table | 0.82 | 25.43 | 0.17 | 0.36 | 16.05 | 0.52 | 0.45 | 18.93 | 0.56 | 0.27 | 12.55 | 0.67 |\n| Avg. | 0.79 | 25.19 | 0.19 | 0.38 | 16.63 | 0.45 | 0.45 | 19.14 | 0.55 | 0.27 | 13.88 | 0.66 |\n\nTable 3: Quantitative Evaluations on the Rendered MVImgNet Datasets. InstantSplat outperforms baselines in all evaluation metrics.\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Car | 0.145 | 0.044 | 0.001 | 5.734 | 4.524 | 0.102 | 6.986 | 9.683 | 0.090 | 13.706 | 6.067 | 0.144 |\n| Suv | 0.163 | 0.141 | 0.002 | 4.248 | 3.000 | 0.031 | 13.406 | 10.370 | 0.190 | 16.899 | 7.490 | 0.164 |\n| Bicycle | 0.407 | 0.375 | 0.006 | 9.310 | 9.525 | 0.149 | 7.266 | 15.662 | 0.116 | 14.363 | 13.506 | 0.066 |\n| Bench | 0.271 | 0.244 | 0.004 | 7.313 | 9.618 | 0.069 | 14.345 | 13.699 | 0.179 | 13.274 | 12.429 | 0.071 |\n| Chair | 0.386 | 0.330 | 0.005 | 15.430 | 15.276 | 0.164 | 17.447 | 17.334 | 0.136 | 13.449 | 16.263 | 0.109 |\n| Ladder | 0.634 | 0.603 | 0.008 | 11.280 | 7.883 | 0.107 | 18.610 | 10.557 | 0.203 | 15.590 | 7.770 | 0.207 |\n| Table | 0.210 | 0.214 | 0.003 | 17.521 | 13.757 | 0.117 | 9.447 | 18.595 | 0.083 | 17.820 | 15.443 | 0.163 |\n| Avg. | 0.317 | 0.279 | 0.004 | 10.119 | 9.083 | 0.106 | 12.501 | 13.700 | 0.142 | 15.014 | 11.281 | 0.132 |\n\nTable 4: Quantitative Evaluation of Pose Accuracy on the MVImgNet Datasets. COLMAP on full views as the ground-truth reference. The rotational Relative Pose Error (RPEr) is expressed in degrees, the translational Relative Pose Error (RPEt) is scaled by 0.01, and the Absolute Trajectory Error (ATE) is quantified using the ground truth scale. InstantSplat performs the best in pose estimation.![Refer to caption]Figure 4: Visual Comparisons on the MVImgNet Datasets (Part 1). We present the rendering results from NeRFmm, Nope-NeRF, CF-3DGS, and ours. The images are arranged from top to bottom, corresponding to the scenes labeled as Car, SUV, Bench, and Bicycle, respectively.![Refer to caption]Figure 5: Additional Visual Comparisons on the MVImgNet Datasets (Part 2). We present the rendering results from NeRFmm, Nope-NeRF, CF-3DGS, and ours. The images are arranged from top to bottom, corresponding to the scenes labeled as Chair, Ladder, and Table, respectively.\n\n#### Datasets.\n\nWe conducted comprehensive experiments on real-world datasets featuring large-scale scenes with expansive backgrounds. Specifically, we utilized five scenes from the Tanks and Temples datasets \\[ [14])\\], namely Barn, Family, Francis, Horse, and Ignatius. Additionally, we extracted six outdoor scenes from the MVImgNet datasets \\[ [40])\\], which include Car, Suv, Bicycle, Chair, Ladder, Bench, and Table.\nIn line with the FSGS protocol \\[ [42])\\], we established a sparse-view setting by uniformly selecting 12 views for training and 12 views for evaluation on the Tanks and Temples datasets, with the original number of views ranging from 120 to 200, utilizing approximately 1/10 of the views for training. In a similar vein, we extracted 12 views for both training and evaluation on the MVImgNet datasets.\nThe camera intrinsics and extrinsics were initially unknown; however, we estimated them and conducted evaluations of pose accuracy on all training samples post Umeyama alignment \\[ [29])\\].\n\n#### Metrics.\n\nOur evaluation encompasses two primary tasks: novel view synthesis and camera pose estimation. In the context of camera pose estimation, we present the errors associated with camera rotation and translation, specifically focusing on the Absolute Trajectory Error (ATE) and the Relative Pose Error (RPE), as delineated in \\[ [5])\\]. For the task of novel view synthesis, we adopt standard evaluation metrics, namely the Peak Signal-to-Noise Ratio (PSNR), the Structural Similarity Index Measure (SSIM)\\[ [32])\\], and the Learned Perceptual Image Patch Similarity (LPIPS)\\[ [41])\\].\n\n#### Baselines.\n\nOur evaluation primarily focuses on comparing against pose-free methods. These include Nope-NeRF \\[ [5])\\], which utilizes monocular depth maps and ground-truth camera intrinsics to optimize a neural radiance field. Another method is CF-3DGS \\[ [10])\\], which initializes 3D Gaussians from a single view and progressively incorporates all training views, supported by monocular depth maps and ground-truth camera intrinsics. Additionally, we compare with NeRFmm \\[ [33])\\], where the joint optimization of NeRF and camera parameters is performed to achieve a plausible solution.\n\n#### Implementation Details.\n\nOur implementation leverages the PyTorch framework, different from 3DGS \\[ [13])\\] where we only optimize the 3D Gaussian attributes without implementing adaptive density control. The optimization process is limited to 1,000 iterations, achieving satisfactory results in both rendering quality and pose estimation accuracy. For our model configuration, we employ the DUSt3R model \\[ [31])\\], trained at a resolution of 512, with a ViT Large encoder and a ViT Base decoder. We set λ𝜆\\\\lambda as 0.1 during our experiments to constrain the camera poses move to far from the start point. We perform experiments on one Nvidia A100 GPU for fair comparisons.\n\n### 5.2 Experimental Results\n\n![Refer to caption]Figure 6: Visual Comparisons on MVImgNet. Rendered images from the “Table” scene are presented alongside visualizations of the learned camera trajectories. Our results exhibit sharper details and predominantly aligned pose estimations.\n\n#### Quantitative and Qualitative Results\n\nWe assessed the performance of several methods in novel view synthesis and pose estimation on Tanks and Temples datasets, summarizing their quantitative metrics in Tab. [1]Table 1 ‣ Jointly Optimizing Poses and Attributes. ‣ 4.2 Fast 3D-Gaussian Optimization ‣ 4 Method ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\") and Tab. [2]Table 2 ‣ Jointly Optimizing Poses and Attributes. ‣ 4.2 Fast 3D-Gaussian Optimization ‣ 4 Method ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"). The methods include the Gaussian Splatting-based CF-3DGS \\[ [10])\\] and NeRF-based methods like Nope-NeRF \\[ [5])\\] and NeRFmm \\[ [33])\\]. In the Tanks and Temples dataset, Nope-NeRF utilizes MLPs and achieves notable accuracy in rendering quality and pose estimation. However, it tends to produce overly blurred renderings due to the heavy constraints from its geometric field and demonstrates slow training (∼similar-to\\\\sim2 hours) and inference speeds (∼similar-to\\\\sim30 seconds for one frame), which may hinder its practical application.\nCF-3DGS, employing Gaussian Splatting, delivers good rendering quality but is prone to artifacts when changing viewpoints, a consequence of the complex optimization process with errorneous pose predictions, as evidenced in Fig. [3]Figure 3 ‣ Pair-wise to Globally Aligned Poses. ‣ 4.1 Coarse Geometric Initialization ‣ 4 Method ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"). CF-3DGS requires more complex optimization, incorporating both local and global optimization stages, along with adaptive density control and opacity reset policies.\nBoth Nope-NeRF and CF-3DGS presuppose known focal lengths, which restricts their broader utility. NeRFmm, aiming to optimize camera parameters and the radiance field concurrently, tends to yield suboptimal results due to the challenges of naive joint optimization.\nWhile the baselines demonstrate reasonable performance in sparse-view rendering, the pose metrics reveal artifacts attributable to sparse observations and inaccurately estimated poses. Similar observations can be seen in the experiments conducted on MVImgNet datasets, as is shown in Fig. [4]Figure 4 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), Fig. [5]Figure 5 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), Tab. [3]Table 3 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), Tab. [4]Table 4 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\") and Fig. [6]Figure 6 ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\").\nThis is especially problematic for CF-3DGS and Nope-NeRF, which require dense video sequences, akin to SLAM, and thus struggle with sparse-view scenarios.\nConversely, our method, initializes with a coarse scene geometry and globally aligned camera parameters, employs a rapid 3D Gaussian optimization process, offering a more streamlined and efficient solution. Our holistic pipeline requires less than 1 minute for initialization and optimization, benefiting from the integration of end-to-end dense stereo priors and the streamlined 3D Gaussian optimization process.\n\n| Scenes | No Averaging Focal | Full Model (InstantSplat) |\n| --- | --- | --- |\n| PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 26.38 | 0.8356 | 0.495 | 0.167 | 28.94 | 0.8905 | 0.189 | 0.093 |\n| Family | 28.12 | 0.8998 | 0.538 | 0.051 | 28.69 | 0.9076 | 0.414 | 0.041 |\n| Francis | 29.99 | 0.8864 | 0.778 | 0.213 | 31.02 | 0.9016 | 0.468 | 0.211 |\n| Horse | 27.15 | 0.8811 | 2.516 | 0.061 | 28.25 | 0.9045 | 0.552 | 0.037 |\n| Ignatius | 24.24 | 0.7729 | 0.939 | 0.182 | 26.00 | 0.8305 | 0.735 | 0.168 |\n| Avg. | 27.18 | 0.8552 | 1.053 | 0.135 | 28.58 | 0.8900 | 0.472 | 0.110 |\n\nTable 5: Ablation Study on the Impact of Averaging Focal Length. Utilizing the averaged focal length for subsequent global alignment and 3D Gaussian joint optimization enhances both the rendering quality and the accuracy of the final pose estimation.\n\n| Scenes | No Joint Optimization | Full Model (InstantSplat) |\n| --- | --- | --- |\n| PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 26.56 | 0.8530 | 0.382 | 0.231 | 28.94 | 0.8905 | 0.189 | 0.093 |\n| Family | 27.81 | 0.9017 | 0.451 | 0.061 | 28.69 | 0.9076 | 0.414 | 0.041 |\n| Francis | 29.74 | 0.8952 | 0.405 | 0.224 | 31.02 | 0.9016 | 0.468 | 0.211 |\n| Horse | 26.59 | 0.8827 | 1.127 | 0.106 | 28.25 | 0.9045 | 0.552 | 0.037 |\n| Ignatius | 23.41 | 0.7408 | 1.020 | 0.245 | 26.00 | 0.8305 | 0.735 | 0.168 |\n| Avg. | 26.82 | 0.8547 | 0.677 | 0.173 | 28.58 | 0.8900 | 0.472 | 0.110 |\n\nTable 6: Ablation Study on the Effect of Joint Optimization. Concurrently updating the camera extrinsics and Gaussian attributes markedly enhances the rendering quality.\n\n![Refer to caption]Figure 7: Ablation on Training View Number. We study the impact of the training view number to the rendering quality. Comparisons are between our model and CF-3DGS, on the Tanks and Temples datasets\n\n### 5.3 Ablation Studies\n\n#### Effect of Averaging Focal Length.\n\nExperiments indicates that independent calculation of camera focal length results in a diversity of outcomes, adversely affecting rendering quality and pose estimation accuracy, as evidenced in Tab.  [5]Table 5 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"). The core issue stems from the coupling of a focal length with globally aligned camera extrinsics, which leads to suboptimal pose estimation. This scenario complicates the 3D Gaussian optimization process, impacting the overall performance.\n\n#### Effect of Joint Optimization.\n\nThe globally alignment algorithm does not yield pixel-wise accurate extrinsics, primarily due to the resolution loss from the resizing operation on the point map, and the artifacts in the capturing process. We analyzed the effects of updating Gaussian attributes independently (referenced on the left in Tab. [6]Table 6 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\")) versus jointly optimizing camera extrinsics and Gaussian attributes (referenced on the right in Tab. [6]Table 6 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\")). It is evident that further refinement of camera extrinsics can steer the 3D Gaussians towards a more accurate solution, thereby enhancing the sharpness and detail in the resulting images.\n\n#### Effect of View Number and Efficiency Analysis.\n\nWe conduct experiments with varying numbers of training views to assess the model’s generalization capabilities. As illustrated in Fig [7]Figure 7 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), InstantSplat consistently outperforms CF-3DGS \\[ [10])\\], another 3D Gaussian-based pose-free framework. Furthermore, we analyze the time consumption for each module within our framework. Specifically, for 12 training views, it takes 20.6 seconds to acquire the coarse geometry from a pre-trained dense stereo model, while the fast 3D Gaussian Optimization requires 16.67 seconds for 1000 iterations.",
            "citations": null
          },
          "6 Conclusion": {
            "content": "We introduced InstantSplat, designed to reconstruct scene efficiently from sparse-view unposed images. Our approach leverages dense stereo priors for coarse scene initialization, offering preliminary estimates of the 3D geometry and camera parameters. To further refine these scene attributes and camera parameters, a rapid 3D Gaussian Optimization strategy that jointly optimizes the 3D Gaussian attributes and camera extrinsics. This results in an efficient pipeline capable of reconstructing the 3D scene from unposed images in under one minute.\nSignificantly, our method demonstrates superior rendering quality and pose estimation accuracy compared to existing methodologies, underscoring its effectiveness in handling sparse-view data.",
            "citations": null
          }
        },
        "abstract": "While neural 3D reconstruction has advanced substantially, it typically\nrequires densely captured multi-view data with carefully initialized poses\n(e.g., using COLMAP). However, this requirement limits its broader\napplicability, as Structure-from-Motion (SfM) is often unreliable in\nsparse-view scenarios where feature matches are limited, resulting in\ncumulative errors. In this paper, we introduce InstantSplat, a novel and\nlightning-fast neural reconstruction system that builds accurate 3D\nrepresentations from as few as 2-3 images. InstantSplat adopts a\nself-supervised framework that bridges the gap between 2D images and 3D\nrepresentations using Gaussian Bundle Adjustment (GauBA) and can be optimized\nin an end-to-end manner. InstantSplat integrates dense stereo priors and\nco-visibility relationships between frames to initialize pixel-aligned geometry\nby progressively expanding the scene avoiding redundancy. Gaussian Bundle\nAdjustment is used to adapt both the scene representation and camera parameters\nquickly by minimizing gradient-based photometric error. Overall, InstantSplat\nachieves large-scale 3D reconstruction in mere seconds by reducing the required\nnumber of input views. It achieves an acceleration of over 20 times in\nreconstruction, improves visual quality (SSIM) from 0.3755 to 0.7624 than\nCOLMAP with 3D-GS, and is compatible with multiple 3D representations (3D-GS,\n2D-GS, and Mip-Splatting)."
      },
      "bib.bib35": {
        "id": "bib.bib35",
        "citation": "Ravi et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Sam 2: Segment anything in images and videos.",
        "venue": "arXiv preprint arXiv:2408.00714",
        "pages": "",
        "url": "https://arxiv.org/abs/2408.00714",
        "arxiv_id": "2408.00714",
        "doi": null,
        "sections": {
          "1 Introduction\\": {
            "content": "\\\n![Refer to caption]Figure 1: We introduce the Segment Anything Model 2 (SAM 2), towards solving the promptable visual segmentation task (a) with our foundation model (b), trained on our large-scale SA-V dataset collected through our data engine (c). SAM 2 is capable of interactively segmenting regions through prompts (clicks, boxes, or masks) on one or multiple video frames by utilizing a streaming memory that stores previous prompts and predictions.\\\n\\\nSegment Anything (SA) introduced a foundation model for promptable segmentation in images(Kirillov et al., [2023])). However an image is only a static snapshot of the real world in which visual segments can exhibit complex motion, and with the rapid growth of multimedia content, a significant portion is now recorded with a temporal dimension, particularly in video data. Many important applications in AR/VR, robotics, autonomous vehicles, and video editing require temporal localization beyond image-level segmentation. We believe a universal visual segmentation system should be applicable to both images and videos.\\\n\\\nSegmentation in video aims to determine the spatio-temporal extent of entities, which presents unique challenges beyond those in images. Entities can undergo significant changes in appearance due to motion, deformation, occlusion, lighting changes, and other factors. Videos often have lower quality than images due to camera motion, blur, and lower resolution. Further, efficient processing of a large number of frames is a key challenge. While SA successfully addresses segmentation in images, existing video segmentation models and datasets fall short in providing a comparable capability to “segment anything in videos”.\\\n\\\nWe introduce the Segment Anything Model 2 (SAM 2), a unified model for video and image segmentation (we consider an image as a single-frame video). Our work includes a task, model, and dataset (see Fig. [1]Figure 1 ‣ 1 Introduction ‣ SAM 2: Segment Anything in Images and Videos\")).\\\n\\\nWe focus on the Promptable Visual Segmentation (PVS) task that generalizes image segmentation to the video domain. The task takes as input points, boxes, or masks on any frame of the video to define a segment of interest for which the spatio-temporal mask (i.e., a ‘masklet’) is to be predicted. Once a masklet is predicted, it can be iteratively refined by providing prompts in additional frames.\\\n\\\nOur model (§ [4]Model ‣ SAM 2: Segment Anything in Images and Videos\")) produces segmentation masks of the object of interest, in single images and across video frames. SAM 2 is equipped with a memory that stores information about the object and previous interactions, which allows it to generate masklet predictions throughout the video, and also effectively correct these based on the stored memory context of the object from previously observed frames. Our streaming architecture is a natural generalization of SAM to the video domain, processing video frames one at a time, equipped with a memory attention module to attend to the previous memories of the target object. When applied to images, the memory is empty and the model behaves like SAM.\\\n\\\nWe employ a data engine (§ [5]Data ‣ SAM 2: Segment Anything in Images and Videos\")) to generate training data by using our model in the loop with annotators to interactively annotate new and challenging data. Different from most existing video segmentation datasets, our data engine is not restricted to objects of specific categories, but instead targeted to provide training data for segmenting any object with a valid boundary, including parts and subparts. Compared to existing model-assisted approaches, our data engine with SAM 2 in the loop is 8.4×\\\\times faster at comparable quality. Our final Segment Anything Video (SA-V) dataset (§ [5.2]SA-V dataset ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\")) consists of 35.5M masks across 50.9K videos, 53×\\\\times more masks than any existing video segmentation dataset. SA-V is challenging with small objects and parts that get occluded and re-appear throughout the video. Our SA-V dataset is geographically diverse, and a fairness evaluation of SAM 2 indicates minimal performance discrepancy in video segmentation based on perceived gender, and little variance among the three perceived age groups we evaluated.\\\n\\\nOur experiments (§ [6]Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\")) show that SAM 2 delivers a step-change in the video segmentation experience. SAM 2 can produce better segmentation accuracy while using 3×\\\\timesfewer interactions than prior approaches. Further, SAM 2 outperforms prior work in established video object segmentation benchmarks, under multiple evaluation settings, and delivers better performance compared to SAM on image segmentation benchmarks, while being 6×\\\\times faster. SAM 2 is shown to be effective across a variety of video and image distributions as observed through numerous zero-shot benchmarks including 17 for video segmentation and 37 for single-image segmentation.\\\n\\\nWe are releasing our work under permissive open licences, including the SA-V dataset (CC by 4.0) a version of the model SAM 2 (Apache 2.0), along with an interactive online demo at [https://sam2.metademolab.com].\\\n\\",
            "citations": null
          },
          "2 Related work\\": {
            "content": "\\\n##### Image segmentation.\\\n\\\nSegment Anything (Kirillov et al., [2023])) introduces a promptable image segmentation task where the goal is to output a valid segmentation mask given an input prompt such as a bounding box or a point that refers to the object of interest. SAM trained on the SA-1B dataset allows for zero-shot segmentation with flexible prompting, which enabled its adoption to a wide range of downstream applications. Recent work has extended SAM by improving its quality. For example, HQ-SAM (Ke et al., [2024])) enhances SAM by introducing a High-Quality output token and training the model on fine-grained masks. Another line of work focuses on SAM’s efficiency to enable wider use in real-world and mobile applications, such as EfficientSAM (Xiong et al., [2023])), MobileSAM (Zhang et al., [2023a])), and FastSAM (Zhao et al., [2023])). The success of SAM led to its adoption in a wide range of applications, such as medical imaging (Ma et al., [2024]); Deng et al., [2023]); Mazurowski et al., [2023]); Wu et al., [2023a])), remote sensing (Chen et al., [2024]); Ren et al., [2024])), motion segmentation (Xie et al., [2024])), and camouflaged object detection (Tang et al., [2023])).\\\n\\\n##### Interactive Video Object Segmentation (iVOS).\\\n\\\nInteractive video object segmentation has emerged as a crucial task to efficiently obtain object segmentations in videos (masklets) with user guidance, often in the form of scribbles, clicks, or bounding boxes. A few early approaches (Wang et al., [2005]); Bai & Sapiro, [2007]); Fan et al., [2015])) deploy graph-based optimization to guide the segmentation annotation process. More recent approaches (Heo et al., [2020]); Cheng et al., [2021b]); Delatolas et al., [2024])) often adopt a modular design, converting the user inputs into a mask representation on a single frame and then propagating it to other frames. Our work shares a similar goal to these works to segment objects across videos with a good interactive experience, and we build a strong model along with a large and diverse dataset in pursuit of this goal.\\\n\\\nIn particular, the DAVIS interactive benchmark (Caelles et al., [2018])) allows interactively segmenting an object via scribble inputs on multiple frames. Inspired by the DAVIS interactive benchmark, we also adopt an interactive evaluation setting for the promptable video segmentation task in § [6.1]Video tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\").\\\n\\\nClick-based input is easier to collect (Homayounfar et al., [2021])) for interactive video segmentation.\\\nRecent works have used a combination of SAM on images with video trackers based on masks (Cheng et al., [2023b]); Yang et al., [2023]); Cheng et al., [2023c])) or points (Rajič et al., [2023])). However, these approaches have limitations: the tracker may not work for all objects, SAM may not perform well for image frames from videos, and there is no mechanism to interactively refine a model’s mistakes, other than re-annotating using SAM from scratch on the erroneous frame and restarting the tracking from there.\\\n\\\n##### Semi-supervised Video Object Segmentation (VOS).\\\n\\\nSemi-supervised VOS usually begins with an object mask as input in the first frame, which must be accurately tracked throughout the video (Pont-Tuset et al., [2017])). It is called “semi-supervised” since the input mask can be seen as a supervision signal of the object appearance that is available only for the first frame. This task has drawn significant attention due to its relevance in various applications, including video editing, robotics, and automatic background removal.\\\n\\\nEarly neural network-based approaches have often used online fine-tuning on the first video frame (Caelles et al., [2016]); Perazzi et al., [2016]); Yoon et al., [2017]); Maninis et al., [2017]); Hu et al., [2018a]); Bhat et al., [2020]); Robinson et al., [2020])) or on all frames (Voigtlaender & Leibe, [2017])) to adapt the model to the target object.\\\nFaster inference has been achieved with offline-trained models, conditioned either only on the first frame (Hu et al., [2018b]); Chen et al., [2018])), or also integrating the previous frame (Oh et al., [2018]); Yang et al., [2018]), [2020])). This multi-conditioning has been extended to all frames with RNNs (Xu et al., [2018a])) and cross-attention (Oh et al., [2019]); Cheng et al., [2021a]); Li et al., [2022a]); Yang et al., [2021b]), [2024]); Cheng & Schwing, [2022]); Yang & Yang, [2022]); Wang et al., [2022]); Cheng et al., [2023a]); Goyal et al., [2023])). Recent approaches (Zhang et al., [2023b]); Wu et al., [2023b])) extend a single vision transformer to jointly process the current frame along with all previous frames and associated predictions, resulting in a simple architecture but at a prohibitive inference cost. Semi-supervised VOS can be seen as a special case of our Promptable Visual Segmentation (PVS) task, as it is equivalent to only providing a mask prompt in the first video frame. Nevertheless, annotating the required high-quality object mask in the first frame is practically challenging and time-consuming.\\\n\\\n##### Video segmentation datasets.\\\n\\\nMany datasets have been proposed to support the VOS task. Early VOS datasets (Prest et al., [2012]); Li et al., [2013]); Ochs et al., [2014]); Fan et al., [2015])), such as DAVIS (Pont-Tuset et al., [2017]); Caelles et al., [2019])), include high-quality annotations but their limited size does not allow training deep-learning based approaches. Covering 94 object categories over 4 thousand videos, YouTube-VOS (Xu et al., [2018b])) is the first large-scale dataset for the VOS task. As algorithms became better and benchmark performance started to saturate, researchers have looked at increasing the difficulty of the VOS task by specifically focusing on occlusions (Qi et al., [2022]); Ding et al., [2023])), long videos (Hong et al., [2023]), [2024])), extreme transformations (Tokmakov et al., [2022])), object diversity (Wang et al., [2021b]), [2023])) or scene diversity (Athar et al., [2022])).\\\n\\\nWe find that current video segmentation datasets lack sufficient coverage to achieve the capability of “segmenting anything in videos”. Their annotations typically cover entire objects (not parts) and datasets are often centered around specific object classes, such as people, vehicles, and animals. In comparison to these datasets, our released SA-V dataset not only focuses on whole objects but also extensively covers object parts and contains over an order of magnitude more masks.\\\n\\",
            "citations": null
          },
          "3 Task: promptable visual segmentation\\": {
            "content": "\\\nThe PVS task allows providing prompts to the model on any frame of a video. Prompts can be positive/negative clicks, bounding boxes, or masks, either to define an object to segment or to refine a model-predicted one. To provide an interactive experience, upon receiving a prompt on a specific frame, the model should immediately respond with a valid segmentation mask of the object on this frame. After receiving initial (one or multiple) prompts (either on the same frame or different frames), the model should propagate these prompts to obtain the masklet of the object across the entire video, which contains the segmentation mask of the target object on every video frame. Additional prompts can be provided to the model on any frame to refine the segment throughout the video (example in Fig. [2]Figure 2 ‣ 3 Task: promptable visual segmentation ‣ SAM 2: Segment Anything in Images and Videos\")). For details on the task, see § [A]Appendix A Details on the PVS Task ‣ SAM 2: Segment Anything in Images and Videos\").\\\n\\\nSAM 2, introduced in the next section (§ [4]Model ‣ SAM 2: Segment Anything in Images and Videos\")), is applied as a data collection tool to the PVS task for building our SA-V dataset (§ [5]Data ‣ SAM 2: Segment Anything in Images and Videos\")). The model is evaluated (§ [6]Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\")) in an online and offline setting by simulating interactive video segmentation scenarios involving annotations across multiple frames, in the conventional semi-supervised VOS setting where annotations are limited to the first frame, and for image segmentation on the SA benchmarks.\\\n\\\n![Refer to caption]Figure 2: Interactive segmentation with SAM 2. Step 1 (selection): we prompt SAM 2 in frame 1 to obtain the segment of the target object (the tongue). Green/red dots indicate positive/negative prompts respectively. SAM 2 automatically propagates the segment to the following frames (blue arrows) to form a masklet. If SAM 2 loses the object (after frame 2), we can correct the masklet by providing an additional prompt in a new frame (red arrow). Step 2 (refinement): a single click in frame 3 is sufficient to recover the object and propagate it to obtain the correct masklet. A decoupled SAM + video tracker approach would require several clicks in frame 3 (as in frame 1) to correctly re-annotate the object as the segmentation is restarted from scratch. With SAM 2’s memory, a single click can recover the tongue.\\\n\\",
            "citations": null
          },
          "4 Model\\": {
            "content": "\\\nOur model can be seen as a generalization of SAM to the video (and image) domain.\\\nSAM 2 (Fig. [3]Figure 3 ‣ Image encoder. ‣ 4 Model ‣ SAM 2: Segment Anything in Images and Videos\")) supports point, box, and mask prompts on individual frames to define the spatial extent of the object to be segmented across the video. For image input, the model behaves similarly to SAM. A promptable and light-weight mask decoder accepts a frame embedding and prompts (if any) on the current frame and outputs a segmentation mask for the frame. Prompts can be iteratively added on a frame in order to refine the masks.\\\n\\\nUnlike SAM, the frame embedding used by the SAM 2 decoder is not directly from an image encoder and is instead conditioned on memories of past predictions and prompted frames.\\\nIt is possible for prompted frames to also come “from the future” relative to the current frame. Memories of frames are created by the memory encoder based on the current prediction and placed in a memory bank for use in subsequent frames. The memory attention operation takes the per-frame embedding from the image encoder and conditions it on the memory bank to produce an embedding that is then passed to the mask decoder.\\\n\\\nWe describe individual components and training below and provide more details in Appendix [C]Appendix C SAM 2 details ‣ SAM 2: Segment Anything in Images and Videos\").\\\n\\\n##### Image encoder.\\\n\\\nFor real-time processing of arbitrarily long videos, we take a streaming approach, consuming video frames as they become available. The image encoder is only run once for the entire interaction and its role is to provide unconditioned tokens (feature embeddings) representing each frame. We use an MAE (He et al., [2022])) pre-trained Hiera (Ryali et al., [2023]); Bolya et al., [2023])) image encoder, which is hierarchical, allowing us to use multiscale features during decoding.\\\n\\\n![Refer to caption]Figure 3:\\\nThe SAM 2 architecture.\\\nFor a given frame, the segmentation prediction is conditioned on the current prompt and/or on previously observed memories.\\\nVideos are processed in a streaming fashion with frames being consumed one at a time by the image encoder, and cross-attended to memories of the target object from previous frames. The mask decoder, which optionally also takes input prompts, predicts the segmentation mask for that frame. Finally, a memory encoder transforms the prediction and image encoder embeddings (not shown in the figure) for use in future frames.\\\n\\\n##### Memory attention.\\\n\\\nThe role of memory attention is to condition the current frame features on the past frames features and predictions as well as on any new prompts. We stack L𝐿L transformer blocks, the first one taking the image encoding from the current frame as input. Each block performs self-attention, followed by cross-attention to memories of (prompted/unprompted) frames and object pointers (see below), stored in a memory bank (see below), followed by an MLP. We use vanilla attention operations for self- and cross-attention, allowing us to benefit from recent developments in efficient attention kernels (Dao, [2023])).\\\n\\\n##### Prompt encoder and mask decoder.\\\n\\\nOur prompt encoder is identical to SAM’s and can be prompted by clicks (positive or negative), bounding boxes, or masks to define the extent of the object in a given frame. Sparse prompts are represented by positional encodings summed with learned embeddings for each prompt type, while masks are embedded using convolutions and summed with the frame embedding.\\\n\\\nOur decoder design largely follows SAM. We stack “two-way” transformer blocks that update prompt and frame embeddings. As in SAM, for ambiguous prompts (i.e., a single click) where there may be multiple compatible target masks, we predict multiple masks. This design is important to ensure that the model outputs valid masks. In video, where ambiguity can extend across video frames, the model predicts multiple masks on each frame. If no follow-up prompts resolve the ambiguity, the model only propagates the mask with the highest predicted IoU for the current frame.\\\n\\\nUnlike SAM where there is always a valid object to segment given a positive prompt, in the PVS task it is possible for no valid object to exist on some frames (e.g. due to occlusion). To account for this new output mode, we add an additional head that predicts whether the object of interest is present on the current frame. Another difference from SAM is that we use skip connections from the hierarchical image encoder (bypassing the memory attention) to incorporate high-resolution information for mask decoding (see § [C]Appendix C SAM 2 details ‣ SAM 2: Segment Anything in Images and Videos\")).\\\n\\\n##### Memory encoder.\\\n\\\nThe memory encoder generates a memory by downsampling the output mask using a convolutional module and summing it element-wise with the unconditioned frame embedding from the image-encoder (not shown in Fig. [3]Figure 3 ‣ Image encoder. ‣ 4 Model ‣ SAM 2: Segment Anything in Images and Videos\")), followed by light-weight convolutional layers to fuse the information.\\\n\\\n##### Memory bank.\\\n\\\nThe memory bank retains information about past predictions for the target object in the video by maintaining a FIFO queue of memories of up to N𝑁N recent frames and stores information from prompts in a FIFO queue of up to M𝑀M prompted frames. For instance, in the VOS task where the initial mask is the only prompt, the memory bank consistently retains the first frame’s memory along with memories of up to N𝑁N recent (unprompted) frames. Both sets of memories are stored as spatial feature maps.\\\n\\\nIn addition to the spatial memory, we store a list of object pointers as lightweight vectors for high-level semantic information of the object to segment, based on mask decoder output tokens of each frame (Meinhardt et al., [2022])). Our memory attention cross-attends to both spatial memory features and these object pointers.\\\n\\\nWe embed temporal position information into the memories of N𝑁N recent frames, allowing the model to represent short-term object motion, but not into those of prompted frames, because the training signal from prompted frames is sparser and it is more difficult to generalize to the inference setting where prompted frames may come from a very different temporal range than seen during training.\\\n\\\n##### Training.\\\n\\\nThe model is trained jointly on image and video data. Similar to previous work (Kirillov et al., [2023]); Sofiiuk et al., [2022])), we simulate interactive prompting of the model. We sample sequences of 8 frames and randomly select up to 2 frames to prompt and probabilistically receive corrective clicks which are sampled using the ground-truth masklet and model predictions during training. The training task is to sequentially (and “interactively”) predict the ground-truth masklet. Initial prompts to the model can be the ground-truth mask with probability 0.50.50.5, a positive click sampled from the ground-truth mask with probability 0.250.250.25, or a bounding box input with probability 0.250.250.25. See § [C]Appendix C SAM 2 details ‣ SAM 2: Segment Anything in Images and Videos\") for more details.\\\n\\",
            "citations": null
          },
          "5 Data\\": {
            "content": "\\\nTo develop the capability to “segment anything” in video, we built a data engine to collect a large and diverse video segmentation dataset. We employ an interactive model in the loop setup with human annotators. Similar to Kirillov et al. ( [2023])), we do not impose semantic constraints on the annotated masklets, and focus on both whole objects (e.g., a person) and parts (e.g., a person’s hat). Our data engine went through three phases, each categorized based on the level of model assistance provided to annotators. Next, we describe each data engine phase and our SA-V dataset.\\\n\\\n### 5.1 Data engine\\\n\\\n##### Phase 1: SAM per frame.\\\n\\\nThe initial phase used the image-based interactive SAM (Kirillov et al., [2023])) to assist human annotation. Annotators are tasked with annotating the mask of a target object in every frame of the video at 6 frames per second (FPS) using SAM, and pixel-precise manual editing tools such as a “brush” and “eraser”. There is no tracking model involved to assist with the temporal propagation of masks to other frames. As this is a per-frame method, and all frames require mask annotation from scratch, the process is slow, with an average annotation time of 37.8 seconds per frame in our experiment. However, this yields high-quality spatial annotations per frame. In this phase, we collected 16K masklets across 1.4K videos. We further use this approach to annotate our SA-V val and test sets to mitigate potential biases of SAM 2 during evaluation.\\\n\\\n##### Phase 2: SAM + SAM 2 Mask.\\\n\\\nThe second phase added SAM 2 into the loop, where SAM 2 only accepted _masks_ as prompts. We refer to this version as SAM 2 Mask. Annotators used SAM and other tools as in Phase 1 to generate spatial masks in the first frame, and then use SAM 2 Mask to temporally propagate the annotated mask to other frames to get the full spatio-temporal masklets. At any subsequent video frame, annotators can spatially modify the predictions made by SAM 2 Mask by annotating a mask from scratch with SAM, a “brush” and/or “eraser”, and re-propagate with SAM 2 Mask, repeating this process until the masklet is correct. SAM 2 Mask was initially trained on the Phase 1 data and publicly available datasets. During Phase 2, we re-trained and updated SAM 2 Mask in the annotation loop twice using the collected data. In Phase 2, we collected 63.5K masklets. The annotation time went down to 7.4 s/frame, a ∼similar-to\\\\sim5.1x speed up over Phase 1.\\\n\\\nDespite an improvement in annotation time, this decoupled approach requires annotating masks in intermediate frames from scratch, without previous memory. We then advanced to develop the fully-featured SAM 2, capable of performing both interactive image segmentation and mask propagation in a unified model.\\\n\\\n##### Phase 3: SAM 2.\\\n\\\nIn the final phase, we utilize the fully-featured SAM 2, which accepts various types of prompts, including points and masks. SAM 2 benefits from memories of objects across the temporal dimension to generate mask predictions. This means annotators only need to provide occasional refinement clicks to SAM 2 to edit the predicted masklets in intermediate frames, as opposed to annotating from scratch with a spatial SAM which has no such memory context. During Phase 3, we re-trained and updated SAM 2 using the collected annotations five times. With SAM 2 in the loop, the annotation time per frame went down to 4.5 seconds, a ∼similar-to\\\\sim8.4x speed up over Phase 1. In Phase 3, we collected 197.0K masklets.\\\n\\\n##### Quality verification.\\\n\\\nTo uphold a high standard for annotation, we introduce a verification step. A separate set of annotators are tasked with verifying the quality of each annotated masklet as “satisfactory” (correctly and consistently tracking the target object across all frames) or “unsatisfactory” (target object is well defined with a clear boundary but the masklet is not correct or consistent). Unsatisfactory masklets were sent back to the annotation pipeline for refinement. Any masklets tracking not well defined objects were rejected entirely.\\\n\\\n##### Auto masklet generation.\\\n\\\nEnsuring diversity in annotation is important to enable the anything capability of our model. As human annotators might typically focus more on salient objects, we augment the annotations with automatically generated masklets (referred to as “Auto”). This serves a dual purpose of increasing the coverage of annotations and helping identify model failure cases. To generate auto masklets, we prompt SAM 2 with a regular grid of points in the first frame and generate candidate masklets. These are then sent to the masklet verification step for filtering. Automatic masklets tagged as “satisfactory” are added to the SA-V dataset. Masklets identified as “unsatisfactory” (i.e., model failure cases) are sampled and presented to annotators to refine with SAM 2 in the loop (Phase 3 of the data engine). These automatic masklets cover large salient central objects but also objects of varying sizes and positions in the background.\\\n\\\n|     |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n|  | Model in the Loop | Time perFrame | EditedFrames | Clicks perClickedFrame | Phase 1 Mask Alignment Score (IoU>0.75) |\\\n|  | All | Small | Medium | Large |\\\n| Phase 1 | SAM only | 37.8 s | 100.00 % | 4.80 | - | - | - | - |\\\n| Phase 2 | SAM + SAM 2 Mask | 7.4 s | 23.25 % | 3.61 | 86.4 %percent\\\\% | 71.3 %percent\\\\% | 80.4 %percent\\\\% | 97.9 %percent\\\\% |\\\n| Phase 3 | SAM 2 | 4.5 s | 19.04 % | 2.68 | 89.1 %percent\\\\% | 72.8 %percent\\\\% | 81.8 %percent\\\\% | 100.0 %percent\\\\% |\\\n\\\nTable 1: Evolution of data engine phases showing the average annotation time per frame, the average percent of edited frames per masklet, the number of manual clicks per clicked frame, and Mask Alignment to Phase 1 by mask size.\\\n\\\n##### Analysis.\\\n\\\nTable [1]Table 1 ‣ Auto masklet generation. ‣ 5.1 Data engine ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\") shows a comparison of the annotation protocol in each data engine phase through a controlled experiment (details in § [D.2.2]D.2.2 Data engine phase comparison ‣ D.2 Data engine details ‣ Appendix D Data details ‣ SAM 2: Segment Anything in Images and Videos\")). We compare the average annotation time per frame, the average percentage of manually edited frames per masklet, and the average number of clicks per clicked frame. For quality evaluation, we define the _Phase 1 Mask Alignment Score_ as the percentage of masks whose IoU compared to the corresponding masks in Phase 1 exceeds 0.75. Phase 1 data is chosen as a reference as it has per-frame high quality manual annotations. Phase 3 with SAM 2 in the loop leads to increased efficiency and comparable quality: it is 8.4×\\\\times faster than Phase 1, has the lowest edited frame percentage and clicks per frame, and results in better alignment.\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n| Training data | SA-V val | 9 zero-shot |\\\n| VOS + SA-1B | 50.0 | 62.5 |\\\n| \\+ Phase 1 | 53.0 | 66.9 |\\\n| \\+ Phase 2 | 58.8 | 70.9 |\\\n| \\+ Phase 3 | 62.5 | 71.2 |\\\n| \\+ Auto | 63.2 | 71.5 |\\\n\\\nTable 2: Segmentation accuracy (𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} metric) improvement from adding data from each data engine phase. “VOS” is a set of video object segmentation datasets. Details are in § [E]Appendix E Details on zero-shot transfer experiments ‣ SAM 2: Segment Anything in Images and Videos\").\\\n\\\nIn Table [2]Table 2 ‣ Analysis. ‣ 5.1 Data engine ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\"), we show the performance comparison of SAM 2 trained on the available data at the end of each phase keeping the number of iterations fixed, therefore measuring solely the impact of the additional data. We evaluate on our own SA-V val set and also on 9 zero-shot benchmarks (see § [E.1]E.1 Zero-shot video tasks ‣ Appendix E Details on zero-shot transfer experiments ‣ SAM 2: Segment Anything in Images and Videos\") for details) using the standard 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} accuracy metric (the higher the better) when prompting with 3-clicks on the first frame. We note a consistent improvement after iteratively including the data from each phase, not only on the in-domain SA-V val set, but also on the 9 zero-shot benchmarks.\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\nFigure 4:\\\nExample videos from the SA-V dataset with masklets overlaid (manual and automatic). Each masklet has a unique color, and each row represents frames from one video, with 1 second between them.\\\n\\\n### 5.2 SA-V dataset\\\n\\\nThe SA-V dataset collected with our data engine comprises 50.9K videos with 642.6K masklets. In Table [3]Table 3 ‣ Internal dataset. ‣ 5.2 SA-V dataset ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\") we compare the SA-V composition to common VOS datasets across the number of videos, masklets, and masks. Notably, the number of annotated masks is 53×\\\\times (15×\\\\times without auto) larger than any existing VOS dataset, providing a substantial resource for future work. We are releasing SA-V under a permissive license.\\\n\\\n##### Videos.\\\n\\\nWe collected a new set of 50.9K videos captured by crowdworkers. Videos comprise 54% indoor and 46% outdoor scenes with an average duration of 14 seconds. Videos feature “in-the-wild” diverse environments, and cover various everyday scenarios. Our dataset has more videos than existing VOS datasets, and as shown in Fig. [5]Figure 5 ‣ Internal dataset. ‣ 5.2 SA-V dataset ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\"), videos span 47 countries and were captured by diverse participants (self-reported demographics).\\\n\\\n##### Masklets.\\\n\\\nThe annotations comprise 190.9K manual masklet annotations and 451.7K automatic masklets collected using our data engine. Example videos with masklets overlaid (manual and automatic) are shown in Fig. [4]Figure 4 ‣ Analysis. ‣ 5.1 Data engine ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\"). SA-V has 53×\\\\times (15×\\\\times without auto annotations) more masks than the largest VOS dataset. The disappearance rate (Ding et al., [2023])) in SA-V Manual (the percentage of annotated masklets that disappear in at least one frame and then re-appear) is 42.5%percent\\\\%, competitive among existing datasets. Fig. [5(a)]Figure 5(a) ‣ Figure 5 ‣ Internal dataset. ‣ 5.2 SA-V dataset ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\") shows a comparison of mask size distribution (normalized by video resolution) with DAVIS, MOSE, and YouTubeVOS. More than 88%percent8888\\\\% of SA-V masks have a normalized mask area less than 0.1.\\\n\\\n##### SA-V training, validation and test splits.\\\n\\\nWe split SA-V based on the video authors (and their geographic locations) to ensure minimal overlap of similar objects. To create SA-V val and SA-V test sets, we focus on challenging scenarios in selecting videos, and ask annotators to identify _challenging targets_ that are fast-moving, have complex occlusions by other objects as well as disappearance/re-appearance patterns. These targets were annotated at 6 FPS using the data engine Phase 1 setup in § [5.1]Data engine ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\"). There are 293 masklets and 155 videos in the SA-V val split, and 278 masklets and 150 videos in the SA-V test split.\\\n\\\n##### Internal dataset.\\\n\\\nWe also used internally available licensed video data to further augment our training set. Our internal dataset is comprised of 62.9K videos and 69.6K masklets annotated in Phase 2 and Phase 3 (see § [5.1]Data engine ‣ 5 Data ‣ SAM 2: Segment Anything in Images and Videos\")) for training, and 96 videos and 189 masklets annotated using Phase 1 for testing (Internal-test).\\\n\\\nSee Appendix [D]Appendix D Data details ‣ SAM 2: Segment Anything in Images and Videos\") for more details on the data engine and SA-V dataset.\\\n\\\n|     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- |\\\n|  | #Videos | Duration | #Masklets | #Masks | #Frames | Disapp. Rate |\\\n| DAVIS 2017 (Pont-Tuset et al., [2017])) | 0.2K | 0.1 hr | 0.4K | 27.1K | 10.7K | 16.1 %percent\\\\% |\\\n| YouTube-VOS (Xu et al., [2018b])) | 4.5K | 5.6 hr | 8.6K | 197.3K | 123.3K | 13.0 %percent\\\\% |\\\n| UVO-dense (Wang et al., [2021b])) | 1.0K | 0.9 hr | 10.2K | 667.1K | 68.3K | 9.2 %percent\\\\% |\\\n| VOST (Tokmakov et al., [2022])) | 0.7K | 4.2 hr | 1.5K | 175.0K | 75.5K | 41.7 %percent\\\\% |\\\n| BURST (Athar et al., [2022])) | 2.9K | 28.9 hr | 16.1K | 600.2K | 195.7K | 37.7 %percent\\\\% |\\\n| MOSE (Ding et al., [2023])) | 2.1K | 7.4 hr | 5.2K | 431.7K | 638.8K | 41.5 %percent\\\\% |\\\n| Internal | 62.9K | 281.8 hr | 69.6K | 5.4M | 6.0M | 36.4 %percent\\\\% |\\\n| SA-V Manual | 50.9K | 196.0 hr | 190.9K | 10.0M | 4.2M | 42.5 %percent\\\\% |\\\n| SA-V Manual+Auto | 50.9K | 196.0 hr | 642.6K | 35.5M | 4.2M | 27.7 %percent\\\\% |\\\n\\\nTable 3: Comparison of our datasets with open source VOS datasets in terms of number of videos, duration, number of masklets, masks, frames, and disappearance rate. SA-V Manual contains only manually annotated labels. SA-V Manual+Auto combines manually annotated labels with automatically generated masklets.\\\n\\\n![Refer to caption]\\\n\\\n(a)Size\\\n\\\n![Refer to caption]\\\n\\\n(b)Geography\\\n\\\n\\\\pieiGender\\\n\\\n\\\\pieiiAge\\\n\\\n(c)Crowdworker Demographics\\\n\\\nFigure 5: Dataset distribution: (a) masklets size distribution (normalized by video resolution), (b) geographic diversity of the videos, and (c) self-reported demographics of the crowdworkers who recorded the videos.\\\n\\",
            "citations": null
          },
          "6 Zero-shot experiments\\": {
            "content": "\\\nHere, we compare SAM 2 with previous work on zero-shot video tasks (§ [6.1]Video tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\")) and image tasks (§ [6.2]Image tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\")). We report the standard 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} metric (Pont-Tuset et al., [2017])) for video and mIoU metric for image tasks.\\\nUnless otherwise mentioned, the results reported in this section follow our default setup using Hiera-B+ image encoder with a resolution of 1024 and trained on the full combination of datasets, i.e., SAM 2 (Hiera-B+) in Table [7]Table 7 ‣ 7 Comparison to state-of-the-art in semi-supervised VOS ‣ SAM 2: Segment Anything in Images and Videos\") (see also § [C.2]C.2 Training ‣ Appendix C SAM 2 details ‣ SAM 2: Segment Anything in Images and Videos\") for details).\\\n\\\n### 6.1 Video tasks\\\n\\\n#### 6.1.1 Promptable video segmentation\\\n\\\n|     |     |\\\n| --- | --- |\\\n| ![Refer to caption] | ![Refer to caption] |\\\n| (a) offline average 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} across datasets (3-click) | (b) online average 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} across datasets (3-click) |\\\n\\\nFigure 6: Zero-shot accuracy over 9 datasets in interactive offline and online evaluation settings.\\\n\\\nWe first evaluate promptable video segmentation, which involves simulating an interactive setting that resembles the user experience. We have two settings, offline evaluation, where multiple passes are made through a video to select frames to interact with based on the largest model error, and online evaluation, where the frames are annotated in a single forward pass through the video. These evaluations are conducted on 9 densely annotated zero-shot video datasets using Nclick=3subscript𝑁click3N\\_{\\\\mathrm{click}}=3 clicks per frame (see § [E.1]E.1 Zero-shot video tasks ‣ Appendix E Details on zero-shot transfer experiments ‣ SAM 2: Segment Anything in Images and Videos\") for details).\\\n\\\nWe create two strong baselines, SAM+XMem++ and SAM+Cutie, based on two state-of-the-art models for video object segmentation, XMem++ (Bekuzarov et al., [2023])) and Cutie (Cheng et al., [2023a])). We use XMem++ to generate a video segmentation based on mask inputs on one or multiple frames. SAM is used to provide an initial mask or to refine an output (by feeding the current segmentation as a mask prompt to SAM). For the SAM+Cutie baseline, we modify Cutie to allow taking mask inputs on multiple frames.\\\n\\\nIn Fig. [6]Figure 6 ‣ 6.1.1 Promptable video segmentation ‣ 6.1 Video tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\"), we report the average 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} accuracy over Nframe=1,…,8subscript𝑁frame1…8N\\_{\\\\mathrm{frame}}=1,\\\\ldots,8 interacted frames. SAM 2 outperforms SAM+XMem++ and SAM+Cutie for both offline and online evaluation settings. Across all 9 datasets (see per-dataset results in § [E.1]E.1 Zero-shot video tasks ‣ Appendix E Details on zero-shot transfer experiments ‣ SAM 2: Segment Anything in Images and Videos\")), SAM 2 dominates both methods, confirming that SAM 2 is able to generate high-quality video segmentation from a few clicks while also allowing continued refinement of the results with further prompts. Overall, SAM 2 can generate better segmentation accuracy, with >>3×\\\\times fewer interactions.\\\n\\\n#### 6.1.2 Semi-supervised video object segmentation\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n| Method | 1-click | 3-click | 5-click | bounding box | ground-truth mask‡ |\\\n| SAM+XMem++ | 56.9 | 68.4 | 70.6 | 67.6 | 72.7 |\\\n| SAM+Cutie | 56.7 | 70.1 | 72.2 | 69.4 | 74.1 |\\\n| SAM 2 | 64.3 | 73.2 | 75.4 | 72.9 | 77.6 |\\\n\\\nTable 4: Zero-shot accuracy across 17 video datasets under semi-supervised VOS evaluation using different prompts. The table shows the averaged 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} for each type of prompt (1, 3 or 5 clicks, bounding boxes, or ground-truth masks) in the first video frame (‡: in this case we directly use masks as inputs into XMem++ or Cutie without using SAM).\\\n\\\nWe next evaluate the semi-supervised video object segmentation (VOS) setting (Pont-Tuset et al., [2017])) with click, box, or mask prompts only on the first frame of the video. When using click prompts, we interactively sample either 1, 3 or 5 clicks on the first video frame, and then track the object based on these clicks.\\\n\\\nSimilar to the interactive setting in § [6.1.1]Promptable video segmentation ‣ 6.1 Video tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\"), we compare to XMem++ and Cutie, using SAM for click and box prompts, and in their default setting when using mask prompts. We report the standard 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} accuracy (Pont-Tuset et al., [2017])), except for on VOST (Tokmakov et al., [2022])), where we report the 𝒥𝒥\\\\mathcal{J} metric following its protocol. The results are in Table [4]Table 4 ‣ 6.1.2 Semi-supervised video object segmentation ‣ 6.1 Video tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\"). SAM 2 outperforms both baselines on the 17 datasets, using various input prompts. The results underline that SAM 2 also excels at the conventional, non-interactive VOS task with mask input, for which these other works are specifically designed. More details are in § [E.1.3]E.1.3 Semi-supervised VOS evaluation details ‣ E.1 Zero-shot video tasks ‣ Appendix E Details on zero-shot transfer experiments ‣ SAM 2: Segment Anything in Images and Videos\").\\\n\\\n#### 6.1.3 Fairness evaluation\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | 1-click | 3-click | mask |\\\n| gender |  |  |  |\\\n| male | 81.9 | 95.1 | 95.9 |\\\n| female | 75.1 | 94.1 | 95.2 |\\\n| age |  |  |  |\\\n| 18-26 | 77.2 | 95.0 | 95.7 |\\\n| 26-50 | 76.7 | 94.7 | 95.8 |\\\n| 50+ | 81.4 | 95.1 | 96.2 |\\\n\\\nTable 5: Fairness evaluation of SAM 2 (under 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} metric) on protected demographic groups.\\\n\\\nWe evaluate SAM 2 for fairness across demographic groups. We collect annotations for the people category in the Ego-Exo4D (Grauman et al., [2023])) dataset, which contains self-reported demographic information supplied by the subject of the video. We employ the same annotation setup as for SA-V val and test sets and apply this to 20-second clips from the third-person (exo) videos. We evaluate SAM 2 on this data using 1-, 3-clicks, and ground-truth mask on the first frame.\\\n\\\nTable [5]Table 5 ‣ 6.1.3 Fairness evaluation ‣ 6.1 Video tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\") shows the comparison in 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} accuracy of SAM 2 for segmenting people across gender and age. At 3 clicks and with ground-truth mask prompts there is minimal discrepancy. We manually inspect 1 click predictions, and find the model frequently predicts the mask for a part instead of the person. When limiting the comparison to clips where the person is correctly segmented, the gap in 1 click shrinks substantially (𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} male 94.3, female 92.7), suggesting the discrepancy can be partially attributed to ambiguity in the prompt.\\\n\\\nIn Appendix [G]Appendix G Model, data and annotation cards ‣ SAM 2: Segment Anything in Images and Videos\"), we provide model, data and annotation cards for SA-V.\\\n\\\n### 6.2 Image tasks\\\n\\\nWe evaluate SAM 2 on the Segment Anything task across 37 zero-shot datasets, including 23 datasets previously used by SAM for evaluation. 1-click and 5-click mIoUs are reported in Table [6]Table 6 ‣ 6.2 Image tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\") and we show the average mIoU by dataset domain and model speed in frames per second (FPS) on a single A100 GPU.\\\n\\\nThe first column (SA-23 All) shows accuracy on the 23 datasets from SAM. SAM 2 achieves higher accuracy (58.9 mIoU with 1 click) than SAM (58.1 mIoU with 1 click), without using any extra data and while being 6×\\\\timesfaster. This can be mainly attributed to the smaller but more effective Hiera image encoder in SAM 2.\\\n\\\nThe bottom row shows how training on our SA-1B and video data mix can further improve accuracy to 61.4% on average on the 23 datasets. We also see exceptional gains on the video benchmarks from SA-23 (video datasets are evaluated as images, identical to Kirillov et al. ( [2023]))), and the 14 new video datasets we added.\\\n\\\n|     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- |\\\n|  |  | 1 (5) click mIoU |  |\\\n| Model | Data | SA-23 All | SA-23 Image | SA-23 Video | 14 new Video | FPS |\\\n| SAM | SA-1B | 58.1 (81.3) | 60.8 (82.1) | 54.5 (80.3) | 59.1 (83.4) | 21.7 |\\\n| SAM 2 | SA-1B | 58.9 (81.7) | 60.8 (82.1) | 56.4 (81.2) | 56.6 (83.7) | 130.1 |\\\n| SAM 2 | our mix | 61.4 (83.7) | 63.1 (83.9) | 59.1 (83.3) | 69.6 (86.0) | 130.1 |\\\n\\\nTable 6: Zero-shot accuracy on the Segment Anything (SA) task across 37 datasets. The table shows the average 1- and 5-click mIoU of SAM 2 compared to SAM by domains (image/video). We report the average metrics on the 23 datasets used by SAM (SA-23) and the average across 14 additional zero-shot video datasets (as detailed in § [E.3]E.3 Zero-shot image tasks ‣ Appendix E Details on zero-shot transfer experiments ‣ SAM 2: Segment Anything in Images and Videos\")).\\\n\\\nOverall, the findings underscore SAM 2’s dual capability in interactive video and image segmentation, a strength derived from our diverse training data that encompasses videos and static images across visual domains. More detailed results including a breakdown by dataset are in § [E.3]E.3 Zero-shot image tasks ‣ Appendix E Details on zero-shot transfer experiments ‣ SAM 2: Segment Anything in Images and Videos\").\\\n\\",
            "citations": null
          },
          "7 Comparison to state-of-the-art in semi-supervised VOS\\": {
            "content": "\\\nOur primary focus is on the general, interactive PVS task, but we also address the specific semi-supervised VOS setting (where the prompt is a ground-truth mask on the first frame), as it is a historically common protocol.\\\nWe evaluate two versions of SAM 2 with varying image encoder sizes (Hiera-B+/-L) with different speed-vs-accuracy tradeoffs. We measure framesper second (FPS) on a single A100 GPU using a batch-size of one. SAM 2 based on Hiera-B+ and Hiera-L runs at real-time speeds of 43.8 and 30.2 FPS, respectively.\\\n\\\nWe present a comparison with existing state-of-the-art in Table [7]Table 7 ‣ 7 Comparison to state-of-the-art in semi-supervised VOS ‣ SAM 2: Segment Anything in Images and Videos\"), reporting accuracy using standard protocols.\\\nSAM 2 shows significant improvement over the best existing methods. We observe that using a larger image encoder brings significant accuracy gains across the board.\\\n\\\nWe also evaluate existing work on the SA-V val and test sets which measure performance for open-world segments of “any” object class. When comparing on this benchmark, we see that most previous methods peak at around the same accuracy. The best performance on SA-V val and SA-V test for prior work is significantly lower demonstrating the gap to a “segment anything in videos” capability. Finally, we see that SAM 2 also brings notable gains in long-term video object segmentation as observed in the LVOS benchmark result.\\\n\\\n|     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} | 𝒢𝒢\\\\mathcal{G} |\\\n| Method | MOSE val | DAVIS 2017 val | LVOS val | SA-V val | SA-V test | YTVOS 2019 val |\\\n| STCN (Cheng et al., [2021a])) | 52.5 | 85.4 | - | 61.0 | 62.5 | 82.7 |\\\n| SwinB-AOT (Yang et al., [2021b])) | 59.4 | 85.4 | - | 51.1 | 50.3 | 84.5 |\\\n| SwinB-DeAOT (Yang & Yang, [2022])) | 59.9 | 86.2 | - | 61.4 | 61.8 | 86.1 |\\\n| RDE (Li et al., [2022a])) | 46.8 | 84.2 | - | 51.8 | 53.9 | 81.9 |\\\n| XMem (Cheng & Schwing, [2022])) | 59.6 | 86.0 | - | 60.1 | 62.3 | 85.6 |\\\n| SimVOS-B (Wu et al., [2023b])) | - | 88.0 | - | 44.2 | 44.1 | 84.2 |\\\n| JointFormer (Zhang et al., [2023b])) | - | 90.1 | - | - | - | 87.4 |\\\n| ISVOS (Wang et al., [2022])) | - | 88.2 | - | - | - | 86.3 |\\\n| DEVA (Cheng et al., [2023b])) | 66.0 | 87.0 | 55.9 | 55.4 | 56.2 | 85.4 |\\\n| Cutie-base (Cheng et al., [2023a])) | 69.9 | 87.9 | 66.0 | 60.7 | 62.7 | 87.0 |\\\n| Cutie-base+ (Cheng et al., [2023a])) | 71.7 | 88.1 | - | 61.3 | 62.8 | 87.5 |\\\n| SAM 2 (Hiera-B+) | 75.8 | 90.9 | 74.9 | 73.6 | 74.1 | 88.4 |\\\n| SAM 2 (Hiera-L) | 77.2 | 91.6 | 76.1 | 75.6 | 77.6 | 89.1 |\\\n\\\nTable 7: VOS comparison to prior work. SAM 2 performs well in accuracy (𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F}, 𝒢𝒢\\\\mathcal{G}) for video segmentation based on first-frame ground-truth mask prompts. SAM 2 performs significantly better on SA-V val/test.\\\n\\",
            "citations": null
          },
          "8 Data and model ablations\\": {
            "content": "\\\nThis section presents ablations that informed the design decisions for SAM 2. We evaluate on our MOSE development set (“MOSE dev”) which contains 200 randomly-sampled videos from the MOSE training split and excluded from the training data in our ablations, SA-V val, and the average over 9 zero-shot video datasets. As the metric for comparison, we report 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} under 3-click input on the first frame as a balance between the 1-click regime and the VOS-style mask prompts. Additionally, we report the average 1-click mIoU on the 23-dataset benchmark used by SAM for the SA task on images. Unless otherwise specified, we run our ablations at 512 resolution and with SA-V manual and a 10% subset of SA-1B. Additional details are in § [C.2]C.2 Training ‣ Appendix C SAM 2 details ‣ SAM 2: Segment Anything in Images and Videos\").\\\n\\\n### 8.1 Data ablations\\\n\\\n##### Data mix ablation.\\\n\\\nIn Table [8]Table 8 ‣ Data mix ablation. ‣ 8.1 Data ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\"), we compare the accuracy of SAM-2 when trained on different data mixtures. We pre-train on SA-1B and then train a separate model for each setting. We fix the number of iterations (200k) and batch size (128) with only the training data changing between experiments. We report accuracy on our SA-V val set, MOSE, 9 zero-shot video benchmarks, and the SA-23 tasks (§ [6.2]Image tasks ‣ 6 Zero-shot experiments ‣ SAM 2: Segment Anything in Images and Videos\")). Row 1 shows that a model purely trained on VOS datasets (Davis, MOSE, YouTubeVOS) performs well on the in-domain MOSE dev, but poorly on all the others including the 9 zero-shot VOS datasets (59.7 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F}).\\\n\\\nWe observe tremendous benefit from adding our data engine data into the training mix, including +12.1% average performance improvement on 9 zero-shot datasets (row 11 vs 1). This can be attributed to the limited coverage and size of VOS datasets. Adding SA-1B images improves the performance on the image segmentation task (rows 3 vs 4, 5 vs 6, 9 vs 10, 11 vs 12) without degrading the VOS capability. Training only on SA-V and SA-1B (row 4) is enough to obtain strong performance on all benchmarks except for MOSE. Overall, we obtain the best results when mixing all datasets: VOS, SA-1B, and our data engine data (row 12).\\\n\\\n|     |     |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n|  | Training data | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} | mIoU |\\\n|  | VOS | Internal | SA-V | SA-1B | SA-V val | Internal-test | MOSE dev | 9 zero-shot | SA-23 |\\\n| 1 | ✓ |  |  |  | 48.1 | 60.2 | 76.9 | 59.7 | 45.4 |\\\n| 2 |  | ✓ |  |  | 57.0 | 72.2 | 70.6 | 70.0 | 54.4 |\\\n| 3 |  |  | ✓ |  | 63.0 | 72.6 | 72.8 | 69.7 | 53.0 |\\\n| 4 |  |  | ✓ | ✓ | 62.9 | 73.2 | 73.6 | 69.7 | 58.6 |\\\n| 5 |  | ✓ | ✓ |  | 63.0 | 73.2 | 73.3 | 70.9 | 55.8 |\\\n| 6 |  | ✓ | ✓ | ✓ | 63.6 | 75.0 | 74.4 | 71.6 | 58.6 |\\\n| 7 | ✓ |  |  | ✓ | 50.0 | 63.2 | 77.6 | 62.5 | 54.8 |\\\n| 8 | ✓ | ✓ |  |  | 54.9 | 71.5 | 77.9 | 70.6 | 55.1 |\\\n| 9 | ✓ |  | ✓ |  | 61.6 | 72.8 | 78.3 | 69.9 | 51.0 |\\\n| 10 | ✓ |  | ✓ | ✓ | 62.2 | 74.1 | 78.5 | 70.3 | 57.3 |\\\n| 11 | ✓ | ✓ | ✓ |  | 61.8 | 74.4 | 78.5 | 71.8 | 55.7 |\\\n| 12 | ✓ | ✓ | ✓ | ✓ | 63.1 | 73.7 | 79.0 | 71.6 | 58.9 |\\\n\\\nTable 8: We train our model on different data mixtures including VOS (Davis, MOSE, YouTubeVOS), and subsets of Internal-train, SA-V, and SA-1B.\\\nWe report the 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} accuracy when prompted with 3 clicks in the first frame on SA-V val and Internal-test, MOSE, and 9 zero-shot datasets, and the average 1-click mIoU on SA-23 datasets.\\\n\\\n##### Data quantity ablation.\\\n\\\nNext, we study the effect of scaling training data. SAM 2 is pre-trained on SA-1B before training on varying sizes of SA-V. We report average 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} score (when prompted with 3 clicks in the first frame) over 3 benchmarks: SA-V val, zero-shot, and MOSE dev. Fig. [7]Figure 7 ‣ Data quantity ablation. ‣ 8.1 Data ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\") shows a consistent power law relationship between the quantity of training data and the video segmentation accuracy on all benchmarks.\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\nFigure 7: Performance of SAM 2 as a function of the SA-V quantity. We report 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} accuracy for 3-click prompts in the first frame on SA-V val (left), 9 zero-shot datasets (center), and MOSE dev (right).\\\n\\\n##### Data quality ablation.\\\n\\\nIn Table [9]Table 9 ‣ Data quality ablation. ‣ 8.1 Data ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\"), we experiment with filtering strategies for quality. We subsample 50k masklets from SA-V, either randomly or by taking the masklets that have been edited the most by annotators. Filtering based on the number of edited frames leads to strong performance using just 25% of the data, and outperforms random sampling. However, it is worse than using all 190k SA-V masklets.\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} | mIoU |\\\n| Setting | SA-V val | Intern-test | MOSE dev | 9 zero-shot | SA-23 |\\\n| SA-1B + SA-V 50k random | 63.7 | 70.3 | 72.3 | 68.7 | 59.1 |\\\n| SA-1B + SA-V 50k most edited | 66.2 | 73.0 | 72.5 | 69.2 | 58.6 |\\\n| SA-1B + SA-V | 69.9 | 73.8 | 73.9 | 70.8 | 59.8 |\\\n\\\nTable 9:\\\nWe train our model on different subsets of our SA-V Manual data: 50k randomly sampled masklets, 50k masklets with the most edited frames, and the full SA-V dataset (190k masklets).\\\n\\\n### 8.2 Model architecture ablations\\\n\\\nIn this section, we present model ablations that guided design decisions, conducted under a smaller model setup with 512 input resolution by default. For each ablation setting, we report segmentation accuracy for video (𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F}) and image (mIoU) tasks, and its relative video segmentation speed (the maximum inference throughput relative to the ablation default setup in gray).\\\nWe find design choices for image and video components to be largely decoupled – this can be attributed to our modular design and training strategy.\\\n\\\n#### 8.2.1 Capacity ablations\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| res. | MOSE dev | SA-V val | 9 zero-shot | speed | SA-23 |\\\n| 512 | 73.0 | 68.3 | 70.7 | 1.00×\\\\times | 59.7 |\\\n| 768 | 76.1 | 71.1 | 72.5 | 0.43×\\\\times | 61.0 |\\\n| 1024 | 77.0 | 70.1 | 72.3 | 0.22×\\\\times | 61.5 |\\\n\\\n(a)\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| #frames | MOSE dev | SA-V val | 9 zero-shot | speed | SA-23 |\\\n| 4 | 71.1 | 60.0 | 67.7 | 1.00×\\\\times | 60.1 |\\\n| 8 | 73.0 | 68.3 | 70.7 | 1.00×\\\\times | 59.7 |\\\n| 10 | 74.5 | 68.1 | 71.1 | 1.00×\\\\times | 59.9 |\\\n\\\n(b)\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| #mem. | MOSE dev | SA-V val | 9 zero-shot | speed | SA-23 |\\\n| 4 | 73.5 | 68.6 | 70.5 | 1.01×\\\\times | 59.9 |\\\n| 6 | 73.0 | 68.3 | 70.7 | 1.00×\\\\times | 59.7 |\\\n| 8 | 73.2 | 69.0 | 70.7 | 0.93×\\\\times | 59.9 |\\\n\\\n(c)\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| chan. dim. | MOSE dev | SA-V val | 9 zero-shot | speed | SA-23 |\\\n| 64 | 73.0 | 68.3 | 70.7 | 1.00×\\\\times | 59.7 |\\\n| 256 | 73.4 | 66.4 | 70.0 | 0.92×\\\\times | 60.0 |\\\n\\\n(d)\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| (#sa, #ca) | MOSE dev | SA-V val | 9 zero-shot | speed | SA-23 |\\\n| (2, 2) | 73.3 | 67.3 | 70.2 | 1.13×\\\\times | 59.9 |\\\n| (3, 2) | 72.7 | 64.1 | 69.5 | 1.08×\\\\times | 60.0 |\\\n| (4, 4) | 73.0 | 68.3 | 70.7 | 1.00×\\\\times | 59.7 |\\\n\\\n(e)\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| img. enc. | MOSE dev | SA-V val | 9 zero-shot | speed | SA-23 |\\\n| S | 70.9 | 65.5 | 69.4 | 1.33×\\\\times | 57.8 |\\\n| B+ | 73.0 | 68.3 | 70.7 | 1.00×\\\\times | 59.7 |\\\n| L | 75.0 | 66.3 | 71.9 | 0.60×\\\\times | 61.1 |\\\n\\\n(f)\\\n\\\nTable 10: Capacity ablations. We ablate modeling capacity along input size (resolution, #frames), memory size (#memories, memory channel dim) and model size (memory attention, image encoder). Ablation defaults in gray.\\\n\\\n##### Input size.\\\n\\\nDuring training, we sample sequences of frames of fixed resolution and fixed length (here denoted by # frames). We ablate their impact in Tables LABEL:tab:tab-results-input-resolution, LABEL:tab:tab-results-input-frames. A higher resolution leads to significant improvements across image and video tasks, and we use an input resolution of 1024 in our final model. Increasing the number of frames brings notable gains on video benchmarks and we use a default of 8 to balance speed and accuracy.\\\n\\\n##### Memory size.\\\n\\\nIncreasing the (maximum) number of memories, N𝑁N, generally helps the performance although there could be some variance, as in Table LABEL:tab:tab-results-memory-num-memories. We use a default value of 6 past frames to strike a balance between temporal context length and computational cost. Using fewer channels for memories does not cause much performance regression as in Table LABEL:tab:tab-results-memory-channels, while making the memory required for storage 4×\\\\times smaller.\\\n\\\n##### Model size.\\\n\\\nMore capacity in the image encoder or memory-attention (#self-/#cross-attention blocks) generally leads to improved results, as shown in Tables LABEL:tab:tab-results-memory-attention-size, LABEL:tab:tab-results-image-encoder. Scaling the image encoder brings gains on both image and video metrics, while scaling the memory-attention only improves video metrics. We default to using a B+ image encoder, which provides a reasonable balance between speed and accuracy.\\\n\\\n#### 8.2.2 Relative positional encoding\\\n\\\n|     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| RPB in img. enc. | 2d-RoPE in mem. attn. | MOSE dev | SA-V val | LVOSv2 val | 9 zero-shot | speed | SA-23 |\\\n|  | ✓ | 73.0 | 68.3 | 71.6 | 70.7 | 1.00×\\\\times | 59.7 |\\\n| ✓ | ✓ | 73.6 | 67.9 | 71.0 | 71.5 | 0.93×\\\\times | 60.0 |\\\n|  |  | 72.8 | 67.1 | 70.3 | 70.3 | 1.04×\\\\times | 59.9 |\\\n\\\nTable 11: Relative positional encoding. We use 2d-RoPE in memory attention while removing RPB from the image encoder by default (gray). Removing RPB also allows us to enable FlashAttention-2 (Dao, [2023])), which gives a significant speed boost at 1024 resolution. At the higher resolution of 1024, the speed gap between 2d-RoPE (1st row) and the no RoPE baseline (3rd row) becomes much smaller.\\\n\\\nBy default, we always use absolute positional encoding in both the image encoder as well as memory attention. In Table [11]Table 11 ‣ 8.2.2 Relative positional encoding ‣ 8.2 Model architecture ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\"), we study relative positional encoding design choices. Here we also evaluate on LVOSv2 (Hong et al., [2024])) with 3 clicks on the 1st frame as a benchmark for long-term video object segmentation.\\\n\\\nWhile SAM (Kirillov et al., [2023])) follows Li et al. ( [2022b])) in adding relative positional biases (RPB) to all image encoder layers, Bolya et al. ( [2023])) improve upon this by removing RPB in all but the global attention layers while adopting “absolute-win” positional encoding which brings large speed gains. We improve upon this further by removing all RPB from the image encoder, with no performance regression on SA-23 and minimal regression on video benchmarks (see Table [11]Table 11 ‣ 8.2.2 Relative positional encoding ‣ 8.2 Model architecture ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\")), while giving a significant speed boost at 1024 resolution. We also find it is beneficial to use 2d-RoPE (Su et al., [2021]); Heo et al., [2024])) in the memory attention.\\\n\\\n#### 8.2.3 Memory architecture ablations\\\n\\\n##### Recurrent memory.\\\n\\\nWe investigate the effectiveness of feeding the memory features to a GRU before adding them to the memory bank. Similar to § [8.2.2]Relative positional encoding ‣ 8.2 Model architecture ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\"), we also evaluate on LVOSv2 as an additional benchmark for long-term object segmentation. While prior works have commonly employed GRU (Cho et al., [2014])) states as a means of incorporating memory into the tracking process, our findings in Table [12]Table 12 ‣ Object pointers. ‣ 8.2.3 Memory architecture ablations ‣ 8.2 Model architecture ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\") suggest that this approach does not provide an improvement (except slightly on LVOSv2). Instead, we find it sufficient to directly store the memory features in the memory bank, which is both simpler and more efficient.\\\n\\\n##### Object pointers.\\\n\\\nWe ablate the impact of cross-attending to the object pointer vectors from the mask decoder output in other frames (see § [4]Model ‣ SAM 2: Segment Anything in Images and Videos\")). The results presented in Table [12]Table 12 ‣ Object pointers. ‣ 8.2.3 Memory architecture ablations ‣ 8.2 Model architecture ablations ‣ 8 Data and model ablations ‣ SAM 2: Segment Anything in Images and Videos\") show that while cross-attending to object pointers does not enhance average performance across the 9 zero-shot datasets, it significantly boosts performance on SA-V val  dataset as well as on the challenging LVOSv2 benchmark (validation split). Hence, we default to cross-attending to object pointers together with the memory bank.\\\n\\\n|     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n|  | 𝒥&ℱ𝒥ℱ\\\\mathcal{J}\\\\&\\\\mathcal{F} |  | mIoU |\\\n| Object Pointers | GRU | MOSE dev | SA-V val | LVOSv2 val | 9 zero-shot | speed | SA-23 |\\\n|  |  | 73.1 | 64.5 | 67.0 | 70.9 | 1.00×\\\\times | 59.9 |\\\n|  | ✓ | 72.3 | 65.3 | 68.9 | 70.5 | 0.97×\\\\times | 60.0 |\\\n| ✓ |  | 73.0 | 68.3 | 71.6 | 70.7 | 1.00×\\\\times | 59.7 |\\\n\\\nTable 12: Ablations on memory design. We use object pointers by default (gray) and also study recurrent GRU memory.\\\n\\",
            "citations": null
          },
          "9 Conclusion\\": {
            "content": "\\\nWe present a natural evolution of Segment Anything into the video domain, based on three key aspects: (i) extending the promptable segmentation task to video, (ii) equipping the SAM architecture to use memory when applied to video, and (iii) the diverse SA-V dataset for training and benchmarking video segmentation.\\\nWe believe SAM 2 marks a significant advancement in visual perception, positioning our contributions as milestones that will propel further research and applications in the field.\\\n\\",
            "citations": null
          },
          "10 Acknowledgements\\": {
            "content": "\\\nWe thank Alexander Kirillov and Jitendra Malik for discussions on project direction. Thanks to Andrew Huang, Sahir Gomez, Miguel Martin, Devansh Kukreja, and Somya Jain for work on the demo, and to Aohan Lin and Meng Wang for creating the dataset visualizer. We thank Shoubhik Debnath and Sagar Vaze for their work on dataset preparation. Thanks also to William Ngan and Sasha Mitts for their design expertise and to Grant Gardner and George Orlin for leading product management. We are grateful to Joelle Pineau, Daniel Bolya, Kate Saenko, Pengchuan Zhang, and Christopher Chedeau, for valuable discussions. Thanks to Rene Martinez Doehner and Baishan Guo for data support, and to our annotation engineering and management partners: Robert Kuo, Rishi Godugu, Bob Kamma, Ida Cheng, Claudette Ward, Kai Brown, Jake Kinney, Jenny Truong, and Karen Bergan. Thanks to Vispi Cassod, Parth Malani, Shiva Koduvayur, Alexander Miller, and Caleb Ho for their support with compute and infra. Finally, we thank Azita Shokrpour, Mallika Malhotra, Rodrick Shepard, Jonathan Torres, Luc Dahlin, David Soofian, Alex Bosenberg, and Amanda Kallet for project-level support.\\\n\\",
            "citations": null
          }
        },
        "abstract": "We present Segment Anything Model 2 (SAM 2), a foundation model towards\nsolving promptable visual segmentation in images and videos. We build a data\nengine, which improves model and data via user interaction, to collect the\nlargest video segmentation dataset to date. Our model is a simple transformer\narchitecture with streaming memory for real-time video processing. SAM 2\ntrained on our data provides strong performance across a wide range of tasks.\nIn video segmentation, we observe better accuracy, using 3x fewer interactions\nthan prior approaches. In image segmentation, our model is more accurate and 6x\nfaster than the Segment Anything Model (SAM). We believe that our data, model,\nand insights will serve as a significant milestone for video segmentation and\nrelated perception tasks. We are releasing our main model, dataset, as well as\ncode for model training and our demo."
      }
    },
    "key_map": {
      "2005.14165": "bib.bib2",
      "1512.03012": "bib.bib4",
      "2403.20309": "bib.bib12",
      "2408.00714": "bib.bib35"
    }
  }
}