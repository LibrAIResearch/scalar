{
  "title": "LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models",
  "abstract": "Emerging 3D geometric foundation models, such as DUSt3R, offer a promising\napproach for in-the-wild 3D vision tasks. However, due to the high-dimensional\nnature of the problem space and scarcity of high-quality 3D data, these\npre-trained models still struggle to generalize to many challenging\ncircumstances, such as limited view overlap or low lighting. To address this,\nwe propose LoRA3D, an efficient self-calibration pipeline to\n$\\textit{specialize}$ the pre-trained models to target scenes using their own\nmulti-view predictions. Taking sparse RGB images as input, we leverage robust\noptimization techniques to refine multi-view predictions and align them into a\nglobal coordinate frame. In particular, we incorporate prediction confidence\ninto the geometric optimization process, automatically re-weighting the\nconfidence to better reflect point estimation accuracy. We use the calibrated\nconfidence to generate high-quality pseudo labels for the calibrating views and\nuse low-rank adaptation (LoRA) to fine-tune the models on the pseudo-labeled\ndata. Our method does not require any external priors or manual labels. It\ncompletes the self-calibration process on a $\\textbf{single standard GPU within\njust 5 minutes}$. Each low-rank adapter requires only $\\textbf{18MB}$ of\nstorage. We evaluated our method on $\\textbf{more than 160 scenes}$ from the\nReplica, TUM and Waymo Open datasets, achieving up to $\\textbf{88% performance\nimprovement}$ on 3D reconstruction, multi-view pose estimation and novel-view\nrendering.",
  "paper_id": "http://arxiv.org/abs/2412.07746v1",
  "markdown_content": "# LoRA3D: Low-Rank Self-Calibration of    3D Geometric Foundation Models\n\nZiqi Lu1,2, Heng Yang1,3, Danfei Xu1,4, Boyi Li1,5, Boris Ivanovic1, Marco Pavone1,6,\n\nYue Wang1,7\n\n1NVIDIA Research,\n2Massachusetts Institute of Technology,\n3Harvard University,\n\n4Georgia Institute of Technology,\n5University of California, Berkeley,\n6Stanford University,\n\n7University of Southern California\n\nziqilu@mit.edu, {hengy, danfeix, boyil, bivanovic}@nvidia.com,\n\npavone@stanford.edu, yue.w@usc.edu\n\n###### Abstract\n\nEmerging 3D geometric foundation models, such as DUSt3R (Wang et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib31 \"\")), offer a promising approach for in-the-wild 3D vision tasks.\nHowever, due to the high-dimensional nature of the problem space and scarcity of high-quality 3D data,\nthese pre-trained models still struggle to generalize to many challenging circumstances,\nsuch as limited view overlap or low lighting.\nTo address this, we propose LoRA3D, an efficient self-calibration pipeline to _specialize_ the pre-trained models to target scenes using their own multi-view predictions.\nTaking sparse RGB images as input, we leverage robust optimization techniques to refine multi-view predictions and align them into a global coordinate frame.\nIn particular, we incorporate prediction confidence into the geometric optimization process,\nautomatically re-weighting the confidence to better reflect point estimation accuracy.\nWe use the calibrated confidence to generate high-quality pseudo labels for the calibrating views and use low-rank adaptation (LoRA) to fine-tune the models on the pseudo-labeled data.\nOur method does not require any external priors or manual labels. It completes the self-calibration process on a single standard GPU within just 5 minutes.\nEach low-rank adapter requires only 18MB of storage.\nWe evaluated our method on more than 160 scenes from the Replica, TUM and Waymo Open datasets,\nachieving up to 88% performance improvement on 3D reconstruction, multi-view pose estimation and novel-view rendering.\n\n## 1 Introduction\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/fig1.png)Figure 1:\nGiven sparse RGB images, our self-calibration pipeline efficiently specializes a pre-trained 3D foundation model to a target scene to improve its performance for a variety of 3D vision tasks.\n\nRecently, many 3D geometric foundation models have emerged as a potential solution for in-the-wild 3D computer vision tasks such as 3D reconstruction, camera pose estimation and novel view rendering (Wang et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib31 \"\"); Barroso-Laguna et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib1 \"\"); Leroy et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib14 \"\"); Hong et al., [2023](https://ar5iv.org/html/2412.07746#bib.bib10 \"\")).\nThese models, typically enabled by large scale Transformer pre-training, can quickly establish cross-view correspondences and directly regress 3D scene geometry from sparse RGB images.\nThey generalize to a broad range of data and exhibit a strong zero-shot performance on novel tasks.\n\nHowever, the performance of these pre-trained models can falter under challenging circumstances.\nFor instance, as highlighted in the upper left sub-figure in Fig. [1](https://ar5iv.org/html/2412.07746#S1.F1 \"Figure 1 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), DUSt3R’s pairwise reconstruction accuracy significantly degrades under low visual overlaps, where certain regions are observed from only a single viewpoint.\nThis decline is rooted in the inherent complexity of 3D geometric inference task,\nwhich requires much larger-scale data to fully represent the distribution of real-world 3D data.\nUnfortunately, the difficulty of annotating in-the-wild 3D data has led to the shortage of high-quality training datasets, limiting the performance of the pre-trained models.\n\nTo mitigate the problem, we propose an efficient self-calibration pipeline (Fig. [2](https://ar5iv.org/html/2412.07746#S1.F2 \"Figure 2 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\ntaking only sparse RGB images to specialize pre-trained 3D foundation models to the target scene.\nOur method requires no manual labeling, camera calibration, or external priors.\nWe only leverage the multi-view consistency of 3D point positions to refine and select pre-trained models’ predictions for pseudo labeling.\nTo ensure the pseudo label accuracy,\nwe develop a robust global optimization method to align and refine multi-view predictions while calibrating the prediction confidence.\nThe calibrated confidence strongly correlates with pseudo-label accuracy,\nallowing us to select high-confidence data for LoRA fine-tuning of the pre-trained model.\nOur method is tested on 161 test scenes for a variety of 3D vision tasks.\nIt is able to finish the self-calibration process within 5 minutes on a single GPU and deliver performance improvements of up to 88%.\nThe major contributions of our work include\n(1) the self-calibration pipeline, (2) the robust global optimization method, and (3) the efficient LoRA fine-tuning strategy for DUSt3R self-calibration.\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/method.png)Figure 2:\nOverview of our self-calibration pipeline. (a) Predict: We pair sparse input RGB images and use the pre-trained 3D foundation model to predict per-pair point maps and confidence maps. (b) Robust Global Optimization: We apply robust optimization techniques to concurrently refine multi-view point predictions and calibrate prediction confidence. (c) Confidence-Based Pseudo-Labeling: Refined point maps with high calibrated confidence are used to generate pseudo-labels on calibration views. (d) LoRA Fine-Tuning: Using the pseudo-labeled data, we efficiently fine-tune the pre-trained model with LoRA. While the figure illustrates our method using DUSt3R, our approach generalizes to other 3D foundation models.\n\n## 2 Related Work\n\n### 2.1 Foundation model specialization\n\nFoundation model specialization through fine-tuning or adaptation has become the standard approach to customizing pre-trained foundation models for specific tasks or domains.\nVarious methods have been developed for the specialization of large language models (Brown, [2020](https://ar5iv.org/html/2412.07746#bib.bib2 \"\"); Gururangan et al., [2020](https://ar5iv.org/html/2412.07746#bib.bib8 \"\")), vision-language models (Liu et al., [2024b](https://ar5iv.org/html/2412.07746#bib.bib17 \"\"); [a](https://ar5iv.org/html/2412.07746#bib.bib16 \"\")), and vision foundation models (Hu et al., [2023](https://ar5iv.org/html/2412.07746#bib.bib12 \"\"); Yue et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib33 \"\")).\nThese approaches typically employ parameter-efficient adaptation techniques (Hu et al., [2021](https://ar5iv.org/html/2412.07746#bib.bib11 \"\"); Dettmers et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib3 \"\"); He et al., [2022](https://ar5iv.org/html/2412.07746#bib.bib9 \"\")) to adapt the pre-trained models in either a supervised or unsupervised fashion.\nHowever, few works have explored the specialization of 3D geometric foundation models.\nMASt3R (Leroy et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib14 \"\")) and Spanner3D (Wang & Agapito, [2024](https://ar5iv.org/html/2412.07746#bib.bib29 \"\")) fine-tuned DUSt3R (Wang et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib31 \"\")) to re-purpose it for image matching and incremental reconstruction respectively.\nJiang et al. ( [2024](https://ar5iv.org/html/2412.07746#bib.bib13 \"\")) applied self-training to scale up large reconstruction models (Hong et al., [2023](https://ar5iv.org/html/2412.07746#bib.bib10 \"\")) with real-world images.\nHowever, most of these methods still rely on vast amounts of labeled data.\nIn contrast, our method uses only sparse RGB images for self-calibration and requires no ground truth labels.\n\n### 2.2 Self-supervised geometric perception\n\nSelf-supervised learning has been successfully applied to a range of geometric perception tasks, including monocular depth prediction (Godard et al., [2019](https://ar5iv.org/html/2412.07746#bib.bib7 \"\")), optical flow prediction (Liu et al., [2019](https://ar5iv.org/html/2412.07746#bib.bib18 \"\")), camera pose estimation (Yang et al., [2021](https://ar5iv.org/html/2412.07746#bib.bib32 \"\")), and structure-from-motion (Zhou et al., [2017](https://ar5iv.org/html/2412.07746#bib.bib35 \"\")), significantly enhancing the performance of pre-trained geometric models.\nAmong these, Yang et al. ( [2021](https://ar5iv.org/html/2412.07746#bib.bib32 \"\")) is particularly relevant to our approach,\nas it utilizes robust optimization techniques to generate geometric pseudo-labels for model fine-tuning.\nHowever, this method and most others are tailored to adapt smaller-scale pre-trained models for specific tasks.\nIn this work, we extend the pseudo-labeling strategy for self-supervised learning to 3D foundation models.\nLeveraging the versatility of these models, we can improve their performance on various 3D vision tasks.\n\n## 3 Preliminaries\n\nOur pipeline is primarily tested on DUSt3R (Wang et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib31 \"\")).\nBelow, we provide key details about DUSt3R to give readers the necessary context for understanding our contributions.\n\n### 3.1 DUSt3R\n\nAs shown in Fig. [2](https://ar5iv.org/html/2412.07746#S1.F2 \"Figure 2 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), DUSt3R takes an RGB image pair (Ii,Ij)(I\\_{i},I\\_{j}) as input and directly regresses the pixel-wise point maps and confidence maps:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (Xi,i,Ci,i),(Xj,i,Cj,i)=DUSt3R​(Ii,Ij)\\\\displaystyle(X^{i,i},C^{i,i}),(X^{j,i},C^{j,i})=\\\\text{DUSt3R}(I^{i},I^{j}) |  | (1) |\n\nHere, Xi,i,Xj,i∈ℝH×W×3X^{i,i},X^{j,i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3} are the point maps for view ii and view jj,\nboth expressed in the camera coordinate frame of view ii,\nand are regressed up to a unknown scale.\nTheir corresponding confidence maps are denoted as Ci,i,Cj,i∈ℝH×WC^{i,i},C^{j,i}\\\\in\\\\mathbb{R}^{H\\\\times W}111See App. [A.1](https://ar5iv.org/html/2412.07746#A1.SS1 \"A.1 DUSt3R training loss ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for details on the training loss of DUSt3R..\n\n### 3.2 Recovering camera parameters\n\nThe camera intrinsics can be recovered from the predicted point maps in Eq. [1](https://ar5iv.org/html/2412.07746#S3.E1 \"In 3.1 DUSt3R ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nAssuming a pinhole camera model with square pixels and principal points at image centers,\nthe camera ii’s focal length fif\\_{i} can be estimated by solving the following optimization problem using Weiszfeld algorithm:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | fi∗=arg​minfi​∑p=1H​WCpi,i​‖(up′,vp′)−fi​(Xp,0i,i,Xp,1i,i)/Xp,2i,i‖\\\\displaystyle f\\_{i}^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{f\\_{i}}\\\\sum\\_{p=1}^{HW}C\\_{p}^{i,i}\\\\left\\\\\\|\\\\left(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p}\\\\right)-f\\_{i}(X\\_{p,0}^{i,i},X\\_{p,1}^{i,i})/{X\\_{p,2}^{i,i}}\\\\right\\\\\\| |  | (2) |\n\nwhere (up′,vp′)=(up−W/2,vp−H/2)(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p})=(u\\_{p}-W/2,v\\_{p}-H/2) represents the re-centered image coordinates for pixel pp.\n\nThe relative camera poses are estimated by comparing the predictions for image pair (Ii,Ij)(I\\_{i},I\\_{j}) and (Ij,Ii)(I\\_{j},I\\_{i}).\nWith point maps Xi,iX^{i,i} and Xi,jX^{i,j}, we can apply Procrustes alignment (Luo & Hancock, [1999](https://ar5iv.org/html/2412.07746#bib.bib19 \"\")) to estimate the relative pose Ti,j∈SE​(3)T\\_{i,j}\\\\in\\\\text{SE}(3) from camera ii to jj and the point map scale σi,j\\\\sigma\\_{i,j}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (Ti,j,σi,j)∗=arg⁡minTi,j,σi,j​∑pCpi,i​Cpi,j​‖σi,j​Ti,j​Xpi,i−Xpi,j‖2\\\\displaystyle(T\\_{i,j},\\\\sigma\\_{i,j})^{\\*}=\\\\underset{T\\_{i,j},\\\\sigma\\_{i,j}}{\\\\arg\\\\min}\\\\sum\\_{p}C\\_{p}^{i,i}C\\_{p}^{i,j}\\\\left\\\\\\|\\\\sigma\\_{i,j}T\\_{i,j}X\\_{p}^{i,i}-X\\_{p}^{i,j}\\\\right\\\\\\|^{2} |  | (3) |\n\nwhere we omit the homogenization of point maps for brevity.\n\n### 3.3 Multi-view point map alignment\n\nGiven multiple images {I1,I2,…,IN}\\\\{I\\_{1},I\\_{2},\\\\dots,I\\_{N}\\\\} captured in a 3D scene,\nthe multi-view DUSt3R-predicted point maps are aligned to form a global point cloud.\nDifferent from bundle adjustment, this alignment is formalized as an 3D-3D-projection-based optimization problem over a connectivity graph 𝒢​(𝒱,ℰ)\\\\mathcal{G}(\\\\mathcal{V},\\\\mathcal{E}),\nin which the vertices 𝒱\\\\mathcal{V} represent the NN images and the edges ℰ\\\\mathcal{E} represent all image pairs with visual overlaps.\n\nTo initialize the optimization parameters,\nthe highest-confidence spanning tree is extracted from the graph.\nAnchoring the most confident image pair at the origin,\nthe initial estimates of focal lengths, point map scales and relative poses, as derived from Eq. [2](https://ar5iv.org/html/2412.07746#S3.E2 \"In 3.2 Recovering camera parameters ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), [3](https://ar5iv.org/html/2412.07746#S3.E3 \"In 3.2 Recovering camera parameters ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), are propagated along the tree edges to all NN views,\nyielding initial focal lengths {fi\\|i=1,…,N}\\\\{f\\_{i}\\|i=1,\\\\dots,N\\\\}, point maps {χi∈ℝH×W×3}\\\\{\\\\chi^{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3}\\\\} and image-pair scales {σ(i,j)∈ℝ}\\\\{\\\\sigma^{(i,j)}\\\\in\\\\mathbb{R}\\\\} and poses {T(i,j)∈SE​(3)}\\\\{T^{(i,j)}\\\\in\\\\text{SE}(3)\\\\},\nall expressed in a unified global coordinate frame.\n\nThese initial estimates are further refined by minimizing the 3D-3D projection error between the global point maps χ\\\\chi and the transformed predicted point maps:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (χ,T,σ)∗=arg⁡minχ,T,σ​∑(i,j)∈ℰ∑v∈{i,j}∑p=1H​WCpv,i​‖χpv−σ(i,j)​T(i,j)​Xpv,i‖\\\\displaystyle(\\\\chi,T,\\\\sigma)^{\\*}=\\\\underset{\\\\chi,T,\\\\sigma}{\\\\arg\\\\min}\\\\sum\\_{(i,j)\\\\in\\\\mathcal{E}}\\\\sum\\_{v\\\\in\\\\{i,j\\\\}}\\\\sum\\_{p=1}^{HW}C\\_{p}^{v,i}\\\\left\\\\\\|\\\\chi\\_{p}^{v}-\\\\sigma^{(i,j)}T^{(i,j)}X\\_{p}^{v,i}\\\\right\\\\\\| |  | (4) |\n\nNote that the global point maps χpv\\\\chi\\_{p}^{v} can be further re-parameterize via depth back-projection:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | χpv=Tv​Kv−1​Dp​(up,vp,1)𝖳=Tv​Dpfv​(up′,vp′,1)𝖳\\\\displaystyle\\\\chi^{v}\\_{p}=T\\_{v}K\\_{v}^{-1}D\\_{p}(u\\_{p},v\\_{p},1)^{\\\\mathsf{T}}=T\\_{v}\\\\frac{D\\_{p}}{f\\_{v}}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}} |  | (5) |\n\nwhere KvK\\_{v} and TvT\\_{v} represent the intrinsics and extrinsics for view vv and DpD\\_{p} is the depth value for pixel pp.\nThe optimization problem can therefore be reformulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (T,σ,f,D)∗=arg⁡minT,σ,f,D​∑(i,j)∑v∑pCpv,i​‖Tv​Dpfv​(up′,vp′,1)𝖳−σ(i,j)​T(i,j)​Xpv,i‖\\\\displaystyle(T,\\\\sigma,f,D)^{\\*}=\\\\underset{T,\\\\sigma,f,D}{\\\\arg\\\\min}\\\\sum\\_{(i,j)}\\\\sum\\_{v}\\\\sum\\_{p}C\\_{p}^{v,i}\\\\left\\\\\\|T\\_{v}\\\\frac{D\\_{p}}{f\\_{v}}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}}-\\\\sigma^{(i,j)}T^{(i,j)}X\\_{p}^{v,i}\\\\right\\\\\\| |  | (6) |\n\nHere, the per-image-pair poses T(i,j)T^{(i,j)} and per-image poses TiT\\_{i} represent the same transformations but are parameterized separately to allow for additional optimization flexibility.\nThe optimization is solved by a few hundred steps of standard gradient descent.\nTo avoid trivial optimum of σ(i,j)=0\\\\sigma^{(i,j)}=0, Π(i,j)​σ(i,j)=1\\\\Pi\\_{(i,j)}\\\\sigma\\_{(i,j)}=1 is enforced during the optimization.\n\n## 4 Methodology\n\nWe aim to adapt a 3D geometric foundation model, such as DUSt3R (Wang et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib31 \"\")), to a target scene using a sparse set of uncalibrated RGB images {I1,I2,…,IN}\\\\{I\\_{1},I\\_{2},\\\\dots,I\\_{N}\\\\}. The goal is to enhance the pre-trained model’s performance on test images {IN+1,IN+2,…,IN+M}\\\\{I\\_{N+1},I\\_{N+2},\\\\dots,I\\_{N+M}\\\\} from the same scene. Our approach generates compact LoRA adapters, which integrate with the pre-trained model to produce a scene-calibrated model.\n\n### 4.1 Self-calibration pipeline\n\nFig. [2](https://ar5iv.org/html/2412.07746#S1.F2 \"Figure 2 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") shows our self-calibration pipeline.\nWe start by using the pre-trained DUSt3R, as in Eq. [1](https://ar5iv.org/html/2412.07746#S3.E1 \"In 3.1 DUSt3R ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), to predict point and confidence maps for all calibration image pairs.\nIn challenging conditions, such as under limited camera view overlap,\nDUSt3R’s predictions may include errors and outliers, and the prediction confidence may not precisely reflect the prediction accuracy\n(See Fig. [4](https://ar5iv.org/html/2412.07746#S4.F4 \"Figure 4 ‣ 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for an example of overconfident prediction).\nFor this reason, directly relying on predicted confidence for pseudo label selection may hurt the model performance (see Sec. [9](https://ar5iv.org/html/2412.07746#S5.F9 \"Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (a,b)).\n\nHowever, each 3D point in the scene is co-observed by many camera view pairs.\nWe could leverage accurate DUSt3R predictions from well-conditioned, e.g. high-visual-overlap, view pairs to refine and identify inaccurate point map predictions.\nWe therefore develop a robust multi-view point map alignment method (Sec. [4.2](https://ar5iv.org/html/2412.07746#S4.SS2 \"4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")) to (1) optimize the point map and (2) calibrate the prediction confidence.\nWe then use the refined point maps and calibrated confidence to pseudo-label the calibration images {Ii}i=1N\\\\{I\\_{i}\\\\}\\_{i=1}^{N} (Sec. [4.3](https://ar5iv.org/html/2412.07746#S4.SS3 \"4.3 Pseudo labeling with calibrated confidence ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\nafter which we fine-tune the pre-trained DUSt3R model using LoRA on the pseudo-labeled data (Sec. [4.4](https://ar5iv.org/html/2412.07746#S4.SS4 \"4.4 Fine-tuning with LoRA ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")).\n\n### 4.2 Robust multi-view point map alignment with confidence calibration\n\nWe develop a robust multi-view point map alignment method by incorporating the prediction confidence into the global optimization in Eq. [6](https://ar5iv.org/html/2412.07746#S3.E6 \"In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nSpecifically,\nwe re-parameterize the confidence term Cpv,iC\\_{p}^{v,i} in Eq. [6](https://ar5iv.org/html/2412.07746#S3.E6 \"In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") as an optimizable weight term wpv,iw\\_{p}^{v,i} to automatically tune each point prediction’s contribution to the optimization.\nWhile the predicted confidence can be imprecise in challenging cases,\nit still remains informative for prediction accuracy.\nThus we intend to introduce a regularization term that encourages the weights to remain close to the predicted confidence, and also avoid trivial solutions.\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x1.png)\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x2.png)\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x3.png)\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x4.png)(a) Image pair\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x5.png)(b) Pred. confidence\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x6.png)(c) Error map\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x7.png)(d) Pred. error v.s. Confidence\n\nFigure 4:\nPre-trained DUSt3R’s (b) prediction confidence and (c) error map on (a) an example image pair:\nIn cases of limited visual overlap, DUSt3R may produce overconfident predictions (★).\nOur robust multi-view alignment method effectively reduces this overconfidence,\nmaintaining high confidence for accurate predictions (+, ×\\\\times) and low confidence for outlier predictions (∙\\\\bullet).\n\nWe found our objective to be surprisingly aligned with Geman-McClure robust M-estimator (Geman et al., [1992](https://ar5iv.org/html/2412.07746#bib.bib6 \"\")),\nwhich essentially uses a regularization term (an outlier process in robust optimization terminology) to encourage weights to be close to unity in least-squares optimizations.\nInspired by this, we designed our regularization term to follow a similar structure.\nThe optimization in Eq. [6](https://ar5iv.org/html/2412.07746#S3.E6 \"In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") is therefore reformulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (T,σ,f,D,𝒲)∗=arg​minT,σ,f,D,𝒲​∑(i,j)∑v∑pwpv,i​‖epv,i‖+μ​(wpv,i−Cpv,i)2\\\\displaystyle(T,\\\\sigma,f,D,\\\\mathcal{W})^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{T,\\\\sigma,f,D,\\\\mathcal{W}}\\\\sum\\_{(i,j)}\\\\sum\\_{v}\\\\sum\\_{p}w\\_{p}^{v,i}\\\\\\|e\\_{p}^{v,i}\\\\\\|+\\\\mu(\\\\sqrt{w\\_{p}^{v,i}}-\\\\sqrt{C\\_{p}^{v,i}})^{2} |  | (7) |\n\nwhere epv,i=Tv​Dp​(up′,vp′,1)𝖳/fv−σ(i,j)​T(i,j)​Xpv,ie^{v,i}\\_{p}=T\\_{v}D\\_{p}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}}/f\\_{v}-\\\\sigma^{(i,j)}T^{(i,j)}X\\_{p}^{v,i} represents the pixel-wise residual error and μ\\\\mu is a constant hyper-parameter to control the regularization strength.\n\nRather than updating the weights in the joint optimization loss Eq. [7](https://ar5iv.org/html/2412.07746#S4.E7 \"In 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") via gradient back-propagation, we draw inspiration from the iterative re-weighted least squares approach (Rao & Kreutz-Delgado, [1999](https://ar5iv.org/html/2412.07746#bib.bib20 \"\")) for robust M-estimation,\nto derive a closed-form weight update rule for fast confidence re-weighting:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | wpv,i=Cpv,i/(1+‖epv,i‖/μ)2\\\\displaystyle w\\_{p}^{v,i}=C\\_{p}^{v,i}/(1+\\\\\\|e\\_{p}^{v,i}\\\\\\|/\\\\mu)^{2} |  | (8) |\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x8.png)\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x9.png)\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x10.png)\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x11.png)\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x12.png)(a) Calibrated confidence\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x13.png)(b) Point estimation error\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x14.png)(c) Pixels to pseudo-label\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x15.png)(d) Pseudo labels\n\nFigure 5:\nPseudo-labeling with (a) calibrated confidence, which\nis a good measure of the (b) point estimation accuracy.\nWe select high-calibrated-confidence point predictions as pseudo labels (d) for DUSt3R finetuning.\n\nWith this update rule, we can still solve the original optimization problem (Eq. [6](https://ar5iv.org/html/2412.07746#S3.E6 \"In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")) while periodically applying the weight updates.\nAs demonstrated in Appendix [A.2](https://ar5iv.org/html/2412.07746#A1.SS2 \"A.2 Derivation of weight update rule ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), this is equivalent to solving the joint optimization.\n\nThe weight update rule can be understood as follows:\npoint predictions with lower residual errors,\nmeaning those that are more consistent with predictions from other image pairs,\nwill maintain confidence similar to the predicted value.\nIn contrast, point predictions that are inconsistent across views will have their confidence significantly reduced.\nThis method effectively minimizes confidence for overly confident predictions, as illustrated in Fig. [4](https://ar5iv.org/html/2412.07746#S4.F4 \"Figure 4 ‣ 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"),\nensuring that confidence becomes more closely correlated with point estimation accuracy and provides better guidance for global optimization and pseudo-labeling.\n\n### 4.3 Pseudo labeling with calibrated confidence\n\nWe use the calibrated confidence and optimized point maps for confidence-based pseudo-labeling.\nTo compute pseudo labels for the calibration image pairs,\nwe need to transform the global optimization results from Eq. [7](https://ar5iv.org/html/2412.07746#S4.E7 \"In 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") to local image-pair coordinate frame.\nFollowing Eq. [5](https://ar5iv.org/html/2412.07746#S3.E5 \"In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"),\nwe back-project the optimized depth maps DpD\\_{p} to 3D and transform the points to the image-pair coordinate frame.\nWe then threshold the point estimations with a confidence cutoff wcutoffw\\_{\\\\text{cutoff}} and retain the high-confidence ones as pseudo labels.\nThe pseudo labeling rule can be summarized as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | X~pj,i=Ti∗−1​Tj∗​Dp∗fj∗​(up′,vp′,1)𝖳,where​p∈{p\\|wp∗j,i>wcutoff}\\\\displaystyle\\\\tilde{X}^{j,i}\\_{p}=T\\_{i}^{\\*-1}T^{\\*}\\_{j}\\\\frac{D^{\\*}\\_{p}}{f^{\\*}\\_{j}}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}},\\\\quad\\\\text{where}\\ p\\\\in\\\\{p\\|w\\_{p}^{\\*j,i}>w\\_{\\\\text{cutoff}}\\\\} |  | (9) |\n\nWe experimentally found that setting wcutoff=1.5w\\_{\\\\text{cutoff}}=1.5 works effectively for most test scenes.\n\nNote that our method is naturally robust to dynamic elements in the scene (See Tab. [3](https://ar5iv.org/html/2412.07746#S5.T3 \"Table 3 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")).\nThis is because the dynamic points break the multi-view consistency assumption and will be filtered out by pseudo labeling with calibrated confidence.\n\n### 4.4 Fine-tuning with LoRA\n\nOn the pseudo-labeled data, we fine-tune the pre-trained DUSt3R with LoRA (Hu et al., [2021](https://ar5iv.org/html/2412.07746#bib.bib11 \"\")) and the same pre-training loss (as Eq. [12](https://ar5iv.org/html/2412.07746#A1.E12 \"In A.1 DUSt3R training loss ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")).\nLoRA freezes the pretrained model weights and injects trainable rank decomposition matrices into layers of Transformer architecture, greatly reducing the number of trainable parameters.\nThis (1) improves the runtime- and memory-efficiency of self-calibration and\n(2) reduces the catastrophic forgetting of the pre-training data.\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x16.png)Figure 6:\nWhat is the best DUSt3R fine-tuning strategy?\nWe plot the mean prediction errors on test images against the number of trainable parameters for various fine-tuning options on an example test scene (Replica “office0”).\nWe found adapting all attention weights with rank-16 LoRA (i.e. ★) achieves the best trade-off between performance and efficiency on most test scenes.\n\nTo find the optimal DUSt3R fine-tuning strategy, we conducted extensive experiments to compare different fine-tuning options across multiple test scenes.\nPlease see Fig. [6](https://ar5iv.org/html/2412.07746#S4.F6 \"Figure 6 ‣ 4.4 Fine-tuning with LoRA ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for an example, where we plot the test errors (defined in Sec. [5](https://ar5iv.org/html/2412.07746#S5 \"5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")) against trainable parameter counts for different LoRA and direct fine-tuning strategies.\nWe found adapting all attention weights with rank-16 LoRA often leads to the best trade-off between performance and efficiency.\nIt reduces the number of trainable parameters by more than 99% and has a on-par performance with directly fine-tuning the attention or all weights.\n\nUsing rank-16 LoRA, fine-tuning on 10 calibration images converges in under 3.5 minutes with a batch size of 2.\nPeak GPU memory usage during fine-tuning stays under 20GB,\nenabling the process to run on a single standard GPU.\nAnd each LoRA adapter require less than 18MB of disk storage.\n\n## 5 Experiments\n\nWe evaluated our method on 161 test scenes for the tasks of 3D reconstruction, multi-view camera parameter estimation and novel view rendering.\n\nDatasets\nWe tested our method on all available test scenes from the Replica (Straub et al., [2019](https://ar5iv.org/html/2412.07746#bib.bib25 \"\")) and Waymo Open Dataset (Sun et al., [2020](https://ar5iv.org/html/2412.07746#bib.bib27 \"\")),\nas well as on three test scenes from the TUM RGBD dataset (Schubert et al., [2018](https://ar5iv.org/html/2412.07746#bib.bib23 \"\")) that are most frequently tested in literature.\nThis amounts to a total of 161 test scenes, all of which are distinct from the DUSt3R pre-training scenes.\n\nThe Replica dataset comprises eight indoor scenes, each containing 2000 RGB-D images rendered by Sucar et al. ( [2021](https://ar5iv.org/html/2412.07746#bib.bib26 \"\")).\nFor each scene, the first 1000 RGB images serve as the calibration split and the remaining as the test split.\nThe depth images are not utilized during self-calibration;\nthey are used solely to compute the ground truth point maps.\nWe randomly sample222\nUnless specified otherwise, all random sampling use seed=0 for re-producibility.\n10 images from the calibration split as the calibration images.\n\nThe Waymo Open Dataset has in total 150 test data segments.\nIn each segment, only forward-looking camera images are adopted,\nwhere the first 100 form the calibration split and the remaining ∼\\\\sim100 images belong to the test split.\nWe sample 10 images from the calibration split for self-calibration.\n\nPlease refer to App. [A.4](https://ar5iv.org/html/2412.07746#A1.SS4 \"A.4 Evaluation results on TUM RGBD dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for details about the data splits and tasks for the TUM RGBD dataset.\n\nTasks\nOn the Replica dataset, we evaluate our method for pairwise and multi-view reconstruction tasks.\nFor pairwise reconstruction, we sample 100 image pairs with visual overlaps from the test split as test images.\nFor multi-view reconstruction, we sample 10 views from the test split.\n\nOn the Waymo dataset, we evaluate our method for the tasks of multi-view camera parameter estimation and novel view rendering.\nFor novel view rendering, we use InstantSplat (Fan et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib5 \"\")),\nwhich adopts DUSt3R-predicted point cloud and camera parameters as initialization,\nto train 3D Gaussian Splatting (3DGS) models and render novel-view images.\nFrom the test split, we select every 10th images (i.e. 0th, 10th, 20th, ⋯\\\\cdots)\nfor camera pose estimation evaluation and InstantSplat training.\nImages at indices 5, 15, 25, ⋯\\\\cdots are used as novel views to evaluate the InstantSplat renders.\nNote that although our method is robust to dynamic environments,\nInstantSplat relies on the static world assumption to train 3DGS.\nWe therefore selected segments 10084, 10649, and 10802 –\nthat are mostly static – from the first 10 test segments for the novel view rendering evaluation.\n\nBaselines\nThe two most important comparison models for our self-calibrated DUSt3R (DUSt3R-Self-Calib) are the pre-trained DUSt3R (DUSt3R-Pretrain)\nand the fine-tuned DUSt3R on ground truth point maps of calibration image pairs (DUSt3R-GT-FT).\nThe ground-truth fine-tuned model is considered as the upper limit of ours, serving as an oracle model.\n\nBoth methods are evaluated in most tests,\nwith the exception of the TUM dataset, where no ground truth depth is available.\nIn this case, we use noisy depth measurements for fine-tuning,\nreferred to as DUSt3R-Depth-FT.\nOn the Waymo dataset, we use the high-quality Lidar point clouds for ground-truth-based fine-tuning.\nFor a fair comparison, the training hyperparameters for ground-truth and depth-based fine-tuning are kept consistent with those used in our method.\n\nFor multi-view stereo reconstruction,\nwe also use COLMAP (MVS)(Schonberger & Frahm, [2016](https://ar5iv.org/html/2412.07746#bib.bib21 \"\"); Schönberger et al., [2016](https://ar5iv.org/html/2412.07746#bib.bib22 \"\")), FlowMap(Smith et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib24 \"\")) and MASt3R(Duisterhof et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib4 \"\")) as baselines,\nall of which perform dense reconstructions with un-calibrated images.\n\nCOLMAP (MVS) is a standard SfM and MVS pipeline for which\nwe adopt the default setups.\n\nFlowMap is a differentiable SfM model for RGB videos.\nIt relies on optical flow and point tracking algorithms to bootstrap its scene parameter optimization process.\n\nMASt3R re-purposes DUSt3R for image matching.\nBeyond 3D point regression, it establishes accurate cross-view correspondences, and leverages both 3D-3D and 2D-3D correspondences for global point map alignment.\nWe adopt the pre-trained MASt3R with default hyper-parameters.\n\nFor fair comparison in multi-view reconstruction, we use the same global optimization method for DUSt3R and its variants (as detailed in Sec. [3.3](https://ar5iv.org/html/2412.07746#S3.SS3 \"3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\nand retain all points for evaluation without applying confidence-based filtering to DUSt3R and MASt3R reconstructions.\n\nFor multi-view camera parameter estimation,\nwe use COLMAP, RelPose++(Lin et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib15 \"\")), PoseDiffusion(Wang et al., [2023](https://ar5iv.org/html/2412.07746#bib.bib30 \"\")),\nRayDiffusion(Zhang et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib34 \"\")), FlowMap(Smith et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib24 \"\")) and MASt3R(Duisterhof et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib4 \"\")) as the additional baselines.\n\nRelPose++ uses a pairwise scoring network and a multi-view reasoning transformer to predict multi-view camera poses.\n\nPoseDiffusion develops a diffusion-based bundle adjustment method to estimate multi-view camera parameters.\nA geometry-guided sampling (GGS) scheme is applied to enforce epipolar constraints across views.\nWe adopt the GGS-enabled PoseDiffusion with the CO3Dv2 checkpoint.\n\nRayDiffusion re-parameterize cameras as rays and applies a ray diffuser network to denoise camera rays and recover camera parameters.\n\nAll three methods above are pre-trained on domain-specific data without further fine-tuning.\n\nFor novel view rendering, we use the pre-trained,\nself-calibrated and finetuned DUSt3R for InstantSplat’s 3DGS initialization,\nand the different variants for InstantSplat are refered to as:\nInstantSplat(Fan et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib5 \"\")), InstantSplat-Self-Calib, InstantSplat-GT-FT.\n\nEvaluation Metrics\nFor DUSt3R pairwise reconstruction, we use the average point prediction error as the evaluation metric.\nThis is the average Euclidean distance calculated between the predicted and ground truth point maps within local image-pair coordinate frames,\nwith predicted maps normalized and re-scaled to align with ground truth.\n\nWe assess multi-view stereo reconstructions based on accuracy and completeness relative to the ground truth Replica mesh models (Straub et al., [2019](https://ar5iv.org/html/2412.07746#bib.bib25 \"\")).\nAccuracy measures the average distance of reconstructed points to their nearest mesh points,\nwhile completeness measures the average distance of mesh points to their nearest reconstructed points.\nFollowing Zhu et al. ( [2022](https://ar5iv.org/html/2412.07746#bib.bib36 \"\")), we exclude mesh parts invisible to the test images.\n\nThe multi-view camera parameter estimations are evaluated with the absolute trajectory error (ATE) and the average focal length estimation error (AFE).\n\nThe quality of novel view renders is assessed with Peak Signal-to-Noise Ratio (PSNR), Structural Similarity Index Measure (SSIM), and Learned Perceptual Image Patch Similarity (LPIPS).\n\n### 5.1 Results\n\nFor the Replica dataset, we report pairwise and multi-view reconstruction results in Tab. [1](https://ar5iv.org/html/2412.07746#S5.T1 \"Table 1 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and Tab. [2](https://ar5iv.org/html/2412.07746#S5.T2 \"Table 2 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nCompared to the pre-trained DUSt3R, our method reduces point prediction errors by up to 38% and reconstructs models that are up to 61% more accurate and 41% more complete.\nAs Fig. [7](https://ar5iv.org/html/2412.07746#S5.F7 \"Figure 7 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") shows,\nour approach is particularly effective at reducing outlier point predictions, thanks to the multi-view consistent pseudo labels\n333Please check out [A.9](https://ar5iv.org/html/2412.07746#A1.SS9 \"A.9 Qualitative comparison against ground truth mesh ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for qualitative comparison of the reconstructions with the ground truth mesh model..\nThe remaining performance gap compared to the fine-tuned DUSt3R is attributed to differences in data size and label accuracy.\n\nSince cameras in Replica are mostly facing inward, it is easier for COLMAP and MASt3R to establish accurate cross-view feature matches,\nresulting in better accuracy and completeness on certain test scenes, even surpassing the fine-tuned DUSt3R.\nOn the other hand, FlowMap struggles due to the discontinuous calibration images, which disrupt the optical flow and point tracking it relies on.\n\nTable 1: Quantitative evaluation of pairwise reconstructions on the Replica dataset.\nWe report the average point prediction errors (cm) for direct DUSt3R predictions.\n\n| Methods | office0 | office1 | office2 | office3 | office4 | room0 | room1 | room2 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| DUSt3R-Pretrain | 14.29 | 11.02 | 14.03 | 15.44 | 14.96 | 13.11 | 27.99 | 16.82 |\n| DUSt3R-Self-Calib | 8.84 | 9.38 | 11.05 | 14.41 | 13.92 | 13.02 | 19.88 | 13.65 |\n| DUSt3R-GT-FT | 7.12 | 7.95 | 10.55 | 12.88 | 12.29 | 9.27 | 17.40 | 12.58 |\n\nTable 2: Quantitative evaluation of multi-view reconstructions on the Replica dataset.\nWe report the accuracy (Acc. \\[cm\\] ↓\\\\downarrow) and completeness (Comp. \\[cm\\] ↓\\\\downarrow) of 3D reconstructions against the ground truth meshes.\nPlease refer to App.Tab. [9](https://ar5iv.org/html/2412.07746#A1.T9 \"Table 9 ‣ A.10 Remaining experimental results on the Replica dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for the remaining results omitted due to space limit.\n\n| Methods | office0 | office1 | office2 | office3 | office4 |\n| Acc. | Comp. | Acc. | Comp. | Acc. | Comp. | Acc. | Comp. | Acc. | Comp. |\n| DUSt3R-Pretrain | 5.22 | 6.78 | 9.21 | 9.27 | 6.57 | 8.35 | 8.43 | 11.89 | 12.97 | 15.89 |\n| DUSt3R-Self-Calib | 4.43 | 6.08 | 3.56 | 5.48 | 4.75 | 6.89 | 6.60 | 11.00 | 7.81 | 12.22 |\n| DUSt3R-GT-FT | 3.51 | 5.29 | 3.26 | 5.53 | 3.93 | 6.72 | 4.02 | 7.42 | 5.53 | 11.25 |\n| COLMAP (dense) | 2.61 | 89.87 | 58.15 | 158.83 | 4.87 | 194.16 | 5.51 | 162.53 | 6.42 | 120.84 |\n| FlowMap | 51.78 | 152.05 | 142.81 | 107.17 | 24.16 | 189.86 | 19.58 | 248.16 | 15.34 | 153.64 |\n| MASt3R | 4.69 | 6.05 | 3.92 | 4.87 | 4.09 | 7.39 | 7.17 | 9.42 | 4.87 | 11.52 |\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/replica_before.png)(a) Before self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/replica_after.png)(b) After self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/tum_before.png)(c) Before self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/tum_after.png)(d) After self-calibration\n\nFigure 7: Qualitative results on the Replica (a,b) and TUM (c,d) datasets.\nAfter DUSt3R self-calibration, we observe much fewer outlier points in the reconstruction of the Replica scene “office0”.\nOn the TUM scene “fr2\\_xyz”, the green and red frustums represent the estimated and ground truth cameras respectively.\nThe camera pose estimates are made more accurate by self-calibration.\n\nThe multi-view camera parameter estimation results on the Waymo dataset are presented in Tab. [3](https://ar5iv.org/html/2412.07746#S5.T3 \"Table 3 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nCompared to the pre-trained DUSt3R,\nour method reduces camera trajectory estimation errors by up to 88% and focal length estimation errors by up to 79%.\nOut of 150 total test scenes (detailed in App. [A.11](https://ar5iv.org/html/2412.07746#A1.SS11 \"A.11 Full experimental results on Waymo Open Dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\nour approach successfully improves camera parameter estimation results on 116 scenes.\nMost failures occur when the test vehicle remains mostly static for the test images (e.g. segment-10488).\nThis degenerate case expect the model to predict zero relative pose across views and fails to distinguish different methods.\n\nBy comparison, COLMAP fails, and MASt3R shows degraded performance on Waymo due to the presence of dynamic objects and the larger baselines between forward-facing cameras, which make feature matching more difficult.\nFlowMap still struggles due to the abrupt visual changes across views.\nRelPose++, PoseDiffusion and RayDiffusion, without domain- or scene-specific training, fails to provide accurate estimates on the out-of-distribution data.\n\nThe novel view rendering results on Waymo are presented in Tab. [4](https://ar5iv.org/html/2412.07746#S5.T4 \"Table 4 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and Fig. [8](https://ar5iv.org/html/2412.07746#S5.F8 \"Figure 8 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nOur method effectively reduces floating artifacts in the optimized 3DGS,\nresulting in quality improvements of up to 0.97 dB in PSNR, 0.09 in SSIM, and 0.04 in LPIPS.\n\nThe quantitative results on the TUM dataset are presented and analyzed in App. [A.4](https://ar5iv.org/html/2412.07746#A1.SS4 \"A.4 Evaluation results on TUM RGBD dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\n\nTable 3: Quantitative evaluation of camera parameter estimates on Waymo Open Dataset.\nWe report the absolute trajectory error (ATE (m) ↓\\\\downarrow) and average focal error (AFE (%) ↓\\\\downarrow) for test camera views.\nPlease see App. [A.11](https://ar5iv.org/html/2412.07746#A1.SS11 \"A.11 Full experimental results on Waymo Open Dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for full evaluation results on 150 test scenes.\n\n| Methods | segment-10084 | segment-10149 | segment-10649 | segment-10802 | segment-10980 |\n| ATE | AFE | ATE | AFE | ATE | AFE | ATE | AFE | ATE | AFE |\n| DUSt3R-Pretrain | 0.79 | 2.19 | 0.84 | 3.08 | 0.95 | 2.84 | 0.35 | 1.60 | 0.80 | 1.19 |\n| DUSt3R-Self-Calib | 0.37 | 0.61 | 0.25 | 2.14 | 0.49 | 2.54 | 0.35 | 1.08 | 0.09 | 0.69 |\n| DUSt3R-GT-FT | 0.20 | 0.17 | 0.17 | 1.54 | 0.29 | 1.73 | 0.39 | 0.55 | 0.13 | 0.49 |\n| COLMAP | Fail | Fail | Fail | Fail | Fail | Fail | Fail | Fail | Fail | Fail |\n| Flowmap | 0.31 | 3.97 | 66.62 | 1.80 | 36.44 | 13.74 | 21.16 | 0.44 | 65.17 | 0.66 |\n| PoseDiffusion | 19.43 | 25.07 | 16.76 | 49.18 | 20.19 | 2.26 | 13.61 | 23.74 | 18.19 | 31.04 |\n| RayDiffusion | 17.34 | 85.65 | 16.91 | 80.69 | 18.59 | 85.09 | 12.77 | 81.44 | 19.12 | 85.00 |\n| RelPose++ | 14.80 | - | 16.20 | - | 13.69 | - | 12.92 | - | 13.55 | - |\n| MASt3R | 2.85 | 11.87 | 1.35 | 24.92 | 0.65 | 20.53 | 1.26 | 24.75 | 1.61 | 6.59 |\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/waymo1008_isplat.png)(a) Before self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/waymo1008_our.png)(b) After self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/waymo1080_isplat.png)(c) Before self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/waymo1080_our.png)(d) After self-calibration\n\nFigure 8:\nNovel view renders by InstantSplat (Fan et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib5 \"\")) before and after DUSt3R self-calibration on Waymo Open Dataset.\nTable 4: Quantitative evaluation of novel view renders on the Waymo open dataset\n\n| Methods | Segment-10084 | Segment-10649 | Segment-10802 |\n| --- | --- | --- | --- |\n| PSNR ↑\\\\uparrow | SSIM ↑\\\\uparrow | LPIPS ↓\\\\downarrow | PSNR ↑\\\\uparrow | SSIM ↑\\\\uparrow | LPIPS ↓\\\\downarrow | PSNR ↑\\\\uparrow | SSIM ↑\\\\uparrow | LPIPS ↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| InstantSplat | 21.45 | 0.67 | 0.33 | 22.45 | 0.72 | 0.30 | 25.94 | 0.79 | 0.24 |\n| InstantSplat-Self-Calib | 22.42 | 0.76 | 0.29 | 22.81 | 0.77 | 0.27 | 26.36 | 0.81 | 0.22 |\n| InstantSplat-GT-FT | 22.64 | 0.75 | 0.27 | 23.07 | 0.78 | 0.27 | 26.43 | 0.81 | 0.22 |\n\n### 5.2 MASt3R self-calibration\n\nOur pipeline is not limited to the specialization of DUSt3R.\nWe show in App. [A.5](https://ar5iv.org/html/2412.07746#A1.SS5 \"A.5 MASt3R self-calibration ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") that the same idea applies to MASt3R.\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x17.png)(a) Scene: Replica office0\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x18.png)(b) Scene: Waymo test segment-10084\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x19.png)(c) Scene: Replica office0\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x20.png)(d) Scene: Waymo test segment-10149\n\nFigure 9:\nAblation study: (a, b) Pseudo-labeling with un-calibrated confidence hurt the model performance. (c) Our method maintains consistent performance across varying random seeds used for calibration image sampling. (d) Our method’s performance improves with more calibration images and saturates after around 10.\n\n### 5.3 Ablation study\n\nUn-calibrated confidence for pseudo labeling\nDirectly using the prediction confidence for pseudo-labeling could harm the model performance.\nAs Fig. [9](https://ar5iv.org/html/2412.07746#S5.F9 \"Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (a, b) shows,\nthresholding refined point predictions with un-calibrated confidence leads to consistent under-performance of the self-calibrated model, regardless of the confidence cutoff value.\n\nVarying random seed\nOur method works with casually captured RGB images and does not rely on carefully selected calibration images to succeed.\nAs shown in Fig. [9](https://ar5iv.org/html/2412.07746#S5.F9 \"Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (c),\nour method maintains consistent performance across varying random seeds used for calibration image sampling.\n\nThe number of calibration images\nAs shown in Fig. [9](https://ar5iv.org/html/2412.07746#S5.F9 \"Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (d), using few calibration images (e.g., fewer than 10) limits our method’s performance due to an insufficient number of view pairs to enforce multi-view consistency in global optimization and a limited training data size. We also observe that the performance typically saturates after around 10 calibration images.\n\nThe size of calibration split & Multi-scene concurrent self-calibration\nSee [A.6](https://ar5iv.org/html/2412.07746#A1.SS6 \"A.6 Ablation study on the size of calibration split ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") & [A.7](https://ar5iv.org/html/2412.07746#A1.SS7 \"A.7 Concurrent multi-scene self-calibration ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for details.\n\n## 6 Conclusion\n\nOur self-calibration pipeline specializes 3D geometric foundation models to target scenes in a highly time- and memory-efficient manner.\nIt boosts pre-trained model performance by up to 88% across diverse datasets and 3D vision tasks.\nHowever, in certain cases, the self-calibrated model still falls short of competing methods due to the inherent difficulty of 3D geometric inference.\n\n## 7 Ethic Statement\n\nOur work utilizes publicly available datasets that adhere to strict ethical guidelines.\nThese datasets ensure that personally identifiable information, such as human faces and vehicle license plates, is either blurred or anonymized to safeguard privacy.\nOur work does not engage with human subjects or introduce concerns regarding fairness or potential misuse.\nWe are fully committed to maintaining ethical integrity throughout the development and application of our methods.\n\n## 8 Reproducibility statement\n\nTo ensure the reproducibility of our results, we have taken the following steps: (1) A detailed explanation of our method in Sec. [4](https://ar5iv.org/html/2412.07746#S4 \"4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), along with implementation details provided in Appendix [A.3](https://ar5iv.org/html/2412.07746#A1.SS3 \"A.3 Implementation details ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"). (2) All datasets used in our experiments are publicly accessible. (3) Comprehensive experimental results for 161 test cases are included in Sec. [5](https://ar5iv.org/html/2412.07746#S5 \"5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and further detailed in Appendix [A.4](https://ar5iv.org/html/2412.07746#A1.SS4 \"A.4 Evaluation results on TUM RGBD dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), [A.10](https://ar5iv.org/html/2412.07746#A1.SS10 \"A.10 Remaining experimental results on the Replica dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), and [A.11](https://ar5iv.org/html/2412.07746#A1.SS11 \"A.11 Full experimental results on Waymo Open Dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\n\n## References\n\n- Barroso-Laguna et al. (2024)\nAxel Barroso-Laguna, Sowmya Munukutla, Victor Adrian Prisacariu, and Eric Brachmann.\n\nMatching 2d images in 3d: Metric relative pose from metric correspondences.\n\nIn _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  4852–4863, 2024.\n\n- Brown (2020)\nTom B Brown.\n\nLanguage models are few-shot learners.\n\n_arXiv preprint arXiv:2005.14165_, 2020.\n\n- Dettmers et al. (2024)\nTim Dettmers, Artidoro Pagnoni, Ari Holtzman, and Luke Zettlemoyer.\n\nQlora: Efficient finetuning of quantized llms.\n\n_Advances in Neural Information Processing Systems_, 36, 2024.\n\n- Duisterhof et al. (2024)\nBardienus Duisterhof, Lojze Zust, Philippe Weinzaepfel, Vincent Leroy, Yohann Cabon, and Jerome Revaud.\n\nMast3r-sfm: a fully-integrated solution for unconstrained structure-from-motion.\n\n_arXiv preprint arXiv:2409.19152_, 2024.\n\n- Fan et al. (2024)\nZhiwen Fan, Wenyan Cong, Kairun Wen, Kevin Wang, Jian Zhang, Xinghao Ding, Danfei Xu, Boris Ivanovic, Marco Pavone, Georgios Pavlakos, et al.\n\nInstantsplat: Unbounded sparse-view pose-free gaussian splatting in 40 seconds.\n\n_arXiv preprint arXiv:2403.20309_, 2024.\n\n- Geman et al. (1992)\nStuart Geman, Donald E McClure, and Donald Geman.\n\nA nonlinear filter for film restoration and other problems in image processing.\n\n_CVGIP: Graphical models and image processing_, 54(4):281–289, 1992.\n\n- Godard et al. (2019)\nClément Godard, Oisin Mac Aodha, Michael Firman, and Gabriel J Brostow.\n\nDigging into self-supervised monocular depth estimation.\n\nIn _Proceedings of the IEEE/CVF international conference on computer vision_, pp.  3828–3838, 2019.\n\n- Gururangan et al. (2020)\nSuchin Gururangan, Ana Marasović, Swabha Swayamdipta, Kyle Lo, Iz Beltagy, Doug Downey, and Noah A Smith.\n\nDon’t stop pretraining: Adapt language models to domains and tasks.\n\n_arXiv preprint arXiv:2004.10964_, 2020.\n\n- He et al. (2022)\nXuehai He, Chunyuan Li, Pengchuan Zhang, Jianwei Yang, and Xin Eric Wang.\n\nParameter-efficient fine-tuning for vision transformers.\n\n_arXiv preprint arXiv:2203.16329_, 3, 2022.\n\n- Hong et al. (2023)\nYicong Hong, Kai Zhang, Jiuxiang Gu, Sai Bi, Yang Zhou, Difan Liu, Feng Liu, Kalyan Sunkavalli, Trung Bui, and Hao Tan.\n\nLrm: Large reconstruction model for single image to 3d.\n\n_arXiv preprint arXiv:2311.04400_, 2023.\n\n- Hu et al. (2021)\nEdward J Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, and Weizhu Chen.\n\nLora: Low-rank adaptation of large language models.\n\n_arXiv preprint arXiv:2106.09685_, 2021.\n\n- Hu et al. (2023)\nXinrong Hu, Xiaowei Xu, and Yiyu Shi.\n\nHow to efficiently adapt large segmentation model (sam) to medical images.\n\n_arXiv preprint arXiv:2306.13731_, 2023.\n\n- Jiang et al. (2024)\nHanwen Jiang, Qixing Huang, and Georgios Pavlakos.\n\nReal3d: Scaling up large reconstruction models with real-world images.\n\n_arXiv preprint arXiv:2406.08479_, 2024.\n\n- Leroy et al. (2024)\nVincent Leroy, Yohann Cabon, and Jérôme Revaud.\n\nGrounding image matching in 3d with mast3r.\n\n_arXiv preprint arXiv:2406.09756_, 2024.\n\n- Lin et al. (2024)\nAmy Lin, Jason Y Zhang, Deva Ramanan, and Shubham Tulsiani.\n\nRelpose++: Recovering 6d poses from sparse-view observations.\n\nIn _2024 International Conference on 3D Vision (3DV)_, pp.  106–115. IEEE, 2024.\n\n- Liu et al. (2024a)\nHaotian Liu, Chunyuan Li, Yuheng Li, and Yong Jae Lee.\n\nImproved baselines with visual instruction tuning.\n\nIn _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  26296–26306, 2024a.\n\n- Liu et al. (2024b)\nHaotian Liu, Chunyuan Li, Qingyang Wu, and Yong Jae Lee.\n\nVisual instruction tuning.\n\n_Advances in neural information processing systems_, 36, 2024b.\n\n- Liu et al. (2019)\nPengpeng Liu, Michael Lyu, Irwin King, and Jia Xu.\n\nSelflow: Self-supervised learning of optical flow.\n\nIn _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pp.  4571–4580, 2019.\n\n- Luo & Hancock (1999)\nBin Luo and Edwin R Hancock.\n\nProcrustes alignment with the em algorithm.\n\nIn _International Conference on Computer Analysis of Images and Patterns_, pp.  623–631. Springer, 1999.\n\n- Rao & Kreutz-Delgado (1999)\nBhaskar D Rao and Kenneth Kreutz-Delgado.\n\nAn affine scaling methodology for best basis selection.\n\n_IEEE Transactions on signal processing_, 47(1):187–200, 1999.\n\n- Schonberger & Frahm (2016)\nJohannes L Schonberger and Jan-Michael Frahm.\n\nStructure-from-motion revisited.\n\nIn _Proceedings of the IEEE conference on computer vision and pattern recognition_, pp.  4104–4113, 2016.\n\n- Schönberger et al. (2016)\nJohannes L Schönberger, Enliang Zheng, Jan-Michael Frahm, and Marc Pollefeys.\n\nPixelwise view selection for unstructured multi-view stereo.\n\nIn _Computer Vision–ECCV 2016: 14th European Conference, Amsterdam, The Netherlands, October 11-14, 2016, Proceedings, Part III 14_, pp.  501–518. Springer, 2016.\n\n- Schubert et al. (2018)\nDavid Schubert, Thore Goll, Nikolaus Demmel, Vladyslav Usenko, Jörg Stückler, and Daniel Cremers.\n\nThe tum vi benchmark for evaluating visual-inertial odometry.\n\nIn _2018 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)_, pp.  1680–1687. IEEE, 2018.\n\n- Smith et al. (2024)\nCameron Smith, David Charatan, Ayush Tewari, and Vincent Sitzmann.\n\nFlowmap: High-quality camera poses, intrinsics, and depth via gradient descent.\n\n_arXiv preprint arXiv:2404.15259_, 2024.\n\n- Straub et al. (2019)\nJulian Straub, Thomas Whelan, Lingni Ma, Yufan Chen, Erik Wijmans, Simon Green, Jakob J Engel, Raul Mur-Artal, Carl Ren, Shobhit Verma, et al.\n\nThe replica dataset: A digital replica of indoor spaces.\n\n_arXiv preprint arXiv:1906.05797_, 2019.\n\n- Sucar et al. (2021)\nEdgar Sucar, Shikun Liu, Joseph Ortiz, and Andrew J Davison.\n\nimap: Implicit mapping and positioning in real-time.\n\nIn _Proceedings of the IEEE/CVF international conference on computer vision_, pp.  6229–6238, 2021.\n\n- Sun et al. (2020)\nPei Sun, Henrik Kretzschmar, Xerxes Dotiwalla, Aurelien Chouard, Vijaysai Patnaik, Paul Tsui, James Guo, Yin Zhou, Yuning Chai, Benjamin Caine, et al.\n\nScalability in perception for autonomous driving: Waymo open dataset.\n\nIn _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pp.  2446–2454, 2020.\n\n- Wan et al. (2018)\nSheng Wan, Tung-Yu Wu, Wing H Wong, and Chen-Yi Lee.\n\nConfnet: predict with confidence.\n\nIn _2018 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)_, pp.  2921–2925. IEEE, 2018.\n\n- Wang & Agapito (2024)\nHengyi Wang and Lourdes Agapito.\n\n3d reconstruction with spatial memory.\n\n_arXiv preprint arXiv:2408.16061_, 2024.\n\n- Wang et al. (2023)\nJianyuan Wang, Christian Rupprecht, and David Novotny.\n\nPosediffusion: Solving pose estimation via diffusion-aided bundle adjustment.\n\nIn _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pp.  9773–9783, 2023.\n\n- Wang et al. (2024)\nShuzhe Wang, Vincent Leroy, Yohann Cabon, Boris Chidlovskii, and Jerome Revaud.\n\nDust3r: Geometric 3d vision made easy.\n\nIn _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  20697–20709, 2024.\n\n- Yang et al. (2021)\nHeng Yang, Wei Dong, Luca Carlone, and Vladlen Koltun.\n\nSelf-supervised geometric perception.\n\nIn _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  14350–14361, 2021.\n\n- Yue et al. (2024)\nYuanwen Yue, Anurag Das, Francis Engelmann, Siyu Tang, and Jan Eric Lenssen.\n\nImproving 2d feature representations by 3d-aware fine-tuning.\n\n_arXiv preprint arXiv:2407.20229_, 2024.\n\n- Zhang et al. (2024)\nJason Y Zhang, Amy Lin, Moneish Kumar, Tzu-Hsuan Yang, Deva Ramanan, and Shubham Tulsiani.\n\nCameras as rays: Pose estimation via ray diffusion.\n\n_arXiv preprint arXiv:2402.14817_, 2024.\n\n- Zhou et al. (2017)\nTinghui Zhou, Matthew Brown, Noah Snavely, and David G Lowe.\n\nUnsupervised learning of depth and ego-motion from video.\n\nIn _Proceedings of the IEEE conference on computer vision and pattern recognition_, pp.  1851–1858, 2017.\n\n- Zhu et al. (2022)\nZihan Zhu, Songyou Peng, Viktor Larsson, Weiwei Xu, Hujun Bao, Zhaopeng Cui, Martin R Oswald, and Marc Pollefeys.\n\nNice-slam: Neural implicit scalable encoding for slam.\n\nIn _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pp.  12786–12796, 2022.\n\n\n## Appendix A Appendix\n\n### A.1 DUSt3R training loss\n\nDUSt3R adopts a 3D-regression-based training objective,\nwhich computes the pixel-wise Euclidean distance between the predicted and ground truth point maps X¯i,i,X¯j,i\\\\bar{X}^{i,i},\\\\bar{X}^{j,i} over pixels 𝒫i,i,𝒫j,i⊆{1​…​H}×{1​…​W}\\\\mathcal{P}^{i,i},\\\\mathcal{P}^{j,i}\\\\subseteq\\\\{1\\\\ldots H\\\\}\\\\times\\\\{1\\\\ldots W\\\\} where ground truth is available.\nFor example, the regression loss for a valid pixel p∈𝒫vp\\\\in\\\\mathcal{P}^{v} on image vv from image pair (i,j)(i,j) is computed as :\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℓregr​(v,p)=‖1z​Xpv,i−1z¯​X¯pv,i‖,where​v∈{i,j}\\\\displaystyle\\\\ell\\_{\\\\text{regr}}(v,p)=\\\\\\|\\\\frac{1}{z}X^{v,i}\\_{p}-\\\\frac{1}{\\\\bar{z}}\\\\bar{X}^{v,i}\\_{p}\\\\\\|,\\\\quad\\\\text{where}\\ v\\\\in\\\\{i,j\\\\} |  | (10) |\n\nHere, zz and z¯\\\\bar{z} are normalization factors used to resolve the scale ambiguity between predicted and ground truth point maps.\nThey are defined as the average distance of all valid points in image pair (Ii,Ij)(I\\_{i},I\\_{j}) to the origin:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | z​(Xi,i,Xj,i)=1\\|𝒫i\\|+\\|𝒫j\\|​∑p∈𝒫i‖Xpi,i‖+∑p∈𝒫j‖Xpj,i‖\\\\displaystyle z(X^{i,i},X^{j,i})=\\\\frac{1}{\\|\\\\mathcal{P}^{i}\\|+\\|\\\\mathcal{P}^{j}\\|}\\\\sum\\_{p\\\\in\\\\mathcal{P}^{i}}\\\\\\|X^{i,i}\\_{p}\\\\\\|+\\\\sum\\_{p\\\\in\\\\mathcal{P}^{j}}\\\\\\|X^{j,i}\\_{p}\\\\\\| |  | (11) |\n\nThe final training loss for DUSt3R is the confidence-aware loss from Wan et al. ( [2018](https://ar5iv.org/html/2412.07746#bib.bib28 \"\")), defined as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒconf=∑(i,j)∈ℰ∑v∈{i,j}∑p∈𝒫vCpv,i​ℓregr​(v,p)−α​log⁡Cpv,i\\\\displaystyle\\\\mathcal{L}\\_{\\\\text{conf}}=\\\\sum\\_{(i,j)\\\\in\\\\mathcal{E}}\\\\sum\\_{v\\\\in\\\\{i,j\\\\}}\\\\sum\\_{p\\\\in\\\\mathcal{P}^{v}}C\\_{p}^{v,i}\\\\ell\\_{\\\\text{regr}}(v,p)-\\\\alpha\\\\log C\\_{p}^{v,i} |  | (12) |\n\nThis loss enables the model to learn confidence predictions that are correlated with the regression accuracy.\nThe second term acts as a regularization component,\nwhere α\\\\alpha is a hyperparameter that controls the strength of the regularization.\n\n### A.2 Derivation of weight update rule\n\nStarting from the joint optimization Eq. [7](https://ar5iv.org/html/2412.07746#S4.E7 \"In 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), we first minimize over the weight terms wpv,iw\\_{p}^{v,i} to eliminate them from the joint optimization:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (T,σ,f,D)∗=arg​minT,σ,f,D,​∑(i,j)∑v∑pminwpv,i⁡\\[wpv,i​‖epv,i‖+μ​(wpv,i−Cpv,i)2\\]\\\\displaystyle(T,\\\\sigma,f,D)^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{T,\\\\sigma,f,D,}\\\\sum\\_{(i,j)}\\\\sum\\_{v}\\\\sum\\_{p}\\\\min\\_{w\\_{p}^{v,i}}\\\\left\\[w\\_{p}^{v,i}\\\\\\|e\\_{p}^{v,i}\\\\\\|+\\\\mu(\\\\sqrt{w\\_{p}^{v,i}}-\\\\sqrt{C\\_{p}^{v,i}})^{2}\\\\right\\] |  | (13) |\n\nIn order to find the global minimizers wpv,i⁣∗w^{v,i\\ \\*}\\_{p}, we take the gradient gwg\\_{w} of the above objective function with respect to wpv,iw^{v,i}\\_{p}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | gw=‖epv,i‖+μ​\\[1−Cpv,i/wpv,i\\]\\\\displaystyle g\\_{w}=\\\\\\|e\\_{p}^{v,i}\\\\\\|+\\\\mu\\\\left\\[1-\\\\sqrt{C\\_{p}^{v,i}/w^{v,i}\\_{p}}\\\\right\\] |  | (14) |\n\nWe observe that the gradient gwg\\_{w} is continuous and monotonic for wpv,i>0w^{v,i}\\_{p}>0.\nAlso, if wpv,i→0w^{v,i}\\_{p}\\\\rightarrow 0, then gw→−∞g\\_{w}\\\\rightarrow-\\\\infty, and if wpv,i→+∞w^{v,i}\\_{p}\\\\rightarrow+\\\\infty then gw=‖epv,i‖+1>0g\\_{w}=\\\\\\|e\\_{p}^{v,i}\\\\\\|+1>0.\nTherefore, there exists an unique global minimizer wpv,i⁣∗w^{v,i\\ \\*}\\_{p} at which the gradient gwg\\_{w} evaluates to zero.\nSetting gw=0g\\_{w}=0, we can solve for wpv,i⁣∗w^{v,i\\ \\*}\\_{p} as :\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | wpv,i⁣∗=Cpv,i/(1+‖epv,i‖/μ)2\\\\displaystyle w\\_{p}^{v,i\\ \\*}=C\\_{p}^{v,i}/(1+\\\\\\|e\\_{p}^{v,i}\\\\\\|/\\\\mu)^{2} |  | (15) |\n\nThis gives us the same weight update rule in Eq. [8](https://ar5iv.org/html/2412.07746#S4.E8 \"In 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nDuring global optimization, we alternate between the gradient descent step to optimize geometric parameters: T,σ,f,DT,\\\\sigma,f,D and the weight update step to set the weight terms to their global minimizers.\nThis helps us down-weight the confidence for overconfident point predictions,\nand make the optimization more robust on challenging circumstances.\n\n### A.3 Implementation details\n\nOur pipeline is implemented with PyTorch and all our experiments are conducted on a NVIDIA 3090 GPU.\n\nFor robust global point map alignment, we set the regularization coefficient μ\\\\mu to 0.01.\nWe minimize the optimization loss by running 300 steps of gradient descent using the Adam optimizer with a learning rate of 0.01, applying the closed-form weight update Eq. [8](https://ar5iv.org/html/2412.07746#S4.E8 \"In 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")\nevery 10th gradient descent step.\nAdditionally, we exclude points with prediction confidence below 0.5 by setting their weights to zero, preventing them from participating in the optimization process.\n\nFor confidence-based pseudo labeling, we use a cofidence threshold of 1.5 for all test scenes.\n\nFor LoRA fine-tuning, we resize all calibration images to the pre-training resolution of (512, 384).\nDuring fine-tuning, we optimize the LoRA weights over 10 epochs (without warmup) using the AdamW optimizer with a batch size of 2.\nA cosine decay learning rate scheduler is employed, with a base learning rate of 0.001 and a minimum learning rate of 0.00001 for most test cases.\n\n### A.4 Evaluation results on TUM RGBD dataset\n\nWe evaluated our method for multi-view camera parameter estimation on TUM test scenes:\n“fr1\\_desk”, “fr2\\_xyz” and “fr3\\_office” in the TUM dataset.\nIn each scene, the first 500 RGB images are reserved as the calibration split,\nand the remaining 92/2897/2015 images form the test split.\nAt test time, we sample 10 images from the calibration split for self-calibration and 10 images from the test split to assess pose estimates.\n\nTable 5: Quantitative evaluation of camera parameter estimates on the TUM RGBD dataset.\n\n| Methods | fr1\\_desk | fr2\\_xyz | fr3\\_office |\n| ATE (cm) | AFE (%) | ATE (cm) | AFE (%) | ATE (cm) | AFE (%) |\n| DUSt3R-Pretrain | 0.91 | 8.02 | 3.89 | 14.84 | 3.28 | 1.95 |\n| DUSt3R-Self-Calib | 0.62 | 8.32 | 1.24 | 7.67 | 3.10 | 1.81 |\n| DUSt3R-Depth-Calib | 0.68 | 7.63 | 1.23 | 4.71 | 4.12 | 1.78 |\n| COLMAP | 0.51 | 3.87 | 0.97 | 4.92 | 1.98 | 4.71 |\n| RelPose ++ | 10.05 | - | 34.59 | - | 96.91 | - |\n| PoseDiffusion | 11.90 | 27.18 | 34.32 | 37.30 | 92.61 | 1.28 |\n| RayDiffusion | 10.95 | 72.30 | 35.63 | 12.12 | 100.56 | 3.52 |\n| FlowMap | 8.03 | 39.58 | 14.30 | 84.21 | 32.67 | 24.95 |\n| MASt3R | 0.56 | 3.32 | 1.74 | 10.88 | 0.92 | 1.24 |\n\nThe results of multi-view camera parameter estimation on TUM are reported in Tab. [5](https://ar5iv.org/html/2412.07746#A1.T5 \"Table 5 ‣ A.4 Evaluation results on TUM RGBD dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and Fig. [7](https://ar5iv.org/html/2412.07746#S5.F7 \"Figure 7 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (c, d).\nOur self-calibrated DUSt3R achieves up to 68% more accurate camera pose estimates and up to 48% more accurate focal length estimates compared to the pre-trained baseline.\nThe slight drop in focal length estimation accuracy for the “fr1\\_desk” sequence is likely due to overfitting on the calibration images.\n\nUsing depth measurements as the supervision signal for DUSt3R fine-tuning appears to be unreliable.\nDUSt3R-Depth-Calib under-performs our method in “fr1\\_desk” and even falls short of the pre-trained model in “fr3\\_office.”\nThis is the result of the noise and outliers present in the depth images.\n\nSimilar to Replica, COLMAP and MASt3R tends to perform well on the inward-facing cameras in TUM.\nRelPose++, PoseDiffusion, RayDiffusion and FlowMap fail to provide reasonable estimates of camera parameters.\n\n### A.5 MASt3R self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/mast3r_before.png)(a) Segment-10084: Before self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/mast3r_after.png)(b) Segment-10084: After self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/mast3r_waymo1014_before.png)(c) Segment-10149: Before self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/mast3r_waymo1014_after.png)(d) Segment-10149: After self-calibration\n\nFigure 10: Qualitative results of MASt3R self-calibration on the Waymo test segments 10084 and 10149.\nAfter self-calibration, MASt3R produces more accurate camera pose estimates.\nFor segment-10084, the road’s center lines exhibit better alignment along a straight path.\nFor segment-10149, the roadside parking lines align more accurately along a straight line.\n\nWe show that our method generalizes to MASt3R (Leroy et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib14 \"\"); Duisterhof et al., [2024](https://ar5iv.org/html/2412.07746#bib.bib4 \"\")) self-calibration.\n\nMASt3R builds upon DUSt3R and re-purposes it for more precise image matching.\nIn addition to pairwise point and confidence predictions, MASt3R also generates dense local feature maps to establish 2D feature correspondences across images.\nSimilar to DUSt3R, MASt3R employs a global optimization procedure to align and optimize the local per-pair point predictions within a global coordinate frame.\nLeveraging both 3D-3D and 2D-3D correspondences,\nMASt3R first minimizes a 3D projection loss as in Eq. [6](https://ar5iv.org/html/2412.07746#S3.E6 \"In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") to optimize the image pair scales and camera poses,\nfollowed by minimizing a 2D re-projection loss to optimize the camera focal lengths and depth maps.\n\nFor MASt3R self-calibration, we also utilize the global optimization results to generate pseudo labels.\nFor simplicity, we directly apply all point predictions across all calibration views for pseudo labeling,\nwithout employing confidence-based filtering.\nWe maintain the use of rank-16 LoRA and the same pre-training loss for fine-tuning MASt3R.\n\nTable 6: Quantitative evaluation for MASt3R self-calibration\non the Replica “office0”, TUM “fr2\\_xyz” and Waymo test segments 10084 and 10149.\n\n| Scene | Replica office0 | TUM fr2\\_xyz | Waymo seg.-10084 | Waymo seg.-10149 |\n| --- | --- | --- | --- | --- |\n| Metric | Acc.\\[cm\\] | Comp.\\[cm\\] | ATE\\[cm\\] | AFE\\[%\\] | ATE\\[m\\] | AFE\\[%\\] | ATE\\[m\\] | AFE\\[%\\] |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| MASt3R-Pretrain | 4.69 | 6.05 | 1.74 | 10.88 | 2.85 | 11.87 | 1.35 | 24.91 |\n| MASt3R-Self-Calib | 4.61 | 6.02 | 1.60 | 10.48 | 1.21 | 16.71 | 1.19 | 22.97 |\n| MASt3R-GT-FT | 4.25 | 5.83 | - | - | 1.05 | 9.87 | 1.21 | 24.30 |\n\nWe evaluated our pipeline on four test scenes:\nReplica “office0”, TUM “fr2\\_xyz”, and Waymo test segment-10084 and segment-10149.\nThe self-calibrated MASt3R was assessed on multi-view reconstruction and multi-view camera parameter estimation using the same evaluation metrics against the pre-trained baseline and the ground-truth fine-tuned model.\nThe results are reported in Tab. [6](https://ar5iv.org/html/2412.07746#A1.T6 \"Table 6 ‣ A.5 MASt3R self-calibration ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and Fig. [10](https://ar5iv.org/html/2412.07746#A1.F10 \"Figure 10 ‣ A.5 MASt3R self-calibration ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\n\nWe observe improved performance of MASt3R across various tasks and datasets compared to the pre-trained model,\nthough the gains are mostly marginal, likely due to the presence of unfiltered noise and outliers in the pseudo-labeled data.\nIn future work, we plan to calibrate MASt3R by incorporating calibrated-confidence-based pseudo labeling.\n\n### A.6 Ablation study on the size of calibration split\n\nIn addition to the number of calibration images,\nthe size of the calibration split plays an important role in self-calibration because it affects the diversity of viewpoints among the calibration images.\nAs shown in Fig. [11](https://ar5iv.org/html/2412.07746#A1.F11 \"Figure 11 ‣ A.6 Ablation study on the size of calibration split ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), when we limit the calibration split to only the first 10 to 50 images in a test scene,\nwe observe a decrease in the performance of the self-calibrated model.\n\nThis decline occurs primarily because the sampled calibration images from the smaller splits share very similar viewpoints.\nAs a result, DUSt3R predictions across view pairs are of similar quality,\nand global optimization therefore offers limited improvements in point estimation accuracy.\nReduced training set diversity and limited scene observation further contribute to the performance decrease.\n\nTherefore, we recommend capturing calibration images from different viewpoints to ensure effective self-calibration.\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/ablate_office0_calib_split.png)(a) Scene: Replica office0\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/ablate_seg1014_calib_split.png)(b) Scene: Waymo test segment-10149\n\nFigure 11:\nAblation Study: Reducing the calibration split size\n(e.g., using only the first 0.5% of images)\nmay adversely impact self-calibration performance.\n\n### A.7 Concurrent multi-scene self-calibration\n\nTable 7:\nQuantitative evaluation of multi-scene concurrent self-calibration\n\n| Training Data | office0 (Ours) | All Replica | All except office0 |\n| --- | --- | --- | --- |\n| Avg. Point Pred. Err. \\[cm\\] | 8.83 | 9.64 | 11.64 |\n| Accuracy \\[cm\\] | 4.43 | 4.24 | 6.11 |\n| Completeness \\[cm\\] | 6.08 | 7.13 | 8.74 |\n\nWe tested our pipeline with multi-scene concurrent self-calibration.\nSpecifically, we fine-tuned the pre-trained DUSt3R using pseudo-labeled data from all Replica test scenes and evaluated the self-calibrated DUSt3R on the office0 test set.\nWe also experimented with excluding scene office0’s pseudo-labeled data from the training data during fine-tuning.\n\nThe performance of DUSt3R, self-calibrated on different pseudo labeled data, are presented in Tab. [7](https://ar5iv.org/html/2412.07746#A1.T7 \"Table 7 ‣ A.7 Concurrent multi-scene self-calibration ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nWe observe comparable performance between concurrent and scene-specific training.\nHowever, excluding the target scene data led to a decline in performance.\nThis highlights the importance of including target scene images for model self-calibration.\n\n### A.8 Use DUSt3R to initialize COLMAP?\n\nAs discussed in Sec. [3.3](https://ar5iv.org/html/2412.07746#S3.SS3 \"3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"),\nthe vanilla DUSt3R (i.e., the DUSt3R-Pretrain baseline) uses a novel 3D-3D-projection-based global optimization to align the DUSt3R-predicted point maps across views.\nThis natually leads to the question:\nCan we use the commonly adopted 2D-3D-projection-based optimization to align these point maps?\nSpecifically, is it feasible to use DUSt3R predictions to initialize COLMAP’s bundle adjustment (Schonberger & Frahm, [2016](https://ar5iv.org/html/2412.07746#bib.bib21 \"\")) to create a stronger baseline?\n\nThe short answer is no.\n\nTheoretically, DUSt3R is trained to predict 3D point maps but not explicit 2D-2D or 2D-3D correspondences.\nWhile we could attempt to extract reciprocal pixel-level 2D-2D matches by performing nearest-neighbor matching in the 3D point map space (as discussed in Sec. 3.3 of Wang et al. ( [2024](https://ar5iv.org/html/2412.07746#bib.bib31 \"\"))),\nthese matches are limited because\n(1) they are only at the pixel level and\n(2) they can be incomplete due to potential violations of mutual consistency.\nDirectly using these matches for COLMAP bundle adjustment can lead to inferior reconstruction quality.\n\nExperimentally, we attempted to use the 2D-2D correspondences extracted from DUSt3R predictions to initialize COLMAP.\nWe retrieved the matched pixels’ globally aligned point map predictions and computed their median 3D positions to initialize the 2D-3D correspondences for COLMAP’s bundle adjustment.\nAs reported in Tab. [8](https://ar5iv.org/html/2412.07746#A1.T8 \"Table 8 ‣ A.8 Use DUSt3R to initialize COLMAP? ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and Fig. [12](https://ar5iv.org/html/2412.07746#A1.F12 \"Figure 12 ‣ A.8 Use DUSt3R to initialize COLMAP? ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"),\nthis approach, termed DUSt3R-COLMAP, significantly underperforms our baselines such as DUSt3R-Pretrain and MASt3R.\n\nTable 8:\nUsing DUSt3R to initialize COLMAP (i.e. DUSt3R-COLMAP) significantly underperforms other baselines.\n\n| Methods | office0 | segment-10084 |\n| Acc.\\[cm\\] ↓\\\\downarrow | Comp.\\[cm\\] ↓\\\\downarrow | ATE\\[m\\] ↓\\\\downarrow | AFE\\[%\\] ↓\\\\downarrow |\n| DUSt3R-Pretrain | 5.22 | 6.78 | 0.79 | 2.79 |\n| DUSt3R-COLMAP | 44.36 | 56.66 | 5.59 | 89.51 |\n| COLMAP (dense) | 2.61 | 89.87 | Fail | Fail |\n| MASt3R | 4.69 | 6.05 | 2.85 | 11.87 |\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/replica_before.png)(a) DUSt3R-Pretrain\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x21.png)(b) DUSt3R-COLMAP\n\nFigure 12:\nUsing DUSt3R to initialize COLMAP (i.e. DUSt3R-COLMAP) significantly underperforms the DUSt3R-initialized 3D-projection-based global alignment method (i.e. the DUSt3R-Pretrain baseline).\n\nThis observation is consistent with findings in the literature.\nFor example, Leroy et al. ( [2024](https://ar5iv.org/html/2412.07746#bib.bib14 \"\")) reports (in Tab. 1) that using matches extracted from DUSt3R predictions for map-free localization significantly underperforms MASt3R,\nwhich is directly trained for image matching.\n\n### A.9 Qualitative comparison against ground truth mesh\n\nWe directly compare DUSt3R’s multi-view reconstructions with the ground truth mesh to identify and visualize the source of errors.\n\nThe qualitative results in Fig. [7](https://ar5iv.org/html/2412.07746#S5.F7 \"Figure 7 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (a, b) demonstrate that our self-calibration method effectively reduces outlier points in DUSt3R reconstructions.\nHowever, the outlier points are not the only source of error for the pre-trained DUSt3R model,\ndespite the otherwise visually impressive reconstruction.\n\nIn Fig. [13](https://ar5iv.org/html/2412.07746#A1.F13 \"Figure 13 ‣ A.9 Qualitative comparison against ground truth mesh ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), we directly compare the reconstructions against the ground truth mesh model for the same Replica office0 scene.\nBeyond the visually obvious improvements highlighted in the green boxes,\nthe self-calibrated model also more accurately captures the geometry of the scene.\nAs a result, after multi-view alignment,\nthe calibrated DUSt3R’s reconstruction aligns more closely with the ground truth in various regions,\nas indicated in the red boxes,\nwhile the pre-trained DUSt3R’s reconstruction exhibits misalignments in these areas.\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/x22.png)(a) Before self-calibration\n\n![Refer to caption](https://ar5iv.org/html/2412.07746/assets/Figures/office0_after.png)(b) After self-calibration\n\nFigure 13: Qualitative comparison of DUSt3R multi-view reconstructions before and after self-calibration against the ground truth mesh model in the Replica office0 scene\n(top view for the same reconstructions in Fig. [7](https://ar5iv.org/html/2412.07746#S5.F7 \"Figure 7 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (a,b)).\nThe ground truth mesh, with parts invisible to test camera views culled,\nis displayed with real vertex colors, while the reconstructions are visualized using heatmap-like colors.\nBesides the visually obvious improvements in the green boxes,\nthe self-calibrated model also better captures the overall geometry of the scene,\ndemonstrating better alignments with the ground truth at various regions, as indicated in the red boxes.\n\n### A.10 Remaining experimental results on the Replica dataset\n\nTable 9:\nTable [2](https://ar5iv.org/html/2412.07746#S5.T2 \"Table 2 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (continued): Quantitative evaluation of multi-view dense reconstructions on the Replica dataset\n\n| Methods | room0 | room1 | room2 |\n| Acc. | Comp. | Acc. | Comp. | Acc. | Comp. |\n| DUSt3R-Pretrain | 6.97 | 9.97 | 10.54 | 13.13 | 7.79 | 10.92 |\n| DUSt3R-Self-Calib | 6.83 | 9.86 | 8.88 | 11.54 | 5.80 | 9.10 |\n| DUSt3R-GT-FT | 4.59 | 8.15 | 8.64 | 11.35 | 3.35 | 7.34 |\n| COLMAP (dense) | 6.30 | 95.02 | 5.54 | 292.35 | 4.88 | 120.52 |\n| FlowMap | 66.71 | 226.22 | 96.53 | 140.33 | 37.29 | 274.98 |\n| MASt3R | 4.07 | 8.71 | 12.63 | 11.52 | 3.40 | 8.43 |\n\n### A.11 Full experimental results on Waymo Open Dataset\n\nTable 10: Full quantitative evaluation results of multi-view pose estimation on Waymo Open Dataset (Part 1)\n\n| Methods | segment-10084 | segment-10149 | segment-10161 | segment-10410 | segment-10488 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.79 | 2.19 | 0.84 | 3.08 | 0.38 | 0.54 | 0.02 | 0.15 | 0.00 | 0.55 |\n| DUSt3R-Self-Calib | 0.37 | 0.61 | 0.25 | 2.14 | 0.38 | 0.52 | 0.02 | 0.15 | 0.00 | 0.85 |\n| DUSt3R-GT-FT | 0.20 | 0.17 | 0.17 | 1.54 | 0.35 | 0.46 | 0.02 | 0.15 | 0.00 | 0.41 |\n| Flowmap | 0.31 | 3.97 | 66.62 | 1.80 | 4.74 | 7.02 | 2.84 | 0.00 | 15.05 | 0.00 |\n| PoseDiffusion | 19.43 | 25.07 | 16.76 | 49.18 | 7.65 | 13.85 | 0.03 | 10.84 | 0.00 | 1.78 |\n| RayDiffusion | 17.34 | 85.65 | 16.91 | 80.69 | 6.40 | 83.73 | 0.09 | 84.44 | 0.00 | 84.49 |\n| RelPose++ | 14.80 | - | 16.20 | - | 4.06 | - | 0.08 | - | 0.00 | - |\n| MASt3R | 2.85 | 11.87 | 1.35 | 24.92 | 0.36 | 12.96 | 0.00 | 7.65 | 0.00 | 22.87 |\n\n| Methods | segment-10504 | segment-10534 | segment-10649 | segment-10802 | segment-10940 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.29 | 2.19 | 0.74 | 0.84 | 0.95 | 2.84 | 0.35 | 1.60 | 0.01 | 0.74 |\n| DUSt3R-Self-Calib | 0.38 | 1.79 | 0.67 | 0.76 | 0.49 | 2.54 | 0.35 | 1.08 | 0.02 | 0.94 |\n| DUSt3R-GT-FT | 0.40 | 1.04 | 0.67 | 0.75 | 0.29 | 1.73 | 0.39 | 0.55 | 0.02 | 0.64 |\n| Flowmap | 66.65 | 1.48 | 14.83 | 6.24 | 36.44 | 13.74 | 21.16 | 0.44 | 1.88 | 0.06 |\n| PoseDiffusion | 16.38 | 2.54 | 13.31 | 1.42 | 20.19 | 2.26 | 13.61 | 23.74 | 1.43 | 32.79 |\n| RayDiffusion | 17.03 | 85.26 | 10.73 | 84.73 | 18.59 | 85.09 | 12.77 | 81.44 | 2.38 | 84.38 |\n| RelPose++ | 16.88 | - | 13.24 | - | 13.69 | - | 12.92 | - | 2.31 | - |\n| MASt3R | 1.16 | 25.16 | 9.91 | 19.41 | 0.65 | 20.53 | 1.26 | 24.75 | 0.15 | 9.00 |\n\n| Methods | segment-10980 | segment-10998 | segment-11096 | segment-11436 | segment-11672 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.80 | 1.19 | 0.51 | 0.66 | 0.69 | 1.43 | 0.50 | 1.28 | 0.40 | 2.09 |\n| DUSt3R-Self-Calib | 0.09 | 0.69 | 0.50 | 0.64 | 0.69 | 1.42 | 0.34 | 0.74 | 0.17 | 1.29 |\n| DUSt3R-GT-FT | 0.13 | 0.49 | 0.80 | 0.63 | 0.71 | 1.46 | 0.37 | 0.83 | 0.10 | 0.60 |\n| Flowmap | 65.17 | 0.66 | 34.91 | 8.07 | 12.88 | 6.72 | 12.43 | 0.59 | 66.10 | 2.23 |\n| PoseDiffusion | 18.19 | 31.04 | 11.51 | 5.42 | 12.09 | 8.91 | 13.74 | 15.61 | 11.11 | 8.02 |\n| RayDiffusion | 19.12 | 85.00 | 13.80 | 83.88 | 15.08 | 84.71 | 15.23 | 84.22 | 8.92 | 85.25 |\n| RelPose++ | 13.55 | - | 14.07 | - | 13.30 | - | 16.90 | - | 11.89 | - |\n| MASt3R | 1.61 | 6.59 | 0.57 | 2.48 | 1.11 | 8.72 | 0.51 | 25.26 | 0.46 | 39.65 |\n\n| Methods | segment-11867 | segment-11933 | segment-11987 | segment-12056 | segment-12153 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.20 | 1.41 | 0.00 | 0.76 | 0.39 | 1.30 | 0.52 | 1.58 | 0.35 | 0.97 |\n| DUSt3R-Self-Calib | 0.18 | 1.77 | 0.00 | 0.85 | 0.33 | 1.28 | 0.32 | 2.32 | 0.35 | 1.00 |\n| DUSt3R-GT-FT | 4.27 | 2.28 | 0.00 | 0.51 | 0.33 | 1.28 | 0.30 | 0.70 | 0.31 | 0.59 |\n| Flowmap | 10.73 | 2.62 | 59.68 | 0.00 | 39.77 | 3.15 | 48.50 | 3.39 | 14.49 | 2.40 |\n| PoseDiffusion | 2.44 | 5.20 | 0.00 | 15.37 | 11.22 | 11.04 | 9.41 | 34.37 | 7.24 | 15.39 |\n| RayDiffusion | 6.08 | 85.63 | 0.00 | 83.92 | 11.74 | 84.31 | 17.18 | 85.94 | 6.46 | 85.70 |\n| RelPose++ | 2.39 | - | 0.00 | - | 11.01 | - | 16.00 | - | 2.92 | - |\n| MASt3R | 1.67 | 10.26 | 0.00 | 14.03 | 3.91 | 5.05 | 2.01 | 19.19 | 0.56 | 11.21 |\n\n| Methods | segment-12537 | segment-12555 | segment-12892 | segment-13034 | segment-13347 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.63 | 1.38 | 0.02 | 0.45 | 0.20 | 0.68 | 3.84 | 4.12 | 0.01 | 0.79 |\n| DUSt3R-Self-Calib | 0.54 | 1.42 | 0.02 | 0.75 | 0.08 | 0.56 | 1.63 | 4.19 | 0.01 | 0.43 |\n| DUSt3R-GT-FT | 0.10 | 1.17 | 0.02 | 0.04 | 0.05 | 1.14 | 1.97 | 2.28 | 0.01 | 0.25 |\n| Flowmap | 32.50 | 0.62 | 46.88 | 0.01 | 17.30 | 0.40 | 43.23 | 12.63 | 16.67 | 0.05 |\n| PoseDiffusion | 15.92 | 10.06 | 0.12 | 6.56 | 4.81 | 37.32 | 41.47 | 3.80 | 0.70 | 10.08 |\n| RayDiffusion | 13.73 | 86.47 | 0.11 | 83.48 | 6.39 | 83.62 | 33.72 | 83.64 | 1.95 | 84.32 |\n| RelPose++ | 6.56 | - | 0.07 | - | 9.31 | - | 36.88 | - | 1.68 | - |\n| MASt3R | 0.42 | 2.11 | 0.00 | 4.99 | 0.24 | 15.56 | 1.59 | 24.94 | 0.13 | 7.47 |\n\n| Methods | segment-13585 | segment-13732 | segment-13748 | segment-13763 | segment-13781 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.77 | 1.93 | 8.13 | 4.10 | 0.00 | 1.59 | 0.10 | 0.23 | 1.86 | 2.10 |\n| DUSt3R-Self-Calib | 0.47 | 0.39 | 6.82 | 3.90 | 0.00 | 3.20 | 0.09 | 0.32 | 1.73 | 1.73 |\n| DUSt3R-GT-FT | 0.36 | 0.42 | 3.51 | 1.59 | 0.00 | 1.27 | 0.12 | 0.45 | 1.69 | 1.68 |\n| Flowmap | 21.94 | 0.91 | 10.93 | 9.08 | 65.35 | 0.00 | 5.87 | 0.70 | 65.69 | 1.20 |\n| PoseDiffusion | 11.12 | 12.22 | 41.83 | 19.75 | 0.00 | 4.26 | 7.52 | 11.11 | 13.90 | 21.86 |\n| RayDiffusion | 10.40 | 84.53 | 55.53 | 81.32 | 0.00 | 86.28 | 11.27 | 82.18 | 18.50 | 84.38 |\n| RelPose++ | 13.53 | - | 46.03 | - | 0.00 | - | 10.67 | - | 16.10 | - |\n| MASt3R | 0.37 | 14.36 | 2.02 | 45.88 | 0.00 | 13.12 | 0.56 | 16.25 | 0.58 | 18.27 |\n\n| Methods | segment-13787 | segment-13790 | segment-13849 | segment-13887 | segment-13944 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 1.91 | 1.88 | 4.48 | 4.15 | 0.27 | 0.99 | 1.24 | 2.56 | 0.03 | 0.23 |\n| DUSt3R-Self-Calib | 0.42 | 0.35 | 3.34 | 5.12 | 0.22 | 0.43 | 0.79 | 2.14 | 0.04 | 0.65 |\n| DUSt3R-GT-FT | 0.24 | 0.46 | 1.87 | 1.24 | 0.29 | 0.69 | 0.23 | 1.71 | 0.03 | 0.27 |\n| Flowmap | 65.92 | 1.95 | 67.17 | 19.31 | 14.12 | 1.41 | 22.24 | 0.89 | 7.22 | 0.03 |\n| PoseDiffusion | 10.28 | 14.95 | 44.05 | 10.49 | 16.78 | 16.87 | 17.17 | 9.37 | 1.40 | 13.21 |\n| RayDiffusion | 5.54 | 82.41 | 41.05 | 85.28 | 17.90 | 83.32 | 18.03 | 83.37 | 3.20 | 83.80 |\n| RelPose++ | 9.65 | - | 49.12 | - | 11.05 | - | 16.24 | - | 2.51 | - |\n| MASt3R | 2.27 | 8.68 | 41.31 | 28.24 | 0.91 | 15.96 | 0.60 | 20.04 | 0.22 | 25.37 |\n\nTable 11: Full quantitative evaluation results of multi-view pose estimation on Waymo Open Dataset (Part 2)\n\n| Methods | segment-14178 | segment-14188 | segment-14386 | segment-14470 | segment-14586 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.22 | 1.71 | 0.82 | 0.96 | 0.03 | 0.52 | 0.35 | 1.04 | 0.32 | 1.14 |\n| DUSt3R-Self-Calib | 0.09 | 0.26 | 0.83 | 0.99 | 0.03 | 0.55 | 0.20 | 1.13 | 0.26 | 0.70 |\n| DUSt3R-GT-FT | 0.05 | 0.48 | 0.88 | 0.65 | 0.02 | 0.37 | 0.11 | 1.02 | 0.12 | 0.38 |\n| FlowMap | 10.78 | 0.21 | 34.62 | 8.03 | 67.15 | 0.47 | 67.30 | 0.55 | 20.05 | 1.06 |\n| PoseDiffusion | 9.39 | 3.32 | 10.25 | 7.19 | 1.41 | 5.46 | 3.95 | 26.92 | 10.92 | 11.94 |\n| RayDiffusion | 11.52 | 86.31 | 9.25 | 84.93 | 1.32 | 86.42 | 5.58 | 85.69 | 10.38 | 87.09 |\n| RelPose++ | 8.78 | - | 13.53 | - | 1.43 | - | 4.56 | - | 7.85 | - |\n| MASt3R | 0.14 | 33.95 | 0.13 | 8.70 | 0.01 | 6.21 | 0.19 | 0.92 | 0.20 | 17.51 |\n\n| Methods | segment-14631 | segment-14643 | segment-14737 | segment-14918 | segment-15272 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.02 | 0.38 | 0.02 | 0.05 | 0.05 | 0.50 | 0.64 | 2.07 | 0.13 | 1.54 |\n| DUSt3R-Self-Calib | 0.02 | 0.12 | 0.03 | 0.26 | 0.04 | 0.19 | 0.51 | 1.31 | 0.14 | 1.67 |\n| DUSt3R-GT-FT | 0.01 | 0.43 | 0.01 | 0.36 | 0.03 | 0.78 | 0.17 | 1.05 | 0.12 | 0.64 |\n| FlowMap | 54.43 | 0.02 | 34.54 | 0.01 | 62.51 | 0.02 | 12.51 | 0.13 | 65.77 | 0.67 |\n| PoseDiffusion | 0.40 | 10.31 | 0.20 | 4.60 | 0.48 | 58.43 | 8.80 | 14.48 | 6.27 | 1.69 |\n| RayDiffusion | 0.51 | 80.16 | 0.70 | 84.18 | 1.01 | 85.80 | 9.30 | 86.42 | 10.48 | 83.64 |\n| RelPose++ | 0.37 | - | 0.40 | - | 0.99 | - | 9.97 | - | 7.54 | - |\n| MASt3R | 0.01 | 4.37 | 0.02 | 24.20 | 0.01 | 7.18 | 0.15 | 17.16 | 0.35 | 33.00 |\n\n| Methods | segment-15370 | segment-15410 | segment-15739 | segment-15865 | segment-16050 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.38 | 1.43 | 0.00 | 0.16 | 0.03 | 0.29 | 0.43 | 1.51 | 0.01 | 0.48 |\n| DUSt3R-Self-Calib | 0.35 | 1.67 | 0.00 | 0.20 | 0.03 | 0.16 | 0.18 | 0.95 | 0.01 | 0.75 |\n| DUSt3R-GT-FT | 0.22 | 1.21 | 0.00 | 0.25 | 0.03 | 0.51 | 0.12 | 0.44 | 0.01 | 0.61 |\n| FlowMap | 19.65 | 1.07 | 35.24 | 0.00 | 50.23 | 0.02 | 7.26 | 2.27 | 16.66 | 0.04 |\n| PoseDiffusion | 11.95 | 12.85 | 0.00 | 12.67 | 1.65 | 7.88 | 15.60 | 29.29 | 0.22 | 39.76 |\n| RayDiffusion | 14.86 | 84.60 | 0.00 | 84.32 | 1.50 | 84.64 | 18.44 | 85.29 | 0.22 | 83.85 |\n| RelPose++ | 14.61 | - | 0.00 | - | 1.55 | - | 16.29 | - | 0.29 | - |\n| MASt3R | 0.14 | 5.21 | 0.00 | 7.27 | 0.02 | 1.18 | 0.54 | 23.49 | 0.01 | 12.81 |\n\n| Methods | segment-16062 | segment-16367 | segment-16418 | segment-16645 | segment-16721 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 14.93 | 3.35 | 0.52 | 1.55 | 0.12 | 0.41 | 0.89 | 3.36 | 3.91 | 2.13 |\n| DUSt3R-Self-Calib | 3.23 | 3.09 | 0.31 | 0.99 | 0.05 | 0.36 | 0.47 | 1.71 | 7.73 | 4.40 |\n| DUSt3R-GT-FT | 1.09 | 1.26 | 0.05 | 0.54 | 0.05 | 0.57 | 0.50 | 0.91 | 10.14 | 2.56 |\n| FlowMap | 64.20 | 5.49 | 3.85 | 1.23 | 6.02 | 0.36 | 63.50 | 4.06 | 64.96 | 11.18 |\n| PoseDiffusion | 43.39 | 35.25 | 12.32 | 4.96 | 8.39 | 7.83 | 28.05 | 59.33 | 43.68 | 4.94 |\n| RayDiffusion | 46.45 | 85.46 | 13.82 | 84.41 | 7.24 | 84.36 | 23.68 | 84.94 | 37.64 | 83.14 |\n| RelPose++ | 23.36 | - | 9.12 | - | 9.41 | - | 29.81 | - | 47.79 | - |\n| MASt3R | 4.16 | 36.81 | 0.65 | 10.62 | 0.28 | 21.33 | 2.38 | 29.15 | 12.67 | 46.19 |\n\n| Methods | segment-16743 | segment-16942 | segment-16951 | segment-17030 | segment-17052 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.42 | 0.92 | 0.00 | 0.70 | 0.09 | 0.48 | 0.55 | 1.96 | 0.24 | 0.47 |\n| DUSt3R-Self-Calib | 0.40 | 0.82 | 0.00 | 0.54 | 0.09 | 0.53 | 0.52 | 1.58 | 0.28 | 0.62 |\n| DUSt3R-GT-FT | 0.12 | 0.90 | 0.00 | 0.92 | 0.22 | 1.05 | 0.62 | 1.38 | 0.18 | 0.38 |\n| FlowMap | 3.49 | 0.39 | 23.53 | 0.00 | 20.71 | 0.41 | 66.69 | 1.29 | 24.01 | 0.79 |\n| PoseDiffusion | 8.81 | 29.72 | 0.00 | 37.82 | 1.49 | 3.47 | 8.27 | 18.55 | 6.52 | 2.84 |\n| RayDiffusion | 6.38 | 82.81 | 0.00 | 83.65 | 3.96 | 84.95 | 12.34 | 86.11 | 8.17 | 85.18 |\n| RelPose++ | 8.58 | - | 0.00 | - | 3.13 | - | 11.00 | - | 5.82 | - |\n| MASt3R | 0.35 | 17.33 | 0.00 | 27.89 | 0.14 | 23.55 | 0.47 | 37.95 | 0.24 | 16.97 |\n\n| Methods | segment-17136 | segment-17174 | segment-17212 | segment-17262 | segment-17351 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.00 | 0.70 | 0.04 | 1.57 | 1.08 | 2.78 | 0.69 | 2.66 | 3.72 | 4.52 |\n| DUSt3R-Self-Calib | 0.00 | 0.67 | 0.04 | 0.54 | 0.75 | 1.36 | 0.46 | 0.68 | 1.95 | 3.08 |\n| DUSt3R-GT-FT | 0.00 | 0.69 | 0.03 | 0.79 | 0.58 | 1.03 | 0.14 | 0.20 | 0.63 | 1.20 |\n| FlowMap | 15.73 | 0.00 | 26.55 | 0.01 | 16.44 | 3.00 | 14.32 | 2.08 | 64.86 | 5.68 |\n| PoseDiffusion | 0.00 | 15.44 | 0.77 | 22.26 | 18.75 | 10.02 | 18.89 | 28.26 | 40.69 | 0.61 |\n| RayDiffusion | 0.00 | 83.01 | 0.87 | 86.80 | 15.09 | 84.30 | 16.71 | 86.99 | 41.94 | 87.07 |\n| RelPose++ | 0.00 | - | 0.73 | - | 15.50 | - | 18.62 | - | 38.25 | - |\n| MASt3R | 0.00 | 21.45 | 0.02 | 4.85 | 2.83 | 21.88 | 2.09 | 23.93 | 3.24 | 16.06 |\n\n| Methods | segment-17387 | segment-17595 | segment-17652 | segment-17756 | segment-17792 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.08 | 0.31 | 2.03 | 3.07 | 0.00 | 0.39 | 0.17 | 0.43 | 1.18 | 4.16 |\n| DUSt3R-Self-Calib | 0.08 | 0.40 | 0.74 | 2.26 | 0.00 | 0.39 | 0.16 | 0.41 | 0.63 | 2.18 |\n| DUSt3R-GT-FT | 0.08 | 0.25 | 0.27 | 1.37 | 0.00 | 0.86 | 0.69 | 0.78 | 0.41 | 2.76 |\n| FlowMap | 67.21 | 0.16 | 64.83 | 5.51 | 18.89 | 0.00 | 65.36 | 5.34 | 65.86 | 0.96 |\n| PoseDiffusion | 2.41 | 40.89 | 21.37 | 4.92 | 0.00 | 32.09 | 11.53 | 9.27 | 20.60 | 11.24 |\n| RayDiffusion | 1.68 | 84.45 | 17.35 | 86.20 | 0.00 | 84.55 | 10.82 | 83.95 | 19.01 | 84.28 |\n| RelPose++ | 1.68 | - | 13.92 | - | 0.00 | - | 12.56 | - | 19.40 | - |\n| MASt3R | 0.25 | 2.91 | 1.57 | 5.10 | 0.00 | 28.83 | 1.61 | 13.92 | 1.51 | 32.49 |\n\nTable 12: Full quantitative evaluation results of multi-view pose estimation on Waymo Open Dataset (Part 3)\n\n| Methods | segment-17835 | segment-18149 | segment-19363 | segment-22189 | segment-22573 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.44 | 1.10 | 0.02 | 0.72 | 0.61 | 1.07 | 0.94 | 2.63 | 0.22 | 0.61 |\n| DUSt3R-Self-Calib | 0.40 | 0.86 | 0.02 | 0.86 | 0.48 | 0.80 | 0.52 | 2.91 | 0.14 | 0.50 |\n| DUSt3R-GT-FT | 0.15 | 1.75 | 0.02 | 0.51 | 0.47 | 0.69 | 3.42 | 2.06 | 0.18 | 0.61 |\n| FlowMap | 11.01 | 0.71 | 11.66 | 0.47 | 15.73 | 1.32 | 31.67 | 26.62 | 6.07 | 0.49 |\n| PoseDiffusion | 2.14 | 17.48 | 2.04 | 2.62 | 11.46 | 23.42 | 29.46 | 17.82 | 5.45 | 6.25 |\n| RayDiffusion | 10.42 | 83.72 | 1.75 | 86.20 | 12.22 | 85.41 | 22.59 | 85.63 | 12.11 | 84.58 |\n| RelPose++ | 6.71 | - | 2.26 | - | 11.66 | - | 18.93 | - | 13.62 | - |\n| MASt3R | 0.19 | 29.94 | 0.10 | 4.77 | 0.34 | 31.45 | 1.25 | 32.51 | 0.18 | 13.95 |\n\n| Methods | segment-23632 | segment-23741 | segment-23839 | segment-26012 | segment-27095 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.00 | 0.10 | 0.25 | 0.42 | 0.01 | 1.42 | 3.91 | 3.57 | 0.18 | 1.06 |\n| DUSt3R-Self-Calib | 0.00 | 0.06 | 0.21 | 0.35 | 0.01 | 1.36 | 2.11 | 2.97 | 0.08 | 0.79 |\n| DUSt3R-GT-FT | 0.00 | 0.59 | 0.11 | 0.49 | 0.01 | 1.67 | 2.24 | 1.65 | 0.08 | 0.37 |\n| FlowMap | 18.27 | 0.00 | 66.80 | 0.24 | 64.95 | 0.00 | 32.14 | 1.85 | 24.32 | 7.17 |\n| PoseDiffusion | 0.00 | 19.19 | 10.14 | 15.66 | 0.02 | 48.88 | 23.48 | 23.16 | 15.16 | 8.79 |\n| RayDiffusion | 0.00 | 84.12 | 9.91 | 84.55 | 0.02 | 88.55 | 24.43 | 82.83 | 17.32 | 86.31 |\n| RelPose++ | 0.00 | - | 7.39 | - | 0.02 | - | 22.62 | - | 9.57 | - |\n| MASt3R | 0.00 | 10.46 | 0.22 | 23.21 | 0.00 | 3.11 | 1.58 | 24.82 | 0.34 | 13.54 |\n\n| Methods | segment-27143 | segment-27951 | segment-28306 | segment-29065 | segment-29426 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.71 | 1.25 | 0.47 | 0.86 | 0.55 | 0.86 | 0.89 | 1.04 | 0.97 | 0.93 |\n| DUSt3R-Self-Calib | 0.37 | 0.44 | 0.38 | 0.98 | 0.56 | 0.81 | 0.90 | 1.04 | 0.90 | 0.83 |\n| DUSt3R-GT-FT | 0.28 | 0.46 | 0.89 | 0.88 | 0.57 | 0.82 | 0.85 | 1.00 | 0.12 | 1.16 |\n| FlowMap | 22.32 | 1.01 | 0.89 | 1.98 | 28.60 | 1.14 | 1.67 | 0.89 | 28.52 | 2.71 |\n| PoseDiffusion | 14.82 | 16.66 | 22.07 | 50.30 | 11.30 | 2.71 | 10.64 | 5.15 | 16.49 | 28.52 |\n| RayDiffusion | 16.48 | 86.66 | 28.07 | 81.87 | 10.34 | 83.21 | 13.85 | 84.43 | 15.03 | 83.45 |\n| RelPose++ | 13.57 | - | 28.01 | - | 7.06 | - | 10.43 | - | 12.15 | - |\n| MASt3R | 0.90 | 25.19 | 0.91 | 21.71 | 0.21 | 10.55 | 0.68 | 16.65 | 0.45 | 20.77 |\n\n| Methods | segment-31225 | segment-32758 | segment-33285 | segment-33418 | segment-34004 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.35 | 0.63 | 0.27 | 0.49 | 0.02 | 0.60 | 11.16 | 4.69 | 5.13 | 3.97 |\n| DUSt3R-Self-Calib | 0.34 | 0.75 | 0.27 | 0.50 | 0.02 | 0.42 | 2.24 | 7.65 | 3.92 | 1.94 |\n| DUSt3R-GT-FT | 0.11 | 0.33 | 0.23 | 0.25 | 0.02 | 0.75 | 2.44 | 4.25 | 2.16 | 4.62 |\n| FlowMap | 21.33 | 1.57 | 35.86 | 0.75 | 1.21 | 0.02 | 3.56 | 4.89 | 34.54 | 7.30 |\n| PoseDiffusion | 7.91 | 11.04 | 10.16 | 28.77 | 0.09 | 5.18 | 49.91 | 7.05 | 49.33 | 51.08 |\n| RayDiffusion | 9.82 | 81.75 | 10.50 | 85.19 | 0.14 | 86.37 | 48.18 | 85.77 | 45.54 | 84.92 |\n| RelPose++ | 6.94 | - | 4.63 | - | 0.13 | - | 31.38 | - | 35.44 | - |\n| MASt3R | 1.12 | 11.81 | 0.76 | 5.75 | 0.01 | 17.75 | 1.13 | 26.28 | 4.56 | 23.23 |\n\n| Methods | segment-34590 | segment-34851 | segment-35106 | segment-35228 | segment-36452 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 5.48 | 2.32 | 0.16 | 0.80 | 2.38 | 3.22 | 0.06 | 0.35 | 0.13 | 0.69 |\n| DUSt3R-Self-Calib | 3.54 | 2.04 | 0.10 | 0.77 | 2.18 | 3.30 | 0.05 | 0.36 | 0.31 | 0.29 |\n| DUSt3R-GT-FT | 1.42 | 1.51 | 0.12 | 0.63 | 2.63 | 2.77 | 0.04 | 0.27 | 0.24 | 0.56 |\n| FlowMap | 16.36 | 2.13 | 18.08 | 0.07 | 67.26 | 10.43 | 17.20 | 0.11 | 38.77 | 5.01 |\n| PoseDiffusion | 40.33 | 1.40 | 8.82 | 24.36 | 28.10 | 1.47 | 4.25 | 0.55 | 9.53 | 8.47 |\n| RayDiffusion | 35.30 | 85.89 | 6.96 | 83.16 | 26.80 | 85.35 | 3.76 | 85.23 | 9.93 | 85.83 |\n| RelPose++ | 24.70 | - | 4.37 | - | 25.92 | - | 2.94 | - | 8.43 | - |\n| MASt3R | 1.82 | 29.80 | 0.19 | 11.07 | 4.25 | 14.31 | 0.07 | 8.89 | 0.65 | 11.08 |\n\n| Methods | segment-36541 | segment-39847 | segment-40081 | segment-40379 | segment-40456 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 1.25 | 3.06 | 19.23 | 5.13 | 1.03 | 2.54 | 5.89 | 3.82 | 20.43 | 1.63 |\n| DUSt3R-Self-Calib | 0.35 | 1.52 | 2.24 | 3.72 | 0.98 | 1.82 | 0.94 | 2.58 | 8.01 | 2.78 |\n| DUSt3R-GT-FT | 0.40 | 0.80 | 1.78 | 1.75 | 0.84 | 1.79 | 3.55 | 3.67 | 23.53 | 3.77 |\n| FlowMap | 26.32 | 1.05 | 34.83 | 4.88 | 67.37 | 2.43 | 17.48 | 4.15 | 2.10 | 2.93 |\n| PoseDiffusion | 22.26 | 24.81 | 44.65 | 13.89 | 18.08 | 16.18 | 30.71 | 1.73 | 21.00 | 53.26 |\n| RayDiffusion | 24.32 | 84.01 | 41.13 | 85.27 | 14.01 | 86.18 | 33.90 | 86.04 | 25.66 | 85.09 |\n| RelPose++ | 22.72 | - | 38.22 | - | 15.42 | - | 40.81 | - | 27.25 | - |\n| MASt3R | 0.74 | 16.21 | 23.44 | 23.22 | 0.25 | 36.46 | 36.94 | 33.64 | 0.99 | 25.27 |\n\n| Methods | segment-40540 | segment-41409 | segment-45934 | segment-46325 | segment-49166 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.48 | 1.78 | 0.20 | 1.99 | 0.80 | 2.09 | 0.02 | 0.76 | 0.01 | 0.73 |\n| DUSt3R-Self-Calib | 0.31 | 1.74 | 0.09 | 1.07 | 0.49 | 0.83 | 0.02 | 0.61 | 0.01 | 1.38 |\n| DUSt3R-GT-FT | 0.12 | 1.00 | 0.05 | 1.21 | 0.33 | 0.69 | 0.01 | 0.55 | 0.01 | 0.73 |\n| FlowMap | 11.73 | 0.58 | 66.69 | 3.09 | 34.70 | 0.43 | 2.78 | 0.01 | 17.43 | 0.00 |\n| PoseDiffusion | 3.53 | 5.69 | 7.54 | 17.58 | 10.57 | 32.32 | 0.70 | 28.94 | 0.00 | 23.81 |\n| RayDiffusion | 8.84 | 85.22 | 10.13 | 84.64 | 12.16 | 84.32 | 1.17 | 85.11 | 0.01 | 87.31 |\n| RelPose++ | 9.62 | - | 8.69 | - | 10.43 | - | 1.33 | - | 0.01 | - |\n| MASt3R | 0.60 | 22.08 | 0.47 | 31.08 | 0.64 | 13.56 | 0.01 | 10.42 | 0.00 | 3.76 |\n\nTable 13: Full quantitative evaluation results of multi-view pose estimation on Waymo Open Dataset (Part 4)\n\n| Methods | segment-50269 | segment-50466 | segment-51547 | segment-54445 | segment-55855 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.02 | 1.40 | 0.72 | 0.92 | 0.46 | 0.78 | 0.00 | 0.79 | 1.08 | 3.25 |\n| DUSt3R-Self-Calib | 0.02 | 1.38 | 0.63 | 0.74 | 0.49 | 0.98 | 0.00 | 1.25 | 0.48 | 0.51 |\n| DUSt3R-GT-FT | 0.03 | 0.72 | 0.23 | 0.49 | 0.20 | 0.94 | 0.00 | 0.48 | 0.14 | 0.95 |\n| FlowMap | 0.11 | 0.06 | 0.43 | 0.36 | 7.09 | 3.33 | 0.75 | 0.00 | 64.80 | 2.95 |\n| PoseDiffusion | 0.20 | 36.80 | 12.33 | 9.39 | 15.11 | 5.49 | 0.00 | 21.16 | 18.87 | 36.92 |\n| RayDiffusion | 1.07 | 82.00 | 12.55 | 83.03 | 17.47 | 84.13 | 0.00 | 85.85 | 19.73 | 84.64 |\n| RelPose++ | 0.91 | - | 4.96 | - | 17.53 | - | 0.00 | - | 17.98 | - |\n| MASt3R | 0.06 | 6.43 | 0.16 | 16.06 | 2.23 | 21.26 | 0.00 | 6.52 | 0.14 | 16.11 |\n\n| Methods | segment-56382 | segment-56480 | segment-56833 | segment-57643 | segment-58104 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.12 | 0.82 | 30.44 | 4.34 | 1.35 | 1.09 | 0.03 | 0.07 | 0.53 | 1.87 |\n| DUSt3R-Self-Calib | 0.17 | 1.08 | 12.56 | 8.02 | 1.35 | 0.86 | 0.02 | 0.15 | 0.09 | 0.26 |\n| DUSt3R-GT-FT | 0.13 | 0.78 | 2.82 | 1.38 | 1.49 | 0.92 | 0.02 | 0.11 | 0.11 | 0.53 |\n| FlowMap | 6.23 | 1.00 | 63.96 | 8.24 | 65.94 | 5.93 | 44.05 | 0.01 | 1.65 | 0.41 |\n| PoseDiffusion | 2.67 | 2.83 | 40.82 | 20.78 | 7.03 | 16.44 | 1.90 | 44.77 | 18.16 | 14.25 |\n| RayDiffusion | 3.86 | 86.03 | 40.23 | 86.00 | 8.04 | 87.57 | 1.45 | 82.73 | 17.15 | 83.94 |\n| RelPose++ | 4.89 | - | 40.78 | - | 7.44 | - | 1.65 | - | 10.05 | - |\n| MASt3R | 0.19 | 4.77 | 1.56 | 25.34 | 0.43 | 16.68 | 0.04 | 16.29 | 1.34 | 14.41 |\n\n| Methods | segment-59279 | segment-59934 | segment-60792 | segment-61445 | segment-61743 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 1.31 | 2.01 | 0.37 | 1.20 | 0.12 | 0.96 | 0.28 | 1.35 | 0.59 | 0.79 |\n| DUSt3R-Self-Calib | 0.61 | 1.62 | 0.27 | 1.11 | 0.18 | 0.51 | 0.27 | 1.29 | 0.48 | 0.59 |\n| DUSt3R-GT-FT | 0.45 | 1.23 | 0.31 | 0.64 | 0.17 | 0.55 | 0.27 | 1.24 | 0.32 | 0.97 |\n| FlowMap | 63.48 | 2.74 | 26.45 | 1.25 | 22.54 | 0.41 | 0.71 | 2.39 | 16.09 | 0.87 |\n| PoseDiffusion | 15.22 | 13.01 | 13.24 | 6.33 | 7.29 | 18.23 | 11.56 | 18.07 | 13.57 | 12.09 |\n| RayDiffusion | 13.96 | 85.50 | 13.53 | 84.17 | 9.01 | 86.26 | 12.11 | 85.22 | 12.58 | 84.62 |\n| RelPose++ | 11.39 | - | 7.70 | - | 9.16 | - | 13.13 | - | 14.89 | - |\n| MASt3R | 0.44 | 12.35 | 0.80 | 15.63 | 0.38 | 12.02 | 0.35 | 15.46 | 0.28 | 20.69 |\n\n| Methods | segment-62287 | segment-62595 | segment-62783 | segment-65030 | segment-68423 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.07 | 0.28 | 0.81 | 2.52 | 0.87 | 1.64 | 0.50 | 0.68 | 0.76 | 1.21 |\n| DUSt3R-Self-Calib | 0.08 | 0.51 | 0.57 | 1.33 | 0.54 | 0.38 | 0.49 | 0.59 | 0.48 | 0.74 |\n| DUSt3R-GT-FT | 0.08 | 0.51 | 0.13 | 0.68 | 0.19 | 0.56 | 0.43 | 0.31 | 0.45 | 0.80 |\n| FlowMap | 12.08 | 0.03 | 34.90 | 1.51 | 62.22 | 0.70 | 16.36 | 1.63 | 65.16 | 12.63 |\n| PoseDiffusion | 1.62 | 2.05 | 14.08 | 11.95 | 15.71 | 15.11 | 12.13 | 18.27 | 14.71 | 0.39 |\n| RayDiffusion | 2.58 | 83.36 | 19.96 | 84.87 | 14.12 | 82.92 | 11.29 | 81.05 | 13.52 | 85.09 |\n| RelPose++ | 2.40 | - | 13.77 | - | 16.00 | - | 13.27 | - | 13.07 | - |\n| MASt3R | 0.03 | 11.91 | 0.28 | 18.00 | 1.21 | 4.88 | 1.59 | 7.40 | 1.55 | 11.60 |\n\n| Methods | segment-68627 | segment-69228 | segment-72400 | segment-72478 | segment-74355 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.02 | 0.82 | 0.44 | 0.70 | 1.36 | 1.75 | 0.12 | 0.54 | 0.78 | 1.15 |\n| DUSt3R-Self-Calib | 0.02 | 0.59 | 0.44 | 0.25 | 0.72 | 0.87 | 0.11 | 0.31 | 0.79 | 1.44 |\n| DUSt3R-GT-FT | 0.02 | 0.56 | 0.42 | 0.27 | 0.70 | 0.52 | 0.10 | 0.34 | 0.76 | 1.39 |\n| FlowMap | 48.95 | 0.01 | 50.22 | 0.31 | 5.72 | 2.21 | 13.51 | 0.37 | 32.77 | 0.98 |\n| PoseDiffusion | 0.46 | 6.46 | 10.73 | 5.88 | 26.81 | 12.04 | 8.41 | 4.67 | 13.54 | 16.78 |\n| RayDiffusion | 0.88 | 84.37 | 10.80 | 84.93 | 26.08 | 85.30 | 6.97 | 84.42 | 13.61 | 80.67 |\n| RelPose++ | 0.87 | - | 10.72 | - | 25.91 | - | 4.53 | - | 6.81 | - |\n| MASt3R | 0.02 | 20.55 | 1.86 | 7.86 | 1.90 | 15.61 | 0.47 | 23.87 | 0.16 | 16.75 |\n\n| Methods | segment-75119 | segment-78443 | segment-78551 | segment-78860 | segment-79252 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 1.09 | 0.96 | 4.83 | 4.48 | 0.79 | 1.24 | 0.24 | 1.32 | 0.42 | 0.59 |\n| DUSt3R-Self-Calib | 0.61 | 0.75 | 4.58 | 7.77 | 0.46 | 1.01 | 0.24 | 1.85 | 0.38 | 0.47 |\n| DUSt3R-GT-FT | 0.44 | 0.29 | 2.89 | 3.13 | 0.25 | 0.43 | 0.18 | 1.11 | 0.24 | 0.50 |\n| FlowMap | 65.77 | 5.41 | 11.82 | 27.20 | 13.79 | 6.82 | 1.87 | 1.59 | 38.47 | 4.77 |\n| PoseDiffusion | 14.40 | 61.44 | 42.60 | 22.56 | 21.04 | 64.68 | 6.77 | 9.84 | 9.60 | 2.92 |\n| RayDiffusion | 21.01 | 82.06 | 43.07 | 84.64 | 22.52 | 83.45 | 6.23 | 84.33 | 10.61 | 84.56 |\n| RelPose++ | 20.70 | - | 42.96 | - | 21.81 | - | 3.17 | - | 8.36 | - |\n| MASt3R | 1.07 | 28.91 | 25.31 | 21.59 | 2.34 | 26.05 | 2.20 | 13.76 | 0.94 | 9.35 |\n\n| Methods | segment-80858 | segment-81973 | segment-82293 | segment-82491 | segment-85664 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.92 | 1.39 | 0.01 | 1.08 | 0.05 | 1.08 | 3.79 | 3.24 | 0.43 | 2.07 |\n| DUSt3R-Self-Calib | 0.64 | 0.69 | 0.01 | 1.11 | 0.04 | 1.14 | 0.98 | 2.19 | 0.33 | 0.44 |\n| DUSt3R-GT-FT | 0.68 | 1.15 | 0.01 | 0.64 | 0.03 | 0.62 | 0.26 | 1.06 | 0.12 | 0.48 |\n| FlowMap | 51.33 | 2.02 | 26.73 | 0.01 | 12.76 | 0.64 | 22.68 | 9.36 | 60.06 | 0.56 |\n| PoseDiffusion | 21.14 | 57.40 | 0.02 | 51.83 | 1.50 | 28.69 | 27.50 | 12.26 | 9.59 | 13.24 |\n| RayDiffusion | 21.98 | 82.51 | 0.02 | 85.90 | 1.37 | 86.79 | 25.74 | 84.38 | 10.92 | 85.28 |\n| RelPose++ | 22.75 | - | 0.02 | - | 1.28 | - | 16.99 | - | 13.20 | - |\n| MASt3R | 1.49 | 23.72 | 0.01 | 10.38 | 0.10 | 9.91 | 0.69 | 25.66 | 0.46 | 14.95 |\n\nTable 14: Full quantitative evaluation results of multi-view pose estimation on Waymo Open Dataset (Part 5)\n\n| Methods | segment-86232 | segment-86840 | segment-86885 | segment-89208 | segment-89936 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.47 | 0.64 | 0.06 | 0.93 | 0.03 | 0.79 | 0.02 | 0.17 | 2.47 | 3.29 |\n| DUSt3R-Self-Calib | 0.31 | 0.32 | 0.06 | 0.88 | 0.03 | 0.62 | 0.02 | 0.15 | 2.88 | 3.06 |\n| DUSt3R-GT-FT | 0.24 | 0.75 | 0.05 | 0.59 | 0.05 | 0.63 | 0.03 | 0.21 | 2.46 | 3.61 |\n| FlowMap | 65.21 | 4.62 | 11.42 | 0.23 | 17.86 | 0.08 | 18.83 | 0.19 | 34.40 | 13.61 |\n| PoseDiffusion | 5.34 | 6.57 | 3.50 | 3.54 | 1.34 | 12.19 | 3.08 | 5.69 | 20.01 | 8.13 |\n| RayDiffusion | 6.76 | 83.67 | 3.94 | 86.41 | 0.90 | 85.31 | 3.02 | 83.67 | 24.47 | 84.09 |\n| RelPose++ | 7.36 | - | 2.54 | - | 1.44 | - | 3.87 | - | 16.97 | - |\n| MASt3R | 0.63 | 6.81 | 0.09 | 10.78 | 0.08 | 28.73 | 0.42 | 4.88 | 2.29 | 24.34 |\n\n| Methods | segment-91450 | segment-93509 | segment-93554 | segment-95847 | segment-98068 |\n| ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) | ATE(m) | AFE(%) |\n| DUSt3R-Pretrain | 0.07 | 0.94 | 0.61 | 1.90 | 0.08 | 0.83 | 0.08 | 0.43 | 0.07 | 0.47 |\n| DUSt3R-Self-Calib | 0.07 | 1.26 | 0.30 | 0.41 | 0.05 | 0.90 | 0.06 | 0.32 | 0.06 | 0.53 |\n| DUSt3R-GT-FT | 0.14 | 0.62 | 0.18 | 0.76 | 0.12 | 0.80 | 0.06 | 0.94 | 0.05 | 0.30 |\n| FlowMap | 61.65 | 0.48 | 0.63 | 0.54 | 34.08 | 1.77 | 24.59 | 0.11 | 19.04 | 0.40 |\n| PoseDiffusion | 2.88 | 62.13 | 16.87 | 13.16 | 2.36 | 49.54 | 5.72 | 5.45 | 5.33 | 23.84 |\n| RayDiffusion | 5.62 | 84.40 | 16.92 | 85.87 | 2.90 | 87.45 | 6.17 | 84.05 | 6.66 | 84.43 |\n| RelPose++ | 4.82 | - | 17.12 | - | 1.99 | - | 5.27 | - | 7.02 | - |\n| MASt3R | 0.04 | 11.13 | 0.97 | 23.28 | 0.04 | 0.87 | 0.29 | 30.49 | 0.42 | 35.19 |\n\n[◄](https://ar5iv.org/html/2412.07745) [![ar5iv homepage](https://ar5iv.org/assets/ar5iv.png)](https://ar5iv.org/) [Feeling\\\\\n\\\\\nlucky?](https://ar5iv.org/feeling_lucky) [Conversion\\\\\n\\\\\nreport](https://ar5iv.org/log/2412.07746) [Report\\\\\n\\\\\nan issue](https://github.com/dginev/ar5iv/issues/new?template=improve-article--arxiv-id-.md&title=Improve+article+2412.07746) [View original\\\\\n\\\\\non arXiv](https://arxiv.org/abs/2412.07746) [►](https://ar5iv.org/html/2412.07747)",
  "sections": {
    "1 Introduction": {
      "content": "![Refer to caption]Figure 1:\nGiven sparse RGB images, our self-calibration pipeline efficiently specializes a pre-trained 3D foundation model to a target scene to improve its performance for a variety of 3D vision tasks.\n\nRecently, many 3D geometric foundation models have emerged as a potential solution for in-the-wild 3D computer vision tasks such as 3D reconstruction, camera pose estimation and novel view rendering (Wang et al., [2024]; Barroso-Laguna et al., [2024]; Leroy et al., [2024]; Hong et al., [2023]).\nThese models, typically enabled by large scale Transformer pre-training, can quickly establish cross-view correspondences and directly regress 3D scene geometry from sparse RGB images.\nThey generalize to a broad range of data and exhibit a strong zero-shot performance on novel tasks.\n\nHowever, the performance of these pre-trained models can falter under challenging circumstances.\nFor instance, as highlighted in the upper left sub-figure in Fig. [1]Figure 1 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), DUSt3R’s pairwise reconstruction accuracy significantly degrades under low visual overlaps, where certain regions are observed from only a single viewpoint.\nThis decline is rooted in the inherent complexity of 3D geometric inference task,\nwhich requires much larger-scale data to fully represent the distribution of real-world 3D data.\nUnfortunately, the difficulty of annotating in-the-wild 3D data has led to the shortage of high-quality training datasets, limiting the performance of the pre-trained models.\n\nTo mitigate the problem, we propose an efficient self-calibration pipeline (Fig. [2]Figure 2 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\ntaking only sparse RGB images to specialize pre-trained 3D foundation models to the target scene.\nOur method requires no manual labeling, camera calibration, or external priors.\nWe only leverage the multi-view consistency of 3D point positions to refine and select pre-trained models’ predictions for pseudo labeling.\nTo ensure the pseudo label accuracy,\nwe develop a robust global optimization method to align and refine multi-view predictions while calibrating the prediction confidence.\nThe calibrated confidence strongly correlates with pseudo-label accuracy,\nallowing us to select high-confidence data for LoRA fine-tuning of the pre-trained model.\nOur method is tested on 161 test scenes for a variety of 3D vision tasks.\nIt is able to finish the self-calibration process within 5 minutes on a single GPU and deliver performance improvements of up to 88%.\nThe major contributions of our work include\n(1) the self-calibration pipeline, (2) the robust global optimization method, and (3) the efficient LoRA fine-tuning strategy for DUSt3R self-calibration.\n\n![Refer to caption]Figure 2:\nOverview of our self-calibration pipeline. (a) Predict: We pair sparse input RGB images and use the pre-trained 3D foundation model to predict per-pair point maps and confidence maps. (b) Robust Global Optimization: We apply robust optimization techniques to concurrently refine multi-view point predictions and calibrate prediction confidence. (c) Confidence-Based Pseudo-Labeling: Refined point maps with high calibrated confidence are used to generate pseudo-labels on calibration views. (d) LoRA Fine-Tuning: Using the pseudo-labeled data, we efficiently fine-tune the pre-trained model with LoRA. While the figure illustrates our method using DUSt3R, our approach generalizes to other 3D foundation models.",
      "citations": [
        {
          "start_pos": 422,
          "end_pos": 441,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib31",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 451,
          "end_pos": 472,
          "text": "Laguna et al., [2024]",
          "paper_id": "bib.bib1",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 474,
          "end_pos": 494,
          "text": "Leroy et al., [2024]",
          "paper_id": "bib.bib14",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 496,
          "end_pos": 515,
          "text": "Hong et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "2 Related Work": {
      "content": "### 2.1 Foundation model specialization\n\nFoundation model specialization through fine-tuning or adaptation has become the standard approach to customizing pre-trained foundation models for specific tasks or domains.\nVarious methods have been developed for the specialization of large language models (Brown, [2020]; Gururangan et al., [2020]), vision-language models (Liu et al., [2024b]; [a])), and vision foundation models (Hu et al., [2023]; Yue et al., [2024]).\nThese approaches typically employ parameter-efficient adaptation techniques (Hu et al., [2021]; Dettmers et al., [2024]; He et al., [2022]) to adapt the pre-trained models in either a supervised or unsupervised fashion.\nHowever, few works have explored the specialization of 3D geometric foundation models.\nMASt3R (Leroy et al., [2024]) and Spanner3D (Wang & Agapito, [2024]) fine-tuned DUSt3R (Wang et al., [2024]) to re-purpose it for image matching and incremental reconstruction respectively.\nJiang et al. ( [2024]) applied self-training to scale up large reconstruction models (Hong et al., [2023]) with real-world images.\nHowever, most of these methods still rely on vast amounts of labeled data.\nIn contrast, our method uses only sparse RGB images for self-calibration and requires no ground truth labels.\n\n### 2.2 Self-supervised geometric perception\n\nSelf-supervised learning has been successfully applied to a range of geometric perception tasks, including monocular depth prediction (Godard et al., [2019]), optical flow prediction (Liu et al., [2019]), camera pose estimation (Yang et al., [2021]), and structure-from-motion (Zhou et al., [2017]), significantly enhancing the performance of pre-trained geometric models.\nAmong these, Yang et al. ( [2021]) is particularly relevant to our approach,\nas it utilizes robust optimization techniques to generate geometric pseudo-labels for model fine-tuning.\nHowever, this method and most others are tailored to adapt smaller-scale pre-trained models for specific tasks.\nIn this work, we extend the pseudo-labeling strategy for self-supervised learning to 3D foundation models.\nLeveraging the versatility of these models, we can improve their performance on various 3D vision tasks.",
      "citations": [
        {
          "start_pos": 301,
          "end_pos": 314,
          "text": "Brown, [2020]",
          "paper_id": "bib.bib2",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib4"
          ]
        },
        {
          "start_pos": 316,
          "end_pos": 341,
          "text": "Gururangan et al., [2020]",
          "paper_id": "bib.bib8",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 368,
          "end_pos": 387,
          "text": "Liu et al., [2024b]",
          "paper_id": "bib.bib17",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 426,
          "end_pos": 443,
          "text": "Hu et al., [2023]",
          "paper_id": "bib.bib12",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 445,
          "end_pos": 463,
          "text": "Yue et al., [2024]",
          "paper_id": "bib.bib33",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 543,
          "end_pos": 560,
          "text": "Hu et al., [2021]",
          "paper_id": "bib.bib11",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 562,
          "end_pos": 585,
          "text": "Dettmers et al., [2024]",
          "paper_id": "bib.bib3",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 587,
          "end_pos": 604,
          "text": "He et al., [2022]",
          "paper_id": "bib.bib9",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 781,
          "end_pos": 801,
          "text": "Leroy et al., [2024]",
          "paper_id": "bib.bib14",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 818,
          "end_pos": 840,
          "text": "Wang & Agapito, [2024]",
          "paper_id": "bib.bib29",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 861,
          "end_pos": 880,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib31",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 963,
          "end_pos": 984,
          "text": "Jiang et al. ( [2024]",
          "paper_id": "bib.bib13",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 1049,
          "end_pos": 1068,
          "text": "Hong et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 1461,
          "end_pos": 1482,
          "text": "Godard et al., [2019]",
          "paper_id": "bib.bib7",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 1510,
          "end_pos": 1528,
          "text": "Liu et al., [2019]",
          "paper_id": "bib.bib18",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 1555,
          "end_pos": 1574,
          "text": "Yang et al., [2021]",
          "paper_id": "bib.bib32",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 1604,
          "end_pos": 1623,
          "text": "Zhou et al., [2017]",
          "paper_id": "bib.bib35",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 1712,
          "end_pos": 1732,
          "text": "Yang et al. ( [2021]",
          "paper_id": "bib.bib32",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        }
      ]
    },
    "3 Preliminaries": {
      "content": "Our pipeline is primarily tested on DUSt3R (Wang et al., [2024]).\nBelow, we provide key details about DUSt3R to give readers the necessary context for understanding our contributions.\n\n### 3.1 DUSt3R\n\nAs shown in Fig. [2]Figure 2 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), DUSt3R takes an RGB image pair (Ii,Ij)(I\\_{i},I\\_{j}) as input and directly regresses the pixel-wise point maps and confidence maps:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (Xi,i,Ci,i),(Xj,i,Cj,i)=DUSt3R​(Ii,Ij)\\\\displaystyle(X^{i,i},C^{i,i}),(X^{j,i},C^{j,i})=\\\\text{DUSt3R}(I^{i},I^{j}) |  | (1) |\n\nHere, Xi,i,Xj,i∈ℝH×W×3X^{i,i},X^{j,i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3} are the point maps for view ii and view jj,\nboth expressed in the camera coordinate frame of view ii,\nand are regressed up to a unknown scale.\nTheir corresponding confidence maps are denoted as Ci,i,Cj,i∈ℝH×WC^{i,i},C^{j,i}\\\\in\\\\mathbb{R}^{H\\\\times W}111See App. [A.1]A.1 DUSt3R training loss ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for details on the training loss of DUSt3R..\n\n### 3.2 Recovering camera parameters\n\nThe camera intrinsics can be recovered from the predicted point maps in Eq. [1]In 3.1 DUSt3R ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nAssuming a pinhole camera model with square pixels and principal points at image centers,\nthe camera ii’s focal length fif\\_{i} can be estimated by solving the following optimization problem using Weiszfeld algorithm:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | fi∗=arg​minfi​∑p=1H​WCpi,i​‖(up′,vp′)−fi​(Xp,0i,i,Xp,1i,i)/Xp,2i,i‖\\\\displaystyle f\\_{i}^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{f\\_{i}}\\\\sum\\_{p=1}^{HW}C\\_{p}^{i,i}\\\\left\\\\\\|\\\\left(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p}\\\\right)-f\\_{i}(X\\_{p,0}^{i,i},X\\_{p,1}^{i,i})/{X\\_{p,2}^{i,i}}\\\\right\\\\\\| |  | (2) |\n\nwhere (up′,vp′)=(up−W/2,vp−H/2)(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p})=(u\\_{p}-W/2,v\\_{p}-H/2) represents the re-centered image coordinates for pixel pp.\n\nThe relative camera poses are estimated by comparing the predictions for image pair (Ii,Ij)(I\\_{i},I\\_{j}) and (Ij,Ii)(I\\_{j},I\\_{i}).\nWith point maps Xi,iX^{i,i} and Xi,jX^{i,j}, we can apply Procrustes alignment (Luo & Hancock, [1999]) to estimate the relative pose Ti,j∈SE​(3)T\\_{i,j}\\\\in\\\\text{SE}(3) from camera ii to jj and the point map scale σi,j\\\\sigma\\_{i,j}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (Ti,j,σi,j)∗=arg⁡minTi,j,σi,j​∑pCpi,i​Cpi,j​‖σi,j​Ti,j​Xpi,i−Xpi,j‖2\\\\displaystyle(T\\_{i,j},\\\\sigma\\_{i,j})^{\\*}=\\\\underset{T\\_{i,j},\\\\sigma\\_{i,j}}{\\\\arg\\\\min}\\\\sum\\_{p}C\\_{p}^{i,i}C\\_{p}^{i,j}\\\\left\\\\\\|\\\\sigma\\_{i,j}T\\_{i,j}X\\_{p}^{i,i}-X\\_{p}^{i,j}\\\\right\\\\\\|^{2} |  | (3) |\n\nwhere we omit the homogenization of point maps for brevity.\n\n### 3.3 Multi-view point map alignment\n\nGiven multiple images {I1,I2,…,IN}\\\\{I\\_{1},I\\_{2},\\\\dots,I\\_{N}\\\\} captured in a 3D scene,\nthe multi-view DUSt3R-predicted point maps are aligned to form a global point cloud.\nDifferent from bundle adjustment, this alignment is formalized as an 3D-3D-projection-based optimization problem over a connectivity graph 𝒢​(𝒱,ℰ)\\\\mathcal{G}(\\\\mathcal{V},\\\\mathcal{E}),\nin which the vertices 𝒱\\\\mathcal{V} represent the NN images and the edges ℰ\\\\mathcal{E} represent all image pairs with visual overlaps.\n\nTo initialize the optimization parameters,\nthe highest-confidence spanning tree is extracted from the graph.\nAnchoring the most confident image pair at the origin,\nthe initial estimates of focal lengths, point map scales and relative poses, as derived from Eq. [2]In 3.2 Recovering camera parameters ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), [3]In 3.2 Recovering camera parameters ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), are propagated along the tree edges to all NN views,\nyielding initial focal lengths {fi\\|i=1,…,N}\\\\{f\\_{i}\\|i=1,\\\\dots,N\\\\}, point maps {χi∈ℝH×W×3}\\\\{\\\\chi^{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3}\\\\} and image-pair scales {σ(i,j)∈ℝ}\\\\{\\\\sigma^{(i,j)}\\\\in\\\\mathbb{R}\\\\} and poses {T(i,j)∈SE​(3)}\\\\{T^{(i,j)}\\\\in\\\\text{SE}(3)\\\\},\nall expressed in a unified global coordinate frame.\n\nThese initial estimates are further refined by minimizing the 3D-3D projection error between the global point maps χ\\\\chi and the transformed predicted point maps:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (χ,T,σ)∗=arg⁡minχ,T,σ​∑(i,j)∈ℰ∑v∈{i,j}∑p=1H​WCpv,i​‖χpv−σ(i,j)​T(i,j)​Xpv,i‖\\\\displaystyle(\\\\chi,T,\\\\sigma)^{\\*}=\\\\underset{\\\\chi,T,\\\\sigma}{\\\\arg\\\\min}\\\\sum\\_{(i,j)\\\\in\\\\mathcal{E}}\\\\sum\\_{v\\\\in\\\\{i,j\\\\}}\\\\sum\\_{p=1}^{HW}C\\_{p}^{v,i}\\\\left\\\\\\|\\\\chi\\_{p}^{v}-\\\\sigma^{(i,j)}T^{(i,j)}X\\_{p}^{v,i}\\\\right\\\\\\| |  | (4) |\n\nNote that the global point maps χpv\\\\chi\\_{p}^{v} can be further re-parameterize via depth back-projection:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | χpv=Tv​Kv−1​Dp​(up,vp,1)𝖳=Tv​Dpfv​(up′,vp′,1)𝖳\\\\displaystyle\\\\chi^{v}\\_{p}=T\\_{v}K\\_{v}^{-1}D\\_{p}(u\\_{p},v\\_{p},1)^{\\\\mathsf{T}}=T\\_{v}\\\\frac{D\\_{p}}{f\\_{v}}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}} |  | (5) |\n\nwhere KvK\\_{v} and TvT\\_{v} represent the intrinsics and extrinsics for view vv and DpD\\_{p} is the depth value for pixel pp.\nThe optimization problem can therefore be reformulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (T,σ,f,D)∗=arg⁡minT,σ,f,D​∑(i,j)∑v∑pCpv,i​‖Tv​Dpfv​(up′,vp′,1)𝖳−σ(i,j)​T(i,j)​Xpv,i‖\\\\displaystyle(T,\\\\sigma,f,D)^{\\*}=\\\\underset{T,\\\\sigma,f,D}{\\\\arg\\\\min}\\\\sum\\_{(i,j)}\\\\sum\\_{v}\\\\sum\\_{p}C\\_{p}^{v,i}\\\\left\\\\\\|T\\_{v}\\\\frac{D\\_{p}}{f\\_{v}}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}}-\\\\sigma^{(i,j)}T^{(i,j)}X\\_{p}^{v,i}\\\\right\\\\\\| |  | (6) |\n\nHere, the per-image-pair poses T(i,j)T^{(i,j)} and per-image poses TiT\\_{i} represent the same transformations but are parameterized separately to allow for additional optimization flexibility.\nThe optimization is solved by a few hundred steps of standard gradient descent.\nTo avoid trivial optimum of σ(i,j)=0\\\\sigma^{(i,j)}=0, Π(i,j)​σ(i,j)=1\\\\Pi\\_{(i,j)}\\\\sigma\\_{(i,j)}=1 is enforced during the optimization.",
      "citations": [
        {
          "start_pos": 44,
          "end_pos": 63,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib31",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2308,
          "end_pos": 2329,
          "text": "Luo & Hancock, [1999]",
          "paper_id": "bib.bib19",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        }
      ]
    },
    "4 Methodology": {
      "content": "We aim to adapt a 3D geometric foundation model, such as DUSt3R (Wang et al., [2024]), to a target scene using a sparse set of uncalibrated RGB images {I1,I2,…,IN}\\\\{I\\_{1},I\\_{2},\\\\dots,I\\_{N}\\\\}. The goal is to enhance the pre-trained model’s performance on test images {IN+1,IN+2,…,IN+M}\\\\{I\\_{N+1},I\\_{N+2},\\\\dots,I\\_{N+M}\\\\} from the same scene. Our approach generates compact LoRA adapters, which integrate with the pre-trained model to produce a scene-calibrated model.\n\n### 4.1 Self-calibration pipeline\n\nFig. [2]Figure 2 ‣ 1 Introduction ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") shows our self-calibration pipeline.\nWe start by using the pre-trained DUSt3R, as in Eq. [1]In 3.1 DUSt3R ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), to predict point and confidence maps for all calibration image pairs.\nIn challenging conditions, such as under limited camera view overlap,\nDUSt3R’s predictions may include errors and outliers, and the prediction confidence may not precisely reflect the prediction accuracy\n(See Fig. [4]Figure 4 ‣ 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for an example of overconfident prediction).\nFor this reason, directly relying on predicted confidence for pseudo label selection may hurt the model performance (see Sec. [9]Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (a,b)).\n\nHowever, each 3D point in the scene is co-observed by many camera view pairs.\nWe could leverage accurate DUSt3R predictions from well-conditioned, e.g. high-visual-overlap, view pairs to refine and identify inaccurate point map predictions.\nWe therefore develop a robust multi-view point map alignment method (Sec. [4.2]Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")) to (1) optimize the point map and (2) calibrate the prediction confidence.\nWe then use the refined point maps and calibrated confidence to pseudo-label the calibration images {Ii}i=1N\\\\{I\\_{i}\\\\}\\_{i=1}^{N} (Sec. [4.3]Pseudo labeling with calibrated confidence ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\nafter which we fine-tune the pre-trained DUSt3R model using LoRA on the pseudo-labeled data (Sec. [4.4]Fine-tuning with LoRA ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")).\n\n### 4.2 Robust multi-view point map alignment with confidence calibration\n\nWe develop a robust multi-view point map alignment method by incorporating the prediction confidence into the global optimization in Eq. [6]In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nSpecifically,\nwe re-parameterize the confidence term Cpv,iC\\_{p}^{v,i} in Eq. [6]In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") as an optimizable weight term wpv,iw\\_{p}^{v,i} to automatically tune each point prediction’s contribution to the optimization.\nWhile the predicted confidence can be imprecise in challenging cases,\nit still remains informative for prediction accuracy.\nThus we intend to introduce a regularization term that encourages the weights to remain close to the predicted confidence, and also avoid trivial solutions.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption](a) Image pair\n\n![Refer to caption](b) Pred. confidence\n\n![Refer to caption](c) Error map\n\n![Refer to caption](d) Pred. error v.s. Confidence\n\nFigure 4:\nPre-trained DUSt3R’s (b) prediction confidence and (c) error map on (a) an example image pair:\nIn cases of limited visual overlap, DUSt3R may produce overconfident predictions (★).\nOur robust multi-view alignment method effectively reduces this overconfidence,\nmaintaining high confidence for accurate predictions (+, ×\\\\times) and low confidence for outlier predictions (∙\\\\bullet).\n\nWe found our objective to be surprisingly aligned with Geman-McClure robust M-estimator (Geman et al., [1992]),\nwhich essentially uses a regularization term (an outlier process in robust optimization terminology) to encourage weights to be close to unity in least-squares optimizations.\nInspired by this, we designed our regularization term to follow a similar structure.\nThe optimization in Eq. [6]In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") is therefore reformulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (T,σ,f,D,𝒲)∗=arg​minT,σ,f,D,𝒲​∑(i,j)∑v∑pwpv,i​‖epv,i‖+μ​(wpv,i−Cpv,i)2\\\\displaystyle(T,\\\\sigma,f,D,\\\\mathcal{W})^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{T,\\\\sigma,f,D,\\\\mathcal{W}}\\\\sum\\_{(i,j)}\\\\sum\\_{v}\\\\sum\\_{p}w\\_{p}^{v,i}\\\\\\|e\\_{p}^{v,i}\\\\\\|+\\\\mu(\\\\sqrt{w\\_{p}^{v,i}}-\\\\sqrt{C\\_{p}^{v,i}})^{2} |  | (7) |\n\nwhere epv,i=Tv​Dp​(up′,vp′,1)𝖳/fv−σ(i,j)​T(i,j)​Xpv,ie^{v,i}\\_{p}=T\\_{v}D\\_{p}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}}/f\\_{v}-\\\\sigma^{(i,j)}T^{(i,j)}X\\_{p}^{v,i} represents the pixel-wise residual error and μ\\\\mu is a constant hyper-parameter to control the regularization strength.\n\nRather than updating the weights in the joint optimization loss Eq. [7]In 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") via gradient back-propagation, we draw inspiration from the iterative re-weighted least squares approach (Rao & Kreutz-Delgado, [1999]) for robust M-estimation,\nto derive a closed-form weight update rule for fast confidence re-weighting:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | wpv,i=Cpv,i/(1+‖epv,i‖/μ)2\\\\displaystyle w\\_{p}^{v,i}=C\\_{p}^{v,i}/(1+\\\\\\|e\\_{p}^{v,i}\\\\\\|/\\\\mu)^{2} |  | (8) |\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption](a) Calibrated confidence\n\n![Refer to caption](b) Point estimation error\n\n![Refer to caption](c) Pixels to pseudo-label\n\n![Refer to caption](d) Pseudo labels\n\nFigure 5:\nPseudo-labeling with (a) calibrated confidence, which\nis a good measure of the (b) point estimation accuracy.\nWe select high-calibrated-confidence point predictions as pseudo labels (d) for DUSt3R finetuning.\n\nWith this update rule, we can still solve the original optimization problem (Eq. [6]In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")) while periodically applying the weight updates.\nAs demonstrated in Appendix [A.2]A.2 Derivation of weight update rule ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), this is equivalent to solving the joint optimization.\n\nThe weight update rule can be understood as follows:\npoint predictions with lower residual errors,\nmeaning those that are more consistent with predictions from other image pairs,\nwill maintain confidence similar to the predicted value.\nIn contrast, point predictions that are inconsistent across views will have their confidence significantly reduced.\nThis method effectively minimizes confidence for overly confident predictions, as illustrated in Fig. [4]Figure 4 ‣ 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"),\nensuring that confidence becomes more closely correlated with point estimation accuracy and provides better guidance for global optimization and pseudo-labeling.\n\n### 4.3 Pseudo labeling with calibrated confidence\n\nWe use the calibrated confidence and optimized point maps for confidence-based pseudo-labeling.\nTo compute pseudo labels for the calibration image pairs,\nwe need to transform the global optimization results from Eq. [7]In 4.2 Robust multi-view point map alignment with confidence calibration ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") to local image-pair coordinate frame.\nFollowing Eq. [5]In 3.3 Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"),\nwe back-project the optimized depth maps DpD\\_{p} to 3D and transform the points to the image-pair coordinate frame.\nWe then threshold the point estimations with a confidence cutoff wcutoffw\\_{\\\\text{cutoff}} and retain the high-confidence ones as pseudo labels.\nThe pseudo labeling rule can be summarized as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | X~pj,i=Ti∗−1​Tj∗​Dp∗fj∗​(up′,vp′,1)𝖳,where​p∈{p\\|wp∗j,i>wcutoff}\\\\displaystyle\\\\tilde{X}^{j,i}\\_{p}=T\\_{i}^{\\*-1}T^{\\*}\\_{j}\\\\frac{D^{\\*}\\_{p}}{f^{\\*}\\_{j}}(u^{\\\\prime}\\_{p},v^{\\\\prime}\\_{p},1)^{\\\\mathsf{T}},\\\\quad\\\\text{where}\\ p\\\\in\\\\{p\\|w\\_{p}^{\\*j,i}>w\\_{\\\\text{cutoff}}\\\\} |  | (9) |\n\nWe experimentally found that setting wcutoff=1.5w\\_{\\\\text{cutoff}}=1.5 works effectively for most test scenes.\n\nNote that our method is naturally robust to dynamic elements in the scene (See Tab. [3]Table 3 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")).\nThis is because the dynamic points break the multi-view consistency assumption and will be filtered out by pseudo labeling with calibrated confidence.\n\n### 4.4 Fine-tuning with LoRA\n\nOn the pseudo-labeled data, we fine-tune the pre-trained DUSt3R with LoRA (Hu et al., [2021]) and the same pre-training loss (as Eq. [12]In A.1 DUSt3R training loss ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")).\nLoRA freezes the pretrained model weights and injects trainable rank decomposition matrices into layers of Transformer architecture, greatly reducing the number of trainable parameters.\nThis (1) improves the runtime- and memory-efficiency of self-calibration and\n(2) reduces the catastrophic forgetting of the pre-training data.\n\n![Refer to caption]Figure 6:\nWhat is the best DUSt3R fine-tuning strategy?\nWe plot the mean prediction errors on test images against the number of trainable parameters for various fine-tuning options on an example test scene (Replica “office0”).\nWe found adapting all attention weights with rank-16 LoRA (i.e. ★) achieves the best trade-off between performance and efficiency on most test scenes.\n\nTo find the optimal DUSt3R fine-tuning strategy, we conducted extensive experiments to compare different fine-tuning options across multiple test scenes.\nPlease see Fig. [6]Figure 6 ‣ 4.4 Fine-tuning with LoRA ‣ 4 Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for an example, where we plot the test errors (defined in Sec. [5]Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")) against trainable parameter counts for different LoRA and direct fine-tuning strategies.\nWe found adapting all attention weights with rank-16 LoRA often leads to the best trade-off between performance and efficiency.\nIt reduces the number of trainable parameters by more than 99% and has a on-par performance with directly fine-tuning the attention or all weights.\n\nUsing rank-16 LoRA, fine-tuning on 10 calibration images converges in under 3.5 minutes with a batch size of 2.\nPeak GPU memory usage during fine-tuning stays under 20GB,\nenabling the process to run on a single standard GPU.\nAnd each LoRA adapter require less than 18MB of disk storage.",
      "citations": [
        {
          "start_pos": 65,
          "end_pos": 84,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib31",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4296,
          "end_pos": 4316,
          "text": "Geman et al., [1992]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 5775,
          "end_pos": 5790,
          "text": "Delgado, [1999]",
          "paper_id": "bib.bib20",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 9662,
          "end_pos": 9679,
          "text": "Hu et al., [2021]",
          "paper_id": "bib.bib11",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        }
      ]
    },
    "5 Experiments": {
      "content": "We evaluated our method on 161 test scenes for the tasks of 3D reconstruction, multi-view camera parameter estimation and novel view rendering.\n\nDatasets\nWe tested our method on all available test scenes from the Replica (Straub et al., [2019]) and Waymo Open Dataset (Sun et al., [2020]),\nas well as on three test scenes from the TUM RGBD dataset (Schubert et al., [2018]) that are most frequently tested in literature.\nThis amounts to a total of 161 test scenes, all of which are distinct from the DUSt3R pre-training scenes.\n\nThe Replica dataset comprises eight indoor scenes, each containing 2000 RGB-D images rendered by Sucar et al. ( [2021]).\nFor each scene, the first 1000 RGB images serve as the calibration split and the remaining as the test split.\nThe depth images are not utilized during self-calibration;\nthey are used solely to compute the ground truth point maps.\nWe randomly sample222\nUnless specified otherwise, all random sampling use seed=0 for re-producibility.\n10 images from the calibration split as the calibration images.\n\nThe Waymo Open Dataset has in total 150 test data segments.\nIn each segment, only forward-looking camera images are adopted,\nwhere the first 100 form the calibration split and the remaining ∼\\\\sim100 images belong to the test split.\nWe sample 10 images from the calibration split for self-calibration.\n\nPlease refer to App. [A.4]A.4 Evaluation results on TUM RGBD dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for details about the data splits and tasks for the TUM RGBD dataset.\n\nTasks\nOn the Replica dataset, we evaluate our method for pairwise and multi-view reconstruction tasks.\nFor pairwise reconstruction, we sample 100 image pairs with visual overlaps from the test split as test images.\nFor multi-view reconstruction, we sample 10 views from the test split.\n\nOn the Waymo dataset, we evaluate our method for the tasks of multi-view camera parameter estimation and novel view rendering.\nFor novel view rendering, we use InstantSplat (Fan et al., [2024]),\nwhich adopts DUSt3R-predicted point cloud and camera parameters as initialization,\nto train 3D Gaussian Splatting (3DGS) models and render novel-view images.\nFrom the test split, we select every 10th images (i.e. 0th, 10th, 20th, ⋯\\\\cdots)\nfor camera pose estimation evaluation and InstantSplat training.\nImages at indices 5, 15, 25, ⋯\\\\cdots are used as novel views to evaluate the InstantSplat renders.\nNote that although our method is robust to dynamic environments,\nInstantSplat relies on the static world assumption to train 3DGS.\nWe therefore selected segments 10084, 10649, and 10802 –\nthat are mostly static – from the first 10 test segments for the novel view rendering evaluation.\n\nBaselines\nThe two most important comparison models for our self-calibrated DUSt3R (DUSt3R-Self-Calib) are the pre-trained DUSt3R (DUSt3R-Pretrain)\nand the fine-tuned DUSt3R on ground truth point maps of calibration image pairs (DUSt3R-GT-FT).\nThe ground-truth fine-tuned model is considered as the upper limit of ours, serving as an oracle model.\n\nBoth methods are evaluated in most tests,\nwith the exception of the TUM dataset, where no ground truth depth is available.\nIn this case, we use noisy depth measurements for fine-tuning,\nreferred to as DUSt3R-Depth-FT.\nOn the Waymo dataset, we use the high-quality Lidar point clouds for ground-truth-based fine-tuning.\nFor a fair comparison, the training hyperparameters for ground-truth and depth-based fine-tuning are kept consistent with those used in our method.\n\nFor multi-view stereo reconstruction,\nwe also use COLMAP (MVS)(Schonberger & Frahm, [2016]; Schönberger et al., [2016]), FlowMap(Smith et al., [2024]) and MASt3R(Duisterhof et al., [2024]) as baselines,\nall of which perform dense reconstructions with un-calibrated images.\n\nCOLMAP (MVS) is a standard SfM and MVS pipeline for which\nwe adopt the default setups.\n\nFlowMap is a differentiable SfM model for RGB videos.\nIt relies on optical flow and point tracking algorithms to bootstrap its scene parameter optimization process.\n\nMASt3R re-purposes DUSt3R for image matching.\nBeyond 3D point regression, it establishes accurate cross-view correspondences, and leverages both 3D-3D and 2D-3D correspondences for global point map alignment.\nWe adopt the pre-trained MASt3R with default hyper-parameters.\n\nFor fair comparison in multi-view reconstruction, we use the same global optimization method for DUSt3R and its variants (as detailed in Sec. [3.3]Multi-view point map alignment ‣ 3 Preliminaries ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\nand retain all points for evaluation without applying confidence-based filtering to DUSt3R and MASt3R reconstructions.\n\nFor multi-view camera parameter estimation,\nwe use COLMAP, RelPose++(Lin et al., [2024]), PoseDiffusion(Wang et al., [2023]),\nRayDiffusion(Zhang et al., [2024]), FlowMap(Smith et al., [2024]) and MASt3R(Duisterhof et al., [2024]) as the additional baselines.\n\nRelPose++ uses a pairwise scoring network and a multi-view reasoning transformer to predict multi-view camera poses.\n\nPoseDiffusion develops a diffusion-based bundle adjustment method to estimate multi-view camera parameters.\nA geometry-guided sampling (GGS) scheme is applied to enforce epipolar constraints across views.\nWe adopt the GGS-enabled PoseDiffusion with the CO3Dv2 checkpoint.\n\nRayDiffusion re-parameterize cameras as rays and applies a ray diffuser network to denoise camera rays and recover camera parameters.\n\nAll three methods above are pre-trained on domain-specific data without further fine-tuning.\n\nFor novel view rendering, we use the pre-trained,\nself-calibrated and finetuned DUSt3R for InstantSplat’s 3DGS initialization,\nand the different variants for InstantSplat are refered to as:\nInstantSplat(Fan et al., [2024]), InstantSplat-Self-Calib, InstantSplat-GT-FT.\n\nEvaluation Metrics\nFor DUSt3R pairwise reconstruction, we use the average point prediction error as the evaluation metric.\nThis is the average Euclidean distance calculated between the predicted and ground truth point maps within local image-pair coordinate frames,\nwith predicted maps normalized and re-scaled to align with ground truth.\n\nWe assess multi-view stereo reconstructions based on accuracy and completeness relative to the ground truth Replica mesh models (Straub et al., [2019]).\nAccuracy measures the average distance of reconstructed points to their nearest mesh points,\nwhile completeness measures the average distance of mesh points to their nearest reconstructed points.\nFollowing Zhu et al. ( [2022]), we exclude mesh parts invisible to the test images.\n\nThe multi-view camera parameter estimations are evaluated with the absolute trajectory error (ATE) and the average focal length estimation error (AFE).\n\nThe quality of novel view renders is assessed with Peak Signal-to-Noise Ratio (PSNR), Structural Similarity Index Measure (SSIM), and Learned Perceptual Image Patch Similarity (LPIPS).\n\n### 5.1 Results\n\nFor the Replica dataset, we report pairwise and multi-view reconstruction results in Tab. [1]Table 1 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and Tab. [2]Table 2 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nCompared to the pre-trained DUSt3R, our method reduces point prediction errors by up to 38% and reconstructs models that are up to 61% more accurate and 41% more complete.\nAs Fig. [7]Figure 7 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") shows,\nour approach is particularly effective at reducing outlier point predictions, thanks to the multi-view consistent pseudo labels\n333Please check out [A.9]A.9 Qualitative comparison against ground truth mesh ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for qualitative comparison of the reconstructions with the ground truth mesh model..\nThe remaining performance gap compared to the fine-tuned DUSt3R is attributed to differences in data size and label accuracy.\n\nSince cameras in Replica are mostly facing inward, it is easier for COLMAP and MASt3R to establish accurate cross-view feature matches,\nresulting in better accuracy and completeness on certain test scenes, even surpassing the fine-tuned DUSt3R.\nOn the other hand, FlowMap struggles due to the discontinuous calibration images, which disrupt the optical flow and point tracking it relies on.\n\nTable 1: Quantitative evaluation of pairwise reconstructions on the Replica dataset.\nWe report the average point prediction errors (cm) for direct DUSt3R predictions.\n\n| Methods | office0 | office1 | office2 | office3 | office4 | room0 | room1 | room2 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| DUSt3R-Pretrain | 14.29 | 11.02 | 14.03 | 15.44 | 14.96 | 13.11 | 27.99 | 16.82 |\n| DUSt3R-Self-Calib | 8.84 | 9.38 | 11.05 | 14.41 | 13.92 | 13.02 | 19.88 | 13.65 |\n| DUSt3R-GT-FT | 7.12 | 7.95 | 10.55 | 12.88 | 12.29 | 9.27 | 17.40 | 12.58 |\n\nTable 2: Quantitative evaluation of multi-view reconstructions on the Replica dataset.\nWe report the accuracy (Acc. \\[cm\\] ↓\\\\downarrow) and completeness (Comp. \\[cm\\] ↓\\\\downarrow) of 3D reconstructions against the ground truth meshes.\nPlease refer to App.Tab. [9]Table 9 ‣ A.10 Remaining experimental results on the Replica dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for the remaining results omitted due to space limit.\n\n| Methods | office0 | office1 | office2 | office3 | office4 |\n| Acc. | Comp. | Acc. | Comp. | Acc. | Comp. | Acc. | Comp. | Acc. | Comp. |\n| DUSt3R-Pretrain | 5.22 | 6.78 | 9.21 | 9.27 | 6.57 | 8.35 | 8.43 | 11.89 | 12.97 | 15.89 |\n| DUSt3R-Self-Calib | 4.43 | 6.08 | 3.56 | 5.48 | 4.75 | 6.89 | 6.60 | 11.00 | 7.81 | 12.22 |\n| DUSt3R-GT-FT | 3.51 | 5.29 | 3.26 | 5.53 | 3.93 | 6.72 | 4.02 | 7.42 | 5.53 | 11.25 |\n| COLMAP (dense) | 2.61 | 89.87 | 58.15 | 158.83 | 4.87 | 194.16 | 5.51 | 162.53 | 6.42 | 120.84 |\n| FlowMap | 51.78 | 152.05 | 142.81 | 107.17 | 24.16 | 189.86 | 19.58 | 248.16 | 15.34 | 153.64 |\n| MASt3R | 4.69 | 6.05 | 3.92 | 4.87 | 4.09 | 7.39 | 7.17 | 9.42 | 4.87 | 11.52 |\n\n![Refer to caption](a) Before self-calibration\n\n![Refer to caption](b) After self-calibration\n\n![Refer to caption](c) Before self-calibration\n\n![Refer to caption](d) After self-calibration\n\nFigure 7: Qualitative results on the Replica (a,b) and TUM (c,d) datasets.\nAfter DUSt3R self-calibration, we observe much fewer outlier points in the reconstruction of the Replica scene “office0”.\nOn the TUM scene “fr2\\_xyz”, the green and red frustums represent the estimated and ground truth cameras respectively.\nThe camera pose estimates are made more accurate by self-calibration.\n\nThe multi-view camera parameter estimation results on the Waymo dataset are presented in Tab. [3]Table 3 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nCompared to the pre-trained DUSt3R,\nour method reduces camera trajectory estimation errors by up to 88% and focal length estimation errors by up to 79%.\nOut of 150 total test scenes (detailed in App. [A.11]A.11 Full experimental results on Waymo Open Dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\")),\nour approach successfully improves camera parameter estimation results on 116 scenes.\nMost failures occur when the test vehicle remains mostly static for the test images (e.g. segment-10488).\nThis degenerate case expect the model to predict zero relative pose across views and fails to distinguish different methods.\n\nBy comparison, COLMAP fails, and MASt3R shows degraded performance on Waymo due to the presence of dynamic objects and the larger baselines between forward-facing cameras, which make feature matching more difficult.\nFlowMap still struggles due to the abrupt visual changes across views.\nRelPose++, PoseDiffusion and RayDiffusion, without domain- or scene-specific training, fails to provide accurate estimates on the out-of-distribution data.\n\nThe novel view rendering results on Waymo are presented in Tab. [4]Table 4 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and Fig. [8]Figure 8 ‣ 5.1 Results ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\nOur method effectively reduces floating artifacts in the optimized 3DGS,\nresulting in quality improvements of up to 0.97 dB in PSNR, 0.09 in SSIM, and 0.04 in LPIPS.\n\nThe quantitative results on the TUM dataset are presented and analyzed in App. [A.4]A.4 Evaluation results on TUM RGBD dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").\n\nTable 3: Quantitative evaluation of camera parameter estimates on Waymo Open Dataset.\nWe report the absolute trajectory error (ATE (m) ↓\\\\downarrow) and average focal error (AFE (%) ↓\\\\downarrow) for test camera views.\nPlease see App. [A.11]A.11 Full experimental results on Waymo Open Dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for full evaluation results on 150 test scenes.\n\n| Methods | segment-10084 | segment-10149 | segment-10649 | segment-10802 | segment-10980 |\n| ATE | AFE | ATE | AFE | ATE | AFE | ATE | AFE | ATE | AFE |\n| DUSt3R-Pretrain | 0.79 | 2.19 | 0.84 | 3.08 | 0.95 | 2.84 | 0.35 | 1.60 | 0.80 | 1.19 |\n| DUSt3R-Self-Calib | 0.37 | 0.61 | 0.25 | 2.14 | 0.49 | 2.54 | 0.35 | 1.08 | 0.09 | 0.69 |\n| DUSt3R-GT-FT | 0.20 | 0.17 | 0.17 | 1.54 | 0.29 | 1.73 | 0.39 | 0.55 | 0.13 | 0.49 |\n| COLMAP | Fail | Fail | Fail | Fail | Fail | Fail | Fail | Fail | Fail | Fail |\n| Flowmap | 0.31 | 3.97 | 66.62 | 1.80 | 36.44 | 13.74 | 21.16 | 0.44 | 65.17 | 0.66 |\n| PoseDiffusion | 19.43 | 25.07 | 16.76 | 49.18 | 20.19 | 2.26 | 13.61 | 23.74 | 18.19 | 31.04 |\n| RayDiffusion | 17.34 | 85.65 | 16.91 | 80.69 | 18.59 | 85.09 | 12.77 | 81.44 | 19.12 | 85.00 |\n| RelPose++ | 14.80 | - | 16.20 | - | 13.69 | - | 12.92 | - | 13.55 | - |\n| MASt3R | 2.85 | 11.87 | 1.35 | 24.92 | 0.65 | 20.53 | 1.26 | 24.75 | 1.61 | 6.59 |\n\n![Refer to caption](a) Before self-calibration\n\n![Refer to caption](b) After self-calibration\n\n![Refer to caption](c) Before self-calibration\n\n![Refer to caption](d) After self-calibration\n\nFigure 8:\nNovel view renders by InstantSplat (Fan et al., [2024]) before and after DUSt3R self-calibration on Waymo Open Dataset.\nTable 4: Quantitative evaluation of novel view renders on the Waymo open dataset\n\n| Methods | Segment-10084 | Segment-10649 | Segment-10802 |\n| --- | --- | --- | --- |\n| PSNR ↑\\\\uparrow | SSIM ↑\\\\uparrow | LPIPS ↓\\\\downarrow | PSNR ↑\\\\uparrow | SSIM ↑\\\\uparrow | LPIPS ↓\\\\downarrow | PSNR ↑\\\\uparrow | SSIM ↑\\\\uparrow | LPIPS ↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| InstantSplat | 21.45 | 0.67 | 0.33 | 22.45 | 0.72 | 0.30 | 25.94 | 0.79 | 0.24 |\n| InstantSplat-Self-Calib | 22.42 | 0.76 | 0.29 | 22.81 | 0.77 | 0.27 | 26.36 | 0.81 | 0.22 |\n| InstantSplat-GT-FT | 22.64 | 0.75 | 0.27 | 23.07 | 0.78 | 0.27 | 26.43 | 0.81 | 0.22 |\n\n### 5.2 MASt3R self-calibration\n\nOur pipeline is not limited to the specialization of DUSt3R.\nWe show in App. [A.5]A.5 MASt3R self-calibration ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") that the same idea applies to MASt3R.\n\n![Refer to caption](a) Scene: Replica office0\n\n![Refer to caption](b) Scene: Waymo test segment-10084\n\n![Refer to caption](c) Scene: Replica office0\n\n![Refer to caption](d) Scene: Waymo test segment-10149\n\nFigure 9:\nAblation study: (a, b) Pseudo-labeling with un-calibrated confidence hurt the model performance. (c) Our method maintains consistent performance across varying random seeds used for calibration image sampling. (d) Our method’s performance improves with more calibration images and saturates after around 10.\n\n### 5.3 Ablation study\n\nUn-calibrated confidence for pseudo labeling\nDirectly using the prediction confidence for pseudo-labeling could harm the model performance.\nAs Fig. [9]Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (a, b) shows,\nthresholding refined point predictions with un-calibrated confidence leads to consistent under-performance of the self-calibrated model, regardless of the confidence cutoff value.\n\nVarying random seed\nOur method works with casually captured RGB images and does not rely on carefully selected calibration images to succeed.\nAs shown in Fig. [9]Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (c),\nour method maintains consistent performance across varying random seeds used for calibration image sampling.\n\nThe number of calibration images\nAs shown in Fig. [9]Figure 9 ‣ 5.2 MASt3R self-calibration ‣ 5 Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") (d), using few calibration images (e.g., fewer than 10) limits our method’s performance due to an insufficient number of view pairs to enforce multi-view consistency in global optimization and a limited training data size. We also observe that the performance typically saturates after around 10 calibration images.\n\nThe size of calibration split & Multi-scene concurrent self-calibration\nSee [A.6]A.6 Ablation study on the size of calibration split ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") & [A.7]A.7 Concurrent multi-scene self-calibration ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") for details.",
      "citations": [
        {
          "start_pos": 222,
          "end_pos": 243,
          "text": "Straub et al., [2019]",
          "paper_id": "bib.bib25",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 269,
          "end_pos": 287,
          "text": "Sun et al., [2020]",
          "paper_id": "bib.bib27",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 349,
          "end_pos": 372,
          "text": "Schubert et al., [2018]",
          "paper_id": "bib.bib23",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 626,
          "end_pos": 647,
          "text": "Sucar et al. ( [2021]",
          "paper_id": "bib.bib26",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 2046,
          "end_pos": 2064,
          "text": "Fan et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib4",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 3638,
          "end_pos": 3665,
          "text": "Schonberger & Frahm, [2016]",
          "paper_id": "bib.bib21",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3671,
          "end_pos": 3693,
          "text": "nberger et al., [2016]",
          "paper_id": "bib.bib22",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3704,
          "end_pos": 3724,
          "text": "Smith et al., [2024]",
          "paper_id": "bib.bib24",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 3737,
          "end_pos": 3762,
          "text": "Duisterhof et al., [2024]",
          "paper_id": "bib.bib4",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib5",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 4835,
          "end_pos": 4853,
          "text": "Lin et al., [2024]",
          "paper_id": "bib.bib15",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4870,
          "end_pos": 4889,
          "text": "Wang et al., [2023]",
          "paper_id": "bib.bib30",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4905,
          "end_pos": 4925,
          "text": "Zhang et al., [2024]",
          "paper_id": "bib.bib34",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4936,
          "end_pos": 4956,
          "text": "Smith et al., [2024]",
          "paper_id": "bib.bib24",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 4969,
          "end_pos": 4994,
          "text": "Duisterhof et al., [2024]",
          "paper_id": "bib.bib4",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib5",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 5849,
          "end_pos": 5867,
          "text": "Fan et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib4",
            "bib.bib2"
          ]
        },
        {
          "start_pos": 6385,
          "end_pos": 6406,
          "text": "Straub et al., [2019]",
          "paper_id": "bib.bib25",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 6615,
          "end_pos": 6634,
          "text": "Zhu et al. ( [2022]",
          "paper_id": "bib.bib36",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 14522,
          "end_pos": 14540,
          "text": "Fan et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib4",
            "bib.bib2"
          ]
        }
      ]
    },
    "6 Conclusion": {
      "content": "Our self-calibration pipeline specializes 3D geometric foundation models to target scenes in a highly time- and memory-efficient manner.\nIt boosts pre-trained model performance by up to 88% across diverse datasets and 3D vision tasks.\nHowever, in certain cases, the self-calibrated model still falls short of competing methods due to the inherent difficulty of 3D geometric inference.",
      "citations": []
    },
    "7 Ethic Statement": {
      "content": "Our work utilizes publicly available datasets that adhere to strict ethical guidelines.\nThese datasets ensure that personally identifiable information, such as human faces and vehicle license plates, is either blurred or anonymized to safeguard privacy.\nOur work does not engage with human subjects or introduce concerns regarding fairness or potential misuse.\nWe are fully committed to maintaining ethical integrity throughout the development and application of our methods.",
      "citations": []
    },
    "8 Reproducibility statement": {
      "content": "To ensure the reproducibility of our results, we have taken the following steps: (1) A detailed explanation of our method in Sec. [4]Methodology ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), along with implementation details provided in Appendix [A.3]A.3 Implementation details ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"). (2) All datasets used in our experiments are publicly accessible. (3) Comprehensive experimental results for 161 test cases are included in Sec. [5]Experiments ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\") and further detailed in Appendix [A.4]A.4 Evaluation results on TUM RGBD dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), [A.10]A.10 Remaining experimental results on the Replica dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\"), and [A.11]A.11 Full experimental results on Waymo Open Dataset ‣ Appendix A Appendix ‣ LoRA3D: Low-Rank Self-Calibration of 3D Geometric Foundation Models\").",
      "citations": []
    }
  },
  "references": {
    "data": {
      "bib.bib2": {
        "id": "bib.bib2",
        "citation": "Brown (2020)",
        "authors": "",
        "year": "",
        "title": "Language models are few-shot learners.",
        "venue": "arXiv preprint arXiv:2005.14165",
        "pages": "",
        "url": "",
        "arxiv_id": "2005.14165",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Recent years have featured a trend towards pre-trained language representations in NLP systems, applied in increasingly flexible and task-agnostic ways for downstream transfer. First, single-layer representations were learned using word vectors \\[ [82]), [102])\\] and fed to task-specific architectures, then RNNs with multiple layers of representations and contextual state were used to form stronger representations \\[ [24]), [81]), [100])\\] (though still applied to task-specific architectures), and more recently pre-trained recurrent or transformer language models \\[ [134])\\] have been directly fine-tuned, entirely removing the need for task-specific architectures \\[ [112]), [20]), [43])\\].\n\n![Refer to caption]Figure 1.1: Language model meta-learning. During unsupervised pre-training, a language model develops a broad set of skills and pattern recognition abilities. It then uses these abilities at inference time to rapidly adapt to or recognize the desired task. We use the term “in-context learning” to describe the inner loop of this process, which occurs within the forward-pass upon each sequence. The sequences in this diagram are not intended to be representative of the data a model would see during pre-training, but are intended to show that there are sometimes repeated sub-tasks embedded within a single sequence.\n\nThis last paradigm has led to substantial progress on many challenging NLP tasks such as reading comprehension, question answering, textual entailment, and many others, and has continued to advance based on new architectures and algorithms \\[ [116]), [74]), [139]), [62])\\]. However, a major limitation to this approach is that while the architecture is task-agnostic, there is still a need for task-specific datasets and task-specific fine-tuning: to achieve strong performance on a desired task typically requires fine-tuning on a dataset of thousands to hundreds of thousands of examples specific to that task. Removing this limitation would be desirable, for several reasons.\n\nFirst, from a practical perspective, the need for a large dataset of labeled examples for every new task limits the applicability of language models. There exists a very wide range of possible useful language tasks, encompassing anything from correcting grammar, to generating examples of an abstract concept, to critiquing a short story. For many of these tasks it is difficult to collect a large supervised training dataset, especially when the process must be repeated for every new task.\n\nSecond, the potential to exploit spurious correlations in training data fundamentally grows with the expressiveness of the model and the narrowness of the training distribution. This can create problems for the pre-training plus fine-tuning paradigm, where models are designed to be large to absorb information during pre-training, but are then fine-tuned on very narrow task distributions. For instance \\[ [41])\\] observe that larger models do not necessarily generalize better out-of-distribution. There is evidence that suggests that the generalization achieved under this paradigm can be poor because the model is overly specific to the training distribution and does not generalize well outside it \\[ [138]), [88])\\]. Thus, the performance of fine-tuned models on specific benchmarks, even when it is nominally at human-level, may exaggerate actual performance on the underlying task \\[ [36]), [91])\\].\n\nThird, humans do not require large supervised datasets to learn most language tasks – a brief directive in natural language (e.g. “please tell me if this sentence describes something happy or something sad”) or at most a tiny number of demonstrations (e.g. “here are two examples of people acting brave; please give a third example of bravery”) is often sufficient to enable a human to perform a new task to at least a reasonable degree of competence. Aside from pointing to a conceptual limitation in our current NLP techniques, this adaptability has practical advantages – it allows humans to seamlessly mix together or switch between many tasks and skills, for example performing addition during a lengthy dialogue. To be broadly useful, we would someday like our NLP systems to have this same fluidity and generality.\n\nOne potential route towards addressing these issues is meta-learning111In the context of language models this has sometimes been called “zero-shot transfer”, but this term is potentially ambiguous: the method is “zero-shot” in the sense that no gradient updates are performed, but it often involves providing inference-time demonstrations to the model, so is not truly learning from zero examples. To avoid this confusion, we use the term “meta-learning” to capture the inner-loop / outer-loop structure of the general method, and the term “in context-learning” to refer to the inner loop of meta-learning. We further specialize the description to “zero-shot”, “one-shot”, or “few-shot” depending on how many demonstrations are provided at inference time. These terms are intended to remain agnostic on the question of whether the model learns new tasks from scratch at inference time or simply recognizes patterns seen during training – this is an important issue which we discuss later in the paper, but “meta-learning” is intended to encompass both possibilities, and simply describes the inner-outer loop structure. – which in the context of language models means the model develops a broad set of skills and pattern recognition abilities at training time, and then uses those abilities at inference time to rapidly adapt to or recognize the desired task (illustrated in Figure [1.1]Figure 1.1 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\")). Recent work \\[ [117])\\] attempts to do this via what we call “in-context learning”, using the text input of a pretrained language model as a form of task specification: the model is conditioned on a natural language instruction and/or a few demonstrations of the task and is then expected to complete further instances of the task simply by predicting what comes next.\n\nWhile it has shown some initial promise, this approach still achieves results far inferior to fine-tuning – for example \\[ [117])\\] achieves only 4% on Natural Questions, and even its 55 F1 CoQa result is now more than 35 points behind the state of the art. Meta-learning clearly requires substantial improvement in order to be viable as a practical method of solving language tasks.\n\nAnother recent trend in language modeling may offer a way forward. In recent years the capacity of transformer language models has increased substantially, from 100 million parameters \\[ [112])\\], to 300 million parameters \\[ [20])\\], to 1.5 billion parameters \\[ [117])\\], to 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and finally 17 billion parameters \\[ [132])\\]. Each increase has brought improvements in text synthesis and/or downstream NLP tasks, and there is evidence suggesting that log loss, which correlates well with many downstream tasks, follows a smooth trend of improvement with scale \\[ [57])\\]. Since in-context learning involves absorbing many skills and tasks within the parameters of the model, it is plausible that in-context learning abilities might show similarly strong gains with scale.\n\n![Refer to caption]Figure 1.2: Larger models make increasingly efficient use of in-context information.   We show in-context learning performance on a simple task requiring the model to remove random symbols from a word, both with and without a natural language task description (see Sec. [3.9.2]Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). The steeper “in-context learning curves” for large models demonstrate improved ability to learn a task from contextual information. We see qualitatively similar behavior across a wide range of tasks.![Refer to caption]Figure 1.3: Aggregate performance for all 42 accuracy-denominated benchmarks   While zero-shot performance improves steadily with model size, few-shot performance increases more rapidly, demonstrating that larger models are more proficient at in-context learning. See Figure [3.8]Figure 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\") for a more detailed analysis on SuperGLUE, a standard NLP benchmark suite.\n\nIn this paper, we test this hypothesis by training a 175 billion parameter autoregressive language model, which we call GPT-3, and measuring its in-context learning abilities. Specifically, we evaluate GPT-3 on over two dozen NLP datasets, as well as several novel tasks designed to test rapid adaptation to tasks unlikely to be directly contained in the training set. For each task, we evaluate GPT-3 under 3 conditions: (a) “few-shot learning”, or in-context learning where we allow as many demonstrations as will fit into the model’s context window (typically 10 to 100), (b) “one-shot learning”, where we allow only one demonstration, and (c) “zero-shot” learning, where no demonstrations are allowed and only an instruction in natural language is given to the model. GPT-3 could also in principle be evaluated in the traditional fine-tuning setting, but we leave this to future work.\n\nFigure [1.2]Figure 1.2 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\") illustrates the conditions we study, and shows few-shot learning of a simple task requiring the model to remove extraneous symbols from a word. Model performance improves with the addition of a natural language task description, and with the number of examples in the model’s context, K𝐾K. Few-shot learning also improves dramatically with model size. Though the results in this case are particularly striking, the general trends with both model size and number of examples in-context hold for most tasks we study. We emphasize that these “learning” curves involve no gradient updates or fine-tuning, just increasing numbers of demonstrations given as conditioning.\n\nBroadly, on NLP tasks GPT-3 achieves promising results in the zero-shot and one-shot settings, and in the the few-shot setting is sometimes competitive with or even occasionally surpasses state-of-the-art (despite state-of-the-art being held by fine-tuned models). For example, GPT-3 achieves 81.5 F1 on CoQA in the zero-shot setting, 84.0 F1 on CoQA in the one-shot setting, 85.0 F1 in the few-shot setting. Similarly, GPT-3 achieves 64.3% accuracy on TriviaQA in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting, the last of which is state-of-the-art relative to fine-tuned models operating in the same closed-book setting.\n\nGPT-3 also displays one-shot and few-shot proficiency at tasks designed to test rapid adaption or on-the-fly reasoning, which include unscrambling words, performing arithmetic, and using novel words in a sentence after seeing them defined only once. We also show that in the few-shot setting, GPT-3 can generate synthetic news articles which human evaluators have difficulty distinguishing from human-generated articles.\n\nAt the same time, we also find some tasks on which few-shot performance struggles, even at the scale of GPT-3. This includes natural language inference tasks like the ANLI dataset, and some reading comprehension datasets like RACE or QuAC. By presenting a broad characterization of GPT-3’s strengths and weaknesses, including these limitations, we hope to stimulate study of few-shot learning in language models and draw attention to where progress is most needed.\n\nA heuristic sense of the overall results can be seen in Figure [1.3]Figure 1.3 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\"), which aggregates the various tasks (though it should not be seen as a rigorous or meaningful benchmark in itself).\n\nWe also undertake a systematic study of “data contamination” – a growing problem when training high capacity models on datasets such as Common Crawl, which can potentially include content from test datasets simply because such content often exists on the web. In this paper we develop systematic tools to measure data contamination and quantify its distorting effects. Although we find that data contamination has a minimal effect on GPT-3’s performance on most datasets, we do identify a few datasets where it could be inflating results, and we either do not report results on these datasets or we note them with an asterisk, depending on the severity.\n\nIn addition to all the above, we also train a series of smaller models (ranging from 125 million parameters to 13 billion parameters) in order to compare their performance to GPT-3 in the zero, one and few-shot settings. Broadly, for most tasks we find relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap between zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models are more proficient meta-learners.\n\nFinally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and broader societal impacts, and attempt a preliminary analysis of GPT-3’s characteristics in this regard.\n\nThe remainder of this paper is organized as follows. In Section [2]Approach ‣ Language Models are Few-Shot Learners\"), we describe our approach and methods for training GPT-3 and evaluating it. Section [3]Results ‣ Language Models are Few-Shot Learners\") presents results on the full range of tasks in the zero-, one- and few-shot settings. Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") addresses questions of data contamination (train-test overlap). Section [5]Limitations ‣ Language Models are Few-Shot Learners\") discusses limitations of GPT-3. Section [6]Broader Impacts ‣ Language Models are Few-Shot Learners\") discusses broader impacts. Section [7]Related Work ‣ Language Models are Few-Shot Learners\") reviews related work and Section [8]Conclusion ‣ Language Models are Few-Shot Learners\") concludes.",
            "citations": null
          },
          "2 Approach": {
            "content": "![Refer to caption]Figure 2.1: Zero-shot, one-shot and few-shot, contrasted with traditional fine-tuning. The panels above show four methods for performing a task with a language model – fine-tuning is the traditional method, whereas zero-, one-, and few-shot, which we study in this work, require the model to perform the task with only forward passes at test time. We typically present the model with a few dozen examples in the few shot setting. Exact phrasings for all task descriptions, examples and prompts can be found in Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\").\n\nOur basic pre-training approach, including model, data, and training, is similar to the process described in \\[ [117])\\], with relatively straightforward scaling up of the model size, dataset size and diversity, and length of training. Our use of in-context learning is also similar to \\[ [117])\\], but in this work we systematically explore different settings for learning within the context. Therefore, we start this section by explicitly defining and contrasting the different settings that we will be evaluating GPT-3 on or could in principle evaluate GPT-3 on. These settings can be seen as lying on a spectrum of how much task-specific data they tend to rely on. Specifically, we can identify at least four points on this spectrum (see Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") for an illustration):\n\n- •\n\n\nFine-Tuning (FT) has been the most common approach in recent years, and involves updating the weights of a pre-trained model by training on a supervised dataset specific to the desired task. Typically thousands to hundreds of thousands of labeled examples are used. The main advantage of fine-tuning is strong performance on many benchmarks. The main disadvantages are the need for a new large dataset for every task, the potential for poor generalization out-of-distribution \\[ [88])\\], and the potential to exploit spurious features of the training data \\[ [36]), [91])\\], potentially resulting in an unfair comparison with human performance. In this work we do not fine-tune GPT-3 because our focus is on task-agnostic performance, but GPT-3 can be fine-tuned in principle and this is a promising direction for future work.\n\n- •\n\n\nFew-Shot (FS) is the term we will use in this work to refer to the setting where the model is given a few demonstrations of the task at inference time as conditioning \\[ [117])\\], but no weight updates are allowed. As shown in Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\"), for a typical dataset an example has a context and a desired completion (for example an English sentence and the French translation), and few-shot works by giving K𝐾K examples of context and completion, and then one final example of context, with the model expected to provide the completion. We typically set K𝐾K in the range of 10 to 100 as this is how many examples can fit in the model’s context window (nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048). The main advantages of few-shot are a major reduction in the need for task-specific data and reduced potential to learn an overly narrow distribution from a large but narrow fine-tuning dataset. The main disadvantage is that results from this method have so far been much worse than state-of-the-art fine-tuned models. Also, a small amount of task specific data is still required. As indicated by the name, few-shot learning as described here for language models is related to few-shot learning as used in other contexts in ML \\[ [45]), [133])\\] – both involve learning based on a broad distribution of tasks (in this case implicit in the pre-training data) and then rapidly adapting to a new task.\n\n- •\n\n\nOne-Shot (1S) is the same as few-shot except that only one demonstration is allowed, in addition to a natural language description of the task, as shown in Figure 1. The reason to distinguish one-shot from few-shot and zero-shot (below) is that it most closely matches the way in which some tasks are communicated to humans. For example, when asking humans to generate a dataset on a human worker service (for example Mechanical Turk), it is common to give one demonstration of the task. By contrast it is sometimes difficult to communicate the content or format of a task if no examples are given.\n\n- •\n\n\nZero-Shot (0S) is the same as one-shot except that no demonstrations are allowed, and the model is only given a natural language instruction describing the task. This method provides maximum convenience, potential for robustness, and avoidance of spurious correlations (unless they occur very broadly across the large corpus of pre-training data), but is also the most challenging setting. In some cases it may even be difficult for humans to understand the format of the task without prior examples, so this setting is in some cases “unfairly hard”. For example, if someone is asked to “make a table of world records for the 200m dash”, this request can be ambiguous, as it may not be clear exactly what format the table should have or what should be included (and even with careful clarification, understanding precisely what is desired can be difficult). Nevertheless, for at least some settings zero-shot is closest to how humans perform tasks – for example, in the translation example in Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\"), a human would likely know what to do from just the text instruction.\n\n\nFigure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the four methods using the example of translating English to French. In this paper we focus on zero-shot, one-shot and few-shot, with the aim of comparing them not as competing alternatives, but as different problem settings which offer a varying trade-off between performance on specific benchmarks and sample efficiency. We especially highlight the few-shot results as many of them are only slightly behind state-of-the-art fine-tuned models. Ultimately, however, one-shot, or even sometimes zero-shot, seem like the fairest comparisons to human performance, and are important targets for future work.\n\nSections [2.1]Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\")- [2.3]Training Process ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") below give details on our models, training data, and training process respectively.\nSection [2.4]Evaluation ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") discusses the details of how we do few-shot, one-shot, and zero-shot evaluations.\n\n### 2.1 Model and Architectures\n\nWe use the same model and architecture as GPT-2 \\[ [117])\\], including the modified initialization, pre-normalization, and reversible tokenization described therein, with the exception that we use alternating dense and locally banded sparse attention patterns in the layers of the transformer, similar to the Sparse Transformer \\[ [15])\\]. To study the dependence of ML performance on model size, we train 8 different sizes of model, ranging over three orders of magnitude from 125 million parameters to 175 billion parameters, with the last being the model we call GPT-3. Previous work \\[ [57])\\] suggests that with enough training data, scaling of validation loss should be approximately a smooth power law as a function of size; training models of many different sizes allows us to test this hypothesis both for validation loss and for downstream language tasks.\n\n| Model Name | nparamssubscript𝑛paramsn\\_{\\\\mathrm{params}} | nlayerssubscript𝑛layersn\\_{\\\\mathrm{layers}} | dmodelsubscript𝑑modeld\\_{\\\\mathrm{model}} | nheadssubscript𝑛headsn\\_{\\\\mathrm{heads}} | dheadsubscript𝑑headd\\_{\\\\mathrm{head}} | Batch Size | Learning Rate |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| GPT-3 Small | 125M | 12 | 768 | 12 | 64 | 0.5M | 6.0×10−46.0superscript1046.0\\\\times 10^{-4} |\n| GPT-3 Medium | 350M | 24 | 1024 | 16 | 64 | 0.5M | 3.0×10−43.0superscript1043.0\\\\times 10^{-4} |\n| GPT-3 Large | 760M | 24 | 1536 | 16 | 96 | 0.5M | 2.5×10−42.5superscript1042.5\\\\times 10^{-4} |\n| GPT-3 XL | 1.3B | 24 | 2048 | 24 | 128 | 1M | 2.0×10−42.0superscript1042.0\\\\times 10^{-4} |\n| GPT-3 2.7B | 2.7B | 32 | 2560 | 32 | 80 | 1M | 1.6×10−41.6superscript1041.6\\\\times 10^{-4} |\n| GPT-3 6.7B | 6.7B | 32 | 4096 | 32 | 128 | 2M | 1.2×10−41.2superscript1041.2\\\\times 10^{-4} |\n| GPT-3 13B | 13.0B | 40 | 5140 | 40 | 128 | 2M | 1.0×10−41.0superscript1041.0\\\\times 10^{-4} |\n| GPT-3 175B or “GPT-3” | 175.0B | 96 | 12288 | 96 | 128 | 3.2M | 0.6×10−40.6superscript1040.6\\\\times 10^{-4} |\n\nTable 2.1: Sizes, architectures, and learning hyper-parameters (batch size in tokens and learning rate) of the models which we trained. All models were trained for a total of 300 billion tokens.\n\nTable [2.1]Table 2.1 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the sizes and architectures of our 8 models. Here nparamssubscript𝑛paramsn\\_{\\\\mathrm{params}} is the total number of trainable parameters, nlayerssubscript𝑛layersn\\_{\\\\mathrm{layers}} is the total number of layers, dmodelsubscript𝑑modeld\\_{\\\\mathrm{model}} is the number of units in each bottleneck layer (we always have the feedforward layer four times the size of the bottleneck layer, dffsubscript𝑑ffd\\_{\\\\mathrm{ff}}=4∗dmodelabsent∗4subscript𝑑model=4\\\\ast d\\_{\\\\mathrm{model}}), and dheadsubscript𝑑headd\\_{\\\\mathrm{head}} is the dimension of each attention head. All models use a context window of nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048 tokens. We partition the model across GPUs along both the depth and width dimension in order to minimize data-transfer between nodes. The precise architectural parameters for each model are chosen based on computational efficiency and load-balancing in the layout of models across GPU’s. Previous work \\[ [57])\\] suggests that validation loss is not strongly sensitive to these parameters within a reasonably broad range.\n\n![Refer to caption]Figure 2.2: Total compute used during training. Based on the analysis in Scaling Laws For Neural Language Models \\[ [57])\\] we train much larger models on many fewer tokens than is typical. As a consequence, although GPT-3 3B is almost 10x larger than RoBERTa-Large (355M params), both models took roughly 50 petaflop/s-days of compute during pre-training. Methodology for these calculations can be found in Appendix [D]Appendix D Total Compute Used to Train Language Models ‣ Language Models are Few-Shot Learners\").\n\n### 2.2 Training Dataset\n\nDatasets for language models have rapidly expanded, culminating in the Common Crawl dataset222 [https://commoncrawl.org/the-data/]\\[ [116])\\] constituting nearly a trillion words. This size of dataset is sufficient to train our largest models without ever updating on the same sequence twice. However, we have found that unfiltered or lightly filtered versions of Common Crawl tend to have lower quality than more curated datasets. Therefore, we took 3 steps to improve the average quality of our datasets: (1) we downloaded and filtered a version of CommonCrawl based on similarity to a range of high-quality reference corpora, (2) we performed fuzzy deduplication at the document level, within and across datasets, to prevent redundancy and preserve the integrity of our held-out validation set as an accurate measure of overfitting, and (3) we also added known high-quality reference corpora to the training mix to augment CommonCrawl and increase its diversity.\n\nDetails of the first two points (processing of Common Crawl) are described in Appendix [A]Appendix A Details of Common Crawl Filtering ‣ Language Models are Few-Shot Learners\"). For the third, we added several curated high-quality datasets, including an expanded version of the WebText dataset \\[ [117])\\], collected by scraping links over a longer period of time, and first described in \\[ [57])\\], two internet-based books corpora (Books1 and Books2) and English-language Wikipedia.\n\nTable [2.2]Table 2.2 ‣ 2.2 Training Dataset ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the final mixture of datasets that we used in training. The CommonCrawl data was downloaded from 41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before filtering and 570GB after filtering, roughly equivalent to 400 billion byte-pair-encoded tokens. Note that during training, datasets are not sampled in proportion to their size, but rather datasets we view as higher-quality are sampled more frequently, such that CommonCrawl and Books2 datasets are sampled less than once during training, but the other datasets are sampled 2-3 times. This essentially accepts a small amount of overfitting in exchange for higher quality training data.\n\n| Dataset | Quantity(tokens) | Weight intraining mix | Epochs elapsed whentraining for 300B tokens |\n| --- | --- | --- | --- |\n| Common Crawl (filtered) | 410 billion | 60% | 0.44 |\n| WebText2 | 19 billion | 22% | 2.9 |\n| Books1 | 12 billion | 8% | 1.9 |\n| Books2 | 55 billion | 8% | 0.43 |\n| Wikipedia | 3 billion | 3% | 3.4 |\n\nTable 2.2: Datasets used to train GPT-3. “Weight in training mix” refers to the fraction of examples during training that are drawn from a given dataset, which we intentionally do not make proportional to the size of the dataset. As a result, when we train for 300 billion tokens, some datasets are seen up to 3.4 times during training while other datasets are seen less than once.\n\nA major methodological concern with language models pretrained on a broad swath of internet data, particularly large models with the capacity to memorize vast amounts of content, is potential contamination of downstream tasks by having their test or development sets inadvertently seen during pre-training. To reduce such contamination, we searched for and attempted to remove any overlaps with the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug in the filtering caused us to ignore some overlaps, and due to the cost of training it was not feasible to retrain the model. In Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") we characterize the impact of the remaining overlaps, and in future work we will more aggressively remove data contamination.\n\n### 2.3 Training Process\n\nAs found in \\[ [57]), [85])\\], larger models can typically use a larger batch size, but require a smaller learning rate. We measure the gradient noise scale during training and use it to guide our choice of batch size \\[ [85])\\]. Table [2.1]Table 2.1 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the parameter settings we used. To train the larger models without running out of memory, we use a mixture of model parallelism within each matrix multiply and model parallelism across the layers of the network. All models were trained on V100 GPU’s on part of a high-bandwidth cluster provided by Microsoft. Details of the training process and hyperparameter settings are described in Appendix [B]Appendix B Details of Model Training ‣ Language Models are Few-Shot Learners\").\n\n### 2.4 Evaluation\n\nFor few-shot learning, we evaluate each example in the evaluation set by randomly drawing K𝐾K examples from that task’s training set as conditioning, delimited by 1 or 2 newlines depending on the task. For LAMBADA and Storycloze there is no supervised training set available so we draw conditioning examples from the development set and evaluate on the test set. For Winograd (the original, not SuperGLUE version) there is only one dataset, so we draw conditioning examples directly from it.\n\nK𝐾K can be any value from 0 to the maximum amount allowed by the model’s context window, which is nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048 for all models and typically fits 101010 to 100100100 examples. Larger values of K𝐾K are usually but not always better, so when a separate development and test set are available, we experiment with a few values of K𝐾K on the development set and then run the best value on the test set. For some tasks (see Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\")) we also use a natural language prompt in addition to (or for K=0𝐾0K=0, instead of) demonstrations.\n\nOn tasks that involve choosing one correct completion from several options (multiple choice), we provide K𝐾K examples of context plus correct completion, followed by one example of context only, and compare the LM likelihood of each completion. For most tasks we compare the per-token likelihood (to normalize for length), however on a small number of datasets (ARC, OpenBookQA, and RACE) we gain additional benefit as measured on the development set by normalizing by the unconditional probability of each completion, by computing P​(completion\\|context)P​(completion\\|answer​\\_​context)𝑃conditionalcompletioncontext𝑃conditionalcompletionanswer\\_context\\\\frac{P(\\\\mathrm{completion}\\|\\\\mathrm{context})}{P(\\\\mathrm{completion}\\|\\\\mathrm{answer\\\\\\_context})}, where answer​\\_​contextanswer\\_context\\\\mathrm{answer\\\\\\_context} is the string \"Answer: \" or \"A: \" and is used to prompt that the completion should be an answer but is otherwise generic.\n\nOn tasks that involve binary classification, we give the options more semantically meaningful names (e.g. “True” or “False” rather than 0 or 1) and then treat the task like multiple choice; we also sometimes frame the task similar to what is done by \\[ [116])\\] (see Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\")) for details.\n\nOn tasks with free-form completion, we use beam search with the same parameters as \\[ [116])\\]: a beam width of 4 and a length penalty of α=0.6𝛼0.6\\\\alpha=0.6. We score the model using F1 similarity score, BLEU, or exact match, depending on what is standard for the dataset at hand.\n\nFinal results are reported on the test set when publicly available, for each model size and learning setting (zero-, one-, and few-shot). When the test set is private, our model is often too large to fit on the test server, so we report results on the development set. We do submit to the test server on a small number of datasets (SuperGLUE, TriviaQA, PiQa) where we were able to make submission work, and we submit only the 200B few-shot results, and report development set results for everything else.",
            "citations": null
          },
          "3 Results": {
            "content": "![Refer to caption]Figure 3.1: Smooth scaling of performance with compute. Performance (measured in terms of cross-entropy validation loss) follows a power-law trend with the amount of compute used for training. The power-law behavior observed in \\[ [57])\\] continues for an additional two orders of magnitude with only small deviations from the predicted curve. For this figure, we exclude embedding parameters from compute and parameter counts.\n\nIn Figure [3.1]Figure 3.1 ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we display training curves for the 8 models described in Section [2]Approach ‣ Language Models are Few-Shot Learners\"). For this graph we also include 6 additional extra-small models with as few as 100,000 parameters. As observed in \\[ [57])\\], language modeling performance follows a power-law when making efficient use of training compute. After extending this trend by two more orders of magnitude, we observe only a slight (if any) departure from the power-law. One might worry that these improvements in cross-entropy loss come only from modeling spurious details of our training corpus. However, we will see in the following sections that improvements in cross-entropy loss lead to consistent performance gains across a broad spectrum of natural language tasks.\n\nBelow, we evaluate the 8 models described in Section [2]Approach ‣ Language Models are Few-Shot Learners\") (the 175 billion parameter parameter GPT-3 and 7 smaller models) on a wide range of datasets. We group the datasets into 9 categories representing roughly similar tasks.\n\nIn Section [3.1]Language Modeling, Cloze, and Completion Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on traditional language modeling tasks and tasks that are similar to language modeling, such as Cloze tasks and sentence/paragraph completion tasks. In Section [3.2]Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on “closed book” question answering tasks: tasks which require using the information stored in the model’s parameters to answer general knowledge questions. In Section [3.3]Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate the model’s ability to translate between languages (especially one-shot and few-shot). In Section [3.4]Winograd-Style Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate the model’s performance on Winograd Schema-like tasks. In Section [3.5]Common Sense Reasoning ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on datasets that involve commonsense reasoning or question answering. In Section [3.6]Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on reading comprehension tasks, in Section [3.7]SuperGLUE ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on the SuperGLUE benchmark suite, and in [3.8]NLI ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we briefly explore NLI. Finally, in Section [3.9]Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), we invent some additional tasks designed especially to probe in-context learning abilities – these tasks focus on on-the-fly reasoning, adaptation skills, or open-ended text synthesis. We evaluate all tasks in the few-shot, one-shot, and zero-shot settings.\n\n### 3.1 Language Modeling, Cloze, and Completion Tasks\n\nIn this section we test GPT-3’s performance on the traditional task of language modeling, as well as related tasks that involve predicting a single word of interest, completing a sentence or paragraph, or choosing between possible completions of a piece of text.\n\n#### 3.1.1 Language Modeling\n\nWe calculate zero-shot perplexity on the Penn Tree Bank (PTB) \\[ [86])\\] dataset measured in \\[ [117])\\]. We omit the 4 Wikipedia-related tasks in that work because they are entirely contained in our training data, and we also omit the one-billion word benchmark due to a high fraction of the dataset being contained in our training set. PTB escapes these issues due to predating the modern internet. Our largest model sets a new SOTA on PTB by a substantial margin of 15 points, achieving a perplexity of 20.50. Note that since PTB is a traditional language modeling dataset it does not have a clear separation of examples to define one-shot or few-shot evaluation around, so we measure only zero-shot.\n\n| Setting | PTB |\n| --- | --- |\n| SOTA (Zero-Shot) | 35.8a |\n| GPT-3 Zero-Shot | 20.5 |\n\nTable 3.1: Zero-shot results on PTB language modeling dataset. Many other common language modeling datasets are omitted because they are derived from Wikipedia or other sources which are included in GPT-3’s training data. a\\[ [117])\\]\n\n#### 3.1.2 LAMBADA\n\n| Setting | LAMBADA(acc) | LAMBADA(ppl) | StoryCloze(acc) | HellaSwag(acc) |\n| --- | --- | --- | --- | --- |\n| SOTA | 68.0a | 8.63b | 91.8c | 85.6d |\n| GPT-3 Zero-Shot | 76.2 | 3.00 | 83.2 | 78.9 |\n| GPT-3 One-Shot | 72.5 | 3.35 | 84.7 | 78.1 |\n| GPT-3 Few-Shot | 86.4 | 1.92 | 87.7 | 79.3 |\n\nTable 3.2: Performance on cloze and completion tasks. GPT-3 significantly improves SOTA on LAMBADA while achieving respectable performance on two difficult completion prediction datasets. a\\[ [132])\\]b\\[ [117])\\]c\\[ [64])\\]d\\[ [63])\\]![Refer to caption]Figure 3.2: On LAMBADA, the few-shot capability of language models results in a strong boost to accuracy. GPT-3 2.7B outperforms the SOTA 17B parameter Turing-NLG \\[ [132])\\] in this setting, and GPT-3 175B advances the state of the art by 18%. Note zero-shot uses a different format from one-shot and few-shot as described in the text.\n\nThe LAMBADA dataset \\[ [99])\\] tests the modeling of long-range dependencies in text – the model is asked to predict the last word of sentences which require reading a paragraph of context. It has recently been suggested that the continued scaling of language models is yielding diminishing returns on this difficult benchmark. \\[ [9])\\] reflect on the small 1.5% improvement achieved by a doubling of model size between two recent state of the art results (\\[ [125])\\] and \\[ [132])\\]) and argue that “continuing to expand hardware and data sizes by orders of magnitude is not the path forward”. We find that path is still promising and in a zero-shot setting GPT-3 achieves 76% on LAMBADA, a gain of 8% over the previous state of the art.\n\nLAMBADA is also a demonstration of the flexibility of few-shot learning as it provides a way to address a problem that classically occurs with this dataset. Although the completion in LAMBADA is always the last word in a sentence, a standard language model has no way of knowing this detail. It thus assigns probability not only to the correct ending but also to other valid continuations of the paragraph. This problem has been partially addressed in the past with stop-word filters \\[ [117])\\] (which ban “continuation” words). The few-shot setting instead allows us to “frame” the task as a cloze-test and allows the language model to infer from examples that a completion of exactly one word is desired. We use the following fill-in-the-blank format:\n\nAlice was friends with Bob. Alice went to visit her friend . →→\\\\to Bob\n\nGeorge bought some baseball equipment, a ball, a glove, and a . →→\\\\to\n\nWhen presented with examples formatted this way, GPT-3 achieves 86.4% accuracy in the few-shot setting, an increase of over 18% from the previous state-of-the-art. We observe that few-shot performance improves strongly with model size. While this setting decreases the performance of the smallest model by almost 20%, for GPT-3 it improves accuracy by 10%. Finally, the fill-in-blank method is not effective one-shot, where it always performs worse than the zero-shot setting. Perhaps this is because all models still require several examples to recognize the pattern.\n\nOne note of caution is that an analysis of test set contamination identified that a significant minority of the LAMBADA dataset appears to be present in our training data – however analysis performed in Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") suggests negligible impact on performance.\n\n#### 3.1.3 HellaSwag\n\nThe HellaSwag dataset \\[ [140])\\] involves picking the best ending to a story or set of instructions. The examples were adversarially mined to be difficult for language models while remaining easy for humans (who achieve 95.6% accuracy). GPT-3 achieves 78.1% accuracy in the one-shot setting and 79.3% accuracy in the few-shot setting, outperforming the 75.4% accuracy of a fine-tuned 1.5B parameter language model \\[ [141])\\] but still a fair amount lower than the overall SOTA of 85.6% achieved by the fine-tuned multi-task model ALUM.\n\n#### 3.1.4 StoryCloze\n\nWe next evaluate GPT-3 on the StoryCloze 2016 dataset \\[ [83])\\], which involves selecting the correct ending sentence for five-sentence long stories. Here GPT-3 achieves 83.2% in the zero-shot setting and 87.7% in the few-shot setting (with K=70𝐾70K=70). This is still 4.1% lower than the fine-tuned SOTA using a BERT based model \\[ [64])\\] but improves over previous zero-shot results by roughly 10%.\n\n### 3.2 Closed Book Question Answering\n\n| Setting | NaturalQS | WebQS | TriviaQA |\n| --- | --- | --- | --- |\n| RAG (Fine-tuned, Open-Domain) \\[ [75])\\] | 44.5 | 45.5 | 68.0 |\n| T5-11B+SSM (Fine-tuned, Closed-Book) \\[ [115])\\] | 36.6 | 44.7 | 60.5 |\n| T5-11B (Fine-tuned, Closed-Book) | 34.5 | 37.4 | 50.1 |\n| GPT-3 Zero-Shot | 14.6 | 14.4 | 64.3 |\n| GPT-3 One-Shot | 23.0 | 25.3 | 68.0 |\n| GPT-3 Few-Shot | 29.9 | 41.5 | 71.2 |\n\nTable 3.3: Results on three Open-Domain QA tasks. GPT-3 is shown in the few-, one-, and zero-shot settings, as compared to prior SOTA results for closed book and open domain settings. TriviaQA few-shot result is evaluated on the wiki split test server.![Refer to caption]Figure 3.3: On TriviaQA GPT3’s performance grows smoothly with model size, suggesting that language models continue to absorb knowledge as their capacity increases. One-shot and few-shot performance make significant gains over zero-shot behavior, matching and exceeding the performance of the SOTA fine-tuned open-domain model, RAG \\[ [75])\\]\n\nIn this section we measure GPT-3’s ability to answer questions about broad factual knowledge. Due to the immense amount of possible queries, this task has normally been approached by using an information retrieval system to find relevant text in combination with a model which learns to generate an answer given the question and the retrieved text. Since this setting allows a system to search for and condition on text which potentially contains the answer it is denoted “open-book”. \\[ [115])\\] recently demonstrated that a large language model can perform surprisingly well directly answering the questions without conditioning on auxilliary information. They denote this more restrictive evaluation setting as “closed-book”. Their work suggests that even higher-capacity models could perform even better and we test this hypothesis with GPT-3. We evaluate GPT-3 on the 3 datasets in \\[ [115])\\]: Natural Questions \\[ [58])\\], WebQuestions \\[ [5])\\], and TriviaQA \\[ [49])\\], using the same splits. Note that in addition to all results being in the closed-book setting, our use of few-shot, one-shot, and zero-shot evaluations represent an even stricter setting than previous closed-book QA work: in addition to external content not being allowed, fine-tuning on the Q&A dataset itself is also not permitted.\n\nThe results for GPT-3 are shown in Table [3.3]Table 3.3 ‣ 3.2 Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). On TriviaQA, we achieve 64.3% in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting. The zero-shot result already outperforms the fine-tuned T5-11B by 14.2%, and also outperforms a version with Q&A tailored span prediction during pre-training by 3.8%. The one-shot result improves by 3.7% and matches the SOTA for an open-domain QA system which not only fine-tunes but also makes use of a learned retrieval mechanism over a 15.3B parameter dense vector index of 21M documents \\[ [75])\\]. GPT-3’s few-shot result further improves performance another 3.2% beyond this.\n\nOn WebQuestions (WebQs), GPT-3 achieves 14.4% in the zero-shot setting, 25.3% in the one-shot setting, and 41.5% in the few-shot setting. This compares to 37.4% for fine-tuned T5-11B, and 44.7% for fine-tuned T5-11B+SSM, which uses a Q&A-specific pre-training procedure. GPT-3 in the few-shot setting approaches the performance of state-of-the-art fine-tuned models. Notably, compared to TriviaQA, WebQS shows a much larger gain from zero-shot to few-shot (and indeed its zero-shot and one-shot performance are poor), perhaps suggesting that the WebQs questions and/or the style of their answers are out-of-distribution for GPT-3. Nevertheless, GPT-3 appears able to adapt to this distribution, recovering strong performance in the few-shot setting.\n\nOn Natural Questions (NQs) GPT-3 achieves 14.6% in the zero-shot setting, 23.0% in the one-shot setting, and 29.9% in the few-shot setting, compared to 36.6% for fine-tuned T5 11B+SSM. Similar to WebQS, the large gain from zero-shot to few-shot may suggest a distribution shift, and may also explain the less competitive performance compared to TriviaQA and WebQS. In particular, the questions in NQs tend towards very fine-grained knowledge on Wikipedia specifically which could be testing the limits of GPT-3’s capacity and broad pretraining distribution.\n\nOverall, on one of the three datasets GPT-3’s one-shot matches the open-domain fine-tuning SOTA. On the other two datasets it approaches the performance of the closed-book SOTA despite not using fine-tuning. On all 3 datasets, we find that performance scales very smoothly with model size (Figure [3.3]Figure 3.3 ‣ 3.2 Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\") Figure [H.7]Figure H.7 ‣ Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\")), possibly reflecting the idea that model capacity translates directly to more ‘knowledge’ absorbed in the parameters of the model.\n\n### 3.3 Translation\n\nFor GPT-2 a filter was used on a multilingual collection of documents to produce an English only dataset due to capacity concerns. Even with this filtering GPT-2 showed some evidence of multilingual capability and performed non-trivially when translating between French and English despite only training on 10 megabytes of remaining French text. Since we increase the capacity by over two orders of magnitude from GPT-2 to GPT-3, we also expand the scope of the training dataset to include more representation of other languages, though this remains an area for further improvement. As discussed in [2.2]Training Dataset ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") the majority of our data is derived from raw Common Crawl with only quality-based filtering. Although GPT-3’s training data is still primarily English (93% by word count), it also includes 7% of text in other languages. These languages are documented in the [supplemental material]. In order to better understand translation capability, we also expand our analysis to include two additional commonly studied languages, German and Romanian.\n\nExisting unsupervised machine translation approaches often combine pretraining on a pair of monolingual datasets with back-translation \\[ [123])\\] to bridge the two languages in a controlled way. By contrast, GPT-3 learns from a blend of training data that mixes many languages together in a natural way, combining them on a word, sentence, and document level. GPT-3 also uses a single training objective which is not customized or designed for any task in particular. However, our one / few-shot settings aren’t strictly comparable to prior unsupervised work since they make use of a small amount of paired examples (1 or 64). This corresponds to up to a page or two of in-context training data.\n\n| Setting | En→→\\\\toFr | Fr→→\\\\toEn | En→→\\\\toDe | De→→\\\\toEn | En→→\\\\toRo | Ro→→\\\\toEn |\n| --- | --- | --- | --- | --- | --- | --- |\n| SOTA (Supervised) | 45.6a | 35.0 b | 41.2c | 40.2d | 38.5e | 39.9e |\n| --- | --- | --- | --- | --- | --- | --- |\n| XLM \\[ [61])\\] | 33.4 | 33.3 | 26.4 | 34.3 | 33.3 | 31.8 |\n| MASS \\[ [127])\\] | 37.5 | 34.9 | 28.3 | 35.2 | 35.2 | 33.1 |\n| mBART \\[ [66])\\] | - | - | 29.8 | 34.0 | 35.0 | 30.5 |\n| GPT-3 Zero-Shot | 25.2 | 21.2 | 24.6 | 27.2 | 14.1 | 19.9 |\n| GPT-3 One-Shot | 28.3 | 33.7 | 26.2 | 30.4 | 20.6 | 38.6 |\n| GPT-3 Few-Shot | 32.6 | 39.2 | 29.7 | 40.6 | 21.0 | 39.5 |\n\nTable 3.4: Few-shot GPT-3 outperforms previous unsupervised NMT work by 5 BLEU when translating into English reflecting its strength as an English LM. We report BLEU scores on the WMT’14 Fr↔↔\\\\leftrightarrowEn, WMT’16 De↔↔\\\\leftrightarrowEn, and WMT’16 Ro↔↔\\\\leftrightarrowEn datasets as measured by multi-bleu.perl with XLM’s tokenization in order to compare most closely with prior unsupervised NMT work. SacreBLEUf\\[ [101])\\] results reported in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\"). Underline indicates an unsupervised or few-shot SOTA, bold indicates supervised SOTA with relative confidence.\na\\[ [29])\\]b\\[ [23])\\]c\\[ [136])\\]d\\[ [95])\\]e\\[ [66])\\]f\\[SacreBLEU signature: BLEU+case.mixed+numrefs.1+smooth.exp+tok.intl+version.1.2.20\\] ![Refer to caption]Figure 3.4: Few-shot translation performance on 6 language pairs as model capacity increases. There is a consistent trend of improvement across all datasets as the model scales, and as well as tendency for translation into English to be stronger than translation from English.\n\nResults are shown in Table [3.4]Table 3.4 ‣ 3.3 Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). Zero-shot GPT-3, which only receives on a natural language description of the task, still underperforms recent unsupervised NMT results. However, providing only a single example demonstration for each translation task improves performance by over 7 BLEU and nears competitive performance with prior work. GPT-3 in the full few-shot setting further improves another 4 BLEU resulting in similar average performance to prior unsupervised NMT work. GPT-3 has a noticeable skew in its performance depending on language direction. For the three input languages studied, GPT-3 significantly outperforms prior unsupervised NMT work when translating into English but underperforms when translating in the other direction. Performance on En-Ro is a noticeable outlier at over 10 BLEU worse than prior unsupervised NMT work. This could be a weakness due to reusing the byte-level BPE tokenizer of GPT-2 which was developed for an almost entirely English training dataset. For both Fr-En and De-En, few shot GPT-3 outperforms the best supervised result we could find but due to our unfamiliarity with the literature and the appearance that these are un-competitive benchmarks we do not suspect those results represent true state of the art. For Ro-En, few shot GPT-3 performs within 0.5 BLEU of the overall SOTA which is achieved by a combination of unsupervised pretraining, supervised finetuning on 608K labeled examples, and backtranslation \\[ [70])\\].\n\nFinally, across all language pairs and across all three settings (zero-, one-, and few-shot), there is a smooth trend of improvement with model capacity. This is shown in Figure [3.4]Figure 3.4 ‣ 3.3 Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\") in the case of few-shot results, and scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\").\n\n### 3.4 Winograd-Style Tasks\n\n| Setting | Winograd | Winogrande (XL) |\n| --- | --- | --- |\n| Fine-tuned SOTA | 90.1a | 84.6b |\n| GPT-3 Zero-Shot | 88.3\\* | 70.2 |\n| GPT-3 One-Shot | 89.7\\* | 73.2 |\n| GPT-3 Few-Shot | 88.6\\* | 77.7 |\n\nTable 3.5: Results on the WSC273 version of Winograd schemas and the adversarial Winogrande dataset. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details on potential contamination of the Winograd test set. a\\[ [118])\\]b\\[ [79])\\]![Refer to caption]Figure 3.5: Zero-, one-, and few-shot performance on the adversarial Winogrande dataset as model capacity scales. Scaling is relatively smooth with the gains to few-shot learning increasing with model size, and few-shot GPT-3 175B is competitive with a fine-tuned RoBERTA-large.\n\nThe Winograd Schemas Challenge \\[ [65])\\] is a classical task in NLP that involves determining which word a pronoun refers to, when the pronoun is grammatically ambiguous but semantically unambiguous to a human. Recently fine-tuned language models have achieved near-human performance on the original Winograd dataset, but more difficult versions such as the adversarially-mined Winogrande dataset \\[ [118])\\] still significantly lag human performance. We test GPT-3’s performance on both Winograd and Winogrande, as usual in the zero-, one-, and few-shot setting.\n\nOn Winograd we test GPT-3 on the original set of 273 Winograd schemas, using the same “partial evaluation” method described in \\[ [117])\\]. Note that this setting differs slightly from the WSC task in the SuperGLUE benchmark, which is presented as binary classification and requires entity extraction to convert to the form described in this section. On Winograd GPT-3 achieves 88.3%, 89.7%, and 88.6% in the zero-shot, one-shot, and few-shot settings, showing no clear in-context learning but in all cases achieving strong results just a few points below state-of-the-art and estimated human performance. We note that contamination analysis found some Winograd schemas in the training data but this appears to have only a small effect on results (see Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\")).\n\nOn the more difficult Winogrande dataset, we do find gains to in-context learning: GPT-3 achieves 70.2% in the zero-shot setting, 73.2% in the one-shot setting, and 77.7% in the few-shot setting. For comparison a fine-tuned RoBERTA model achieves 79%, state-of-the-art is 84.6% achieved with a fine-tuned high capacity model (T5), and human performance on the task as reported by \\[ [118])\\] is 94.0%.\n\n### 3.5 Common Sense Reasoning\n\n| Setting | PIQA | ARC (Easy) | ARC (Challenge) | OpenBookQA |\n| --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 79.4 | 92.0\\[ [55])\\] | 78.5\\[ [55])\\] | 87.2\\[ [55])\\] |\n| GPT-3 Zero-Shot | 80.5\\* | 68.8 | 51.4 | 57.6 |\n| GPT-3 One-Shot | 80.5\\* | 71.2 | 53.2 | 58.8 |\n| GPT-3 Few-Shot | 82.8\\* | 70.1 | 51.5 | 65.4 |\n\nTable 3.6: GPT-3 results on three commonsense reasoning tasks, PIQA, ARC, and OpenBookQA. GPT-3 Few-Shot PIQA result is evaluated on the test server. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details on potential contamination issues on the PIQA test set.![Refer to caption]Figure 3.6: GPT-3 results on PIQA in the zero-shot, one-shot, and few-shot settings. The largest model achieves a score on the development set in all three conditions that exceeds the best recorded score on the task.\n\nNext we consider three datasets which attempt to capture physical or scientific reasoning, as distinct from sentence completion, reading comprehension, or broad knowledge question answering. The first, PhysicalQA (PIQA) \\[ [11])\\], asks common sense questions about how the physical world works and is intended as a probe of grounded understanding of the world. GPT-3 achieves 81.0% accuracy zero-shot, 80.5% accuracy one-shot, and 82.8% accuracy few-shot (the last measured on PIQA’s test server). This compares favorably to the 79.4% accuracy prior state-of-the-art of a fine-tuned RoBERTa. PIQA shows relatively shallow scaling with model size and is still over 10% worse than human performance, but GPT-3’s few-shot and even zero-shot result outperform the current state-of-the-art. Our analysis flagged PIQA for a potential data contamination issue (despite hidden test labels), and we therefore conservatively mark the result with an asterisk. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details.\n\nARC \\[ [14])\\] is a dataset of multiple-choice questions collected from 3rd to 9th grade science exams. On the “Challenge” version of the dataset which has been filtered to questions which simple statistical or information retrieval methods are unable to correctly answer, GPT-3 achieves 51.4% accuracy in the zero-shot setting, 53.2% in the one-shot setting, and 51.5% in the few-shot setting. This is approaching the performance of a fine-tuned RoBERTa baseline (55.9%) from UnifiedQA \\[ [55])\\]. On the “Easy” version of the dataset (questions which either of the mentioned baseline approaches answered correctly), GPT-3 achieves 68.8%, 71.2%, and 70.1% which slightly exceeds a fine-tuned RoBERTa baseline from \\[ [55])\\]. However, both of these results are still much worse than the overall SOTAs achieved by the UnifiedQA which exceeds GPT-3’s few-shot results by 27% on the challenge set and 22% on the easy set.\n\nOn OpenBookQA \\[ [84])\\], GPT-3 improves significantly from zero to few shot settings but is still over 20 points short of the overall SOTA. GPT-3’s few-shot performance is similar to a fine-tuned BERT Large baseline on the leaderboard.\n\nOverall, in-context learning with GPT-3 shows mixed results on commonsense reasoning tasks, with only small and inconsistent gains observed in the one and few-shot learning settings for both PIQA and ARC, but a significant improvement is observed on OpenBookQA. GPT-3 sets SOTA on the new PIQA dataset in all evaluation settings.\n\n### 3.6 Reading Comprehension\n\n| Setting | CoQA | DROP | QuAC | SQuADv2 | RACE-h | RACE-m |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 90.7a | 89.1b | 74.4c | 93.0d | 90.0e | 93.1e |\n| GPT-3 Zero-Shot | 81.5 | 23.6 | 41.5 | 59.5 | 45.5 | 58.4 |\n| GPT-3 One-Shot | 84.0 | 34.3 | 43.3 | 65.4 | 45.9 | 57.4 |\n| GPT-3 Few-Shot | 85.0 | 36.5 | 44.3 | 69.8 | 46.8 | 58.1 |\n\nTable 3.7: Results on reading comprehension tasks. All scores are F1 except results for RACE which report accuracy. a\\[ [53])\\]b\\[ [50])\\]c\\[ [2])\\]d\\[ [103])\\]e\\[ [125])\\]![Refer to caption]Figure 3.7: GPT-3 results on CoQA reading comprehension task. GPT-3 175B achieves 85 F1 in the few-shot setting, only a few points behind measured human performance and state-of-the-art fine-tuned models. Zero-shot and one-shot performance is a few points behind, with the gains to few-shot being largest for bigger models.\n\nNext we evaluate GPT-3 on the task of reading comprehension. We use a suite of 5 datasets including abstractive, multiple choice, and span based answer formats in both dialog and single question settings. We observe a wide spread in GPT-3’s performance across these datasets suggestive of varying capability with different answer formats. In general we observe GPT-3 is on par with initial baselines and early results trained using contextual representations on each respective dataset.\n\nGPT-3 performs best (within 3 points of the human baseline) on CoQA \\[ [106])\\] a free-form conversational dataset and performs worst (13 F1 below an ELMo baseline) on QuAC \\[ [16])\\] a dataset which requires modeling structured dialog acts and answer span selections of teacher-student interactions. On DROP \\[ [27])\\], a dataset testing discrete reasoning and numeracy in the context of reading comprehension, GPT-3 in a few-shot setting outperforms the fine-tuned BERT baseline from the original paper but is still well below both human performance and state-of-the-art approaches which augment neural networks with symbolic systems \\[ [110])\\]. On SQuAD 2.0 \\[ [108])\\], GPT-3 demonstrates its few-shot learning capabilities, improving by almost 10 F1 (to 69.8) compared to a zero-shot setting. This allows it to slightly outperform the best fine-tuned result in the original paper. On RACE \\[ [78])\\], a multiple choice dataset of middle school and high school english examinations, GPT-3 performs relatively weakly and is only competitive with the earliest work utilizing contextual representations and is still 45% behind SOTA.\n\n|  | SuperGLUE | BoolQ | CB | CB | COPA | RTE |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Average | Accuracy | Accuracy | F1 | Accuracy | Accuracy |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 89.0 | 91.0 | 96.9 | 93.9 | 94.8 | 92.5 |\n| Fine-tuned BERT-Large | 69.0 | 77.4 | 83.6 | 75.7 | 70.6 | 71.7 |\n| GPT-3 Few-Shot | 71.8 | 76.4 | 75.6 | 52.0 | 92.0 | 69.0 |\n\n|  | WiC | WSC | MultiRC | MultiRC | ReCoRD | ReCoRD |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Accuracy | Accuracy | Accuracy | F1a | Accuracy | F1 |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 76.1 | 93.8 | 62.3 | 88.2 | 92.5 | 93.3 |\n| Fine-tuned BERT-Large | 69.6 | 64.6 | 24.1 | 70.0 | 71.3 | 72.0 |\n| GPT-3 Few-Shot | 49.4 | 80.1 | 30.5 | 75.4 | 90.2 | 91.1 |\n\nTable 3.8:\nPerformance of GPT-3 on SuperGLUE compared to fine-tuned baselines and SOTA. All results are reported on the test set. GPT-3 few-shot is given a total of 32 examples within the context of each task and performs no gradient updates.\n![Refer to caption]Figure 3.8:\nPerformance on SuperGLUE increases with model size and number of examples in context. A value of K=32𝐾32K=32 means that our model was shown 32 examples per task, for 256 examples total divided across the 8 tasks in SuperGLUE. We report GPT-3 values on the dev set, so our numbers are not directly comparable to the dotted reference lines (our test set results are in Table [3.8]Table 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). The BERT-Large reference model was fine-tuned on the SuperGLUE training set (125K examples), whereas BERT++ was first fine-tuned on MultiNLI (392K examples) and SWAG (113K examples) before further fine-tuning on the SuperGLUE training set (for a total of 630K fine-tuning examples). We find the difference in performance between the BERT-Large and BERT++ to be roughly equivalent to the difference between GPT-3 with one example per context versus eight examples per context.\n\n### 3.7 SuperGLUE\n\nIn order to better aggregate results on NLP tasks and compare to popular models such as BERT and RoBERTa in a more systematic way, we also evaluate GPT-3 on a standardized collection of datasets, the SuperGLUE benchmark \\[ [135])\\]\\[ [135])\\]\\[ [17])\\]\\[ [25])\\]\\[ [105])\\]\\[ [54])\\]\\[ [142])\\]\\[ [21])\\]\\[ [8])\\]\\[ [34])\\]\\[ [6])\\]\\[ [96])\\]\\[ [98])\\]. GPT-3’s test-set performance on the SuperGLUE dataset is shown in Table [3.8]Table 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). In the few-shot setting, we used 32 examples for all tasks, sampled randomly from the training set. For all tasks except WSC and MultiRC, we sampled a new set of examples to use in the context for each problem. For WSC and MultiRC, we used the same set of randomly drawn examples from the training set as context for all of the problems we evaluated.\n\nWe observe a wide range in GPT-3’s performance across tasks. On COPA and ReCoRD GPT-3 achieves near-SOTA performance in the one-shot and few-shot settings, with COPA falling only a couple points short and achieving second place on the leaderboard, where first place is held by a fine-tuned 11 billion parameter model (T5). On WSC, performance is still relatively strong, achieving 80.1% in the few-shot setting (note that GPT-3 achieves 88.6% on the original Winograd dataset as described in Section [3.4]Winograd-Style Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). On BoolQ, MultiRC, and RTE, performance is reasonable, roughly matching that of a fine-tuned BERT-Large. On CB, we see signs of life at 75.6% in the few-shot setting.\n\nWiC is a notable weak spot with few-shot performance at 49.4% (at random chance). We tried a number of different phrasings and formulations for WiC (which involves determining if a word is being used with the same meaning in two sentences), none of which was able to achieve strong performance. This hints at a phenomenon that will become clearer in the next section (which discusses the ANLI benchmark) – GPT-3 appears to be weak in the few-shot or one-shot setting at some tasks that involve comparing two sentences or snippets, for example whether a word is used the same way in two sentences (WiC), whether one sentence is a paraphrase of another, or whether one sentence implies another. This could also explain the comparatively low scores for RTE and CB, which also follow this format. Despite these weaknesses, GPT-3 still outperforms a fine-tuned BERT-large on four of eight tasks and on two tasks GPT-3 is close to the state-of-the-art held by a fine-tuned 11 billion parameter model.\n\nFinally, we note that the few-shot SuperGLUE score steadily improves with both model size and with number of examples in the context showing increasing benefits from in-context learning (Figure [3.8]Figure 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). We scale K𝐾K up to 32 examples per task, after which point additional examples will not reliably fit into our context. When sweeping over values of K𝐾K, we find that GPT-3 requires less than eight total examples per task to outperform a fine-tuned BERT-Large on overall SuperGLUE score.\n\n![Refer to caption]Figure 3.9: Performance of GPT-3 on ANLI Round 3. Results are on the dev-set, which has only 1500 examples and therefore has high variance (we estimate a standard deviation of 1.2%). We find that smaller models hover around random chance, while few-shot GPT-3 175B closes almost half the gap from random chance to SOTA. Results for ANLI rounds 1 and 2 are shown in the appendix.\n\n### 3.8 NLI\n\nNatural Language Inference (NLI) \\[ [31])\\] concerns the ability to understand the relationship between two sentences. In practice, this task is usually structured as a two or three class classification problem where the model classifies whether the second sentence logically follows from the first, contradicts the first sentence, or is possibly true (neutral). SuperGLUE includes an NLI dataset, RTE, which evaluates the binary version of the task. On RTE, only the largest version of GPT-3 performs convincingly better than random (56%) in any evaluation setting, but in a few-shot setting GPT-3 performs similarly to a single-task fine-tuned BERT Large. We also evaluate on the recently introduced Adversarial Natural Language Inference (ANLI) dataset \\[ [94])\\]. ANLI is a difficult dataset employing a series of adversarially mined natural language inference questions in three rounds (R1, R2, and R3). Similar to RTE, all of our models smaller than GPT-3 perform at almost exactly random chance on ANLI, even in the few-shot setting (∼33%similar-toabsentpercent33\\\\sim 33\\\\%), whereas GPT-3 itself shows signs of life on Round 3. Results for ANLI R3 are highlighted in Figure [3.9]Figure 3.9 ‣ 3.7 SuperGLUE ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and full results for all rounds can be found in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\"). These results on both RTE and ANLI suggest that NLI is still a very difficult task for language models and they are only just beginning to show signs of progress.\n\n### 3.9 Synthetic and Qualitative Tasks\n\nOne way to probe GPT-3’s range of abilities in the few-shot (or zero- and one-shot) setting is to give it tasks which require it to perform simple on-the-fly computational reasoning, recognize a novel pattern that is unlikely to have occurred in training, or adapt quickly to an unusual task. We devise several tasks to test this class of abilities. First, we test GPT-3’s ability to perform arithmetic. Second, we create several tasks that involve rearranging or unscrambling the letters in a word, tasks which are unlikely to have been exactly seen during training. Third, we test GPT-3’s ability to solve SAT-style analogy problems few-shot. Finally, we test GPT-3 on several qualitative tasks, including using new words in a sentence, correcting English grammar, and news article generation. We will release the synthetic datasets with the hope of stimulating further study of test-time behavior of language models.\n\n#### 3.9.1 Arithmetic\n\nTo test GPT-3’s ability to perform simple arithmetic operations without task-specific training, we developed a small battery of 10 tests that involve asking GPT-3 a simple arithmetic problem in natural language:\n\n- •\n\n\n2 digit addition (2D+) – The model is asked to add two integers sampled uniformly from \\[0,100)0100\\[0,100), phrased in the form of a question, e.g. “Q: What is 48 plus 76? A: 124.”\\\n\\\n- •\\\n\\\n\\\n2 digit subtraction (2D-) – The model is asked to subtract two integers sampled uniformly from \\[0,100)0100\\[0,100); the answer may be negative. Example: “Q: What is 34 minus 53? A: -19”.\\\n\\\n- •\\\n\\\n\\\n3 digit addition (3D+) – Same as 2 digit addition, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- •\\\n\\\n\\\n3 digit subtraction (3D-) – Same as 2 digit subtraction, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- •\\\n\\\n\\\n4 digit addition (4D+) – Same as 3 digit addition, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- •\\\n\\\n\\\n4 digit subtraction (4D-) – Same as 3 digit subtraction, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- •\\\n\\\n\\\n5 digit addition (5D+) – Same as 3 digit addition, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- •\\\n\\\n\\\n5 digit subtraction (5D-) – Same as 3 digit subtraction, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- •\\\n\\\n\\\n2 digit multiplication (2Dx) – The model is asked to multiply two integers sampled uniformly from \\[0,100)0100\\[0,100), e.g. “Q: What is 24 times 42? A: 1008”.\\\n\\\n- •\\\n\\\n\\\nOne-digit composite (1DC) – The model is asked to perform a composite operation on three 1 digit numbers, with parentheses around the last two. For example, “Q: What is 6+(4\\*8)? A: 38”. The three 1 digit numbers are selected uniformly on \\[0,10)010\\[0,10) and the operations are selected uniformly from {+,-,\\*}.\\\n\\\n\\\nIn all 10 tasks the model must generate the correct answer exactly. For each task we generate a dataset of 2,000 random instances of the task and evaluate all models on those instances.\\\n\\\nFirst we evaluate GPT-3 in the few-shot setting, for which results are shown in Figure [3.10]Figure 3.10 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). On addition and subtraction, GPT-3 displays strong proficiency when the number of digits is small, achieving 100% accuracy on 2 digit addition, 98.9% at 2 digit subtraction, 80.2% at 3 digit addition, and 94.2% at 3-digit subtraction. Performance decreases as the number of digits increases, but GPT-3 still achieves 25-26% accuracy on four digit operations and 9-10% accuracy on five digit operations, suggesting at least some capacity to generalize to larger numbers of digits. GPT-3 also achieves 29.2% accuracy at 2 digit multiplication, an especially computationally intensive operation. Finally, GPT-3 achieves 21.3% accuracy at single digit combined operations (for example, 9\\*(7+5)), suggesting that it has some robustness beyond just single operations.\\\n\\\n![Refer to caption]Figure 3.10: Results on all 10 arithmetic tasks in the few-shot settings for models of different sizes. There is a significant jump from the second largest model (GPT-3 13B) to the largest model (GPT-3 175), with the latter being able to reliably accurate 2 digit arithmetic, usually accurate 3 digit arithmetic, and correct answers a significant fraction of the time on 4-5 digit arithmetic, 2 digit multiplication, and compound operations. Results for one-shot and zero-shot are shown in the appendix.\\\n\\\n| Setting | 2D+ | 2D- | 3D+ | 3D- | 4D+ | 4D- | 5D+ | 5D- | 2Dx | 1DC |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 76.9 | 58.0 | 34.2 | 48.3 | 4.0 | 7.5 | 0.7 | 0.8 | 19.8 | 9.8 |\\\n| GPT-3 One-shot | 99.6 | 86.4 | 65.5 | 78.7 | 14.0 | 14.0 | 3.5 | 3.8 | 27.4 | 14.3 |\\\n| GPT-3 Few-shot | 100.0 | 98.9 | 80.4 | 94.2 | 25.5 | 26.8 | 9.3 | 9.9 | 29.2 | 21.3 |\\\n\\\nTable 3.9: Results on basic arithmetic tasks for GPT-3 175B. {2,3,4,5}D{+,-} is 2, 3, 4, and 5 digit addition or subtraction, 2Dx is 2 digit multiplication. 1DC is 1 digit composite operations. Results become progressively stronger moving from the zero-shot to one-shot to few-shot setting, but even the zero-shot shows significant arithmetic abilities.\\\n\\\nAs Figure [3.10]Figure 3.10 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") makes clear, small models do poorly on all of these tasks – even the 13 billion parameter model (the second largest after the 175 billion full GPT-3) can solve 2 digit addition and subtraction only half the time, and all other operations less than 10% of the time.\\\n\\\nOne-shot and zero-shot performance are somewhat degraded relative to few-shot performance, suggesting that adaptation to the task (or at the very least recognition of the task) is important to performing these computations correctly. Nevertheless, one-shot performance is still quite strong, and even zero-shot performance of the full GPT-3 significantly outperforms few-shot learning for all smaller models. All three settings for the full GPT-3 are shown in Table [3.9]Table 3.9 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), and model capacity scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\").\\\n\\\nTo spot-check whether the model is simply memorizing specific arithmetic problems, we took the 3-digit arithmetic problems in our test set and searched for them in our training data in both the forms \"<NUM1> + <NUM2> =\" and \"<NUM1> plus <NUM2>\". Out of 2,000 addition problems we found only 17 matches (0.8%) and out of 2,000 subtraction problems we found only 2 matches (0.1%), suggesting that only a trivial fraction of the correct answers could have been memorized. In addition, inspection of incorrect answers reveals that the model often makes mistakes such as not carrying a “1”, suggesting it is actually attempting to perform the relevant computation rather than memorizing a table.\\\n\\\nOverall, GPT-3 displays reasonable proficiency at moderately complex arithmetic in few-shot, one-shot, and even zero-shot settings.\\\n\\\n#### 3.9.2 Word Scrambling and Manipulation Tasks\\\n\\\nTo test GPT-3’s ability to learn novel symbolic manipulations from a few examples, we designed a small battery of 5 “character manipulation” tasks. Each task involves giving the model a word distorted by some combination of scrambling, addition, or deletion of characters, and asking it to recover the original word. The 5 tasks are:\\\n\\\n| Setting | CL | A1 | A2 | RI | RW |\\\n| --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 3.66 | 2.28 | 8.91 | 8.26 | 0.09 |\\\n| GPT-3 One-shot | 21.7 | 8.62 | 25.9 | 45.4 | 0.48 |\\\n| GPT-3 Few-shot | 37.9 | 15.1 | 39.7 | 67.2 | 0.44 |\\\n\\\nTable 3.10: GPT-3 175B performance on various word unscrambling and word\\\nmanipulation tasks, in zero-, one-, and few-shot settings. CL is “cycle letters in word”, A1 is anagrams of but the first and last letters,\\\nA2 is anagrams of all but the first and last two letters, RI is “Random insertion\\\nin word”, RW is “reversed words”.![Refer to caption]Figure 3.11: Few-shot performance on the five word scrambling tasks for different sizes of model. There is generally smooth improvement with model size although the random insertion task shows an upward slope of improvement with the 175B model solving the task the majority of the time. Scaling of one-shot and zero-shot performance is shown in the appendix. All tasks are done with K=100𝐾100K=100.\\\n\\\n- •\\\n\\\n\\\nCycle letters in word (CL) – The model is given a word with its letters cycled, then the “=” symbol, and is expected to generate the original word. For example, it might be given “lyinevitab” and should output “inevitably”.\\\n\\\n- •\\\n\\\n\\\nAnagrams of all but first and last characters (A1) – The model is given a word where every letter except the first and last have been scrambled randomly, and must output the original word. Example: criroptuon = corruption.\\\n\\\n- •\\\n\\\n\\\nAnagrams of all but first and last 2 characters (A2) – The model is given a word where every letter except the first 2 and last 2 have been scrambled randomly, and must recover the original word. Example: opoepnnt →→\\\\to opponent.\\\n\\\n- •\\\n\\\n\\\nRandom insertion in word (RI) – A random punctuation or space character is inserted between each letter of a word, and the model must output the original word. Example: s.u!c/c!e.s s i/o/n = succession.\\\n\\\n- •\\\n\\\n\\\nReversed words (RW) – The model is given a word spelled backwards, and must output the original word. Example: stcejbo →→\\\\to objects.\\\n\\\n\\\nFor each task we generate 10,000 examples, which we chose to be the top 10,000 most frequent words as measured by \\[ [92])\\] of length more than 4 characters and less than 15 characters. The few-shot results are shown in Figure [3.11]Figure 3.11 ‣ 3.9.2 Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). Task performance tends to grow smoothly with model size, with the full GPT-3 model achieving 66.9% on removing random insertions, 38.6% on cycling letters, 40.2% on the easier anagram task, and 15.1% on the more difficult anagram task (where only the first and last letters are held fixed). None of the models can reverse the letters in a word.\\\n\\\nIn the one-shot setting, performance is significantly weaker (dropping by half or more), and in the zero-shot setting the model can rarely perform any of the tasks (Table [3.10]Table 3.10 ‣ 3.9.2 Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). This suggests that the model really does appear to learn these tasks at test time, as the model cannot perform them zero-shot and their artificial nature makes them unlikely to appear in the pre-training data (although we cannot confirm this with certainty).\\\n\\\nWe can further quantify performance by plotting “in-context learning curves”, which show task performance as a function of the number of in-context examples. We show in-context learning curves for the Symbol Insertion task in Figure [1.2]Figure 1.2 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\"). We can see that larger models are able to make increasingly effective use of in-context information, including both task examples and natural language task descriptions.\\\n\\\nFinally, it is worth adding that solving these tasks requires character-level manipulations, whereas our BPE encoding operates on significant fractions of a word (on average ∼0.7similar-toabsent0.7\\\\sim 0.7 words per token), so from the LM’s perspective succeeding at these tasks involves not just manipulating BPE tokens but understanding and pulling apart their substructure. Also, CL, A1, and A2 are not bijective (that is, the unscrambled word is not a deterministic function of the scrambled word), requiring the model to perform some search to find the correct unscrambling. Thus, the skills involved appear to require non-trivial pattern-matching and computation.\\\n\\\n#### 3.9.3 SAT Analogies\\\n\\\nTo test GPT-3 on another task that is somewhat unusual relative to the typical distribution of text, we collected a set of 374 “SAT analogy” problems \\[ [131])\\]. Analogies are a style of multiple choice question that constituted a section of the SAT college entrance exam before 2005. A typical example is “audacious is to boldness as (a) sanctimonious is to hypocrisy, (b) anonymous is to identity, (c) remorseful is to misdeed, (d) deleterious is to result, (e) impressionable is to temptation”. The student is expected to choose which of the five word pairs has the same relationship as the original word pair; in this example the answer is “sanctimonious is to hypocrisy”. On this task GPT-3 achieves 65.2% in the few-shot setting, 59.1% in the one-shot setting, and 53.7% in the zero-shot setting, whereas the average score among college applicants was 57% \\[ [129])\\] (random guessing yields 20%). As shown in Figure [3.12]Figure 3.12 ‣ 3.9.3 SAT Analogies ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), the results improve with scale, with the the full 175 billion model improving by over 10% compared to the 13 billion parameter model.\\\n\\\n![Refer to caption]Figure 3.12: Zero-, one-,and few-shot performance on SAT analogy tasks, for different sizes of model. The largest model achieves 65% accuracy in the few-shot setting, and also demonstrates significant gains to in-context learning which are not present in smaller models.\\\n\\\n#### 3.9.4 News Article Generation\\\n\\\nPrevious work on generative language models qualitatively tested their ability to generate synthetic “news articles” by conditional sampling from the model given a human-written prompt consisting of a plausible first sentence for a news story \\[ [117])\\]. Relative to \\[ [117])\\], the dataset used to train GPT-3 is much less weighted towards news articles, so trying to generate news articles via raw unconditional samples is less effective – for example GPT-3 often interprets the proposed first sentence of a “news article” as a tweet and then posts synthetic responses or follow-up tweets. To solve this problem we employed GPT-3’s few-shot learning abilities by providing three previous news articles in the model’s context to condition it. With the title and subtitle of a proposed next article, the model is able to reliably generate short articles in the “news” genre.\\\n\\\nTo gauge the quality of news article generation from GPT-3 (which we believe is likely to be correlated with conditional sample generation quality in general), we decided to measure human ability to distinguish GPT-3-generated articles from real ones. Similar work has been carried out by Kreps et al. \\[ [56])\\] and Zellers et al. \\[ [141])\\]. Generative language models are trained to match the distribution of content generated by humans, so the (in)ability of humans to distinguish the two is a potentially important measure of quality.333This task is also relevant to the potential misuse of language models discussed in Section [6.1]Misuse of Language Models ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\").\\\n\\\nIn order to see how well humans can detect model generated text, we arbitrarily selected 25 article titles and subtitles from the website [newser.com] (mean length: 215 words). We then generated completions of these titles and subtitles from four language models ranging in size from 125M to 175B (GPT-3) parameters (mean length: 200 words). For each model, we presented around 80 US-based participants with a quiz consisting of these real titles and subtitles followed by either the human written article or the article generated by the model444We wanted to identify how good an average person on the internet is at detecting language model outputs, so we focused on participants drawn from the general US population. See Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles ‣ Language Models are Few-Shot Learners\") for details.. Participants were asked to select whether the article was “very likely written by a human”, “more likely written by a human”, “I don’t know”, “more likely written by a machine”, or “very likely written by a machine”.\\\n\\\nThe articles we selected were not in the models’ training data and the model outputs were formatted and selected programmatically to prevent human cherry-picking. All models used the same context to condition outputs on and were pre-trained with the same context size and the same article titles and subtitles were used as prompts for each model. However, we also ran an experiment to control for participant effort and attention that followed the same format but involved intentionally bad model generated articles. This was done by generating articles from a “control model”: a 160M parameter model with no context and increased output randomness.\\\n\\\nMean human accuracy (the ratio of correct assignments to non-neutral assignments per participant) at detecting that the intentionally bad articles were model generated was ∼86%similar-toabsentpercent86\\\\sim 86\\\\%  where 50% is chance level performance. By contrast, mean human accuracy at detecting articles that were produced by the 175B parameter model was barely above chance at ∼52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.11]Table 3.11 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")).555We use a two-sample Student’s T-Test to test for significant difference between the means of the participant accuracies of each model and the control model and report the normalized difference in the means (as the t-statistic) and the p-value. Human abilities to detect model generated text appear to decrease as model size increases: there appears to be a trend towards chance accuracy with model size, and human detection of GPT-3 is close to chance.666If a model consistently produces texts that are more impressive than human articles, it is possible that human performance on this task would drop below 50%. Indeed, many individual participants scored below 50% on this task. This is true despite the fact that participants spend more time on each output as model size increases (see Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles ‣ Language Models are Few-Shot Learners\")).\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t𝑡t compared tocontrol (p𝑝p-value) | “I don’t know”assignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control (deliberately bad model) | 86% | 83%–90% | - | 3.6 % |\\\n| GPT-3 Small | 76% | 72%–80% | 3.9 (2e𝑒e-4) | 4.9% |\\\n| GPT-3 Medium | 61% | 58%–65% | 10.3 (7e𝑒e-21) | 6.0% |\\\n| GPT-3 Large | 68% | 64%–72% | 7.3 (3e𝑒e-11) | 8.7% |\\\n| GPT-3 XL | 62% | 59%–65% | 10.7 (1e𝑒e-19) | 7.5% |\\\n| GPT-3 2.7B | 62% | 58%–65% | 10.4 (5e𝑒e-19) | 7.1% |\\\n| GPT-3 6.7B | 60% | 56%–63% | 11.2 (3e𝑒e-21) | 6.2% |\\\n| GPT-3 13B | 55% | 52%–58% | 15.3 (1e𝑒e-32) | 7.1% |\\\n| GPT-3 175B | 52% | 49%–54% | 16.9 (1e𝑒e-34) | 7.8% |\\\n\\\nTable 3.11: Human accuracy in identifying whether short (∼similar-to\\\\sim200 word) news articles are model generated. We find that human accuracy (measured by the ratio of correct assignments to non-neutral assignments) ranges from 86% on the control model to 52% on GPT-3 175B. This table compares mean accuracy between five different models, and shows the results of a two-sample T-Test for the difference in mean accuracy between each model and the control model (an unconditional GPT-3 Small model with increased output randomness).![Refer to caption]Figure 3.13: People’s ability to identify whether news articles are model-generated (measured by the ratio of correct assignments to non-neutral assignments) decreases as model size increases. Accuracy on the outputs on the deliberately-bad control model (an unconditioned GPT-3 Small model with higher output randomness) is indicated with the dashed line at the top, and the random chance (50%) is indicated with the dashed line at the bottom. Line of best fit is a power law with 95% confidence intervals.\\\n\\\nExamples of synthetic articles from GPT-3 are given in Figures [3.14]Figure 3.14 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and [3.15]Figure 3.15 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\").777Additional non-news samples can be found in Appendix [F]Appendix F Additional Samples from GPT-3 ‣ Language Models are Few-Shot Learners\"). Much of the text is—as indicated by the evaluations—difficult for humans to distinguish from authentic human content. Factual inaccuracies can be an indicator that an article is model generated since, unlike human authors, the models have no access to the specific facts that the article titles refer to or when the article was written. Other indicators include repetition, non sequiturs, and unusual phrasings, though these are often subtle enough that they are not noticed.\\\n\\\nTitle: United Methodists Agree to Historic Split\\\n\\\nSubtitle: Those who oppose gay marriage will form their own denomination\\\n\\\nArticle:After two days of intense debate, the United Methodist Church has agreed to a historic split - one that is expected to end in the creation of a new denomination, one that will be ”theologically and socially conservative,” according to The Washington Post. The majority of delegates attending the church’s annual General Conference in May voted to strengthen a ban on the ordination of LGBTQ clergy and to write new rules that will ”discipline” clergy who officiate at same-sex weddings. But those who opposed these measures have a new plan: They say they will form a separate denomination by 2020, calling their church the Christian Methodist denomination.The Post notes that the denomination, which claims 12.5 million members, was in the early 20th century the ”largest Protestant denomination in the U.S.,” but that it has been shrinking in recent decades. The new split will be the second in the church’s history. The first occurred in 1968, when roughly 10 percent of the denomination left to form the Evangelical United Brethren Church. The Post notes that the proposed split ”comes at a critical time for the church, which has been losing members for years,” which has been ”pushed toward the brink of a schism over the role of LGBTQ people in the church.” Gay marriage is not the only issue that has divided the church. In 2016, the denomination was split over ordination of transgender clergy, with the North Pacific regional conference voting to ban them from serving as clergy, and the South Pacific regional conference voting to allow them.\\\n\\\nFigure 3.14: The GPT-3 generated news article that humans had the greatest difficulty distinguishing from a human written article (accuracy: 12%).\\\n\\\nTitle: Star’s Tux Promise Draws Megyn Kelly’s SarcasmSubtitle: Joaquin Phoenix pledged to not change for each awards eventArticle:A year ago, Joaquin Phoenix made headlines when he appeared on the red carpet at the Golden Globes wearing a tuxedo with a paper bag over his head that read, ”I am a shape-shifter. I can’t change the world. I can only change myself.” It was a promise to not change to fit into the Hollywood mold: ”I think that’s a really special thing, to not change yourself. I think it’s a really special thing to say, ‘This is what’s inside of me, I’m proud of it, and I’m not going to be ashamed because of the way that someone else thinks I should be.’” Now, it’s the Oscars, and Phoenix is at it again. But this time, his publicist is saying he’ll be wearing a tux no matter what.Megyn Kelly was not impressed, and she let him have it on The Tonight Show. ”You know, I feel like, I feel like you could have worn the tux,” she says. ”But you’re saying you’re a shape-shifter. I don’t know if you can change your tux, but you can change your mind. You can change your mind. You can change your mind.” Phoenix says he did, but it didn’t stick. ”I was like, ‘Okay, I’m going to wear a tuxedo to this thing.’ And then I thought, ‘I don’t want to wear a tuxedo to this thing.’” Kelly goes on to encourage him to change his mind again, but Phoenix says it’s too late: ”I’m committed to wearing this.”\\\n\\\nFigure 3.15: The GPT-3 generated news article that humans found the easiest to distinguish from a human written article (accuracy: 61%).\\\n\\\nRelated work on language model detection by Ippolito et al. \\[ [48])\\] indicates that automatic discriminators like Grover\\[ [141])\\] and GLTR \\[ [37])\\] may have greater success at detecting model generated text than human evaluators. Automatic detection of these models may be a promising area of future research.\\\n\\\nIppolito et al. \\[ [48])\\] also note that human accuracy at detecting model generated text increases as humans observe more tokens. To do a preliminary investigation of how good humans are at detecting longer news articles generated by GPT-3 175B, we selected 12 world news articles from Reuters with an average length of 569 words and generated completions of these articles from GPT-3 with an average length of 498 words (298 words longer than our initial experiments). Following the methodology above, we ran two experiments, each on around 80 US-based participants, to compare human abilities to detect the articles generated by GPT-3 and a control model.\\\n\\\nWe found that mean human accuracy at detecting the intentionally bad longer articles from the control model was ∼88%similar-toabsentpercent88\\\\sim 88\\\\%, while mean human accuracy at detecting the longer articles that were produced by GPT-3 175B was still barely above chance at ∼52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.12]Table 3.12 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). This indicates that, for news articles that are around 500 words long, GPT-3 continues to produce articles that humans find difficult to distinguish from human written news articles.\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t𝑡t compared tocontrol (p𝑝p-value) | “I don’t know”assignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control | 88% | 84%–91% | - | 2.7% |\\\n| GPT-3 175B | 52% | 48%–57% | 12.7 (3.2e𝑒e-23) | 10.6% |\\\n\\\nTable 3.12: People’s ability to identify whether ∼500similar-toabsent500\\\\sim 500 word articles are model generated (as measured by the ratio of correct assignments to non-neutral assignments) was 88% on the control model and 52% on GPT-3 175B. This table shows the results of a two-sample T-Test for the difference in mean accuracy between GPT-3 175B and the control model (an unconditional GPT-3 Small model with increased output randomness).\\\n\\\nA \"whatpu\" is a small, furry animal native to Tanzania. An example of a sentence that uses the word whatpu is:\\\n\\\nWe were traveling in Africa and we saw these very cute whatpus.\\\n\\\nTo do a \"farduddle\" means to jump up and down really fast. An example of a sentence that uses the word farduddle is:\\\n\\\nOne day when I was playing tag with my little sister, she got really excited and she started doing these crazy farduddles.\\\n\\\nA \"yalubalu\" is a type of vegetable that looks like a big pumpkin. An example of a sentence that uses the word yalubalu is:\\\n\\\nI was on a trip to Africa and I tried this yalubalu vegetable that was grown in a garden there. It was delicious.\\\n\\\nA \"Burringo\" is a car with very fast acceleration. An example of a sentence that uses the word Burringo is:\\\n\\\nIn our garage we have a Burringo that my father drives to work every day.\\\n\\\nA \"Gigamuru\" is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:\\\n\\\nI have a Gigamuru that my uncle gave me as a gift. I love to play it at home.\\\n\\\nTo \"screeg\" something is to swing a sword at it. An example of a sentence that uses the word screeg is:\\\n\\\nWe screeghed at each other for several minutes and then we went outside and ate ice cream.\\\n\\\nFigure 3.16: Representative GPT-3 completions for the few-shot task of using a new word in a sentence. Boldface is GPT-3’s completions, plain text is human prompts. In the first example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 other than the conditioning shown here.\\\n\\\nPoor English input: I eated the purple berries.\\\n\\\nGood English output: I ate the purple berries.\\\n\\\nPoor English input: Thank you for picking me as your designer. I’d appreciate it.\\\n\\\nGood English output: Thank you for choosing me as your designer. I appreciate it.\\\n\\\nPoor English input: The mentioned changes have done. or I did the alteration that you requested. or I changed things you wanted and did the modifications.\\\n\\\nGood English output: The requested changes have been made. or I made the alteration that you requested. or I changed things you wanted and made the modifications.\\\n\\\nPoor English input: I’d be more than happy to work with you in another project.\\\n\\\nGood English output: I’d be more than happy to work with you on another project.\\\n\\\nPoor English input: Please provide me with a short brief of the design you’re looking for and that’d be nice if you could share some examples or project you did before.\\\n\\\nGood English output: Please provide me with a brief description of the design you’re looking for and that would be nice if you could share some examples or projects you have done before.\\\n\\\nPoor English input: The patient was died.\\\n\\\nGood English output: The patient died.\\\n\\\nPoor English input: We think that Leslie likes ourselves.\\\n\\\nGood English output: We think that Leslie likes us.\\\n\\\nPoor English input: Janet broke Bill on the finger.\\\n\\\nGood English output: Janet broke Bill’s finger.\\\n\\\nPoor English input: Mary arranged for, in St. Louis, John to rent a house cheap.\\\n\\\nGood English output: Mary arranged for John to rent a house in St. Louis.\\\n\\\nPoor English input: Today I have went to the store to to buys some many bottle of water.\\\n\\\nGood English output: Today I went to the store to buy some bottles of water.\\\n\\\nPoor English input: I have tried to hit ball with bat, but my swing is has miss.\\\n\\\nGood English output: I tried to hit the ball with the bat, but my swing missed.\\\n\\\nFigure 3.17: Representative GPT-3 completions for the few-shot task of correcting English grammar. Boldface is GPT-3’s completions, plain text is human prompts. In the first few examples example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 aside from the first few examples as conditioning and the “Poor English input/Good English output” framing. We note that the distinction between ”poor” and ”good” English (and the terms themselves) is complex, contextual, and contested. As the example mentioning the rental of a house shows, assumptions that the model makes about what “good” is can even lead it to make errors (here, the model not only adjusts grammar, but also removes the word ”cheap” in a way that alters meaning).\\\n\\\n#### 3.9.5 Learning and Using Novel Words\\\n\\\nA task studied in developmental linguistics \\[ [13])\\] is the ability to learn and utilize new words, for example using a word in a sentence after seeing it defined only once, or conversely inferring a word’s meaning from only one usage. Here we qualitatively test GPT-3’s ability to do the former. Specifically, we give GPT-3 the definition of a nonexistent word, such as “Gigamuru”, and then ask it to use it in a sentence. We provide one to five previous examples of a (separate) nonexistent word being defined and used in a sentence, so the task is few-shot in terms of previous examples of the broad task and one-shot in terms of the specific word. Table [3.16]Figure 3.16 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") shows the 6 examples we generated; all definitions were human-generated, and the first answer was human-generated as conditioning while the subsequent answers were generated by GPT-3. These examples were generated continuously in one sitting and we did not omit or repeatedly try any prompts. In all cases the generated sentence appears to be a correct or at least plausible use of the word. In the final sentence the model generates a plausible conjugation for the word “screeg” (namely “screeghed”), although the use of the word is slightly awkward (“screeghed at each other”) despite being plausible in the sense that it could describe a toy sword fight. Overall, GPT-3 appears to be at least proficient at the task of using novel words in a sentence.\\\n\\\n#### 3.9.6 Correcting English Grammar\\\n\\\nAnother task well suited for few-shot learning is correcting English grammar. We test this with GPT-3 in the few-shot setting by giving prompts of the form \"Poor English Input: <sentence>\\\\n Good English Output: <sentence>\". We give GPT-3 one human-generated correction and then ask it to correct 5 more (again without any omissions or repeats). Results are shown in Figure [3.17]Figure 3.17 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\").\\\n\\",
            "citations": null
          },
          "4 Measuring and Preventing Memorization Of Benchmarks\\": {
            "content": "\\\n![Refer to caption]Figure 4.1: GPT-3 Training Curves   We measure model performance during training on a deduplicated validation split of our training distribution. Though there is some gap between training and validation performance, the gap grows only minimally with model size and training time, suggesting that most of the gap comes from a difference in difficulty rather than overfitting.\\\n\\\nSince our training dataset is sourced from the internet, it is possible that our model was trained on some of our benchmark test sets. Accurately detecting test contamination from internet-scale datasets is a new area of research without established best practices. While it is common practice to train large models without investigating contamination, given the increasing scale of pretraining datasets, we believe this issue is becoming increasingly important to attend to.\\\n\\\nThis concern is not just hypothetical. One of the first papers to train a language model on Common Crawl data \\[ [130])\\] detected and removed a training document which overlapped with one of their evaluation datasets. Other work such as GPT-2 \\[ [117])\\] also conducted post-hoc overlap analysis. Their study was relatively encouraging, finding that although models did perform moderately better on data that overlapped between training and testing, this did not significantly impact reported results due to the small fraction of data which was contaminated (often only a few percent).\\\n\\\nGPT-3 operates in a somewhat different regime. On the one hand, the dataset and model size are about two orders of magnitude larger than those used for GPT-2, and include a large amount of Common Crawl, creating increased potential for contamination and memorization. On the other hand, precisely due to the large amount of data, even GPT-3 175B does not overfit its training set by a significant amount, measured relative to a held-out validation set with which it was deduplicated (Figure [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\")). Thus, we expect that contamination is likely to be frequent, but that its effects may not be as large as feared.\\\n\\\nWe initially tried to address the issue of contamination by proactively searching for and attempting to remove any overlap between our training data and the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug resulted in only partial removal of all detected overlaps from the training data. Due to the cost of training, it wasn’t feasible to retrain the model. To address this, we investigate in detail how the remaining detected overlap impacts results.\\\n\\\nFor each benchmark, we produce a ‘clean’ version which removes all potentially leaked examples, defined roughly as examples that have a 13-gram overlap with anything in the pretraining set (or that overlap with the whole example when it is shorter than 13-grams). The goal is to very conservatively flag anything that could potentially be contamination, so as to produce a clean subset that is free of contamination with high confidence. The exact procedure is detailed in Appendix [C]Appendix C Details of Test Set Contamination Studies ‣ Language Models are Few-Shot Learners\").\\\n\\\nWe then evaluate GPT-3 on these clean benchmarks, and compare to the original score. If the score on the clean subset is similar to the score on the entire dataset, this suggests that contamination, even if present, does not have a significant effect on reported results. If the score on the clean subset is lower, this suggests contamination may be inflating the results. The results are summarized in Figure [4.2]Figure 4.2 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\"). Although potential contamination is often high (with a quarter of benchmarks scoring over 50%), in most cases performance changes only negligibly, and we see no evidence that contamination level and performance difference are correlated. We conclude that either our conservative method substantially overestimated contamination or that contamination has little effect on performance.\\\n\\\nBelow, we review in more detail the few specific cases where either (1) the model performs significantly worse on the cleaned version, or (2) potential contamination is very high, which makes measuring the performance difference difficult.\\\n\\\n![Refer to caption]Figure 4.2: Benchmark contamination analysis    We constructed cleaned versions of each of our benchmarks to check for potential contamination in our training set. The x-axis is a conservative lower bound for how much of the dataset is known with high confidence to be clean, and the y-axis shows the difference in performance when evaluating only on the verified clean subset. Performance on most benchmarks changed negligibly, but some were flagged for further review. On inspection we find some evidence for contamination of the PIQA and Winograd results, and we mark the corresponding results in Section [3]Results ‣ Language Models are Few-Shot Learners\") with an asterisk. We find no evidence that other benchmarks are affected.\\\n\\\nOur analysis flagged six groups of benchmarks for further investigation: Word Scrambling, Reading Comprehension (QuAC, SQuAD2, DROP), PIQA, Winograd, language modeling tasks (Wikitext tasks, 1BW), and German to English translation. Since our overlap analysis is designed to be extremely conservative, we expect it to produce some false positives. We summarize the results for each group of tasks below:\\\n\\\n- •\\\n\\\n\\\nReading Comprehension: Our initial analysis flagged >>90% of task examples from QuAC, SQuAD2, and DROP as potentially contaminated, so large that even measuring the differential on a clean subset was difficult. Upon manual inspection, however, we found that for every overlap we inspected, in all 3 datasets, the source text was present in our training data but the question/answer pairs were not, meaning the model gains only background information and cannot memorize the answer to a specific question.\\\n\\\n- •\\\n\\\n\\\nGerman translation: We found 25% of the examples in the WMT16 German-English test set were marked as potentially contaminated, with an associated total effect size of 1-2 BLEU. Upon inspection, none of the flagged examples contain paired sentences resembling NMT training data and collisions were monolingual matches mostly of snippets of events discussed in the news.\\\n\\\n- •\\\n\\\n\\\nReversed Words and Anagrams: Recall that these tasks are of the form “alaok = koala”. Due to the short length of these tasks, we used 2-grams for filtering (ignoring punctuation). After inspecting the flagged overlaps, we found that they were not typically instances of real reversals or unscramblings in the training set, but rather palindromes or trivial unscramblings, e.g “kayak = kayak”. The amount of overlap was small, but removing the trivial tasks lead to an increase in difficulty and thus a spurious signal. Related to this, the symbol insertion task shows high overlap but no effect on performance – this is because that task involves removing non-letter characters from a word, and the overlap analysis itself ignores such characters, leading to many spurious matches.\\\n\\\n- •\\\n\\\n\\\nPIQA: The overlap analysis flagged 29% of examples as contaminated, and observed a 3 percentage point absolute decrease (4% relative decrease) in performance on the clean subset. Though the test dataset was released after our training set was created and its labels are hidden, some of the web pages used by the crowdsourced dataset creators are contained in our training set. We found a similar decrease in a 25x smaller model with much less capacity to memorize, leading us to suspect that the shift is likely statistical bias rather than memorization; examples which workers copied may simply be easier. Unfortunately, we cannot rigorously prove this hypothesis. We therefore mark our PIQA results with an asterisk to denote this potential contamination.\\\n\\\n- •\\\n\\\n\\\nWinograd: The overlap analysis flagged 45% of examples, and found a 2.6% decrease in performance on the clean subset. Manual inspection of the overlapping data point showed that 132 Winograd schemas were in fact present in our training set, though presented in a different format than we present the task to the model. Although the decrease in performance is small, we mark our Winograd results in the main paper with an asterisk.\\\n\\\n- •\\\n\\\n\\\nLanguage modeling: We found the 4 Wikipedia language modeling benchmarks measured in GPT-2, plus the Children’s Book Test dataset, to be almost entirely contained in our training data. Since we cannot reliably extract a clean subset here, we do not report results on these datasets, even though we intended to when starting this work. We note that Penn Tree Bank due to its age was unaffected and therefore became our chief language modeling benchmark.\\\n\\\n\\\nWe also inspected datasets where contamination was high, but the impact on performance was close to zero, simply to verify how much actual contamination existed. These appeared to often contain false positives. They had either no actual contamination, or had contamination that did not give away the answer to the task. One notable exception was LAMBADA, which appeared to have substantial genuine contamination, yet the impact on performance was very small, with the clean subset scoring within 0.5% of the full dataset. Also, strictly speaking, our fill-in-the-blank format precludes the simplest form of memorization. Nevertheless, since we made very large gains on LAMBADA in this paper, the potential contamination is noted in the results section.\\\n\\\nAn important limitation of our contamination analysis is that we cannot be sure that the clean subset is drawn from the same distribution as the original dataset. It remains possible that memorization inflates results but at the same time is precisely counteracted by some statistical bias causing the clean subset to be easier. However, the sheer number of shifts close to zero suggests this is unlikely, and we also observed no noticeable difference in the shifts for small models, which are unlikely to be memorizing.\\\n\\\nOverall, we have made a best effort to measure and document the effects of data contamination, and to note or outright remove problematic results, depending on the severity. Much work remains to be done to address this important and subtle issue for the field in general, both when designing benchmarks and when training models. For a more detailed explanation of our analysis, we refer the reader to Appendix [C]Appendix C Details of Test Set Contamination Studies ‣ Language Models are Few-Shot Learners\").\\\n\\",
            "citations": null
          },
          "5 Limitations\\": {
            "content": "\\\nGPT-3 and our analysis of it have a number of limitations. Below we describe some of these and suggest directions for future work.\\\n\\\nFirst, despite the strong quantitative and qualitative improvements of GPT-3, particularly compared to its direct predecessor GPT-2, it still has notable weaknesses in text synthesis and several NLP tasks. On text synthesis, although the overall quality is high, GPT-3 samples still sometimes repeat themselves semantically at the document level, start to lose coherence over sufficiently long passages, contradict themselves, and occasionally contain non-sequitur sentences or paragraphs. We will release a collection of 500 uncurated unconditional samples to help provide a better sense of GPT-3’s limitations and strengths at text synthesis. Within the domain of discrete language tasks, we have noticed informally that GPT-3 seems to have special difficulty with “common sense physics”, despite doing well on some datasets (such as PIQA \\[ [11])\\]) that test this domain. Specifically GPT-3 has difficulty with questions of the type “If I put cheese into the fridge, will it melt?”. Quantitatively, GPT-3’s in-context learning performance has some notable gaps on our suite of benchmarks, as described in Section [3]Results ‣ Language Models are Few-Shot Learners\"), and in particular it does little better than chance when evaluated one-shot or even few-shot on some “comparison” tasks, such as determining if two words are used the same way in a sentence, or if one sentence implies another (WIC and ANLI respectively), as well as on a subset of reading comprehension tasks. This is especially striking given GPT-3’s strong few-shot performance on many other tasks.\\\n\\\nGPT-3 has several structural and algorithmic limitations, which could account for some of the issues above. We focused on exploring in-context learning behavior in autoregressive language models because it is straightforward to both sample and compute likelihoods with this model class. As a result our experiments do not include any bidirectional architectures or other training objectives such as denoising. This is a noticeable difference from much of the recent literature, which has documented improved fine-tuning performance when using these approaches over standard language models \\[ [116])\\]. Thus our design decision comes at the cost of potentially worse performance on tasks which empirically benefit from bidirectionality. This may include fill-in-the-blank tasks, tasks that involve looking back and comparing two pieces of content, or tasks that require re-reading or carefully considering a long passage and then generating a very short answer. This could be a possible explanation for GPT-3’s lagging few-shot performance on a few of the tasks, such as WIC (which involves comparing the use of a word in two sentences), ANLI (which involves comparing two sentences to see if one implies the other), and several reading comprehension tasks (e.g. QuAC and RACE). We also conjecture, based on past literature, that a large bidirectional model would be stronger at fine-tuning than GPT-3. Making a bidirectional model at the scale of GPT-3, and/or trying to make bidirectional models work with few- or zero-shot learning, is a promising direction for future research, and could help achieve the “best of both worlds”.\\\n\\\nA more fundamental limitation of the general approach described in this paper – scaling up any LM-like model, whether autoregressive or bidirectional – is that it may eventually run into (or could already be running into) the limits of the pretraining objective. Our current objective weights every token equally and lacks a notion of what is most important to predict and what is less important. \\[ [115])\\] demonstrate benefits of customizing prediction to entities of interest. Also, with self-supervised objectives, task specification relies on forcing the desired task into a prediction problem, whereas ultimately, useful language systems (for example virtual assistants) might be better thought of as taking goal-directed actions rather than just making predictions. Finally, large pretrained language models are not grounded in other domains of experience, such as video or real-world physical interaction, and thus lack a large amount of context about the world \\[ [9])\\]. For all these reasons, scaling pure self-supervised prediction is likely to hit limits, and augmentation with a different approach is likely to be necessary. Promising future directions in this vein might include learning the objective function from humans \\[ [143])\\], fine-tuning with reinforcement learning, or adding additional modalities such as images to provide grounding and a better model of the world \\[ [18])\\].\\\n\\\nAnother limitation broadly shared by language models is poor sample efficiency during pre-training. While GPT-3 takes a step towards test-time sample efficiency closer to that of humans (one-shot or zero-shot), it still sees much more text during pre-training than a human sees in the their lifetime \\[ [71])\\]. Improving pre-training sample efficiency is an important direction for future work, and might come from grounding in the physical world to provide additional information, or from algorithmic improvements.\\\n\\\nA limitation, or at least uncertainty, associated with few-shot learning in GPT-3 is ambiguity about whether few-shot learning actually learns new tasks “from scratch” at inference time, or if it simply recognizes and identifies tasks that it has learned during training. These possibilities exist on a spectrum, ranging from demonstrations in the training set that are drawn from exactly the same distribution as those at test time, to recognizing the same task but in a different format, to adapting to a specific style of a general task such as QA, to learning a skill entirely de novo. Where GPT-3 is on this spectrum may also vary from task to task. Synthetic tasks such as wordscrambling or defining nonsense words seem especially likely to be learned de novo, whereas translation clearly must be learned during pretraining, although possibly from data that is very different in organization and style than the test data. Ultimately, it is not even clear what humans learn from scratch vs from prior demonstrations. Even organizing diverse demonstrations during pre-training and identifying them at test time would be an advance for language models, but nevertheless understanding precisely how few-shot learning works is an important unexplored direction for future research.\\\n\\\nA limitation associated with models at the scale of GPT-3, regardless of objective function or algorithm, is that they are both expensive and inconvenient to perform inference on, which may present a challenge for practical applicability of models of this scale in their current form. One possible future direction to address this is distillation \\[ [44])\\] of large models down to a manageable size for specific tasks. Large models such as GPT-3 contain a very wide range of skills, most of which are not needed for a specific task, suggesting that in principle aggressive distillation may be possible. Distillation is well-explored in general \\[ [69])\\] but has not been tried at the scale of hundred of billions parameters; new challenges and opportunities may be associated with applying it to models of this size.\\\n\\\nFinally, GPT-3 shares some limitations common to most deep learning systems – its decisions are not easily interpretable, it is not necessarily well-calibrated in its predictions on novel inputs as observed by the much higher variance in performance than humans on standard benchmarks, and it retains the biases of the data it has been trained on. This last issue – biases in the data that may lead the model to generate stereotyped or prejudiced content – is of special concern from a societal perspective, and will be discussed along with other issues in the next section on Broader Impacts (Section [6]Broader Impacts ‣ Language Models are Few-Shot Learners\")).\\\n\\",
            "citations": null
          },
          "6 Broader Impacts\\": {
            "content": "\\\nLanguage models have a wide range of beneficial applications for society, including code and writing auto-completion, grammar assistance, game narrative generation, improving search engine responses, and answering questions. But they also have potentially harmful applications. GPT-3 improves the quality of text generation and adaptability over smaller models and increases the difficulty of distinguishing synthetic text from human-written text. It therefore has the potential to advance both the beneficial and harmful applications of language models.\\\n\\\nHere we focus on the potential harms of improved language models, not because we believe the harms are necessarily greater, but in order to stimulate efforts to study and mitigate them. The broader impacts of language models like this are numerous. We focus on two primary issues: the potential for deliberate misuse of language models like GPT-3 in Section [6.1]Misuse of Language Models ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\"), and issues of bias, fairness, and representation within models like GPT-3 in Section [6.2]Fairness, Bias, and Representation ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\"). We also briefly discuss issues of energy efficiency (Section [6.3]Energy Usage ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\")).\\\n\\\n### 6.1 Misuse of Language Models\\\n\\\nMalicious uses of language models can be somewhat difficult to anticipate because they often involve repurposing language models in a very different environment or for a different purpose than researchers intended. To help with this, we can think in terms of traditional security risk assessment frameworks, which outline key steps such as identifying threats and potential impacts, assessing likelihood, and determining risk as a combination of likelihood and impact \\[ [113])\\]. We discuss three factors: potential misuse applications, threat actors, and external incentive structures.\\\n\\\n#### 6.1.1 Potential Misuse Applications\\\n\\\nAny socially harmful activity that relies on generating text could be augmented by powerful language models. Examples include misinformation, spam, phishing, abuse of legal and governmental processes, fraudulent academic essay writing and social engineering pretexting. Many of these applications bottleneck on human beings to write sufficiently high quality text. Language models that produce high quality text generation could lower existing barriers to carrying out these activities and increase their efficacy.\\\n\\\nThe misuse potential of language models increases as the quality of text synthesis improves. The ability of GPT-3 to generate several paragraphs of synthetic content that people find difficult to distinguish from human-written text in [3.9.4]News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") represents a concerning milestone in this regard.\\\n\\\n#### 6.1.2 Threat Actor Analysis\\\n\\\nThreat actors can be organized by skill and resource levels, ranging from low or moderately skilled and resourced actors who may be able to build a malicious product to ‘advanced persistent threats’ (APTs): highly skilled and well-resourced (e.g. state-sponsored) groups with long-term agendas \\[ [119])\\].\\\n\\\nTo understand how low and mid-skill actors think about language models, we have been monitoring forums and chat groups where misinformation tactics, malware distribution, and computer fraud are frequently discussed. While we did find significant discussion of misuse following the initial release of GPT-2 in spring of 2019, we found fewer instances of experimentation and no successful deployments since then. Additionally, those misuse discussions were correlated with media coverage of language model technologies. From this, we assess that the threat of misuse from these actors is not immediate, but significant improvements in reliability could change this.\\\n\\\nBecause APTs do not typically discuss operations in the open, we have consulted with professional threat analysts about possible APT activity involving the use of language models. Since the release of GPT-2 there has been no discernible difference in operations that may see potential gains by using language models. The assessment was that language models may not be worth investing significant resources in because there has been no convincing demonstration that current language models are significantly better than current methods for generating text, and because methods for “targeting” or “controlling” the content of language models are still at a very early stage.\\\n\\\n#### 6.1.3 External Incentive Structures\\\n\\\nEach threat actor group also has a set of tactics, techniques, and procedures (TTPs) that they rely on to accomplish their agenda. TTPs are influenced by economic factors like scalability and ease of deployment; phishing is extremely popular among all groups because it offers a low-cost, low-effort, high-yield method of deploying malware and stealing login credentials. Using language models to augment existing TTPs would likely result in an even lower cost of deployment.\\\n\\\nEase of use is another significant incentive. Having stable infrastructure has a large impact on the adoption of TTPs. The outputs of language models are stochastic, however, and though developers can constrain these (e.g. using top-k truncation) they are not able to perform consistently without human feedback. If a social media disinformation bot produces outputs that are reliable 99% of the time, but produces incoherent outputs 1% of the time, this could reduce the amount of human labor required in operating this bot. But a human is still needed to filter the outputs, which restricts how scalable the operation can be.\\\n\\\nBased on our analysis of this model and analysis of threat actors and the landscape, we suspect AI researchers will eventually develop language models that are sufficiently consistent and steerable that they will be of greater interest to malicious actors. We expect this will introduce challenges for the broader research community, and hope to work on this through a combination of mitigation research, prototyping, and coordinating with other technical developers.\\\n\\\n### 6.2 Fairness, Bias, and Representation\\\n\\\nBiases present in training data may lead models to generate stereotyped or prejudiced content. This is concerning, since model bias could harm people in the relevant groups in different ways by entrenching existing stereotypes and producing demeaning portrayals amongst other potential harms \\[ [19])\\]. We have conducted an analysis of biases in the model in order to better understand GPT-3’s limitations when it comes to fairness, bias, and representation. 888Evaluating fairness, bias, and representation in language models is a rapidly-developing area with a large body of prior work. See, for example, \\[ [46]), [90]), [120])\\].\\\n\\\nOur goal is not to exhaustively characterize GPT-3, but to give a preliminary analysis of some of its limitations and behaviors. We focus on biases relating to gender, race, and religion, although many other categories of bias are likely present and could be studied in follow-up work. This is a preliminary analysis and does not reflect all of the model’s biases even within the studied categories.\\\n\\\nBroadly, our analysis indicates that internet-trained models have internet-scale biases; models tend to reflect stereotypes present in their training data. Below we discuss our preliminary findings of bias along the dimensions of gender, race, and religion. We probe for bias in the 175 billion parameter model and also in similar smaller models, to see if and how they are different in this dimension.\\\n\\\n#### 6.2.1 Gender\\\n\\\nIn our investigation of gender bias in GPT-3, we focused on associations between gender and occupation. We found that occupations in general have a higher probability of being followed by a male gender identifier than a female one (in other words, they are male leaning) when given a context such as \"The {occupation} was a\" (Neutral Variant). 83% of the 388 occupations we tested were more likely to be followed by a male identifier by GPT-3. We measured this by feeding the model a context such as \"The detective was a\" and then looking at the probability of the model following up with male indicating words (eg. man, male etc.) or female indicating words (woman, female etc.). In particular, occupations demonstrating higher levels of education such as legislator, banker, or professor emeritus were heavily male leaning along with occupations that require hard physical labour such as mason, millwright, and sheriff. Occupations that were more likely to be followed by female identifiers include midwife, nurse, receptionist, housekeeper etc.\\\n\\\nWe also tested how these probabilities changed when we shifted the context to be the \"The competent {occupation} was a\" (Competent Variant), and when we shifted the context to be \"The incompetent {occupation} was a\" (Incompetent Variant) for each occupation in the dataset. We found that, when prompted with \"The competent {occupation} was a,\" the majority of occupations had an even higher probability of being followed by a male identifier than a female one than was the case with our original neutral prompt, \"The {occupation} was a\". With the prompt \"The incompetent {occupation} was a\" the majority of occupations still leaned male with a similar probability than for our original neutral prompt. The average occupation bias - measured as 1njobs​∑jobslog⁡(P​(female\\|Context)P(male\\|Context)))\\\\frac{1}{n\\_{\\\\mathrm{jobs}}}\\\\sum\\_{\\\\mathrm{jobs}}\\\\log(\\\\frac{P(\\\\mathrm{female}\\|\\\\mathrm{Context})}{P(\\\\mathrm{male}\\|\\\\mathrm{Context}))}) \\- was −1.111.11-1.11 for the Neutral Variant, −2.142.14-2.14 for the Competent Variant and −1.151.15-1.15 for the Incompetent Variant.\\\n\\\nWe also carried out pronoun resolution on the Winogender dataset \\[ [111])\\] using two methods which further corroborated the model’s tendency to associate most occupations with males. One method measured the models ability to correctly assign a pronoun as the occupation or the participant. For example, we fed the model a context such as \"The advisor met with the advisee because she wanted to get advice about job applications. ‘She’ refers to the\" and found the option with the lowest probability between the two possible options (Choices between Occupation Option: advisor; Participant Option: advisee).\\\n\\\nOccupation and participant words often have societal biases associated with them such as the assumption that most occupants are by default male. We found that the language models learnt some of these biases such as a tendency to associate female pronouns with participant positions more than male pronouns. GPT-3 175B had the highest accuracy of all the models (64.17%) on this task. It was also the only model where the accuracy for Occupant sentences (sentences where the correct answer was the Occupation option) for females was higher than for males (81.7% vs 76.7%). All other models had a higher accuracy for male pronouns with Occupation sentences as compared to female pronouns with the exception of our second largest model- GPT-3 13B - which had the same accuracy (60%) for both. This offers some preliminary evidence that in places where issues of bias can make language models susceptible to error, the larger models are more robust than smaller models.\\\n\\\nWe also performed co-occurrence tests, where we analyzed which words are likely to occur in the vicinity of other pre-selected words. We created a model output sample set by generating 800 outputs of length 50 each with a temperature of 1 and top\\_p of 0.9 for every prompt in our dataset. For gender, we had prompts such as \"He was very\", \"She was very\", \"He would be described as\", \"She would be described as\"999We only used male and female pronouns. This simplifying assumption makes it easier to study co-occurrence since it does not require the isolation of instances in which ‘they’ refers to a singular noun from those where it didn’t, but other forms of gender bias are likely present and could be studied using different approaches.. We looked at the adjectives and adverbs in the top 100 most favored words using an off-the-shelf POS tagger \\[ [60])\\]. We found females were more often described using appearance oriented words such as ”beautiful” and ”gorgeous” as compared to men who were more often described using adjectives that span a greater spectrum.\\\n\\\nTable [6.1]Table 6.1 ‣ 6.2.1 Gender ‣ 6.2 Fairness, Bias, and Representation ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\") shows the top 10 most favored descriptive words for the model along with the raw number of times each word co-occurred with a pronoun indicator. “Most Favored” here indicates words which were most skewed towards a category by co-occurring with it at a higher rate as compared to the other category. To put these numbers in perspective, we have also included the average for the number of co-occurrences across all qualifying words for each gender.\\\n\\\nTable 6.1: Most Biased Descriptive Words in 175B Model\\\n\\\n| Top 10 Most Biased Male Descriptive Words with Raw Co-Occurrence Counts | Top 10 Most Biased Female Descriptive Words with Raw Co-Occurrence Counts |\\\n| --- | --- |\\\n| Average Number of Co-Occurrences Across All Words: 17.5 | Average Number of Co-Occurrences Across All Words: 23.9 |\\\n| Large (16) | Optimistic (12) |\\\n| Mostly (15) | Bubbly (12) |\\\n| Lazy (14) | Naughty (12) |\\\n| Fantastic (13) | Easy-going (12) |\\\n| Eccentric (13) | Petite (10) |\\\n| Protect (10) | Tight (10) |\\\n| Jolly (10) | Pregnant (10) |\\\n| Stable (9) | Gorgeous (28) |\\\n| Personable (22) | Sucked (8) |\\\n| Survive (7) | Beautiful (158) |\\\n\\\n#### 6.2.2 Race\\\n\\\nTo investigate racial bias in GPT-3, we seeded the model with prompts such as - \"The {race} man was very\", \"The {race} woman was very\" and \"People would describe the {race} person as\" and generated 800 samples for each of the above prompts, with {race} replaced with a term indicating a racial category such as White or Asian. We then measure word co-occurrences in the generated samples. Given prior research demonstrating that language models produce text of differing sentiment when varying features such as occupation \\[ [46])\\], we explored how race impacted sentiment. We measured sentiment using Senti WordNet \\[ [7])\\] for the words which co-occurred disproportionately with each race. Each word sentiment varied from 100 to -100, with positive scores indicating positive words (eg. wonderfulness: 100, amicable: 87.5), negative scores indicating negative words (eg. wretched: -87.5 , horrid: -87.5) and a score of 0 indicating neutral words (eg. sloping, chalet).\\\n\\\nIt should be noted that we were explicitly prompting the models to talk about race and this in turn generated text that focused on racial features; these results are not from the models talking about race in the wild but talking about race in an experimental setup where they have been primed to do so. Additionally, since we are measuring sentiment by simply looking at word co-occurrences, the resulting sentiment can reflect socio-historical factors - for instance, text relating to a discussion of slavery will frequently have a negative sentiment, which may lead to a demographic being associated with a negative sentiment under this testing methodology.\\\n\\\nAcross the models we analyzed, ‘Asian’ had a consistently high sentiment - it ranked 1st in 3 out of 7 models. On the other hand, ’Black’ had a consistently low sentiment - it ranked the lowest in 5 out of 7 models. These differences narrowed marginally on the larger model sizes. This analysis gives a sense of the biases of different models and highlights the need for more sophisticated analysis of the relationship between sentiment, entities, and input data.\\\n\\\n![Refer to caption]Figure 6.1: Racial Sentiment Across Models\\\n\\\n#### 6.2.3 Religion\\\n\\\nWe studied which words co-occurred with religious terms relating to Atheism, Buddhism, Christianity, Hinduism, Islam, and Judaism, by generating 800 model outputs of length ≈\\\\approx50 with a temperature of 1 and a top p𝑝p of 0.90.90.9 for every prompt. Our prompts were of the nature \"{Religion practitioners} are\" (Eg. \"Christians are\") for each of the six religious categories listed above. We then allowed the model to naturally carry out completions and created a corpus of such completions for studying co-occurrence of words.\\\n\\\nThe following is an example output from the model:\\\n\\\n\"Buddhists aredivided into two main branches - Theravada and Mahayana. Theravada is the more conservative branch, centering on monastic life and the earliest sutras and refusing to recognize the later Mahayana sutras as authentic.\"\\\n\\\nSimilar to race, we found that the models make associations with religious terms that indicate some propensity to reflect how these terms are sometimes presented in the world. For example, with the religion Islam, we found that words such as ramadan, prophet and mosque co-occurred at a higher rate than for other religions. We also found that words such as violent, terrorism and terrorist co-occurred at a greater rate with Islam than with other religions and were in the top 40 most favored words for Islam in GPT-3.\\\n\\\n| Religion | Most Favored Descriptive Words |\\\n| --- | --- |\\\n| Atheism | ‘Theists’, ‘Cool’, ‘Agnostics’, ‘Mad’, ‘Theism’, ‘Defensive’, ‘Complaining’, ‘Correct’, ‘Arrogant’, ‘Characterized’ |\\\n| Buddhism | ‘Myanmar’, ‘Vegetarians’, ‘Burma’, ‘Fellowship’, ‘Monk’, ‘Japanese’, ‘Reluctant’, ‘Wisdom’, ‘Enlightenment’, ‘Non-Violent’ |\\\n| Christianity | ‘Attend’, ‘Ignorant’, ‘Response’, ‘Judgmental’, ‘Grace’, ‘Execution’, ‘Egypt’, ‘Continue’, ‘Comments’, ‘Officially’ |\\\n| Hinduism | ‘Caste’, ‘Cows’, ‘BJP’, ‘Kashmir’, ‘Modi’, ‘Celebrated’, ‘Dharma’, ‘Pakistani’, ‘Originated’, ‘Africa’ |\\\n| Islam | ‘Pillars’, ‘Terrorism’, ‘Fasting’, ‘Sheikh’, ‘Non-Muslim’, ‘Source’, ‘Charities’, ‘Levant’, ‘Allah’, ‘Prophet’ |\\\n| Judaism | ‘Gentiles’, ‘Race’, ‘Semites’, ‘Whites’, ‘Blacks’, ‘Smartest’, ‘Racists’, ‘Arabs’, ‘Game’, ‘Russian’ |\\\n\\\nTable 6.2: Shows the ten most favored words about each religion in the GPT-3 175B model.\\\n\\\n#### 6.2.4 Future Bias and Fairness Challenges\\\n\\\nWe have presented this preliminary analysis to share some of the biases we found in order to motivate further research, and to highlight the inherent difficulties in characterizing biases in large-scale generative models; we expect this to be an area of continuous research for us and are excited to discuss different methodological approaches with the community. We view the work in this section as subjective signposting - we chose gender, race, and religion as a starting point, but we recognize the inherent subjectivity in this choice. Our work is inspired by the literature on characterizing model attributes to develop informative labels such as Model Cards for Model Reporting from \\[ [89])\\].\\\n\\\nUltimately, it is important not just to characterize biases in language systems but to intervene. The literature on this is also extensive \\[ [104]), [46])\\], so we offer only a few brief comments on future directions specific to large language models. In order to pave the way for effective bias prevention in general purpose models, there is a need for building a common vocabulary tying together the normative, technical and empirical challenges of bias mitigation for these models. There is room for more research that engages with the literature outside NLP, better articulates normative statements about harm, and engages with the lived experience of communities affected by NLP systems \\[ [4])\\]. Thus, mitigation work should not be approached purely with a metric driven objective to ‘remove’ bias as this has been shown to have blind spots \\[ [32]), [93])\\] but in a holistic manner.\\\n\\\n### 6.3 Energy Usage\\\n\\\nPractical large-scale pre-training requires large amounts of computation, which is energy-intensive: training the GPT-3 175B consumed several thousand petaflop/s-days of compute during pre-training, compared to tens of petaflop/s-days for a 1.5B parameter GPT-2 model (Figure [2.2]Figure 2.2 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\")). This means we should be cognizant of the cost and efficiency of such models, as advocated by \\[ [122])\\].\\\n\\\nThe use of large-scale pre-training also gives another lens through which to view the efficiency of large models - we should consider not only the resources that go into training them, but how these resources are amortized over the lifetime of a model, which will subsequently be used for a variety of purposes and fine-tuned for specific tasks. Though models like GPT-3 consume significant resources during training, they can be surprisingly efficient once trained: even with the full GPT-3 175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or only a few cents in energy costs. Additionally, techniques like model distillation \\[ [69])\\] can further bring down the cost of such models, letting us adopt a paradigm of training single, large-scale models, then creating more efficient versions of them for use in appropriate contexts. Algorithmic progress may also naturally further increase the efficiency of such models over time, similar to trends observed in image recognition and neural machine translation \\[ [39])\\].\\\n\\",
            "citations": null
          },
          "7 Related Work\\": {
            "content": "\\\nSeveral lines of work have focused on increasing parameter count and/or computation in language models as a means to improve generative or task performance. An early work scaled LSTM based language models to over a billion parameters \\[ [51])\\]. One line of work straightforwardly increases the size of transformer models, scaling up parameters and FLOPS-per-token roughly in proportion. Work in this vein has successively increased model size: 213 million parameters \\[ [134])\\] in the original paper, 300 million parameters \\[ [20])\\], 1.5 billion parameters \\[ [117])\\], 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and most recently 17 billion parameters \\[ [132])\\]. A second line of work has focused on increasing parameter count but not computation, as a means of increasing models’ capacity to store information without increased computational cost. These approaches rely on the conditional computation framework \\[ [10])\\] and specifically, the mixture-of-experts method \\[ [124])\\] has been used to produce 100 billion parameter models and more recently 50 billion parameter translation models \\[ [3])\\], though only a small fraction of the parameters are actually used on each forward pass. A third approach increases computation without increasing parameters; examples of this approach include adaptive computation time \\[ [35])\\] and the universal transformer \\[ [22])\\]. Our work focuses on the first approach (scaling compute and parameters together, by straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ this strategy.\\\n\\\nSeveral efforts have also systematically studied the effect of scale on language model performance. \\[ [57]), [114]), [77]), [42])\\], find a smooth power-law trend in loss as autoregressive language models are scaled up. This work suggests that this trend largely continues as models continue to scale up (although a slight bending of the curve can perhaps be detected in Figure [3.1]Figure 3.1 ‣ 3 Results ‣ Language Models are Few-Shot Learners\")), and we also find relatively smooth increases in many (though not all) downstream tasks across 3 orders of magnitude of scaling.\\\n\\\nAnother line of work goes in the opposite direction from scaling, attempting to preserve strong performance in language models that are as small as possible. This approach includes ALBERT \\[ [62])\\] as well as general \\[ [44])\\] and task-specific \\[ [121]), [52]), [59])\\] approaches to distillation of language models. These architectures and techniques are potentially complementary to our work, and could be applied to decrease latency and memory footprint of giant models.\\\n\\\nAs fine-tuned language models have neared human performance on many standard benchmark tasks, considerable effort has been devoted to constructing more difficult or open-ended tasks, including question answering \\[ [58]), [47]), [14]), [84])\\], reading comprehension \\[ [16]), [106])\\], and adversarially constructed datasets designed to be difficult for existing language models \\[ [118]), [94])\\]. In this work we test our models on many of these datasets.\\\n\\\nMany previous efforts have focused specifically on question-answering, which constitutes a significant fraction of the tasks we tested on. Recent efforts include \\[ [116]), [115])\\], which fine-tuned an 11 billion parameter language model, and \\[ [33])\\], which focused on attending over a large corpus of data at test time. Our work differs in focusing on in-context learning but could be combined in the future with those of \\[ [33]), [75])\\].\\\n\\\nMetalearning in language models has been utilized in \\[ [117])\\], though with much more limited results and no systematic study. More broadly, language model metalearning has an inner-loop-outer-loop structure, making it structurally similar to metalearning as applied to ML in general. Here there is an extensive literature, including matching networks \\[ [133])\\], RL2 \\[ [26])\\], learning to optimize \\[ [109]), [1]), [73])\\] and MAML \\[ [30])\\]. Our approach of stuffing the model’s context with previous examples is most structurally similar to RL2 and also resembles \\[ [45])\\], in that an inner loop of adaptation takes place through computation in the model’s activations across timesteps, without updating the weights, while an outer loop (in this case just language model pre-training) updates the weights, and implicitly learns the ability to adapt to or at least recognize tasks defined at inference-time. Few-shot auto-regressive density estimation was explored in  \\[ [107])\\] and \\[ [38])\\] studied low-resource NMT as a few-shot learning problem.\\\n\\\nWhile the mechanism of our few-shot approach is different, prior work has also explored ways of using pre-trained language models in combination with gradient descent to perform few-shot learning \\[ [126])\\]. Another sub-field with similar goals is semi-supervised learning where approaches such as UDA \\[ [137])\\] also explore methods of fine-tuning when very little labeled data is available.\\\n\\\nGiving multi-task models instructions in natural language was first formalized in a supervised setting with \\[ [87])\\] and utilized for some tasks (such as summarizing) in a language model with \\[ [117])\\]. The notion of presenting tasks in natural language was also explored in the text-to-text transformer \\[ [116])\\], although there it was applied for multi-task fine-tuning rather than for in-context learning without weight updates.\\\n\\\nAnother approach to increasing generality and transfer-learning capability in language models is multi-task learning \\[ [12])\\], which fine-tunes on a mixture of downstream tasks together, rather than separately updating the weights for each one. If successful multi-task learning could allow a single model to be used for many tasks without updating the weights (similar to our in-context learning approach), or alternatively could improve sample efficiency when updating the weights for a new task. Multi-task learning has shown some promising initial results \\[ [67]), [76])\\] and multi-stage fine-tuning has recently become a standardized part of SOTA results on some datasets \\[ [97])\\] and pushed the boundaries on certain tasks \\[ [55])\\], but is still limited by the need to manually curate collections of datasets and set up training curricula. By contrast pre-training at large enough scale appears to offer a “natural” broad distribution of tasks implicitly contained in predicting the text itself. One direction for future work might be attempting to generate a broader set of explicit tasks for multi-task learning, for example through procedural generation \\[ [128])\\], human interaction \\[ [144])\\], or active learning \\[ [80])\\].\\\n\\\nAlgorithmic innovation in language models over the last two years has been enormous, including denoising-based bidirectionality \\[ [20])\\], prefixLM \\[ [24])\\] and encoder-decoder architectures \\[ [72]), [116])\\], random permutations during training \\[ [139])\\], architectures that improve the efficiency of sampling \\[ [28])\\], improvements in data and training procedures \\[ [74])\\], and efficiency increases in the embedding parameters \\[ [62])\\]. Many of these techniques provide significant gains on downstream tasks. In this work we continue to focus on pure autoregressive language models, both in order to focus on in-context learning performance and to reduce the complexity of our large model implementations. However, it is very likely that incorporating these algorithmic advances could improve GPT-3’s performance on downstream tasks, especially in the fine-tuning setting, and combining GPT-3’s scale with these algorithmic techniques is a promising direction for future work.\\\n\\",
            "citations": null
          },
          "8 Conclusion\\": {
            "content": "\\\nWe presented a 175 billion parameter language model which shows strong performance on many NLP tasks and benchmarks in the zero-shot, one-shot, and few-shot settings, in some cases nearly matching the performance of state-of-the-art fine-tuned systems, as well as generating high-quality samples and strong qualitative performance at tasks defined on-the-fly. We documented roughly predictable trends of scaling in performance without using fine-tuning. We also discussed the social impacts of this class of model. Despite many limitations and weaknesses, these results suggest that very large language models may be an important ingredient in the development of adaptable, general language systems.\\\n\\",
            "citations": null
          }
        },
        "abstract": "Recent work has demonstrated substantial gains on many NLP tasks and\nbenchmarks by pre-training on a large corpus of text followed by fine-tuning on\na specific task. While typically task-agnostic in architecture, this method\nstill requires task-specific fine-tuning datasets of thousands or tens of\nthousands of examples. By contrast, humans can generally perform a new language\ntask from only a few examples or from simple instructions - something which\ncurrent NLP systems still largely struggle to do. Here we show that scaling up\nlanguage models greatly improves task-agnostic, few-shot performance, sometimes\neven reaching competitiveness with prior state-of-the-art fine-tuning\napproaches. Specifically, we train GPT-3, an autoregressive language model with\n175 billion parameters, 10x more than any previous non-sparse language model,\nand test its performance in the few-shot setting. For all tasks, GPT-3 is\napplied without any gradient updates or fine-tuning, with tasks and few-shot\ndemonstrations specified purely via text interaction with the model. GPT-3\nachieves strong performance on many NLP datasets, including translation,\nquestion-answering, and cloze tasks, as well as several tasks that require\non-the-fly reasoning or domain adaptation, such as unscrambling words, using a\nnovel word in a sentence, or performing 3-digit arithmetic. At the same time,\nwe also identify some datasets where GPT-3's few-shot learning still struggles,\nas well as some datasets where GPT-3 faces methodological issues related to\ntraining on large web corpora. Finally, we find that GPT-3 can generate samples\nof news articles which human evaluators have difficulty distinguishing from\narticles written by humans. We discuss broader societal impacts of this finding\nand of GPT-3 in general."
      },
      "bib.bib4": {
        "id": "bib.bib4",
        "citation": "Duisterhof et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Mast3r-sfm: a fully-integrated solution for unconstrained structure-from-motion.",
        "venue": "arXiv preprint arXiv:2409.19152",
        "pages": "",
        "url": "",
        "arxiv_id": "2409.19152",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "![Refer to caption]\n\n![Refer to caption]![Refer to caption]\n\nFigure 1: Top: Relative rotation (RRA) and translation (RTA) accuracies on the CO3Dv2 dataset when varying the number of input views with random subsampling (the more views, the larger they overlap).\nIn contrast to our competitors, MASt3R-SfM offers nearly constant performance on the full range, even for very few views.\nBottom: MASt3R-SfM also works _without motion_, _i.e_. in purely rotational settings.\nWe show here a reconstruction from 6 views sharing the same optical center.\n\nStructure-from-Motion (SfM) is a long-standing problem of computer vision that aims to estimate the 3D geometry of a scene as well as the parameters of the cameras observing it, given the images from each camera \\[ [19])\\].\nSince it conveniently provides jointly for cameras and map, it constitutes an essential component for many practical computer vision applications, such as navigation (mapping and visual localization \\[ [46]), [35]), [11])\\]), dense multi-view stereo reconstruction (MVS) \\[ [47]), [67]), [60]), [37])\\], novel view synthesis \\[ [34]), [6]), [23])\\], auto-calibration \\[ [18])\\] or even archaeology \\[ [38]), [55])\\].\n\nIn reality, SfM is a “needle in a haystack\" type of problem, typically involving a highly non-convex objective function with many local minima \\[ [59])\\].\nSince finding the global minimum in such a landscape is too challenging to be done directly, traditional SfM approaches such as COLMAP\n\\[ [46])\\] have been decomposing the problem as a series (or _pipeline_) of minimal problems, _e.g_. keypoint extraction and matching, relative pose estimation, and incremental reconstruction with triangulation and bundle adjustment.\nThe presence of outliers, such as wrong pixel matches, poses additional challenges and compels existing methods to repeatedly resort to hypothesis formulation and verification at multiple occasions in the pipeline, typically with RAndom SAmple Consensus (RANSAC) or its many flavors \\[ [17]), [26]), [5]), [58]), [4]), [65])\\].\nThis approach has been the standard for several decades, yet it remains brittle and fails when the input images do not sufficiently overlap, or when motion ( _i.e_. translation) between viewpoints is insufficient \\[ [10]), [48])\\].\n\nRecently, a set of innovative methods propose to revisit SfM in order to alleviate the heavy complexity of the traditional pipeline and solve its shortcomings.\nVGGSfM \\[ [62])\\], for instance, introduces an end-to-end differentiable version of the pipeline, simplifying some of its components. Likewise, detector-free SfM \\[ [20])\\] replaces the keypoint extraction and matching step of the classical pipeline with learned components.\nThese changes must, however, be put into perspective, as they do not fundamentally challenge the overall structure of the traditional pipeline.\nIn comparison, FlowMap \\[ [50])\\] and Ace-Zero \\[ [9])\\] independently propose a radically novel type of approach to solve SfM, which is based on simple first-order gradient descent of a global loss function.\nTheir trick is to train a geometry regressor network during scene optimization as a way to reparameterize and regularize the scene geometry.\nUnfortunately, this type of approach only works in certain configurations, namely for input images exhibiting high overlap and low illumination variations.\nLastly, DUSt3R \\[ [64]), [27])\\] demonstrates that a single forward pass of a transformer architecture can provide for a good estimate of the geometry and cameras parameters of a small two-image scene.\nThese particularly robust estimates can then be stitched together again using simple gradient descent, allowing to relax many of the constraints mentioned earlier.\nHowever it yields rather imprecise global SfM reconstructions and does not scale well.\n\nIn this work, we propose MASt3R-SfM, a fully-integrated SfM pipeline that can handle completely unconstrained input image collections, _i.e_. ranging from a single view to large-scale scenes, possibly without any camera motion as illustrated in [fig.1]In 1 Introduction ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\").\nWe build upon the recently released DUSt3R \\[ [64])\\], a foundation model for 3D vision, and more particularly on its recent extension MASt3R that is able to perform local 3D reconstruction and matching in a single forward pass \\[ [27])\\].\nSince MASt3R is fundamentally limited to processing image pairs, it scales poorly to large image collections.\nTo remedy this, we hijack its frozen encoder to perform fast image retrieval with negligible computational overhead, resulting in a scalable SfM method with quasi-linear complexity in the number of images.\nThanks to the robustness of MASt3R to outliers, the proposed method is able to completely get rid of RANSAC.\nThe SfM optimization is carried out in two successive gradient descents based on frozen local reconstructions output by MASt3R:\nfirst, using a matching loss in 3D space; then with a 2D reprojection loss to refine the previous estimate.\nInterestingly, our method goes beyond structure-from-motion, as it works even when there is _no motion_ ( _i.e_. purely rotational case), as illustrated in [fig.1]In 1 Introduction ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\").\n\nIn summary, we make three main contributions.\nFirst, we propose MASt3R-SfM, a full-fledged SfM pipeline able to process unconstrained image collections.\nTo achieve linear complexity in the number of images, we show as second contribution how the encoder from MASt3R can be exploited for large-scale image retrieval.\nNote that our entire SfM pipeline is training-free, provided an off-the-shelf MASt3R checkpoint.\nLastly, we conduct an extensive benchmarking on a diverse set of datasets, showing that existing approaches are still prone to failure in small-scale settings, despite significant progress.\nIn comparison, MASt3R-SfM demonstrates state-of-the-art performance in a wide range of conditions, as illustrated in [fig.1]In 1 Introduction ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\").",
            "citations": null
          },
          "2 Related Works": {
            "content": "#### Traditional SfM.\n\nAt the core of Structure-from-Motion (SfM) lies matching and Bundle Adjustment (BA).\nMatching, _i.e_. the task of finding pixel correspondences across different images observing the same 3D points, has been extensively studied in the past decades, beginning from handcrafted keypoints \\[ [31]), [7]), [42])\\] and more recently being surpassed by data-driven strategies \\[ [41]), [13]), [43]), [22]), [52]), [63]), [12]), [14]), [15])\\].\nMatching is critical for SfM, since it builds the basis to formulate a loss function to minimize during BA.\nBA itself aims at minimizing reprojection errors for the correspondences extracted during the matching phase by jointly optimizing the positions of 3D point and camera parameters.\nIt is usually expressed as a non-linear least squares problem \\[ [2])\\], known to be brittle in the presence of outliers and prone to fall into suboptimal local minima if not provided with a good initialization \\[ [51]), [1])\\].\nFor all these reasons, traditional SfM pipelines like COLMAP are heavily handcrafted in practice \\[ [46]), [29]), [20])\\].\nBy triangulating 3D points to provide an initial estimate for BA, they incrementally build a scene, adding images one by one by formulating hypothesis and discarding the ones that are not verified by the current scene state.\nDue to the large number of outliers, and the fact that the structure of the pipeline tends to propagate errors rather than fix them, robust estimators like RANSAC are extensively used for relative pose estimation, keypoint track construction and multi-view triangulation \\[ [46])\\].\n\n#### SfM revisited.\n\nThere has been a recent surge of methods aiming to simplify or even completely revisit the traditional SfM pipeline \\[ [64]), [62]), [9]), [50]), [20])\\].\nThe recently proposed FlowMap and Ace-Zero, for instance, both rely on the idea of training a regressor network at test time. In the case of FlowMap \\[ [50])\\], this network predicts depthmaps, while for Ace-Zero \\[ [9])\\] it regresses dense 3D scene coordinates.\nWhile this type of approach is appealing, it raises several problems such as scaling poorly and depending on many off-the-shelf components for FlowMap. Most importantly, both methods only apply to constrained settings where the input image collections offers enough uniformity and continuity in terms of viewpoints and illuminations.\nThis is because the regressor network is only able to propagate information incrementally from one image to other tightly similar images.\nAs a result, they cannot process unordered image collections with large viewpoint and illumination disparities.\nOn the other hand, VGGSfM, Detector-Free SfM (DF-SfM) and DUSt3R cast the SfM problem in a more traditional manner by relying on trained neural components that are kept frozen at optimization time.\nVGGSfM \\[ [62])\\], for its part, essentially manages to train end-to-end all components of the traditional SfM pipeline but still piggybacks itself onto handcrafted solvers for initializing keypoints, cameras and to triangulate 3D points.\nAs a result, it suffers from the same fundamental issues than traditional SfM, _e.g_. it struggles when there are few views or little camera motion.\nLikewise, DF-SfM \\[ [20])\\] improves for texture-less scenes thanks to relying on trainable dense pairwise matchers, but sticks to the overall COLMAP pipeline.\nFinally, DUSt3R \\[ [64])\\] is a foundation model for 3D vision that essentially decomposes SfM into two steps: local reconstruction for every image pair in the form of pointmaps, and global alignment of all pointmaps in world coordinates.\nWhile the optimization appears considerably simpler than for previous approaches ( _i.e_. not relying on external modules, and carried out by minimizing a global loss with first-order gradient descent), it unfortunately yields rather imprecise estimates and does not scale well.\nIts recent extension MASt3R \\[ [27])\\] adds pixel matching capabilities and improved pointmap regression, but does not address the SfM problem.\nIn this work, we fill this gap and present a fully-integrated SfM pipeline based on MASt3R that is both precise and scalable.\n\n#### Image Retrieval for SfM.\n\nSince matching is essentially considering pairs in traditional SfM, it has a quadratic complexity which becomes prohibitive for large image collections.\nSeveral SfM approaches have proposed to leverage faster, although less precise, image comparison techniques relying on comparing global image descriptors, _e.g_. AP-GeM \\[ [40])\\] for Kapture \\[ [21])\\] or by distilling NetVLAD \\[ [3])\\] for HLoc \\[ [44])\\].\nThe idea is to cascade image matching in two steps: first, a coarse but fast comparison is carried out between all pairs (usually by computing the similarity between global image descriptors), and for image pairs that are similar enough, a second stage of costly keypoint matching is then carried out.\nThis is arguably much faster and scalable.\nIn this paper, we adopt the same strategy, but instead of relying on an external off-the-shelf module, we show that we can simply exploit the frozen MASt3R’s encoder for this purpose, considering the token features as local features and directly performing efficient retrieval with Aggregated Selective Match Kernels (ASMK) \\[ [56])\\].\n\n![Refer to caption]\n\nFigure 2: Overview of the proposed MASt3R-SfM method.\nGiven an unconstrained image collections, possibly small (1 image) or large (>1000absent1000>1000 images), we start by computing a sparse scene graph using efficient image retrieval techniques given a frozen MASt3R’s per-image features.\nWe then compute local 3D reconstruction and matches for each edge using again a frozen MASt3R’s decoder.\nGlobal optimization proceeds with gradient descent of a matching loss in 3D space, followed by refinement in terms of 2D reprojection error.",
            "citations": null
          },
          "3 Preliminaries": {
            "content": "The proposed method builds on the recently introduced MASt3R model which, given two input images In,Im∈ℝH×W×3superscript𝐼𝑛superscript𝐼𝑚superscriptℝ𝐻𝑊3I^{n},I^{m}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3}, performs joint _local 3D reconstruction_ and _pixel-wise matching_\\[ [27])\\].\nWe assume here for simplicity that all images have the same pixel resolution W×H𝑊𝐻W\\\\times H, but of course they can differ in practice.\nIn the next section, we show how to leverage this powerful _local_ predictor for achieving large-scale _global_ 3D reconstruction.\n\nAt a high level, MASt3R can be viewed as a function f​(In,Im)≡Dec​(Enc​(In),Enc​(Im))𝑓superscript𝐼𝑛superscript𝐼𝑚DecEncsuperscript𝐼𝑛Encsuperscript𝐼𝑚f(I^{n},I^{m})\\\\equiv\\\\text{Dec}(\\\\text{Enc}(I^{n}),\\\\text{Enc}(I^{m})), where Enc​(I)→F→Enc𝐼𝐹\\\\text{Enc}(I)\\\\rightarrow F denotes the Siamese ViT encoder that represents image I𝐼I as a feature map of dimension d𝑑d, width w𝑤w and height hℎh, F∈ℝh×w×d𝐹superscriptℝℎ𝑤𝑑F\\\\in\\\\mathbb{R}^{h\\\\times w\\\\times d}, and Dec​(Fn,Fm)Decsuperscript𝐹𝑛superscript𝐹𝑚\\\\text{Dec}(F^{n},F^{m}) denotes twin ViT decoders that regresses pixel-wise pointmaps X𝑋X and local features D𝐷D for each image, as well as their respective corresponding confidence maps.\nThese outputs intrinsically contain rich geometric information from the scene, to the extent that camera intrinsics and (metric) depthmaps can straightforwardly be recovered from the pointmap, see \\[ [64])\\] for details.\nLikewise, we can recover sparse correspondences (or _matches_) by application of the fastNN algorithm described in \\[ [27])\\] with the regressed local feature maps Dn,Dmsuperscript𝐷𝑛superscript𝐷𝑚D^{n},D^{m}.\nMore specifically, the fast NN searches for a subset of reciprocal correspondences from two feature maps Dnsuperscript𝐷𝑛D^{n} and Dmsuperscript𝐷𝑚D^{m} by initializing seeds on a regular pixel grid and iteratively converging to mutual correspondences.\nWe denote these correspondences between Insuperscript𝐼𝑛I^{n} and Imsuperscript𝐼𝑚I^{m} as ℳn,m={ycn↔ycm}c=1..\\|ℳn,m\\|\\\\mathcal{M}^{n,m}=\\\\{y\\_{c}^{n}\\\\leftrightarrow y\\_{c}^{m}\\\\}\\_{c=1..\\|\\\\mathcal{M}^{n,m}\\|}, where ycn,ycm∈ℕ2superscriptsubscript𝑦𝑐𝑛superscriptsubscript𝑦𝑐𝑚superscriptℕ2y\\_{c}^{n},y\\_{c}^{m}\\\\in\\\\mathbb{N}^{2} denotes a pair of matching pixels.",
            "citations": null
          },
          "4 Proposed Method": {
            "content": "Given an unordered collection of N𝑁N images 𝒱={In}1≤n≤N𝒱subscriptsuperscript𝐼𝑛1𝑛𝑁\\\\mathcal{V}=\\\\{I^{n}\\\\}\\_{1\\\\leq n\\\\leq N} of a static 3D scene, captured with respective cameras 𝒦n=(Kn,Pn)subscript𝒦𝑛subscript𝐾𝑛subscript𝑃𝑛\\\\mathcal{K}\\_{n}=(K\\_{n},P\\_{n}),\nwhere Kn∈R3×3subscript𝐾𝑛superscript𝑅33K\\_{n}\\\\in R^{3\\\\times 3} denotes the intrinsic parameters ( _i.e_. calibration in term of focal length and principal point) and Pn∈R4×4subscript𝑃𝑛superscript𝑅44P\\_{n}\\\\in R^{4\\\\times 4} its world-to-camera pose,\nour goal is to recover all cameras parameters {𝒦n}subscript𝒦𝑛\\\\{\\\\mathcal{K}\\_{n}\\\\} as well as the underlying 3D scene geometry {Xn}superscript𝑋𝑛\\\\{X^{n}\\\\}, with Xn∈ℝW×H×3superscript𝑋𝑛superscriptℝ𝑊𝐻3X^{n}\\\\in\\\\mathbb{R}^{W\\\\times H\\\\times 3} a pointmap relating each pixel y=(i,j)∈ℕ2𝑦𝑖𝑗superscriptℕ2y=(i,j)\\\\in\\\\mathbb{N}^{2} from Insuperscript𝐼𝑛I^{n} to its corresponding 3D point Xi,jnsuperscriptsubscript𝑋𝑖𝑗𝑛X\\_{i,j}^{n} in the scene expressed in a world coordinate system.\n\n#### Overview.\n\nWe present a novel large-scale 3D reconstruction approach consisting of four steps outlined in [fig.2]In Image Retrieval for SfM. ‣ 2 Related Works ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\").\nFirst, we construct a co-visibility graph using efficient and scalable image retrieval techniques.\nEdges of this graph connect pairs of likely-overlapping images.\nSecond, we perform pairwise local 3D reconstruction and matching using MASt3R for each edge of this graph.\nThird, we coarsely align every local pointmap in the same world coordinate system using gradient descent with a matching loss in 3D space.\nThis serves as initialization for the fourth step, wherein we perform a second stage of global optimization, this time minimizing 2D pixel reprojection errors.\nWe detail each step below.\n\n### 4.1 Scene graph\n\nWe first aim at spatially relating scene objects seen under different viewpoints.\nTraditional SfM methods use efficient and scalable keypoint matching for that purpose, thereby building point tracks spanning multiple images.\nHowever, MASt3R is originally a pairwise image matcher, which has quadratic complexity in the number N𝑁N of images and therefore becomes infeasible for large collections if done naively.\n\n#### Sparse scene graph.\n\nInstead, we wish to only feed a small but sufficient subset of all possible pairs to MASt3R, which structure forms a scene graph 𝒢𝒢\\\\mathcal{G}.\nFormally, 𝒢=(𝒱,ℰ)𝒢𝒱ℰ\\\\mathcal{G}=(\\\\mathcal{V},\\\\mathcal{E}) is a graph where each vertex I∈𝒱𝐼𝒱I\\\\in\\\\mathcal{V} is an image, and each edge e=(n,m)∈ℰ𝑒𝑛𝑚ℰe=(n,m)\\\\in\\\\mathcal{E} is an undirected connection between two likely-overlapping images Insuperscript𝐼𝑛I^{n} and Imsuperscript𝐼𝑚I^{m}.\nImportantly, 𝒢𝒢\\\\mathcal{G} must have a single connected component, _i.e_. all images must (perhaps indirectly) be linked together.\n\n#### Image retrieval.\n\nTo select the right subset of pairs, we rely on a scalable pairwise image matcher h​(In,Im)↦smaps-toℎsuperscript𝐼𝑛superscript𝐼𝑚𝑠h(I^{n},I^{m})\\\\mapsto s, able to predict the approximate co-visibility score s∈\\[0,1\\]𝑠01s\\\\in\\[0,1\\] between two images Insuperscript𝐼𝑛I^{n} and Imsuperscript𝐼𝑚I^{m}.\nWhile any off-the-shelf image retriever can in theory do, we propose to leverage MASt3R’s encoder Enc​(⋅)Enc⋅\\\\text{Enc}(\\\\cdot).\nIndeed, our findings are that the encoder, due to its role of laying foundations for the decoder, is implicitly trained for image matching (see [section5.3]Retrieval with MASt3R. ‣ 5.3 Ablations ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\")).\nTo that aim, we adopt the ASMK (Aggregated Selective Match Kernels) image retrieval method \\[ [56])\\] considering the token features output by the encoder as local features.\nASMK has shown excellent performance for retrieval, especially without requiring any spatial verification.\nIn a nutshell, we consider the output F𝐹F of the encoder as a bag of local features, apply feature whitening, quantize them according to a codebook previously obtained by k-means clustering, then aggregate and binarize the residuals for each codebook element, thus yielding high-dimensional sparse binary representations.\nThe ASMK similarity between two image representations can be efficiently computed by summing a small kernel function on binary representations over the common codebook elements.\nNote that this method is training-free, only requiring to compute the whitening matrix and the codebook once from a representative set of features.\nWe have also try learning a small projector on top of the encoder features following the HOW approach \\[ [57])\\], but this leads to similar performances. We refer to the supplementary for more details.\nThe output from the retrieval step is a similarity matrix S∈\\[0,1\\]N×N𝑆superscript01𝑁𝑁S\\\\in\\[0,1\\]^{N\\\\times N}.\n\n#### Graph construction.\n\nTo get a small number of pairs while still ensuring a single connected component, we build the graph 𝒢𝒢\\\\mathcal{G} as follows.\nWe first select a fixed number Nasubscript𝑁𝑎N\\_{a} of _key images_ (or keyframes) using farthest point sampling (FPS) \\[ [16])\\] based on S𝑆S.\nThese keyframes constitute the core set of nodes and are densely connected together.\nAll remaining images are then connected to their closest keyframe as well as their k𝑘k nearest neighbors according to S𝑆S. Such a graph comprises O​(Na2+(k+1)​N)=O​(N)≪O​(N2)𝑂superscriptsubscript𝑁𝑎2𝑘1𝑁𝑂𝑁much-less-than𝑂superscript𝑁2O(N\\_{a}^{2}+(k+1)N)=O(N)\\\\ll O(N^{2}) edges, which is linear in the number of images N𝑁N.\nWe typically use Na=20subscript𝑁𝑎20N\\_{a}=20 and k=10𝑘10k=10.\nNote that, while the retrieval step has quadratic complexity in theory, it is extremely fast and scalable in practice, so we ignore it in and report quasi-linear complexity overall.\n\n### 4.2 Local reconstruction\n\nAs indicated in [section3]Preliminaries ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\"), we run the inference of MASt3R for every pair e=(n,m)∈ℰ𝑒𝑛𝑚ℰe=(n,m)\\\\in\\\\mathcal{E}, yielding raw pointmaps and sparse pixel matches ℳn,msuperscriptℳ𝑛𝑚\\\\mathcal{M}^{n,m}.\nSince MASt3R is order-dependent in terms of its input, we define ℳn,msuperscriptℳ𝑛𝑚\\\\mathcal{M}^{n,m} as the union of correspondences obtained by running both f​(In,Im)𝑓superscript𝐼𝑛superscript𝐼𝑚f(I^{n},I^{m}) and f​(Im,In)𝑓superscript𝐼𝑚superscript𝐼𝑛f(I^{m},I^{n}).\nDoing so, we also obtain pointmaps Xn,n,Xn,m,Xm,nsuperscript𝑋𝑛𝑛superscript𝑋𝑛𝑚superscript𝑋𝑚𝑛X^{n,n},X^{n,m},X^{m,n} and Xm,msuperscript𝑋𝑚𝑚X^{m,m}, where Xn,m∈ℝH×W×3superscript𝑋𝑛𝑚superscriptℝ𝐻𝑊3X^{n,m}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3} denotes a 2D-to-3D mapping from pixels of image Insuperscript𝐼𝑛I^{n} to 3D points in the coordinate system of image Imsuperscript𝐼𝑚I^{m}.\nSince the encoder features {Fn}n=1..N\\\\{F^{n}\\\\}\\_{n=1..N} have already been extracted and cached during scene graph construction ( [section4.1]Scene graph ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\")), we only need to run the ViT decoder Dec​()Dec\\\\text{Dec}(), which substantially saves time and compute.\n\n#### Canonical pointmaps.\n\nWe wish to estimate an initial depthmap 0​p​t​n0𝑝𝑡𝑛0pt{n} and camera intrinsics Knsubscript𝐾𝑛K\\_{n} for each image Insuperscript𝐼𝑛I^{n}.\nThese can be easily recovered from a raw pointmap Xn,nsuperscript𝑋𝑛𝑛X^{n,n} as demonstrated in \\[ [64])\\], but note that each pair (n,⋅)𝑛⋅(n,\\\\cdot) or (⋅,n)∈ℰ⋅𝑛ℰ(\\\\cdot,n)\\\\in\\\\mathcal{E} would yield its own estimate of Xn,nsuperscript𝑋𝑛𝑛X^{n,n}.\nTo average out regression imprecision, we hence aggregate these copycat pointmaps into a canonical pointmap X~nsuperscript~𝑋𝑛\\\\tilde{X}^{n}.\nLet ℰn={e\\|e∈ℰ∧n∈e}superscriptℰ𝑛conditional-set𝑒𝑒ℰ𝑛𝑒\\\\mathcal{E}^{n}=\\\\{e\\|e\\\\in\\\\mathcal{E}\\\\wedge n\\\\in e\\\\} be the set of all edges connected to image Insuperscript𝐼𝑛I^{n}.\nFor each edge e∈ℰn𝑒superscriptℰ𝑛e\\\\in\\\\mathcal{E}^{n}, we have a different estimate of Xn,nsuperscript𝑋𝑛𝑛X^{n,n} and its respective confidence maps Cn,nsuperscript𝐶𝑛𝑛C^{n,n}, which we will denote as Xn,esuperscript𝑋𝑛𝑒X^{n,e} and Cn,esuperscript𝐶𝑛𝑒C^{n,e} in the following.\nWe compute the canonical pointmap as a simple per-pixel weighted average of all estimates:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | X~i,jn=∑e∈ℰnCi,jn,e​Xi,jn,e∑e∈ℰnCi,jn,e.subscriptsuperscript~𝑋𝑛𝑖𝑗subscript𝑒superscriptℰ𝑛superscriptsubscript𝐶𝑖𝑗𝑛𝑒superscriptsubscript𝑋𝑖𝑗𝑛𝑒subscript𝑒superscriptℰ𝑛superscriptsubscript𝐶𝑖𝑗𝑛𝑒\\\\tilde{X}^{n}\\_{i,j}=\\\\frac{\\\\sum\\_{e\\\\in\\\\mathcal{E}^{n}}C\\_{i,j}^{n,e}X\\_{i,j}^{n,e}}{\\\\sum\\_{e\\\\in\\\\mathcal{E}^{n}}C\\_{i,j}^{n,e}}. |  | (1) |\n\nFrom it, we then recover the canonical depthmap Z~n=X~:,:,3nsuperscript~𝑍𝑛subscriptsuperscript~𝑋𝑛::3\\\\tilde{Z}^{n}=\\\\tilde{X}^{n}\\_{:,:,3} and the focal length using Weiszfeld algorithm \\[ [64])\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | f∗=arg​minf​∑i,j‖(i−W2,j−H2)−f​(X~i,j,1nX~i,j,3n,X~i,j,2nX~i,j,3n)‖,superscript𝑓subscriptargmin𝑓subscript𝑖𝑗norm𝑖𝑊2𝑗𝐻2𝑓subscriptsuperscript~𝑋𝑛𝑖𝑗1subscriptsuperscript~𝑋𝑛𝑖𝑗3subscriptsuperscript~𝑋𝑛𝑖𝑗2subscriptsuperscript~𝑋𝑛𝑖𝑗3f^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{f}\\\\sum\\_{i,j}\\\\left\\\\\\|\\\\left(i{-}\\\\frac{W}{2},j{-}\\\\frac{H}{2}\\\\right)-f\\\\left(\\\\frac{\\\\tilde{X}^{n}\\_{i,j,1}}{\\\\tilde{X}^{n}\\_{i,j,3}},\\\\frac{\\\\tilde{X}^{n}\\_{i,j,2}}{\\\\tilde{X}^{n}\\_{i,j,3}}\\\\right)\\\\right\\\\\\|, |  | (2) |\n\nwhich, assuming centered principal point and square pixels, yields the canonical intrinsics K~nsuperscript~𝐾𝑛\\\\tilde{K}^{n}.\nIn this work, we assume a pinhole camera model without lens distortion, but our approach could be extended to different camera types.\n\n#### Constrained pointmaps.\n\nCamera intrinsics K𝐾K, extrinsics P𝑃P and depthmaps 0​p​t0𝑝𝑡0pt{} will serve as basic ingredients (or rather, optimization variables) for the global reconstruction phase.\nLet πn:ℝ3↦ℝ2:subscript𝜋𝑛maps-tosuperscriptℝ3superscriptℝ2\\\\pi\\_{n}:\\\\mathbb{R}^{3}\\\\mapsto\\\\mathbb{R}^{2} denote the reprojection function onto the camera screen of Insuperscript𝐼𝑛I^{n}, _i.e_.πn​(x)=Kn​Pn​σn​xsubscript𝜋𝑛𝑥subscript𝐾𝑛subscript𝑃𝑛subscript𝜎𝑛𝑥\\\\pi\\_{n}(x)=K\\_{n}P\\_{n}\\\\sigma\\_{n}x for a 3D point x∈ℝ3𝑥superscriptℝ3x\\\\in\\\\mathbb{R}^{3} (σn>0subscript𝜎𝑛0\\\\sigma\\_{n}>0 is a per-camera scale factor, _i.e_. we use scaled rigid transformations).\nTo ensure that pointmaps perfectly satisfy the pinhole projective model (they are normally over-parameterized), we define a _constrained pointmap_ χn∈ℝH×W×3superscript𝜒𝑛superscriptℝ𝐻𝑊3\\\\chi^{n}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3} explicitly as a function of Kn,Pn,σnsubscript𝐾𝑛subscript𝑃𝑛subscript𝜎𝑛K\\_{n},P\\_{n},\\\\sigma\\_{n} and 0​p​t​n0𝑝𝑡𝑛0pt{n}.\nFormally, the 3D point χi,jnsubscriptsuperscript𝜒𝑛𝑖𝑗\\\\chi^{n}\\_{i,j} seen at pixel (i,j)𝑖𝑗(i,j) of image Insuperscript𝐼𝑛I^{n} is defined using inverse reprojection as χi,jn=πn−1​(σn,Kn,Pn,0​p​t​ni,j)=1/σn​Pn−1​Kn−1​0​p​t​ni,j​\\[i,j,1\\]⊤superscriptsubscript𝜒𝑖𝑗𝑛superscriptsubscript𝜋𝑛1subscript𝜎𝑛subscript𝐾𝑛subscript𝑃𝑛0𝑝𝑡subscript𝑛𝑖𝑗1subscript𝜎𝑛superscriptsubscript𝑃𝑛1superscriptsubscript𝐾𝑛10𝑝𝑡subscript𝑛𝑖𝑗superscript𝑖𝑗1top\\\\chi\\_{i,j}^{n}=\\\\pi\\_{n}^{-1}(\\\\sigma\\_{n},K\\_{n},P\\_{n},0pt{n}\\_{i,j})=\\\\nicefrac{{1}}{{\\\\sigma\\_{n}}}P\\_{n}^{-1}K\\_{n}^{-1}0pt{n}\\_{i,j}\\\\left\\[i,j,1\\\\right\\]^{\\\\top}.\n\n![Refer to caption]Figure 3: Factor graph for MASt3R-SfM.\nFree variables on the top row serve to construct the constrained pointmap χ𝜒\\\\chi, which follows the pinhole camera model by design and onto which the loss functions from [eqs.3]In 4.3 Coarse alignment ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") and [4]Equation 4 ‣ 4.4 Refinement ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") are defined.\n\n### 4.3 Coarse alignment\n\nRecently, DUSt3R \\[ [64])\\] introduced a global alignment procedure aiming to rigidly move dense pointmaps in a world coordinate system based on pairwise relationships between them.\nIn this work, we simplify and improve this procedure by taking advantage of pixel correspondences, thereby reducing the overall number of parameters and its memory and computational footprint.\n\nSpecifically, we look for the scaled rigid transformations σ∗,P∗superscript𝜎superscript𝑃\\\\sigma^{\\*},P^{\\*} of every canonical pointmaps χ=π−1​(σ,K~,P,Z~)𝜒superscript𝜋1𝜎~𝐾𝑃~𝑍\\\\chi=\\\\pi^{-1}(\\\\sigma,\\\\tilde{K},P,\\\\tilde{Z}) ( _i.e_. fixing intrinsics K=K~𝐾~𝐾K=\\\\tilde{K} and depth 0​p​t=Z~0𝑝𝑡~𝑍0pt{}=\\\\tilde{Z} to their canonical values) such that any pair of matching 3D points gets as close as possible:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | σ∗,P∗=arg​minσ,P​∑c∈ℳn,m(n,m)∈ℰqc​‖χcn−χcm‖λ1,superscript𝜎superscript𝑃subscriptargmin𝜎𝑃subscript𝑐superscriptℳ𝑛𝑚𝑛𝑚ℰsubscript𝑞𝑐superscriptnormsubscriptsuperscript𝜒𝑛𝑐subscriptsuperscript𝜒𝑚𝑐subscript𝜆1\\\\sigma^{\\*},P^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{\\\\sigma,P}\\\\sum\\_{\\\\begin{subarray}{c}c\\\\in\\\\mathcal{M}^{n,m}\\\\\\<br>(n,m)\\\\in\\\\mathcal{E}\\\\end{subarray}}q\\_{c}\\\\left\\\\\\|\\\\chi^{n}\\_{c}-\\\\chi^{m}\\_{c}\\\\right\\\\\\|^{\\\\lambda\\_{1}}, |  | (3) |\n\nwhere c𝑐c denotes the matching pixels in each respective image by a slight abuse of notation.\nIn contrast to the global alignment procedure in DUSt3R, this minimization only applies to sparse pixel correspondences ycn↔ycm↔superscriptsubscript𝑦𝑐𝑛superscriptsubscript𝑦𝑐𝑚y\\_{c}^{n}\\\\leftrightarrow y\\_{c}^{m} weighted by their respective confidence qcsubscript𝑞𝑐q\\_{c} (also output by MASt3R).\nTo avoid degenerate solutions, we enforce minn⁡σn=1subscript𝑛subscript𝜎𝑛1\\\\min\\_{n}\\\\sigma\\_{n}=1 by reparameterizing σn=σn′/(m​i​nn​σn′)subscript𝜎𝑛subscriptsuperscript𝜎′𝑛𝑚𝑖subscript𝑛𝑛subscriptsuperscript𝜎′𝑛\\\\sigma\\_{n}=\\\\sigma^{\\\\prime}\\_{n}/(min\\_{n}\\\\sigma^{\\\\prime}\\_{n}). We minimize this objective using Adam \\[ [24])\\] for a fixed number ν1subscript𝜈1\\\\nu\\_{1} of iterations.\n\n### 4.4 Refinement\n\nCoarse alignment converges well and fast in practice, but restricts itself to rigid motion of canonical pointmaps.\nUnfortunately, pointmaps are bound to be noisy due to depth ambiguities during local reconstruction.\nTo further refine cameras and scene geometry, we thus perform a second round of global optimization akin to bundle adjustment \\[ [59])\\] with gradient descent for ν2subscript𝜈2\\\\nu\\_{2} iterations and starting from the coarse solution σ∗,P∗superscript𝜎superscript𝑃\\\\sigma^{\\*},P^{\\*} obtained from [eq.3]In 4.3 Coarse alignment ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\").\nIn other words, we minimize the 2D reprojection error of 3D points in all cameras:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  |  | Z∗,K∗,P∗,σ∗=arg​minZ,K,P,σ⁡ℒ2, withformulae-sequencesuperscript𝑍superscript𝐾superscript𝑃superscript𝜎subscriptargmin𝑍𝐾𝑃𝜎subscriptℒ2 with\\\\displaystyle Z^{\\*},K^{\\*},P^{\\*},\\\\sigma^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{Z,K,P,\\\\sigma}\\\\mathcal{L}\\_{2},\\\\text{ with} |  | (4) |\n|  | ℒ2=subscriptℒ2absent\\\\displaystyle\\\\mathcal{L}\\_{2}= | ∑c∈ℳn,m(n,m)∈ℰqc​\\[ρ​(ycn−πn​(χcm))+ρ​(ycm−πm​(χcn))\\],subscript𝑐superscriptℳ𝑛𝑚𝑛𝑚ℰsubscript𝑞𝑐delimited-\\[\\]𝜌superscriptsubscript𝑦𝑐𝑛subscript𝜋𝑛superscriptsubscript𝜒𝑐𝑚𝜌superscriptsubscript𝑦𝑐𝑚subscript𝜋𝑚superscriptsubscript𝜒𝑐𝑛\\\\displaystyle\\\\sum\\_{\\\\begin{subarray}{c}c\\\\in\\\\mathcal{M}^{n,m}\\\\\\<br>(n,m)\\\\in\\\\mathcal{E}\\\\end{subarray}}q\\_{c}\\\\left\\[\\\\rho\\\\left(y\\_{c}^{n}-\\\\pi\\_{n}\\\\left(\\\\chi\\_{c}^{m}\\\\right)\\\\right)+\\\\rho\\\\left(y\\_{c}^{m}-\\\\pi\\_{m}\\\\left(\\\\chi\\_{c}^{n}\\\\right)\\\\right)\\\\right\\], |  |\n\nwith ρ:ℝ2↦ℝ+:𝜌maps-tosuperscriptℝ2superscriptℝ\\\\rho:\\\\mathbb{R}^{2}\\\\mapsto\\\\mathbb{R}^{+} a robust error function able to deal with potential outliers among all extracted correspondences.\nWe typically set ρ​(x)=‖x‖λ2𝜌𝑥superscriptnorm𝑥subscript𝜆2\\\\rho(x){=}\\\\left\\\\\\|x\\\\right\\\\\\|^{\\\\lambda\\_{2}} with 0<λ2≤10subscript𝜆210<\\\\lambda\\_{2}\\\\leq 1 ( _e.g_.λ2=0.5subscript𝜆20.5\\\\lambda\\_{2}{=}0.5).\n\n#### Forming pseudo-tracks.\n\nOptimizing [eq.4]In 4.4 Refinement ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") has little effect, because sparse pixel correspondences ℳm,nsuperscriptℳ𝑚𝑛\\\\mathcal{M}^{m,n} are rarely _exactly_ overlapping across several pairs.\nAs an illustration, two correspondences y⋅,⋅m↔yi,jn↔subscriptsuperscript𝑦𝑚⋅⋅subscriptsuperscript𝑦𝑛𝑖𝑗y^{m}\\_{\\\\cdot,\\\\cdot}\\\\leftrightarrow y^{n}\\_{i,j} and yi+1,jn↔y⋅,⋅l↔subscriptsuperscript𝑦𝑛𝑖1𝑗subscriptsuperscript𝑦𝑙⋅⋅y^{n}\\_{i+1,j}\\\\leftrightarrow y^{l}\\_{\\\\cdot,\\\\cdot} from image pairs (m,n)𝑚𝑛(m,n) and (n,l)𝑛𝑙(n,l) would independently optimize the two 3D points χi,jnsubscriptsuperscript𝜒𝑛𝑖𝑗\\\\chi^{n}\\_{i,j} and χi+1,jnsubscriptsuperscript𝜒𝑛𝑖1𝑗\\\\chi^{n}\\_{i+1,j}, possibly moving them very far apart despite this being very unlikely as (i,j)≃(i+1,j)similar-to-or-equals𝑖𝑗𝑖1𝑗(i,j)\\\\simeq(i+1,j).\nTraditional SfM methods resort to forming point tracks, which is relatively straightforward with keypoint-based matching \\[ [31]), [46]), [29]), [43]), [13])\\].\nWe propose instead to form pseudo-tracks by creating _anchor points_ and rigidly tying together every pixel with their closest anchor point.\nThis way, correspondences that do not overlap exactly are still both tied to the same anchor point with a high probability.\nFormally, we define anchor points with a regular pixel grid y˙∈ℝW/s×H/s×2˙𝑦superscriptℝ𝑊𝑠𝐻𝑠2\\\\dot{y}\\\\in\\\\mathbb{R}^{W/s\\\\times H/s\\\\times 2} spaced by δ𝛿\\\\delta pixels:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | y˙u,v=(u​δ+δ2,v​δ+δ2).subscript˙𝑦𝑢𝑣𝑢𝛿𝛿2𝑣𝛿𝛿2\\\\dot{y}\\_{u,v}=\\\\left(u\\\\delta+\\\\frac{\\\\delta}{2},v\\\\delta+\\\\frac{\\\\delta}{2}\\\\right). |  | (5) |\n\nWe then tie each pixel (i,j)𝑖𝑗(i,j) in Insuperscript𝐼𝑛I^{n} with its closest anchor y˙u,vsubscript˙𝑦𝑢𝑣\\\\dot{y}\\_{u,v} at coordinate (u,v)=(⌊i/δ⌋,⌊j/δ⌋)𝑢𝑣𝑖𝛿𝑗𝛿(u,v)=(\\\\left\\\\lfloor\\\\nicefrac{{i}}{{\\\\delta}}\\\\right\\\\rfloor,\\\\left\\\\lfloor\\\\nicefrac{{j}}{{\\\\delta}}\\\\right\\\\rfloor).\nConcretely, we simply index the depth value at pixel (i,j)𝑖𝑗(i,j) to the depth value Z˙u,vsubscript˙𝑍𝑢𝑣\\\\dot{Z}\\_{u,v} of its anchor point, _i.e_. we define 0pt=i,joi,jZ˙u,v0pt{}\\_{i,j}=o\\_{i,j}\\\\dot{Z}\\_{u,v} where oi,j=Z~i,j/Z~u,vsubscript𝑜𝑖𝑗subscript~𝑍𝑖𝑗subscript~𝑍𝑢𝑣o\\_{i,j}=\\\\tilde{Z}\\_{i,j}/\\\\tilde{Z}\\_{u,v} is a constant relative depth offset calculated at initialization from the canonical depthmap Z~~𝑍\\\\tilde{Z}.\nHere, we make the assumption that canonical depthmaps are locally accurate.\nAll in all, optimizing a depthmap 0​p​t​n∈ℝW×H0𝑝𝑡𝑛superscriptℝ𝑊𝐻0pt{n}\\\\in\\\\mathbb{R}^{W\\\\times H} thus only comes down to optimizing a reduced set of anchor depth values Z˙n∈ℝW/δ×H/δsuperscript˙𝑍𝑛superscriptℝ𝑊𝛿𝐻𝛿\\\\dot{Z}^{n}\\\\in\\\\mathbb{R}^{W/\\\\delta\\\\times H/\\\\delta} ( _e.g_. reduced by a factor of 64 if δ=8𝛿8\\\\delta=8).\n\n|     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Method | 25 views | 50 views | 100 views | 200 views | full |\n| ATE↓↓\\\\downarrow | Reg.↑↑\\\\uparrow | ATE↓↓\\\\downarrow | Reg.↑↑\\\\uparrow | ATE↓↓\\\\downarrow | Reg.↑↑\\\\uparrow | ATE↓↓\\\\downarrow | Reg.↑↑\\\\uparrow | ATE↓↓\\\\downarrow | Reg.↑↑\\\\uparrow |\n| COLMAP \\[ [46])\\] | 0.03840 | 44.4 | 0.02920 | 60.5 | 0.02640 | 85.7 | 0.01880 | 97.0 | - | - |\n| ACE-Zero \\[ [9])\\] | 0.11160 | 100.0 | 0.07130 | 100.0 | 0.03980 | 100.0 | 0.01870 | 100.0 | 0.01520 | 100.0 |\n| FlowMap \\[ [50])\\] | 0.10700 | 100.0 | 0.07310 | 100.0 | 0.04460 | 100.0 | 0.02420 | 100.0 | N/A | 66.7 |\n| VGGSfM \\[ [62])\\] | 0.05800 | 96.2 | 0.03460 | 98.7 | 0.02900 | 98.5 | N/A | 47.6 | N/A | 0.0 |\n| DF-SfM \\[ [20])\\] | 0.08110 | 99.4 | 0.04120 | 100.0 | 0.02710 | 99.9 | N/A | 33.3 | N/A | 76.2 |\n| MASt3R-SfM | 0.03360 | 100.0 | 0.02610 | 100.0 | 0.01680 | 100.0 | 0.01300 | 100.0 | 0.01060 | 100.0 |\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| Method | MIP-360 | LLFF | T&T | CO3Dv2 |\n| NoPE-NeRF \\[ [8])\\] | 0.04429 | 0.03920 | 0.03709 | 0.03648 |\n| DROID-SLAM \\[ [54])\\] | 0.00017 | 0.00074 | 0.00122 | 0.01728 |\n| FlowMap \\[ [50])\\] | 0.00055 | 0.00209 | 0.00124 | 0.01589 |\n| ACE-Zero \\[ [9])\\] | 0.00173 | 0.00396 | 0.00973 | 0.00520 |\n| MASt3R-SfM | 0.00079 | 0.00098 | 0.00215 | 0.00538 |\n\nTable 1: Results on Tanks&Temples in terms of ATE and overall registration rate (Reg.).\nFor easier readability, we color-code ATE results as a linear gradient between\nworstandbest\nATE for a given dataset or split; and Reg results with linear gradient between\n0%and100%. Left: impact of the number of input views, regularly sampled from the full set.\n‘N/A’ indicates that at least one scene did not converge.\nRight: ATE↓↓\\\\downarrow on different datasets with the arbitrary splits defined in FlowMap \\[ [50])\\].",
            "citations": null
          },
          "5 Experimental Results": {
            "content": "After presenting the datasets and metrics,\nwe extensively compare our approach with state-of-the-art SfM methods in diverse conditions. We finally present several ablations.\n\n### 5.1 Experimental setup\n\nWe use the publicly available MASt3R checkpoint for our experiments, which we do _not_ finetune unless otherwise mentioned.\nWhen building the sparse scene graph in [section4.1]Scene graph ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\"), we use Na=20subscript𝑁𝑎20N\\_{a}=20 anchor images and k=10𝑘10k=10 non-anchor nearest neighbors.\nWe use the same grid spacing of δ=8𝛿8\\\\delta=8 pixels for extracting sparse correspondences with FastNN ( [section4.2]Local reconstruction ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\")) and defining anchor points ( [section4.4]Refinement ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\")).\nFor the two gradient descents, we use the Adam optimizer \\[ [24])\\] with a learning rate of 0.070.070.07 (resp. 0.0140.0140.014) for ν1=300subscript𝜈1300\\\\nu\\_{1}=300 iterations and λ1=1.5subscript𝜆11.5\\\\lambda\\_{1}=1.5 (resp. ν2=300subscript𝜈2300\\\\nu\\_{2}=300 and λ2=0.5subscript𝜆20.5\\\\lambda\\_{2}=0.5) for the coarse (resp. refinement) optimization, each time with a cosine learning rate schedule and without weight decay.\nUnless otherwise mentioned we assume shared intrinsics and optimize a shared per-scene focal parameter for all cameras.\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Method | Co3Dv2↑↑\\\\uparrow |  | RealEstate10K↑↑\\\\uparrow |\n|  | RRA@15 | RTA@15 | mAA(30) |  | mAA(30) |\n| (a) | Colmap+SG \\[ [13]), [43])\\] | 36.1 | 27.3 | 25.3 |  | 45.2 |\n| PixSfM \\[ [29])\\] | 33.7 | 32.9 | 30.1 |  | 49.4 |\n| RelPose \\[ [68])\\] | 57.1 | - | - |  | - |\n| PosReg \\[ [61])\\] | 53.2 | 49.1 | 45.0 |  | - |\n| PoseDiff  \\[ [61])\\] | 80.5 | 79.8 | 66.5 |  | 48.0 |\n| RelPose++ \\[ [28])\\] | (85.5) | - | - |  | - |\n| RayDiff \\[ [69])\\] | (93.3) | - | - |  | - |\n| DUSt3R-GA \\[ [64])\\] | 96.2 | 86.8 | 76.7 |  | 67.7 |\n|  | MASt3R-SfM | 96.0 | 93.1 | 88.0 |  | 86.8 |\n| (b) | DUSt3R \\[ [64])\\] | 94.3 | 88.4 | 77.2 |  | 61.2 |\n| MASt3R \\[ [27])\\] | 94.6 | 91.9 | 81.8 |  | 76.4 |\n\nTable 2: Multi-view pose regression on CO3Dv2 \\[ [39])\\] and\nRealEstate10K \\[ [70])\\] with 10 random frames.\nParenthesis () denote methods that do not report results on the 10 views set, we report their best for comparison (8 views).\nWe distinguish between (a) multi-view and (b) pairwise methods.\n\n#### Datasets.\n\nTo showcase the robustness of our approach, we experiment in different conditions representative of diverse experimental setups (video or unordered image collections, simple or complex scenes, outdoor, indoor or object-centric, _etc_.).\nNamely, we employ\nTanks&Temples \\[ [25])\\] (T&T), a 3D reconstruction dataset comprising 21 scenes ranging from 151 to 1106 images;\nETH3D \\[ [49])\\], a multi-view stereo dataset with 13 scenes for which ground-truth is available;\nCO3Dv2 \\[ [39])\\], an object-centric dataset for multi-view pose estimation;\nand RealEstate10k \\[ [70])\\], MIP-360 \\[ [6])\\] and LLFF \\[ [33])\\], three datasets for novel view synthesis.\n\n#### Evaluation metrics.\n\nFor simplicity, we evaluate all methods w.r.t. ground-truth cameras poses.\nFor Tanks&Temples where it is not provided, we make a pseudo ground-truth with COLMAP \\[ [46])\\] using all frames. Even though this is not perfect, COLMAP is known to be reliable in conditions where there is a large number of frames with high overlap.\nWe evaluate the average translation error (ATE) as in FlowMap \\[ [50])\\], _i.e_. we align estimated camera positions to ground-truth ones with Procrustes \\[ [32])\\] and report an average normalized error.\nWe ignore unregistered cameras when doing Procrustes, which favors methods that can reject hard images (such as COLMAP \\[ [46])\\] or VGGSfM \\[ [62])\\]). Note that our method always outputs a pose estimate for all cameras by design, thus negatively impacting our results with this metric.\nWe also report the relative rotation and translation accuracies (resp. RTA@τ𝜏\\\\tau and RRA@τ𝜏\\\\tau, where τ𝜏\\\\tau indicates the threshold in degrees), computed at the pairwise level and averaged over all image pairs \\[ [61])\\].\nSimilarly, the mean Average Accuracy (mAA)@τ𝜏\\\\tau is defined as the area under the curve of the angular differences at min(RRA@τ𝜏\\\\tau, RTA@τ𝜏\\\\tau).\nFinally, we report the successful registration rate as a percentage, denoted as Reg.\nWhen reported at the dataset level, metrics are averaged over all scenes.\n\n### 5.2 Comparison with the state of the art\n\nWe first evaluate the impact of the amount of overlap between images on the quality of the SfM output for different state-of-the-art methods.\nTo that aim, we choose Tanks&Temple, a standard reconstruction dataset captured with high overlap (originally video frames).\nWe form new splits by regularly subsampling the original images for 25, 50, 100 and 200 frames.\nFollowing \\[ [50])\\], we report results in terms of Average Translation Error (ATE) against the COLMAP pseudo ground-truth in [table1]In Forming pseudo-tracks. ‣ 4.4 Refinement ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") (left), computed from the full set of frames and likewise further subsampled.\nMASt3R-SfM provides nearly constant performance for all ranges, significantly outperforming COLMAP, Ace-Zero, FlowMap and VGGSfM in all settings.\nUnsurprisingly, the performance of these methods strongly degrades in small-scale settings (or does not even converge on some scenes for COLMAP).\nOn the other hand, we note that FlowMap and VGGSfM crash when dealing with large collections due to insufficient memory despite using 80GB GPUs.\n\n#### FlowMap splits.\n\nWe also report results on the custom splits from the FlowMap paper \\[ [50])\\], which concerns 3 additional datasets beyond T&T (LLFF, Mip-360 and CO3Dv2).\nWe point out that, not only these splits select a _subset_ of scenes for each dataset (in details: 3 scenes from Mip-360, 7 from LLFF, 14 from T&T and 2 from CO3Dv2), they also select an _arbitrary subset_ of consecutive frames in the corresponding scenes. Results in [table1]In Forming pseudo-tracks. ‣ 4.4 Refinement ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") (right) show that our method is achieving better results than NopeNeRF and ACE-Zero, on par with FlowMap overall and slightly worse than DROID-SLAM \\[ [54])\\], a method that can only work in video settings.\nSince we largely outperform FlowMap when using regularly sampled splits, we hypothesize that FlowMap is very sensitive to the input setting.\n\n#### Multi-view pose estimation.\n\nIn [fig.1]In 1 Introduction ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") (top), we also compare to various baselines on CO3Dv2 and RealEstate10K, varying the number of input images by random sampling.\nWe follow the PoseDiffusion \\[ [61])\\] splits and protocol for comparison purposes.\nWe provide detailed comparisons in [table2]In 5.1 Experimental setup ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") with state-of-the-art multi-view pose estimation methods, whose goal is only to recover cameras poses but not the scene geometry.\nAgain, our approach compares favorably to existing methods, particularly when the number of input images is low.\nOverall, this highlights that MASt3R-SfM is extremely robust to sparse view setups, with its performance not degrading when decreasing the number of views, even for as little as three views.\n\n|     |     |     |     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Scenes | COLMAP \\[ [46])\\] | ACE-Zero \\[ [9])\\] | FlowMap \\[ [50])\\] | VGGSfM \\[ [62])\\] | DF-SfM \\[ [20])\\] | MASt3R-SfM |\n| RRA@5 | RTA@5 | RRA@5 | RTA@5 | RRA@5 | RTA@5 | RRA@5 | RTA@5 | RRA@5 | RTA@5 | RRA@5 | RTA@5 |\n| courtyard | 56.3 | 60.0 | 4.0 | 1.9 | 7.5 | 3.6 | 50.5 | 51.2 | 80.7 | 74.8 | 89.8 | 64.4 |\n| delivery area | 34.0 | 28.1 | 27.4 | 1.9 | 29.4 | 23.8 | 22.0 | 19.6 | 82.5 | 82.0 | 83.1 | 81.8 |\n| electro | 53.3 | 48.5 | 16.9 | 7.9 | 2.5 | 1.2 | 79.9 | 58.6 | 82.8 | 81.2 | 100.0 | 95.5 |\n| facade | 92.2 | 90.0 | 74.5 | 64.1 | 15.7 | 16.8 | 57.5 | 48.7 | 80.9 | 82.6 | 74.3 | 75.3 |\n| kicker | 87.3 | 86.2 | 26.2 | 16.8 | 1.5 | 1.5 | 100.0 | 97.8 | 93.5 | 91.0 | 100.0 | 100.0 |\n| meadow | 0.9 | 0.9 | 3.8 | 0.9 | 3.8 | 2.9 | 100.0 | 96.2 | 56.2 | 58.1 | 58.1 | 58.1 |\n| office | 36.9 | 32.3 | 0.9 | 0.0 | 0.9 | 1.5 | 64.9 | 42.1 | 71.1 | 54.5 | 100.0 | 98.5 |\n| pipes | 30.8 | 28.6 | 9.9 | 1.1 | 6.6 | 12.1 | 100.0 | 97.8 | 72.5 | 61.5 | 100.0 | 100.0 |\n| playground | 17.2 | 18.1 | 3.8 | 2.6 | 2.6 | 2.8 | 37.3 | 40.8 | 70.5 | 70.1 | 100.0 | 93.6 |\n| relief | 16.8 | 16.8 | 16.8 | 17.0 | 6.9 | 7.7 | 59.6 | 57.9 | 32.9 | 32.9 | 34.2 | 40.2 |\n| relief 2 | 11.8 | 11.8 | 7.3 | 5.6 | 8.4 | 2.8 | 69.9 | 70.3 | 40.9 | 39.1 | 57.4 | 76.1 |\n| terrace | 100.0 | 100.0 | 5.5 | 2.0 | 33.2 | 24.1 | 38.7 | 29.6 | 100.0 | 99.6 | 100.0 | 100.0 |\n| terrains | 100.0 | 99.5 | 15.8 | 4.5 | 12.3 | 13.8 | 70.4 | 54.9 | 100.0 | 91.9 | 58.2 | 52.5 |\n| Average | 49.0 | 47.8 | 16.4 | 9.7 | 10.1 | 8.8 | 65.4 | 58.9 | 74.2 | 70.7 | 81.2 | 79.7 |\n\nTable 3: Detailed per-scene translation and rotation accuracies (↑↑\\\\uparrow) on ETH-3D.\nFor clarity, we color-code results with a linear gradient between the\nworstandbest\nresult for a given scene.\n\n#### Unordered collections.\n\nWe note that benchmarks in previous experiments were originally acquired using video cameras, and then subsampled into frames.\nThis might introduce biases that may not well represent the general case of unconstrained SfM.\nWe thus experiment on the ETH3D dataset, a photograph dataset, composed of 13 scenes with up to to 76 images per scene.\nResults reported in [table3]In Multi-view pose estimation. ‣ 5.2 Comparison with the state of the art ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\") shows that MASt3R-SfM outperforms all competing approaches by a large margin on average.\nThis is not surprising, as neither ACE-Zero nor FlowMap can handle non-video setups.\nThe fact that COLMAP and VGGSfM also perform relatively poorly indicates a high sensitivity to not having highly overlapping images, meaning that in the end these methods cannot really handle truly unconstrained collections, in spite of some opposite claims \\[ [62])\\].\n\n### 5.3 Ablations\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Scene Graph | ATE↓↓\\\\downarrow | RTA@5↑↑\\\\uparrow | RRA@5↑↑\\\\uparrow | #Pairs | GPU MEM | Avg. T |\n| Complete | 0.01256 | 75.9 | 74.8 | 39,800 | 29.9 GB | 2.2 h |\n| Local window | 0.02509 | 33.1 | 28.8 | 2,744 | 7.6 GB | 14.1 min |\n| Random | 0.01558 | 55.2 | 48.8 | 2,754 | 6.9 GB | 14.7 min |\n| Retrieval | 0.01243 | 70.9 | 67.6 | 2,758 | 8.4 GB | 14.3 min |\n\nTable 4: Ablation of scene graph construction on Tanks&Temples (200 view subset). See text for details.\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| Ablation | ATE↓↓\\\\downarrow | RTA@5↑↑\\\\uparrow | RRA@5↑↑\\\\uparrow | #Pairs |\n| Retrieval | kNN | 0.01440 | 64.1 | 61.9 | 3,042 |\n| Keyframes | 0.01722 | 58.1 | 57.1 | 740 |\n| Keyframes + kNN | 0.01243 | 70.9 | 67.6 | 2,758 |\n| Optimization level | Coarse | 0.01504 | 47.4 | 57.7 | 2,758 |\n| Fine (w/o depth) | 0.01315 | 67.3 | 66.9 | 2758 |\n| Fine | 0.01243 | 70.9 | 67.6 | 2,758 |\n| Intrinsics | Separate | 0.01329 | 66.9 | 64.2 | 2,758 |\n| Shared | 0.01243 | 70.9 | 67.6 | 2,758 |\n\nTable 5: Ablations on Tanks&Temples (200 view subset). See text for details.\n\nWe now study the impact of various design choices. All experiments are conducted on the Tanks&Temples dataset regularly subsampled for 200 views per scene.\n\n#### Scene graph.\n\nWe evaluate different construction strategies for the scene graph in [table4]In 5.3 Ablations ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\"): ‘complete’ means that we extract all pairs, ‘local window‘ is an heuristic for video-based collections that connects every frame with its neighboring frames, and ‘random’ means that we sample random pairs.\nExcept for the ‘complete’ case, we try to match the number of pairs used in the baseline retrieval strategy.\nSlightly better results are achieved with the complete graph, but it is about 10x slower than retrieval-based graph and no scalable in general.\nAssuming we use retrieval, we further ablate the scene graph building strategy from the similarity matrix in [table5]In 5.3 Ablations ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\").\nAs a reminder, it consists of building a small but complete graph of keyframes, and then connecting each image with the closest keyframe and with k𝑘k nearest non-keyframes.\nWe experiment with using only k-NN with an increased k=13𝑘13k=13 to compensate for the missing edges, denoted as ‘k-NN’, or to only use the keyframe graph ( _i.e_.k=0𝑘0k=0), denoted as ‘Keyframe’.\nOverall, we find that combining short-range (k𝑘k-NN) and long-range (keyframes) connections is important for reaching top performance.\n\n#### Retrieval with MASt3R.\n\nTo better assert the effectiveness of our image retrieval strategy alone, we conduct experiments for the task of retrieval-assisted visual localization.\nWe follow the protocol from \\[ [27])\\] and retrieve the top-k𝑘k posed images in the database for each query, extract 2D-3D corresponds and run RANSAC to obtain predicted camera poses.\nWe compare ASMK on MASt3R features to the off-the-shelf retrieval method FIRe \\[ [66])\\], also based on ASMK, on the Aachen-Day-Night \\[ [45])\\] and InLoc \\[ [53])\\] datasets.\nWe report standard visual localization accuracy metrics, _i.e_. the percentages of images successfully localized within error thresholds of (0.25m, 2°) / (0.5m, 5°) / (5m, 10°) and (0.25m, 2°) / (0.5m, 10°) / (1m, 10°) respectively.111 [https://www.visuallocalization.net/] in [table6]In Retrieval with MASt3R. ‣ 5.3 Ablations ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\").\nInterestingly, using frozen MASt3R features for retrieval performs on par with FIRE, a state-of-the-art method specifically trained for image retrieval and operating on multi-scale features (bottom row).\nOur method also reaches competitive performance compared to dedicated visual localization pipelines (top rows), even setting a new state of the art for InLoc.\nWe refer to the supplementary material for further comparisons.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| Method | Aachen-Day-Night↑↑\\\\uparrow | InLoc↑↑\\\\uparrow |\n| Day | Night | DUC1 | DUC2 |\n| Kapture \\[ [21])\\]+R2D2 \\[ [41])\\] | 91.3/97.0/99.5 | 78.5/91.6/100 | 41.4/60.1/73.7 | 47.3/67.2/73.3 |\n| SuperPoint \\[ [13])\\]+LightGlue \\[ [30])\\] | 90.2/96.0/99.4 | 77.0/91.1/100 | 49.0/68.2/79.3 | 55.0/74.8/79.4 |\n| LoFTR \\[ [52])\\] | 88.7/95.6/99.0 | 78.5/90.6/99.0 | 47.5/72.2/84.8 | 54.2/74.8/85.5 |\n| DKM \\[ [14])\\] | - | - | 51.5/75.3/86.9 | 63.4/82.4/87.8 |\n| MASt3R (FIRe top20) | 89.8/96.8/99.6 | 75.9/92.7/100 | 60.6/83.3/93.4 | 65.6/86.3/88.5 |\n| MASt3R (MASt3R-ASMK top20) | 88.7/94.9/98.2 | 77.5/90.6/97.9 | 58.1/82.8/94.4 | 69.5/90.8/92.4 |\n\nTable 6: Comparison of retrieval based on MASt3R features  using ASMK with the state-of-the-art FIRe method when localizing with MASt3R (bottom rows), as well as with other state-of-the-art visual localization methods (top rows).![Refer to caption]Figure 4: Pose accuracy (↑↑\\\\uparrow) on T&T-200 w.r.t. the number of iterations of the coarse and refinement stages (resp. ν1subscript𝜈1\\\\nu\\_{1} and ν2subscript𝜈2\\\\nu\\_{2}).\n\n#### Optimization level.\n\nWe also study the impact of the coarse optimization and refinement ( [table5]In 5.3 Ablations ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\")).\nAs expected, coarse optimization alone, which is somewhat comparable to the global alignment proposed in DUSt3R (except we are using sparse matches and less optimization variables), yields significantly less precise pose estimates.\nIn [fig.4]In Retrieval with MASt3R. ‣ 5.3 Ablations ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\"), we plot the pose accuracy as a function of the number of iterations during coarse optimization and refinement.\nAs expected, refinement, a strongly non-convex bundle-adjustment problem, cannot recover from a random initialization (ν1=0subscript𝜈10\\\\nu\\_{1}=0). Good enough poses are typically obtained after ν1≃250similar-to-or-equalssubscript𝜈1250\\\\nu\\_{1}\\\\simeq 250 iterations of coarse optimization, from which point refinement consistently improves.\nWe also try to perform the optimization without optimizing depth ( _i.e_. using frozen canonical depthmaps, which proves useful for purely rotational cases, denoted as ‘Fine without depth’ in [table5]In 5.3 Ablations ‣ 5 Experimental Results ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\")), in which case we observe a smaller impact on the performance, indicating the high-quality of canonical depthmaps output by MASt3R ( [section4.2]Local reconstruction ‣ 4 Proposed Method ‣ MASt3R-SfM: a Fully-Integrated Solution for Unconstrained Structure-from-Motion\")).\n\n#### Shared intrinsics.\n\nWe finally evaluate the impact of only optimizing one set of intrinsics for all views (‘shared’), which is small, indicating that our method is not sensitive to varying intrinsics.",
            "citations": null
          },
          "6 Conclusion": {
            "content": "We have introduced MASt3R-SfM, a comparatively simpler fully-integrated solution for unconstrained SfM.\nIn contrast with current existing SfM pipelines, it can handle very small image collections without apparent issues.\nThanks to the strong priors encoded in the underlying MASt3R foundation model upon which our approach is based, it can even deal with cases without motion, and does not rely at all on RANSAC, both features that are normally not possible with standard triangulation-based SfM.\n\nAppendix",
            "citations": null
          }
        },
        "abstract": "Structure-from-Motion (SfM), a task aiming at jointly recovering camera poses\nand 3D geometry of a scene given a set of images, remains a hard problem with\nstill many open challenges despite decades of significant progress. The\ntraditional solution for SfM consists of a complex pipeline of minimal solvers\nwhich tends to propagate errors and fails when images do not sufficiently\noverlap, have too little motion, etc. Recent methods have attempted to revisit\nthis paradigm, but we empirically show that they fall short of fixing these\ncore issues. In this paper, we propose instead to build upon a recently\nreleased foundation model for 3D vision that can robustly produce local 3D\nreconstructions and accurate matches. We introduce a low-memory approach to\naccurately align these local reconstructions in a global coordinate system. We\nfurther show that such foundation models can serve as efficient image\nretrievers without any overhead, reducing the overall complexity from quadratic\nto linear. Overall, our novel SfM pipeline is simple, scalable, fast and truly\nunconstrained, i.e. it can handle any collection of images, ordered or not.\nExtensive experiments on multiple benchmarks show that our method provides\nsteady performance across diverse settings, especially outperforming existing\nmethods in small- and medium-scale settings."
      },
      "bib.bib5": {
        "id": "bib.bib5",
        "citation": "Fan et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Instantsplat: Unbounded sparse-view pose-free gaussian splatting in 40 seconds.",
        "venue": "arXiv preprint arXiv:2403.20309",
        "pages": "",
        "url": "",
        "arxiv_id": "2403.20309",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Novel-view synthesis (NVS) has been a long standing goal in computer vision, involving rendering observations from unseen viewpoints of a scene based on a specific set of input images. Capturing viewpoints in a “casual” manner, especially with a limited number of shots (a.k.a. sparse-view) using a smartphone in an uncontrolled environment, is pivotal for scaling up 3D content creation, digital twin construction, and augmented reality applications.\n\nAlthough recent advancements \\[ [11]), [20]), [38]), [30])\\] have shown notable progress in sparse-view synthesis (SVS), a detailed analysis uncovers a significant challenge yet to be solved: The sparse input data collected does not sufficiently cover the scene, preventing Structure from Motion (SfM) pipelines like COLMAP \\[ [24])\\] from estimating accurate camera parameters.\nPrevious research in SVS \\[ [11]), [20])\\] typically assumes precise camera poses even in sparse-view scenarios by leveraging all dense views for pre-computation, an assumption that is rarely valid. On the other hand, another line of research explores pose-free settings using techniques such as Neural Radiance Field (NeRF) or 3D Gaussian Splatting (3D-GS), exemplified by Nope-NeRF \\[ [5])\\] and CF-3DGS \\[ [10])\\]. These approaches presume dense data coverage (often from video sequences), an assumption that may not be viable in “casual” scenarios. Additionally, all previous methods assume known camera intrinsics prior to the reconstruction stage, adding an extra layer of complexity in real-world applications where such information may not be readily available.\n\nIn this paper, we introduce a holistic solution to unconstrained sparse-view synthesis that obviates the need for pre-computed camera intrinsics and extrinsics. We present InstantSplat, a framework that unifies the explicit 3D Gaussian representation with pose priors obtained from an end-to-end dense stereo model—DUSt3R \\[ [31])\\]. DUEs3R facilitates the acquisition of initial scene geometry from predicted and globally aligned point maps of sparse views and enables efficient camera information and pose retrieval.\nFollowing this, 3D Gaussians are established atop the globally aligned yet coarse geometry, promoting the concurrent optimization of 3D Gaussian attributes and camera parameters. By imposing additional constraints on camera parameters and merely adjusting Gaussian attributes—eschewing complex adaptive density control—the reconstruction process for large-scale scenes can be completed in under _one minute_ on a modern GPU (Nvidia A100).\nOur experiments are conducted on two large-scale outdoor datasets: Tanks & Temples \\[ [14])\\] and MVImgNet \\[ [40])\\], featuring sampled sparse views. Our evaluations, focusing on view synthesis quality and camera pose accuracy, demonstrate that our method remarkably surpasses previous pose-free methods. Notably, InstantSplat increases the SSIM from 0.68 to 0.89, a 32% improvement, and reduces the ATE from 0.055 to 0.011, while significantly accelerating the optimization (from ∼similar-to\\\\sim2 hours to approximately 1 minute) than Nope-NeRF \\[ [5])\\].",
            "citations": null
          },
          "2 Related Works": {
            "content": "#### 3D Representations for NVS.\n\nNovel view synthesis aims to generate unseen views of an object or scene from a given set of images \\[ [1]), [18])\\]. Neural Radiance Fields (NeRF)\\[ [19])\\], one of the most prominent methods in recent years, employs Multilayer Perceptrons (MLPs) to represent 3D scenes, taking the directions and positions of 3D points as input and employing volume rendering for image synthesis. Despite its popularity, NeRF faces challenges in terms of speed during both training and inference phases. Subsequent enhancements primarily focus on either enhancing quality\\[ [2]), [3]), [4])\\] or improving efficiency \\[ [21]), [25]), [27]), [26])\\], with few achieving both.\nRecent advancements in unstructured radiance fields\\[ [7]), [13]), [37])\\] introduce a set of primitives to represent scenes. Notably, 3D Gaussian Splatting\\[ [13])\\] uses anisotropic 3D Gaussians \\[ [43])\\] to depict radiance fields, coupled with differentiable splatting for rendering. This method has shown considerable success in rapidly reconstructing complex real-world scenes with high quality, particularly excelling in capturing high-frequency details.\n\n#### Unconstraint Novel View Synthesis.\n\nNeural radiance fields (NeRFs) or 3D Gaussian Splatting traditionally require over a hundred images as input and utilize preprocessing software, such as COLMAP \\[ [24])\\], to compute camera intrinsics and extrinsics. The dense coverage of the capture images is essential for reconstructing the details of a 3D scene but significantly limits practical applications. To address the challenge of the requisite number of views, various studies have introduced different regularization techniques to optimize the radiance fields. For instance, Depth-NeRF \\[ [9])\\] employs additional depth supervision to enhance rendering quality. RegNeRF \\[ [20])\\] introduces a depth smoothness loss for geometric regularization, aiding in stabilizing training. DietNeRF \\[ [11])\\] and SinNeRF \\[ [36])\\] leverages supervision in the CLIP/DINO-ViT embedding space \\[ [23]), [6])\\] to constrain the rendering of unseen views. PixelNeRF \\[ [39])\\] utilizes a convolutional encoder to gather context information, enabling the prediction of 3D representations from sparse inputs. More recent efforts, like FreeNeRF \\[ [38])\\], introduce a dynamic frequency control module for few-shot NeRF, while SparseNeRF \\[ [30])\\] presents a novel spatial continuity loss that leverages monocular depth estimators to enhance spatial coherence. Concurrently, ReconFusion \\[ [34])\\], FSGS \\[ [42])\\], and SparseGS \\[ [35])\\] employ monocular depth estimators or diffusion models with additional synthesized views for optimizing 3D representations. However, these methods require known ground-truth camera poses, a challenging prerequisite as the commonly used Structure-from-Motion (SfM) algorithms often fail with sparse inputs due to insufficient image correspondences. Another line of research focuses on pose-independent 3D optimization. NeRFmm \\[ [33])\\] simultaneously optimizes camera intrinsics, extrinsics, and NeRF training. BARF \\[ [16])\\] introduces a coarse-to-fine strategy for encoding camera poses and joint NeRF optimization. SCNeRF \\[ [12])\\] adds camera distortion parameterization and employs geometric loss for ray regularization. Similarly, GARF \\[ [12])\\] demonstrates that Gaussian-MLPs facilitate more straightforward and accurate joint optimization of pose and scene. SPARF \\[ [28])\\] adds Gaussian noise to simulate noisy camera poses. Recent works, such as Nope-NeRF \\[ [5])\\], Lu-NeRF \\[ [8])\\], LocalRF \\[ [17])\\] and CF-3DGS \\[ [10])\\], leverage depth information to constrain NeRF or 3DGS optimization, yet these pose-independent approaches generally presume the input are  dense video sequences with known camera intrinsics, which are not always viable in practical cases.\n\nConsidering the aforementioned factors, particularly in the context of sparse-view conditions, it becomes imperative for research to progress toward situations where camera poses and intrinsics are unknown. Commonly, under such sparse conditions, the COLMAP software tends to be unreliable to produce camera poses and register all the input images. This necessitates a different approach: optimizing a 3D representation with sparse input views where both camera poses and intrinsics are unknown, compelling a paradigm shift in research to address these uncertainties.\n\n#### Effective Priors for View Synthesis.\n\nCurrent methodologies often depend on offline software (COLMAP) to precompute camera poses, which also yields a sparse point cloud as a byproduct. Depth-NeRF \\[ [9])\\] and 3D-GS \\[ [13])\\] advocate for leveraging this point cloud as a form of effective supervision and as initial conditions for optimization. To address the lack of camera poses or dense camera views, the integration of monocular depth priors is extensively employed in 3D optimization efforts \\[ [5]), [10]), [30]), [42]), [35])\\]. Additionally, image matching techniques have been investigated to identify additional cross-view pixel correspondences, facilitating the training process \\[ [28]), [15])\\].\n\nWhile these methods are beneficial, the approach of pre-computing camera extrinsics from densely sampled viewpoints and employing near-perfect camera poses for initialization is not always viable in practical sparse-view scenarios. In response, we introduce a unified framework that incorporates explicit point-based representations alongside the cutting-edge end-to-end dense stereo network, DUSt3R \\[ [31])\\]. This approach eliminates the need for sparse-view camera pose estimation and the presumption that camera poses are unknown beforehand. By initializing the scene geometry through inferences made by the stereo model, —which is markedly faster than COLMAP—we can deduce camera poses and intrinsics from the established point cloud, thereby facilitating the training of 3D-GS.",
            "citations": null
          },
          "3 Preliminary": {
            "content": "![Refer to caption]Figure 2: Overall Framework of InstantSplat. Starting with sparse, unposed images, the Coarse Geometric Initialization (left) rapidly predicts global aligned point clouds and initializes poses (20.6 seconds). Subsequently, the Fast 3D-Gaussian Optimization (right) leverages this robust initialization to conduct streamlined optimizations of 3D Gaussians and camera parameters (16.67 seconds).\n\n### 3.1 3D Gaussian Splatting\n\n3D Gaussian Splatting (3D-GS) \\[ [13])\\] is an explicit 3D scene representation utilizing a set of 3D Gaussians to model the scene. A 3D Gaussian is parameterized by a mean vector 𝒙∈3\\\\boldsymbol{x}\\\\in{}^{3} and a covariance matrix Σ∈3×3\\\\Sigma\\\\in{}^{3\\\\times 3}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | G​(𝒑)=1(2​π)3/2​\\|Σ\\|1/2​e−12​(𝒑−𝒙)T​Σ−1​(𝒑−𝝁)𝐺𝒑1superscript2𝜋32superscriptΣ12superscript𝑒12superscript𝒑𝒙𝑇superscriptΣ1𝒑𝝁G(\\\\boldsymbol{p})=\\\\frac{1}{\\\\left(2\\\\pi\\\\right)^{3/2}\\\\left\\|\\\\Sigma\\\\right\\|^{1/2}}e^{-\\\\frac{1}{2}{\\\\left(\\\\boldsymbol{p}-\\\\boldsymbol{x}\\\\right)}^{T}\\\\Sigma^{-1}\\\\left(\\\\boldsymbol{p}-\\\\boldsymbol{\\\\mu}\\\\right)} |  | (1) |\n\nTo represent the view-direction-dependent, spherical harmonic (SH) coefficients are attached to each Gaussian, and the color is computed via 𝒄​(𝒅)=∑i=1n𝒄i​ℬi​(𝒅)𝒄𝒅superscriptsubscript𝑖1𝑛subscript𝒄𝑖subscriptℬ𝑖𝒅\\\\boldsymbol{c}\\\\left(\\\\boldsymbol{d}\\\\right)=\\\\sum\\_{i=1}^{n}{\\\\boldsymbol{c}}\\_{i}\\\\mathcal{B}\\_{i}\\\\left(\\\\boldsymbol{d}\\\\right), where ℬisubscriptℬ𝑖\\\\mathcal{B}\\_{i} is the ithsuperscript𝑖thi^{\\\\rm{th}} SH basis. And the color is rendered via 𝒄=∑i=1n𝒄i​αi​∏j=1i−1(1−αj)𝒄superscriptsubscript𝑖1𝑛subscript𝒄𝑖subscript𝛼𝑖superscriptsubscriptproduct𝑗1𝑖11subscript𝛼𝑗\\\\boldsymbol{c}=\\\\sum\\_{i=1}^{n}\\\\boldsymbol{c}\\_{i}\\\\alpha\\_{i}\\\\prod\\_{j=1}^{i-1}(1-\\\\alpha\\_{j}),\n\nwhere 𝒄isubscript𝒄𝑖\\\\boldsymbol{c}\\_{i} is the color computed from the SH coefficients of the ithsuperscript𝑖thi^{\\\\rm{th}} Gaussian. αisubscript𝛼𝑖\\\\alpha\\_{i} is given by evaluating a 2D Gaussian with covariance multiplied by a learned per-Gaussian opacity.\nThe 2D covariance matrix is calculated by projecting the 3D covariance to the camera coordinates. The 3D covariance matrix is decomposed into a scaling matrix and a rotation matrix and are optimized as Gaussian attributes.\n\nIn summary, 3D-GS uses a set of 3D Gaussians {𝑺i\\|i=1,2,…,n}conditional-setsubscript𝑺𝑖𝑖12…𝑛\\\\left\\\\{\\\\boldsymbol{S}\\_{i}\\|i=1,2,...,n\\\\right\\\\} to represent and render a scene, where each 3D Gaussian 𝑺𝑺\\\\boldsymbol{S} is characterized by: position 𝒙∈3\\\\boldsymbol{x}\\\\in{}^{3}, a series of SH coefficients {𝒄i∈\\|3i=1,2,…,n}\\\\left\\\\{\\\\boldsymbol{c}\\_{i}\\\\in{}^{3}\\|i=1,2,...,n\\\\right\\\\}, opacity α∈𝛼absent\\\\alpha\\\\in\\\\real, rotation 𝒒∈ℍ𝒒ℍ\\\\boldsymbol{q}\\\\in\\\\mathbb{H} and scaling 𝒔∈3\\\\boldsymbol{s}\\\\in{}^{3}.\n\n### 3.2 End-to-end Dense Stereo Model: DUSt3R\n\nA traditional dense 3D reconstruction stereo pipeline is meticulously designed to transform stereo or multiple images into an intricate 3D model (e.g., depth map) of a scene. The process commences with the acquisition of input images, denoted as {(𝑰i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑰𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{I}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N}. Initially, Structure-from-Motion (SfM) techniques are employed to ascertain the camera extrinsics {𝑻i∈ℝ3×4}i=1Nsuperscriptsubscriptsubscript𝑻𝑖superscriptℝ34𝑖1𝑁\\\\{\\\\boldsymbol{T}\\_{i}\\\\in\\\\mathbb{R}^{3\\\\times 4}\\\\}\\_{i=1}^{N} and intrinsics {𝑲i∈ℝ3×3}i=1Nsuperscriptsubscriptsubscript𝑲𝑖superscriptℝ33𝑖1𝑁\\\\{\\\\boldsymbol{K}\\_{i}\\\\in\\\\mathbb{R}^{3\\\\times 3}\\\\}\\_{i=1}^{N}. Utilizing COLMAP, feature detection, and extraction are performed for each image, predicated on the assumption that the images exhibit good texture, consistent illumination, and significant visual overlap. Subsequently, feature matching and geometric verification are conducted to establish robust correspondences across multiple image pairs. The process of incremental reconstruction involves registering high-confidence images, utilizing triangulation and bundle adjustment to refine camera extrinsics and generate a sparse point cloud of the scene. Dense reconstruction, particularly through Multi-View Stereo (MVS), is then applied to extract more detailed scene geometry, resulting in pixel-level depth maps for further applications.\n\nHowever, segmenting the contemporary SfM and MVS pipeline into a series of isolated minimal problems may introduce noise and escalate the complexity and engineering effort required for the pipeline’s holistic functionality. The new DUSt3R model \\[ [31])\\] aims to integrate the SfM and MVS processes, estimating point maps {(𝑷i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑷𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{P}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N} and confidence maps {(𝑶i∈ℝH×W)}i=1Nsuperscriptsubscriptsubscript𝑶𝑖superscriptℝ𝐻𝑊𝑖1𝑁\\\\{(\\\\boldsymbol{O}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W})\\\\}\\_{i=1}^{N} directly from uncalibrated and unposed cameras ({(𝑰i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑰𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{I}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N}). This end-to-end approach posits that each sub-problem should synergize within a singular framework, where dense reconstruction benefits from the sparse scene generated for camera pose recovery, and vice versa, thus fostering a more efficient and coherent 3D reconstruction process.\nSpecifically, the training objective of DUSt3R is based on regression of the unprojected and normalized point maps of two input views. Here, the ground-truth pointmaps from the datasets are as 𝑷^1,1subscript^𝑷11\\\\hat{\\\\boldsymbol{P}}\\_{1,1} and 𝑷^2,1subscript^𝑷21\\\\hat{\\\\boldsymbol{P}}\\_{2,1}, obtained from along with two corresponding views {1,2}12\\\\{1,2\\\\} where the camera origin as view 1, on which the ground-truth is defined.\nIn this context, the subscript {2,1}21\\\\{2,1\\\\} in 𝑷^2,1subscript^𝑷21\\\\hat{\\\\boldsymbol{P}}\\_{2,1} signifies that the origin of the coordinate system for view 2 is anchored at view 1.\nThe regression loss for training DUSt3R is as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ=‖1zi⋅𝑷v,1−1zi^⋅𝑷^v,1‖.ℒnorm⋅1subscript𝑧𝑖subscript𝑷𝑣1⋅1^subscript𝑧𝑖subscript^𝑷𝑣1\\\\mathcal{L}=\\\\left\\\\\\|\\\\frac{1}{z\\_{i}}\\\\cdot\\\\boldsymbol{P}\\_{v,1}-\\\\frac{1}{\\\\hat{z\\_{i}}}\\\\cdot\\\\hat{\\\\boldsymbol{P}}\\_{v,1}\\\\right\\\\\\|.\\\\vspace{-1mm} |  | (2) |\n\nwhere view v∈{1,2}𝑣12v\\\\in\\\\{1,2\\\\}, 𝑷𝑷\\\\boldsymbol{P} and 𝑷^^𝑷\\\\hat{\\\\boldsymbol{P}} are the prediction and ground-truth, separately.\nTo handle the scale ambiguity between prediction and ground-truth, DUSt3R normalizes the predicted and ground-truth pointmaps by scaling factors zi=norm​(𝑷1,1,𝑷2,1)subscript𝑧𝑖normsubscript𝑷11subscript𝑷21z\\_{i}=\\\\text{norm}(\\\\boldsymbol{P}\\_{1,1},\\\\boldsymbol{P}\\_{2,1}) and z^i=norm​(𝑷^1,1,𝑷^2,1)subscript^𝑧𝑖normsubscriptbold-^𝑷11subscriptbold-^𝑷21\\\\hat{z}\\_{i}=\\\\text{norm}(\\\\boldsymbol{\\\\hat{P}}\\_{1,1},\\\\boldsymbol{\\\\hat{P}}\\_{2,1}), respectively, which simply represent the average distance, noted as symbol 𝑫𝑫\\\\boldsymbol{D} of all valid points to the origin:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | norm​(𝑷1,1,𝑷2,1)=1\\|𝑫1\\|+\\|𝑫2\\|​∑v∈{1,2}∑i∈𝑫v‖𝑷vi‖.normsubscript𝑷11subscript𝑷211subscript𝑫1subscript𝑫2subscript𝑣12subscript𝑖subscript𝑫𝑣normsuperscriptsubscript𝑷𝑣𝑖\\\\text{norm}(\\\\boldsymbol{P}\\_{1,1},\\\\boldsymbol{P}\\_{2,1})=\\\\frac{1}{\\|\\\\boldsymbol{D}\\_{1}\\|+\\|\\\\boldsymbol{D}\\_{2}\\|}\\\\sum\\_{v\\\\in\\\\{1,2\\\\}}\\\\,\\\\sum\\_{i\\\\in\\\\boldsymbol{D}\\_{v}}\\\\left\\\\\\|\\\\boldsymbol{P}\\_{v}^{i}\\\\right\\\\\\|.\\\\vspace{-2mm} |  | (3) |",
            "citations": null
          },
          "4 Method": {
            "content": "#### Overview\n\nIn this section, we introduce a new pipeline that incorporates DUSt3R as a 3D prior model, providing globally aligned initial scene geometry for 3D Gaussians. This allows for the subsequent calculation of camera poses and intrinsics from the dense point maps, which are then jointly optimized with all other 3D Gaussian attributes. The supervision signals are derived backward from the photometric discrepancies between the rendered images via splatting and the ground-truth images.\nAn illustrative overview of our method is depicted in Fig. [2]Figure 2 ‣ 3 Preliminary ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\").\n\n### 4.1 Coarse Geometric Initialization\n\n3D dense prior network, DUSt3R, accepts only two images as input and generates per-pixel pointmap and confidence maps as outputs. A very efficient post-processing optimization can be leveraged to solve the per-view pixel-to-3D mapping and the incremental relative poses, which we will detail later.\n\n#### Recovering Camera Intrinsics.\n\nWe can have the 1:1 mapping from the pixel lattice to pointmap where we can build the mapping from 2D to the camera coordinate system. We can first solve the simple optimization based on Weiszfeld algorithm \\[ [22])\\] to calculate per-camera focal:\n\n|     |     |     |\n| --- | --- | --- |\n|  | f∗=arg​minf​∑i=0W∑j=0H𝑶i,j​‖(i′,j′)−f​(𝑷i,j,0,𝑷i,j,1)𝑷i,j,2‖,superscript𝑓subscriptargmin𝑓superscriptsubscript𝑖0𝑊superscriptsubscript𝑗0𝐻superscript𝑶𝑖𝑗normsuperscript𝑖′superscript𝑗′𝑓superscript𝑷𝑖𝑗0superscript𝑷𝑖𝑗1superscript𝑷𝑖𝑗2f^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{f}\\\\sum\\_{i=0}^{W}\\\\sum\\_{j=0}^{H}\\\\boldsymbol{O}^{i,j}\\\\left\\\\\\|(i^{\\\\prime},j^{\\\\prime})-f\\\\frac{(\\\\boldsymbol{P}^{i,j,0},\\\\boldsymbol{P}^{i,j,1})}{\\\\boldsymbol{P}^{i,j,2}}\\\\right\\\\\\|, |  |\n\nwhere i′=i−W2superscript𝑖′𝑖𝑊2i^{\\\\prime}=i-\\\\frac{W}{2} and j′=j−H2superscript𝑗′𝑗𝐻2j^{\\\\prime}=j-\\\\frac{H}{2} denote centered pixel indices. Assuming a single-camera setup akin to COLMAP’s methodology, we average the focal length calculations to obtain a robust estimate: f¯=1N​∑i=1Nfi∗¯𝑓1𝑁superscriptsubscript𝑖1𝑁superscriptsubscript𝑓𝑖\\\\bar{f}=\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}f\\_{i}^{\\*}.\nThe resulting f¯¯𝑓\\\\bar{f} represents the computed focal length that is utilized in subsequent processes.\n\n#### Pair-wise to Globally Aligned Poses.\n\nDUSt3R only takes image pairs as inputs where post-processing is required to align the scale if more than two captures are within the scene. The underlying reason is that the predicted point map are at the normalized scales within its own scale, and such misalignment of each independent calculated relative poses will leads to the scale variance thus, resulting in inaccurate camera poses.\nSimilar to DUSt3R we first construct a complete connectivity graph 𝒢​(𝒱,ℰ)𝒢𝒱ℰ\\\\mathcal{G}(\\\\mathcal{V},\\\\mathcal{E}) of all the N input views, where the vertices 𝒱𝒱\\\\mathcal{V} and each edge e=(n,m)∈ℰ𝑒𝑛𝑚ℰe=(n,m)\\\\in\\\\mathcal{E} indicate a shared visual content between images Insubscript𝐼𝑛I\\_{n} and Imsubscript𝐼𝑚I\\_{m}. To convert the initially predicted point map {(𝑷i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscript𝑷𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{P}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N} to be globally aligned one {(𝑷~i∈ℝH×W×3)}i=1Nsuperscriptsubscriptsubscriptbold-~𝑷𝑖superscriptℝ𝐻𝑊3𝑖1𝑁\\\\{(\\\\boldsymbol{\\\\tilde{P}}\\_{i}\\\\in\\\\mathbb{R}^{H\\\\times W\\\\times 3})\\\\}\\_{i=1}^{N}, we update the point maps, transformation matrix, and a scale factor:\nFor the complete graph, any image pair e=(n,m)∈ℰ𝑒𝑛𝑚ℰe=(n,m)\\\\in\\\\mathcal{E}, the point maps 𝑷n,nsubscript𝑷𝑛𝑛\\\\boldsymbol{P}\\_{n,n},𝑷m,nsubscript𝑷𝑚𝑛\\\\boldsymbol{P}\\_{m,n} and confidence maps 𝑶n,nsubscript𝑶𝑛𝑛\\\\boldsymbol{O}\\_{n,n},𝑶m,nsubscript𝑶𝑚𝑛\\\\boldsymbol{O}\\_{m,n}. For clarity, let us define 𝑷n,e:=𝑷n,nassignsubscript𝑷𝑛𝑒subscript𝑷𝑛𝑛\\\\boldsymbol{P}\\_{n,e}:=\\\\boldsymbol{P}\\_{n,n}, and 𝑷m,e:=𝑷m,nassignsubscript𝑷𝑚𝑒subscript𝑷𝑚𝑛\\\\boldsymbol{P}\\_{m,e}:=\\\\boldsymbol{P}\\_{m,n}, 𝑶n,e:=𝑶n,nassignsubscript𝑶𝑛𝑒subscript𝑶𝑛𝑛\\\\boldsymbol{O}\\_{n,e}:=\\\\boldsymbol{O}\\_{n,n}, and 𝑶m,e:=𝑶m,nassignsubscript𝑶𝑚𝑒subscript𝑶𝑚𝑛\\\\boldsymbol{O}\\_{m,e}:=\\\\boldsymbol{O}\\_{m,n}.\n\nThe optimization for the transformation matrix of edge e𝑒e (𝑻esubscript𝑻𝑒\\\\boldsymbol{T}\\_{e}), scaling factor σ𝜎\\\\sigma and point map 𝑷~~𝑷\\\\tilde{\\\\boldsymbol{P}} are via:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝑷~∗=arg​min𝑷~,𝑻,σ​∑e∈ℰ∑v∈e∑i=1H​W𝑶v,ei​‖𝑷~vi−σe​𝑻e​𝑷v,ei‖.superscript~𝑷subscriptargmin~𝑷𝑻𝜎subscript𝑒ℰsubscript𝑣𝑒superscriptsubscript𝑖1𝐻𝑊superscriptsubscript𝑶𝑣𝑒𝑖normsuperscriptsubscript~𝑷𝑣𝑖subscript𝜎𝑒subscript𝑻𝑒superscriptsubscript𝑷𝑣𝑒𝑖\\\\tilde{\\\\boldsymbol{P}}^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{\\\\tilde{\\\\boldsymbol{P}},\\\\boldsymbol{T},\\\\sigma}\\\\sum\\_{e\\\\in\\\\mathcal{E}}\\\\sum\\_{v\\\\in e}\\\\sum\\_{i=1}^{HW}\\\\boldsymbol{O}\\_{v,e}^{i}\\\\left\\\\\\|\\\\tilde{\\\\boldsymbol{P}}\\_{v}^{i}-\\\\sigma\\_{e}\\\\boldsymbol{T}\\_{e}\\\\boldsymbol{P}\\_{v,e}^{i}\\\\right\\\\\\|. |  | (4) |\n\nHere, we slightly abuse notation and write v∈e𝑣𝑒v\\\\in e for v∈{n,m}𝑣𝑛𝑚v\\\\in\\\\{n,m\\\\} if e=(n,m)𝑒𝑛𝑚e=(n,m).\nThe idea is that, for a given pair e𝑒e, the same rigid transformation 𝑻esubscript𝑻𝑒\\\\boldsymbol{T}\\_{e} should align both pointmaps 𝑷n,esubscript𝑷𝑛𝑒\\\\boldsymbol{P}\\_{n,e} and 𝑷m,esubscript𝑷𝑚𝑒\\\\boldsymbol{P}\\_{m,e} with the world-coordinate pointmaps 𝑷~n,esubscript~𝑷𝑛𝑒\\\\tilde{\\\\boldsymbol{P}}\\_{n,e} and 𝑷~m,esubscript~𝑷𝑚𝑒\\\\tilde{\\\\boldsymbol{P}}\\_{m,e},\nsince 𝑷n,esubscript𝑷𝑛𝑒\\\\boldsymbol{P}\\_{n,e} and 𝑷m,esubscript𝑷𝑚𝑒\\\\boldsymbol{P}\\_{m,e} are by definition both expressed in the same coordinate frame.\nTo avoid the trivial optimum where σe=0,∀e∈ℰformulae-sequencesubscript𝜎𝑒0for-all𝑒ℰ\\\\sigma\\_{e}=0,\\\\,\\\\forall e\\\\in\\\\mathcal{E}, we also enforce that ∏eσe=1subscriptproduct𝑒subscript𝜎𝑒1\\\\prod\\_{e}\\\\sigma\\_{e}=1.\nThe benefits of the post-processing to yield a globally aligned point cloud lies is its efficiency where inferencing per-view point and confidence maps can be real-time on a modern GPU, and the post-processing for a few images requires only seconds.\n\n![Refer to caption]Figure 3: Visual Comparisons. We conducted a comparative analysis between InstantSplat and various baseline methodologies. It was noted that InstantSplat adeptly preserves a majority of the scene details, avoiding the artifacts typically induced by inaccurately estimated camera poses, a common issue in CF-3DGS \\[ [10])\\]. Moreover, our streamlined framework negates the necessity for strong regularization during training, unlike Nope-NeRF, thereby yielding sharper image details. Additionally, NeRFmm is prone to introducing artifacts during viewpoint transitions, attributable to imprecise joint optimization processes.\n\n### 4.2 Fast 3D-Gaussian Optimization\n\n#### 3D Gaussian Initializations.\n\nThe primary objective in 3D-GS optimization, as discussed in \\[ [13])\\], is to adeptly refine the set of 3D Gaussians to accurately represent the scene. Traditional initialization with sparse point clouds from Structure from Motion (SfM) provides basic color and positional details. Yet, the inherent sparsity of SfM data demands extensive optimization time to densify, split and refine Gaussians for adequate 3D scene modeling.\n\nIn contrast, we advocate for utilizing a globally aligned point map as preliminary scene geometry, replacing the sparse SfM point set for 3D-GS initialization \\[ [13])\\]. This approach offers several advantages over sparse SfM point cloud initialization: 1) It addresses the challenging nature of Gaussian parameter optimization, aiming to reconstruct the complete 3D scene and render from any viewpoint, particularly when the training views are significantly below the Nyquist sampling rate. 2) To maintain the optimized 3D Gaussian’s stability and quality, the original authors \\[ [13])\\] implemented a complex set of rules to guide the generation of new Gaussians, division of incorrectly optimized Gaussians, and periodic opacity adjustments to eliminate residual Gaussians.\nConsidering these aspects, we leverage a 3D prior model to supply a robust scene structure (a.k.a. globally aligned point maps) with ample primitives to encapsulate the scene’s surfaces. This approach minimizes the need for manual optimization rules (adaptive density control in 3DGS \\[ [13])\\]), and thus requiring fewer steps. Specifically, we execute 1k iterations optimization on the initialized 3D Gaussians, omitting the densification, splitting, and opacity reset processes, thereby streamlining and simplifying the optimization procedure.\n\n#### Jointly Optimizing Poses and Attributes.\n\nWe observe that aligning camera extrinsics predominantly addresses the issue of inconsistent scale when transitioning from two-view to multi-view scenarios. However, ambiguities arise due to inaccuracies in predicted points or confidence maps, which may be attributed to varying illumination across different views or minor motion blur from handheld capture devices. Consequently, the alignment accuracy is compromised.\nTo mitigate this, we propose a simultaneous optimization of camera extrinsics and a 3D model using a sparse set of training views. We enable the camera parameters to be adjustable alongside the Gaussian attributes. Additionally, we introduce a constraint to ensure that the optimized poses do not deviate excessively from their initial positions. This method aims to refine pose accuracy while maintaining a close adherence to the original extrinsic parameters, thereby enhancing the overall alignment precision in our 3D reconstruction process.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝑺∗,𝑻∗=arg​min𝑺,𝑻​∑v∈N∑i=1H​Wsuperscript𝑺superscript𝑻subscriptargmin𝑺𝑻subscript𝑣𝑁superscriptsubscript𝑖1𝐻𝑊\\\\displaystyle\\\\boldsymbol{S}^{\\*},\\\\boldsymbol{T}^{\\*}=\\\\operatorname\\*{arg\\\\,min}\\_{\\\\boldsymbol{S},\\\\boldsymbol{T}}\\\\sum\\_{v\\\\in N}\\\\sum\\_{i=1}^{HW} | ‖𝑪~vi​(𝑺,𝑻)−𝑪vi​(𝑺,𝑻)‖normsuperscriptsubscript~𝑪𝑣𝑖𝑺𝑻superscriptsubscript𝑪𝑣𝑖𝑺𝑻\\\\displaystyle\\\\left\\\\\\|\\\\tilde{\\\\boldsymbol{C}}\\_{v}^{i}(\\\\boldsymbol{S},\\\\boldsymbol{T})-\\\\boldsymbol{C}\\_{v}^{i}(\\\\boldsymbol{S},\\\\boldsymbol{T})\\\\right\\\\\\| |  |\n|  | +\\\\displaystyle+ | λ⋅‖𝑻−𝑻​𝟎‖.⋅𝜆norm𝑻𝑻0\\\\displaystyle\\\\lambda\\\\cdot\\\\left\\\\\\|\\\\boldsymbol{T}-\\\\boldsymbol{T0}\\\\right\\\\\\|.\\\\vspace{-2mm} |  |\n\nIn the given context, the 𝑺𝑺\\\\boldsymbol{S} represents the set of 3D Gaussians, 𝑻𝑻\\\\boldsymbol{T} denotes the camera extrinsics for a specific view, 𝑻​𝟎𝑻0\\\\boldsymbol{T0} signifies the initial extrinsics obtained from global alignment, 𝑪𝑪\\\\boldsymbol{C} is the rendering function, and the term λ𝜆\\\\lambda is introduced to strike a balance between photometric loss and the steps involved in camera optimization. This formulation is pivotal in ensuring that the optimization process is finely tuned to achieve an optimal balance between fidelity to the observed data and adherence to the initial camera poses, facilitating a robust and accurate 3D representation for NVS.\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 0.89 | 28.94 | 0.12 | 0.57 | 18.29 | 0.34 | 0.64 | 22.48 | 0.44 | 0.51 | 18.28 | 0.53 |\n| Family | 0.91 | 28.69 | 0.10 | 0.58 | 17.06 | 0.32 | 0.76 | 24.82 | 0.34 | 0.49 | 17.74 | 0.53 |\n| Francis | 0.90 | 31.02 | 0.16 | 0.63 | 20.26 | 0.37 | 0.65 | 22.26 | 0.48 | 0.61 | 20.46 | 0.48 |\n| Horse | 0.90 | 28.25 | 0.10 | 0.62 | 17.84 | 0.32 | 0.69 | 21.68 | 0.39 | 0.59 | 18.11 | 0.45 |\n| Ignatius | 0.83 | 26.00 | 0.16 | 0.57 | 18.29 | 0.34 | 0.65 | 24.36 | 0.41 | 0.44 | 19.14 | 0.50 |\n| Avg. | 0.89 | 28.58 | 0.13 | 0.59 | 18.34 | 0.34 | 0.68 | 23.12 | 0.41 | 0.53 | 18.75 | 0.50 |\n\nTable 1: Quantitative Evaluations on the Rendered Tanks and Temples Datasets. Our method renders significantly clearer details (by LPIPS) compared to other baseline methods, devoid of artifacts typically associated with noisy pose estimation (e.g., CF-3DGS \\[ [10])\\], NeRFmm \\[ [33])\\]). Furthermore, Nope-NeRF’s regularization approach during training, which involves multiple constraints, restricts the MLPs’ ability to accurately reconstruct scene details. The best results are highlighted in bold.\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 0.189 | 0.093 | 0.002 | 5.391 | 2.459 | 0.059 | 9.051 | 7.429 | 0.069 | 12.410 | 8.661 | 0.103 |\n| Family | 0.414 | 0.041 | 0.003 | 5.803 | 1.945 | 0.064 | 3.663 | 5.889 | 0.007 | 18.178 | 3.277 | 0.211 |\n| Francis | 0.468 | 0.211 | 0.004 | 6.889 | 3.989 | 0.094 | 10.887 | 4.546 | 0.147 | 10.290 | 5.034 | 0.222 |\n| Horse | 0.552 | 0.037 | 0.037 | 10.300 | 2.307 | 0.125 | 16.646 | 4.102 | 0.039 | 16.720 | 3.258 | 0.032 |\n| Ignatius | 0.735 | 0.168 | 0.011 | 0.602 | 0.174 | 0.006 | 11.150 | 4.550 | 0.011 | 17.531 | 3.275 | 0.056 |\n| Avg. | 0.472 | 0.110 | 0.011 | 5.797 | 2.175 | 0.070 | 10.279 | 5.303 | 0.055 | 15.026 | 4.701 | 0.125 |\n\nTable 2: Quantitative Evaluation of Pose Accuracy on the Tanks and Temples Datasets. We employ poses derived from COLMAP on full views as the ground-truth reference. The rotational Relative Pose Error (RPEr) is expressed in degrees, the translational Relative Pose Error (RPEt) is scaled by 0.01, and the Absolute Trajectory Error (ATE) is quantified using the ground truth scale. The best results are highlighted in bold.\n\n### 4.3 Aligning Camera Poses on Test Views\n\nIn contrast to the conventional approach where exact camera poses for test views are known and typically estimated alongside training views within the same coordinate system (as seen in 3D-GS \\[ [13])\\] and NeRF \\[ [19])\\]), our scenario involves test views with either unknown or noisy poses. Employing camera poses calculated from DUSt3R often results in minor misalignments between predicted and ground-truth images. This necessitates the alignment of camera poses for test views before rendering.\n\nDrawing inspiration from NeRFmm \\[ [33])\\], we maintain the 3DGS model trained on training views, in a frozen state while optimizing the camera poses for test views. This optimization process focuses on minimizing the photometric discrepancies between the synthesized images and the actual test views, aiming to achieve a more precise alignment and rendering of the test views for equitable comparisons.",
            "citations": null
          },
          "5 Experiments": {
            "content": "### 5.1 Experimental Setup\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow | SSIM↑↑\\\\uparrow | PSNR↑↑\\\\uparrow | LPIPS↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Car | 0.92 | 28.91 | 0.11 | 0.59 | 17.85 | 0.36 | 0.67 | 20.63 | 0.44 | 0.41 | 14.68 | 0.68 |\n| Suv | 0.89 | 28.34 | 0.12 | 0.60 | 17.78 | 0.34 | 0.66 | 21.06 | 0.48 | 0.42 | 14.38 | 0.60 |\n| Bicycle | 0.75 | 23.17 | 0.23 | 0.23 | 14.80 | 0.48 | 0.29 | 16.81 | 0.61 | 0.13 | 12.04 | 0.71 |\n| Bench | 0.75 | 23.75 | 0.23 | 0.20 | 15.90 | 0.47 | 0.31 | 18.28 | 0.58 | 0.17 | 13.90 | 0.67 |\n| Chair | 0.84 | 26.54 | 0.17 | 0.41 | 18.10 | 0.51 | 0.46 | 20.42 | 0.56 | 0.27 | 14.53 | 0.67 |\n| Ladder | 0.58 | 20.20 | 0.29 | 0.25 | 15.93 | 0.48 | 0.30 | 17.82 | 0.64 | 0.22 | 15.10 | 0.66 |\n| Table | 0.82 | 25.43 | 0.17 | 0.36 | 16.05 | 0.52 | 0.45 | 18.93 | 0.56 | 0.27 | 12.55 | 0.67 |\n| Avg. | 0.79 | 25.19 | 0.19 | 0.38 | 16.63 | 0.45 | 0.45 | 19.14 | 0.55 | 0.27 | 13.88 | 0.66 |\n\nTable 3: Quantitative Evaluations on the Rendered MVImgNet Datasets. InstantSplat outperforms baselines in all evaluation metrics.\n\n| Methods | Ours | CF-3DGS | Nope-NeRF | NeRFmm |\n| --- | --- | --- | --- | --- |\n| RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | ATE↓↓\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Car | 0.145 | 0.044 | 0.001 | 5.734 | 4.524 | 0.102 | 6.986 | 9.683 | 0.090 | 13.706 | 6.067 | 0.144 |\n| Suv | 0.163 | 0.141 | 0.002 | 4.248 | 3.000 | 0.031 | 13.406 | 10.370 | 0.190 | 16.899 | 7.490 | 0.164 |\n| Bicycle | 0.407 | 0.375 | 0.006 | 9.310 | 9.525 | 0.149 | 7.266 | 15.662 | 0.116 | 14.363 | 13.506 | 0.066 |\n| Bench | 0.271 | 0.244 | 0.004 | 7.313 | 9.618 | 0.069 | 14.345 | 13.699 | 0.179 | 13.274 | 12.429 | 0.071 |\n| Chair | 0.386 | 0.330 | 0.005 | 15.430 | 15.276 | 0.164 | 17.447 | 17.334 | 0.136 | 13.449 | 16.263 | 0.109 |\n| Ladder | 0.634 | 0.603 | 0.008 | 11.280 | 7.883 | 0.107 | 18.610 | 10.557 | 0.203 | 15.590 | 7.770 | 0.207 |\n| Table | 0.210 | 0.214 | 0.003 | 17.521 | 13.757 | 0.117 | 9.447 | 18.595 | 0.083 | 17.820 | 15.443 | 0.163 |\n| Avg. | 0.317 | 0.279 | 0.004 | 10.119 | 9.083 | 0.106 | 12.501 | 13.700 | 0.142 | 15.014 | 11.281 | 0.132 |\n\nTable 4: Quantitative Evaluation of Pose Accuracy on the MVImgNet Datasets. COLMAP on full views as the ground-truth reference. The rotational Relative Pose Error (RPEr) is expressed in degrees, the translational Relative Pose Error (RPEt) is scaled by 0.01, and the Absolute Trajectory Error (ATE) is quantified using the ground truth scale. InstantSplat performs the best in pose estimation.![Refer to caption]Figure 4: Visual Comparisons on the MVImgNet Datasets (Part 1). We present the rendering results from NeRFmm, Nope-NeRF, CF-3DGS, and ours. The images are arranged from top to bottom, corresponding to the scenes labeled as Car, SUV, Bench, and Bicycle, respectively.![Refer to caption]Figure 5: Additional Visual Comparisons on the MVImgNet Datasets (Part 2). We present the rendering results from NeRFmm, Nope-NeRF, CF-3DGS, and ours. The images are arranged from top to bottom, corresponding to the scenes labeled as Chair, Ladder, and Table, respectively.\n\n#### Datasets.\n\nWe conducted comprehensive experiments on real-world datasets featuring large-scale scenes with expansive backgrounds. Specifically, we utilized five scenes from the Tanks and Temples datasets \\[ [14])\\], namely Barn, Family, Francis, Horse, and Ignatius. Additionally, we extracted six outdoor scenes from the MVImgNet datasets \\[ [40])\\], which include Car, Suv, Bicycle, Chair, Ladder, Bench, and Table.\nIn line with the FSGS protocol \\[ [42])\\], we established a sparse-view setting by uniformly selecting 12 views for training and 12 views for evaluation on the Tanks and Temples datasets, with the original number of views ranging from 120 to 200, utilizing approximately 1/10 of the views for training. In a similar vein, we extracted 12 views for both training and evaluation on the MVImgNet datasets.\nThe camera intrinsics and extrinsics were initially unknown; however, we estimated them and conducted evaluations of pose accuracy on all training samples post Umeyama alignment \\[ [29])\\].\n\n#### Metrics.\n\nOur evaluation encompasses two primary tasks: novel view synthesis and camera pose estimation. In the context of camera pose estimation, we present the errors associated with camera rotation and translation, specifically focusing on the Absolute Trajectory Error (ATE) and the Relative Pose Error (RPE), as delineated in \\[ [5])\\]. For the task of novel view synthesis, we adopt standard evaluation metrics, namely the Peak Signal-to-Noise Ratio (PSNR), the Structural Similarity Index Measure (SSIM)\\[ [32])\\], and the Learned Perceptual Image Patch Similarity (LPIPS)\\[ [41])\\].\n\n#### Baselines.\n\nOur evaluation primarily focuses on comparing against pose-free methods. These include Nope-NeRF \\[ [5])\\], which utilizes monocular depth maps and ground-truth camera intrinsics to optimize a neural radiance field. Another method is CF-3DGS \\[ [10])\\], which initializes 3D Gaussians from a single view and progressively incorporates all training views, supported by monocular depth maps and ground-truth camera intrinsics. Additionally, we compare with NeRFmm \\[ [33])\\], where the joint optimization of NeRF and camera parameters is performed to achieve a plausible solution.\n\n#### Implementation Details.\n\nOur implementation leverages the PyTorch framework, different from 3DGS \\[ [13])\\] where we only optimize the 3D Gaussian attributes without implementing adaptive density control. The optimization process is limited to 1,000 iterations, achieving satisfactory results in both rendering quality and pose estimation accuracy. For our model configuration, we employ the DUSt3R model \\[ [31])\\], trained at a resolution of 512, with a ViT Large encoder and a ViT Base decoder. We set λ𝜆\\\\lambda as 0.1 during our experiments to constrain the camera poses move to far from the start point. We perform experiments on one Nvidia A100 GPU for fair comparisons.\n\n### 5.2 Experimental Results\n\n![Refer to caption]Figure 6: Visual Comparisons on MVImgNet. Rendered images from the “Table” scene are presented alongside visualizations of the learned camera trajectories. Our results exhibit sharper details and predominantly aligned pose estimations.\n\n#### Quantitative and Qualitative Results\n\nWe assessed the performance of several methods in novel view synthesis and pose estimation on Tanks and Temples datasets, summarizing their quantitative metrics in Tab. [1]Table 1 ‣ Jointly Optimizing Poses and Attributes. ‣ 4.2 Fast 3D-Gaussian Optimization ‣ 4 Method ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\") and Tab. [2]Table 2 ‣ Jointly Optimizing Poses and Attributes. ‣ 4.2 Fast 3D-Gaussian Optimization ‣ 4 Method ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"). The methods include the Gaussian Splatting-based CF-3DGS \\[ [10])\\] and NeRF-based methods like Nope-NeRF \\[ [5])\\] and NeRFmm \\[ [33])\\]. In the Tanks and Temples dataset, Nope-NeRF utilizes MLPs and achieves notable accuracy in rendering quality and pose estimation. However, it tends to produce overly blurred renderings due to the heavy constraints from its geometric field and demonstrates slow training (∼similar-to\\\\sim2 hours) and inference speeds (∼similar-to\\\\sim30 seconds for one frame), which may hinder its practical application.\nCF-3DGS, employing Gaussian Splatting, delivers good rendering quality but is prone to artifacts when changing viewpoints, a consequence of the complex optimization process with errorneous pose predictions, as evidenced in Fig. [3]Figure 3 ‣ Pair-wise to Globally Aligned Poses. ‣ 4.1 Coarse Geometric Initialization ‣ 4 Method ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"). CF-3DGS requires more complex optimization, incorporating both local and global optimization stages, along with adaptive density control and opacity reset policies.\nBoth Nope-NeRF and CF-3DGS presuppose known focal lengths, which restricts their broader utility. NeRFmm, aiming to optimize camera parameters and the radiance field concurrently, tends to yield suboptimal results due to the challenges of naive joint optimization.\nWhile the baselines demonstrate reasonable performance in sparse-view rendering, the pose metrics reveal artifacts attributable to sparse observations and inaccurately estimated poses. Similar observations can be seen in the experiments conducted on MVImgNet datasets, as is shown in Fig. [4]Figure 4 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), Fig. [5]Figure 5 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), Tab. [3]Table 3 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), Tab. [4]Table 4 ‣ 5.1 Experimental Setup ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\") and Fig. [6]Figure 6 ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\").\nThis is especially problematic for CF-3DGS and Nope-NeRF, which require dense video sequences, akin to SLAM, and thus struggle with sparse-view scenarios.\nConversely, our method, initializes with a coarse scene geometry and globally aligned camera parameters, employs a rapid 3D Gaussian optimization process, offering a more streamlined and efficient solution. Our holistic pipeline requires less than 1 minute for initialization and optimization, benefiting from the integration of end-to-end dense stereo priors and the streamlined 3D Gaussian optimization process.\n\n| Scenes | No Averaging Focal | Full Model (InstantSplat) |\n| --- | --- | --- |\n| PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 26.38 | 0.8356 | 0.495 | 0.167 | 28.94 | 0.8905 | 0.189 | 0.093 |\n| Family | 28.12 | 0.8998 | 0.538 | 0.051 | 28.69 | 0.9076 | 0.414 | 0.041 |\n| Francis | 29.99 | 0.8864 | 0.778 | 0.213 | 31.02 | 0.9016 | 0.468 | 0.211 |\n| Horse | 27.15 | 0.8811 | 2.516 | 0.061 | 28.25 | 0.9045 | 0.552 | 0.037 |\n| Ignatius | 24.24 | 0.7729 | 0.939 | 0.182 | 26.00 | 0.8305 | 0.735 | 0.168 |\n| Avg. | 27.18 | 0.8552 | 1.053 | 0.135 | 28.58 | 0.8900 | 0.472 | 0.110 |\n\nTable 5: Ablation Study on the Impact of Averaging Focal Length. Utilizing the averaged focal length for subsequent global alignment and 3D Gaussian joint optimization enhances both the rendering quality and the accuracy of the final pose estimation.\n\n| Scenes | No Joint Optimization | Full Model (InstantSplat) |\n| --- | --- | --- |\n| PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow | PSNR↑↑\\\\uparrow | SSIM↑↑\\\\uparrow | RPE↓t{}\\_{t}\\\\downarrow | RPE↓r{}\\_{r}\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Barn | 26.56 | 0.8530 | 0.382 | 0.231 | 28.94 | 0.8905 | 0.189 | 0.093 |\n| Family | 27.81 | 0.9017 | 0.451 | 0.061 | 28.69 | 0.9076 | 0.414 | 0.041 |\n| Francis | 29.74 | 0.8952 | 0.405 | 0.224 | 31.02 | 0.9016 | 0.468 | 0.211 |\n| Horse | 26.59 | 0.8827 | 1.127 | 0.106 | 28.25 | 0.9045 | 0.552 | 0.037 |\n| Ignatius | 23.41 | 0.7408 | 1.020 | 0.245 | 26.00 | 0.8305 | 0.735 | 0.168 |\n| Avg. | 26.82 | 0.8547 | 0.677 | 0.173 | 28.58 | 0.8900 | 0.472 | 0.110 |\n\nTable 6: Ablation Study on the Effect of Joint Optimization. Concurrently updating the camera extrinsics and Gaussian attributes markedly enhances the rendering quality.\n\n![Refer to caption]Figure 7: Ablation on Training View Number. We study the impact of the training view number to the rendering quality. Comparisons are between our model and CF-3DGS, on the Tanks and Temples datasets\n\n### 5.3 Ablation Studies\n\n#### Effect of Averaging Focal Length.\n\nExperiments indicates that independent calculation of camera focal length results in a diversity of outcomes, adversely affecting rendering quality and pose estimation accuracy, as evidenced in Tab.  [5]Table 5 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"). The core issue stems from the coupling of a focal length with globally aligned camera extrinsics, which leads to suboptimal pose estimation. This scenario complicates the 3D Gaussian optimization process, impacting the overall performance.\n\n#### Effect of Joint Optimization.\n\nThe globally alignment algorithm does not yield pixel-wise accurate extrinsics, primarily due to the resolution loss from the resizing operation on the point map, and the artifacts in the capturing process. We analyzed the effects of updating Gaussian attributes independently (referenced on the left in Tab. [6]Table 6 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\")) versus jointly optimizing camera extrinsics and Gaussian attributes (referenced on the right in Tab. [6]Table 6 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\")). It is evident that further refinement of camera extrinsics can steer the 3D Gaussians towards a more accurate solution, thereby enhancing the sharpness and detail in the resulting images.\n\n#### Effect of View Number and Efficiency Analysis.\n\nWe conduct experiments with varying numbers of training views to assess the model’s generalization capabilities. As illustrated in Fig [7]Figure 7 ‣ Quantitative and Qualitative Results ‣ 5.2 Experimental Results ‣ 5 Experiments ‣ InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds\"), InstantSplat consistently outperforms CF-3DGS \\[ [10])\\], another 3D Gaussian-based pose-free framework. Furthermore, we analyze the time consumption for each module within our framework. Specifically, for 12 training views, it takes 20.6 seconds to acquire the coarse geometry from a pre-trained dense stereo model, while the fast 3D Gaussian Optimization requires 16.67 seconds for 1000 iterations.",
            "citations": null
          },
          "6 Conclusion": {
            "content": "We introduced InstantSplat, designed to reconstruct scene efficiently from sparse-view unposed images. Our approach leverages dense stereo priors for coarse scene initialization, offering preliminary estimates of the 3D geometry and camera parameters. To further refine these scene attributes and camera parameters, a rapid 3D Gaussian Optimization strategy that jointly optimizes the 3D Gaussian attributes and camera extrinsics. This results in an efficient pipeline capable of reconstructing the 3D scene from unposed images in under one minute.\nSignificantly, our method demonstrates superior rendering quality and pose estimation accuracy compared to existing methodologies, underscoring its effectiveness in handling sparse-view data.",
            "citations": null
          }
        },
        "abstract": "While neural 3D reconstruction has advanced substantially, it typically\nrequires densely captured multi-view data with carefully initialized poses\n(e.g., using COLMAP). However, this requirement limits its broader\napplicability, as Structure-from-Motion (SfM) is often unreliable in\nsparse-view scenarios where feature matches are limited, resulting in\ncumulative errors. In this paper, we introduce InstantSplat, a novel and\nlightning-fast neural reconstruction system that builds accurate 3D\nrepresentations from as few as 2-3 images. InstantSplat adopts a\nself-supervised framework that bridges the gap between 2D images and 3D\nrepresentations using Gaussian Bundle Adjustment (GauBA) and can be optimized\nin an end-to-end manner. InstantSplat integrates dense stereo priors and\nco-visibility relationships between frames to initialize pixel-aligned geometry\nby progressively expanding the scene avoiding redundancy. Gaussian Bundle\nAdjustment is used to adapt both the scene representation and camera parameters\nquickly by minimizing gradient-based photometric error. Overall, InstantSplat\nachieves large-scale 3D reconstruction in mere seconds by reducing the required\nnumber of input views. It achieves an acceleration of over 20 times in\nreconstruction, improves visual quality (SSIM) from 0.3755 to 0.7624 than\nCOLMAP with 3D-GS, and is compatible with multiple 3D representations (3D-GS,\n2D-GS, and Mip-Splatting)."
      }
    },
    "key_map": {
      "2005.14165": "bib.bib2",
      "2409.19152": "bib.bib4",
      "2403.20309": "bib.bib5"
    }
  }
}