{
  "title": "Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations",
  "abstract": "We address the problem of learning uncertainty-aware representations for\ngraph-structured data. While Graph Neural Ordinary Differential Equations\n(GNODE) are effective in learning node representations, they fail to quantify\nuncertainty. To address this, we introduce Latent Graph Neural Stochastic\nDifferential Equations (LGNSDE), which enhance GNODE by embedding randomness\nthrough Brownian motion to quantify uncertainty. We provide theoretical\nguarantees for LGNSDE and empirically show better performance in uncertainty\nquantification.",
  "paper_id": "http://arxiv.org/abs/2408.16115v3",
  "markdown_content": "# Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\n\nRichard Bergna1,∗, Sergio Calvo-Ordoñez2,3, Felix L. Opolka4\n\nPietro Liò4, Jose Miguel Hernandez-Lobato1\n\n1Department of Engineering, University of Cambridge\n\n2Mathematical Institute, University of Oxford\n\n3Oxford-Man Institute of Quantitative Finance, University of Oxford\n\n4Department of Computer Science and Technology, University of Cambridge\n\n###### Abstract\n\nWe address the problem of learning uncertainty-aware representations for graph-structured data. While Graph Neural Ordinary Differential Equations (GNODE) are effective in learning node representations, they fail to quantify uncertainty. To address this, we introduce Latent Graph Neural Stochastic Differential Equations (LGNSDE), which enhance GNODE by embedding randomness through Brownian motion to quantify uncertainty. We provide theoretical guarantees for LGNSDE and empirically show better performance in uncertainty quantification.\n\n## 1 Introduction\n\nBefore the widespread of neural networks and the boom in modern machine learning, complex systems in various scientific fields were predominantly modelled using differential equations. Stochastic Differential Equations (SDEs) were the standard approach to incorporating randomness. These methods were foundational across disciplines such as physics, finance, and computational biology (Hoops et al., [2016](https://ar5iv.org/html/2408.16115#bib.bib7 \"\"); Quach et al., [2007](https://ar5iv.org/html/2408.16115#bib.bib14 \"\"); Mandelzweig and Tabakin, [2001](https://ar5iv.org/html/2408.16115#bib.bib11 \"\"); Cardelli, [2008](https://ar5iv.org/html/2408.16115#bib.bib4 \"\"); Buckdahn et al., [2011](https://ar5iv.org/html/2408.16115#bib.bib2 \"\"); Cvijovic et al., [2014](https://ar5iv.org/html/2408.16115#bib.bib5 \"\")).\n\nIn recent years, Graph Neural Networks (GNNs) have become the standard for graph-structured data due to their ability to capture relationships between nodes. They are widely used in social network analysis, molecular biology, and recommendation systems. However, traditional GNNs cannot reliably quantify uncertainty. Both aleatoric (inherent randomness in the data) and epistemic (model uncertainty due to limited knowledge) are essential for decision-making, risk assessment, and resource allocation, making GNNs less applicable in critical applications.\n\nTo address this gap, we propose Latent Graph Neural Stochastic Differential Equations (LGNSDE), a method that perturbs features during both the training and testing phases using Brownian motion noise, allowing for handling noise and aleatoric uncertainty. We also assume a prior SDE latent space and learn a posterior SDE using a GNN. This Bayesian approach to the latent space allows us to quantify epistemic uncertainty. As a result, our model can capture and quantify both epistemic and aleatoric uncertainties. More specifically, our contributions are as follows:\n\n- •\n\n\nWe introduce a novel model class combining SDE robustness with GNN flexibility for handling complex graph-structured data, which quantifies both epistemic and aleatoric uncertainties.\n\n- •\n\n\nWe provide theoretical guarantees demonstrating our model’s ability to provide meaningful uncertainty estimates and its robustness to perturbations in the inputs.\n\n- •\n\n\nWe empirically show that Latent GNSDEs demonstrate exceptional performance in uncertainty quantification, outperforming Bayesian GCNs (Hasanzadeh et al., [2020](https://ar5iv.org/html/2408.16115#bib.bib6 \"\")), and GCN ensembles (Lin et al., [2022](https://ar5iv.org/html/2408.16115#bib.bib10 \"\")).\n\n\n## 2 Methodology\n\nInspired by Graph Neural ODEs (Poli et al., [2019](https://ar5iv.org/html/2408.16115#bib.bib13 \"\")) and Latent SDEs (Li et al., [2020](https://ar5iv.org/html/2408.16115#bib.bib9 \"\")), we now introduce our model: Latent Graph Neural SDEs −- LGNSDEs (Figure [1](https://ar5iv.org/html/2408.16115#S2.F1 \"Figure 1 ‣ 2 Methodology ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")), which use SDEs to define prior and approximate posterior stochastic trajectories for 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t)(Xu et al., [2022](https://ar5iv.org/html/2408.16115#bib.bib16 \"\")). Furthermore, LGNSDEs can be viewed as the continuous representations of existing discrete architectures ( [A.4](https://ar5iv.org/html/2408.16115#A1.SS4 \"A.4 GNSDE as a Continuous Representation of Graph ResNet with Stochastic Noise Insertion ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")).\n\n![Refer to caption](https://ar5iv.org/html/2408.16115/assets/x1.png)Figure 1: The diagram illustrates the evolution of input data in the latent space through an SDE, showing the discretization of a sample path (purple line) at three timesteps with corresponding vector fields and graph embeddings. Initially, nodes representing two classes (white and orange) are poorly separated. However, as the model progresses, aggregating features and propagating information through the graph, the vector field helps make the class boundaries more distinct.\n\n### 2.1 Model Definition\n\nLGNSDEs are designed to capture the stochastic latent evolution of 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) on graph-structured data. We use an Ornstein-Uhlenbeck (OU) prior process, represented by:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),d𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡d𝑡subscript𝐆𝒢𝐇𝑡𝑡d𝐖𝑡\\\\text{d}\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,\\\\text{d}t+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,\\\\text{d}\\\\mathbf{W}(t), |  |\n\nwhere we set the drift and diffusion functions, 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} and 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}}, to constants and consider them hyperparameters. Moreover, d​𝐖​(t)𝑑𝐖𝑡d\\\\mathbf{W}(t) is a Wiener process. The approximate posterior is defined as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t,ϕ)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),d𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡italic-ϕd𝑡subscript𝐆𝒢𝐇𝑡𝑡d𝐖𝑡\\\\text{d}\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\phi)\\\\,\\\\text{d}t+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,\\\\text{d}\\\\mathbf{W}(t), |  | (1) |\n\nwhere 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} is parameterized by a GCN with ϕitalic-ϕ\\\\phi representing the learned weights of the neural network. The drift function mainly determines the dynamics of the evolution of the latent state, while the diffusion term 𝐆𝒢​(𝐇​(t))​d​𝐖​(t)subscript𝐆𝒢𝐇𝑡d𝐖𝑡\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t))\\\\,\\\\text{d}\\\\mathbf{W}(t) introduces stochastic elements. With the need to keep the Kullback-Leibler (KL) divergence bounded, we set the diffusion functions of the prior and posterior to be the same \\[Calvo-Ordonez et al. [2024](https://ar5iv.org/html/2408.16115#bib.bib3 \"\"); Archambeau et al. [2007](https://ar5iv.org/html/2408.16115#bib.bib1 \"\")\\].\n\nLet 𝐘𝐘\\\\mathbf{Y} be a collection of target variables, e.g., class labels, for some of the graph nodes. Given 𝐘𝐘\\\\mathbf{Y} we train our model with variational inference, with the ELBO computed as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ℒELBO​(ϕ)=𝔼​\\[log⁡p​(𝐘\\|𝐇​(t1))−∫t0t112​‖v​(𝐇​(u),ϕ,θ,𝒢)‖22​d​u\\],subscriptℒELBOitalic-ϕ𝔼delimited-\\[\\]𝑝conditional𝐘𝐇subscript𝑡1superscriptsubscriptsubscript𝑡0subscript𝑡112superscriptsubscriptnorm𝑣𝐇𝑢italic-ϕ𝜃𝒢22d𝑢\\\\mathcal{L}\\_{\\\\text{ELBO}}(\\\\phi)=\\\\mathbb{E}\\\\left\\[\\\\log{p(\\\\mathbf{Y}\\|\\\\mathbf{H}(t\\_{1}))}-\\\\int\\_{t\\_{0}}^{t\\_{1}}\\\\frac{1}{2}\\\\left\\\\\\|v(\\\\mathbf{H}(u),\\\\phi,\\\\theta,\\\\mathcal{G})\\\\right\\\\\\|\\_{2}^{2}\\\\,\\\\text{d}u\\\\right\\], |  |\n\nwhere the expectation is approximated over trajectories of 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) sampled from the approximate posterior SDE, and v=𝐆𝒢​(𝐇​(t))−1​\\[𝐅𝒢,ϕ​(𝐇​(u),u)−𝐅𝒢,θ​(𝐇​(u),u)\\].𝑣subscript𝐆𝒢superscript𝐇𝑡1delimited-\\[\\]subscript𝐅𝒢italic-ϕ𝐇𝑢𝑢subscript𝐅𝒢𝜃𝐇𝑢𝑢v=\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t))^{-1}\\[\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\phi}(\\\\mathbf{H}(u),u)-\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\theta}(\\\\mathbf{H}(u),u)\\].\n\nTo sample 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) from the approximate posterior, we integrate the SDE in Eq. [1](https://ar5iv.org/html/2408.16115#S2.E1 \"In 2.1 Model Definition ‣ 2 Methodology ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐇​(t1)𝐇subscript𝑡1\\\\displaystyle\\\\mathbf{H}(t\\_{1}) | =𝐇​(t0)+∫t0t1𝐅𝒢,ϕ​(𝐇​(u),u)​d​u+∫t0t1𝐆𝒢​(𝐇​(u),u)​d​𝐖​(u),absent𝐇subscript𝑡0superscriptsubscriptsubscript𝑡0subscript𝑡1subscript𝐅𝒢italic-ϕ𝐇𝑢𝑢d𝑢superscriptsubscriptsubscript𝑡0subscript𝑡1subscript𝐆𝒢𝐇𝑢𝑢d𝐖𝑢\\\\displaystyle=\\\\mathbf{H}(t\\_{0})+\\\\int\\_{t\\_{0}}^{t\\_{1}}\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\phi}(\\\\mathbf{H}(u),u)\\\\,\\\\text{d}u+\\\\int\\_{t\\_{0}}^{t\\_{1}}\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\,\\\\text{d}\\\\mathbf{W}(u), |  |\n\nwhere 𝐇​(t0)𝐇subscript𝑡0\\\\mathbf{H}(t\\_{0}) are the node-wise features 𝐗insubscript𝐗in\\\\mathbf{X}\\_{\\\\text{in}} in the graph 𝒢𝒢\\\\mathcal{G}. In practice, this is not feasible since the posterior drift 𝐅𝒢,ϕsubscript𝐅𝒢italic-ϕ\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\phi} is parametrised by a neural network. We numerically solve this integral with a standard Stochastic Runge-Kutta method (Rößler, [2010](https://ar5iv.org/html/2408.16115#bib.bib15 \"\")). We then use a Monte Carlo approximation to get the expectation of 𝐇​(t0)𝐇subscript𝑡0\\\\mathbf{H}(t\\_{0}) and approximate the posterior predictive distribution as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | p​(𝐘∗\\|𝒢,𝐗in,𝐘)𝑝conditionalsuperscript𝐘𝒢subscript𝐗in𝐘\\\\displaystyle p(\\\\mathbf{Y}^{\\*}\\|\\\\mathcal{G},\\\\mathbf{X}\\_{\\\\text{in}},\\\\mathbf{Y}) | ≈1N​∑n=1Np​(𝐘∗\\|𝐇n​(t1),𝒢),absent1𝑁superscriptsubscript𝑛1𝑁𝑝conditionalsuperscript𝐘subscript𝐇𝑛subscript𝑡1𝒢\\\\displaystyle\\\\approx\\\\frac{1}{N}\\\\sum\\_{n=1}^{N}p\\\\left(\\\\mathbf{Y}^{\\*}\\|\\\\mathbf{H}\\_{n}(t\\_{1}),\\\\mathcal{G}\\\\right), |  |\n\nwhere 𝐇1​(t1),…,𝐇N​(t1)subscript𝐇1subscript𝑡1…subscript𝐇𝑁subscript𝑡1\\\\mathbf{H}\\_{1}(t\\_{1}),\\\\ldots,\\\\mathbf{H}\\_{N}(t\\_{1}) are samples drawn from the approximate posterior p​(𝐇​(t1)\\|𝐘,𝐗in,𝒢)𝑝conditional𝐇subscript𝑡1𝐘subscript𝐗in𝒢p(\\\\mathbf{H}(t\\_{1})\\|\\\\mathbf{Y},\\\\mathbf{X}\\_{\\\\text{in}},\\\\mathcal{G}).\n\nFollowing Poli et al. ( [2019](https://ar5iv.org/html/2408.16115#bib.bib13 \"\")), we use a similar encoder-decoder setup. Our encoding focuses solely on the features of individual nodes, while the graph structure remains unchanged. Finally, we remark that the memory and time complexity are 𝒪​(\\|ℰ\\|​d+L)𝒪ℰ𝑑𝐿\\\\mathcal{O}(\\|\\\\mathcal{E}\\|d+L) and 𝒪​(L)𝒪𝐿\\\\mathcal{O}(L) respectively, where L𝐿L is the number of SDE solver steps, ℰℰ\\\\mathcal{E} is the number of edges in the graph and d𝑑d is the dimension of the features.\n\n## 3 Theoretical Guarantees\n\nIn this section, we present key results on the stability and robustness of our framework under mild assumptions (Appendix [A.2](https://ar5iv.org/html/2408.16115#A1.SS2 \"A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")). Firstly, we address the fundamental question of whether our proposed models provide meaningful uncertainties. By showing that the variance of the model output is bounded by the variance of the latent representation, we highlight the ability of LGNSDEs to capture and quantify the inherent uncertainty in the system. We formalize our findings and summarize them in the following lemma:\n\n###### Lemma 1.\n\nUnder assumptions [1](https://ar5iv.org/html/2408.16115#Thmassumption1 \"Assumption 1. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")- [3](https://ar5iv.org/html/2408.16115#Thmassumption3 \"Assumption 3. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"), there exists a unique strong solution to a LGNSDE of the form:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t,𝜽)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),𝑑𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡𝜽𝑑𝑡subscript𝐆𝒢𝐇𝑡𝑡𝑑𝐖𝑡d\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\boldsymbol{\\\\theta})\\\\,dt+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,d\\\\mathbf{W}(t), |  |\n\nwhose variance bounds the variance of the model output 𝐲​(t)𝐲𝑡\\\\mathbf{y}(t) as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | Var​(𝐲​(t))≤Lh2​Var​(𝐇​(t)),Var𝐲𝑡subscriptsuperscript𝐿2ℎVar𝐇𝑡\\\\text{Var}(\\\\mathbf{y}(t))\\\\leq L^{2}\\_{h}\\\\text{Var}(\\\\mathbf{H}(t)), |  |\n\nhence providing a meaningful measure of the total uncertainty.\n\nWe now demonstrate the robustness of our framework under small perturbations in the initial conditions. By deriving explicit bounds on the deviation between the perturbed and unperturbed solutions over time, we show that the model’s output remains stable.\n\n###### Lemma 2.\n\nUnder assumptions [1](https://ar5iv.org/html/2408.16115#Thmassumption1 \"Assumption 1. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")- [3](https://ar5iv.org/html/2408.16115#Thmassumption3 \"Assumption 3. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"), consider two initial conditions 𝐇0subscript𝐇0\\\\mathbf{H}\\_{0} and 𝐇~0=𝐇0+δ​𝐇​(0)subscript~𝐇0subscript𝐇0𝛿𝐇0\\\\tilde{\\\\mathbf{H}}\\_{0}=\\\\mathbf{H}\\_{0}+\\\\delta\\\\mathbf{H}(0), where δ​𝐇​(0)∈ℝn×d𝛿𝐇0superscriptℝ𝑛𝑑\\\\delta\\\\mathbf{H}(0)\\\\in\\\\mathbb{R}^{n\\\\times d} is a small perturbation in the initial node features with ‖δ​𝐇​(0)‖F=ϵsubscriptnorm𝛿𝐇0𝐹italic-ϵ\\\\\\|\\\\delta\\\\mathbf{H}(0)\\\\\\|\\_{F}=\\\\epsilon. Assume that 𝐇0subscript𝐇0\\\\mathbf{H}\\_{0} is taken from a compact set ℋ⊆ℝn×dℋsuperscriptℝ𝑛𝑑\\\\mathcal{H}\\\\subseteq\\\\mathbb{R}^{n\\\\times d}. Then, the deviation between the solutions 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) and 𝐇~​(t)~𝐇𝑡\\\\tilde{\\\\mathbf{H}}(t) of the LGNSDE with these initial conditions remains bounded across time t𝑡t, specifically:\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝔼​\\[‖𝐇​(t)−𝐇~​(t)‖F\\]≤ϵ​e(Lf+12​Lg2)​t.𝔼delimited-\\[\\]subscriptnorm𝐇𝑡~𝐇𝑡𝐹italic-ϵsuperscript𝑒subscript𝐿𝑓12superscriptsubscript𝐿𝑔2𝑡\\\\mathbb{E}\\[\\\\\\|\\\\mathbf{H}(t)-\\\\tilde{\\\\mathbf{H}}(t)\\\\\\|\\_{F}\\]\\\\leq\\\\epsilon e^{(L\\_{f}+\\\\frac{1}{2}L\\_{g}^{2})t}. |  |\n\nIn summary, we show analytically that our framework effectively quantifies uncertainty and maintains robustness under small perturbations of the input. First, we confirm that the model’s output variance is controlled and directly linked to the variance of the latent state. Second, we provide a bound on the deviation between solutions with perturbed initial conditions, ensuring stability over time. The proofs can be found in Appendix [A](https://ar5iv.org/html/2408.16115#A1 \"Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\").\n\n## 4 Experiments\n\n![Refer to caption](https://ar5iv.org/html/2408.16115/assets/x2.png)\n\n![Refer to caption](https://ar5iv.org/html/2408.16115/assets/x3.png)\n\nFigure 2: Top: Entropy distributions comparing correct and incorrect model predictions on the CORA dataset. Higher entropy is expected for incorrect predictions. Bottom: Entropy distributions comparing OOD samples with in-distribution samples in the CORA dataset.\n\nWe evaluate LGNSDEs on 5 datasets (see [A.2](https://ar5iv.org/html/2408.16115#A1.SS2 \"A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") for details on these datasets and hyperparameters), we compare it to GNODE (Poli et al., [2019](https://ar5iv.org/html/2408.16115#bib.bib13 \"\")), GCN Kipf and Welling ( [2016](https://ar5iv.org/html/2408.16115#bib.bib8 \"\")), Bayesian GCN (BGCN) (Hasanzadeh et al., [2020](https://ar5iv.org/html/2408.16115#bib.bib6 \"\")), and an ensemble of GCNs (Lin et al., [2022](https://ar5iv.org/html/2408.16115#bib.bib10 \"\")).\n\nThe results in Table [3](https://ar5iv.org/html/2408.16115#A2.T3 \"Table 3 ‣ Appendix B Details of The Experimental Setup ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") demonstrate that LGNSDE consistently ranks as either the best or second-best model across most datasets in terms of Micro-AUROC (Area Under the Receiver Operating Characteristic), AURC (Area Under the Risk Coverage), and accuracy. This indicates that LGNSDE effectively handles model uncertainty, successfully distinguishing between classes (AUROC), maintaining low risk while ensuring confident predictions (AURC), and delivering high accuracy.\n\nThe top figure [2](https://ar5iv.org/html/2408.16115#S4.F2 \"Figure 2 ‣ 4 Experiments ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") shows the entropy distributions of the models for correct and incorrect predictions. Note that most models display similar mean entropy for both correct and incorrect predictions. Notably, our model stands out with the largest difference in entropy, with incorrect predictions having 35% more entropy compared to correct predictions, a larger gap than observed in other models.\n\n### 4.1 Out of Distribution Detection\n\n| Metric | Model | Cora | Citeseer | Computers | Photo | Pubmed |\n| --- | --- | --- | --- | --- | --- | --- |\n| AUROC (↑) | GCN | 0.7063 ± 0.0569 | 0.7937 ± 0.0366 | 0.7796 ± 0.0271 | 0.8578 ± 0.0136 | 0.6127 ± 0.0351 |\n| GNODE | 0.7398 ± 0.0677 | 0.7828 ± 0.0465 | 0.7753 ± 0.0795 | 0.8473 ± 0.0158 | 0.5813 ± 0.0242 |\n| BGCN | 0.7193 ± 0.0947 | 0.8287 ± 0.0377 | 0.7914 ± 0.1234 | 0.7910 ± 0.0464 | 0.5310 ± 0.0472 |\n| ENSEMBLE | 0.7031 ± 0.0696 | 0.8190 ± 0.0375 | 0.8292 ± 0.0338 | 0.8352 ± 0.0059 | 0.6130 ± 0.0311 |\n| LGNSDE (Our) | 0.7614 ± 0.0804 | 0.8258 ± 0.0418 | 0.7994 ± 0.0238 | 0.8707 ± 0.0099 | 0.6204 ± 0.0162 |\n| AURC (↓) | GCN | 0.0220 ± 0.0049 | 0.0527 ± 0.0075 | 0.0072 ± 0.0013 | 0.0076 ± 0.0006 | 0.3227 ± 0.0266 |\n| GNODE | 0.0184 ± 0.0053 | 0.0545 ± 0.0110 | 0.0070 ± 0.0029 | 0.0097 ± 0.0015 | 0.3357 ± 0.0309 |\n| BGCN | 0.0208 ± 0.0091 | 0.0458 ± 0.0071 | 0.0064 ± 0.0047 | 0.0108 ± 0.0034 | 0.3714 ± 0.0317 |\n| ENSEMBLE | 0.0215 ± 0.0061 | 0.0487 ± 0.0072 | 0.0041 ± 0.0011 | 0.0081 ± 0.0003 | 0.3277 ± 0.0265 |\n| LGNSDE (Our) | 0.0168 ± 0.0070 | 0.0479 ± 0.0109 | 0.0061 ± 0.0011 | 0.0068 ± 0.0008 | 0.3205 ± 0.0135 |\n\nTable 1: AUROC (Mean ± Std) and AURC (Mean ± Std) for OOD Detection across datasets.\nRed denotes the best-performing model, and blue denotes the second-best-performing model.\n\nWe evaluate the models’ ability to detect out-of-distribution (OOD) data by training them with one class left out of the dataset. This introduces an additional class in the validation and test sets that the models have not encountered during training. The goal is to determine if the models can identify this class as OOD. We analyze the entropy, H​(y\\|𝐗i)=−∑c=1Cp​(y=c\\|𝐗i)​log⁡p​(y=c\\|𝐗i),𝐻conditional𝑦subscript𝐗𝑖superscriptsubscript𝑐1𝐶𝑝𝑦conditional𝑐subscript𝐗𝑖𝑝𝑦conditional𝑐subscript𝐗𝑖H(y\\|\\\\mathbf{X}\\_{i})=-\\\\sum\\_{c=1}^{C}p(y=c\\|\\\\mathbf{X}\\_{i})\\\\log p(y=c\\|\\\\mathbf{X}\\_{i}), where p​(y=c\\|𝐗i)𝑝𝑦conditional𝑐subscript𝐗𝑖p(y=c\\|\\\\mathbf{X}\\_{i}) represents the probability of input 𝐗isubscript𝐗𝑖\\\\mathbf{X}\\_{i} belonging to class c𝑐c. Entropy quantifies the uncertainty in the model’s predicted probability distribution over C𝐶C classes for a given input 𝐗isubscript𝐗𝑖\\\\mathbf{X}\\_{i}.\n\nFigure [2](https://ar5iv.org/html/2408.16115#S4.F2 \"Figure 2 ‣ 4 Experiments ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") shows the test entropy distribution for in-distribution (blue) and out-of-distribution (red) data. For each test sample, predictions were made over C−1𝐶1C-1 classes, excluding the left-out class. The OOD class exhibits higher entropy, indicating greater uncertainty. While most models show similar entropy distributions for both data types, our LGNSDE model achieves a clear separation, with a 50% higher mean entropy for OOD data compared to in-distribution data. Other models show less than a 10% difference between the two distributions.\n\nTable [1](https://ar5iv.org/html/2408.16115#S4.T1 \"Table 1 ‣ 4.1 Out of Distribution Detection ‣ 4 Experiments ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") presents the AUROC and AURC scores for OOD detection across multiple datasets. AUROC evaluates the model’s ability to differentiate between in-distribution and out-of-distribution (OOD) samples, with higher scores indicating better discrimination. AURC measures the risk of misclassification as coverage increases, where lower values are preferred. The LGNSDE model (ours) consistently achieves the best AUROC and AURC scores across most datasets, indicating its superior performance in accurately identifying OOD samples and minimizing the risk of misclassification.\n\n## 5 Conclusions and Future Work\n\nIn conclusion, LGNSDEs outperform the tested models, opening a new avenue for uncertainty quantification in graph data. In future work, stronger benchmarks should be included for a more comprehensive evaluation. Additionally, Neural SDEs face challenges with time and memory complexity. Further work should explore more scalable sampling methods to address these limitations.\n\n## References\n\n- Archambeau et al. \\[2007\\]\nC. Archambeau, M. Opper, Y. Shen, D. Cornford, and J. Shawe-taylor.\n\nVariational inference for diffusion processes.\n\nIn J. Platt, D. Koller, Y. Singer, and S. Roweis, editors, _Advances in Neural Information Processing Systems_, volume 20. Curran Associates, Inc., 2007.\n\nURL [https://proceedings.neurips.cc/paper\\_files/paper/2007/file/818f4654ed39a1c147d1e51a00ffb4cb-Paper.pdf](https://proceedings.neurips.cc/paper_files/paper/2007/file/818f4654ed39a1c147d1e51a00ffb4cb-Paper.pdf \"\").\n\n- Buckdahn et al. \\[2011\\]\nR. Buckdahn, B. Djehiche, and J. Li.\n\nA general stochastic maximum principle for sdes of mean-field type.\n\n_Applied Mathematics & Optimization_, 64(2):197–216, 2011.\n\n- Calvo-Ordonez et al. \\[2024\\]\nS. Calvo-Ordonez, M. Meunier, F. Piatti, and Y. Shi.\n\nPartially stochastic infinitely deep bayesian neural networks, 2024.\n\nURL [https://arxiv.org/abs/2402.03495](https://arxiv.org/abs/2402.03495 \"\").\n\n- Cardelli \\[2008\\]\nL. Cardelli.\n\nFrom processes to odes by chemistry.\n\nIn _Fifth Ifip International Conference On Theoretical Computer Science–Tcs 2008_, pages 261–281. Springer, 2008.\n\n- Cvijovic et al. \\[2014\\]\nM. Cvijovic, J. Almquist, J. Hagmar, S. Hohmann, H.-M. Kaltenbach, E. Klipp, M. Krantz, P. Mendes, S. Nelander, J. Nielsen, et al.\n\nBridging the gaps in systems biology.\n\n_Molecular Genetics and Genomics_, 289:727–734, 2014.\n\n- Hasanzadeh et al. \\[2020\\]\nA. Hasanzadeh, E. Hajiramezanali, S. Boluki, M. Zhou, N. Duffield, K. Narayanan, and X. Qian.\n\nBayesian graph neural networks with adaptive connection sampling.\n\nIn _International conference on machine learning_, pages 4094–4104. PMLR, 2020.\n\n- Hoops et al. \\[2016\\]\nS. Hoops, R. Hontecillas, V. Abedi, A. Leber, C. Philipson, A. Carbo, and J. Bassaganya-Riera.\n\nOrdinary differential equations (odes) based modeling.\n\nIn _Computational Immunology_, pages 63–78. Elsevier, 2016.\n\n- Kipf and Welling \\[2016\\]\nT. N. Kipf and M. Welling.\n\nSemi-supervised classification with graph convolutional networks.\n\n_arXiv preprint arXiv:1609.02907_, 2016.\n\n- Li et al. \\[2020\\]\nX. Li, T.-K. L. Wong, R. T. Chen, and D. Duvenaud.\n\nScalable gradients for stochastic differential equations.\n\nIn _International Conference on Artificial Intelligence and Statistics_, pages 3870–3882. PMLR, 2020.\n\n- Lin et al. \\[2022\\]\nQ. Lin, S. Yu, K. Sun, W. Zhao, O. Alfarraj, A. Tolba, and F. Xia.\n\nRobust graph neural networks via ensemble learning.\n\n_Mathematics_, 10(8):1300, 2022.\n\n- Mandelzweig and Tabakin \\[2001\\]\nV. Mandelzweig and F. Tabakin.\n\nQuasilinearization approach to nonlinear problems in physics with application to nonlinear odes.\n\n_Computer Physics Communications_, 141(2):268–281, 2001.\n\n- Pham \\[2009\\]\nH. Pham.\n\n_Continuous-time Stochastic Control and Optimization with Financial Applications_.\n\nSpringer Publishing Company, Incorporated, 1st edition, 2009.\n\nISBN 3540894993.\n\n- Poli et al. \\[2019\\]\nM. Poli, S. Massaroli, J. Park, A. Yamashita, H. Asama, and J. Park.\n\nGraph neural ordinary differential equations.\n\n_arXiv preprint arXiv:1911.07532_, 2019.\n\n- Quach et al. \\[2007\\]\nM. Quach, N. Brunel, and F. d’Alché Buc.\n\nEstimating parameters and hidden variables in non-linear state-space models based on odes for biological networks inference.\n\n_Bioinformatics_, 23(23):3209–3216, 2007.\n\n- Rößler \\[2010\\]\nA. Rößler.\n\nRunge–kutta methods for the strong approximation of solutions of stochastic differential equations.\n\n_SIAM Journal on Numerical Analysis_, 48(3):922–952, 2010.\n\n- Xu et al. \\[2022\\]\nW. Xu, R. T. Chen, X. Li, and D. Duvenaud.\n\nInfinitely deep bayesian neural networks with stochastic differential equations.\n\nIn _International Conference on Artificial Intelligence and Statistics_, pages 721–738. PMLR, 2022.\n\n\n## Appendix A Theoretical Remarks\n\n### A.1 Notation\n\nLet 𝒢=(𝒱,ℰ)𝒢𝒱ℰ\\\\mathcal{G}=(\\\\mathcal{V},\\\\mathcal{E}) denote a graph with node set 𝒱𝒱\\\\mathcal{V} and edge set ℰℰ\\\\mathcal{E}. The node feature matrix at time t𝑡t is 𝐇​(t)∈ℝn×d𝐇𝑡superscriptℝ𝑛𝑑\\\\mathbf{H}(t)\\\\in\\\\mathbb{R}^{n\\\\times d}, where n𝑛n is the number of nodes and d𝑑d is the feature dimension. The evolution of 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) is described by a Graph Neural Stochastic Differential Equation, with drift function 𝐅𝒢​(𝐇​(t),t,𝜽)subscript𝐅𝒢𝐇𝑡𝑡𝜽\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\boldsymbol{\\\\theta}) and diffusion function 𝐆𝒢​(𝐇​(t),t)subscript𝐆𝒢𝐇𝑡𝑡\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t). Here, 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} depends on the graph 𝒢𝒢\\\\mathcal{G}, the node features 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t), time t𝑡t, and parameters 𝜽𝜽\\\\boldsymbol{\\\\theta}. The diffusion function 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}} depends on 𝒢𝒢\\\\mathcal{G} and 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) but not on 𝜽𝜽\\\\boldsymbol{\\\\theta}, as in practice, this is usually a constant function. The randomness is introduced through the Brownian motion 𝐖​(t)𝐖𝑡\\\\mathbf{W}(t).\n\nThe constants Lfsubscript𝐿𝑓L\\_{f} and Lgsubscript𝐿𝑔L\\_{g} are Lipschitz constants for the drift and diffusion functions, respectively, ensuring the existence and uniqueness of the solution to the GNSDE. The linear growth condition is controlled by a constant K𝐾K, preventing unbounded growth in 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} and 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}}. Finally, Var​(𝐇​(t))Var𝐇𝑡\\\\text{Var}(\\\\mathbf{H}(t)) represents the variance of the node features, capturing the aleatoric uncertainty in the system, which is also reflected in the variance of the model output 𝐲​(t)=𝐡​(𝐇​(t))𝐲𝑡𝐡𝐇𝑡\\\\mathbf{y}(t)=\\\\mathbf{h}(\\\\mathbf{H}(t)).\n\n### A.2 Technical Assumptions\n\n###### Assumption 1.\n\nThe drift and diffusion functions 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} and 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}} satisfy the following Lipschitz conditions:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ‖𝐅𝒢​(𝐇1​(t),t,𝜽)−𝐅𝒢​(𝐇2​(t),t,𝜽)‖Fsubscriptnormsubscript𝐅𝒢subscript𝐇1𝑡𝑡𝜽subscript𝐅𝒢subscript𝐇2𝑡𝑡𝜽𝐹\\\\displaystyle\\\\\\|\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t,\\\\boldsymbol{\\\\theta})-\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t,\\\\boldsymbol{\\\\theta})\\\\\\|\\_{F} | ≤Lf​‖𝐇1​(t)−𝐇2​(t)‖Fabsentsubscript𝐿𝑓subscriptnormsubscript𝐇1𝑡subscript𝐇2𝑡𝐹\\\\displaystyle\\\\leq L\\_{f}\\\\\\|\\\\mathbf{H}\\_{1}(t)-\\\\mathbf{H}\\_{2}(t)\\\\\\|\\_{F} |  | (2) |\n|  | ‖𝐆𝒢​(𝐇1​(t),t)−𝐆𝒢​(𝐇2​(t),t)‖Fsubscriptnormsubscript𝐆𝒢subscript𝐇1𝑡𝑡subscript𝐆𝒢subscript𝐇2𝑡𝑡𝐹\\\\displaystyle\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t)-\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t)\\\\\\|\\_{F} | ≤Lg​‖𝐇1​(t)−𝐇2​(t)‖Fabsentsubscript𝐿𝑔subscriptnormsubscript𝐇1𝑡subscript𝐇2𝑡𝐹\\\\displaystyle\\\\leq L\\_{g}\\\\\\|\\\\mathbf{H}\\_{1}(t)-\\\\mathbf{H}\\_{2}(t)\\\\\\|\\_{F} |  | (3) |\n\nfor all 𝐇1,𝐇2∈ℝn×dsubscript𝐇1subscript𝐇2superscriptℝ𝑛𝑑\\\\mathbf{H}\\_{1},\\\\mathbf{H}\\_{2}\\\\in\\\\mathbb{R}^{n\\\\times d}, t∈\\[0,T\\]𝑡0𝑇t\\\\in\\[0,T\\], and some constants Lfsubscript𝐿𝑓L\\_{f} and Lgsubscript𝐿𝑔L\\_{g}.\n\n###### Assumption 2.\n\nThe drift and diffusion functions 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} and 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}} satisfy a linear growth condition:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‖𝐅𝒢​(𝐇​(t),t,𝜽)‖F2+‖𝐆𝒢​(𝐇​(t),t)‖F2≤K​(1+‖𝐇​(t)‖F2),superscriptsubscriptnormsubscript𝐅𝒢𝐇𝑡𝑡𝜽𝐹2superscriptsubscriptnormsubscript𝐆𝒢𝐇𝑡𝑡𝐹2𝐾1superscriptsubscriptnorm𝐇𝑡𝐹2\\\\\\|\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\boldsymbol{\\\\theta})\\\\\\|\\_{F}^{2}+\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\\\|\\_{F}^{2}\\\\leq K(1+\\\\\\|\\\\mathbf{H}(t)\\\\\\|\\_{F}^{2}), |  |\n\nfor all 𝐇∈ℝn×d𝐇superscriptℝ𝑛𝑑\\\\mathbf{H}\\\\in\\\\mathbb{R}^{n\\\\times d}, t∈\\[0,T\\]𝑡0𝑇t\\\\in\\[0,T\\], and some constant K𝐾K.\n\n###### Assumption 3.\n\nThe variance of the initial conditions, 𝐇​(0)=𝐇0𝐇0subscript𝐇0\\\\mathbf{H}(0)=\\\\mathbf{H}\\_{0}, of the dynamical system is bounded: 𝔼​\\[‖𝐇0‖F2\\]<∞𝔼delimited-\\[\\]superscriptsubscriptnormsubscript𝐇0𝐹2\\\\mathbb{E}\\[\\\\\\|\\\\mathbf{H}\\_{0}\\\\\\|\\_{F}^{2}\\]<\\\\infty.\n\n### A.3 Proofs\n\n###### Lemma 3.\n\nUnder assumptions [1](https://ar5iv.org/html/2408.16115#Thmassumption1 \"Assumption 1. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")- [3](https://ar5iv.org/html/2408.16115#Thmassumption3 \"Assumption 3. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"), there exists a unique strong solution to a Graph Neural SDE of the form:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t,𝜽)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),𝑑𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡𝜽𝑑𝑡subscript𝐆𝒢𝐇𝑡𝑡𝑑𝐖𝑡d\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\boldsymbol{\\\\theta})\\\\,dt+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,d\\\\mathbf{W}(t), |  |\n\nwhose variance bounds the variance of the model output 𝐲​(t)𝐲𝑡\\\\mathbf{y}(t) as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | Var​(𝐲​(t))≤Lh2​Var​(𝐇​(t)),Var𝐲𝑡subscriptsuperscript𝐿2ℎVar𝐇𝑡\\\\text{Var}(\\\\mathbf{y}(t))\\\\leq L^{2}\\_{h}\\\\text{Var}(\\\\mathbf{H}(t)), |  |\n\nhence providing a meaningful measure of the total uncertainty.\n\n###### Proof.\n\nUsing standard results from the theory of SDEs Pham \\[ [2009](https://ar5iv.org/html/2408.16115#bib.bib12 \"\")\\] applied to graph SDEs, it follows that the Lipschitz conditions of 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} and 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}} ensure the existence and uniqueness of a strong solution 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) to the GNSDE.\n\nNow, consider the stochastic part of the variance of the solution. By applying the Itô isometry, we can compute the expectation of the Frobenius norm of the stochastic integral:\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝔼​\\[‖∫0t𝐆𝒢​(𝐇​(u),u)​𝑑𝐖​(u)‖F2\\]=𝔼​\\[∫0t‖𝐆𝒢​(𝐇​(u),u)‖F2​𝑑u\\].𝔼delimited-\\[\\]superscriptsubscriptnormsuperscriptsubscript0𝑡subscript𝐆𝒢𝐇𝑢𝑢differential-d𝐖𝑢𝐹2𝔼delimited-\\[\\]superscriptsubscript0𝑡superscriptsubscriptnormsubscript𝐆𝒢𝐇𝑢𝑢𝐹2differential-d𝑢\\\\mathbb{E}\\\\left\\[\\\\left\\\\\\|\\\\int\\_{0}^{t}\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)d\\\\mathbf{W}(u)\\\\right\\\\\\|\\_{F}^{2}\\\\right\\]=\\\\mathbb{E}\\\\left\\[\\\\int\\_{0}^{t}\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\\\|\\_{F}^{2}du\\\\right\\]. |  |\n\nUnder the Lipschitz condition on 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}}, we can bound the variance of 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) as follows:\n\n|     |     |     |\n| --- | --- | --- |\n|  | Var​(𝐇​(t))=∫0t‖𝐆𝒢​(𝐇​(u),u)‖F2​𝑑u.Var𝐇𝑡superscriptsubscript0𝑡superscriptsubscriptnormsubscript𝐆𝒢𝐇𝑢𝑢𝐹2differential-d𝑢\\\\text{Var}(\\\\mathbf{H}(t))=\\\\int\\_{0}^{t}\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\\\|\\_{F}^{2}du. |  |\n\nIf 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}} is bounded, i.e., ‖𝐆𝒢​(𝐇​(u),u)‖F≤Msubscriptnormsubscript𝐆𝒢𝐇𝑢𝑢𝐹𝑀\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\\\|\\_{F}\\\\leq M for some constant M𝑀M, then Var​(𝐇​(t))≤M2​tVar𝐇𝑡superscript𝑀2𝑡\\\\text{Var}(\\\\mathbf{H}(t))\\\\leq M^{2}t. This shows that the variance of the latent state 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) is bounded and grows linearly with time, capturing the aleatoric uncertainty introduced by the stochastic process.\n\nFinally, assuming that the model output 𝐲​(t)𝐲𝑡\\\\mathbf{y}(t) is a function of the latent state 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t), 𝐲​(t)=𝐡​(𝐇​(t))𝐲𝑡𝐡𝐇𝑡\\\\mathbf{y}(t)=\\\\mathbf{h}(\\\\mathbf{H}(t)), where 𝐡:ℝn×d→ℝn×p:𝐡→superscriptℝ𝑛𝑑superscriptℝ𝑛𝑝\\\\mathbf{h}:\\\\mathbb{R}^{n\\\\times d}\\\\rightarrow\\\\mathbb{R}^{n\\\\times p} is a smooth function, we can apply Itô’s Lemma as follows:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​y​(t)=h′​(𝐇​(t))​\\[𝐅𝒢​(𝐇​(t),t,𝜽)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t)\\]+12​h′′​(𝐇​(t))​𝐆𝒢​(𝐇​(t),t)2​d​t.𝑑𝑦𝑡superscriptℎ′𝐇𝑡delimited-\\[\\]subscript𝐅𝒢𝐇𝑡𝑡𝜽𝑑𝑡subscript𝐆𝒢𝐇𝑡𝑡𝑑𝐖𝑡12superscriptℎ′′𝐇𝑡subscript𝐆𝒢superscript𝐇𝑡𝑡2𝑑𝑡dy(t)=h^{\\\\prime}(\\\\mathbf{H}(t))\\\\left\\[\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\boldsymbol{\\\\theta})\\\\,dt+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,d\\\\mathbf{W}(t)\\\\right\\]+\\\\frac{1}{2}h^{\\\\prime\\\\prime}(\\\\mathbf{H}(t))\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)^{2}\\\\,dt. |  |\n\nFor the variance of 𝐲​(t)𝐲𝑡\\\\mathbf{y}(t), we focus on the term involving 𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t)subscript𝐆𝒢𝐇𝑡𝑡𝑑𝐖𝑡\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,d\\\\mathbf{W}(t):\n\n|     |     |     |\n| --- | --- | --- |\n|  | Var​(𝐲​(t))=∫0ttr​(𝐡′​(𝐇​(u))⊤​𝐆𝒢​(𝐇​(u),u)​𝐆𝒢​(𝐇​(u),u)⊤​𝐡′​(𝐇​(u)))​𝑑u.Var𝐲𝑡superscriptsubscript0𝑡trsuperscript𝐡′superscript𝐇𝑢topsubscript𝐆𝒢𝐇𝑢𝑢subscript𝐆𝒢superscript𝐇𝑢𝑢topsuperscript𝐡′𝐇𝑢differential-d𝑢\\\\text{Var}(\\\\mathbf{y}(t))=\\\\int\\_{0}^{t}\\\\text{tr}\\\\left(\\\\mathbf{h}^{\\\\prime}(\\\\mathbf{H}(u))^{\\\\top}\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)^{\\\\top}\\\\mathbf{h}^{\\\\prime}(\\\\mathbf{H}(u))\\\\right)du. |  |\n\nUsing the Cauchy-Schwarz inequality for matrix norms, we can bound this as follows:\n\n|     |     |     |\n| --- | --- | --- |\n|  | tr​(𝐡′​(𝐇​(u))⊤​𝐆𝒢​(𝐇​(u),u)​𝐆𝒢​(𝐇​(u),u)⊤​𝐡′​(𝐇​(u)))≤‖𝐡′​(𝐇​(u))‖F2​‖𝐆𝒢​(𝐇​(u),u)‖F2.trsuperscript𝐡′superscript𝐇𝑢topsubscript𝐆𝒢𝐇𝑢𝑢subscript𝐆𝒢superscript𝐇𝑢𝑢topsuperscript𝐡′𝐇𝑢superscriptsubscriptnormsuperscript𝐡′𝐇𝑢𝐹2superscriptsubscriptnormsubscript𝐆𝒢𝐇𝑢𝑢𝐹2\\\\text{tr}\\\\left(\\\\mathbf{h}^{\\\\prime}(\\\\mathbf{H}(u))^{\\\\top}\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)^{\\\\top}\\\\mathbf{h}^{\\\\prime}(\\\\mathbf{H}(u))\\\\right)\\\\leq\\\\\\|\\\\mathbf{h}^{\\\\prime}(\\\\mathbf{H}(u))\\\\\\|\\_{F}^{2}\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\\\|\\_{F}^{2}. |  |\n\nTherefore, if 𝐡𝐡\\\\mathbf{h} is Lipschitz continuous with constant Lhsubscript𝐿ℎL\\_{h}, then:\n\n|     |     |     |\n| --- | --- | --- |\n|  | Var​(𝐲​(t))≤Lh2​∫0t‖𝐆𝒢​(𝐇​(u),u)‖F2​𝑑u=Lh2​Var​(𝐇​(t)).Var𝐲𝑡superscriptsubscript𝐿ℎ2superscriptsubscript0𝑡superscriptsubscriptnormsubscript𝐆𝒢𝐇𝑢𝑢𝐹2differential-d𝑢subscriptsuperscript𝐿2ℎVar𝐇𝑡\\\\text{Var}(\\\\mathbf{y}(t))\\\\leq L\\_{h}^{2}\\\\int\\_{0}^{t}\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\\\|\\_{F}^{2}du=L^{2}\\_{h}\\\\text{Var}(\\\\mathbf{H}(t)). |  |\n\nHence, under the Lipschitz continuity and boundedness assumptions for the drift and diffusion functions, the solution to the GNSDE exists and is unique, and its output variance serves as a meaningful measure of aleatoric uncertainty.\n∎\n\n###### Lemma 4.\n\nUnder assumptions [1](https://ar5iv.org/html/2408.16115#Thmassumption1 \"Assumption 1. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")- [3](https://ar5iv.org/html/2408.16115#Thmassumption3 \"Assumption 3. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"), consider two initial conditions 𝐇0subscript𝐇0\\\\mathbf{H}\\_{0} and 𝐇~0=𝐇0+δ​𝐇​(0)subscript~𝐇0subscript𝐇0𝛿𝐇0\\\\tilde{\\\\mathbf{H}}\\_{0}=\\\\mathbf{H}\\_{0}+\\\\delta\\\\mathbf{H}(0), where δ​𝐇​(0)∈ℝn×d𝛿𝐇0superscriptℝ𝑛𝑑\\\\delta\\\\mathbf{H}(0)\\\\in\\\\mathbb{R}^{n\\\\times d} represents a small perturbation in the initial node features with ‖δ​𝐇​(0)‖F=ϵsubscriptnorm𝛿𝐇0𝐹italic-ϵ\\\\\\|\\\\delta\\\\mathbf{H}(0)\\\\\\|\\_{F}=\\\\epsilon. Assume that 𝐇0subscript𝐇0\\\\mathbf{H}\\_{0} is taken from a compact set ℋ⊆ℝn×dℋsuperscriptℝ𝑛𝑑\\\\mathcal{H}\\\\subseteq\\\\mathbb{R}^{n\\\\times d}. Then, the deviation between the solutions 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) and 𝐇~​(t)~𝐇𝑡\\\\tilde{\\\\mathbf{H}}(t) of the Graph Neural SDE with these initial conditions remains bounded across time t𝑡t, specifically:\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝔼​\\[‖𝐇​(t)−𝐇~​(t)‖F\\]≤ϵ​e(Lf+12​Lg2)​t.𝔼delimited-\\[\\]subscriptnorm𝐇𝑡~𝐇𝑡𝐹italic-ϵsuperscript𝑒subscript𝐿𝑓12superscriptsubscript𝐿𝑔2𝑡\\\\mathbb{E}\\[\\\\\\|\\\\mathbf{H}(t)-\\\\tilde{\\\\mathbf{H}}(t)\\\\\\|\\_{F}\\]\\\\leq\\\\epsilon e^{(L\\_{f}+\\\\frac{1}{2}L\\_{g}^{2})t}. |  |\n\n###### Proof.\n\nConsider two solutions 𝐇1​(t)subscript𝐇1𝑡\\\\mathbf{H}\\_{1}(t) and 𝐇2​(t)subscript𝐇2𝑡\\\\mathbf{H}\\_{2}(t) of the GNSDE with different initial conditions. Define the initial perturbation as δ​𝐇​(0)𝛿𝐇0\\\\delta\\\\mathbf{H}(0) where 𝐇1​(0)=𝐇0+δ​𝐇​(0)subscript𝐇10subscript𝐇0𝛿𝐇0\\\\mathbf{H}\\_{1}(0)=\\\\mathbf{H}\\_{0}+\\\\delta\\\\mathbf{H}(0) and 𝐇2​(0)=𝐇0subscript𝐇20subscript𝐇0\\\\mathbf{H}\\_{2}(0)=\\\\mathbf{H}\\_{0}, with ‖δ​𝐇​(0)‖F=ϵsubscriptnorm𝛿𝐇0𝐹italic-ϵ\\\\\\|\\\\delta\\\\mathbf{H}(0)\\\\\\|\\_{F}=\\\\epsilon.\n\nThe difference between the two solutions at any time t𝑡t is given by δ​𝐇​(t)=𝐇1​(t)−𝐇2​(t)𝛿𝐇𝑡subscript𝐇1𝑡subscript𝐇2𝑡\\\\delta\\\\mathbf{H}(t)=\\\\mathbf{H}\\_{1}(t)-\\\\mathbf{H}\\_{2}(t). The dynamics of δ​𝐇​(t)𝛿𝐇𝑡\\\\delta\\\\mathbf{H}(t) are:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​(δ​𝐇​(t))=\\[𝐅𝒢​(𝐇1​(t),t,𝜽)−𝐅𝒢​(𝐇2​(t),t,𝜽)\\]​d​t+\\[𝐆𝒢​(𝐇1​(t),t)−𝐆𝒢​(𝐇2​(t),t)\\]​d​𝐖​(t).𝑑𝛿𝐇𝑡delimited-\\[\\]subscript𝐅𝒢subscript𝐇1𝑡𝑡𝜽subscript𝐅𝒢subscript𝐇2𝑡𝑡𝜽𝑑𝑡delimited-\\[\\]subscript𝐆𝒢subscript𝐇1𝑡𝑡subscript𝐆𝒢subscript𝐇2𝑡𝑡𝑑𝐖𝑡d(\\\\delta\\\\mathbf{H}(t))=\\\\left\\[\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t,\\\\boldsymbol{\\\\theta})-\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t,\\\\boldsymbol{\\\\theta})\\\\right\\]dt+\\\\left\\[\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t)-\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t)\\\\right\\]d\\\\mathbf{W}(t). |  |\n\nApplying Itô’s Lemma to tr​(δ​𝐇​(t)⊤​δ​𝐇​(t))tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t)), we obtain:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​(tr​(δ​𝐇​(t)⊤​δ​𝐇​(t)))𝑑tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡\\\\displaystyle d(\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t))) | =2​tr​(δ​𝐇​(t)⊤​\\[𝐅𝒢​(𝐇1​(t),t,𝜽)−𝐅𝒢​(𝐇2​(t),t,𝜽)\\])​d​tabsent2tr𝛿𝐇superscript𝑡topdelimited-\\[\\]subscript𝐅𝒢subscript𝐇1𝑡𝑡𝜽subscript𝐅𝒢subscript𝐇2𝑡𝑡𝜽𝑑𝑡\\\\displaystyle=2\\\\text{tr}\\\\left(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\left\\[\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t,\\\\boldsymbol{\\\\theta})-\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t,\\\\boldsymbol{\\\\theta})\\\\right\\]\\\\right)dt |  |\n|  |  | +2​tr​(δ​𝐇​(t)⊤​\\[𝐆𝒢​(𝐇1​(t),t)−𝐆𝒢​(𝐇2​(t),t)\\]​d​𝐖​(t))2tr𝛿𝐇superscript𝑡topdelimited-\\[\\]subscript𝐆𝒢subscript𝐇1𝑡𝑡subscript𝐆𝒢subscript𝐇2𝑡𝑡𝑑𝐖𝑡\\\\displaystyle+2\\\\text{tr}\\\\left(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\left\\[\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t)-\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t)\\\\right\\]d\\\\mathbf{W}(t)\\\\right) |  |\n|  |  | +tr​(\\[𝐆𝒢​(𝐇1​(t),t)−𝐆𝒢​(𝐇2​(t),t)\\]⊤​\\[𝐆𝒢​(𝐇1​(t),t)−𝐆𝒢​(𝐇2​(t),t)\\])​d​t.trsuperscriptdelimited-\\[\\]subscript𝐆𝒢subscript𝐇1𝑡𝑡subscript𝐆𝒢subscript𝐇2𝑡𝑡topdelimited-\\[\\]subscript𝐆𝒢subscript𝐇1𝑡𝑡subscript𝐆𝒢subscript𝐇2𝑡𝑡𝑑𝑡\\\\displaystyle+\\\\text{tr}\\\\left(\\\\left\\[\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t)-\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t)\\\\right\\]^{\\\\top}\\\\left\\[\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t)-\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t)\\\\right\\]\\\\right)dt. |  |\n\nTaking the expected value, the stochastic integral term involving d​𝐖​(t)𝑑𝐖𝑡d\\\\mathbf{W}(t) has an expectation of zero due to the properties of the Brownian motion. Thus, we have:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝔼​\\[d​(tr​(δ​𝐇​(t)⊤​δ​𝐇​(t)))\\]𝔼delimited-\\[\\]𝑑tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡\\\\displaystyle\\\\mathbb{E}\\[d(\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t)))\\] | =𝔼​\\[2​tr​(δ​𝐇​(t)⊤​\\[𝐅𝒢​(𝐇1​(t),t,𝜽)−𝐅𝒢​(𝐇2​(t),t,𝜽)\\])\\]​d​tabsent𝔼delimited-\\[\\]2tr𝛿𝐇superscript𝑡topdelimited-\\[\\]subscript𝐅𝒢subscript𝐇1𝑡𝑡𝜽subscript𝐅𝒢subscript𝐇2𝑡𝑡𝜽𝑑𝑡\\\\displaystyle=\\\\mathbb{E}\\\\left\\[2\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\[\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t,\\\\boldsymbol{\\\\theta})-\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t,\\\\boldsymbol{\\\\theta})\\])\\\\right\\]\\\\,dt |  |\n|  |  | +𝔼​\\[‖𝐆𝒢​(𝐇1​(t),t)−𝐆𝒢​(𝐇2​(t),t)‖F2\\]​d​t.𝔼delimited-\\[\\]superscriptsubscriptnormsubscript𝐆𝒢subscript𝐇1𝑡𝑡subscript𝐆𝒢subscript𝐇2𝑡𝑡𝐹2𝑑𝑡\\\\displaystyle+\\\\mathbb{E}\\[\\\\\\|\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{1}(t),t)-\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{2}(t),t)\\\\\\|\\_{F}^{2}\\]\\\\,dt. |  |\n\nHere, the second term arises from the variance of the diffusion term, as captured by Itô’s Lemma. Using the Lipschitz bounds for 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} and 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}}, we obtain:\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝔼​\\[d​(tr​(δ​𝐇​(t)⊤​δ​𝐇​(t)))\\]≤(2​Lf​𝔼​\\[tr​(δ​𝐇​(t)⊤​δ​𝐇​(t))\\]+Lg2​𝔼​\\[tr​(δ​𝐇​(t)⊤​δ​𝐇​(t))\\])​d​t.𝔼delimited-\\[\\]𝑑tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡2subscript𝐿𝑓𝔼delimited-\\[\\]tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡superscriptsubscript𝐿𝑔2𝔼delimited-\\[\\]tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡𝑑𝑡\\\\mathbb{E}\\[d(\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t)))\\]\\\\leq(2L\\_{f}\\\\mathbb{E}\\[\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t))\\]+L\\_{g}^{2}\\\\mathbb{E}\\[\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t))\\])\\\\,dt. |  |\n\nRewriting this as a differential inequality:\n\n|     |     |     |\n| --- | --- | --- |\n|  | dd​t​𝔼​\\[tr​(δ​𝐇​(t)⊤​δ​𝐇​(t))\\]≤(2​Lf+Lg2)​𝔼​\\[tr​(δ​𝐇​(t)⊤​δ​𝐇​(t))\\].𝑑𝑑𝑡𝔼delimited-\\[\\]tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡2subscript𝐿𝑓superscriptsubscript𝐿𝑔2𝔼delimited-\\[\\]tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡\\\\frac{d}{dt}\\\\mathbb{E}\\[\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t))\\]\\\\leq(2L\\_{f}+L\\_{g}^{2})\\\\mathbb{E}\\[\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t))\\]. |  |\n\nSolving this using Gronwall’s inequality gives:\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝔼​\\[tr​(δ​𝐇​(t)⊤​δ​𝐇​(t))\\]≤tr​(δ​𝐇​(0)⊤​δ​𝐇​(0))​e(2​Lf+Lg2)​t.𝔼delimited-\\[\\]tr𝛿𝐇superscript𝑡top𝛿𝐇𝑡tr𝛿𝐇superscript0top𝛿𝐇0superscript𝑒2subscript𝐿𝑓superscriptsubscript𝐿𝑔2𝑡\\\\mathbb{E}\\[\\\\text{tr}(\\\\delta\\\\mathbf{H}(t)^{\\\\top}\\\\delta\\\\mathbf{H}(t))\\]\\\\leq\\\\text{tr}(\\\\delta\\\\mathbf{H}(0)^{\\\\top}\\\\delta\\\\mathbf{H}(0))e^{(2L\\_{f}+L\\_{g}^{2})t}. |  |\n\nSince ‖δ​𝐇​(0)‖F=ϵsubscriptnorm𝛿𝐇0𝐹italic-ϵ\\\\\\|\\\\delta\\\\mathbf{H}(0)\\\\\\|\\_{F}=\\\\epsilon, we conclude that:\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝔼​\\[‖δ​𝐇​(t)‖F\\]≤ϵ​e(Lf+12​Lg2)​t.𝔼delimited-\\[\\]subscriptnorm𝛿𝐇𝑡𝐹italic-ϵsuperscript𝑒subscript𝐿𝑓12superscriptsubscript𝐿𝑔2𝑡\\\\mathbb{E}\\[\\\\\\|\\\\delta\\\\mathbf{H}(t)\\\\\\|\\_{F}\\]\\\\leq\\\\epsilon e^{(L\\_{f}+\\\\frac{1}{2}L\\_{g}^{2})t}. |  |\n\nHence, the deviation in the output remains bounded under small perturbations to the initial conditions, providing robustness guarantees.\n∎\n\n### A.4 GNSDE as a Continuous Representation of Graph ResNet with Stochastic Noise Insertion\n\nConsider a Graph Neural Stochastic Differential Equation (GNSDE) represented as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),𝑑𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡𝑑𝑡subscript𝐆𝒢𝐇𝑡𝑡𝑑𝐖𝑡d\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)dt+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)d\\\\mathbf{W}(t), |  |\n\nwhere 𝐇​(t)∈ℝn×d𝐇𝑡superscriptℝ𝑛𝑑\\\\mathbf{H}(t)\\\\in\\\\mathbb{R}^{n\\\\times d}, 𝐅𝒢​(𝐇​(t),t)subscript𝐅𝒢𝐇𝑡𝑡\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t), and 𝐆𝒢​(𝐇​(t),t)subscript𝐆𝒢𝐇𝑡𝑡\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t) are matrix-valued functions, and 𝐖​(t)𝐖𝑡\\\\mathbf{W}(t) is a Brownian motion. The numerical Euler-Maruyama discretization of this GNSDE can be expressed as\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝐇​(tj+1)−𝐇​(tj)Δ​t≈𝐅𝒢​(𝐇​(tj),tj)+𝐆𝒢​(𝐇​(tj),tj)​Δ​𝐖jΔ​t,𝐇subscript𝑡𝑗1𝐇subscript𝑡𝑗Δ𝑡subscript𝐅𝒢𝐇subscript𝑡𝑗subscript𝑡𝑗subscript𝐆𝒢𝐇subscript𝑡𝑗subscript𝑡𝑗Δsubscript𝐖𝑗Δ𝑡\\\\frac{\\\\mathbf{H}(t\\_{j+1})-\\\\mathbf{H}(t\\_{j})}{\\\\Delta t}\\\\approx\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t\\_{j}),t\\_{j})+\\\\frac{\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t\\_{j}),t\\_{j})\\\\Delta\\\\mathbf{W}\\_{j}}{\\\\Delta t}, |  |\n\nwhich simplifies to\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝐇j+1=𝐇j+𝐅𝒢​(𝐇j,tj)​Δ​t+𝐆𝒢​(𝐇j,tj)​Δ​𝐖j.subscript𝐇𝑗1subscript𝐇𝑗subscript𝐅𝒢subscript𝐇𝑗subscript𝑡𝑗Δ𝑡subscript𝐆𝒢subscript𝐇𝑗subscript𝑡𝑗Δsubscript𝐖𝑗\\\\mathbf{H}\\_{j+1}=\\\\mathbf{H}\\_{j}+\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{j},t\\_{j})\\\\Delta t+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}\\_{j},t\\_{j})\\\\Delta\\\\mathbf{W}\\_{j}. |  |\n\nHere, Δ​tΔ𝑡\\\\Delta t represents a fixed time step and Δ​𝐖jΔsubscript𝐖𝑗\\\\Delta\\\\mathbf{W}\\_{j} is a Brownian increment, normally distributed with mean zero and variance Δ​tΔ𝑡\\\\Delta t. This numerical discretization is analogous to a Graph Residual Network (Graph ResNet) with a specific structure, where Brownian noise is injected at each residual layer. Therefore, the Graph Neural SDE can be interpreted as a deep Graph ResNet where the depth corresponds to the number of discretization steps of the SDE solver.\n\n## Appendix B Details of The Experimental Setup\n\nTable 2: Uniform Hyperparameters of the LGNSDE, GNODE, Bayesian GCN, GCN, Ensemble of GCN models for all datasets.\n\n| Parameter | GNSDE | GNODE | Other |\n| --- | --- | --- | --- |\n| Datasets | All | All | All |\n| --- | --- | --- | --- |\n| t1subscript𝑡1t\\_{1} | 1 | 1 | n/a |\n| --- | --- | --- | --- |\n| Hidden Dimensions | 64 | 64 | 64 |\n| --- | --- | --- | --- |\n| Learning Rate | 0.01 | 0.01 | 0.01 |\n| Optimizer | adam | adam | adam |\n| Method | SRK | SK4 | n/a |\n| Dropout | 0.2 | 0.2 | 0.2 |\n| Diffusion g | 1.0 | n/a | n/a |\n\n| Metric | Model | Cora | Citeseer | Computers | Photo | Pubmed |\n| MICRO-AUROC (↑) | GCN | 0.9654 ± 0.0050 | 0.9173 ± 0.0068 | 0.9680 ± 0.0016 | 0.9905 ± 0.0003 | 0.9006 ± 0.0139 |\n| GNODE | nan ± nan | 0.9146 ± 0.0063 | 0.9569 ± 0.0067 | 0.9885 ± 0.0007 | 0.8857 ± 0.0203 |\n| BGCN | 0.9571 ± 0.0092 | 0.9099 ± 0.0090 | 0.9421 ± 0.0097 | 0.9489 ± 0.0189 | 0.7030 ± 0.1331 |\n| ENSEMBLE | 0.9635 ± 0.0031 | 0.9181 ± 0.0062 | 0.9669 ± 0.0025 | 0.9886 ± 0.0004 | 0.8785 ± 0.0163 |\n| LGNSDE (Our) | 0.9667 ± 0.0036 | 0.9111 ± 0.0072 | 0.9691 ± 0.0032 | 0.9909 ± 0.0004 | 0.9007 ± 0.0091 |\n| AURC (↓) | GCN | 0.9966 ± 0.0007 | 0.9966 ± 0.0011 | 0.9994 ± 0.0005 | 0.9987 ± 0.0015 | 0.9994 ± 0.0004 |\n| GNODE | nan ± nan | 0.9967 ± 0.0011 | 0.9994 ± 0.0004 | 0.9998 ± 0.0001 | 0.9915 ± 0.0163 |\n| BGCN | 0.9972 ± 0.0004 | 0.9963 ± 0.0010 | 0.9994 ± 0.0002 | 0.9989 ± 0.0005 | 0.9996 ± 0.0004 |\n| ENSEMBLE | 0.9970 ± 0.0012 | 0.9967 ± 0.0012 | 0.9994 ± 0.0002 | 0.9989 ± 0.0006 | 0.9996 ± 0.0005 |\n| LGNSDE (Our) | 0.9970 ± 0.0003 | 0.9971 ± 0.0005 | 0.9995 ± 0.0003 | 0.9997 ± 0.0002 | 0.9995 ± 0.0005 |\n| Accuracy (↑) | GCN | 0.8105 ± 0.0173 | 0.7258 ± 0.0137 | 0.8098 ± 0.0048 | 0.9116 ± 0.0021 | 0.7570 ± 0.0229 |\n| GNODE | nan ± nan | 0.7235 ± 0.0159 | 0.7911 ± 0.0098 | 0.9053 ± 0.0032 | 0.7577 ± 0.0231 |\n| BGCN | 0.7897 ± 0.0261 | 0.7013 ± 0.0196 | 0.7114 ± 0.0333 | 0.7124 ± 0.0968 | 0.4581 ± 0.1846 |\n| ENSEMBLE | 0.8038 ± 0.0105 | 0.7108 ± 0.0166 | 0.8070 ± 0.0055 | 0.9070 ± 0.0019 | 0.7299 ± 0.0218 |\n| LGNSDE (Our) | 0.8113 ± 0.0128 | 0.7120 ± 0.0119 | 0.8247 ± 0.0103 | 0.9169 ± 0.0021 | 0.7595 ± 0.0168 |\n\nTable 3: AUROC (Mean ± Std), AURC (Mean ± Std), and Accuracy (Mean ± Std) for all datasets.\nRed denotes the best-performing model, and blue denotes the second-best-performing model.\n\n[◄](https://ar5iv.org/html/2408.16114) [![ar5iv homepage](https://ar5iv.org/assets/ar5iv.png)](https://ar5iv.org/) [Feeling\\\\\n\\\\\nlucky?](https://ar5iv.org/feeling_lucky) [Conversion\\\\\n\\\\\nreport](https://ar5iv.org/log/2408.16115) [Report\\\\\n\\\\\nan issue](https://github.com/dginev/ar5iv/issues/new?template=improve-article--arxiv-id-.md&title=Improve+article+2408.16115) [View original\\\\\n\\\\\non arXiv](https://arxiv.org/abs/2408.16115) [►](https://ar5iv.org/html/2408.16116)",
  "sections": {
    "1 Introduction": {
      "content": "Before the widespread of neural networks and the boom in modern machine learning, complex systems in various scientific fields were predominantly modelled using differential equations. Stochastic Differential Equations (SDEs) were the standard approach to incorporating randomness. These methods were foundational across disciplines such as physics, finance, and computational biology (Hoops et al., [2016]; Quach et al., [2007]; Mandelzweig and Tabakin, [2001]; Cardelli, [2008]; Buckdahn et al., [2011]; Cvijovic et al., [2014]).\n\nIn recent years, Graph Neural Networks (GNNs) have become the standard for graph-structured data due to their ability to capture relationships between nodes. They are widely used in social network analysis, molecular biology, and recommendation systems. However, traditional GNNs cannot reliably quantify uncertainty. Both aleatoric (inherent randomness in the data) and epistemic (model uncertainty due to limited knowledge) are essential for decision-making, risk assessment, and resource allocation, making GNNs less applicable in critical applications.\n\nTo address this gap, we propose Latent Graph Neural Stochastic Differential Equations (LGNSDE), a method that perturbs features during both the training and testing phases using Brownian motion noise, allowing for handling noise and aleatoric uncertainty. We also assume a prior SDE latent space and learn a posterior SDE using a GNN. This Bayesian approach to the latent space allows us to quantify epistemic uncertainty. As a result, our model can capture and quantify both epistemic and aleatoric uncertainties. More specifically, our contributions are as follows:\n\n- •\n\n\nWe introduce a novel model class combining SDE robustness with GNN flexibility for handling complex graph-structured data, which quantifies both epistemic and aleatoric uncertainties.\n\n- •\n\n\nWe provide theoretical guarantees demonstrating our model’s ability to provide meaningful uncertainty estimates and its robustness to perturbations in the inputs.\n\n- •\n\n\nWe empirically show that Latent GNSDEs demonstrate exceptional performance in uncertainty quantification, outperforming Bayesian GCNs (Hasanzadeh et al., [2020]), and GCN ensembles (Lin et al., [2022]).",
      "citations": [
        {
          "start_pos": 386,
          "end_pos": 406,
          "text": "Hoops et al., [2016]",
          "paper_id": "bib.bib7",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 408,
          "end_pos": 428,
          "text": "Quach et al., [2007]",
          "paper_id": "bib.bib14",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 430,
          "end_pos": 461,
          "text": "Mandelzweig and Tabakin, [2001]",
          "paper_id": "bib.bib11",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 463,
          "end_pos": 479,
          "text": "Cardelli, [2008]",
          "paper_id": "bib.bib4",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 481,
          "end_pos": 504,
          "text": "Buckdahn et al., [2011]",
          "paper_id": "bib.bib2",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 506,
          "end_pos": 529,
          "text": "Cvijovic et al., [2014]",
          "paper_id": "bib.bib5",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2162,
          "end_pos": 2187,
          "text": "Hasanzadeh et al., [2020]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 2209,
          "end_pos": 2227,
          "text": "Lin et al., [2022]",
          "paper_id": "bib.bib10",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        }
      ]
    },
    "2 Methodology": {
      "content": "Inspired by Graph Neural ODEs (Poli et al., [2019]) and Latent SDEs (Li et al., [2020]), we now introduce our model: Latent Graph Neural SDEs −- LGNSDEs (Figure [1]Figure 1 ‣ 2 Methodology ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")), which use SDEs to define prior and approximate posterior stochastic trajectories for 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t)(Xu et al., [2022]). Furthermore, LGNSDEs can be viewed as the continuous representations of existing discrete architectures ( [A.4]A.4 GNSDE as a Continuous Representation of Graph ResNet with Stochastic Noise Insertion ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")).\n\n![Refer to caption]Figure 1: The diagram illustrates the evolution of input data in the latent space through an SDE, showing the discretization of a sample path (purple line) at three timesteps with corresponding vector fields and graph embeddings. Initially, nodes representing two classes (white and orange) are poorly separated. However, as the model progresses, aggregating features and propagating information through the graph, the vector field helps make the class boundaries more distinct.\n\n### 2.1 Model Definition\n\nLGNSDEs are designed to capture the stochastic latent evolution of 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) on graph-structured data. We use an Ornstein-Uhlenbeck (OU) prior process, represented by:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),d𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡d𝑡subscript𝐆𝒢𝐇𝑡𝑡d𝐖𝑡\\\\text{d}\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,\\\\text{d}t+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,\\\\text{d}\\\\mathbf{W}(t), |  |\n\nwhere we set the drift and diffusion functions, 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} and 𝐆𝒢subscript𝐆𝒢\\\\mathbf{G}\\_{\\\\mathcal{G}}, to constants and consider them hyperparameters. Moreover, d​𝐖​(t)𝑑𝐖𝑡d\\\\mathbf{W}(t) is a Wiener process. The approximate posterior is defined as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t,ϕ)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),d𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡italic-ϕd𝑡subscript𝐆𝒢𝐇𝑡𝑡d𝐖𝑡\\\\text{d}\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\phi)\\\\,\\\\text{d}t+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,\\\\text{d}\\\\mathbf{W}(t), |  | (1) |\n\nwhere 𝐅𝒢subscript𝐅𝒢\\\\mathbf{F}\\_{\\\\mathcal{G}} is parameterized by a GCN with ϕitalic-ϕ\\\\phi representing the learned weights of the neural network. The drift function mainly determines the dynamics of the evolution of the latent state, while the diffusion term 𝐆𝒢​(𝐇​(t))​d​𝐖​(t)subscript𝐆𝒢𝐇𝑡d𝐖𝑡\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t))\\\\,\\\\text{d}\\\\mathbf{W}(t) introduces stochastic elements. With the need to keep the Kullback-Leibler (KL) divergence bounded, we set the diffusion functions of the prior and posterior to be the same \\[Calvo-Ordonez et al. [2024]; Archambeau et al. [2007]\\].\n\nLet 𝐘𝐘\\\\mathbf{Y} be a collection of target variables, e.g., class labels, for some of the graph nodes. Given 𝐘𝐘\\\\mathbf{Y} we train our model with variational inference, with the ELBO computed as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ℒELBO​(ϕ)=𝔼​\\[log⁡p​(𝐘\\|𝐇​(t1))−∫t0t112​‖v​(𝐇​(u),ϕ,θ,𝒢)‖22​d​u\\],subscriptℒELBOitalic-ϕ𝔼delimited-\\[\\]𝑝conditional𝐘𝐇subscript𝑡1superscriptsubscriptsubscript𝑡0subscript𝑡112superscriptsubscriptnorm𝑣𝐇𝑢italic-ϕ𝜃𝒢22d𝑢\\\\mathcal{L}\\_{\\\\text{ELBO}}(\\\\phi)=\\\\mathbb{E}\\\\left\\[\\\\log{p(\\\\mathbf{Y}\\|\\\\mathbf{H}(t\\_{1}))}-\\\\int\\_{t\\_{0}}^{t\\_{1}}\\\\frac{1}{2}\\\\left\\\\\\|v(\\\\mathbf{H}(u),\\\\phi,\\\\theta,\\\\mathcal{G})\\\\right\\\\\\|\\_{2}^{2}\\\\,\\\\text{d}u\\\\right\\], |  |\n\nwhere the expectation is approximated over trajectories of 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) sampled from the approximate posterior SDE, and v=𝐆𝒢​(𝐇​(t))−1​\\[𝐅𝒢,ϕ​(𝐇​(u),u)−𝐅𝒢,θ​(𝐇​(u),u)\\].𝑣subscript𝐆𝒢superscript𝐇𝑡1delimited-\\[\\]subscript𝐅𝒢italic-ϕ𝐇𝑢𝑢subscript𝐅𝒢𝜃𝐇𝑢𝑢v=\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t))^{-1}\\[\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\phi}(\\\\mathbf{H}(u),u)-\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\theta}(\\\\mathbf{H}(u),u)\\].\n\nTo sample 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) from the approximate posterior, we integrate the SDE in Eq. [1]In 2.1 Model Definition ‣ 2 Methodology ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐇​(t1)𝐇subscript𝑡1\\\\displaystyle\\\\mathbf{H}(t\\_{1}) | =𝐇​(t0)+∫t0t1𝐅𝒢,ϕ​(𝐇​(u),u)​d​u+∫t0t1𝐆𝒢​(𝐇​(u),u)​d​𝐖​(u),absent𝐇subscript𝑡0superscriptsubscriptsubscript𝑡0subscript𝑡1subscript𝐅𝒢italic-ϕ𝐇𝑢𝑢d𝑢superscriptsubscriptsubscript𝑡0subscript𝑡1subscript𝐆𝒢𝐇𝑢𝑢d𝐖𝑢\\\\displaystyle=\\\\mathbf{H}(t\\_{0})+\\\\int\\_{t\\_{0}}^{t\\_{1}}\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\phi}(\\\\mathbf{H}(u),u)\\\\,\\\\text{d}u+\\\\int\\_{t\\_{0}}^{t\\_{1}}\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(u),u)\\\\,\\\\text{d}\\\\mathbf{W}(u), |  |\n\nwhere 𝐇​(t0)𝐇subscript𝑡0\\\\mathbf{H}(t\\_{0}) are the node-wise features 𝐗insubscript𝐗in\\\\mathbf{X}\\_{\\\\text{in}} in the graph 𝒢𝒢\\\\mathcal{G}. In practice, this is not feasible since the posterior drift 𝐅𝒢,ϕsubscript𝐅𝒢italic-ϕ\\\\mathbf{F}\\_{\\\\mathcal{G},\\\\phi} is parametrised by a neural network. We numerically solve this integral with a standard Stochastic Runge-Kutta method (Rößler, [2010]). We then use a Monte Carlo approximation to get the expectation of 𝐇​(t0)𝐇subscript𝑡0\\\\mathbf{H}(t\\_{0}) and approximate the posterior predictive distribution as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | p​(𝐘∗\\|𝒢,𝐗in,𝐘)𝑝conditionalsuperscript𝐘𝒢subscript𝐗in𝐘\\\\displaystyle p(\\\\mathbf{Y}^{\\*}\\|\\\\mathcal{G},\\\\mathbf{X}\\_{\\\\text{in}},\\\\mathbf{Y}) | ≈1N​∑n=1Np​(𝐘∗\\|𝐇n​(t1),𝒢),absent1𝑁superscriptsubscript𝑛1𝑁𝑝conditionalsuperscript𝐘subscript𝐇𝑛subscript𝑡1𝒢\\\\displaystyle\\\\approx\\\\frac{1}{N}\\\\sum\\_{n=1}^{N}p\\\\left(\\\\mathbf{Y}^{\\*}\\|\\\\mathbf{H}\\_{n}(t\\_{1}),\\\\mathcal{G}\\\\right), |  |\n\nwhere 𝐇1​(t1),…,𝐇N​(t1)subscript𝐇1subscript𝑡1…subscript𝐇𝑁subscript𝑡1\\\\mathbf{H}\\_{1}(t\\_{1}),\\\\ldots,\\\\mathbf{H}\\_{N}(t\\_{1}) are samples drawn from the approximate posterior p​(𝐇​(t1)\\|𝐘,𝐗in,𝒢)𝑝conditional𝐇subscript𝑡1𝐘subscript𝐗in𝒢p(\\\\mathbf{H}(t\\_{1})\\|\\\\mathbf{Y},\\\\mathbf{X}\\_{\\\\text{in}},\\\\mathcal{G}).\n\nFollowing Poli et al. ( [2019]), we use a similar encoder-decoder setup. Our encoding focuses solely on the features of individual nodes, while the graph structure remains unchanged. Finally, we remark that the memory and time complexity are 𝒪​(\\|ℰ\\|​d+L)𝒪ℰ𝑑𝐿\\\\mathcal{O}(\\|\\\\mathcal{E}\\|d+L) and 𝒪​(L)𝒪𝐿\\\\mathcal{O}(L) respectively, where L𝐿L is the number of SDE solver steps, ℰℰ\\\\mathcal{E} is the number of edges in the graph and d𝑑d is the dimension of the features.",
      "citations": [
        {
          "start_pos": 31,
          "end_pos": 50,
          "text": "Poli et al., [2019]",
          "paper_id": "bib.bib13",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib3"
          ]
        },
        {
          "start_pos": 69,
          "end_pos": 86,
          "text": "Li et al., [2020]",
          "paper_id": "bib.bib9",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 386,
          "end_pos": 403,
          "text": "Xu et al., [2022]",
          "paper_id": "bib.bib16",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 2877,
          "end_pos": 2898,
          "text": "Ordonez et al. [2024]",
          "paper_id": "bib.bib3",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib13"
          ]
        },
        {
          "start_pos": 2900,
          "end_pos": 2924,
          "text": "Archambeau et al. [2007]",
          "paper_id": "bib.bib1",
          "single_citation": false,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5185,
          "end_pos": 5196,
          "text": "ler, [2010]",
          "paper_id": "bib.bib15",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        },
        {
          "start_pos": 6114,
          "end_pos": 6134,
          "text": "Poli et al. ( [2019]",
          "paper_id": "bib.bib13",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": [
            "bib.bib3"
          ]
        }
      ]
    },
    "3 Theoretical Guarantees": {
      "content": "In this section, we present key results on the stability and robustness of our framework under mild assumptions (Appendix [A.2]A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")). Firstly, we address the fundamental question of whether our proposed models provide meaningful uncertainties. By showing that the variance of the model output is bounded by the variance of the latent representation, we highlight the ability of LGNSDEs to capture and quantify the inherent uncertainty in the system. We formalize our findings and summarize them in the following lemma:\n\n###### Lemma 1.\n\nUnder assumptions [1]Assumption 1. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")- [3]Assumption 3. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"), there exists a unique strong solution to a LGNSDE of the form:\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​𝐇​(t)=𝐅𝒢​(𝐇​(t),t,𝜽)​d​t+𝐆𝒢​(𝐇​(t),t)​d​𝐖​(t),𝑑𝐇𝑡subscript𝐅𝒢𝐇𝑡𝑡𝜽𝑑𝑡subscript𝐆𝒢𝐇𝑡𝑡𝑑𝐖𝑡d\\\\mathbf{H}(t)=\\\\mathbf{F}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t,\\\\boldsymbol{\\\\theta})\\\\,dt+\\\\mathbf{G}\\_{\\\\mathcal{G}}(\\\\mathbf{H}(t),t)\\\\,d\\\\mathbf{W}(t), |  |\n\nwhose variance bounds the variance of the model output 𝐲​(t)𝐲𝑡\\\\mathbf{y}(t) as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | Var​(𝐲​(t))≤Lh2​Var​(𝐇​(t)),Var𝐲𝑡subscriptsuperscript𝐿2ℎVar𝐇𝑡\\\\text{Var}(\\\\mathbf{y}(t))\\\\leq L^{2}\\_{h}\\\\text{Var}(\\\\mathbf{H}(t)), |  |\n\nhence providing a meaningful measure of the total uncertainty.\n\nWe now demonstrate the robustness of our framework under small perturbations in the initial conditions. By deriving explicit bounds on the deviation between the perturbed and unperturbed solutions over time, we show that the model’s output remains stable.\n\n###### Lemma 2.\n\nUnder assumptions [1]Assumption 1. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\")- [3]Assumption 3. ‣ A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\"), consider two initial conditions 𝐇0subscript𝐇0\\\\mathbf{H}\\_{0} and 𝐇~0=𝐇0+δ​𝐇​(0)subscript~𝐇0subscript𝐇0𝛿𝐇0\\\\tilde{\\\\mathbf{H}}\\_{0}=\\\\mathbf{H}\\_{0}+\\\\delta\\\\mathbf{H}(0), where δ​𝐇​(0)∈ℝn×d𝛿𝐇0superscriptℝ𝑛𝑑\\\\delta\\\\mathbf{H}(0)\\\\in\\\\mathbb{R}^{n\\\\times d} is a small perturbation in the initial node features with ‖δ​𝐇​(0)‖F=ϵsubscriptnorm𝛿𝐇0𝐹italic-ϵ\\\\\\|\\\\delta\\\\mathbf{H}(0)\\\\\\|\\_{F}=\\\\epsilon. Assume that 𝐇0subscript𝐇0\\\\mathbf{H}\\_{0} is taken from a compact set ℋ⊆ℝn×dℋsuperscriptℝ𝑛𝑑\\\\mathcal{H}\\\\subseteq\\\\mathbb{R}^{n\\\\times d}. Then, the deviation between the solutions 𝐇​(t)𝐇𝑡\\\\mathbf{H}(t) and 𝐇~​(t)~𝐇𝑡\\\\tilde{\\\\mathbf{H}}(t) of the LGNSDE with these initial conditions remains bounded across time t𝑡t, specifically:\n\n|     |     |     |\n| --- | --- | --- |\n|  | 𝔼​\\[‖𝐇​(t)−𝐇~​(t)‖F\\]≤ϵ​e(Lf+12​Lg2)​t.𝔼delimited-\\[\\]subscriptnorm𝐇𝑡~𝐇𝑡𝐹italic-ϵsuperscript𝑒subscript𝐿𝑓12superscriptsubscript𝐿𝑔2𝑡\\\\mathbb{E}\\[\\\\\\|\\\\mathbf{H}(t)-\\\\tilde{\\\\mathbf{H}}(t)\\\\\\|\\_{F}\\]\\\\leq\\\\epsilon e^{(L\\_{f}+\\\\frac{1}{2}L\\_{g}^{2})t}. |  |\n\nIn summary, we show analytically that our framework effectively quantifies uncertainty and maintains robustness under small perturbations of the input. First, we confirm that the model’s output variance is controlled and directly linked to the variance of the latent state. Second, we provide a bound on the deviation between solutions with perturbed initial conditions, ensuring stability over time. The proofs can be found in Appendix [A]Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\").",
      "citations": []
    },
    "4 Experiments": {
      "content": "![Refer to caption]\n\n![Refer to caption]\n\nFigure 2: Top: Entropy distributions comparing correct and incorrect model predictions on the CORA dataset. Higher entropy is expected for incorrect predictions. Bottom: Entropy distributions comparing OOD samples with in-distribution samples in the CORA dataset.\n\nWe evaluate LGNSDEs on 5 datasets (see [A.2]A.2 Technical Assumptions ‣ Appendix A Theoretical Remarks ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") for details on these datasets and hyperparameters), we compare it to GNODE (Poli et al., [2019]), GCN Kipf and Welling ( [2016])), Bayesian GCN (BGCN) (Hasanzadeh et al., [2020]), and an ensemble of GCNs (Lin et al., [2022]).\n\nThe results in Table [3]Table 3 ‣ Appendix B Details of The Experimental Setup ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") demonstrate that LGNSDE consistently ranks as either the best or second-best model across most datasets in terms of Micro-AUROC (Area Under the Receiver Operating Characteristic), AURC (Area Under the Risk Coverage), and accuracy. This indicates that LGNSDE effectively handles model uncertainty, successfully distinguishing between classes (AUROC), maintaining low risk while ensuring confident predictions (AURC), and delivering high accuracy.\n\nThe top figure [2]Figure 2 ‣ 4 Experiments ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") shows the entropy distributions of the models for correct and incorrect predictions. Note that most models display similar mean entropy for both correct and incorrect predictions. Notably, our model stands out with the largest difference in entropy, with incorrect predictions having 35% more entropy compared to correct predictions, a larger gap than observed in other models.\n\n### 4.1 Out of Distribution Detection\n\n| Metric | Model | Cora | Citeseer | Computers | Photo | Pubmed |\n| --- | --- | --- | --- | --- | --- | --- |\n| AUROC (↑) | GCN | 0.7063 ± 0.0569 | 0.7937 ± 0.0366 | 0.7796 ± 0.0271 | 0.8578 ± 0.0136 | 0.6127 ± 0.0351 |\n| GNODE | 0.7398 ± 0.0677 | 0.7828 ± 0.0465 | 0.7753 ± 0.0795 | 0.8473 ± 0.0158 | 0.5813 ± 0.0242 |\n| BGCN | 0.7193 ± 0.0947 | 0.8287 ± 0.0377 | 0.7914 ± 0.1234 | 0.7910 ± 0.0464 | 0.5310 ± 0.0472 |\n| ENSEMBLE | 0.7031 ± 0.0696 | 0.8190 ± 0.0375 | 0.8292 ± 0.0338 | 0.8352 ± 0.0059 | 0.6130 ± 0.0311 |\n| LGNSDE (Our) | 0.7614 ± 0.0804 | 0.8258 ± 0.0418 | 0.7994 ± 0.0238 | 0.8707 ± 0.0099 | 0.6204 ± 0.0162 |\n| AURC (↓) | GCN | 0.0220 ± 0.0049 | 0.0527 ± 0.0075 | 0.0072 ± 0.0013 | 0.0076 ± 0.0006 | 0.3227 ± 0.0266 |\n| GNODE | 0.0184 ± 0.0053 | 0.0545 ± 0.0110 | 0.0070 ± 0.0029 | 0.0097 ± 0.0015 | 0.3357 ± 0.0309 |\n| BGCN | 0.0208 ± 0.0091 | 0.0458 ± 0.0071 | 0.0064 ± 0.0047 | 0.0108 ± 0.0034 | 0.3714 ± 0.0317 |\n| ENSEMBLE | 0.0215 ± 0.0061 | 0.0487 ± 0.0072 | 0.0041 ± 0.0011 | 0.0081 ± 0.0003 | 0.3277 ± 0.0265 |\n| LGNSDE (Our) | 0.0168 ± 0.0070 | 0.0479 ± 0.0109 | 0.0061 ± 0.0011 | 0.0068 ± 0.0008 | 0.3205 ± 0.0135 |\n\nTable 1: AUROC (Mean ± Std) and AURC (Mean ± Std) for OOD Detection across datasets.\nRed denotes the best-performing model, and blue denotes the second-best-performing model.\n\nWe evaluate the models’ ability to detect out-of-distribution (OOD) data by training them with one class left out of the dataset. This introduces an additional class in the validation and test sets that the models have not encountered during training. The goal is to determine if the models can identify this class as OOD. We analyze the entropy, H​(y\\|𝐗i)=−∑c=1Cp​(y=c\\|𝐗i)​log⁡p​(y=c\\|𝐗i),𝐻conditional𝑦subscript𝐗𝑖superscriptsubscript𝑐1𝐶𝑝𝑦conditional𝑐subscript𝐗𝑖𝑝𝑦conditional𝑐subscript𝐗𝑖H(y\\|\\\\mathbf{X}\\_{i})=-\\\\sum\\_{c=1}^{C}p(y=c\\|\\\\mathbf{X}\\_{i})\\\\log p(y=c\\|\\\\mathbf{X}\\_{i}), where p​(y=c\\|𝐗i)𝑝𝑦conditional𝑐subscript𝐗𝑖p(y=c\\|\\\\mathbf{X}\\_{i}) represents the probability of input 𝐗isubscript𝐗𝑖\\\\mathbf{X}\\_{i} belonging to class c𝑐c. Entropy quantifies the uncertainty in the model’s predicted probability distribution over C𝐶C classes for a given input 𝐗isubscript𝐗𝑖\\\\mathbf{X}\\_{i}.\n\nFigure [2]Figure 2 ‣ 4 Experiments ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") shows the test entropy distribution for in-distribution (blue) and out-of-distribution (red) data. For each test sample, predictions were made over C−1𝐶1C-1 classes, excluding the left-out class. The OOD class exhibits higher entropy, indicating greater uncertainty. While most models show similar entropy distributions for both data types, our LGNSDE model achieves a clear separation, with a 50% higher mean entropy for OOD data compared to in-distribution data. Other models show less than a 10% difference between the two distributions.\n\nTable [1]Table 1 ‣ 4.1 Out of Distribution Detection ‣ 4 Experiments ‣ Uncertainty Modeling in Graph Neural Networks via Stochastic Differential Equations\") presents the AUROC and AURC scores for OOD detection across multiple datasets. AUROC evaluates the model’s ability to differentiate between in-distribution and out-of-distribution (OOD) samples, with higher scores indicating better discrimination. AURC measures the risk of misclassification as coverage increases, where lower values are preferred. The LGNSDE model (ours) consistently achieves the best AUROC and AURC scores across most datasets, indicating its superior performance in accurately identifying OOD samples and minimizing the risk of misclassification.",
      "citations": [
        {
          "start_pos": 574,
          "end_pos": 593,
          "text": "Poli et al., [2019]",
          "paper_id": "bib.bib13",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": [
            "bib.bib3"
          ]
        },
        {
          "start_pos": 650,
          "end_pos": 675,
          "text": "Hasanzadeh et al., [2020]",
          "paper_id": "bib.bib6",
          "single_citation": true,
          "citation_type": "method",
          "nearest_citations": null
        },
        {
          "start_pos": 703,
          "end_pos": 721,
          "text": "Lin et al., [2022]",
          "paper_id": "bib.bib10",
          "single_citation": true,
          "citation_type": "others",
          "nearest_citations": null
        }
      ]
    },
    "5 Conclusions and Future Work": {
      "content": "In conclusion, LGNSDEs outperform the tested models, opening a new avenue for uncertainty quantification in graph data. In future work, stronger benchmarks should be included for a more comprehensive evaluation. Additionally, Neural SDEs face challenges with time and memory complexity. Further work should explore more scalable sampling methods to address these limitations.",
      "citations": []
    }
  },
  "references": {
    "data": {
      "bib.bib3": {
        "id": "bib.bib3",
        "citation": "Calvo-Ordonez et al. [2024]",
        "authors": "",
        "year": "",
        "title": "Partially stochastic infinitely deep bayesian neural networks, 2024.",
        "venue": "",
        "pages": "",
        "url": "https://arxiv.org/abs/2402.03495",
        "arxiv_id": "2402.03495",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "By conceptualising neural networks as a composition of infinitely many residual layers, Neural ODEs (Chen et al., [2018])) transform the output of a network into the solution of an ODE (Haber & Ruthotto, [2017])). This approach of infinite-depth parametrisation has two primary advantages: it permits a nuanced balance between computational cost and precision via adaptive computation tailored to specific error tolerances, and it notably diminishes memory requirements during training. The latter is achieved by using the adjoint method which allows reverse-time reconstruction of states, facilitating the use of such models in time series and diffusion applications (Calvo-Ordoñez et al., [2023])).\n\nPrevious work (Xu et al., [2022])) proposed a framework for implementing Bayesian Neural Networks (BNNs) in this infinite-depth limit using Neural SDEs (Liu et al., [2019])). These models offer a probabilistic interpretation of continuous-time neural networks by placing a prior distribution over the network’s weights and updating them through Bayesian inference steps. This involves inferring distributions over parameters rather than relying on point estimates (Mackay [1992]); Neal [1995])). This approach introduces several key benefits like accounting for model uncertainty (Bergna et al. [2023]); Van Amersfoort et al. [2020]); Ustyuzhaninov et al. [2020]); He et al. [2023])), which is key in high-stakes environments such as financial forecasting (Arroyo et al. [2024]); Moreno-Pino & Zohren [2022])) or healthcare (Vanderschueren et al. [2023])).\n\nHowever, for both continuous and discrete BNNs, the process of estimating the posterior distribution of network weights typically involves computationally intensive techniques like Markov Chain Monte Carlo or variational inference methods, both of which can be resource-heavy and time-consuming (Neal [1995]); Blundell et al. [2015])). These methods often require a large number of iterations or complex optimisation procedures to accurately approximate the posterior distribution. Additionally, the need to store and process multiple samples for each weight during training and inference further escalates the computational load.\n\nTo overcome these challenges, previous research has explored partially stochastic networks as a potential solution in finite-depth settings (Daxberger et al. [2021b]); Kristiadi et al. [2020])). These networks restrict stochasticity to a fraction of the model’s parameters, i.e. Θ=ΘS∪ΘDΘsubscriptΘ𝑆subscriptΘ𝐷\\\\Theta=\\\\Theta\\_{S}\\\\cup\\\\Theta\\_{D}, where one learns both a distribution over ΘSsubscriptΘ𝑆\\\\Theta\\_{S} and point estimates for ΘDsubscriptΘ𝐷\\\\Theta\\_{D}. These methods aim to achieve greater computational efficiency while retaining the benefits of Bayesian approaches. Initially, the main idea of these architectures was to approximate fully stochastic networks with a trade-off between computational efficiency and accuracy. However, Sharma et al. ([2023])) provide both theoretical and empirical evidence to demonstrate that partially stochastic networks can achieve comparable, if not superior, performance to their fully stochastic counterparts. As there is no trivial way to split the weights into subsets of deterministic and stochastic weights in the infinite-depth limit, previous research has only explored finite-depth regimes. However, studies such as Farquhar et al. ([2020])) hint towards the viability of extending this approach to an infinite-depth configuration.\n\nBuilding on these insights, our work introduces Partially Stochastic Infinitely Deep Bayesian Neural Networks (PSDE-BNNs). This class of architectures combines the flexibility of neural differential equations with the efficient uncertainty quantification of partially stochastic networks. By selectively introducing noise within the weights process, our model achieves an improved representation of uncertainty and better performance in downstream tasks than its fully stochastic counterparts, while significantly reducing the computational overhead typically associated with infinitely deep BNNs. Our contributions to the field are summarised as follows:\n\n- •\n\n\nWe introduce the concept of partial stochasticity within continuous-time neural models, expanding the existing framework of Bayesian Neural Networks.\n\n- •\n\n\nWe provide a detailed mathematical framework to incorporate partial stochasticity into the evolution of the weights of infinitely deep BNNs.\n\n- •\n\n\nWe prove mathematically under which specific conditions infinitely deep BNNs fail to be Universal Conditional Distribution Approximators (UCDAs). Conversely, we demonstrate that Partially Stochastic Infinitely Deep BNNs, under different conditions, do qualify as UCDAs.\n\n- •\n\n\nWe demonstrate that our class of models outperforms fully stochastic networks in downstream tasks and uncertainty quantification, showing that full stochasticity may not be necessary. We further conduct ablation studies on key PSDE-BNN hyperparameters.",
            "citations": null
          },
          "2 Background and Preliminaries": {
            "content": "We build upon existing infinite-depth networks, as well as concepts of partial stochasticity in discrete networks.\n\n#### Neural Ordinary Differential Equations\n\nA Neural ODE (Chen et al., [2018])) consists of a continuous-time hidden state model, whose rate of change is given by a neural network. Given an input x𝑥x, a Neural ODE can be written as\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​htd​t=fθ​(t,ht),h0=x,formulae-sequencedsubscriptℎ𝑡d𝑡subscript𝑓𝜃𝑡subscriptℎ𝑡subscriptℎ0𝑥\\\\frac{\\\\mathrm{d}h\\_{t}}{\\\\mathrm{d}t}=f\\_{\\\\theta}(t,h\\_{t}),\\\\quad h\\_{0}=x, |  |\n\nwhere fθsubscript𝑓𝜃f\\_{\\\\theta} is a Lipschitz function defined by a neural network with parameters θ𝜃\\\\theta.\nTo evaluate the Neural ODE at an input x𝑥x, we use an ODE solver, and backpropagation is computed using the adjoint sensitivity method (Li et al., [2020])).\n\n#### Partial Stochasticity in Bayesian Neural Networks\n\nIn Bayesian Neural Networks (Lampinen & Vehtari [2001]); Titterington [2004])), parameters are treated as random variables, with the aim to infer their posterior distribution p​(w\\|𝒟)𝑝conditional𝑤𝒟p(w\\|\\\\mathcal{D}) given a dataset 𝒟𝒟\\\\mathcal{D} and prior p​(w)𝑝𝑤p(w). Approximate inference involves finding an approximate posterior, often through a parametrisation qθ​(w)subscript𝑞𝜃𝑤q\\_{\\\\theta}(w). Specifically, variational inference methods intend to maximise the Evidence Lower Bound (ELBO), or equivalently, minimise the Kullback-Leibler (KL) divergence between qθ​(w)subscript𝑞𝜃𝑤q\\_{\\\\theta}(w) and p​(w\\|𝒟)𝑝conditional𝑤𝒟p(w\\|\\\\mathcal{D}). The gradient of this objective can be computed using Monte-Carlo samples via Stochastic Variational Inference (Hoffman et al., [2013])). In addition, previous studies suggest that full stochasticity is unnecessary for effective posterior approximation in finite-depth BNNs (Sharma et al., [2023])). Extending these findings, we show that partial stochasticity preserves the expressivity of BNNs in the infinite-depth regime.\n\n#### SDEs as approximate posteriors\n\nStochastic differential equations introduce Brownian motion as a source of continuous noise in the dynamics of a time-dependent state Xtsubscript𝑋𝑡X\\_{t}(Oksendal, [2013])). Formally, a d−limit-from𝑑d-dimensional stochastic differential equation driven by a m−limit-from𝑚m-dimensional Brownian motion Btsubscript𝐵𝑡B\\_{t} on a time interval \\[0,T\\]0𝑇\\[0,T\\] is often written as\n\n|     |     |     |\n| --- | --- | --- |\n|  | d​Xt=μ​(t,Xt)​d​t+σ​(t,Xt)​d​Bt,dsubscript𝑋𝑡𝜇𝑡subscript𝑋𝑡d𝑡𝜎𝑡subscript𝑋𝑡dsubscript𝐵𝑡\\\\mathrm{d}X\\_{t}=\\\\mu(t,X\\_{t})\\\\mathrm{d}t+\\\\sigma(t,X\\_{t})\\\\mathrm{d}B\\_{t}, |  |\n\nwhere μ:\\[0,T\\]×ℝd→ℝd:𝜇→0𝑇superscriptℝ𝑑superscriptℝ𝑑\\\\mu:\\[0,T\\]\\\\times\\\\mathbb{R}^{d}\\\\rightarrow\\\\mathbb{R}^{d} (the drift), σ:\\[0,T\\]×ℝd→ℝd×m:𝜎→0𝑇superscriptℝ𝑑superscriptℝ𝑑𝑚\\\\sigma:\\[0,T\\]\\\\times\\\\mathbb{R}^{d}\\\\rightarrow\\\\mathbb{R}^{d\\\\times m} (the volatility or diffusion matrix) are Lipschitz functions in the state, and satisfy a linear growth condition. Such conditions ensure the existence and uniqueness of a strong solution, given a square-integrable initial condition X0subscript𝑋0X\\_{0}. In infinite-depth Bayesian neural networks, Xu et al. ( [2022])) propose to model the prior on weights (wt)t∈\\[0,1\\]subscriptsubscript𝑤𝑡𝑡01(w\\_{t})\\_{t\\\\in\\[0,1\\]} as a SDE\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​wt=fp​(t,wt)​d​t+gp​(t,wt)​d​Bt,dsubscript𝑤𝑡subscript𝑓𝑝𝑡subscript𝑤𝑡d𝑡subscript𝑔𝑝𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\mathrm{d}w\\_{t}=f\\_{p}(t,w\\_{t})\\\\mathrm{d}t+g\\_{p}(t,w\\_{t})\\\\mathrm{d}B\\_{t}, |  | (1) |\n\nand parametrise the approximate posterior using a Neural SDE, where the drift fqsubscript𝑓𝑞f\\_{q} is a neural network with parameters θ𝜃\\\\theta\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​wt=fq​(t,wt;θ)​d​t+gp​(t,wt)​d​Bt.dsubscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃d𝑡subscript𝑔𝑝𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\mathrm{d}w\\_{t}=f\\_{q}(t,w\\_{t};\\\\theta)\\\\mathrm{d}t+g\\_{p}(t,w\\_{t})\\\\mathrm{d}B\\_{t}. |  | (2) |\n\nWe use the following infinite-dimensional version of the KL divergence (Tzen & Raginsky [2019]); Li et al. [2020]))\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | DKL​(μq∥μp)subscript𝐷KLconditionalsubscript𝜇𝑞subscript𝜇𝑝\\\\displaystyle D\\_{\\\\mathrm{KL}}\\\\left(\\\\mu\\_{q}\\\\\\|\\\\mu\\_{p}\\\\right) | =𝔼qθ​(w)​\\[∫0112​‖uθ​(t,wt)‖22​dt\\]​ whereabsentsubscript𝔼subscript𝑞𝜃𝑤delimited-\\[\\]superscriptsubscript0112superscriptsubscriptnormsubscript𝑢𝜃𝑡subscript𝑤𝑡22differential-d𝑡 where\\\\displaystyle=\\\\mathbb{E}\\_{q\\_{\\\\theta}(w)}\\\\left\\[\\\\int\\_{0}^{1}\\\\frac{1}{2}\\\\\\|u\\_{\\\\theta}(t,w\\_{t})\\\\\\|\\_{2}^{2}\\\\mathrm{~{}d}t\\\\right\\]\\\\text{ where } |  |\n|  | uθ​(t,wt)subscript𝑢𝜃𝑡subscript𝑤𝑡\\\\displaystyle u\\_{\\\\theta}(t,w\\_{t}) | =gp​(t,wt)−1​\\[fq​(t,wt;θ)−fp​(t,wt)\\],absentsubscript𝑔𝑝superscript𝑡subscript𝑤𝑡1delimited-\\[\\]subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃subscript𝑓𝑝𝑡subscript𝑤𝑡\\\\displaystyle=g\\_{p}\\\\left(t,w\\_{t}\\\\right)^{-1}\\\\left\\[f\\_{q}\\\\left(t,w\\_{t};\\\\theta\\\\right)-f\\_{p}\\\\left(t,w\\_{t}\\\\right)\\\\right\\], |  |\n\nwith μp,μqsubscript𝜇𝑝subscript𝜇𝑞\\\\mu\\_{p},\\\\mu\\_{q} being probability measures on the path space 𝒫⊂ℝ\\[0,1\\]𝒫superscriptℝ01\\\\mathcal{P}\\\\subset\\\\mathbb{R}^{\\[0,1\\]} induced by ( [1]Equation 1 ‣ SDEs as approximate posteriors ‣ 2 Background and Preliminaries ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) and ( [2]Equation 2 ‣ SDEs as approximate posteriors ‣ 2 Background and Preliminaries ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) respectively. We show that when only a fraction of the weights are stochastic, such approximate posteriors yield UCDAs.",
            "citations": null
          },
          "3 Method": {
            "content": "Standard discrete-depth residual networks (He et al., [2016])) can be defined as a composition of layers of the form\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ht+δ=ht+δ​f​(ht;wt),t=1,…,T,formulae-sequencesubscriptℎ𝑡𝛿subscriptℎ𝑡𝛿𝑓subscriptℎ𝑡subscript𝑤𝑡𝑡1…𝑇h\\_{t+\\\\delta}=h\\_{t}+\\\\delta f(h\\_{t};w\\_{t}),\\\\quad t=1,\\\\dots,T, |  | (3) |\n\nwhere t𝑡t is the layer index, ht∈ℝdhsubscriptℎ𝑡superscriptℝsubscript𝑑ℎh\\_{t}\\\\in\\\\mathbb{R}^{d\\_{h}} represents a vector of hidden unit activations at layer t𝑡t, the input is h0=xsubscriptℎ0𝑥h\\_{0}=x, wtsubscript𝑤𝑡w\\_{t} are the parameters for layer t, and δ=1𝛿1\\\\delta=1. Taking δ=1/T𝛿1𝑇\\\\delta=1/T and letting T→∞→𝑇T\\\\rightarrow\\\\infty yields a Neural ODE d​ht=fh​(t,ht;wt)​d​tdsubscriptℎ𝑡subscript𝑓ℎ𝑡subscriptℎ𝑡subscript𝑤𝑡d𝑡\\\\mathrm{d}h\\_{t}=f\\_{h}(t,h\\_{t};w\\_{t})\\\\mathrm{d}t, where fhsubscript𝑓ℎf\\_{h} is a neural network with parameters wtsubscript𝑤𝑡w\\_{t}. These parameters can also be modelled by a neural network (more precisely, a hypernetwork), which in the infinite-depth limit becomes itself a neural differential equation d​wt=fq​(t,wt;θ)​d​tdsubscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃d𝑡\\\\mathrm{d}w\\_{t}=f\\_{q}(t,w\\_{t};\\\\theta)\\\\mathrm{d}t (or, in the Bayesian setting, a Neural SDE). Therefore, fqsubscript𝑓𝑞f\\_{q} is a neural network parametrised by θ𝜃\\\\theta which models the continuous evolution of the parameters of fhsubscript𝑓ℎf\\_{h}. Finally, in this framework, the only trainable parameters are the vector θ𝜃\\\\theta and w0subscript𝑤0w\\_{0}.\n\nWe now present a detailed mathematical formulation for the class of Partially Stochastic Infinitely Deep BNNs.\n\n### 3.1 Vertical separation of the weights\n\nFirst, we consider a vertical separation of the weights in the neural network fqsubscript𝑓𝑞f\\_{q} (Figure [1]Figure 1 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")). Let wt∈ℝdwsubscript𝑤𝑡superscriptℝsubscript𝑑𝑤w\\_{t}\\\\in\\\\mathbb{R}^{d\\_{w}} represent the weights of layer t∈\\[0,1\\]𝑡01t\\\\in\\[0,1\\], and t1<t2subscript𝑡1subscript𝑡2t\\_{1}<t\\_{2} be cutoff points of the interval where the weights evolve stochastically, then consider an infinite-depth network architecture such that:\n\n- •\n\n\nFor t∉(t1,t2)𝑡subscript𝑡1subscript𝑡2t\\\\notin(t\\_{1},t\\_{2}), the dynamics of wtsubscript𝑤𝑡w\\_{t} are deterministic, i.e\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​wt=fq​(t,wt;θ)​d​t,dsubscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃d𝑡\\\\mathrm{d}w\\_{t}=f\\_{q}(t,w\\_{t};\\\\theta)\\\\mathrm{d}t, |  | (4) |\n\n\n\nwhere fq:\\[0,1\\]×ℝdw→ℝdw:subscript𝑓𝑞→01superscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝑤f\\_{q}:\\[0,1\\]\\\\times\\\\mathbb{R}^{d\\_{w}}\\\\to\\\\mathbb{R}^{d\\_{w}} is a neural network parametrised by θ∈ℝdθ𝜃superscriptℝsubscript𝑑𝜃\\\\theta\\\\in\\\\mathbb{R}^{d\\_{\\\\theta}}.\n\n- •\n\n\nFor t∈(t1,t2)𝑡subscript𝑡1subscript𝑡2t\\\\in(t\\_{1},t\\_{2}), we treat wtsubscript𝑤𝑡w\\_{t} as a random vector, and perform Bayesian inference. To that end, we define a prior as the solution of the SDE\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​wt=fp​(t,wt)​d​t+gp​(t,wt)​d​Bt,dsubscript𝑤𝑡subscript𝑓𝑝𝑡subscript𝑤𝑡d𝑡subscript𝑔𝑝𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\mathrm{d}w\\_{t}=f\\_{p}(t,w\\_{t})\\\\mathrm{d}t+g\\_{p}(t,w\\_{t})\\\\mathrm{d}B\\_{t}, |  | (5) |\n\n\n\nas well as an approximate posterior\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​wt=fq​(t,wt;θ)​d​t+gp​(t,wt)​d​Bt,dsubscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃d𝑡subscript𝑔𝑝𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\mathrm{d}w\\_{t}=f\\_{q}(t,w\\_{t};\\\\theta)\\\\mathrm{d}t+g\\_{p}(t,w\\_{t})\\\\mathrm{d}B\\_{t}, |  | (6) |\n\n\n\nwhere Btsubscript𝐵𝑡B\\_{t} is a standard dwsubscript𝑑𝑤d\\_{w}-Brownian motion, and fp,gpsubscript𝑓𝑝subscript𝑔𝑝f\\_{p},g\\_{p} are deterministic functions fixed a priori.\n\n\nNotice that the diffusion of the approximate posterior is fixed to match the prior diffusion. This is to ensure that the KL divergence between the prior and posterior measures on paths μpsubscript𝜇𝑝\\\\mu\\_{p} and μqsubscript𝜇𝑞\\\\mu\\_{q} respectively, is finite. As this is mentioned without proof by Li et al. ( [2020])) and Xu et al ( [2022])), we put it as a lemma and give a detailed proof in Appendix [A]Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\").\n\n![Refer to caption]Figure 1: Vertical Cut: Sample paths of wtsubscript𝑤𝑡w\\_{t} when (left) not fixing wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}} vs. (right) fixing wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}}. If we do not fix wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}}, wtsubscript𝑤𝑡w\\_{t} will be random in the interval (0.6,1)0.61(0.6,1). Here, fq=cos⁡(20​t)subscript𝑓𝑞20𝑡f\\_{q}=\\\\cos(20t), gp=0subscript𝑔𝑝0g\\_{p}=0 for t∉(0.3,0.6)𝑡0.30.6t\\\\notin(0.3,0.6), and fq=0subscript𝑓𝑞0f\\_{q}=0, gp=1subscript𝑔𝑝1g\\_{p}=1 for t∈(0.3,0.6)𝑡0.30.6t\\\\in(0.3,0.6).\n\n###### Lemma 1.\n\nAssume the prior and posterior of wtsubscript𝑤𝑡w\\_{t} are given as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​wt=fp​(t,wt)​d​t+σp​(t,wt)​d​Bt,dsubscript𝑤𝑡subscript𝑓𝑝𝑡subscript𝑤𝑡d𝑡subscript𝜎𝑝𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\mathrm{d}w\\_{t}=f\\_{p}(t,w\\_{t})\\\\mathrm{d}t+\\\\sigma\\_{p}(t,w\\_{t})\\\\mathrm{d}B\\_{t}, |  | (7) |\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​wt=fq​(t,wt)​d​t+σq​(t,wt)​d​Bt.dsubscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡d𝑡subscript𝜎𝑞𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\mathrm{d}w\\_{t}=f\\_{q}(t,w\\_{t})\\\\mathrm{d}t+\\\\sigma\\_{q}(t,w\\_{t})\\\\mathrm{d}B\\_{t}. |  | (8) |\n\nAssume that σp,σqsubscript𝜎𝑝subscript𝜎𝑞\\\\sigma\\_{p},\\\\sigma\\_{q} are continuous.\nif there exists t∈(0,1)𝑡01t\\\\in(0,1) such that σq​(t,wt)≠σp​(t,wt)subscript𝜎𝑞𝑡subscript𝑤𝑡subscript𝜎𝑝𝑡subscript𝑤𝑡\\\\sigma\\_{q}(t,w\\_{t})\\\\neq\\\\sigma\\_{p}(t,w\\_{t}) with non-zero probability, then DKL​(μq∥μp)=∞subscript𝐷KLconditionalsubscript𝜇𝑞subscript𝜇𝑝D\\_{\\\\mathrm{KL}}\\\\left(\\\\mu\\_{q}\\\\\\|\\\\mu\\_{p}\\\\right)=\\\\infty.\n\nOver the whole time interval \\[0,1\\]01\\[0,1\\], the hidden state dynamics ht∈ℝdhsubscriptℎ𝑡superscriptℝsubscript𝑑ℎh\\_{t}\\\\in\\\\mathbb{R}^{d\\_{h}} is given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d​ht=fh​(t,ht;wt)​d​t,dsubscriptℎ𝑡subscript𝑓ℎ𝑡subscriptℎ𝑡subscript𝑤𝑡d𝑡\\\\mathrm{d}h\\_{t}=f\\_{h}(t,h\\_{t};w\\_{t})\\\\mathrm{d}t, |  | (9) |\n\nwhere fh​(t,ht;wt)subscript𝑓ℎ𝑡subscriptℎ𝑡subscript𝑤𝑡f\\_{h}(t,h\\_{t};w\\_{t}) is again a neural network whose parameters are wtsubscript𝑤𝑡w\\_{t}.\n\nIn our model, the points t1subscript𝑡1t\\_{1} and t2subscript𝑡2t\\_{2} play a key role in dictating the behaviour of the neural network parameters wtsubscript𝑤𝑡w\\_{t}. Specifically, wt1subscript𝑤subscript𝑡1w\\_{t\\_{1}} denotes the initial condition of the SDE, which, if t1>0subscript𝑡10t\\_{1}>0, also serves as the terminal value of the ODE governing the weight evolution in the interval \\[0,t1)0subscript𝑡1\\[0,t\\_{1}). Conversely, wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}} is the sampled state at the SDE’s endpoint. When t2<1subscript𝑡21t\\_{2}<1, deciding the initial value for the subsequent ODE spanning \\[t2,1\\]subscript𝑡21\\[t\\_{2},1\\] becomes crucial. The first approach is to continue with the same vector wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}}, allowing for a continuous transition into the ODE. Alternatively, the initial value for this ODE could be fixed a priori or set as a learnable parameter. This choice significantly influences the network’s parameter trajectory: using the same wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}} introduces an element of randomness beyond t2subscript𝑡2t\\_{2}, as illustrated in Figure [1]Figure 1 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") (left), where wtsubscript𝑤𝑡w\\_{t} is non-deterministic in the interval (0.6,1)0.61(0.6,1). On the other hand, fixing wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}}a priori, as shown in Figure [1]Figure 1 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") (right), ensures that wtsubscript𝑤𝑡w\\_{t} remains deterministic throughout the interval (0.6,1)0.61(0.6,1).\\\n\\\n![Refer to caption]Figure 2: Horizontal Cut: Sample paths of wSsubscript𝑤𝑆w\\_{S} (left) and wDsubscript𝑤𝐷w\\_{D} when not separating fqsubscript𝑓𝑞f\\_{q} (middle) vs. separating fqsubscript𝑓𝑞f\\_{q} (right). If we do not separate fqsubscript𝑓𝑞f\\_{q}, then wDsubscript𝑤𝐷w\\_{D} will also be random. Here, when not separating fqsubscript𝑓𝑞f\\_{q}, we take fq=\\[−wS,t+wD+wS\\]subscript𝑓𝑞subscript𝑤𝑆𝑡subscript𝑤𝐷subscript𝑤𝑆f\\_{q}=\\[-w\\_{S},t+w\\_{D}+w\\_{S}\\] and gp=\\[1,0\\]subscript𝑔𝑝10g\\_{p}=\\[1,0\\], when separating fqsubscript𝑓𝑞f\\_{q}, we take fq=\\[−wS,t+wD\\]subscript𝑓𝑞subscript𝑤𝑆𝑡subscript𝑤𝐷f\\_{q}=\\[-w\\_{S},t+w\\_{D}\\] and gp=\\[1,0\\]subscript𝑔𝑝10g\\_{p}=\\[1,0\\].\\\n\\\nIn conclusion. the dynamics of the whole system can then be written as a single SDE in ℝdh+dwsuperscriptℝsubscript𝑑ℎsubscript𝑑𝑤\\\\mathbb{R}^{d\\_{h}+d\\_{w}}\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d​\\[htwt\\]=\\[fh​(t,ht;wt)fq​(t,wt;θ)\\]​d​t+\\[0gp​(t,wt)\\]​d​Bt,dmatrixsubscriptℎ𝑡subscript𝑤𝑡matrixsubscript𝑓ℎ𝑡subscriptℎ𝑡subscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃d𝑡matrix0subscript𝑔𝑝𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\displaystyle\\\\mathrm{d}\\\\begin{bmatrix}h\\_{t}\\\\\\<br>w\\_{t}\\\\end{bmatrix}=\\\\begin{bmatrix}f\\_{h}(t,h\\_{t};w\\_{t})\\\\\\<br>f\\_{q}(t,w\\_{t};\\\\theta)\\\\end{bmatrix}\\\\mathrm{d}t+\\\\begin{bmatrix}0\\\\\\<br>g\\_{p}(t,w\\_{t})\\\\end{bmatrix}\\\\mathrm{d}B\\_{t}, |  | (10) |\\\n\\\nwhere we impose gp​(t,wt)=0subscript𝑔𝑝𝑡subscript𝑤𝑡0g\\_{p}(t,w\\_{t})=0 for t∉(t1,t2)𝑡subscript𝑡1subscript𝑡2t\\\\notin(t\\_{1},t\\_{2}).\\\nFor the initial conditions, we impose h0=a​(x)subscriptℎ0𝑎𝑥h\\_{0}=a(x), where x𝑥x is the input data point and a:ℝdx→ℝdh:𝑎→superscriptℝsubscript𝑑𝑥superscriptℝsubscript𝑑ℎa:\\\\mathbb{R}^{d\\_{x}}\\\\rightarrow\\\\mathbb{R}^{d\\_{h}} corresponds to a pre-processing step. The initial weight w0∈ℝdwsubscript𝑤0superscriptℝsubscript𝑑𝑤w\\_{0}\\\\in\\\\mathbb{R}^{d\\_{w}} is a trainable parameter. Note that ( [10]Equation 10 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) is a slight abuse of notation, since wtsubscript𝑤𝑡w\\_{t} might jump at time t2subscript𝑡2t\\_{2}.\\\n\\\n### 3.2 Horizontal separation of the weights\\\n\\\nIn ( [10]Equation 10 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")), gp​(t,wt):ℝ×ℝdw→ℝdw×ℝdw:subscript𝑔𝑝𝑡subscript𝑤𝑡→ℝsuperscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝑤g\\_{p}(t,w\\_{t}):\\\\mathbb{R}\\\\times\\\\mathbb{R}^{d\\_{w}}\\\\rightarrow\\\\mathbb{R}^{d\\_{w}}\\\\times\\\\mathbb{R}^{d\\_{w}} denotes the diffusion matrix of wtsubscript𝑤𝑡w\\_{t}. Similar to Sharma et al. ( [2023])), where parameters in a single hidden layer are separated into deterministic and stochastic groups, we can perform this parameter separation in the same layer if we set the diffusion matrix gp​(t,wt)subscript𝑔𝑝𝑡subscript𝑤𝑡g\\_{p}(t,w\\_{t}) to zero in our SDE setting, e.g.\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | gp​(t,wt)=\\[σ​Im1𝟎m1×m2𝟎m2×m1𝟎m2\\].subscript𝑔𝑝𝑡subscript𝑤𝑡matrix𝜎subscript𝐼subscript𝑚1subscript0subscript𝑚1subscript𝑚2subscript0subscript𝑚2subscript𝑚1subscript0subscript𝑚2g\\_{p}(t,w\\_{t})=\\\\begin{bmatrix}\\\\sigma I\\_{m\\_{1}}\\\\quad\\\\mathbf{0}\\_{m\\_{1}\\\\times m\\_{2}}\\\\\\<br>\\\\mathbf{0}\\_{m\\_{2}\\\\times m\\_{1}}\\\\quad\\\\mathbf{0}\\_{m\\_{2}}\\\\\\<br>\\\\end{bmatrix}. |  |\\\n\\\nRefer to Figure [2]Figure 2 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") for an intuitive understanding where m1=m2=1subscript𝑚1subscript𝑚21m\\_{1}=m\\_{2}=1. In this configuration, only the first m1subscript𝑚1m\\_{1} elements of wtsubscript𝑤𝑡w\\_{t} interact with the Brownian motion Btsubscript𝐵𝑡B\\_{t}, and are thus random, while the remaining m2subscript𝑚2m\\_{2} elements are deterministic. We term this division a “horizontal separation”. It is important to highlight that, within this horizontal separation framework, the function fq​(t,wt;θ)subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃f\\_{q}(t,w\\_{t};\\\\theta) must also be split, and therefore distinctly formulated for the stochastic (S𝑆S) and deterministic (D𝐷D) weights:\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | fq=\\[fθS​(t,wtS;θS)fθD​(t,wtD;θD)\\],subscript𝑓𝑞matrixsubscript𝑓subscript𝜃𝑆𝑡superscriptsubscript𝑤𝑡𝑆subscript𝜃𝑆subscript𝑓subscript𝜃𝐷𝑡superscriptsubscript𝑤𝑡𝐷subscript𝜃𝐷f\\_{q}\\ =\\ \\\\begin{bmatrix}f\\_{\\\\theta\\_{S}}(t,w\\_{t}^{S};\\\\theta\\_{S})\\\\\\<br>f\\_{\\\\theta\\_{D}}(t,w\\_{t}^{D};\\\\theta\\_{D})\\\\\\<br>\\\\end{bmatrix}, |  |\\\n\\\nwhere wtSsuperscriptsubscript𝑤𝑡𝑆w\\_{t}^{S} represents the subset of wtsubscript𝑤𝑡w\\_{t} corresponding to the indices in S𝑆S, this allows us to reformulate ( [10]Equation 10 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) as follows:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d​\\[htwtDwtS\\]=\\[fh​(t,ht;wtS,wtD)fθD​(t,wtD;θD)fθS​(t,wtS;θS)\\]​d​t+\\[00gp​(t,wtS)\\]​d​Bt.dmatrixsubscriptℎ𝑡superscriptsubscript𝑤𝑡𝐷superscriptsubscript𝑤𝑡𝑆matrixsubscript𝑓ℎ𝑡subscriptℎ𝑡superscriptsubscript𝑤𝑡𝑆superscriptsubscript𝑤𝑡𝐷subscript𝑓subscript𝜃𝐷𝑡superscriptsubscript𝑤𝑡𝐷subscript𝜃𝐷subscript𝑓subscript𝜃𝑆𝑡superscriptsubscript𝑤𝑡𝑆subscript𝜃𝑆d𝑡matrix00subscript𝑔𝑝𝑡superscriptsubscript𝑤𝑡𝑆dsubscript𝐵𝑡\\\\displaystyle\\\\mathrm{d}\\\\begin{bmatrix}h\\_{t}\\\\\\<br>w\\_{t}^{D}\\\\\\<br>w\\_{t}^{S}\\\\end{bmatrix}=\\\\begin{bmatrix}f\\_{h}(t,h\\_{t};w\\_{t}^{S},w\\_{t}^{D})\\\\\\<br>f\\_{\\\\theta\\_{D}}(t,w\\_{t}^{D};\\\\theta\\_{D})\\\\\\<br>f\\_{\\\\theta\\_{S}}(t,w\\_{t}^{S};\\\\theta\\_{S})\\\\end{bmatrix}\\\\mathrm{d}t+\\\\begin{bmatrix}0\\\\\\<br>0\\\\\\<br>g\\_{p}(t,w\\_{t}^{S})\\\\end{bmatrix}\\\\mathrm{d}B\\_{t}. |  | (11) |\\\n\\\nThe rationale behind separating fqsubscript𝑓𝑞f\\_{q} stems from the necessity of maintaining the deterministic nature of wtDsuperscriptsubscript𝑤𝑡𝐷w\\_{t}^{D} in this setting. Otherwise, if fθDsubscript𝑓subscript𝜃𝐷f\\_{\\\\theta\\_{D}} were to incorporate wtSsuperscriptsubscript𝑤𝑡𝑆w\\_{t}^{S} as an input, it would introduce stochastic elements into fθDsubscript𝑓subscript𝜃𝐷f\\_{\\\\theta\\_{D}}, and consequently, wtDsuperscriptsubscript𝑤𝑡𝐷w\\_{t}^{D} would no longer remain deterministic.\\\n\\\nFor a better understanding, we refer to Figure [2]Figure 2 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"), which illustrates the concept in a 2D setting for wtsubscript𝑤𝑡w\\_{t}. In the middle panel, we do not separate fqsubscript𝑓𝑞f\\_{q}, resulting in a random wtDsuperscriptsubscript𝑤𝑡𝐷w\\_{t}^{D}, which is not desirable. In the right panel, we separate fqsubscript𝑓𝑞f\\_{q}, which gives a fixed wtDsuperscriptsubscript𝑤𝑡𝐷w\\_{t}^{D}.\\\n\\\n### 3.3 Training the network\\\n\\\nTo evaluate our network given an input x𝑥x, we integrate ( [10]Equation 10 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"))\\\nusing both a SDE and ODE solver to obtain a distribution for h1subscriptℎ1h\\_{1}. We then use h1subscriptℎ1h\\_{1} to compute the likelihood of the output y𝑦y.\\\nOur trainable parameters are Θ=(w0,θ)∈ℝdw×ℝdθΘsubscript𝑤0𝜃superscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝜃\\\\Theta=(w\\_{0},\\\\theta)\\\\in\\\\mathbb{R}^{d\\_{w}}\\\\times\\\\mathbb{R}^{d\\_{\\\\theta}} (or Θ=(w0,wt2,θ)∈ℝdw×ℝdw×ℝdθΘsubscript𝑤0subscript𝑤subscript𝑡2𝜃superscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝜃\\\\Theta=(w\\_{0},w\\_{t\\_{2}},\\\\theta)\\\\in\\\\mathbb{R}^{d\\_{w}}\\\\times\\\\mathbb{R}^{d\\_{w}}\\\\times\\\\mathbb{R}^{d\\_{\\\\theta}} if t2<1subscript𝑡21t\\_{2}<1 and we set wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}} as a learnable parameter).\\\nWe perform approximate inference on wtsubscript𝑤𝑡w\\_{t}, as done by Xu et al. ( [2022])). Thus, we maximise the ELBO:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ℒV​(Θ)=𝔼qθ​\\[log⁡p​(𝒟\\|w)−κ​∫t1t2‖uθ​(t,wt)‖2​dt\\]superscriptℒ𝑉Θsubscript𝔼subscript𝑞𝜃delimited-\\[\\]𝑝conditional𝒟𝑤𝜅superscriptsubscriptsubscript𝑡1subscript𝑡2superscriptnormsubscript𝑢𝜃𝑡subscript𝑤𝑡2differential-d𝑡\\\\mathcal{L}^{V}(\\\\Theta)=\\\\mathbb{E}\\_{q\\_{\\\\theta}}\\\\left\\[\\\\log p(\\\\mathcal{D}\\|w)-\\\\kappa\\\\int\\_{t\\_{1}}^{t\\_{2}}\\|\\|u\\_{\\\\theta}(t,w\\_{t})\\|\\|^{2}\\\\mathrm{d}t\\\\right\\] |  | (12) |\\\n\\\nwhere uθ​(t,wt)=gp​(t,wt)−1​\\[fp​(t,wt)−fq​(t,wt;θ)\\]subscript𝑢𝜃𝑡subscript𝑤𝑡subscript𝑔𝑝superscript𝑡subscript𝑤𝑡1delimited-\\[\\]subscript𝑓𝑝𝑡subscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃u\\_{\\\\theta}(t,w\\_{t})=g\\_{p}(t,w\\_{t})^{-1}\\[f\\_{p}(t,w\\_{t})-f\\_{q}(t,w\\_{t};\\\\theta)\\].\\\n\\\nIn ( [12]Equation 12 ‣ 3.3 Training the network ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")), the expectation is taken with respect to the approximate posterior distribution on the whole path (wt)0≤t≤1subscriptsubscript𝑤𝑡0𝑡1(w\\_{t})\\_{0\\\\leq t\\\\leq 1}. Note that κ𝜅\\\\kappa is a coefficient that determines the weight of the KL divergence term in the ELBO, and that ( [12]Equation 12 ‣ 3.3 Training the network ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) corresponds to a model with vertical separation of the weights. We use the stochastic variational inference scheme of Li et al. ( [2020])) to compute the gradient of the loss with respect to ΘΘ\\\\Theta. For the horizontal cut ( [11]Equation 11 ‣ 3.2 Horizontal separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")), the ELBO takes the form:\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | ℒH​(Θ)=𝔼qθ​\\[log⁡p​(𝒟\\|w)−κ​∫t1t2‖uθS​(t,wtS)‖2​dt\\],superscriptℒ𝐻Θsubscript𝔼subscript𝑞𝜃delimited-\\[\\]𝑝conditional𝒟𝑤𝜅superscriptsubscriptsubscript𝑡1subscript𝑡2superscriptnormsuperscriptsubscript𝑢𝜃𝑆𝑡superscriptsubscript𝑤𝑡𝑆2differential-d𝑡\\\\mathcal{L}^{H}(\\\\Theta)=\\\\mathbb{E}\\_{q\\_{\\\\theta}}\\\\left\\[\\\\log p(\\\\mathcal{D}\\|w)-\\\\kappa\\\\int\\_{t\\_{1}}^{t\\_{2}}\\|\\|u\\_{\\\\theta}^{S}(t,w\\_{t}^{S})\\|\\|^{2}\\\\mathrm{d}t\\\\right\\], |  |\\\n\\\nwith uθS​(t,wtS)=gp​(t,wtS)−1​\\[fp​(t,wtS)−fθS​(t,wtS;θS)\\]superscriptsubscript𝑢𝜃𝑆𝑡superscriptsubscript𝑤𝑡𝑆subscript𝑔𝑝superscript𝑡superscriptsubscript𝑤𝑡𝑆1delimited-\\[\\]subscript𝑓𝑝𝑡superscriptsubscript𝑤𝑡𝑆subscript𝑓subscript𝜃𝑆𝑡superscriptsubscript𝑤𝑡𝑆subscript𝜃𝑆u\\_{\\\\theta}^{S}(t,w\\_{t}^{S})=g\\_{p}(t,w\\_{t}^{S})^{-1}\\[f\\_{p}(t,w\\_{t}^{S})-f\\_{\\\\theta\\_{S}}(t,w\\_{t}^{S};\\\\theta\\_{S})\\].\\\nAs for the prior process, we use the Ornstein–Uhlenbeck (OU) process as in Xu et al. ( [2022])).\\\n\\",
            "citations": null
          },
          "4 Expressivity Guarantees\\": {
            "content": "\\\nIn this section, we investigate the conditions under which our Partially Stochastic Infinitely Deep Bayesian Neural Networks qualify as Universal Conditional Distribution Approximators (UCDAs).\\\n\\\n### 4.1 Constrained Stochastic Infinitely Deep Bayesian Neural Networks are not universal approximators\\\n\\\nDupont et al. ( [2019])) proved that a n𝑛n-dimensional Neural ODE:\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | {d​𝐯​(t)d​t=𝐟​(𝐯​(t),t)𝐯​(0)=𝐱,casesd𝐯𝑡d𝑡𝐟𝐯𝑡𝑡𝐯0𝐱\\\\left\\\\{\\\\begin{array}\\[\\]{l}\\\\frac{\\\\mathrm{d}\\\\mathbf{v}(t)}{\\\\mathrm{d}t}=\\\\mathbf{f}(\\\\mathbf{v}(t),t)\\\\\\<br>\\\\mathbf{v}(0)=\\\\mathbf{x},\\\\end{array}\\\\right. |  |\\\n\\\nwith globally Lipschitz continuous 𝐟:ℝn×ℝ→ℝn:𝐟→superscriptℝ𝑛ℝsuperscriptℝ𝑛\\\\mathbf{f}:\\\\mathbb{R}^{n}\\\\times\\\\mathbb{R}\\\\rightarrow\\\\mathbb{R}^{n} and a linear output layer ℒ:ℝn→ℝ:ℒ→superscriptℝ𝑛ℝ\\\\mathcal{L}:\\\\mathbb{R}^{n}\\\\rightarrow\\\\mathbb{R} cannot approximate the following function z:ℝn→ℝ:𝑧→superscriptℝ𝑛ℝz:\\\\mathbb{R}^{n}\\\\rightarrow\\\\mathbb{R}\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | {z​(𝐱)=−1 if ​‖𝐱‖≤r1z​(𝐱)=1 if ​r2≤‖𝐱‖≤r3,cases𝑧𝐱1 if norm𝐱subscript𝑟1𝑧𝐱1 if subscript𝑟2norm𝐱subscript𝑟3\\\\displaystyle\\\\begin{cases}z(\\\\mathbf{x})=-1&\\\\text{ if }\\\\\\|\\\\mathbf{x}\\\\\\|\\\\leq r\\_{1}\\\\\\<br>z(\\\\mathbf{x})=1&\\\\text{ if }r\\_{2}\\\\leq\\\\\\|\\\\mathbf{x}\\\\\\|\\\\leq r\\_{3},\\\\end{cases} |  | (13) |\\\n\\\nwhere r1<r2<r3subscript𝑟1subscript𝑟2subscript𝑟3r\\_{1}<r\\_{2}<r\\_{3}. Define the flow of the ODE given the initial value 𝐱𝐱\\\\mathbf{x} as ϕt​(𝐱)=𝐯​(t)subscriptitalic-ϕ𝑡𝐱𝐯𝑡\\\\phi\\_{t}(\\\\mathbf{x})=\\\\mathbf{v}(t). Dupont et al. ( [2019])) mainly proved that the feature mapping ϕ1​(𝐱):ℝn→ℝn:subscriptitalic-ϕ1𝐱→superscriptℝ𝑛superscriptℝ𝑛\\\\phi\\_{1}(\\\\mathbf{x}):\\\\mathbb{R}^{n}\\\\rightarrow\\\\mathbb{R}^{n} is a homeomorphism and therefore it is impossible for the linear layer ℒℒ\\\\mathcal{L} to separate ϕ1​({‖𝐱‖≤r1})subscriptitalic-ϕ1norm𝐱subscript𝑟1\\\\phi\\_{1}(\\\\{\\\\\\|\\\\mathbf{x}\\\\\\|\\\\leq r\\_{1}\\\\}) and ϕ1​({r2≤‖𝐱‖≤r3})subscriptitalic-ϕ1subscript𝑟2norm𝐱subscript𝑟3\\\\phi\\_{1}(\\\\{r\\_{2}\\\\leq\\\\\\|\\\\mathbf{x}\\\\\\|\\\\leq r\\_{3}\\\\}). Similar arguments apply to our setting which we define by ( [10]Equation 10 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) with dx=dhsubscript𝑑𝑥subscript𝑑ℎd\\_{x}=d\\_{h} and a​(x)=x𝑎𝑥𝑥a(x)=x and we formalise it into the theorem below:\\\n\\\n###### Theorem 4.1.\\\n\\\nLet (Ω,ℱ,ℙ)Ωℱℙ(\\\\Omega,\\\\mathcal{F},\\\\mathbb{P}) denote a probability space. All random variables and stochastic processes\\\nconsidered are defined in that space. Consider a Linear output layer ℒ:ℝdx→ℝ:ℒ→superscriptℝsubscript𝑑𝑥ℝ\\\\mathcal{L}:\\\\mathbb{R}^{d\\_{x}}\\\\rightarrow\\\\mathbb{R} and the dynamics\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d​\\[htwt\\]=\\[fh​(t,ht;wt)fq​(t,wt;θ)\\]​d​t+\\[0gp​(t,wt)\\]​d​Bt,dmatrixsubscriptℎ𝑡subscript𝑤𝑡matrixsubscript𝑓ℎ𝑡subscriptℎ𝑡subscript𝑤𝑡subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃d𝑡matrix0subscript𝑔𝑝𝑡subscript𝑤𝑡dsubscript𝐵𝑡\\\\displaystyle\\\\mathrm{d}\\\\begin{bmatrix}h\\_{t}\\\\\\<br>w\\_{t}\\\\end{bmatrix}=\\\\begin{bmatrix}f\\_{h}(t,h\\_{t};w\\_{t})\\\\\\<br>f\\_{q}(t,w\\_{t};\\\\theta)\\\\end{bmatrix}\\\\mathrm{d}t+\\\\begin{bmatrix}0\\\\\\<br>g\\_{p}(t,w\\_{t})\\\\end{bmatrix}\\\\mathrm{d}B\\_{t}, |  | (14) |\\\n\\\nwith h0=x,w0=0formulae-sequencesubscriptℎ0𝑥subscript𝑤00h\\_{0}=x,w\\_{0}=0\\\n, where fh:ℝ×ℝdx×ℝdw→ℝdx×ℝdw:subscript𝑓ℎ→ℝsuperscriptℝsubscript𝑑𝑥superscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝑥superscriptℝsubscript𝑑𝑤f\\_{h}:\\\\mathbb{R}\\\\times\\\\mathbb{R}^{d\\_{x}}\\\\times\\\\mathbb{R}^{d\\_{w}}\\\\rightarrow\\\\mathbb{R}^{d\\_{x}}\\\\times\\\\mathbb{R}^{d\\_{w}} is globally Lipschitz continuous in htsubscriptℎ𝑡h\\_{t} and continuous in t𝑡t and w𝑤w, fq:ℝ×ℝdw→ℝdw:subscript𝑓𝑞→ℝsuperscriptℝsubscript𝑑𝑤superscriptℝsubscript𝑑𝑤f\\_{q}:\\\\mathbb{R}\\\\times\\\\mathbb{R}^{d\\_{w}}\\\\rightarrow\\\\mathbb{R}^{d\\_{w}} is continuous in t𝑡t and w𝑤w and gp:ℝ×ℝdw→:ℝdw×ℝdwg\\_{p}:\\\\mathbb{R}\\\\times\\\\mathbb{R}^{d\\_{w}}\\\\rightarrow:\\\\mathbb{R}^{d\\_{w}}\\\\times\\\\mathbb{R}^{d\\_{w}} is Lipschitz continuous in wtsubscript𝑤𝑡w\\_{t}, continuous in t𝑡t and satisfies a linear growth condition. Define the flow of htsubscriptℎ𝑡h\\_{t} given the initial value x𝑥x as ψt​(ω,x)=htsubscript𝜓𝑡𝜔𝑥subscriptℎ𝑡\\\\psi\\_{t}(\\\\omega,x)=h\\_{t}, where ω∈Ω𝜔Ω\\\\omega\\\\in\\\\Omega denotes the sample. The final output ℒ​(ψ1​(ω,x))ℒsubscript𝜓1𝜔𝑥\\\\mathcal{L}(\\\\psi\\_{1}(\\\\omega,x)) cannot represent the function z𝑧z defined in ( [13]Equation 13 ‣ 4.1 Constrained Stochastic Infinitely Deep Bayesian Neural Networks are not universal approximators ‣ 4 Expressivity Guarantees ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) in the sense of supreme norm. That is:\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | ℙ​(supx∈A\\|ℒ​(ψ1​(ω,x))−z​(x)\\|>1/2)=1,ℙsubscriptsupremum𝑥𝐴ℒsubscript𝜓1𝜔𝑥𝑧𝑥121\\\\mathbb{P}\\\\left(\\\\sup\\_{x\\\\in A}\\|\\\\mathcal{L}(\\\\psi\\_{1}(\\\\omega,x))-z(x)\\|>1/2\\\\right)=1, |  |\\\n\\\nwhere A={∥x∥≤r1,x∈ℝdx}∪{r2≤∥x∥≤r3,x∈ℝdx}A=\\\\{\\\\\\|{x}\\\\\\|\\\\leq r\\_{1},x\\\\in\\\\mathbb{R}^{d\\_{x}}\\\\}\\\\cup\\\\{r\\_{2}\\\\leq\\\\\\|{x}\\\\\\|\\\\leq r\\_{3},x\\\\in\\\\mathbb{R}^{d\\_{x}}\\\\} is the domain of z​(x)𝑧𝑥z(x).\\\n\\\nThe detailed proof is in Appendix [A]Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\").\\\n\\\n### 4.2 Partially Stochastic Infinitely Deep Bayesian Neural Networks are UCDAs\\\n\\\nWe investigate the expressivity of our model, that is, we investigate whether it is possible to approximate any conditional distribution with a posterior as defined in our PSDE-BNN architectures. Theorem [A.1]Theorem A.1. ‣ A.3 Proof of Theorem 4.2 ‣ Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") hints to get a positive result, especially because we benefit from an “infinite-dimensional” source of noise through the Brownian Motion Btsubscript𝐵𝑡B\\_{t}. However, since the hidden state htsubscriptℎ𝑡h\\_{t} is modelled with an ODE (for a fixed weight trajectory (wt)t∈\\[0,1\\]subscriptsubscript𝑤𝑡𝑡01(w\\_{t})\\_{t\\\\in\\[0,1\\]}), we need to augment the input space to unlock the model’s approximation power, as done by Dupont et al. ( [2019])) with the so-called Augmented Neural ODEs. Our theorem leverages four main results.\\\n\\\nFirst, we assume that, for m∈ℕ𝑚ℕm\\\\in\\\\mathbb{N} large enough, there exists a continuous generator function for the conditional distribution Y\\|Xconditional𝑌𝑋Y\\|X, i.e, a function f~:𝒳×ℝm→𝒴:~𝑓→𝒳superscriptℝ𝑚𝒴\\\\tilde{f}:\\\\mathcal{X}\\\\times\\\\mathbb{R}^{m}\\\\rightarrow\\\\mathcal{Y} such that for any η∼𝒩​(0,Im)similar-to𝜂𝒩0subscript𝐼𝑚\\\\eta\\\\sim\\\\mathcal{N}(0,I\\_{m}) independent of X𝑋X, (X,f~​(X,η))𝑋~𝑓𝑋𝜂(X,\\\\tilde{f}(X,\\\\eta)) is distributed like (X,Y)𝑋𝑌(X,Y). This assumption is motivated by the so-called Noise Outsourcing lemma (Kallenberg, [2010])) and we state it in Appendix [A]Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\").\\\nSecond, we use the results on the approximation capabilities of Neural ODEs, first proven by Zhang et al. ( [2020])) \\- Lemmas [3]Lemma 3. ‣ A.3 Proof of Theorem 4.2 ‣ Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") and [4]Lemma 4. ‣ A.3 Proof of Theorem 4.2 ‣ Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") in Appendix [A]Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"). Finally, we use the fact that classical Partially Stochastic finite-depth Bayesian Neural Networks are UCDAs (Sharma et al., [2023])), as stated in Appendix [A]Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"). We now present our main result:\\\n\\\n###### Theorem 4.2.\\\n\\\nLet X,Y𝑋𝑌X,Y be random variables taking values in 𝒳⊂ℝdx,𝒴⊂ℝdyformulae-sequence𝒳superscriptℝsubscript𝑑𝑥𝒴superscriptℝsubscript𝑑𝑦\\\\mathcal{X}\\\\subset\\\\mathbb{R}^{d\\_{x}},\\\\mathcal{Y}\\\\subset\\\\mathbb{R}^{d\\_{y}} respectively. Assume 𝒳𝒳\\\\mathcal{X} is compact. Assume further that there exists a continuous generator function f~:ℝm×𝒳→𝒴:~𝑓→superscriptℝ𝑚𝒳𝒴\\\\tilde{f}:\\\\mathbb{R}^{m}\\\\times\\\\mathcal{X}\\\\rightarrow\\\\mathcal{Y} for the conditional distribution Y\\|Xconditional𝑌𝑋Y\\|X for some m≥dy𝑚subscript𝑑𝑦m\\\\geq d\\_{y}. Consider a PSDE-BNN model given by ( [10]Equation 10 ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")), with dh,dwsubscript𝑑ℎsubscript𝑑𝑤d\\_{h},d\\_{w} large enough. Then, for all ε>0𝜀0\\\\varepsilon>0, there exist A∈ℱ,a,fh,fq,gp,θ𝐴ℱ𝑎subscript𝑓ℎsubscript𝑓𝑞subscript𝑔𝑝𝜃A\\\\in\\\\mathcal{F},a,f\\_{h},f\\_{q},g\\_{p},\\\\theta, a linear operator ℒℒ\\\\mathcal{L} and a random variable η∼𝒩​(0,Im)similar-to𝜂𝒩0subscript𝐼𝑚\\\\eta\\\\sim\\\\mathcal{N}(0,I\\_{m}) independent of X𝑋X such that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | (i)𝑖\\\\displaystyle(i) | ℙ​(A)≥1−ε,ℙ𝐴1𝜀\\\\displaystyle\\\\>\\\\>\\\\mathbb{P}(A)\\\\geq 1-\\\\varepsilon, |  |\\\n|  | (i​i)𝑖𝑖\\\\displaystyle(ii) | ∀ω∈A,x∈𝒳,‖ℒ​(ψ1​(ω,x))−f~​(η​(ω),x)‖≤ε.formulae-sequencefor-all𝜔𝐴formulae-sequence𝑥𝒳normℒsubscript𝜓1𝜔𝑥~𝑓𝜂𝜔𝑥𝜀\\\\displaystyle\\\\>\\\\>\\\\forall\\\\omega\\\\in A,x\\\\in\\\\mathcal{X},\\\\>\\|\\|\\\\mathcal{L}(\\\\psi\\_{1}(\\\\omega,x))-\\\\tilde{f}(\\\\eta(\\\\omega),x)\\|\\|\\\\leq\\\\varepsilon. |  |\\\n\\\nIn other words, there exists a PSDE-BNN model that approximates Y\\|Xconditional𝑌𝑋Y\\|X with high probability.\\\n\\\nThe detailed proof is in Appendix [A]Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"). At a high level, we construct a suitable PSDE-BNN architecture which, for t2<1subscript𝑡21t\\_{2}<1, allows wt2subscript𝑤subscript𝑡2w\\_{t\\_{2}} to be either fixed a priori, a learnable parameter, or the solution to the SDE in ( [6]Equation 6 ‣ 2nd item ‣ 3.1 Vertical separation of the weights ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")) at time t2subscript𝑡2t\\_{2}.\\\nFor the architecture of fq​(t,wt;θ)subscript𝑓𝑞𝑡subscript𝑤𝑡𝜃f\\_{q}(t,w\\_{t};\\\\theta), we introduce the following structure:\\\n\\\n- •\\\n\\\n\\\nWe partition the whole time interval \\[0,1\\]01\\[0,1\\] into three distinct decision regions, namely R1,R2subscript𝑅1subscript𝑅2R\\_{1},R\\_{2} and R3subscript𝑅3R\\_{3}. The specifics of these regions are elaborated upon in the proof in Appendix [A]Appendix A Proofs ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\").\\\n\\\n- •\\\n\\\n\\\nFor each region, we employ a network architecture capable of approximating any continuous function. Such architectures include fixed-width deep ReLU networks (Yarotsky, [2017])) and fixed-depth wide networks with non-polynomial activations (Leshno et al., [1993])). The parameters for each region θ1,θ2subscript𝜃1subscript𝜃2\\\\theta\\_{1},\\\\theta\\_{2} and θ3subscript𝜃3\\\\theta\\_{3} are distinct but collectively form the parameter vector θ𝜃\\\\theta.\\\n\\\n\\\nWe assume the volatility gp​(t,wt)subscript𝑔𝑝𝑡subscript𝑤𝑡g\\_{p}(t,w\\_{t}) to be a constant matrix for each of the time regions Risubscript𝑅𝑖R\\_{i}. For the function fh​(t,ht;wt)subscript𝑓ℎ𝑡subscriptℎ𝑡subscript𝑤𝑡f\\_{h}(t,h\\_{t};w\\_{t}), we use a similar architecture where the parameters correspond to the partially stochastic weights wtsubscript𝑤𝑡w\\_{t}. This construction allows us to find suitable parameters for our PSDE-BNN which approximate f~~𝑓\\\\tilde{f} with high probability.\\\n\\\nTable 1: Classification accuracy and expected calibration error (ECE) on MNIST and CIFAR-10 (across 3 seeds). We borrow several baseline results from Xu et al. [2022]) (indicated by ††{\\\\dagger}) and add the results for our PSDE-BNN models and an extra ResNet32 + Last-Layer Laplace approximation. Models are separated into point estimates, stochastic and partially stochastic “discrete-time”, and continuous-time models.\\\n\\\n|  | MNIST | CIFAR-10 |\\\n| Model | Accuracy (%) ↑↑\\\\uparrow | ECE (×10−2absentsuperscript102\\\\times 10^{-2}) ↓↓\\\\downarrow | Accuracy (%) ↑↑\\\\uparrow | ECE (×10−2absentsuperscript102\\\\times 10^{-2}) ↓↓\\\\downarrow |\\\n| ResNet32† | 99.46±plus-or-minus\\\\pm0.00 | 2.88 ±0.94plus-or-minus0.94\\\\pm 0.94 | 87.35 ±0.00plus-or-minus0.00\\\\pm 0.00 | 8.47±plus-or-minus\\\\pm0.39 |\\\n| ODENet† | 98.90 ±0.04plus-or-minus0.04\\\\pm 0.04 | 1.11±plus-or-minus\\\\pm0.10 | 88.30±plus-or-minus\\\\pm0.29 | 8.71 ±0.21plus-or-minus0.21\\\\pm 0.21 |\\\n| MFVI ResNet 32† | 99.40±plus-or-minus\\\\pm 0.00 | 2.76 ±plus-or-minus\\\\pm 1.28 | 86.97 ±plus-or-minus\\\\pm 0.00 | 3.04 ±plus-or-minus\\\\pm 0.94 |\\\n| MFVI† | — | — | 86.48 | 1.95 |\\\n| ResNet32 + LL Laplace | — | — | 92.10 | 2.98 |\\\n| Deep Ensemble† | — | — | 89.22 | 2.79 |\\\n| HMC (“gold standard”)† | 98.31 | 1.79 | 90.70 | 5.94 |\\\n| MFVI ODENet† | 98.81 ±0.00plus-or-minus0.00\\\\pm 0.00 | 2.63 ±0.31plus-or-minus0.31\\\\pm 0.31 | 81.59 ±0.01plus-or-minus0.01\\\\pm 0.01 | 3.62 ±0.40plus-or-minus0.40\\\\pm 0.40 |\\\n| MFVI HyperODENet† | 98.77 ±0.01plus-or-minus0.01\\\\pm 0.01 | 2.82 ±1.34plus-or-minus1.34\\\\pm 1.34 | 80.62 ±0.00plus-or-minus0.00\\\\pm 0.00 | 4.29 ±1.10plus-or-minus1.10\\\\pm 1.10 |\\\n| SDE-BNN | 98.55 ±0.09plus-or-minus0.09\\\\pm 0.09 | 0.63 ±0.10plus-or-minus0.10\\\\pm 0.10 | 86.04 ±0.25plus-or-minus0.25\\\\pm 0.25 | 9.13 ±0.28plus-or-minus0.28\\\\pm 0.28 |\\\n| PSDE-BNN - ODEFirst ( _ours_) | 99.30±plus-or-minus\\\\pm0.06 | 0.62 ±0.08plus-or-minus0.08\\\\pm 0.08 | 87.84±plus-or-minus\\\\pm0.08 | 4.73 ±0.07plus-or-minus0.07\\\\pm 0.07 |\\\n| PSDE-BNN - SDEFirst ( _ours_) | 99.10 ±0.07plus-or-minus0.07\\\\pm 0.07 | 0.56±plus-or-minus\\\\pm0.10 | 85.34 ±0.21plus-or-minus0.21\\\\pm 0.21 | 3.56±plus-or-minus\\\\pm0.15 |\\\n| PSDE-BNN - fix\\_w2 ( _ours_) | 99.30 ±0.07plus-or-minus0.07\\\\pm 0.07 | 0.60 ±plus-or-minus\\\\pm 0.10 | 87.49 ±0.24plus-or-minus0.24\\\\pm 0.24 | 5.27 ±plus-or-minus\\\\pm 0.17 |\\\n| PSDE-BNN - Hor. Cut ( _ours_) | 99.27 ±plus-or-minus\\\\pm 0.03 | 0.57 ±plus-or-minus\\\\pm 0.06 | 87.78 ±plus-or-minus\\\\pm 0.37 | 4.29 ±plus-or-minus\\\\pm 0.37 |\\\n\\",
            "citations": null
          },
          "5 Experiments\\": {
            "content": "\\\nIn this section, we detail our Partially Stochastic Infinitely Deep BNNs’ performance for image classification, uncertainty quantification, and learning efficiency. We compare these results with fully stochastic, partially stochastic and deterministic baselines, and we perform ablation studies to understand the impact of key hyperparameters.\\\n\\\n### 5.1 Experimental Setup\\\n\\\nIn the design of our model, we implement a similar approach to Xu et al. ( [2022])) by parametrising the drift of the variational posterior fqsubscript𝑓𝑞f\\_{q} through a multilayer perceptron. On the other hand, we choose a convolutional architecture for fhsubscript𝑓ℎf\\_{h}, although it can be widely varied across the given tasks.\\\n\\\nWe conduct our experiments under three distinct configurations. The first configuration, termed ‘SDEfirst’, is defined by setting the initial time cut, t1subscript𝑡1t\\_{1}, to 0. In this setup, the weights process is initially modelled with a SDE and then transitions to an ODE regime. Within this framework, we explore two sub-settings: one where the initial values of the ODE are the weights obtained from the SDE, and another, labelled ‘fix\\_w2’, where the initial values of the ODE are trainable parameters. The second configuration, ‘ODEFirst’, sets the second time cut, t2subscript𝑡2t\\_{2}, to 1, i.e. the endpoint of the considered time frame. Here, the weight evolution initially follows an ODE, with stochasticity introduced in the subsequent phase. The last configuration, the Horizontal Cut method (‘Hor. Cut’), splits the weight vector into two subsets, S𝑆S and D𝐷D \\- here t1=0subscript𝑡10t\\_{1}=0 and t2=1subscript𝑡21t\\_{2}=1. These segments evolve according to a SDE, discretised using the Euler-Maruyama scheme, and an ODE computed using the Midpoint scheme, respectively. For hyperparameter optimisation, we employ a comprehensive grid search, which are detailed in Appendix [D]Appendix D Experimental setting ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"). Across all experiments, the diffusion function gpsubscript𝑔𝑝g\\_{p} is set to a constant value. Lastly, experiments were conducted on a single Nvidia RTX 3090 GPU.\\\n\\\n### 5.2 Image Classification\\\n\\\nSimilar to Xu et al. ( [2022])), the hidden state’s instantaneous modifications (fhsubscript𝑓ℎf\\_{h}) are parameterised with a convolutional neural network, which includes a strided convolution for downsampling and a transposed convolution layer for upsampling. The weights wtsubscript𝑤𝑡w\\_{t} are set to be the filters and biases of these layers. The MLP parametrising fqsubscript𝑓𝑞f\\_{q} includes bottleneck layers (e.g. 2-128-2) in order to minimise the variational parameters and ensure linear scalability with the dimension of wtsubscript𝑤𝑡w\\_{t}. For the MNIST (LeCun et al., [2010])) dataset, a single SDE-BNN block is utilised, whereas, for CIFAR-10 (Krizhevsky, [2009])), we employ a multi-scale approach with several SDE-BNN blocks with the invertible downsampling from Dinh et al. ( [2016])) in between.\\\n\\\nThe classification outcomes, as detailed in Table [1]Table 1 ‣ 4.2 Partially Stochastic Infinitely Deep Bayesian Neural Networks are UCDAs ‣ 4 Expressivity Guarantees ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"), demonstrate the superior performance of our model against baseline models across the datasets. Notably, while ODEnet architectures (Hu et al., [2020])) reach comparable classification metrics to standard residual networks, they fall short in terms of calibration. Our PSDE-BNN model exhibits enhanced accuracy relative to other stochastic frameworks, such as mean field variational inference (MFVI) ODEnets, which employ stochastic variational inference over weights invariant to depth. Furthermore, even in the realm of image classification, where discrete networks like ResNet32 with last-layer Laplace approximation exhibit strong performance, our continuous-depth approach remains competitive. It’s crucial to recognise the differences between these architectures; discrete networks may inherently align more closely with image classification tasks. However, our PSDE-BNN models achieve comparable performance without mechanisms like last-layer Laplace approximation, which are inapplicable in the infinite-depth setting. Moreover, the analysis reveals a consistent level of performance across the three distinct PSDE-BNN configurations, underlining the robustness of our approach regardless of the specific setting.\\\n\\\n### 5.3 Uncertainty Quantification\\\n\\\nIn the discrete neural networks domain, partial stochasticity is initially conceptualised as a simplified approximation of fully stochastic neural networks aimed at providing just enough uncertainty quantification. However, as we have theoratically established in earlier sections, partial stochasticity provides an expressive framework to approximate any posterior distribution. In this section, we further prove this empirically by looking at the expected calibration error (ECE) of the models at test time, and by performing predictive entropy analysis of out-of-distribution (OOD) and in-distribution (ID) samples.\\\n\\\nTable [1]Table 1 ‣ 4.2 Partially Stochastic Infinitely Deep Bayesian Neural Networks are UCDAs ‣ 4 Expressivity Guarantees ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") shows that across the uncertainty-aware models, our PSDE-BNN (SDEFirst) surpasses all baseline models in ECE performance. While ODEFirst, SDEFirst with ‘fix\\_w2’, and PSDE-BNN (Hor. Cut) consistently demonstrate competitive error calibration and accuracy, SDE-BNN faces challenges in maintaining low ECE when striving for higher accuracy. This is because, during training, a trade-off emerges: ECE is sacrificed for improved accuracy, likely due to overfitting that narrows uncertainty estimates over time. The phenomenon is accentuated for the SDE-BNN which, at relatively low accuracies for CIFAR-10 (in the range of 70% - 80%) can achieve good ECE performance which quickly - and at a much faster rate than PSDE-BNNs - decays over epochs.\\\n\\\nEncouraged by the calibration results, we now assess model performance in differentiating ID from OOD samples. A well-known problem with deterministic networks is that, regardless of the input sample, they will always be overconfident in their prediction. Ideally, this should not be the case for OOD samples, and models with good uncertainty quantification can reduce the magnitude of this issue. Our evaluation, based on ROC curves and AUC values (see Appendix [B]Appendix B Uncertainty Quantification - ROC Curves ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")), shows that our partially stochastic models (AUC: 0.88 for models with vertical cuts, AUC:0.86 for the model with horizontal cut) outperform the SDE-BNN model (AUC: 0.84). Figure [3]Figure 3 ‣ 5.3 Uncertainty Quantification ‣ 5 Experiments ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") further dissects the predictive entropy distributions, underscoring our models’ superior performance in representing OOD uncertainty.\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\n![Refer to caption]\\\n\\\nFigure 3: Histograms depicting the distribution of predictive uncertainty for SDE-BNN (green) and PSDE-BNN ODEFirst (blue), SDEFirst (red), and with horizontal cuts (orange) across CIFAR-10 test predictions (top row) and OOD samples predictions (bottom row). Entropy was computed for each prediction, with higher values indicating greater uncertainty. Note that the legend includes summary statistics of the histograms, i.e. mean and standard deviation.\\\n\\\n### 5.4 Efficiency and Learning Rate\\\n\\\nThe approach from Xu et al. ( [2022])), has limited use in practice due to excessively long training and inference times. Indeed, one of the main incentives behind this paper is to provide an efficient alternative to SDE-BNN that is practical and can be efficiently used for downstream tasks. To determine the efficiency of our models, we measure the average time taken to compute an epoch and the inference time required to make 10000 CIFAR-10 predictions. In this section, we focus on models with vertical cuts due to the current lack of an optimised numerical solver for the horizontal cut model. Table [2]Table 2 ‣ 5.4 Efficiency and Learning Rate ‣ 5 Experiments ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") shows a significant gap between both PSDE-BNN models and SDE-BNN in both tasks. Our faster model achieves 27.5% quicker epoch completion on average and is 25.9% faster at inference than the baseline.\\\n\\\nTable 2: Models’ average time per training epoch and at inference.\\\n\\\n| Model | Epoch Time (s) | Inference Time (s) |\\\n| --- | --- | --- |\\\n| SDE-BNN | 371.9371.9371.9 | 43.743.743.7 |\\\n| ODEFirst | 289.4 | 31.7 |\\\n| SDEFirst | 295.1295.1295.1 | 31.7 |\\\n\\\nNext, we explore the learning rate of our models, i.e. how many epochs the network takes to get to acceptable downstream task performance. PSDE-BNN takes considerably less time to achieve the reported classification accuracies. While our models trained for 100 epochs, SDE-BNN (and as reported by Xu et al. [2022])) required 300 epochs. The evolution after the 80% test accuracy for SDE-BNN was especially long. This indicates that PSDE-BNNs were both faster at each epoch, and only needed a third of the epochs to achieve similar (although still better) downstream performance. Therefore, the overall training time was 74.1% faster.\\\n\\\n### 5.5 Ablation Studies\\\n\\\nHere, we explore the sensitivity of the PSDE-BNN model with vertical separation of the weights to key hyperparameters. We determine the impact of the stochasticity ratio, which modulates the duration of stochastic dynamics in our framework, and the KL coefficient on model performance (κ𝜅\\\\kappa in ( [12]Equation 12 ‣ 3.3 Training the network ‣ 3 Method ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\"))).\\\n\\\nThe ablation studies (Table [3]Table 3 ‣ Appendix C Further Training Visualisations ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\") in Appendix [C]Appendix C Further Training Visualisations ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")), show no correlation between the stochasticity ratio and downstream performance or uncertainty metrics (ECEs and entropy). This is consistent with the literature in partially stochastic networks, where several approaches achieve competitive uncertainty representations with only the last discrete layer of the network being stochastic (e.g. using Laplace approximation or HMC) demonstrating that a small subset of stochastic weights suffices (Daxberger et al. [2021a]); Duran-Martin et al. [2022]); Immer et al. [2021]); Antorán et al. [2023])). However, higher stochasticity ratios increase computation times. Given the lack of performance trade-off, the stochasticity ratio in our optimal model is set to 10%. Moreover, we find that increasing the order of κ𝜅\\\\kappa to 10−2superscript10210^{-2} leads to an enhanced learning rate, but at the cost of numerical instability during training. In contrast, decreasing the order of κ𝜅\\\\kappa to 10−4superscript10410^{-4} makes the training of the models converge slower. Given this trade-off, we conclude that the default value of κ=10−3𝜅superscript103\\\\kappa=10^{-3} is the most versatile (see Appendix [C]Appendix C Further Training Visualisations ‣ Partially Stochastic Infinitely Deep Bayesian Neural Networks\")).\\\n\\",
            "citations": null
          },
          "6 Conclusion and Future Work\\": {
            "content": "\\\nWe introduce Partially Stochastic Bayesian Neural Networks in the infinite-depth limit. We provide an exact mathematical formulation of our method and conceptualise how to split weights of continuous-time networks into subsets of stochastic and deterministic weights. With these foundations, we then prove several theoretical building blocks that lead to the conclusion that our novel family of networks are UCDAs. Additionally, we back up the results with a collection of empirical experiments that demonstrate how all our models outperform fully stochastic networks and other approximations of Bayesian inference in continuous-time models (e.g. MFVI). More importantly, we show that this improved performance is achieved with a significant efficiency boost that does not come with any performance trade-off. Furthermore, we provide a comprehensive study of the most important hyperparameters of our models. Therefore, our newly introduced family of Bayesian Neural Networks in the infinite-depth limit, are a better, more efficient, and practical alternative to existing models.\\\n\\\nIn future work, we aim to develop an optimised numerical solver for models with horizontal cuts, enhancing their computational efficiency. We also plan to investigate models incorporating both horizontal and vertical cuts to explore potential performance improvements. Additionally, we will explore variance reduction techniques such as Sticking The Landing (Roeder et al., [2017])) to improve the performance and stability of our models.\\\n\\",
            "citations": null
          }
        },
        "abstract": "In this paper, we present Partially Stochastic Infinitely Deep Bayesian\nNeural Networks, a novel family of architectures that integrates partial\nstochasticity into the framework of infinitely deep neural networks. Our new\nclass of architectures is designed to improve the computational efficiency of\nexisting architectures at training and inference time. To do this, we leverage\nthe advantages of partial stochasticity in the infinite-depth limit which\ninclude the benefits of full stochasticity e.g. robustness, uncertainty\nquantification, and memory efficiency, whilst improving their limitations\naround computational complexity. We present a variety of architectural\nconfigurations, offering flexibility in network design including different\nmethods for weight partition. We also provide mathematical guarantees on the\nexpressivity of our models by establishing that our network family qualifies as\nUniversal Conditional Distribution Approximators. Lastly, empirical evaluations\nacross multiple tasks show that our proposed architectures achieve better\ndownstream task performance and uncertainty quantification than their\ncounterparts while being significantly more efficient. The code can be found at\n\\url{https://github.com/Sergio20f/part_stoch_inf_deep}"
      },
      "bib.bib8": {
        "id": "bib.bib8",
        "citation": "Kipf and Welling [2016]",
        "authors": "",
        "year": "",
        "title": "Semi-supervised classification with graph convolutional networks.",
        "venue": "arXiv preprint arXiv:1609.02907",
        "pages": "",
        "url": "",
        "arxiv_id": "1609.02907",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "We consider the problem of classifying nodes (such as documents) in a graph (such as a citation network), where labels are only available for a small subset of nodes. This problem can be framed as graph-based semi-supervised learning, where label information is smoothed over the graph via some form of explicit graph-based regularization (Zhu et al., [2003]); Zhou et al., [2004]); Belkin et al., [2006]); Weston et al., [2012])), e.g. by using a graph Laplacian regularization term in the loss function:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ=ℒ0+λ​ℒreg,withℒreg=∑i,jAi​j​‖f​(Xi)−f​(Xj)‖2=f​(X)⊤​Δ​f​(X).formulae-sequenceℒsubscriptℒ0𝜆subscriptℒregwithsubscriptℒregsubscript𝑖𝑗subscript𝐴𝑖𝑗superscriptnorm𝑓subscript𝑋𝑖𝑓subscript𝑋𝑗2𝑓superscript𝑋topΔ𝑓𝑋\\\\mathcal{L}=\\\\mathcal{L}\\_{0}+\\\\lambda\\\\mathcal{L}\\_{\\\\text{reg}}\\\\,,\\\\quad\\\\text{with}\\\\quad\\\\mathcal{L}\\_{\\\\text{reg}}=\\\\sum\\_{i,j}A\\_{ij}\\\\\\|f(X\\_{i})-f(X\\_{j})\\\\\\|^{2}=f(X)^{\\\\top}\\\\Delta f(X)\\\\,. |  | (1) |\n\nHere, ℒ0subscriptℒ0\\\\mathcal{L}\\_{0} denotes the supervised loss w.r.t. the labeled part of the graph, f​(⋅)𝑓⋅f(\\\\cdot) can be a neural network-like differentiable function, λ𝜆\\\\lambda is a weighing factor and X𝑋X is a matrix of node feature vectors Xisubscript𝑋𝑖X\\_{i}. Δ=D−AΔ𝐷𝐴\\\\Delta=D-A denotes the unnormalized graph Laplacian of an undirected graph 𝒢=(𝒱,ℰ)𝒢𝒱ℰ\\\\mathcal{G}=(\\\\mathcal{V},\\\\mathcal{E}) with N𝑁N nodes vi∈𝒱subscript𝑣𝑖𝒱v\\_{i}\\\\in\\\\mathcal{V}, edges (vi,vj)∈ℰsubscript𝑣𝑖subscript𝑣𝑗ℰ(v\\_{i},v\\_{j})\\\\in\\\\mathcal{E}, an adjacency matrix A∈ℝN×N𝐴superscriptℝ𝑁𝑁A\\\\in\\\\mathbb{R}^{N\\\\times N} (binary or weighted) and a degree matrix Di​i=∑jAi​jsubscript𝐷𝑖𝑖subscript𝑗subscript𝐴𝑖𝑗D\\_{ii}=\\\\sum\\_{j}A\\_{ij}. The formulation of Eq. [1]In 1 Introduction ‣ Semi-Supervised Classification with Graph Convolutional Networks\") relies on the assumption that connected nodes in the graph are likely to share the same label. This assumption, however, might restrict modeling capacity, as graph edges need not necessarily encode node similarity, but could contain additional information.\n\nIn this work, we encode the graph structure directly using a neural network model f​(X,A)𝑓𝑋𝐴f(X,A) and train on a supervised target ℒ0subscriptℒ0\\\\mathcal{L}\\_{0} for all nodes with labels, thereby avoiding explicit graph-based regularization in the loss function. Conditioning f​(⋅)𝑓⋅f(\\\\cdot) on the adjacency matrix of the graph will allow the model to distribute gradient information from the supervised loss ℒ0subscriptℒ0\\\\mathcal{L}\\_{0} and will enable it to learn representations of nodes both with and without labels.\n\nOur contributions are two-fold. Firstly, we introduce a simple and well-behaved layer-wise propagation rule for neural network models which operate directly on graphs and show how it can be motivated from a first-order approximation of spectral graph convolutions (Hammond et al., [2011])). Secondly, we demonstrate how this form of a graph-based neural network model can be used for fast and scalable semi-supervised classification of nodes in a graph. Experiments on a number of datasets demonstrate that our model compares favorably both in classification accuracy and efficiency (measured in wall-clock time) against state-of-the-art methods for semi-supervised learning.",
            "citations": null
          },
          "2 Fast Approximate Convolutions on Graphs": {
            "content": "In this section, we provide theoretical motivation for a specific graph-based neural network model f​(X,A)𝑓𝑋𝐴f(X,A) that we will use in the rest of this paper. We consider a multi-layer Graph Convolutional Network (GCN) with the following layer-wise propagation rule:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | H(l+1)=σ​(D~−12​A~​D~−12​H(l)​W(l)).superscript𝐻𝑙1𝜎superscript~𝐷12~𝐴superscript~𝐷12superscript𝐻𝑙superscript𝑊𝑙\\\\textstyle H^{(l+1)}=\\\\sigma\\\\!\\\\left(\\\\tilde{D}^{-\\\\frac{1}{2}}\\\\tilde{A}\\\\tilde{D}^{-\\\\frac{1}{2}}H^{(l)}W^{(l)}\\\\right)\\\\,. |  | (2) |\n\nHere, A~=A+IN~𝐴𝐴subscript𝐼𝑁\\\\tilde{A}=A+I\\_{N} is the adjacency matrix of the undirected graph 𝒢𝒢\\\\mathcal{G} with added self-connections. INsubscript𝐼𝑁I\\_{N} is the identity matrix, D~i​i=∑jA~i​jsubscript~𝐷𝑖𝑖subscript𝑗subscript~𝐴𝑖𝑗\\\\tilde{D}\\_{ii}=\\\\sum\\_{j}\\\\tilde{A}\\_{ij} and W(l)superscript𝑊𝑙W^{(l)} is a layer-specific trainable weight matrix. σ​(⋅)𝜎⋅\\\\sigma(\\\\cdot) denotes an activation function, such as the ReLU​(⋅)=max⁡(0,⋅)ReLU⋅0⋅\\\\mathrm{ReLU}(\\\\cdot)=\\\\max(0,\\\\cdot). H(l)∈ℝN×Dsuperscript𝐻𝑙superscriptℝ𝑁𝐷H^{(l)}\\\\in\\\\mathbb{R}^{N\\\\times D} is the matrix of activations in the lthsuperscript𝑙thl^{\\\\text{th}} layer; H(0)=Xsuperscript𝐻0𝑋H^{(0)}=X. In the following, we show that the form of this propagation rule can be motivated111We provide an alternative interpretation of this propagation rule based on the Weisfeiler-Lehman algorithm (Weisfeiler & Lehmann, [1968])) in Appendix [A]Appendix A Relation to Weisfeiler-Lehman Algorithm ‣ Semi-Supervised Classification with Graph Convolutional Networks\"). via a first-order approximation of localized spectral filters on graphs (Hammond et al., [2011]); Defferrard et al., [2016])).\n\n### 2.1 Spectral Graph Convolutions\n\nWe consider spectral convolutions on graphs defined as the multiplication of a signal x∈ℝN𝑥superscriptℝ𝑁x\\\\in\\\\mathbb{R}^{N} (a scalar for every node) with a filter gθ=diag​(θ)subscript𝑔𝜃diag𝜃g\\_{\\\\theta}=\\\\text{diag}(\\\\theta) parameterized by θ∈ℝN𝜃superscriptℝ𝑁\\\\theta\\\\in\\\\mathbb{R}^{N} in the Fourier domain, i.e.:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | gθ⋆x=U​gθ​U⊤​x,⋆subscript𝑔𝜃𝑥𝑈subscript𝑔𝜃superscript𝑈top𝑥g\\_{\\\\theta}\\\\star x=Ug\\_{\\\\theta}U^{\\\\top}x\\\\,, |  | (3) |\n\nwhere U𝑈U is the matrix of eigenvectors of the normalized graph Laplacian L=IN−D−12​A​D−12=U​Λ​U⊤𝐿subscript𝐼𝑁superscript𝐷12𝐴superscript𝐷12𝑈Λsuperscript𝑈topL=I\\_{N}-D^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}}=U\\\\Lambda U^{\\\\top}, with a diagonal matrix of its eigenvalues ΛΛ\\\\Lambda and U⊤​xsuperscript𝑈top𝑥U^{\\\\top}x being the graph Fourier transform of x𝑥x. We can understand gθsubscript𝑔𝜃g\\_{\\\\theta} as a function of the eigenvalues of L𝐿L, i.e. gθ​(Λ)subscript𝑔𝜃Λg\\_{\\\\theta}(\\\\Lambda). Evaluating Eq. [3]In 2.1 Spectral Graph Convolutions ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\") is computationally expensive, as multiplication with the eigenvector matrix U𝑈U is 𝒪​(N2)𝒪superscript𝑁2\\\\mathcal{O}(N^{2}). Furthermore, computing the eigendecomposition of L𝐿L in the first place might be prohibitively expensive for large graphs. To circumvent this problem, it was suggested in Hammond et al. ( [2011])) that gθ​(Λ)subscript𝑔𝜃Λg\\_{\\\\theta}(\\\\Lambda) can be well-approximated by a truncated expansion in terms of Chebyshev polynomials Tk​(x)subscript𝑇𝑘𝑥T\\_{k}(x) up to Kthsuperscript𝐾thK^{\\\\text{th}} order:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | gθ′​(Λ)≈∑k=0Kθk′​Tk​(Λ~),subscript𝑔superscript𝜃′Λsuperscriptsubscript𝑘0𝐾superscriptsubscript𝜃𝑘′subscript𝑇𝑘~Λg\\_{\\\\theta^{\\\\prime}}(\\\\Lambda)\\\\approx\\\\sum\\_{k=0}^{K}\\\\theta\\_{k}^{\\\\prime}T\\_{k}(\\\\tilde{\\\\Lambda})\\\\,, |  | (4) |\n\nwith a rescaled Λ~=2λmax​Λ−IN~Λ2subscript𝜆maxΛsubscript𝐼𝑁\\\\tilde{\\\\Lambda}=\\\\frac{2}{\\\\lambda\\_{\\\\text{max}}}\\\\Lambda-I\\_{N}. λmaxsubscript𝜆max\\\\lambda\\_{\\\\text{max}} denotes the largest eigenvalue of L𝐿L. θ′∈ℝKsuperscript𝜃′superscriptℝ𝐾\\\\theta^{\\\\prime}\\\\in\\\\mathbb{R}^{K} is now a vector of Chebyshev coefficients. The Chebyshev polynomials are recursively defined as Tk​(x)=2​x​Tk−1​(x)−Tk−2​(x)subscript𝑇𝑘𝑥2𝑥subscript𝑇𝑘1𝑥subscript𝑇𝑘2𝑥T\\_{k}(x)=2xT\\_{k-1}(x)-T\\_{k-2}(x), with T0​(x)=1subscript𝑇0𝑥1T\\_{0}(x)=1 and T1​(x)=xsubscript𝑇1𝑥𝑥T\\_{1}(x)=x. The reader is referred to Hammond et al. ( [2011])) for an in-depth discussion of this approximation.\n\nGoing back to our definition of a convolution of a signal x𝑥x with a filter gθ′subscript𝑔superscript𝜃′g\\_{\\\\theta^{\\\\prime}}, we now have:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | gθ′⋆x≈∑k=0Kθk′​Tk​(L~)​x,⋆subscript𝑔superscript𝜃′𝑥superscriptsubscript𝑘0𝐾superscriptsubscript𝜃𝑘′subscript𝑇𝑘~𝐿𝑥g\\_{\\\\theta^{\\\\prime}}\\\\star x\\\\approx\\\\sum\\_{k=0}^{K}\\\\theta\\_{k}^{\\\\prime}T\\_{k}(\\\\tilde{L})x\\\\,, |  | (5) |\n\nwith L~=2λmax​L−IN~𝐿2subscript𝜆max𝐿subscript𝐼𝑁\\\\tilde{L}=\\\\frac{2}{\\\\lambda\\_{\\\\text{max}}}L-I\\_{N}; as can easily be verified by noticing that (U​Λ​U⊤)k=U​Λk​U⊤superscript𝑈Λsuperscript𝑈top𝑘𝑈superscriptΛ𝑘superscript𝑈top(U\\\\Lambda U^{\\\\top})^{k}=U\\\\Lambda^{k}U^{\\\\top}. Note that this expression is now K𝐾K-localized since it is a Kthsuperscript𝐾thK^{\\\\text{th}}-order polynomial in the Laplacian, i.e. it depends only on nodes that are at maximum K𝐾K steps away from the central node (Kthsuperscript𝐾thK^{\\\\text{th}}-order neighborhood). The complexity of evaluating Eq. [5]In 2.1 Spectral Graph Convolutions ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\") is 𝒪​(\\|ℰ\\|)𝒪ℰ\\\\mathcal{O}(\\|\\\\mathcal{E}\\|), i.e. linear in the number of edges. Defferrard et al. ( [2016])) use this K𝐾K-localized convolution to define a convolutional neural network on graphs.\n\n### 2.2 Layer-Wise Linear Model\n\nA neural network model based on graph convolutions can therefore be built by stacking multiple convolutional layers of the form of Eq. [5]In 2.1 Spectral Graph Convolutions ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\"), each layer followed by a point-wise non-linearity. Now, imagine we limited the layer-wise convolution operation to K=1𝐾1K=1 (see Eq. [5]In 2.1 Spectral Graph Convolutions ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")), i.e. a function that is linear w.r.t. L𝐿L and therefore a linear function on the graph Laplacian spectrum.\n\nIn this way, we can still recover a rich class of convolutional filter functions by stacking multiple such layers, but we are not limited to the explicit parameterization given by, e.g., the Chebyshev polynomials. We intuitively expect that such a model can alleviate the problem of overfitting on local neighborhood structures for graphs with very wide node degree distributions, such as social networks, citation networks, knowledge graphs and many other real-world graph datasets. Additionally, for a fixed computational budget, this layer-wise linear formulation allows us to build deeper models, a practice that is known to improve modeling capacity on a number of domains (He et al., [2016])).\n\nIn this linear formulation of a GCN we further approximate λmax≈2subscript𝜆max2\\\\lambda\\_{\\\\text{max}}\\\\approx 2, as we can expect that neural network parameters will adapt to this change in scale during training. Under these approximations Eq. [5]In 2.1 Spectral Graph Convolutions ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\") simplifies to:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | gθ′⋆x≈θ0′​x+θ1′​(L−IN)​x=θ0′​x−θ1′​D−12​A​D−12​x,⋆subscript𝑔superscript𝜃′𝑥superscriptsubscript𝜃0′𝑥superscriptsubscript𝜃1′𝐿subscript𝐼𝑁𝑥superscriptsubscript𝜃0′𝑥superscriptsubscript𝜃1′superscript𝐷12𝐴superscript𝐷12𝑥g\\_{\\\\theta^{\\\\prime}}\\\\star x\\\\approx\\\\theta\\_{0}^{\\\\prime}x+\\\\theta\\_{1}^{\\\\prime}\\\\left(L-I\\_{N}\\\\right)x=\\\\theta\\_{0}^{\\\\prime}x-\\\\theta\\_{1}^{\\\\prime}D^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}}x\\\\,, |  | (6) |\n\nwith two free parameters θ0′superscriptsubscript𝜃0′\\\\theta\\_{0}^{\\\\prime} and θ1′superscriptsubscript𝜃1′\\\\theta\\_{1}^{\\\\prime}. The filter parameters can be shared over the whole graph. Successive application of filters of this form then effectively convolve the kthsuperscript𝑘thk^{\\\\text{th}}-order neighborhood of a node, where k𝑘k is the number of successive filtering operations or convolutional layers in the neural network model.\n\nIn practice, it can be beneficial to constrain the number of parameters further to address overfitting and to minimize the number of operations (such as matrix multiplications) per layer. This leaves us with the following expression:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | gθ⋆x≈θ​(IN+D−12​A​D−12)​x,⋆subscript𝑔𝜃𝑥𝜃subscript𝐼𝑁superscript𝐷12𝐴superscript𝐷12𝑥g\\_{\\\\theta}\\\\star x\\\\approx\\\\theta\\\\left(I\\_{N}+D^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}}\\\\right)x\\\\,, |  | (7) |\n\nwith a single parameter θ=θ0′=−θ1′𝜃superscriptsubscript𝜃0′superscriptsubscript𝜃1′\\\\theta=\\\\theta\\_{0}^{\\\\prime}=-\\\\theta\\_{1}^{\\\\prime}. Note that IN+D−12​A​D−12subscript𝐼𝑁superscript𝐷12𝐴superscript𝐷12I\\_{N}+D^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}} now has eigenvalues in the range \\[0,2\\]02\\[0,2\\]. Repeated application of this operator can therefore lead to numerical instabilities and exploding/vanishing gradients when used in a deep neural network model. To alleviate this problem, we introduce the following renormalization trick: IN+D−12​A​D−12→D~−12​A~​D~−12→subscript𝐼𝑁superscript𝐷12𝐴superscript𝐷12superscript~𝐷12~𝐴superscript~𝐷12I\\_{N}+D^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}}\\\\rightarrow\\\\tilde{D}^{-\\\\frac{1}{2}}\\\\tilde{A}\\\\tilde{D}^{-\\\\frac{1}{2}}, with A~=A+IN~𝐴𝐴subscript𝐼𝑁\\\\tilde{A}=A+I\\_{N} and D~i​i=∑jA~i​jsubscript~𝐷𝑖𝑖subscript𝑗subscript~𝐴𝑖𝑗\\\\tilde{D}\\_{ii}=\\\\sum\\_{j}\\\\tilde{A}\\_{ij}.\n\nWe can generalize this definition to a signal X∈ℝN×C𝑋superscriptℝ𝑁𝐶X\\\\in\\\\mathbb{R}^{N\\\\times C} with C𝐶C input channels (i.e. a C𝐶C-dimensional feature vector for every node) and F𝐹F filters or feature maps as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Z=D~−12​A~​D~−12​X​Θ,𝑍superscript~𝐷12~𝐴superscript~𝐷12𝑋ΘZ=\\\\tilde{D}^{-\\\\frac{1}{2}}\\\\tilde{A}\\\\tilde{D}^{-\\\\frac{1}{2}}X\\\\Theta\\\\,, |  | (8) |\n\nwhere Θ∈ℝC×FΘsuperscriptℝ𝐶𝐹\\\\Theta\\\\in\\\\mathbb{R}^{C\\\\times F} is now a matrix of filter parameters and Z∈ℝN×F𝑍superscriptℝ𝑁𝐹Z\\\\in\\\\mathbb{R}^{N\\\\times F} is the convolved signal matrix. This filtering operation has complexity 𝒪​(\\|ℰ\\|​F​C)𝒪ℰ𝐹𝐶\\\\mathcal{O}(\\|\\\\mathcal{E}\\|FC), as A~​X~𝐴𝑋\\\\tilde{A}X can be efficiently implemented as a product of a sparse matrix with a dense matrix.",
            "citations": null
          },
          "3 Semi-Supervised Node Classification": {
            "content": "Having introduced a simple, yet flexible model f​(X,A)𝑓𝑋𝐴f(X,A) for efficient information propagation on graphs, we can return to the problem of semi-supervised node classification. As outlined in the introduction, we can relax certain assumptions typically made in graph-based semi-supervised learning by conditioning our model f​(X,A)𝑓𝑋𝐴f(X,A) both on the data X𝑋X and on the adjacency matrix A𝐴A of the underlying graph structure. We expect this setting to be especially powerful in scenarios where the adjacency matrix contains information not present in the data X𝑋X, such as citation links between documents in a citation network or relations in a knowledge graph. The overall model, a multi-layer GCN for semi-supervised learning, is schematically depicted in Figure [1]Figure 1 ‣ 3 Semi-Supervised Node Classification ‣ Semi-Supervised Classification with Graph Convolutional Networks\").\n\n![Refer to caption](a) Graph Convolutional Network\n\n![Refer to caption](b) Hidden layer activations\n\nFigure 1: _Left_: Schematic depiction of multi-layer Graph Convolutional Network (GCN) for semi-supervised learning with C𝐶C input channels and F𝐹F feature maps in the output layer. The graph structure (edges shown as black lines) is shared over layers, labels are denoted by Yisubscript𝑌𝑖Y\\_{i}. _Right_: t-SNE (Maaten & Hinton, [2008])) visualization of hidden layer activations of a two-layer GCN trained on the Cora dataset (Sen et al., [2008])) using 5%percent55\\\\% of labels. Colors denote document class.\n\n### 3.1 Example\n\nIn the following, we consider a two-layer GCN for semi-supervised node classification on a graph with a symmetric adjacency matrix A𝐴A (binary or weighted). We first calculate A^=D~−12​A~​D~−12^𝐴superscript~𝐷12~𝐴superscript~𝐷12\\\\hat{A}=\\\\tilde{D}^{-\\\\frac{1}{2}}\\\\tilde{A}\\\\tilde{D}^{-\\\\frac{1}{2}} in a pre-processing step. Our forward model then takes the simple form:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Z=f​(X,A)=softmax​(A^​ReLU​(A^​X​W(0))​W(1)).𝑍𝑓𝑋𝐴softmax^𝐴ReLU^𝐴𝑋superscript𝑊0superscript𝑊1Z=f(X,A)=\\\\mathrm{softmax}\\\\!\\\\left(\\\\hat{A}\\\\,\\\\,\\\\mathrm{ReLU}\\\\!\\\\left(\\\\hat{A}XW^{(0)}\\\\right)W^{(1)}\\\\right)\\\\,. |  | (9) |\n\nHere, W(0)∈ℝC×Hsuperscript𝑊0superscriptℝ𝐶𝐻W^{(0)}\\\\in\\\\mathbb{R}^{C\\\\times H} is an input-to-hidden weight matrix for a hidden layer with H𝐻H feature maps. W(1)∈ℝH×Fsuperscript𝑊1superscriptℝ𝐻𝐹W^{(1)}\\\\in\\\\mathbb{R}^{H\\\\times F} is a hidden-to-output weight matrix. The softmax activation function, defined as softmax​(xi)=1𝒵​exp⁡(xi)softmaxsubscript𝑥𝑖1𝒵subscript𝑥𝑖\\\\mathrm{softmax}(x\\_{i})=\\\\frac{1}{\\\\mathcal{Z}}\\\\exp(x\\_{i}) with 𝒵=∑iexp⁡(xi)𝒵subscript𝑖subscript𝑥𝑖\\\\mathcal{Z}=\\\\sum\\_{i}\\\\exp(x\\_{i}), is applied row-wise. For semi-supervised multi-class classification, we then evaluate the cross-entropy error over all labeled examples:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ=−∑l∈𝒴L∑f=1FYl​f​ln⁡Zl​f,ℒsubscript𝑙subscript𝒴𝐿superscriptsubscript𝑓1𝐹subscript𝑌𝑙𝑓subscript𝑍𝑙𝑓\\\\mathcal{L}=-\\\\sum\\_{l\\\\in\\\\mathcal{Y}\\_{L}}\\\\sum\\_{f=1}^{F}Y\\_{lf}\\\\ln Z\\_{lf}\\\\,, |  | (10) |\n\nwhere 𝒴Lsubscript𝒴𝐿\\\\mathcal{Y}\\_{L} is the set of node indices that have labels.\n\nThe neural network weights W(0)superscript𝑊0W^{(0)} and W(1)superscript𝑊1W^{(1)} are trained using gradient descent. In this work, we perform batch gradient descent using the full dataset for every training iteration, which is a viable option as long as datasets fit in memory. Using a sparse representation for A𝐴A, memory requirement is 𝒪​(\\|ℰ\\|)𝒪ℰ\\\\mathcal{O}(\\|\\\\mathcal{E}\\|), i.e. linear in the number of edges. Stochasticity in the training process is introduced via dropout (Srivastava et al., [2014])). We leave memory-efficient extensions with mini-batch stochastic gradient descent for future work.\n\n### 3.2 Implementation\n\nIn practice, we make use of TensorFlow (Abadi et al., [2015])) for an efficient GPU-based implementation222Code to reproduce our experiments is available at https://github.com/tkipf/gcn. of Eq. [9]In 3.1 Example ‣ 3 Semi-Supervised Node Classification ‣ Semi-Supervised Classification with Graph Convolutional Networks\") using sparse-dense matrix multiplications. The computational complexity of evaluating Eq. [9]In 3.1 Example ‣ 3 Semi-Supervised Node Classification ‣ Semi-Supervised Classification with Graph Convolutional Networks\") is then 𝒪​(\\|ℰ\\|​C​H​F)𝒪ℰ𝐶𝐻𝐹\\\\mathcal{O}(\\|\\\\mathcal{E}\\|CHF), i.e. linear in the number of graph edges.",
            "citations": null
          },
          "4 Related Work": {
            "content": "Our model draws inspiration both from the field of graph-based semi-supervised learning and from recent work on neural networks that operate on graphs. In what follows, we provide a brief overview on related work in both fields.\n\n### 4.1 Graph-Based Semi-Supervised Learning\n\nA large number of approaches for semi-supervised learning using graph representations have been proposed in recent years, most of which fall into two broad categories: methods that use some form of explicit graph Laplacian regularization and graph embedding-based approaches. Prominent examples for graph Laplacian regularization include label propagation (Zhu et al., [2003])), manifold regularization (Belkin et al., [2006])) and deep semi-supervised embedding (Weston et al., [2012])).\n\nRecently, attention has shifted to models that learn graph embeddings with methods inspired by the skip-gram model (Mikolov et al., [2013])). DeepWalk (Perozzi et al., [2014])) learns embeddings via the prediction of the local neighborhood of nodes, sampled from random walks on the graph. LINE (Tang et al., [2015])) and node2vec (Grover & Leskovec, [2016])) extend DeepWalk with more sophisticated random walk or breadth-first search schemes. For all these methods, however, a multi-step pipeline including random walk generation and semi-supervised training is required where each step has to be optimized separately. Planetoid (Yang et al., [2016])) alleviates this by injecting label information in the process of learning embeddings.\n\n### 4.2 Neural Networks on Graphs\n\nNeural networks that operate on graphs have previously been introduced in Gori et al. ( [2005])); Scarselli et al. ( [2009])) as a form of recurrent neural network. Their framework requires the repeated application of contraction maps as propagation functions until node representations reach a stable fixed point. This restriction was later alleviated in Li et al. ( [2016])) by introducing modern practices for recurrent neural network training to the original graph neural network framework. Duvenaud et al. ( [2015])) introduced a convolution-like propagation rule on graphs and methods for graph-level classification. Their approach requires to learn node degree-specific weight matrices which does not scale to large graphs with wide node degree distributions. Our model instead uses a single weight matrix per layer and deals with varying node degrees through an appropriate normalization of the adjacency matrix (see Section [3.1]Example ‣ 3 Semi-Supervised Node Classification ‣ Semi-Supervised Classification with Graph Convolutional Networks\")).\n\nA related approach to node classification with a graph-based neural network was recently introduced in Atwood & Towsley ( [2016])). They report 𝒪​(N2)𝒪superscript𝑁2\\\\mathcal{O}(N^{2}) complexity, limiting the range of possible applications. In a different yet related model, Niepert et al. ( [2016])) convert graphs locally into sequences that are fed into a conventional 1D convolutional neural network, which requires the definition of a node ordering in a pre-processing step.\n\nOur method is based on spectral graph convolutional neural networks, introduced in Bruna et al. ( [2014])) and later extended by Defferrard et al. ( [2016])) with fast localized convolutions. In contrast to these works, we consider here the task of transductive node classification within networks of significantly larger scale. We show that in this setting, a number of simplifications (see Section [2.2]Layer-Wise Linear Model ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")) can be introduced to the original frameworks of Bruna et al. ( [2014])) and Defferrard et al. ( [2016])) that improve scalability and classification performance in large-scale networks.",
            "citations": null
          },
          "5 Experiments": {
            "content": "We test our model in a number of experiments: semi-supervised document classification in citation networks, semi-supervised entity classification in a bipartite graph extracted from a knowledge graph, an evaluation of various graph propagation models and a run-time analysis on random graphs.\n\n### 5.1 Datasets\n\nWe closely follow the experimental setup in Yang et al. ( [2016])). Dataset statistics are summarized in Table [1]Table 1 ‣ 5.1 Datasets ‣ 5 Experiments ‣ Semi-Supervised Classification with Graph Convolutional Networks\"). In the citation network datasets—Citeseer, Cora and Pubmed (Sen et al., [2008]))—nodes are documents and edges are citation links. Label rate denotes the number of labeled nodes that are used for training divided by the total number of nodes in each dataset. NELL (Carlson et al., [2010]); Yang et al., [2016])) is a bipartite graph dataset extracted from a knowledge graph with 55,864 relation nodes and 9,891 entity nodes.\n\nTable 1: Dataset statistics, as reported in Yang et al. ( [2016])).\n\n| Dataset | Type | Nodes | Edges | Classes | Features | Label rate |\n| --- | --- | --- | --- | --- | --- | --- |\n| Citeseer | Citation network | 3,327 | 4,732 | 666 | 3,703 | 0.0360.0360.036 |\n| Cora | Citation network | 2,708 | 5,429 | 777 | 1,433 | 0.0520.0520.052 |\n| Pubmed | Citation network | 19,717 | 44,338 | 333 | 500 | 0.0030.0030.003 |\n| NELL | Knowledge graph | 65,755 | 266,144 | 210210210 | 5,414 | 0.0010.0010.001 |\n\n##### Citation networks\n\nWe consider three citation network datasets: Citeseer, Cora and Pubmed (Sen et al., [2008])). The datasets contain sparse bag-of-words feature vectors for each document and a list of citation links between documents. We treat the citation links as (undirected) edges and construct a binary, symmetric adjacency matrix A𝐴A. Each document has a class label. For training, we only use 20 labels per class, but all feature vectors.\n\n##### NELL\n\nNELL is a dataset extracted from the knowledge graph introduced in (Carlson et al., [2010])). A knowledge graph is a set of entities connected with directed, labeled edges (relations). We follow the pre-processing scheme as described in Yang et al. ( [2016])). We assign separate relation nodes r1subscript𝑟1r\\_{1} and r2subscript𝑟2r\\_{2} for each entity pair (e1,r,e2)subscript𝑒1𝑟subscript𝑒2(e\\_{1},r,e\\_{2}) as (e1,r1)subscript𝑒1subscript𝑟1(e\\_{1},r\\_{1}) and (e2,r2)subscript𝑒2subscript𝑟2(e\\_{2},r\\_{2}). Entity nodes are described by sparse feature vectors. We extend the number of features in NELL by assigning a unique one-hot representation for every relation node, effectively resulting in a 61,278-dim sparse feature vector per node. The semi-supervised task here considers the extreme case of only a single labeled example per class in the training set. We construct a binary, symmetric adjacency matrix from this graph by setting entries Ai​j=1subscript𝐴𝑖𝑗1A\\_{ij}=1, if one or more edges are present between nodes i𝑖i and j𝑗j.\n\n##### Random graphs\n\nWe simulate random graph datasets of various sizes for experiments where we measure training time per epoch. For a dataset with N𝑁N nodes we create a random graph assigning 2​N2𝑁2N edges uniformly at random. We take the identity matrix INsubscript𝐼𝑁I\\_{N} as input feature matrix X𝑋X, thereby implicitly taking a featureless approach where the model is only informed about the identity of each node, specified by a unique one-hot vector. We add dummy labels Yi=1subscript𝑌𝑖1Y\\_{i}=1 for every node.\n\n### 5.2 Experimental Set-Up\n\nUnless otherwise noted, we train a two-layer GCN as described in Section [3.1]Example ‣ 3 Semi-Supervised Node Classification ‣ Semi-Supervised Classification with Graph Convolutional Networks\") and evaluate prediction accuracy on a test set of 1,000 labeled examples. We provide additional experiments using deeper models with up to 10 layers in Appendix [B]Appendix B Experiments on Model Depth ‣ Semi-Supervised Classification with Graph Convolutional Networks\"). We choose the same dataset splits as in Yang et al. ( [2016])) with an additional validation set of 500 labeled examples for hyperparameter optimization (dropout rate for all layers, L2 regularization factor for the first GCN layer and number of hidden units). We do not use the validation set labels for training.\n\nFor the citation network datasets, we optimize hyperparameters on Cora only and use the same set of parameters for Citeseer and Pubmed. We train all models for a maximum of 200 epochs (training iterations) using Adam (Kingma & Ba, [2015])) with a learning rate of 0.010.010.01 and early stopping with a window size of 101010, i.e. we stop training if the validation loss does not decrease for 10 consecutive epochs. We initialize weights using the initialization described in Glorot & Bengio ( [2010])) and accordingly (row-)normalize input feature vectors. On the random graph datasets, we use a hidden layer size of 32 units and omit regularization (i.e. neither dropout nor L2 regularization).\n\n### 5.3 Baselines\n\nWe compare against the same baseline methods as in Yang et al. ( [2016])), i.e. label propagation (LP) (Zhu et al., [2003])), semi-supervised embedding (SemiEmb) (Weston et al., [2012])), manifold regularization (ManiReg) (Belkin et al., [2006])) and skip-gram based graph embeddings (DeepWalk) (Perozzi et al., [2014])). We omit TSVM (Joachims, [1999])), as it does not scale to the large number of classes in one of our datasets.\n\nWe further compare against the iterative classification algorithm (ICA) proposed in Lu & Getoor ( [2003])) in conjunction with two logistic regression classifiers, one for local node features alone and one for relational classification using local features and an aggregation operator as described in Sen et al. ( [2008])). We first train the local classifier using all labeled training set nodes and use it to bootstrap class labels of unlabeled nodes for relational classifier training. We run iterative classification (relational classifier) with a random node ordering for 10 iterations on all unlabeled nodes (bootstrapped using the local classifier). L2 regularization parameter and aggregation operator (count vs. prop, see Sen et al. ( [2008]))) are chosen based on validation set performance for each dataset separately.\n\nLastly, we compare against Planetoid (Yang et al., [2016])), where we always choose their best-performing model variant (transductive vs. inductive) as a baseline.",
            "citations": null
          },
          "6 Results": {
            "content": "### 6.1 Semi-Supervised Node Classification\n\nResults are summarized in Table [2]Table 2 ‣ 6.1 Semi-Supervised Node Classification ‣ 6 Results ‣ Semi-Supervised Classification with Graph Convolutional Networks\"). Reported numbers denote classification accuracy in percent. For ICA, we report the mean accuracy of 100 runs with random node orderings. Results for all other baseline methods are taken from the Planetoid paper (Yang et al., [2016])). Planetoid\\* denotes the best model for the respective dataset out of the variants presented in their paper.\n\nTable 2: Summary of results in terms of classification accuracy (in percent).\n\n| Method | Citeseer | Cora | Pubmed | NELL |\n| --- | --- | --- | --- | --- |\n| ManiReg \\[[3])\\] | 60.160.160.1 | 59.559.559.5 | 70.770.770.7 | 21.821.821.8 |\n| SemiEmb \\[[28])\\] | 59.659.659.6 | 59.059.059.0 | 71.171.171.1 | 26.726.726.7 |\n| LP \\[[32])\\] | 45.345.345.3 | 68.068.068.0 | 63.063.063.0 | 26.526.526.5 |\n| DeepWalk \\[[22])\\] | 43.243.243.2 | 67.267.267.2 | 65.365.365.3 | 58.158.158.1 |\n| ICA \\[[18])\\] | 69.169.169.1 | 75.175.175.1 | 73.973.973.9 | 23.123.123.1 |\n| Planetoid\\* \\[[29])\\] | 64.764.764.7 (26s) | 75.775.775.7 (13s) | 77.277.277.2 (25s) | 61.961.961.9 (185s) |\n| GCN (this paper) | 70.370.3\\\\mathbf{70.3} (7s) | 81.581.5\\\\mathbf{81.5} (4s) | 79.079.0\\\\mathbf{79.0} (38s) | 66.066.0\\\\mathbf{66.0} (48s) |\n| GCN (rand. splits) | 67.9±0.5plus-or-minus67.90.567.9\\\\pm 0.5 | 80.1±0.5plus-or-minus80.10.580.1\\\\pm 0.5 | 78.9±0.7plus-or-minus78.90.778.9\\\\pm 0.7 | 58.4±1.7plus-or-minus58.41.758.4\\\\pm 1.7 |\n\nWe further report wall-clock training time in seconds until convergence (in brackets) for our method (incl. evaluation of validation error) and for Planetoid. For the latter, we used an implementation provided by the authors333https://github.com/kimiyoung/planetoid and trained on the same hardware (with GPU) as our GCN model. We trained and tested our model on the same dataset splits as in Yang et al. ( [2016])) and report mean accuracy of 100 runs with random weight initializations. We used the following sets of hyperparameters for Citeseer, Cora and Pubmed: 0.5 (dropout rate), 5⋅10−4⋅5superscript1045\\\\cdot 10^{-4} (L2 regularization) and 161616 (number of hidden units); and for NELL: 0.1 (dropout rate), 1⋅10−5⋅1superscript1051\\\\cdot 10^{-5} (L2 regularization) and 646464 (number of hidden units).\n\nIn addition, we report performance of our model on 10 randomly drawn dataset splits of the same size as in Yang et al. ( [2016])), denoted by GCN (rand. splits). Here, we report mean and standard error of prediction accuracy on the test set split in percent.\n\n### 6.2 Evaluation of Propagation Model\n\nWe compare different variants of our proposed per-layer propagation model on the citation network datasets. We follow the experimental set-up described in the previous section. Results are summarized in Table [3]Table 3 ‣ 6.2 Evaluation of Propagation Model ‣ 6 Results ‣ Semi-Supervised Classification with Graph Convolutional Networks\"). The propagation model of our original GCN model is denoted by renormalization trick (in bold). In all other cases, the propagation model of both neural network layers is replaced with the model specified under propagation model. Reported numbers denote mean classification accuracy for 100 repeated runs with random weight matrix initializations. In case of multiple variables ΘisubscriptΘ𝑖\\\\Theta\\_{i} per layer, we impose L2 regularization on all weight matrices of the first layer.\n\nTable 3: Comparison of propagation models.\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| Description |  | Propagation model | Citeseer | Cora | Pubmed |\n| Chebyshev filter (Eq. [5]In 2.1 Spectral Graph Convolutions ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")) | K=3𝐾3K=3 | ∑k=0KTk​(L~)​X​Θksuperscriptsubscript𝑘0𝐾subscript𝑇𝑘~𝐿𝑋subscriptΘ𝑘\\\\sum\\_{k=0}^{K}T\\_{k}(\\\\tilde{L})X\\\\Theta\\_{k} | 69.869.869.8 | 79.579.579.5 | 74.474.474.4 |\n| K=2𝐾2K=2 | 69.669.669.6 | 81.281.281.2 | 73.873.873.8 |\n| 1stsuperscript1st1^{\\\\text{st}}-order model (Eq. [6]In 2.2 Layer-Wise Linear Model ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")) | X​Θ0+D−12​A​D−12​X​Θ1𝑋subscriptΘ0superscript𝐷12𝐴superscript𝐷12𝑋subscriptΘ1X\\\\Theta\\_{0}+D^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}}X\\\\Theta\\_{1} | 68.368.368.3 | 80.080.080.0 | 77.577.577.5 |\n| Single parameter (Eq. [7]In 2.2 Layer-Wise Linear Model ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")) | (IN+D−12​A​D−12)​X​Θsubscript𝐼𝑁superscript𝐷12𝐴superscript𝐷12𝑋Θ(I\\_{N}+D^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}})X\\\\Theta | 69.369.369.3 | 79.279.279.2 | 77.477.477.4 |\n| Renormalization trick (Eq. [8]In 2.2 Layer-Wise Linear Model ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")) | D~−12​A~​D~−12​X​Θsuperscript~𝐷12~𝐴superscript~𝐷12𝑋Θ\\\\tilde{D}^{-\\\\frac{1}{2}}\\\\tilde{A}\\\\tilde{D}^{-\\\\frac{1}{2}}X\\\\Theta | 70.370.3\\\\mathbf{70.3} | 81.581.5\\\\mathbf{81.5} | 79.079.0\\\\mathbf{79.0} |\n| 1stsuperscript1st1^{\\\\text{st}}-order term only | D−12​A​D−12​X​Θsuperscript𝐷12𝐴superscript𝐷12𝑋ΘD^{-\\\\frac{1}{2}}AD^{-\\\\frac{1}{2}}X\\\\Theta | 68.768.768.7 | 80.580.580.5 | 77.877.877.8 |\n| Multi-layer perceptron | X​Θ𝑋ΘX\\\\Theta | 46.546.546.5 | 55.155.155.1 | 71.471.471.4 |\n\n### 6.3 Training Time per Epoch\n\n![Refer to caption]Figure 2: Wall-clock time per epoch for random graphs. (\\*) indicates out-of-memory error.\n\nHere, we report results for the mean training time per epoch (forward pass, cross-entropy calculation, backward pass) for 100 epochs on simulated random graphs, measured in seconds wall-clock time. See Section [5.1]Datasets ‣ 5 Experiments ‣ Semi-Supervised Classification with Graph Convolutional Networks\") for a detailed description of the random graph dataset used in these experiments. We compare results on a GPU and on a CPU-only implementation444Hardware used: 16-core Intel\nR○○\\\\mathchar 525\\\\relax Xeon\nR○○\\\\mathchar 525\\\\relax CPU E5-2640 v3 @ 2.60GHz, GeForce\nR○○\\\\mathchar 525\\\\relax GTX TITAN X in TensorFlow (Abadi et al., [2015])). Figure [2]Figure 2 ‣ 6.3 Training Time per Epoch ‣ 6 Results ‣ Semi-Supervised Classification with Graph Convolutional Networks\") summarizes the results.",
            "citations": null
          },
          "7 Discussion": {
            "content": "### 7.1 Semi-Supervised Model\n\nIn the experiments demonstrated here, our method for semi-supervised node classification outperforms recent related methods by a significant margin. Methods based on graph-Laplacian regularization (Zhu et al., [2003]); Belkin et al., [2006]); Weston et al., [2012])) are most likely limited due to their assumption that edges encode mere similarity of nodes. Skip-gram based methods on the other hand are limited by the fact that they are based on a multi-step pipeline which is difficult to optimize. Our proposed model can overcome both limitations, while still comparing favorably in terms of efficiency (measured in wall-clock time) to related methods. Propagation of feature information from neighboring nodes in every layer improves classification performance in comparison to methods like ICA (Lu & Getoor, [2003])), where only label information is aggregated.\n\nWe have further demonstrated that the proposed renormalized propagation model (Eq. [8]In 2.2 Layer-Wise Linear Model ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")) offers both improved efficiency (fewer parameters and operations, such as multiplication or addition) and better predictive performance on a number of datasets compared to a naïve 1stsuperscript1st1^{\\\\text{st}}-order model (Eq. [6]In 2.2 Layer-Wise Linear Model ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")) or higher-order graph convolutional models using Chebyshev polynomials (Eq. [5]In 2.1 Spectral Graph Convolutions ‣ 2 Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\")).\n\n### 7.2 Limitations and Future Work\n\nHere, we describe several limitations of our current model and outline how these might be overcome in future work.\n\n##### Memory requirement\n\nIn the current setup with full-batch gradient descent, memory requirement grows linearly in the size of the dataset. We have shown that for large graphs that do not fit in GPU memory, training on CPU can still be a viable option. Mini-batch stochastic gradient descent can alleviate this issue. The procedure of generating mini-batches, however, should take into account the number of layers in the GCN model, as the Kthsuperscript𝐾thK^{\\\\text{th}}-order neighborhood for a GCN with K𝐾K layers has to be stored in memory for an exact procedure. For very large and densely connected graph datasets, further approximations might be necessary.\n\n##### Directed edges and edge features\n\nOur framework currently does not naturally support edge features and is limited to undirected graphs (weighted or unweighted). Results on NELL however show that it is possible to handle both directed edges and edge features by representing the original directed graph as an undirected bipartite graph with additional nodes that represent edges in the original graph (see Section [5.1]Datasets ‣ 5 Experiments ‣ Semi-Supervised Classification with Graph Convolutional Networks\") for details).\n\n##### Limiting assumptions\n\nThrough the approximations introduced in Section [2]Fast Approximate Convolutions on Graphs ‣ Semi-Supervised Classification with Graph Convolutional Networks\"), we implicitly assume locality (dependence on the Kthsuperscript𝐾thK^{\\\\text{th}}-order neighborhood for a GCN with K𝐾K layers) and equal importance of self-connections vs. edges to neighboring nodes. For some datasets, however, it might be beneficial to introduce a trade-off parameter λ𝜆\\\\lambda in the definition of A~~𝐴\\\\tilde{A}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | A~=A+λ​IN.~𝐴𝐴𝜆subscript𝐼𝑁\\\\tilde{A}=A+\\\\lambda I\\_{N}\\\\,. |  | (11) |\n\nThis parameter now plays a similar role as the trade-off parameter between supervised and unsupervised loss in the typical semi-supervised setting (see Eq. [1]In 1 Introduction ‣ Semi-Supervised Classification with Graph Convolutional Networks\")). Here, however, it can be learned via gradient descent.",
            "citations": null
          },
          "8 Conclusion": {
            "content": "We have introduced a novel approach for semi-supervised classification on graph-structured data. Our GCN model uses an efficient layer-wise propagation rule that is based on a first-order approximation of spectral convolutions on graphs. Experiments on a number of network datasets suggest that the proposed GCN model is capable of encoding both graph structure and node features in a way useful for semi-supervised classification. In this setting, our model outperforms several recently proposed methods by a significant margin, while being computationally efficient.\n\n#### Acknowledgments\n\nWe would like to thank Christos Louizos, Taco Cohen, Joan Bruna, Zhilin Yang, Dave Herman, Pramod Sinha and Abdul-Saboor Sheikh for helpful discussions. This research was funded by SAP.",
            "citations": null
          }
        },
        "abstract": "We present a scalable approach for semi-supervised learning on\ngraph-structured data that is based on an efficient variant of convolutional\nneural networks which operate directly on graphs. We motivate the choice of our\nconvolutional architecture via a localized first-order approximation of\nspectral graph convolutions. Our model scales linearly in the number of graph\nedges and learns hidden layer representations that encode both local graph\nstructure and features of nodes. In a number of experiments on citation\nnetworks and on a knowledge graph dataset we demonstrate that our approach\noutperforms related methods by a significant margin."
      },
      "bib.bib13": {
        "id": "bib.bib13",
        "citation": "Poli et al. [2019]",
        "authors": "",
        "year": "",
        "title": "Graph neural ordinary differential equations.",
        "venue": "arXiv preprint arXiv:1911.07532",
        "pages": "",
        "url": "",
        "arxiv_id": "1911.07532",
        "doi": null,
        "sections": {},
        "abstract": "We introduce the framework of continuous--depth graph neural networks (GNNs).\nGraph neural ordinary differential equations (GDEs) are formalized as the\ncounterpart to GNNs where the input-output relationship is determined by a\ncontinuum of GNN layers, blending discrete topological structures and\ndifferential equations. The proposed framework is shown to be compatible with\nvarious static and autoregressive GNN models. Results prove general\neffectiveness of GDEs: in static settings they offer computational advantages\nby incorporating numerical methods in their forward pass; in dynamic settings,\non the other hand, they are shown to improve performance by exploiting the\ngeometry of the underlying dynamics."
      }
    },
    "key_map": {
      "2402.03495": "bib.bib3",
      "1609.02907": "bib.bib8",
      "1911.07532": "bib.bib13"
    }
  }
}