{
  "title": "Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late in Training",
  "abstract": "Sharpness-Aware Minimization (SAM) has substantially improved the\ngeneralization of neural networks under various settings. Despite the success,\nits effectiveness remains poorly understood. In this work, we discover an\nintriguing phenomenon in the training dynamics of SAM, shedding lights on\nunderstanding its implicit bias towards flatter minima over Stochastic Gradient\nDescent (SGD). Specifically, we find that SAM efficiently selects flatter\nminima late in training. Remarkably, even a few epochs of SAM applied at the\nend of training yield nearly the same generalization and solution sharpness as\nfull SAM training. Subsequently, we delve deeper into the underlying mechanism\nbehind this phenomenon. Theoretically, we identify two phases in the learning\ndynamics after applying SAM late in training: i) SAM first escapes the minimum\nfound by SGD exponentially fast; and ii) then rapidly converges to a flatter\nminimum within the same valley. Furthermore, we empirically investigate the\nrole of SAM during the early training phase. We conjecture that the\noptimization method chosen in the late phase is more crucial in shaping the\nfinal solution's properties. Based on this viewpoint, we extend our findings\nfrom SAM to Adversarial Training.",
  "paper_id": "http://arxiv.org/abs/2410.10373v1",
  "markdown_content": "# Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\n\nZhanpeng Zhou1‚ãÜ‚Ä†,\nMingze Wang2,\nYuchen Mao1,\nBingrui Li3,\nJunchi Yan1,4\n\n1Dept. of Computer Science and Engineering, Shanghai Jiao Tong University\n\n2Peking University\n3Tsinghua University\n\n4School of Artificial Intelligence, Shanghai Jiao Tong University\n\nzzp1012@sjtu.edu.cn;  yanjunchi@sjtu.edu.cn\n\nEqual contribution. Corresponding author.\n\n###### Abstract\n\nSharpness-Aware Minimization (SAM) has substantially improved the generalization of neural networks under various settings.\nDespite the success, its effectiveness remains poorly understood.\nIn this work, we discover an intriguing phenomenon in the training dynamics of SAM, shedding lights on understanding its implicit bias towards flatter minima over Stochastic Gradient Descent (SGD).\nSpecifically, we find that _SAM efficiently selects flatter minima late in training111To clarify, ‚Äúlate in training‚Äù stands for ‚Äúwhen applied during the late phase of training‚Äù, and is used here for simplicity._.\nRemarkably, even a few epochs of SAM applied at the end of training yield nearly the same generalization and solution sharpness as full SAM training.\nSubsequently, we delve deeper into the underlying mechanism behind this phenomenon.\nTheoretically, we identify two phases in the learning dynamics after applying SAM late in training: i) SAM first escapes the minimum found by SGD exponentially fast; and ii) then rapidly converges to a flatter minimum within the same valley222A ‚Äúvalley‚Äù refers to the local loss landscape surrounding a set of global minima..\nFurthermore, we empirically investigate the role of SAM during the early training phase.\nWe conjecture that the optimization method chosen in the late phase is more crucial in shaping the final solution‚Äôs properties.\nBased on this viewpoint, we extend our findings from SAM to Adversarial Training.\nWe provide source code in supplementary materials and will release checkpoints in future.\n\n## 1 Introduction\n\nUnderstanding the surprising generalization abilities of over-parameterized neural networks yields an important yet open problem in deep learning.\nRecently, it has been observed that the generalization of neural networks is closely tied to the sharpness of the loss landscape (Keskar et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib29 \"\"); Zhang et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib62 \"\"); Neyshabur et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib46 \"\"); Jiang et al., [2020](https://ar5iv.org/html/2410.10373#bib.bib26 \"\")).\nThis has led to the development of many gradient-based optimization algorithms that explicitly/implicitly regularize the sharpness of solutions.\nIn particular, Foret et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\")) proposed Sharpness-Aware Minimization (SAM), which has substantially improved the generalization and robustness (Zhang et al., [2024](https://ar5iv.org/html/2410.10373#bib.bib63 \"\")) of neural networks across many tasks, including computer vision (Foret et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\"); Chen et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib13 \"\"); Kaddour et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib27 \"\")) and natural language processing (Bahri et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib6 \"\")).\n\nDespite the empirical success of SAM, its effectiveness is not yet fully understood.\nAndriushchenko & Flammarion ( [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")) has shown that existing theoretical justifications based on PAC-Bayes generalization bounds (Foret et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\"); Wu et al., [2020a](https://ar5iv.org/html/2410.10373#bib.bib56 \"\")) are incomplete in explaining the superior performance of SAM.\nAdditionally, recent theoretical analyses of SAM‚Äôs dynamics and properties often rely on unrealistic assumptions, such as a sufficiently small learning rate (Monzio Compagnoni et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib42 \"\")), which undermines the validity of their conclusions.\nUnderstanding the hidden mechanisms behind SAM remains an active area of research.\n\nRecent works show that the effectiveness of gradient-based optimization methods can be attributed to their _implicit bias_ toward solutions with favorable properties (Vardi, [2023](https://ar5iv.org/html/2410.10373#bib.bib52 \"\")).\nOne notable example of such implicit bias is that Stochastic Gradient Descent (SGD) and its variants tend to find flat minima, which often leads to better generalization (Keskar et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib29 \"\"); Zhang et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib62 \"\")).\nIt is known that SAM selects flatter minima over SGD in practice, which represents a form of implicit bias as well.\nWhile the design of SAM is inspired by sharpness regularization, its practical implementation (see [Equation3](https://ar5iv.org/html/2410.10373#S3.E3 \"In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), which minimizes a first-order approximation of the original objective (see [Equations1](https://ar5iv.org/html/2410.10373#S3.E1 \"In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") and [2](https://ar5iv.org/html/2410.10373#S3.E2 \"Equation 2 ‚Ä£ 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), does not explicitly achieve this.\nUnderstanding SAM‚Äôs implicit bias towards flatter minima, especially in comparison to SGD, is of paramount importance for explaining its effectiveness and is the primary focus of this work.\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x1.png)Figure 1: SAM operates efficiently even when applied only during the final few epochs of training.\n(a)\nTest error curves for WideResNet-16-8 on CIFAR-10 trained with different strategies.\nThe blue and green baseline curves represent training solely with SGD and SAM, respectively.\nThe orange curve shows the test error of a neural network initially trained with SGD up to epoch T~=175~ùëá175\\\\widetilde{T}=175, followed by SAM training up to epoch T=200ùëá200T=200.\nThe first 100 epochs are omitted for clarity.\nCurves are means and standard deviations over five trials with different random seeds.\nThe detailed settings and hyper-parameters are described in [Section3](https://ar5iv.org/html/2410.10373#S3 \"3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n(b)\nA schematic picture of the training trajectory after applying SAM late in training.\nThe contour plot represents the loss landscape, with darker regions indicating lower loss.\nThe orange dotted lines depict the path of the SAM iterator.\n\nIn this work, we uncover an intriguing phenomenon in the training dynamics of SAM, which sheds light on understanding its implicit bias toward flatter minima.\nSpecifically, we find that SAM operates efficiently even when applied only during the last few epochs of training.\nAs shown in [Figure1](https://ar5iv.org/html/2410.10373#S1.F1 \"In 1 Introduction ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a), SAM applied in the last few epochs‚Äîafter initial training with SGD‚Äîcan achieve nearly the same test performance as training exclusively with SAM.\nFurthermore, our analysis of the solution sharpness reveals that last-few-epochs SAM identifies flatter minima as effectively as full SAM training.\nWe conclude that _SAM efficiently selects flatter minima over SGD late in training_.\nContrary to the conventional view that early training dynamics are critical (Achille et al., [2019](https://ar5iv.org/html/2410.10373#bib.bib1 \"\"); Frankle et al., [2020](https://ar5iv.org/html/2410.10373#bib.bib20 \"\")), our discovery underscores the importance of the late training phase for generalization.\n\nSubsequently, we delve deeper into the mechanism behind the efficiency of SAM in selecting flatter minima over SGD during the late phase of training.\nTheoretically, we identify a two-phase picture in the learning dynamics after applying SAM late in training: _Phase I._ SAM initially escapes from the relatively sharp minimum found by SGD exponentially fast; _Phase II._ it then rapidly converges to a flatter minimum over SGD within the same valley.\nSee [Figure1](https://ar5iv.org/html/2410.10373#S1.F1 \"In 1 Introduction ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (b) for an illustration.\nAs outlined in [Table1](https://ar5iv.org/html/2410.10373#S5.T1 \"In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we characterize the two-phase picture into four key claims (P1-4), each supported by rigorous analyses of SAM‚Äôs convergence, escape behavior, and bias toward flatter minima.\nThese claims are further validated by experiments in both toy models and real-world scenarios.\nThis two-phase picture explains the SAM‚Äôs ability to efficiently find flatter minima, even when applied only in the last few epochs, yielding novel insights into its implicit bias and effectiveness.\n\nFurthermore, we investigate the necessity of applying SAM during the early phase of training.\nOur results show that early-phase SAM has a minimal effect on both generalization and sharpness of the final solution.\nBased on these findings, we conjecture that the choice of the optimization algorithm during the late phase of training plays a more critical role in shaping the final properties of the solution.\nExtending this viewpoint to Adversarial Training (AT) (Madry et al., [2018](https://ar5iv.org/html/2410.10373#bib.bib41 \"\")) and robustness, we find that similar to SAM, AT efficiently selects robust minima when applied late in training.\n\nIn summary, our work focuses on the implicit bias of SAM during the late phase of training, a topic that has not yet been carefully studied.\nOur main discovery unveils a surprising phenomenon in the late dynamics of SAM, and our novel two-phase picture significantly advances our understanding of its effectiveness.\nOur results demonstrate the value of analyzing optimization algorithms at the end of training and formulating theories from realistic nontrivial phenomena that provide valuable insights into the underlying mechanisms of deep learning.\n\n## 2 Related Work\n\nImplicit flat-minima bias.\nExtensive studies have been dedicated to understand implicit bias in deep learning (Vardi, [2023](https://ar5iv.org/html/2410.10373#bib.bib52 \"\")).\nOne notable example is the _flat-minima bias_: SGD and its variants tend to select flat minima (Keskar et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib29 \"\"); Zhang et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib62 \"\")), which often generalize better (Hochreiter & Schmidhuber, [1997](https://ar5iv.org/html/2410.10373#bib.bib23 \"\"); Jiang et al., [2020](https://ar5iv.org/html/2410.10373#bib.bib26 \"\")).\nMany works (Ma & Ying, [2021](https://ar5iv.org/html/2410.10373#bib.bib39 \"\"); Mulayoff et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib45 \"\"); Wu & Su, [2023](https://ar5iv.org/html/2410.10373#bib.bib58 \"\"); Gatmiry et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib21 \"\"); Wen et al., [2023b](https://ar5iv.org/html/2410.10373#bib.bib54 \"\")) have theoretically justified the superior generalization of flat minima in neural networks.\nWu et al. ( [2018](https://ar5iv.org/html/2410.10373#bib.bib59 \"\"); [2022](https://ar5iv.org/html/2410.10373#bib.bib60 \"\")); Ma & Ying ( [2021](https://ar5iv.org/html/2410.10373#bib.bib39 \"\")) have taken a dynamical stability perspective to explain why SGD favors flat minima; in-depth analysis of SGD dynamics near global minima shows that the SGD noise drives SGD towards flatter minima (Blanc et al., [2020](https://ar5iv.org/html/2410.10373#bib.bib11 \"\"); Li et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib34 \"\"); Ma et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib40 \"\"); Damian et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib15 \"\")).\nFurther studies (Jastrzƒôbski et al., [2017](https://ar5iv.org/html/2410.10373#bib.bib24 \"\"); Lyu et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib38 \"\")) have explored how training components, like learning rate and normalization, influence the flat-minima bias of SGD.\n\nUnderstandings towards SAM.\nInspired by the implicit flat-minima bias of SGD, Foret et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\")) has proposed Sharpness-Aware Minimization (SAM) algorithm.\nSAM and its variants (Kwon et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib33 \"\"); Zhuang et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib65 \"\"); Du et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib17 \"\"); Liu et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib36 \"\"); Kim et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib31 \"\"); Mueller et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib44 \"\"); Becker et al., [2024](https://ar5iv.org/html/2410.10373#bib.bib8 \"\")) have achieved superior performance across a wide range tasks (Chen et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib13 \"\"); Kaddour et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib27 \"\"); Bahri et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib6 \"\")).\nDespite their successes, their effectiveness remains poorly understood.\nOn the optimization front, Andriushchenko & Flammarion ( [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")); Si & Yun ( [2023](https://ar5iv.org/html/2410.10373#bib.bib48 \"\")); Shin et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib47 \"\")) have studied the convergence properties of stochastic SAM;\nMonzio Compagnoni et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib42 \"\")); Kim et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib30 \"\")) have demonstrated that SAM requires more time to escape saddle points compared to SGD;\nLong & Bartlett ( [2024](https://ar5iv.org/html/2410.10373#bib.bib37 \"\")) have analyzed the edge of stability phenomenon for SAM.\nOn the implicit bias side,\nShin et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib47 \"\")); Behdin et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib10 \"\")) have examined SAM‚Äôs flat-minima bias using dynamical stability analysis;\nWen et al. ( [2023a](https://ar5iv.org/html/2410.10373#bib.bib53 \"\")); Monzio Compagnoni et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib42 \"\")); Bartlett et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib7 \"\")) have studied how SAM moves towards flat minima;\nAndriushchenko & Flammarion ( [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")) has showed that SAM has the low-rank bias;\nand Wen et al. ( [2023b](https://ar5iv.org/html/2410.10373#bib.bib54 \"\")) has revealed that SAM does not only minimize sharpness to achieve better generalization.\nIn comparison, our work focuses on the dynamics of SAM in the late training phase, a topic largely unattended in the literature, offering both theoretical and empirical analyses of SAM‚Äôs convergence, escape behavior, and bias toward flatter minima.\n\n## 3 Background and Preliminaries\n\nNotation and Setup.\nLet ùíÆ={(ùíôi,ùíöi)}i=1nùíÆsuperscriptsubscriptsubscriptùíôùëñsubscriptùíöùëñùëñ1ùëõ\\\\mathcal{S}=\\\\{({\\\\bm{x}}\\_{i},\\\\bm{y}\\_{i})\\\\}\\_{i=1}^{n} be the training set, where ùíôi‚àà‚Ñùdsubscriptùíôùëñsuperscript‚Ñùùëë{\\\\bm{x}}\\_{i}\\\\in\\\\mathbb{R}^{d} is the input and ùíöi‚àà‚Ñùksubscriptùíöùëñsuperscript‚Ñùùëò\\\\bm{y}\\_{i}\\\\in\\\\mathbb{R}^{k} is the target for the iùëñi-th data point i.i.d. sampled from distribution ùíÆùíÆ\\\\mathcal{S}.\nWe consider a model in the form of f‚Äã(ùíô;ùúΩ)ùëìùíôùúΩf(\\\\bm{x};\\\\bm{\\\\theta}), where ùúΩ‚àà‚ÑùpùúΩsuperscript‚Ñùùëù{\\\\bm{\\\\theta}}\\\\in\\\\mathbb{R}^{p} is the model parameters and f‚Äã(ùíô;ùúΩ)‚àà‚ÑùkùëìùíôùúΩsuperscript‚Ñùùëòf(\\\\bm{x};\\\\bm{\\\\theta})\\\\in\\\\mathbb{R}^{k} is the output for the input ùíôùíô\\\\bm{x}.\nThe loss of the model at the iùëñi-th sample (ùíôi,ùíöi)subscriptùíôùëñsubscriptùíöùëñ(\\\\bm{x}\\_{i},\\\\bm{y}\\_{i}) is denoted as ‚Ñì‚Äã(ùíöi;f‚Äã(ùíôi;ùúΩ))‚ÑìsubscriptùíöùëñùëìsubscriptùíôùëñùúΩ\\\\ell(\\\\bm{y}\\_{i};f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})), simplified to ‚Ñìi‚Äã(ùúΩ)subscript‚ÑìùëñùúΩ\\\\ell\\_{i}(\\\\bm{\\\\theta}).\nThe total loss over the training set is then given by ‚ÑíùíÆ‚Äã(ùúΩ)=1n‚Äã‚àëi=1n‚Ñìi‚Äã(ùúΩ)subscript‚ÑíùíÆùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõsubscript‚ÑìùëñùúΩ\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\bm{\\\\theta})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\ell\\_{i}(\\\\bm{\\\\theta}).\nFor classification tasks, Errùíü‚Å°(ùúΩ)subscriptErrùíüùúΩ\\\\operatorname{Err}\\_{\\\\mathcal{D}}(\\\\bm{\\\\theta}) denotes the classification error of the model f‚Äã(‚ãÖ;ùúΩ)ùëì‚ãÖùúΩf(\\\\cdot;\\\\bm{\\\\theta}) over dataset ùíüùíü\\\\mathcal{D}.\nFor a matrix Aùê¥A, let ‚à•A‚à•2subscriptdelimited-‚à•‚à•ùê¥2\\\\left\\\\lVert A\\\\right\\\\rVert\\_{2}, ‚à•A‚à•Fsubscriptdelimited-‚à•‚à•ùê¥ùêπ\\\\left\\\\lVert A\\\\right\\\\rVert\\_{F}, and Tr‚Å°(A)Trùê¥\\\\operatorname{Tr}(A) denote its spectral norm, Frobenius norm and trace, respectively.\n\nFor our theoretical analysis in [Section5](https://ar5iv.org/html/2410.10373#S5 \"5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we always assume k=1ùëò1k=1 for simplicity333The extension to the case where k>1ùëò1k>1 is straightforward. and consider the squared loss, i.e., ‚Ñìi‚Äã(ùúΩ)=12‚Äã\\|f‚Äã(ùíôi;ùúΩ)‚àíyi\\|2subscript‚ÑìùëñùúΩ12superscriptùëìsubscriptùíôùëñùúΩsubscriptùë¶ùëñ2\\\\ell\\_{i}(\\\\bm{\\\\theta})=\\\\frac{1}{2}\\|f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})-y\\_{i}\\|^{2}.\nWe focus on the over-parameterized case in the sense that minùúΩ‚Å°‚Ñí‚Äã(ùúΩ)=0subscriptùúΩ‚ÑíùúΩ0\\\\min\\_{\\\\bm{\\\\theta}}\\\\mathcal{L}(\\\\bm{\\\\theta})=0.\nTo characterize the local geometry of the training loss at point ùúΩùúΩ\\\\bm{\\\\theta}, we consider the Fisher matrix\nG‚Äã(ùúΩ)=1n‚Äã‚àëi=1n‚àáf‚Äã(ùíôi;ùúΩ)‚Äã‚àáf‚Äã(ùíôi;ùúΩ)‚ä§ùê∫ùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõ‚àáùëìsubscriptùíôùëñùúΩ‚àáùëìsuperscriptsubscriptùíôùëñùúΩtopG(\\\\bm{\\\\theta})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\nabla f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})\\\\nabla f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})^{\\\\top}\nand the Hessian matrix H‚Äã(ùúΩ)=G‚Äã(ùúΩ)+1n‚Äã‚àëi=1n(f‚Äã(ùíôi;ùúΩ)‚àíyi)‚Äã‚àá2f‚Äã(ùíôi;ùúΩ)ùêªùúΩùê∫ùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõùëìsubscriptùíôùëñùúΩsubscriptùë¶ùëñsuperscript‚àá2ùëìsubscriptùíôùëñùúΩH(\\\\bm{\\\\theta})=G(\\\\bm{\\\\theta})+\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left(f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})-y\\_{i}\\\\right)\\\\nabla^{2}f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta}), where G‚Äã(ùúΩ)‚âàH‚Äã(ùúΩ)ùê∫ùúΩùêªùúΩG(\\\\bm{\\\\theta})\\\\approx H(\\\\bm{\\\\theta}) in the low-loss region.\n\nSharpness-Aware Minimization.\nThe central idea behind SAM is to minimize the worst-case loss within a neighborhood of the current parameters.\nSpecifically, SAM problem can be formulated as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minùúΩ‚Å°‚ÑíùíÆSAM‚Äã(ùúΩ;œÅ),where‚ÑíùíÆSAM‚Äã(ùúΩ;œÅ)=max‚à•œµ‚à•2‚â§œÅ‚Å°‚ÑíùíÆ‚Äã(ùúΩ+œµ).subscriptùúΩsuperscriptsubscript‚ÑíùíÆSAMùúΩùúåwheresuperscriptsubscript‚ÑíùíÆSAMùúΩùúåsubscriptsubscriptdelimited-‚à•‚à•bold-italic-œµ2ùúåsubscript‚ÑíùíÆùúΩbold-italic-œµ\\\\displaystyle\\\\min\\_{\\\\bm{\\\\theta}}\\\\mathcal{L}\\_{\\\\mathcal{S}}^{\\\\rm SAM}(\\\\bm{\\\\theta};\\\\rho),\\\\quad{\\\\rm where}\\\\quad\\\\mathcal{L}\\_{\\\\mathcal{S}}^{\\\\rm SAM}(\\\\bm{\\\\theta};\\\\rho)=\\\\max\\_{\\\\left\\\\lVert\\\\bm{\\\\epsilon}\\\\right\\\\rVert\\_{2}\\\\leq\\\\rho}\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\bm{\\\\theta}+\\\\bm{\\\\epsilon}). |  | (1) |\n\nHere, œÅùúå\\\\rho is a given neighborhood radius.\nHowever, finding the perturbation in the parameter space that maximizes the loss, i.e., œµbold-italic-œµ\\\\bm{\\\\epsilon}, can be computationally intractable in practice.\nThus Foret et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\")) approximated the maximize-loss perturbation using a first order solution:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œµ‚âàarg‚Äãmax‚à•œµ‚à•2‚â§œÅ‚Å°(‚ÑíùíÆ‚Äã(ùúΩ)+œµ‚ä§‚Äã‚àá‚ÑíùíÆ‚Äã(ùúΩ))=œÅ‚Äã‚àá‚ÑíùíÆ‚Äã(ùúΩ)/‚à•‚àá‚ÑíùíÆ‚Äã(ùúΩ)‚à•2.bold-italic-œµsubscriptargmaxsubscriptdelimited-‚à•‚à•bold-italic-œµ2ùúåsubscript‚ÑíùíÆùúΩsuperscriptbold-italic-œµtop‚àásubscript‚ÑíùíÆùúΩùúå‚àásubscript‚ÑíùíÆùúΩsubscriptdelimited-‚à•‚à•‚àásubscript‚ÑíùíÆùúΩ2\\\\displaystyle\\\\bm{\\\\epsilon}\\\\approx\\\\operatorname\\*{arg\\\\,max}\\_{\\\\left\\\\lVert\\\\bm{\\\\epsilon}\\\\right\\\\rVert\\_{2}\\\\leq\\\\rho}\\\\left(\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)+\\\\bm{\\\\epsilon}^{\\\\top}\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)\\\\right)=\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)/\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)\\\\right\\\\rVert\\_{2}. |  | (2) |\n\nConsequently, let Œ∑ùúÇ\\\\eta be the learning rate and Œæt={Œæt,1,‚ãØ,Œæt,B}subscriptùúâùë°subscriptùúâùë°1‚ãØsubscriptùúâùë°ùêµ\\\\xi\\_{t}=\\\\{\\\\xi\\_{t,1},\\\\cdots,\\\\xi\\_{t,B}\\\\} be the batch indices sampled at iteration tùë°t, where BùêµB is the batch size.\nThe mini-batch loss is given by ‚ÑíŒæt‚Äã(ùúΩ)=1B‚Äã‚àëi‚ààŒæt‚Ñìi‚Äã(ùúΩ)subscript‚Ñísubscriptùúâùë°ùúΩ1ùêµsubscriptùëñsubscriptùúâùë°subscript‚ÑìùëñùúΩ\\\\mathcal{L}\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta})=\\\\frac{1}{B}\\\\sum\\_{i\\\\in\\\\xi\\_{t}}\\\\ell\\_{i}(\\\\bm{\\\\theta}).\nWith a small yet key modification to SGD444The iterative update rule of SGD is ùúΩt+1=ùúΩt‚àíŒ∑‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt)superscriptùúΩùë°1superscriptùúΩùë°ùúÇ‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°\\\\bm{\\\\theta}^{t+1}=\\\\bm{\\\\theta}^{t}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}\\\\right), the iterative update rule of SAM with stochastic gradients is:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùúΩt+1=ùúΩt‚àíŒ∑‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt+œÅt‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt)),whereœÅt=œÅ/‚à•‚àá‚ÑíŒæt‚Äã(ùúΩt)‚à•2.formulae-sequencesuperscriptùúΩùë°1superscriptùúΩùë°ùúÇ‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°subscriptùúåùë°‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°wheresubscriptùúåùë°ùúåsubscriptdelimited-‚à•‚à•‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°2\\\\displaystyle\\\\bm{\\\\theta}^{t+1}=\\\\bm{\\\\theta}^{t}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}+\\\\rho\\_{t}\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}^{t})\\\\right),\\\\quad{\\\\rm where}\\\\quad\\\\rho\\_{t}=\\\\rho/\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}\\\\right)\\\\right\\\\rVert\\_{2}. |  | (3) |\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x2.png)Figure 2: The illustration of the switching method.\nBlue dashed lines represent SGD training, while orange dashed lines represent SAM training. ùúΩ0superscriptùúΩ0\\\\bm{\\\\theta}^{0} denotes the random initialization.\nt1,t2subscriptùë°1subscriptùë°2t\\_{1},t\\_{2} denotes two different switching points.\n\nOur experiments are conducted using the original implementation of SAM, however, for our theoretical analysis in [Section5](https://ar5iv.org/html/2410.10373#S5 \"5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we simplify the original SAM by approximating the step size œÅtsubscriptùúåùë°\\\\rho\\_{t}, which is inversely proportional to the gradient norm, with a constant œÅùúå\\\\rho (see [Equation4](https://ar5iv.org/html/2410.10373#S3.E4 \"In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), as it is easier to analyze.\nAndriushchenko & Flammarion ( [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")) empirically justified this simplification, showing that SAM with a constant œÅùúå\\\\rho achieves generalization performance comparable to the original SAM.\nThis approximation has been widely adopted in recent theoretical advances on SAM (Andriushchenko & Flammarion, [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\"); Behdin & Mazumder, [2023](https://ar5iv.org/html/2410.10373#bib.bib9 \"\"); Agarwala & Dauphin, [2023](https://ar5iv.org/html/2410.10373#bib.bib2 \"\"); Behdin et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib10 \"\"); Monzio Compagnoni et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib42 \"\")).\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùúΩt+1=ùúΩt‚àíŒ∑‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt+œÅ‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt)).superscriptùúΩùë°1superscriptùúΩùë°ùúÇ‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°ùúå‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°\\\\displaystyle\\\\bm{\\\\theta}^{t+1}=\\\\bm{\\\\theta}^{t}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}^{t})\\\\right). |  | (4) |\n\nSwitching Method.\nIn this paper, we demonstrate our main discovery by switching between SGD and SAM at a specific point during training, referred to as the _switching method_.\nSpecifically, let TùëáT be the total number of training epochs and tùë°t be the switching epoch, considering the switch from SGD to SAM without loss of generality.\nWe initially train the model from scratch with SGD for tùë°t epochs to get ùúΩSGDtsuperscriptsubscriptùúΩSGDùë°\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{t}, and then switch to SAM for the remaining T‚àítùëáùë°T-t epochs to get ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}.\nNotably, when t=Tùë°ùëát=T or t=0ùë°0t=0, the model is trained exclusively with SGD or SAM, simply denoted as ùúΩSGDTsuperscriptsubscriptùúΩSGDùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{{SAM}}}^{T}, respectively.\nSee [Figure2](https://ar5iv.org/html/2410.10373#S3.F2 \"In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") for an illustration.\nWe fix the total number of training epochs TùëáT and vary the switching point tùë°t to study the effect of SAM at different training phases.\nTo ensure a fair comparison, we ensure the same initialization, mini-batch orders, and hyper-parameters across all models, regardless of the switching point.\nConsequently, the training trajectories of models with different switching points align precisely before the switch.\n\nMain Experimental Setup.\nFollowing Foret et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\")); Kwon et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib33 \"\")), we perform experiments on the commonly used image classification datasets CIFAR-10/100 (Krizhevsky et al., [2009](https://ar5iv.org/html/2410.10373#bib.bib32 \"\")), with standard architectures such as WideResNet (Zagoruyko & Komodakis, [2016](https://ar5iv.org/html/2410.10373#bib.bib61 \"\")), ResNet (He et al., [2016](https://ar5iv.org/html/2410.10373#bib.bib22 \"\")), and VGG (Simonyan & Zisserman, [2015](https://ar5iv.org/html/2410.10373#bib.bib49 \"\")).\nWe use the standard configurations for the basic training settings shared by SAM and SGD (e.g., learning rate, batch size, and data augmentation) as in the original papers\n, and set the SAM-specific perturbation radius œÅùúå\\\\rho to 0.05, as recommended by Foret et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\")).\nWe also extend our findings to AT (Madry et al., [2018](https://ar5iv.org/html/2410.10373#bib.bib41 \"\")) and ASAM (Kwon et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib33 \"\")).\nDue to space limits, more experimental details and results can be found in [AppendixA](https://ar5iv.org/html/2410.10373#A1 \"Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\n## 4 SAM Efficiently Selects Flatter Minima Late In Training\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x3.png)Figure 3: The impact of SAM training proportion on generalization/sharpness when switches from SGD to SAM.\nThe generalization gap between the models ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}(top row) / the sharpness of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}(bottom row) vs. the SAM training proportion of ùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}.\nùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t} refers to the model obtained by switching from SGD to SAM, while ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} represents the model trained entirely with SAM.\nHere, TùëáT is the total number of training epochs, and tùë°t is the switching point.\nWe define SAM training proportion of ùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t} as (T‚àít)/Tùëáùë°ùëá(T-t)/T and adjust it by varying tùë°t while keeping TùëáT fixed.\nDots represent the mean over three trials with different random seeds, and error bars indicate standard deviations.\nResults on more datasets and architectures can be found in [SectionA.4](https://ar5iv.org/html/2410.10373#A1.SS4 \"A.4 More Experiments on Early-Phase SAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nIn this section, we provide empirical evidence indicating that SAM efficiently selects flatter minima over SGD late in training.\nWe first show that applying SAM only during the last few epochs of training achieves generalization comparable to training entirely with SAM.\nTaking a step further, we demonstrate that last-few-epochs SAM finds flatter minima as effectively as full SAM training.\n\nApplying SAM in the last few epochs achieves generalization comparable to full SAM training.\n\nWe conduct experiments on various datasets and architectures to investigate the effect of applying SAM late in training, after initial training with SGD, on generalization.\nSpecifically, we use the switching method (detailed in [Section3](https://ar5iv.org/html/2410.10373#S3 \"3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), which switches from SGD to SAM at epoch tùë°t, to obtain the model ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}.\nFor comparison, we train a baseline model entirely with SAM under the same settings, resulting in ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}.\nBoth models are trained for a total of TùëáT epochs.\nTo assess the generalization ability of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} relative to ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}, we calculated the test loss and test error gaps between these two models: ‚Ñíùíütest‚Äã(ùúΩSGD‚ÜíSAM,tT)‚àí‚Ñíùíütest‚Äã(ùúΩSAMT)subscript‚ÑísubscriptùíütestsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëásubscript‚ÑísubscriptùíütestsuperscriptsubscriptùúΩSAMùëá\\\\mathcal{L}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}\\\\right)-\\\\mathcal{L}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}\\\\right) and Errùíütest‚Å°(ùúΩSGD‚ÜíSAM,tT)‚àíErrùíütest‚Å°(ùúΩSAMT)subscriptErrsubscriptùíütestsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëásubscriptErrsubscriptùíütestsuperscriptsubscriptùúΩSAMùëá\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}\\\\right)-\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}\\\\right), where ùíütestsubscriptùíütest\\\\mathcal{D}\\_{\\\\textrm{test}} denotes the unseen test set.\nIf the generalization gap between ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} approaches zero, then we say ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} achieve nearly the same generalization performance as ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}.\n\nSurprisingly, we find that applying SAM only in the final few epochs can achieve nearly the same generalization performance as training entirely with SAM.\nIn particular, we fix the number of total training epochs TùëáT and vary the switching point tùë°t to adjust the SAM training proportion of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}, which is exactly (T‚àít)/Tùëáùë°ùëá(T-t)/T.\nWe analyze how the generalization gap between ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} changes as the SAM training proportion increases.\nIn [Figure3](https://ar5iv.org/html/2410.10373#S4.F3 \"In 4 SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the generalization gap becomes negligible once the SAM training proportion exceeds zero, indicating that even a few epochs of SAM applied at the end of training yield generalization performance comparable to full SAM training.\nThis phenomenon is consistently observed across various datasets and architectures.\n\nA similar phenomenon was noted by Andriushchenko & Flammarion ( [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")), but it was not given significant attention.\nWe isolate and extend this phenomenon by showing that even fewer epochs of SAM (e.g., 1-5 epochs for WideResNet-16-8 on CIFAR-10) applied in the late phase of training yield test error and loss comparable to full SAM training.\n\nApplying SAM in the last few epochs finds flatter minima as effectively as full SAM training.\n\nFurthermore, we investigate the effect of applying SAM in the late phase of training on the sharpness of the final solution.\nSimilarly as before, we analyze how sharpness of the solution ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} changes w.r.t. the SAM training proportion.\nWe measure the sharpness along the most curved direction of the loss surface, i.e., the spectral norm of the Hessian matrix ‚à•H‚Äã(ùúΩ)‚à•2subscriptdelimited-‚à•‚à•ùêªùúΩ2\\\\left\\\\lVert H(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{2}.\nIn [Figure3](https://ar5iv.org/html/2410.10373#S4.F3 \"In 4 SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the sharpness of the solution ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} dramatically drops once the SAM training proportion is greater than zero, reflecting a similar trend to the generalization gap.\nThis indicates that applying SAM in the last few epochs of training is as effective as training entirely with SAM in achieving flatter minima.\n\nIn summary, we see that SAM efficiently selects flatter minima over SGD when applied late in training.\nThis suggests a fine-tuning scheme for SAM: start from a pretrained checkpoint and continue training with SAM for several epochs, reducing computational costs while maintaining similar performance.\nIn [Section5](https://ar5iv.org/html/2410.10373#S5 \"5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we will dig deeper into the underlying mechanism behind this phenomenon and gain new insights into SAM‚Äôs implicit bias towards flatter minima.\n\n## 5 How Does SAM Efficiently Select Flatter Minima Late in Training?\n\nWe have seen that SAM efficiently selects flatter minima over SGD when applied late in training.\nIn this section, we aim to explore the precise mechanism behind this phenomenon.\nTheoretically, we identify a two-phase picture in the training dynamics after switching to SAM in the late phase, which is characterized by four key claims (P1-4), as outlined in [Table1](https://ar5iv.org/html/2410.10373#S5.T1 \"In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nThis picture demonstrates that SAM provably escapes the minimum found by SGD and converges to a flatter minimum within the same valley in just a few steps, explaining its efficiency in selecting flatter minima late in training.\n\n|     |     |     |\n| --- | --- | --- |\n| Phase I(escape) | (P1).SAM rapidly escapes from the minimum found by SGD; | [Theorem5.2](https://ar5iv.org/html/2410.10373#S5.Thmtheorem2 \"Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n| (P2).However, the iterator remains within the current valley. | Proposition [5.1](https://ar5iv.org/html/2410.10373#S5.Thmproposition1 \"Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n| Phase II(converge) | (P3).SAM converges to a flatter minimum compared to SGD; | Theorem [5.1](https://ar5iv.org/html/2410.10373#S5.Thmtheorem1 \"Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n| (P4).The convergence rate of SAM is extremely fast. | Theorem [5.3](https://ar5iv.org/html/2410.10373#S5.Thmtheorem3 \"Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n\nTable 1: Overview of the two-phase picture and corresponding theoretical results.![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x4.png)Figure 4: Two-phase picture in both toy example and real-world scenarios.(a) Visualization of the two-phase dynamics for [Example5.1](https://ar5iv.org/html/2410.10373#S5.Thmexample1 \"Example 5.1. ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nThe horizontal gray line represents the set of the global minima ‚Ñ≥={(u,v):v=0}‚Ñ≥conditional-setùë¢ùë£ùë£0\\\\mathcal{M}=\\\\{(u,v):v=0\\\\}, where smaller values of \\|u\\|ùë¢\\|u\\| correspond to flatter minima.\nThe blue lines trace the SGD iterates, leading to ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}}, while the orange lines show the SAM iterates, which converge to a flatter minimum ùúΩSAMendsuperscriptsubscriptùúΩSAMend\\\\bm{\\\\theta}\\_{\\\\text{SAM}}^{\\\\text{end}}, with a smaller value of \\|u\\|ùë¢\\|u\\|.\nNotably, ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}} and ùúΩSAMendsuperscriptsubscriptùúΩSAMend\\\\bm{\\\\theta}\\_{\\\\text{SAM}}^{\\\\text{end}} stay in the same valley around ‚Ñ≥‚Ñ≥\\\\mathcal{M}.\n(b) The exponentially fast escape from minima found by SGD.\nTrain loss ‚Ñíùíütrain‚Äã(ùúΩSGD‚ÜíSAM,TT+t)subscript‚ÑísubscriptùíütrainsuperscriptsubscriptùúΩ‚ÜíSGDSAMùëáùëáùë°\\\\mathcal{L}\\_{\\\\mathcal{D}\\_{\\\\textrm{train}}}(\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},T}^{T+t}) v.s. the update step tùë°t.\nHere, TùëáT is the switching step, chosen to be sufficiently large for SGD to converge, and tùë°t is the number of updates after switching to SAM.\nThe red line represents the mean over 100100100 trials with different randomness.\n(c) SAM converges to a flatter minimum within the same valley as the one found by SGD.\nThe loss ‚Ñí‚Ñí\\\\mathcal{L}(top row) / the second-order finite difference ‚Ñí‚Ä≤‚Ä≤superscript‚Ñí‚Ä≤‚Ä≤\\\\mathcal{L}^{\\\\prime\\\\prime}(bottom row) of the interpolated model ùúΩŒªsubscriptùúΩùúÜ\\\\bm{\\\\theta}\\_{\\\\lambda} v.s. the interpolation coefficient ŒªùúÜ\\\\lambda.\nHere, ùúΩŒª=(1‚àíŒª)‚ÄãùúΩSGD‚ÜíSAMend+Œª‚ÄãùúΩSGDendsubscriptùúΩùúÜ1ùúÜsuperscriptsubscriptùúΩ‚ÜíSGDSAMendùúÜsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\lambda}=(1-\\\\lambda)\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM}}^{\\\\textrm{end}}+\\\\lambda\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{\\\\textrm{end}}, and ‚Ñí‚Ä≤‚Ä≤(ùúΩŒª)=(‚Ñí(ùúΩŒª+h+‚Ñí(ùúΩŒª‚àíh‚àí2‚Ñí(ùúΩŒª)/(2h)2\\\\mathcal{L}^{\\\\prime\\\\prime}(\\\\bm{\\\\theta}\\_{\\\\lambda})=\\\\left(\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{\\\\lambda+h}+\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{\\\\lambda-h}-2\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{\\\\lambda}\\\\right)/(2h)^{2}, where h‚Ñéh is fixed to 0.10.10.1.\nThis is no barrier in the loss curve, indicating ùúΩSGD‚ÜíSAMendsuperscriptsubscriptùúΩ‚ÜíSGDSAMend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM}}^{\\\\textrm{end}} and ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{\\\\textrm{end}} stays within the same valley.\n‚Ñí‚Ä≤‚Ä≤‚Äã(ùúΩŒª)superscript‚Ñí‚Ä≤‚Ä≤subscriptùúΩùúÜ\\\\mathcal{L}^{\\\\prime\\\\prime}(\\\\bm{\\\\theta}\\_{\\\\lambda}) gradually increases with ŒªùúÜ\\\\lambda, implying ùúΩSGD‚ÜíSAMendsuperscriptsubscriptùúΩ‚ÜíSGDSAMend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM}}^{\\\\textrm{end}} is flatter than ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{\\\\textrm{end}}.\n\nTo understand the two-phase picture, let us first consider a toy but representative example.\n\n###### Example 5.1.\n\nConsider using the shallow neural network f‚Äã(u,v;x)=tanh‚Å°(v‚Äãtanh‚Å°(u‚Äãx))ùëìùë¢ùë£ùë•ùë£ùë¢ùë•f(u,v;x)=\\\\tanh(v\\\\tanh(ux)) to fit a single data (x=1,y=0formulae-sequenceùë•1ùë¶0x=1,y=0) under the squared loss ‚Ñì‚Äã(y;y‚Ä≤)=(y‚àíy‚Ä≤)2/2‚Ñìùë¶superscriptùë¶‚Ä≤superscriptùë¶superscriptùë¶‚Ä≤22\\\\ell(y;y^{\\\\prime})=(y-y^{\\\\prime})^{2}/2, then the loss landscape can be written as ‚Ñí‚Äã(ùõâ)=12‚Äãtanh2‚Å°(v‚Äãtanh‚Å°(u))‚Ñíùõâ12superscript2ùë£ùë¢\\\\mathcal{L}(\\\\bm{\\\\theta})=\\\\frac{1}{2}\\\\tanh^{2}(v\\\\tanh(u)), where ùõâ=(u,v)ùõâùë¢ùë£\\\\bm{\\\\theta}=(u,v).\n\n[Figure4](https://ar5iv.org/html/2410.10373#S5.F4 \"In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a) visualizes the training dynamics for [Example5.1](https://ar5iv.org/html/2410.10373#S5.Thmexample1 \"Example 5.1. ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nIn [Figure4](https://ar5iv.org/html/2410.10373#S5.F4 \"In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a), the dynamics occur within the valley surrounding the set of the minima ‚Ñ≥={(u,v):v=0}‚Ñ≥conditional-setùë¢ùë£ùë£0\\\\mathcal{M}=\\\\{(u,v):v=0\\\\}.\nOn ‚Ñ≥‚Ñ≥\\\\mathcal{M}, the sharpness is given by ‚à•H‚Äã(ùúΩ)‚à•2=Tr‚Å°(H‚Äã(ùúΩ))=‚ÄñH‚Äã(ùúΩ)‚ÄñF=tanh2‚Å°(u)subscriptdelimited-‚à•‚à•ùêªùúΩ2TrùêªùúΩsubscriptnormùêªùúΩFsuperscript2ùë¢\\\\left\\\\lVert H(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{2}=\\\\operatorname{Tr}(H(\\\\bm{\\\\theta}))=\\\\\\|H(\\\\bm{\\\\theta})\\\\\\|\\_{\\\\rm F}=\\\\tanh^{2}(u), implying that the smaller the \\|u\\|ùë¢\\|u\\|, the flatter the minimum.\nInitially, SGD converges to a relatively sharp minimum ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}}.\nAfter switching to SAM, the iterator exhibits the two-phase dynamics:\n\n- ‚Ä¢\n\n\nPhase I (escape). SAM first escapes the sharp minimum ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}} found by SGD within a few iterations (P1), but remains within the same valley around ‚Ñ≥‚Ñ≥\\\\mathcal{M}555Note that the landscape has another valley around a different set of minima ùí©={(u,v):u=0}ùí©conditional-setùë¢ùë£ùë¢0\\\\mathcal{N}=\\\\{(u,v):u=0\\\\}(P2);\n\n- ‚Ä¢\n\n\nPhase II (converge). SAM then rapidly converges to another flatter minimum ùúΩSAMendsuperscriptsubscriptùúΩSAMend\\\\bm{\\\\theta}\\_{\\\\text{SAM}}^{\\\\text{end}}(P3-4), with a smaller \\|u\\|ùë¢\\|u\\| compared to ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}}.\n\n\nThis toy example successfully illustrates the two-phase picture after switching to SAM in the late training phase, but it offers only a basic intuition.\nIn the following, we will formally present our theoretical results, with each claim rigorously supported by corresponding analysis.\n\n### 5.1 Theoretical guarantees for P1 and P3: linear stability analysis\n\nIn this subsection, we provide theoretical support for two key claims in our two-phase picture through a linear stability analysis: P1. _SAM escapes from the relatively sharp minima found by SGD exponentially fast_; P3. _SAM converges to a flatter minima compared to SGD_.\n\nDuring the late phase of training, the model remains close to some global minimum ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} and can be locally approximated by its linearization:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | flin‚Äã(ùíô;ùúΩ)=f‚Äã(ùíô;ùúΩ‚ãÜ)+‚ü®‚àáf‚Äã(ùíô;ùúΩ‚ãÜ),ùúΩ‚àíùúΩ‚ãÜ‚ü©.subscriptùëìlinùíôùúΩùëìùíôsuperscriptùúΩ‚ãÜ‚àáùëìùíôsuperscriptùúΩ‚ãÜùúΩsuperscriptùúΩ‚ãÜf\\_{\\\\rm lin}(\\\\bm{x};\\\\bm{\\\\theta})=f(\\\\bm{x};\\\\bm{\\\\theta}^{\\\\star})+\\\\left\\\\langle\\\\nabla f(\\\\bm{x};\\\\bm{\\\\theta}^{\\\\star}),\\\\bm{\\\\theta}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rangle. |  | (5) |\n\nConsequently, we can characterize the local dynamical stability (Strogatz, [2000](https://ar5iv.org/html/2410.10373#bib.bib50 \"\")) of the SAM iterator near the global minimum on this linearized model.\n\nSimilar to the linear stability of SGD (Wu et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib60 \"\")), we define the linear stability of SAM in [Definition5.1](https://ar5iv.org/html/2410.10373#S5.Thmdefinition1 \"Definition 5.1 (Loss-based linear stability of SAM). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nNote that for a specific optimizer, only linearly stable minima can be selected.\n\n###### Definition 5.1(Loss-based linear stability of SAM).\n\nA global minimum ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is said to be linearly stable for SAM if there exists a C>0ùê∂0C>0 such that it holds for SAM on the linearized model ( [Equation5](https://ar5iv.org/html/2410.10373#S5.E5 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) that ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]‚â§C‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩ0)\\],‚àÄt‚â•0formulae-sequenceùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°ùê∂ùîºdelimited-\\[\\]‚ÑísubscriptùúΩ0for-allùë°0\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\]\\\\leq C\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0})\\],\\\\forall t\\\\geq 0.\n\nWu et al. ( [2022](https://ar5iv.org/html/2410.10373#bib.bib60 \"\")) has shown that the linear stability of stochastic algorithms is significantly influenced by the gradient noise ùùÉ‚Äã(ùúΩ)=‚àá‚ÑìŒæ‚Äã(ùúΩ)‚àí‚àá‚Ñí‚Äã(ùúΩ)ùùÉùúΩ‚àásubscript‚ÑìùúâùúΩ‚àá‚ÑíùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta})=\\\\nabla\\\\ell\\_{\\\\xi}(\\\\bm{\\\\theta})-\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}), where Œæùúâ\\\\xi denotes the index of a random sample.\nThus, it is crucial to consider the structural properties of the gradient noise in our analysis.\n\nGradient noise structure.\nA series of studies (Zhu et al., [2018](https://ar5iv.org/html/2410.10373#bib.bib64 \"\"); Feng & Tu, [2021](https://ar5iv.org/html/2410.10373#bib.bib18 \"\"); Wu et al., [2020b](https://ar5iv.org/html/2410.10373#bib.bib57 \"\"); [2022](https://ar5iv.org/html/2410.10373#bib.bib60 \"\"); Mori et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib43 \"\"); Wojtowytsch, [2024](https://ar5iv.org/html/2410.10373#bib.bib55 \"\")) have established two key properties of the gradient noise ùùÉ‚Äã(ùúΩ)ùùÉùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta}): (i) its shape is highly anisotropic; (ii) its magnitude is loss dependent.\nSpecifically, by incorporating both the noise shape and magnitude, Mori et al. ( [2022](https://ar5iv.org/html/2410.10373#bib.bib43 \"\")) has proposed an approximation for the gradient noise covariance Œ£‚Äã(ùúΩ)=1n‚Äã‚àëi=1nùùÉ‚Äã(ùúΩ)‚ÄãùùÉ‚Äã(ùúΩ)‚ä§Œ£ùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõùùÉùúΩùùÉsuperscriptùúΩtop\\\\Sigma(\\\\bm{\\\\theta})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\bm{\\\\xi}(\\\\bm{\\\\theta})^{\\\\top}, suggesting Œ£‚Äã(ùúΩ)‚àº2‚Äã‚Ñí‚Äã(ùúΩ)‚ÄãG‚Äã(ùúΩ)similar-toŒ£ùúΩ2‚ÑíùúΩùê∫ùúΩ\\\\Sigma(\\\\bm{\\\\theta})\\\\sim 2\\\\mathcal{L}(\\\\bm{\\\\theta})G(\\\\bm{\\\\theta}).\n\nInspired by this approximation, we assume a weaker666‚ÄúWeaker‚Äù means that the approximation Œ£‚Äã(ùúΩ)‚àº2‚Äã‚Ñí‚Äã(ùúΩ)‚ÄãG‚Äã(ùúΩ)similar-toŒ£ùúΩ2‚ÑíùúΩùê∫ùúΩ\\\\Sigma(\\\\bm{\\\\theta})\\\\sim 2\\\\mathcal{L}(\\\\bm{\\\\theta})G(\\\\bm{\\\\theta}) can imply our Assumption [5.3](https://ar5iv.org/html/2410.10373#S5.Thmassumption3 \"Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"). alignment property of the noise covariance Œ£‚Äã(ùúΩ)Œ£ùúΩ\\\\Sigma(\\\\bm{\\\\theta}) (see Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) in our analysis, which has been theoretically and empirically validated in recent works (Wu et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib60 \"\"); Wu & Su, [2023](https://ar5iv.org/html/2410.10373#bib.bib58 \"\")).\n\n###### Assumption 5.1(Gradient noise alignment).\n\nThere exists Œ≥>0ùõæ0\\\\gamma>0 s.t. Tr‚Å°(Œ£‚Äã(ùúΩ)‚ÄãG‚Äã(ùúΩ))2‚Äã‚Ñí‚Äã(ùúΩ)‚Äã‚à•G‚Äã(ùúΩ)‚à•F2‚â•Œ≥TrŒ£ùúΩùê∫ùúΩ2‚ÑíùúΩsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùúΩùêπ2ùõæ\\\\frac{\\\\operatorname{Tr}(\\\\Sigma(\\\\bm{\\\\theta})G(\\\\bm{\\\\theta}))}{2\\\\mathcal{L}(\\\\bm{\\\\theta})\\\\left\\\\lVert G(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{F}^{2}}\\\\geq\\\\gamma for all ùúΩùúΩ\\\\bm{\\\\theta}.\n\nBy analyzing the linear stability of SAM under this gradient noise alignment assumption, we establish two theorems supporting the two key claims P1 and P3.\n\n###### Theorem 5.1(P3. Proof in [SectionB.1](https://ar5iv.org/html/2410.10373\\#A2.SS1 \"B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nLet ùõâ‚ãÜsuperscriptùõâ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} be a global minimum that is linearly stable for SAM, and suppose Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") holds.\nThen we have\n‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2‚Äã(1+œÅ2‚ÄãŒ≥B‚Äã‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2)‚â§BŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ21superscriptùúå2ùõæùêµsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma}{B}\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\right)\\\\leq\\\\frac{B}{\\\\eta^{2}\\\\gamma}.\n\n[Theorem5.1](https://ar5iv.org/html/2410.10373#S5.Thmtheorem1 \"Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") characterizes the sharpness of the linearly stable minima for SAM, which is influenced by the learning rate Œ∑ùúÇ\\\\eta, the batch size BùêµB, and the perturbation radius œÅùúå\\\\rho.\nSince only linearly stable minima can be selected by optimizer, [Theorem5.1](https://ar5iv.org/html/2410.10373#S5.Thmtheorem1 \"Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") characterizes the sharpness of global minima selected by SAM.\nNotably, taking œÅ=0ùúå0\\\\rho=0 recovers the corresponding result for SGD (see [Table2](https://ar5iv.org/html/2410.10373#S5.T2 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")).\n\n|     |     |     |\n| --- | --- | --- |\n|  | SAM (Theorem [5.1](https://ar5iv.org/html/2410.10373#S5.Thmtheorem1 \"Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) | SGD (Wu et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib60 \"\")) |\n| Sharpness bound | ‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2‚ãÖ(1+œÅ2‚ÄãŒ≥B‚Äã‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2)‚â§BŒ∑2‚ÄãŒ≥‚ãÖsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ21superscriptùúå2ùõæùêµsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\cdot\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma}{B}\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\right)\\\\leq\\\\frac{B}{\\\\eta^{2}\\\\gamma} | ‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2‚â§BŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\leq\\\\frac{B}{\\\\eta^{2}\\\\gamma} |\n\nTable 2: Comparison of the sharpness of global minima selected by SAM and SGD.\n\nSupport for  P3.\nWe compare the bounds on the sharpness of the global minima selected by SAM and SGD in [Table2](https://ar5iv.org/html/2410.10373#S5.T2 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nThe additional term 1+œÅ2‚ÄãŒ≥‚Äã‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2>11superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ211+\\\\rho^{2}\\\\gamma\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}>1 in SAM‚Äôs bound impose stricter requirement on the sharpness of global minima selected by SAM compared to SGD, which supports our key claim P3 that SAM tends to select flatter global minima over SGD.\nThis term arises from SAM‚Äôs inner update, i.e., ùúΩt+1/2=ùúΩt+œÅ‚Äã‚àá‚ÑìŒæt‚Äã(ùúΩt)=ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)+œÅ‚Äã(‚àá‚ÑìŒæt‚Äã(ùúΩt)‚àí‚àá‚Ñí‚Äã(ùúΩt))subscriptùúΩùë°12subscriptùúΩùë°ùúå‚àásubscript‚Ñìsubscriptùúâùë°subscriptùúΩùë°subscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°ùúå‚àásubscript‚Ñìsubscriptùúâùë°subscriptùúΩùë°‚àá‚ÑísubscriptùúΩùë°\\\\bm{\\\\theta}\\_{t+1/2}=\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\ell\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}\\_{t})=\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})+\\\\rho(\\\\nabla\\\\ell\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}\\_{t})-\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})).\nIntuitively, the ascent update œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)ùúå‚àá‚ÑísubscriptùúΩùë°\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}) tends to increase the loss, while the noise œÅ‚Äã(‚àá‚ÑìŒæt‚Äã(ùúΩt)‚àí‚àá‚Ñí‚Äã(ùúΩt))ùúå‚àásubscript‚Ñìsubscriptùúâùë°subscriptùúΩùë°‚àá‚ÑísubscriptùúΩùë°\\\\rho(\\\\nabla\\\\ell\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}\\_{t})-\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})) introduces extra stochasticity.\nThese factors together contribute to the flatter-minima selection by SAM.\n\n###### Theorem 5.2(P1. Proof in [SectionB.1](https://ar5iv.org/html/2410.10373\\#A2.SS1 \"B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nLet ùõâ‚ãÜsuperscriptùõâ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} be a global minimum, and suppose Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") holds.\nIf ‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2‚Äã(1+œÅ2‚ÄãŒ≥B‚Äã‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2)>BŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ21superscriptùúå2ùõæùêµsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma}{B}\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\right)>\\\\frac{B}{\\\\eta^{2}\\\\gamma}, then ùõâ‚ãÜsuperscriptùõâ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is linearly non-stable for SAM. Indeed, ùîº‚Äã\\[‚Ñí‚Äã(ùõât)\\]‚â•Ct‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùõâ0)\\]ùîºdelimited-\\[\\]‚Ñísubscriptùõâùë°superscriptùê∂ùë°ùîºdelimited-\\[\\]‚Ñísubscriptùõâ0\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\]\\\\geq C^{t}\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0})\\] holds for all t>0ùë°0t>0 with C>1ùê∂1C>1.\n\n[Theorem5.2](https://ar5iv.org/html/2410.10373#S5.Thmtheorem2 \"Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), together with [Theorem5.1](https://ar5iv.org/html/2410.10373#S5.Thmtheorem1 \"Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), characterize the necessary condition for a global minimum to be linearly stable for SAM, namely the stability condition of SAM.\nFurthermore, [Theorem5.2](https://ar5iv.org/html/2410.10373#S5.Thmtheorem2 \"Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") illustrates that if a global minimum fails to meet the stability condition of SAM, the SAM iterator will escapes from the minimum exponentially fast.\n\nSupport for  P1.\nAlthough the sharpness bound for SGD in [Table2](https://ar5iv.org/html/2410.10373#S5.T2 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") is an upper bound, Wu et al. ( [2022](https://ar5iv.org/html/2410.10373#bib.bib60 \"\")) empirically demonstrates that the bound is nearly tight, with SGD solutions approximately satisfying ‚à•H‚Äã(ùúΩSGDend)‚à•F2‚âàBŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptsubscriptùúΩSGDendùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}})\\\\right\\\\rVert\\_{F}^{2}\\\\approx\\\\frac{B}{\\\\eta^{2}\\\\gamma}.\nThus, with the same Œ∑ùúÇ\\\\eta and BùêµB, the solution found by SGD cannot satisfy the stability condition of SAM.\nThis leads to our key claim P1 that SAM escapes from the sharp minima found by SGD exponentially fast, as validated by our experiments in [Figure4](https://ar5iv.org/html/2410.10373#S5.F4 \"In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (b).\n\nComparison with other linear stability analyses of SAM (Shin et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib47 \"\"); Behdin et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib10 \"\")).\nThese works have focused on the norm-based linear stability, characterized by ùîº‚Äã\\[‚à•ùúΩt‚àíùúΩ‚ãÜ‚à•2\\]‚â§C‚Äã‚à•ùúΩ0‚àíùúΩ‚ãÜ‚à•2,‚àÄt‚â•0formulae-sequenceùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•subscriptùúΩùë°superscriptùúΩ‚ãÜ2ùê∂superscriptdelimited-‚à•‚à•subscriptùúΩ0superscriptùúΩ‚ãÜ2for-allùë°0\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{t}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rVert^{2}\\]\\\\leq C\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{0}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rVert^{2},\\\\forall t\\\\geq 0, which is stricter than our loss-based stability (see [Definition5.1](https://ar5iv.org/html/2410.10373#S5.Thmdefinition1 \"Definition 5.1 (Loss-based linear stability of SAM). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) due to the presence of degenerate directions in over-parameterized models (see Lemma [B.2](https://ar5iv.org/html/2410.10373#A2.Thmlemma2 \"Lemma B.2. ‚Ä£ B.4 Comparison between two Definitions on Linear Stability ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")).\nAnother key difference is the novel use of the alignment property of gradient noise (see Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) in our analysis, enabling us to derive a concrete bound on the sharpness of SAM‚Äôs solutions.\n\n### 5.2 Theoretical Guarantee for P2: Beyond Local Analysis\n\nIn this subsection, we provide theoretical support for another key claim in our two-phase picture: P2. _SAM remains within the current valley during escape._\n\nSub-quadratic landscape.\nIn high-loss regions, the local linearization in [Equation5](https://ar5iv.org/html/2410.10373#S5.E5 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") no longer provides a valid approximation for neural networks, and consequently, the _quadratic approximation_ of the neural network loss landscape\n_fails to_ capture its true structure.\nBeyond the quadratic landscape, Ma et al. ( [2022](https://ar5iv.org/html/2410.10373#bib.bib40 \"\")) has introduced the concept of the _sub-quadratic landscape_: the loss grows slower than a quadratic function, and the landscape in high-loss regions is significantly flatter than in low-loss regions.\nThe sub-quadratic landscape has been empirically verified in high-loss regions, and is able to explain the Edge of Stability phenomenon (Cohen et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib14 \"\")) (also observed in Wu et al. ( [2018](https://ar5iv.org/html/2410.10373#bib.bib59 \"\")); Jastrzebski et al. ( [2020](https://ar5iv.org/html/2410.10373#bib.bib25 \"\"))), which the quadratic landscape cannot account for.\n\nWhile [Section5.1](https://ar5iv.org/html/2410.10373#S5.SS1 \"5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") focuses on a local analysis near global minima, the analysis here is necessarily non-local, as SAM might iterate into high-loss regions during escape.\nIn this subsection, we need to show that SAM remains within the current valley during escape under a sub-quadratic landscape.\n\nAdditional setup.\nFor simplicity, we assume a model size of p=1ùëù1p=1 and consider the full-batch SAM, i.e., Œ∏t+1=Œ∏t‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(Œ∏t+œÅ‚Äã‚àá‚Ñí‚Äã(Œ∏t))subscriptùúÉùë°1subscriptùúÉùë°ùúÇ‚àá‚ÑísubscriptùúÉùë°ùúå‚àá‚ÑísubscriptùúÉùë°\\\\theta\\_{t+1}=\\\\theta\\_{t}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\theta\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\theta\\_{t})).\nThis setup is sufficient to illustrate that SAM will remain within the current valley under a sub-quadratic landscape.\n\n###### Definition 5.2(Sub-quadratic landscape for p=1ùëù1p=1).\n\nLet Œ∏‚ãÜ=0superscriptùúÉ‚ãÜ0\\\\theta^{\\\\star}=0 be a global minimum of ‚Ñí‚Ñí\\\\mathcal{L} with sharpness ‚Ñí‚Ä≤‚Ä≤‚Äã(0)=a>0superscript‚Ñí‚Ä≤‚Ä≤0ùëé0\\\\mathcal{L}^{\\\\prime\\\\prime}(0)=a>0.\nThe valley V=\\[‚àíc,c\\]ùëâùëêùëêV=\\[-c,c\\] is termed sub-quadratic if for all z,z1,z2‚ààVùëßsubscriptùëß1subscriptùëß2ùëâz,z\\_{1},z\\_{2}\\\\in V, it holds that z‚Äã‚Ñí‚Ä≤‚Äã(z)‚â•0ùëßsuperscript‚Ñí‚Ä≤ùëß0z\\\\mathcal{L}^{\\\\prime}(z)\\\\geq 0 and ‚Ñí‚Ä≤‚Ä≤‚Äã(\\|z1\\|)‚â•‚Ñí‚Ä≤‚Ä≤‚Äã(\\|z2\\|)superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß1superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß2\\\\mathcal{L}^{\\\\prime\\\\prime}(\\|z\\_{1}\\|)\\\\geq\\\\mathcal{L}^{\\\\prime\\\\prime}(\\|z\\_{2}\\|) if \\|z1\\|‚â§\\|z2\\|subscriptùëß1subscriptùëß2\\|z\\_{1}\\|\\\\leq\\|z\\_{2}\\|.\n\nFollowing Theorem 1 in (Ma et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib40 \"\")), we define the sub-quadratic landscape in [Definition5.2](https://ar5iv.org/html/2410.10373#S5.Thmdefinition2 \"Definition 5.2 (Sub-quadratic landscape for ùëù=1). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nSpecifically, for any 0<z1<z2<c0subscriptùëß1subscriptùëß2ùëê0<z\\_{1}<z\\_{2}<c, it holds that ‚Ñí‚Ä≤‚Ä≤‚Äã(z1)>‚Ñí‚Ä≤‚Ä≤‚Äã(z2)superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß1superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß2\\\\mathcal{L}^{\\\\prime\\\\prime}(z\\_{1})>\\\\mathcal{L}^{\\\\prime\\\\prime}(z\\_{2}) and ‚Ñí‚Äã(z1)<‚Ñí‚Äã(z2)‚Ñísubscriptùëß1‚Ñísubscriptùëß2\\\\mathcal{L}(z\\_{1})<\\\\mathcal{L}(z\\_{2}), indicating that high-loss regions are flatter than low-loss regions.\nThe same applies for 0>z1>z2>‚àíc0subscriptùëß1subscriptùëß2ùëê0>z\\_{1}>z\\_{2}>-c.\n\n###### Proposition 5.1(P2. Proof in [SectionB.2](https://ar5iv.org/html/2410.10373\\#A2.SS2 \"B.2 Proof of Proposition 5.1 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nUnder Definition [5.2](https://ar5iv.org/html/2410.10373#S5.Thmdefinition2 \"Definition 5.2 (Sub-quadratic landscape for ùëù=1). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), assume the landscape is sub-quadratic in the valley V=\\[‚àí2‚Äãb,2‚Äãb\\]ùëâ2ùëè2ùëèV=\\[-2b,2b\\].\nThen, for all initialization Œ∏0‚àà(‚àíb,b)subscriptùúÉ0ùëèùëè\\\\theta\\_{0}\\\\in(-b,b), and Œ∑,œÅùúÇùúå\\\\eta,\\\\rho s.t. Œ∑<minz‚ààV‚Å°b/\\|‚Ñí‚Ä≤‚Äã(z)\\|ùúÇsubscriptùëßùëâùëèsuperscript‚Ñí‚Ä≤ùëß\\\\eta<\\\\min\\\\limits\\_{z\\\\in V}b/\\|\\\\mathcal{L}^{\\\\prime}(z)\\|, œÅ‚â§min‚Å°{1/a,Œ∑‚ãÖmin0<\\|z\\|<b‚Å°\\|‚Ñí‚Ä≤‚Äã(2‚Äãz)/‚Ñí‚Ä≤‚Äã(z)\\|}ùúå1ùëé‚ãÖùúÇsubscript0ùëßùëèsuperscript‚Ñí‚Ä≤2ùëßsuperscript‚Ñí‚Ä≤ùëß\\\\rho\\\\leq\\\\min\\\\{1/a,\\\\eta\\\\cdot\\\\min\\\\limits\\_{0<\\|z\\|<b}\\|\\\\mathcal{L}^{\\\\prime}(2z)/\\\\mathcal{L}^{\\\\prime}(z)\\|\\\\}, the full-batch SAM will remain within the valley VùëâV, i.e., Œ∏t‚ààVsubscriptùúÉùë°ùëâ\\\\theta\\_{t}\\\\in V for all t‚àà‚Ñïùë°‚Ñït\\\\in\\\\mathbb{N}.\n\n[Proposition5.1](https://ar5iv.org/html/2410.10373#S5.Thmproposition1 \"Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") shows that under a sub-quadratic landscape, even if SAM escapes the minimum Œ∏‚ãÜsuperscriptùúÉ‚ãÜ\\\\theta^{\\\\star} when Œ∑>2/a‚Äã(1+a‚ÄãœÅ)ùúÇ2ùëé1ùëéùúå\\\\eta>{2}/{a(1+a\\\\rho)} and Œ∏0‚âàŒ∏‚ãÜsubscriptùúÉ0superscriptùúÉ‚ãÜ\\\\theta\\_{0}\\\\approx\\\\theta^{\\\\star}, it will still remain within the current valley.\nThis proposition holds when Œ∑<minz‚ààVb‚Å°b/\\|‚Ñí‚Ä≤‚Äã(z)\\|ùúÇsubscriptùëßsubscriptùëâùëèùëèsuperscript‚Ñí‚Ä≤ùëß\\\\eta<\\\\min\\\\limits\\_{z\\\\in V\\_{b}}b/\\|\\\\mathcal{L}^{\\\\prime}(z)\\|, where the upper bound minz‚ààVb‚Å°b/\\|‚Ñí‚Ä≤‚Äã(z)\\|subscriptùëßsubscriptùëâùëèùëèsuperscript‚Ñí‚Ä≤ùëß\\\\min\\\\limits\\_{z\\\\in V\\_{b}}b/\\|\\\\mathcal{L}^{\\\\prime}(z)\\| and can be sufficiently large under highly sub-quadratic landscapes (see Example [B.1](https://ar5iv.org/html/2410.10373#A2.Thmexample1 \"Example B.1 (highly sub-quadratic landscape). ‚Ä£ B.2 Proof of Proposition 5.1 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")).\n\nSupport for P2.\nProposition [5.1](https://ar5iv.org/html/2410.10373#S5.Thmproposition1 \"Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") supports our key claim P2 that SAM remains within the current valley during escape. Intuitively, as shown in [Section5.1](https://ar5iv.org/html/2410.10373#S5.SS1 \"5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the low-loss region around the sharp minimum found by SGD cannot satisfy SAM‚Äôs stability condition, causing SAM to escape toward higher-loss regions;\nhowever, under the sub-quadratic landscape, the high-loss regions are much flatter, which satisfies SAM‚Äôs stability condition and prevents it from escaping the current valley.\nThe experiment in [Figure4](https://ar5iv.org/html/2410.10373#S5.F4 \"In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (c) back up this theoretical claim.\n\n### 5.3 Theoretical Guarantee for P4: Convergence Analysis\n\nIn this subsection, we provide theoretical support for the final claim in our two-phase picture: P4. _The convergence rate of SAM is significantly fast_.\n\nTo establish the convergence results for stochastic optimization algorithms, it is often necessary to make assumptions about the loss landscape and the magnitude of gradient noise ùùÉ‚Äã(ùúΩ)ùùÉùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta}).\n\n###### Assumption 5.2(Loss landscape: LùêøL-smoothness and Polyak‚Äì≈Åojasiewicz).\n\n(i) There exists L>0ùêø0L>0 s.t. ‚à•H‚Äã(ùúΩ)‚à•2‚â§Lsubscriptdelimited-‚à•‚à•ùêªùúΩ2ùêø\\\\left\\\\lVert H(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{2}\\\\leq L for all ùúΩùúΩ\\\\bm{\\\\theta}; (ii) There exists Œº>0ùúá0\\\\mu>0 s.t. ‚à•‚àá‚Ñí‚Äã(ùúΩ)‚à•2‚â•2‚ÄãŒº‚Äã‚Ñí‚Äã(ùúΩ)superscriptdelimited-‚à•‚à•‚àá‚ÑíùúΩ22ùúá‚ÑíùúΩ\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\\\geq 2\\\\mu\\\\mathcal{L}(\\\\bm{\\\\theta}) for all ùúΩùúΩ\\\\bm{\\\\theta}.\n\nAssumption [5.2](https://ar5iv.org/html/2410.10373#S5.Thmassumption2 \"Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") are quite standard and is frequently used in the non-convex optimization literature (Karimi et al., [2016](https://ar5iv.org/html/2410.10373#bib.bib28 \"\")).\nSpecifically, for neural networks, if ‚Ñí‚Äã(‚ãÖ)‚Ñí‚ãÖ\\\\mathcal{L}(\\\\cdot) is four-times continuously differentiable, this assumption holds at least near the set of global minima of ‚Ñí‚Ñí\\\\mathcal{L}(Arora et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib5 \"\")).\n\n###### Assumption 5.3(Gradient noise magnitude).\n\nThere exists œÉ>0ùúé0\\\\sigma>0 s.t. ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2‚Äã‚Ñí‚Äã(ùúΩ),‚àÄùúΩùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2‚ÑíùúΩfor-allùúΩ\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2}\\\\mathcal{L}(\\\\bm{\\\\theta}),\\\\forall\\\\bm{\\\\theta}.\n\nThe bounded variance assumption ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2} is commonly employed in classical optimization theory (Bubeck et al., [2015](https://ar5iv.org/html/2410.10373#bib.bib12 \"\")).\nHowever, as discussed in Section [5.1](https://ar5iv.org/html/2410.10373#S5.SS1 \"5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), recent studies (Mori et al., [2022](https://ar5iv.org/html/2410.10373#bib.bib43 \"\"); Feng & Tu, [2021](https://ar5iv.org/html/2410.10373#bib.bib18 \"\"); Liu et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib35 \"\"); Wojtowytsch, [2024](https://ar5iv.org/html/2410.10373#bib.bib55 \"\")) have shown that the magnitude of SGD noise is also bounded by the loss value.\nThus, we introduce Assumption [5.3](https://ar5iv.org/html/2410.10373#S5.Thmassumption3 \"Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"): ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2‚Äã‚Ñí‚Äã(ùúΩ)ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2‚ÑíùúΩ\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2}\\\\mathcal{L}(\\\\bm{\\\\theta}).\nThis indicates that the noise magnitude diminishes to zero at global minima, contrasting sharply with the classical bounded variance assumption and closely aligning with real-world scenarios.\n\nUnder these assumptions, we present the convergence result for stochastic SAM in [Theorem5.3](https://ar5iv.org/html/2410.10373#S5.Thmtheorem3 \"Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\n###### Theorem 5.3(P4. Proof in [SectionB.3](https://ar5iv.org/html/2410.10373\\#A2.SS3 \"B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nUnder Assumption [5.2](https://ar5iv.org/html/2410.10373#S5.Thmassumption2 \"Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") and [5.3](https://ar5iv.org/html/2410.10373#S5.Thmassumption3 \"Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), let {ùõât}tsubscriptsubscriptùõâùë°ùë°\\\\{\\\\bm{\\\\theta}\\_{t}\\\\}\\_{t} be the parameters trained by SAM.\nIf Œ∑‚â§min‚Å°{1/L,Œº‚ÄãB/2‚ÄãL‚ÄãœÉ2}ùúÇ1ùêøùúáùêµ2ùêøsuperscriptùúé2\\\\eta\\\\leq\\\\min\\\\{1/L,\\\\mu B/2L\\\\sigma^{2}\\\\} and œÅ‚â§min‚Å°{1/L,Œº‚ÄãB/4‚ÄãL‚ÄãœÉ2,Œ∑‚ÄãŒº2/24‚ÄãL2}ùúå1ùêøùúáùêµ4ùêøsuperscriptùúé2ùúÇsuperscriptùúá224superscriptùêø2\\\\rho\\\\leq\\\\min\\\\left\\\\{1/L,\\\\mu B/4L\\\\sigma^{2},\\\\eta\\\\mu^{2}/24L^{2}\\\\right\\\\}, then we have ùîº‚Äã\\[‚Ñí‚Äã(ùõât)\\]‚â§(1‚àíŒ∑‚ÄãŒº/2)t‚Äã‚Ñí‚Äã(ùõâ0),‚àÄt‚àà‚Ñïformulae-sequenceùîºdelimited-\\[\\]‚Ñísubscriptùõâùë°superscript1ùúÇùúá2ùë°‚Ñísubscriptùõâ0for-allùë°‚Ñï\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\]\\\\leq\\\\left(1-\\\\eta\\\\mu/2\\\\right)^{t}\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0}),\\ \\\\forall t\\\\in\\\\mathbb{N}.\n\nSupport for  P4. [Theorem5.3](https://ar5iv.org/html/2410.10373#S5.Thmtheorem3 \"Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") supports our key claim P4 that the convergence rate of stochastic SAM is significantly fast,\nand notably faster than the previous result on SAM‚Äôs convergence rate (Andriushchenko & Flammarion, [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")).\n\nComparison with other convergence results for stochastic SAM (Andriushchenko & Flammarion, [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\"); Shin et al., [2023](https://ar5iv.org/html/2410.10373#bib.bib47 \"\")).\nThese works, along with our result, all study the convergence on stochastic SAM under the standard Assumption [5.2](https://ar5iv.org/html/2410.10373#S5.Thmassumption2 \"Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nAndriushchenko & Flammarion ( [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")) has shown that stochastic SAM converges under a polynomially fast rate of ùí™‚Äã(1/t)ùí™1ùë°\\\\mathcal{O}(1/t), but this is much slower than our exponentially fast rate.\nThe difference lies in the assumptions on gradient noise magnitude: they have used the classical assumption ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2}, whereas we rely on the more realistic Assumption [5.3](https://ar5iv.org/html/2410.10373#S5.Thmassumption3 \"Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nShin et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib47 \"\")) has also proved that stochastic SAM converges exponentially fast.\nHowever, their analysis is based on an additional interpolation assumption due to over-parameterization.\n\n## 6 Is SAM Necessary in the Early Phase of Training?\n\nSince we have both empirically observed and theoretically justified SAM‚Äôs efficiency in selecting flatter minima in the late phase of training, one might question the necessity of using SAM in the early phase.\nIn this section, we demonstrate that applying SAM during the early phase offers only marginal benefits for generalization and sharpness compared to full SGD training.\nThus, we conjecture that the optimization algorithm chosen at the end of training is more critical in shaping the final solution‚Äôs properties.\nBased on this viewpoint, we extend our findings from SAM to Adversarial Training.\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x5.png)Figure 5: The impact of SAM training proportion on generalization/sharpness when switches from SAM to SGD.\nThe generalization gap between the models ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}(top row)/the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}(bottom row) vs. the SAM training proportion of ùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}.\nùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t} refers to the model obtained by switching from SAM to SGD, while ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} represents the model trained entirely with SAM.\nHere, TùëáT is the total number of training epochs, and tùë°t is the switching point.\nWe define SAM training proportion of ùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t} as t/Tùë°ùëát/T and adjust it by varying tùë°t while keeping TùëáT fixed.\nDots represent the mean over three trials with different random seeds, and error bars indicate standard deviations.\nResults on more datasets and architectures can be found in [SectionA.4](https://ar5iv.org/html/2410.10373#A1.SS4 \"A.4 More Experiments on Early-Phase SAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nEarly-phase SAM offers only marginal improvements over SGD in generalization and sharpness.\nWe conduct experiments under various settings to investigate the effect of applying SAM during the early phase of training, followed by SGD, on generalization and sharpness.\nSimilarly as [Section4](https://ar5iv.org/html/2410.10373#S4 \"4 SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we use the switching method but switches from SAM to SGD, to obtain the model ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}.\nWe also train a baseline model entirely with SAM, yielding ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}.\nBy varying tùë°t while keep TùëáT fixed, we adjust the proportion of SAM training, defined as t/Tùë°ùëát/T, to examine its impact on the generalization gap between ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}, as well as the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}.\nIn [Figure5](https://ar5iv.org/html/2410.10373#S6.F5 \"In 6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the generalization gap remains substantial even when trained with SAM for most of the time (e.g., t/T=0.8ùë°ùëá0.8t/T=0.8).\nA similar trend is observed in the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}.\nOnly full SAM training (i.e., t/T=1ùë°ùëá1t/T=1) consistently finds the flat minima.\nThis suggests that applying SAM before SGD yields only limited improvements in generalization and sharpness compared to training entirely with SGD.\n\nTogether with findings in [Section4](https://ar5iv.org/html/2410.10373#S4 \"4 SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we conjecture that the optimization algorithm chosen in the late training phase is more critical in determining the final solution‚Äôs properties.\nHowever, current findings are based solely on generalization/sharpness‚Äîcan we extend to other properties?\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x6.png)Figure 6: AT improves robustness efficiently even when applied only during the final few epochs of training.\n(a)\nRobust/natural error vs. training epochs for model trained with different strategies.\n(b)\nRobust/natural error of ùúΩSGD‚ÜíATTsuperscriptsubscriptùúΩ‚ÜíSGDATùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT}}^{T} vs. the proportion of AT epochs (T‚àít)/Tùëáùë°ùëá(T-t)/T.\nIn both (a) and (b), dashed lines represents the robust error ErrùíüperturbsubscriptErrsubscriptùíüperturb\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{perturb}}}, and solid lines presents the natural error ErrùíücleansubscriptErrsubscriptùíüclean\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{clean}}}.\nBlue and green curves correspond to models trained solely with SGD and AT, i.e., ùúΩSGDTsubscriptsuperscriptùúΩùëáSGD\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}} and ùúΩATTsubscriptsuperscriptùúΩùëáAT\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{AT}}, respectively.\nOrange curves indicate models trained with the switching method, switching from SGD to AT at epoch tùë°t, i.e., ùúΩSGD‚ÜíAT,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDATùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}.\nAll models are trained for T=200ùëá200T=200 epochs.\nIn (a), we set the switching epoch tùë°t for ùúΩSGD‚ÜíAT,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDATùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t} to 180180180.\nIn (b), we vary tùë°t while keep TùëáT fixed to adjust the AT training proportion for ùúΩSGD‚ÜíATTsuperscriptsubscriptùúΩ‚ÜíSGDATùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT}}^{T}.\nAll results are averaged over five trials with different random seeds.\n\nExtension: Adversarial Training efficiently finds robust minima late in training.\nAdversarial Training (AT) (Madry et al., [2018](https://ar5iv.org/html/2410.10373#bib.bib41 \"\")), in which networks are trained on adversarial examples (Szegedy et al., [2014](https://ar5iv.org/html/2410.10373#bib.bib51 \"\")), significantly improves the robustness of neural networks.\nRecently, Zhang et al. ( [2024](https://ar5iv.org/html/2410.10373#bib.bib63 \"\")) highlighted a duality between SAM and AT: while SAM perturbs the model parameters along training (see [Equation1](https://ar5iv.org/html/2410.10373#S3.E1 \"In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), AT perturbs input samples, with both methods relying on gradients for perturbations.\nHere, we pose the question: can our findings on SAM be extended to AT?\n\nSimilar to SAM, we discover that applying AT only during the final few epochs yields robustness comparable to training entirely with AT.\nWith the switching method, which switches from SGD to AT at epoch tùë°t, we obtain the model ùúΩSGD‚ÜíAT,tTsuperscriptsubscriptùúΩ‚ÜíSGDATùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}^{T}.\nWe evaluate its robustness by classification error on adversarial examples, termed robust error Errùíüperturb‚Å°(ùúΩ)subscriptErrsubscriptùíüperturbùúΩ\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{perturb}}}(\\\\bm{\\\\theta}), and its performance on clean examples, referred to as natural error Errùíüclean‚Å°(ùúΩ)subscriptErrsubscriptùíücleanùúΩ\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{clean}}}(\\\\bm{\\\\theta}).\nIn [Figure6](https://ar5iv.org/html/2410.10373#S6.F6 \"In 6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a), the robust error of ùúΩSGD‚ÜíAT,tTsuperscriptsubscriptùúΩ‚ÜíSGDATùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}^{T} drops sharply after switching to AT at 180180180 epoch, matching that of full AT training, while the natural error only slightly spikes.\nAdditionally, we vary the switching point tùë°t to examine how the robustness of ùúΩSGD‚ÜíAT,tTsuperscriptsubscriptùúΩ‚ÜíSGDATùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}^{T} changes with the increasing proportion of AT epochs, i.e., (T‚àít)/Tùëáùë°ùëá(T-t)/T.\nIn [Figure6](https://ar5iv.org/html/2410.10373#S6.F6 \"In 6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (b), the robust error of ùúΩATTsuperscriptsubscriptùúΩATùëá\\\\bm{\\\\theta}\\_{\\\\textrm{AT}}^{T} is comparable to that of models trained entirely with AT (i.e., when (T‚àít)/T=1ùëáùë°ùëá1(T-t)/T=1) once the proportion of AT epochs exceeds 00.\nThese results together confirm that AT efficiently enhances the robustness of neural networks late in training.\n\n## 7 Conclusion and Limitations\n\nIn conclusion, we discovered an intriguing phenomenon that SAM efficiently selects flatter minima over SGD when applied late in training.\nWe provided a theoretical explanation for this by conducting a two-phase analysis of the learning dynamics after switching to SAM in the late training phase.\nOur results suggests that late training dynamics may play an important role if we want to understand the implicit bias of optimization algorithms.\nSince we extended our findings to AT with the switching method, a natural future direction is to generalize this novel approach to other optimization algorithms.\n\nLimitations.\nWe note that even if our theoretical setup closely reflects real settings, it still relies on several simplifications, such as assuming a constant perturbation radius œÅùúå\\\\rho and using squared loss.\nWe also note that our theory only explains the behaviour of SAM in the late training phase; it cannot account for the phenomena observed for early-phase SAM.\n\n## References\n\n- Achille et al. (2019)\nAlessandro Achille, Matteo Rovere, and Stefano Soatto.\n\nCritical learning periods in deep networks.\n\nIn _International Conference on Learning Representations_, 2019.\n\nURL [https://openreview.net/forum?id=BkeStsCcKQ](https://openreview.net/forum?id=BkeStsCcKQ \"\").\n\n- Agarwala & Dauphin (2023)\nAtish Agarwala and Yann Dauphin.\n\nSAM operates far from home: eigenvalue regularization as a dynamical phenomenon.\n\nIn Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett (eds.), _Proceedings of the 40th International Conference on Machine Learning_, volume 202 of _Proceedings of Machine Learning Research_, pp.  152‚Äì168. PMLR, 23‚Äì29 Jul 2023.\n\nURL [https://proceedings.mlr.press/v202/agarwala23a.html](https://proceedings.mlr.press/v202/agarwala23a.html \"\").\n\n- Ahn et al. (2023)\nKwangjun Ahn, Ali Jadbabaie, and Suvrit Sra.\n\nHow to escape sharp minima with random perturbations.\n\n_arXiv preprint arXiv:2305.15659_, 2023.\n\n- Andriushchenko & Flammarion (2022)\nMaksym Andriushchenko and Nicolas Flammarion.\n\nTowards understanding sharpness-aware minimization.\n\nIn Kamalika Chaudhuri, Stefanie Jegelka, Le Song, Csaba Szepesvari, Gang Niu, and Sivan Sabato (eds.), _Proceedings of the 39th International Conference on Machine Learning_, volume 162 of _Proceedings of Machine Learning Research_, pp.  639‚Äì668. PMLR, 17‚Äì23 Jul 2022.\n\nURL [https://proceedings.mlr.press/v162/andriushchenko22a.html](https://proceedings.mlr.press/v162/andriushchenko22a.html \"\").\n\n- Arora et al. (2022)\nSanjeev Arora, Zhiyuan Li, and Abhishek Panigrahi.\n\nUnderstanding gradient descent on the edge of stability in deep learning.\n\nIn _International Conference on Machine Learning_, pp.  948‚Äì1024. PMLR, 2022.\n\n- Bahri et al. (2022)\nDara Bahri, Hossein Mobahi, and Yi Tay.\n\nSharpness-aware minimization improves language model generalization.\n\nIn Smaranda Muresan, Preslav Nakov, and Aline Villavicencio (eds.), _Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)_, pp.  7360‚Äì7371, Dublin, Ireland, May 2022. Association for Computational Linguistics.\n\ndoi: 10.18653/v1/2022.acl-long.508.\n\nURL [https://aclanthology.org/2022.acl-long.508](https://aclanthology.org/2022.acl-long.508 \"\").\n\n- Bartlett et al. (2023)\nPeter L Bartlett, Philip M Long, and Olivier Bousquet.\n\nThe dynamics of sharpness-aware minimization: Bouncing across ravines and drifting towards wide minima.\n\n_Journal of Machine Learning Research_, 24(316):1‚Äì36, 2023.\n\n- Becker et al. (2024)\nMarlon Becker, Frederick Altrock, and Benjamin Risse.\n\nMomentum-sam: Sharpness aware minimization without computational overhead.\n\n_arXiv preprint arXiv:2401.12033_, 2024.\n\n- Behdin & Mazumder (2023)\nKayhan Behdin and Rahul Mazumder.\n\nOn statistical properties of sharpness-aware minimization: Provable guarantees.\n\n_arXiv preprint arXiv:2302.11836_, 2023.\n\n- Behdin et al. (2023)\nKayhan Behdin, Qingquan Song, Aman Gupta, Sathiya Keerthi, Ayan Acharya, Borja Ocejo, Gregory Dexter, Rajiv Khanna, David Durfee, and Rahul Mazumder.\n\nmsam: Micro-batch-averaged sharpness-aware minimization.\n\n_arXiv preprint arXiv:2302.09693_, 2023.\n\n- Blanc et al. (2020)\nGuy Blanc, Neha Gupta, Gregory Valiant, and Paul Valiant.\n\nImplicit regularization for deep neural networks driven by an Ornstein-Uhlenbeck like process.\n\nIn _Conference on learning theory_, pp.  483‚Äì513. PMLR, 2020.\n\n- Bubeck et al. (2015)\nS√©bastien Bubeck et al.\n\nConvex optimization: Algorithms and complexity.\n\n_Foundations and Trends¬Æ in Machine Learning_, 8(3-4):231‚Äì357, 2015.\n\n- Chen et al. (2022)\nXiangning Chen, Cho-Jui Hsieh, and Boqing Gong.\n\nWhen vision transformers outperform resnets without pre-training or strong data augmentations.\n\nIn _International Conference on Learning Representations_, 2022.\n\nURL [https://openreview.net/forum?id=LtKcMgGOeLt](https://openreview.net/forum?id=LtKcMgGOeLt \"\").\n\n- Cohen et al. (2021)\nJeremy Cohen, Simran Kaur, Yuanzhi Li, J Zico Kolter, and Ameet Talwalkar.\n\nGradient descent on neural networks typically occurs at the edge of stability.\n\nIn _International Conference on Learning Representations_, 2021.\n\nURL [https://openreview.net/forum?id=jh-rTtvkGeM](https://openreview.net/forum?id=jh-rTtvkGeM \"\").\n\n- Damian et al. (2021)\nAlex Damian, Tengyu Ma, and Jason D Lee.\n\nLabel noise SGD provably prefers flat global minimizers.\n\n_Advances in Neural Information Processing Systems_, 34:27449‚Äì27461, 2021.\n\n- DeVries (2017)\nTerrance DeVries.\n\nImproved regularization of convolutional neural networks with cutout.\n\n_arXiv preprint arXiv:1708.04552_, 2017.\n\n- Du et al. (2022)\nJiawei Du, Hanshu Yan, Jiashi Feng, Joey Tianyi Zhou, Liangli Zhen, Rick Siow Mong Goh, and Vincent Tan.\n\nEfficient sharpness-aware minimization for improved training of neural networks.\n\nIn _International Conference on Learning Representations_, 2022.\n\nURL [https://openreview.net/forum?id=n0OeTdNRG0Q](https://openreview.net/forum?id=n0OeTdNRG0Q \"\").\n\n- Feng & Tu (2021)\nYu Feng and Yuhai Tu.\n\nThe inverse variance‚Äìflatness relation in stochastic gradient descent is critical for finding flat minima.\n\n_Proceedings of the National Academy of Sciences_, 118(9):e2015617118, 2021.\n\n- Foret et al. (2021)\nPierre Foret, Ariel Kleiner, Hossein Mobahi, and Behnam Neyshabur.\n\nSharpness-aware minimization for efficiently improving generalization.\n\nIn _International Conference on Learning Representations_, 2021.\n\nURL [https://openreview.net/forum?id=6Tm1mposlrM](https://openreview.net/forum?id=6Tm1mposlrM \"\").\n\n- Frankle et al. (2020)\nJonathan Frankle, David J. Schwab, and Ari S. Morcos.\n\nThe early phase of neural network training.\n\nIn _International Conference on Learning Representations_, 2020.\n\nURL [https://openreview.net/forum?id=Hkl1iRNFwS](https://openreview.net/forum?id=Hkl1iRNFwS \"\").\n\n- Gatmiry et al. (2023)\nKhashayar Gatmiry, Zhiyuan Li, Ching-Yao Chuang, Sashank Reddi, Tengyu Ma, and Stefanie Jegelka.\n\nThe inductive bias of flatness regularization for deep matrix factorization.\n\n_arXiv preprint arXiv:2306.13239_, 2023.\n\n- He et al. (2016)\nKaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.\n\nDeep residual learning for image recognition.\n\nIn _2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)_, pp.  770‚Äì778, 2016.\n\ndoi: 10.1109/CVPR.2016.90.\n\n- Hochreiter & Schmidhuber (1997)\nSepp Hochreiter and J√ºrgen Schmidhuber.\n\nFlat Minima.\n\n_Neural Computation_, 9(1):1‚Äì42, 01 1997.\n\nISSN 0899-7667.\n\ndoi: 10.1162/neco.1997.9.1.1.\n\nURL [https://doi.org/10.1162/neco.1997.9.1.1](https://doi.org/10.1162/neco.1997.9.1.1 \"\").\n\n- Jastrzƒôbski et al. (2017)\nStanis≈Çaw Jastrzƒôbski, Zachary Kenton, Devansh Arpit, Nicolas Ballas, Asja Fischer, Yoshua Bengio, and Amos Storkey.\n\nThree factors influencing minima in sgd.\n\n_arXiv preprint arXiv:1711.04623_, 2017.\n\n- Jastrzebski et al. (2020)\nStanislaw Jastrzebski, Maciej Szymczak, Stanislav Fort, Devansh Arpit, Jacek Tabor, Kyunghyun Cho, and Krzysztof Geras.\n\nThe break-even point on optimization trajectories of deep neural networks.\n\n_arXiv preprint arXiv:2002.09572_, 2020.\n\n- Jiang et al. (2020)\nYiding Jiang, Behnam Neyshabur, Hossein Mobahi, Dilip Krishnan, and Samy Bengio.\n\nFantastic generalization measures and where to find them.\n\nIn _International Conference on Learning Representations_, 2020.\n\nURL [https://openreview.net/forum?id=SJgIPJBFvH](https://openreview.net/forum?id=SJgIPJBFvH \"\").\n\n- Kaddour et al. (2022)\nJean Kaddour, Linqing Liu, Ricardo Silva, and Matt Kusner.\n\nWhen do flat minima optimizers work?\n\nIn Alice H. Oh, Alekh Agarwal, Danielle Belgrave, and Kyunghyun Cho (eds.), _Advances in Neural Information Processing Systems_, 2022.\n\nURL [https://openreview.net/forum?id=vDeh2yxTvuh](https://openreview.net/forum?id=vDeh2yxTvuh \"\").\n\n- Karimi et al. (2016)\nHamed Karimi, Julie Nutini, and Mark Schmidt.\n\nLinear convergence of gradient and proximal-gradient methods under the polyak-≈Çojasiewicz condition.\n\nIn _Machine Learning and Knowledge Discovery in Databases: European Conference, ECML PKDD 2016, Riva del Garda, Italy, September 19-23, 2016, Proceedings, Part I 16_, pp.  795‚Äì811. Springer, 2016.\n\n- Keskar et al. (2017)\nNitish Shirish Keskar, Dheevatsa Mudigere, Jorge Nocedal, Mikhail Smelyanskiy, and Ping Tak Peter Tang.\n\nOn large-batch training for deep learning: Generalization gap and sharp minima.\n\nIn _International Conference on Learning Representations_, 2017.\n\nURL [https://openreview.net/forum?id=H1oyRlYgg](https://openreview.net/forum?id=H1oyRlYgg \"\").\n\n- Kim et al. (2023)\nHoki Kim, Jinseong Park, Yujin Choi, and Jaewook Lee.\n\nStability analysis of sharpness-aware minimization.\n\n_arXiv preprint arXiv:2301.06308_, 2023.\n\n- Kim et al. (2022)\nMinyoung Kim, Da Li, Shell X Hu, and Timothy Hospedales.\n\nFisher SAM: Information geometry and sharpness aware minimisation.\n\nIn Kamalika Chaudhuri, Stefanie Jegelka, Le Song, Csaba Szepesvari, Gang Niu, and Sivan Sabato (eds.), _Proceedings of the 39th International Conference on Machine Learning_, volume 162 of _Proceedings of Machine Learning Research_, pp.  11148‚Äì11161. PMLR, 17‚Äì23 Jul 2022.\n\nURL [https://proceedings.mlr.press/v162/kim22f.html](https://proceedings.mlr.press/v162/kim22f.html \"\").\n\n- Krizhevsky et al. (2009)\nAlex Krizhevsky, Geoffrey Hinton, et al.\n\nLearning multiple layers of features from tiny images.\n\n2009.\n\n- Kwon et al. (2021)\nJungmin Kwon, Jeongseop Kim, Hyunseo Park, and In Kwon Choi.\n\nAsam: Adaptive sharpness-aware minimization for scale-invariant learning of deep neural networks.\n\nIn Marina Meila and Tong Zhang (eds.), _Proceedings of the 38th International Conference on Machine Learning_, volume 139 of _Proceedings of Machine Learning Research_, pp.  5905‚Äì5914. PMLR, 18‚Äì24 Jul 2021.\n\nURL [https://proceedings.mlr.press/v139/kwon21b.html](https://proceedings.mlr.press/v139/kwon21b.html \"\").\n\n- Li et al. (2022)\nZhiyuan Li, Tianhao Wang, and Sanjeev Arora.\n\nWhat happens after SGD reaches zero loss?‚Äìa mathematical framework.\n\n_International Conference on Learning Representations_, 2022.\n\n- Liu et al. (2021)\nKangqiao Liu, Liu Ziyin, and Masahito Ueda.\n\nNoise and fluctuation of finite learning rate stochastic gradient descent.\n\nIn _International Conference on Machine Learning_, pp.  7045‚Äì7056. PMLR, 2021.\n\n- Liu et al. (2022)\nYong Liu, Siqi Mai, Xiangning Chen, Cho-Jui Hsieh, and Yang You.\n\nTowards efficient and scalable sharpness-aware minimization.\n\nIn _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  12360‚Äì12370, 2022.\n\n- Long & Bartlett (2024)\nPhilip M. Long and Peter L. Bartlett.\n\nSharpness-aware minimization and the edge of stability.\n\n_Journal of Machine Learning Research_, 25(179):1‚Äì20, 2024.\n\nURL [http://jmlr.org/papers/v25/23-1285.html](http://jmlr.org/papers/v25/23-1285.html \"\").\n\n- Lyu et al. (2022)\nKaifeng Lyu, Zhiyuan Li, and Sanjeev Arora.\n\nUnderstanding the generalization benefit of normalization layers: Sharpness reduction.\n\n_Advances in Neural Information Processing Systems_, 35:34689‚Äì34708, 2022.\n\n- Ma & Ying (2021)\nChao Ma and Lexing Ying.\n\nOn linear stability of SGD and input-smoothness of neural networks.\n\n_Advances in Neural Information Processing Systems_, 34:16805‚Äì16817, 2021.\n\n- Ma et al. (2022)\nChao Ma, Daniel Kunin, Lei Wu, and Lexing Ying.\n\nBeyond the quadratic approximation: the multiscale structure of neural network loss landscapes.\n\n_arXiv preprint arXiv:2204.11326_, 2022.\n\n- Madry et al. (2018)\nAleksander Madry, Aleksandar Makelov, Ludwig Schmidt, Dimitris Tsipras, and Adrian Vladu.\n\nTowards deep learning models resistant to adversarial attacks.\n\nIn _International Conference on Learning Representations_, 2018.\n\nURL [https://openreview.net/forum?id=rJzIBfZAb](https://openreview.net/forum?id=rJzIBfZAb \"\").\n\n- Monzio Compagnoni et al. (2023)\nEnea Monzio Compagnoni, Luca Biggio, Antonio Orvieto, Frank Norbert Proske, Hans Kersting, and Aurelien Lucchi.\n\nAn SDE for modeling SAM: Theory and insights.\n\nIn Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett (eds.), _Proceedings of the 40th International Conference on Machine Learning_, volume 202 of _Proceedings of Machine Learning Research_, pp.  25209‚Äì25253. PMLR, 23‚Äì29 Jul 2023.\n\nURL [https://proceedings.mlr.press/v202/monzio-compagnoni23a.html](https://proceedings.mlr.press/v202/monzio-compagnoni23a.html \"\").\n\n- Mori et al. (2022)\nTakashi Mori, Liu Ziyin, Kangqiao Liu, and Masahito Ueda.\n\nPower-law escape rate of sgd.\n\nIn _International Conference on Machine Learning_, pp.  15959‚Äì15975. PMLR, 2022.\n\n- Mueller et al. (2023)\nMaximilian Mueller, Tiffany Joyce Vlaar, David Rolnick, and Matthias Hein.\n\nNormalization layers are all that sharpness-aware minimization needs.\n\nIn _Thirty-seventh Conference on Neural Information Processing Systems_, 2023.\n\nURL [https://openreview.net/forum?id=lArwl3y9x6](https://openreview.net/forum?id=lArwl3y9x6 \"\").\n\n- Mulayoff et al. (2021)\nRotem Mulayoff, Tomer Michaeli, and Daniel Soudry.\n\nThe implicit bias of minima stability: A view from function space.\n\n_Advances in Neural Information Processing Systems_, 34:17749‚Äì17761, 2021.\n\n- Neyshabur et al. (2017)\nBehnam Neyshabur, Srinadh Bhojanapalli, David Mcallester, and Nati Srebro.\n\nExploring generalization in deep learning.\n\nIn I. Guyon, U. Von Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), _Advances in Neural Information Processing Systems_, volume 30. Curran Associates, Inc., 2017.\n\nURL [https://proceedings.neurips.cc/paper\\_files/paper/2017/file/10ce03a1ed01077e3e289f3e53c72813-Paper.pdf](https://proceedings.neurips.cc/paper_files/paper/2017/file/10ce03a1ed01077e3e289f3e53c72813-Paper.pdf \"\").\n\n- Shin et al. (2023)\nSungbin Shin, Dongyeop Lee, Maksym Andriushchenko, and Namhoon Lee.\n\nThe effects of overparameterization on sharpness-aware minimization: An empirical and theoretical analysis.\n\n_arXiv preprint arXiv:2311.17539_, 2023.\n\n- Si & Yun (2023)\nDongkuk Si and Chulhee Yun.\n\nPractical sharpness-aware minimization cannot converge all the way to optima.\n\nIn _Thirty-seventh Conference on Neural Information Processing Systems_, 2023.\n\nURL [https://openreview.net/forum?id=nijJN0LHqM](https://openreview.net/forum?id=nijJN0LHqM \"\").\n\n- Simonyan & Zisserman (2015)\nKaren Simonyan and Andrew Zisserman.\n\nVery deep convolutional networks for large-scale image recognition.\n\nIn Yoshua Bengio and Yann LeCun (eds.), _3rd International Conference on Learning Representations, ICLR 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings_, 2015.\n\nURL [http://arxiv.org/abs/1409.1556](http://arxiv.org/abs/1409.1556 \"\").\n\n- Strogatz (2000)\nSteven H. Strogatz.\n\n_Nonlinear Dynamics and Chaos: With Applications to Physics, Biology, Chemistry and Engineering_.\n\nWestview Press, 2000.\n\n- Szegedy et al. (2014)\nChristian Szegedy, Wojciech Zaremba, Ilya Sutskever, Joan Bruna, Dumitru Erhan, Ian Goodfellow, and Rob Fergus.\n\nIntriguing properties of neural networks.\n\nIn _International Conference on Learning Representations_, 2014.\n\n- Vardi (2023)\nGal Vardi.\n\nOn the implicit bias in deep-learning algorithms.\n\n_Commun. ACM_, 66(6):86‚Äì93, may 2023.\n\nISSN 0001-0782.\n\ndoi: 10.1145/3571070.\n\nURL [https://doi.org/10.1145/3571070](https://doi.org/10.1145/3571070 \"\").\n\n- Wen et al. (2023a)\nKaiyue Wen, Tengyu Ma, and Zhiyuan Li.\n\nHow sharpness-aware minimization minimizes sharpness?\n\nIn _The Eleventh International Conference on Learning Representations_, 2023a.\n\nURL [https://openreview.net/forum?id=5spDgWmpY6x](https://openreview.net/forum?id=5spDgWmpY6x \"\").\n\n- Wen et al. (2023b)\nKaiyue Wen, Tengyu Ma, and Zhiyuan Li.\n\nSharpness minimization algorithms do not only minimize sharpness to achieve better generalization.\n\n_Advances in Neural Information Processing Systems_, 2023b.\n\n- Wojtowytsch (2024)\nStephan Wojtowytsch.\n\nStochastic gradient descent with noise of machine learning type part ii: Continuous time analysis.\n\n_Journal of Nonlinear Science_, 34(1):16, 2024.\n\n- Wu et al. (2020a)\nDongxian Wu, Shu-Tao Xia, and Yisen Wang.\n\nAdversarial weight perturbation helps robust generalization.\n\nIn H. Larochelle, M. Ranzato, R. Hadsell, M.F. Balcan, and H. Lin (eds.), _Advances in Neural Information Processing Systems_, volume 33, pp.  2958‚Äì2969. Curran Associates, Inc., 2020a.\n\nURL [https://proceedings.neurips.cc/paper\\_files/paper/2020/file/1ef91c212e30e14bf125e9374262401f-Paper.pdf](https://proceedings.neurips.cc/paper_files/paper/2020/file/1ef91c212e30e14bf125e9374262401f-Paper.pdf \"\").\n\n- Wu et al. (2020b)\nJingfeng Wu, Wenqing Hu, Haoyi Xiong, Jun Huan, Vladimir Braverman, and Zhanxing Zhu.\n\nOn the noisy gradient descent that generalizes as sgd.\n\nIn _International Conference on Machine Learning_, pp.  10367‚Äì10376. PMLR, 2020b.\n\n- Wu & Su (2023)\nLei Wu and Weijie J Su.\n\nThe implicit regularization of dynamical stability in stochastic gradient descent.\n\nIn Andreas Krause, Emma Brunskill, Kyunghyun Cho, Barbara Engelhardt, Sivan Sabato, and Jonathan Scarlett (eds.), _Proceedings of the 40th International Conference on Machine Learning_, volume 202 of _Proceedings of Machine Learning Research_, pp.  37656‚Äì37684. PMLR, 23‚Äì29 Jul 2023.\n\nURL [https://proceedings.mlr.press/v202/wu23r.html](https://proceedings.mlr.press/v202/wu23r.html \"\").\n\n- Wu et al. (2018)\nLei Wu, Chao Ma, and Weinan E.\n\nHow sgd selects the global minima in over-parameterized learning: A dynamical stability perspective.\n\n_Advances in Neural Information Processing Systems_, 31, 2018.\n\n- Wu et al. (2022)\nLei Wu, Mingze Wang, and Weijie Su.\n\nThe alignment property of sgd noise and how it helps select flat minima: A stability analysis.\n\nIn S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh (eds.), _Advances in Neural Information Processing Systems_, volume 35, pp.  4680‚Äì4693. Curran Associates, Inc., 2022.\n\nURL [https://proceedings.neurips.cc/paper\\_files/paper/2022/file/1e55c38dd7d465c2526ae29d7ec85861-Paper-Conference.pdf](https://proceedings.neurips.cc/paper_files/paper/2022/file/1e55c38dd7d465c2526ae29d7ec85861-Paper-Conference.pdf \"\").\n\n- Zagoruyko & Komodakis (2016)\nSergey Zagoruyko and Nikos Komodakis.\n\nWide residual networks.\n\n_arXiv preprint arXiv:1605.07146_, 2016.\n\n- Zhang et al. (2017)\nChiyuan Zhang, Samy Bengio, Moritz Hardt, Benjamin Recht, and Oriol Vinyals.\n\nUnderstanding deep learning requires rethinking generalization.\n\nIn _International Conference on Learning Representations_, 2017.\n\nURL [https://openreview.net/forum?id=Sy8gdB9xx](https://openreview.net/forum?id=Sy8gdB9xx \"\").\n\n- Zhang et al. (2024)\nYihao Zhang, Hangzhou He, Jingyu Zhu, Huanran Chen, Yifei Wang, and Zeming Wei.\n\nOn the duality between sharpness-aware minimization and adversarial training.\n\n_arXiv preprint arXiv:2402.15152_, 2024.\n\n- Zhu et al. (2018)\nZhanxing Zhu, Jingfeng Wu, Bing Yu, Lei Wu, and Jinwen Ma.\n\nThe anisotropic noise in stochastic gradient descent: Its behavior of escaping from sharp minima and regularization effects.\n\n_arXiv preprint arXiv:1803.00195_, 2018.\n\n- Zhuang et al. (2022)\nJuntang Zhuang, Boqing Gong, Liangzhe Yuan, Yin Cui, Hartwig Adam, Nicha C Dvornek, sekhar tatikonda, James s Duncan, and Ting Liu.\n\nSurrogate gap minimization improves sharpness-aware training.\n\nIn _International Conference on Learning Representations_, 2022.\n\nURL [https://openreview.net/forum?id=edONMAnhLu-](https://openreview.net/forum?id=edONMAnhLu- \"\").\n\n\n## Appendix A More Experimental Details and Results\n\n### A.1 Detailed Experimental Settings\n\nIn this subsection, we introduce the detailed experimental settings.\n\nIn this work, we mainly compare the training dynamics of SAM and SGD.\nIn fact, SAM and SGD share almost identical training settings, with the only difference lies in that SAM introduces an extra hyper-parameter, perturbation radius œÅùúå\\\\rho.\nTherefore, we first outline the basic training settings for training with SGD across different network architectures and datasets.\n\nVGG-16 and ResNet-20 on the CIFAR-10 dataset.\nWe train the VGG-16 (Simonyan & Zisserman, [2015](https://ar5iv.org/html/2410.10373#bib.bib49 \"\")) and the ResNet-20 architecture (He et al., [2016](https://ar5iv.org/html/2410.10373#bib.bib22 \"\")) on\nthe CIFAR-10 dataset (Krizhevsky et al., [2009](https://ar5iv.org/html/2410.10373#bib.bib32 \"\")), using standard data\naugmentation and hyperparameters as in the original papers (Simonyan & Zisserman, [2015](https://ar5iv.org/html/2410.10373#bib.bib49 \"\"); He et al., [2016](https://ar5iv.org/html/2410.10373#bib.bib22 \"\")).\nData augmentation techniques include random horizontal flips and random\n32√ó32323232\\\\times 32 pixel crops.\nA weight decay of 5√ó10‚àí45superscript1045\\\\times 10^{-4} is applied, and the momentum for gradient update is set to 0.90.90.9.\nThe learning rate is initialized at 0.10.10.1 and is dropped by 101010 times at epoch 808080777Note that in the original paper, the learning rate is reduced by a factor of 101010 at epoch 120120120 as well.\nHowever, based on our theory in [Section5.1](https://ar5iv.org/html/2410.10373#S5.SS1 \"5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the learning rate affects the solution sharpness (see [Table2](https://ar5iv.org/html/2410.10373#S5.T2 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")).\nTo fairly compare the sharpness of solutions found by the switching method, which switches at different epochs, we remove the learning rate decay during the late phase of training.\nThe same applies for other architectures and datasets.\n.\nThe total number of training epochs is 160160160.\n\nWideResNet-16-8 on the CIFAR-10 dataset, and WideResNet-28-10 on the CIFAR-100 dataset.\nWe train the WideResNet-16-8 architecture (Zagoruyko & Komodakis, [2016](https://ar5iv.org/html/2410.10373#bib.bib61 \"\")) on the CIFAR-10 dataset and the WideResNet-28-10 architecture (He et al., [2016](https://ar5iv.org/html/2410.10373#bib.bib22 \"\")) on\nthe CIFAR-100 dataset (Krizhevsky et al., [2009](https://ar5iv.org/html/2410.10373#bib.bib32 \"\")), using standard data\naugmentation and hyperparameters as in the original papers (Zagoruyko & Komodakis, [2016](https://ar5iv.org/html/2410.10373#bib.bib61 \"\")).\nData augmentation techniques include random horizontal flips, random\n32√ó32323232\\\\times 32 pixel crop, and cutout regularization (DeVries, [2017](https://ar5iv.org/html/2410.10373#bib.bib16 \"\")).\nA weight decay of 5√ó10‚àí45superscript1045\\\\times 10^{-4} is applied, and the momentum for gradient update is set to 0.90.90.9.\nThe learning rate is initialized at 0.10.10.1 and is dropped by 555 times at 606060 and 120120120 epochs.\nThe total number of training epochs is 200200200.\n\nThen, we specify the extra hyper-parameter for SAM, i.e., the perturbation radius œÅùúå\\\\rho.\n\nAdditional setup for SAM and ASAM.\nFor SAM, the perturbation radius is set to 0.050.050.05 across all architectures and datasets, as recommended by Foret et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib19 \"\")).\nIn [SectionA.4](https://ar5iv.org/html/2410.10373#A1.SS4 \"A.4 More Experiments on Early-Phase SAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), our findings on SAM generalize to another SAM variant, ASAM (Kwon et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib33 \"\")).\nFor ASAM, the perturbation radius is set to 2.02.02.0, as recommended by Kwon et al. ( [2021](https://ar5iv.org/html/2410.10373#bib.bib33 \"\")).\n\nIn [Section6](https://ar5iv.org/html/2410.10373#S6 \"6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we also extend our findings to Adversarial Training (AT).\nAT shares almost the same settings as SGD as well, except that AT trains neural networks on adversarial examples generated from the original images.\nHere, we specify the additional settings for creating adversarial examples.\n\nAdditional setup for AT.\nWe considered untargeted PGD attack (Madry et al., [2018](https://ar5iv.org/html/2410.10373#bib.bib41 \"\")) to generate adversarial examples ùíôAdvsuperscriptùíôAdv\\\\bm{x}^{\\\\textrm{Adv}} from the original image ùíôùíô\\\\bm{x}, with the constraint that ‚à•ùíôAdv‚àíùíô‚à•‚àû‚â§œµsubscriptdelimited-‚à•‚à•superscriptùíôAdvùíôitalic-œµ\\\\left\\\\lVert\\\\bm{x}^{\\\\textrm{Adv}}-\\\\bm{x}\\\\right\\\\rVert\\_{\\\\infty}\\\\leq\\\\epsilon, where ‚à•‚ãÖ‚à•‚àûsubscriptdelimited-‚à•‚à•‚ãÖ\\\\left\\\\lVert\\\\cdot\\\\right\\\\rVert\\_{\\\\infty} denotes the L‚àûsuperscriptùêøL^{\\\\infty} norm.\nFollowing the standard configurations of Madry et al. ( [2018](https://ar5iv.org/html/2410.10373#bib.bib41 \"\")), we set the perturbation limit œµitalic-œµ\\\\epsilon to 4/25542554/255 and the step size for PGD attack to 2/25522552/255.\n\n### A.2 More Experiments on Late-Phase SAM\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x7.png)Figure 7: Additional experiments: the impact of SAM training proportion on generalization/sharpness when switches from SGD to SAM.\nThe generalization gap between the models ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}(top row) / the sharpness of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}(bottom row) vs. the SAM training proportion of ùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}.\nùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t} refers to the model obtained by switching from SGD to SAM, while ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} represents the model trained entirely with SAM.\nHere, TùëáT is the total number of training epochs, and tùë°t is the switching point.\nWe define SAM training proportion of ùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t} as (T‚àít)/Tùëáùë°ùëá(T-t)/T and adjust it by varying tùë°t while keeping TùëáT fixed.\nDots represent the mean over five trials with different random seeds, and error bars indicate standard deviations.\n\nIn this subsection, we provide more experimental results to demonstrate the effect of SAM on generalization and sharpness when applied during the late phase of training.\nIn [Figure7](https://ar5iv.org/html/2410.10373#A1.F7 \"In A.2 More Experiments on Late-Phase SAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we include more experiment results for ResNet-20 and VGG-16 on the CIFAR-10 datasets.\nSimilar to our results in [Figure3](https://ar5iv.org/html/2410.10373#S4.F3 \"In 4 SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the generalization gap between ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} drops to zero once the SAM training proportion is greater than 00.\nA similar trend is observed in the sharpness of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}.\nThese results further confirms our main discovery that SAM efficiently finds flatter minima over SGD late in training.\n\n### A.3 Extended Experiments on ASAM\n\nIn this subsection, we generalize our findings on SAM to another SAM variant, ASAM (Kwon et al., [2021](https://ar5iv.org/html/2410.10373#bib.bib33 \"\")).\nSimilar to SAM, we find that applying ASAM during the late training phase, after initial training with SGD, achieves generalization ability and solution sharpness comparable to full ASAM training.\nStill, we apply the switching method to investigate the effect of the late-phase ASAM accross various architectures and datasets.\nWe use the switching method, which switches from SGD to ASAM, to obtain the model ùúΩSGD‚ÜíASAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDASAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{ASAM},t}^{T}.\nWe also train a baseline model, i.e., ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}.\nWe vary the switching point tùë°t while keep TùëáT fixed to adjust the proportion of ASAM training and study its impact on the generalization gap between ùúΩASAMTsuperscriptsubscriptùúΩASAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{ASAM}}^{T} and ùúΩSGD‚ÜíASAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDASAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{ASAM},t}^{T}, as well as the sharpness of ùúΩSGD‚ÜíASAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDASAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{ASAM},t}^{T}.\nAs shown in [Figure8](https://ar5iv.org/html/2410.10373#A1.F8 \"In A.3 Extended Experiments on ASAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), both the generalization gap and the sharpness drops once the ASAM training proportion exceeds zero, implying that ASAM, even when applied only during the last few epochs, achieves comparable generalization performance and solution sharpness as training entirely with ASAM.\nThese results further highlight the importance of studying the implicit bias of different optimization algorithms towards the end of training.\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x8.png)Figure 8: The impact of ASAM training proportion on generalization/sharpness when switches from SGD to ASAM.\nThe generalization gap between the models ùúΩSGD‚ÜíASAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDASAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{ASAM},t}^{T} and ùúΩASAMTsuperscriptsubscriptùúΩASAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{ASAM}}^{T}(top row) / the sharpness of ùúΩSGD‚ÜíASAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDASAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{ASAM},t}^{T}(bottom row) vs. the ASAM training proportion of ùúΩSGD‚ÜíASAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDASAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{ASAM},t}.\nùúΩSGD‚ÜíASAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDASAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{ASAM},t} refers to the model obtained by switching from SGD to ASAM, while ùúΩASAMTsuperscriptsubscriptùúΩASAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{ASAM}}^{T} represents the model trained entirely with ASAM.\nHere, TùëáT is the total number of training epochs, and tùë°t is the switching point.\nWe define ASAM training proportion of ùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t} as (T‚àít)/Tùëáùë°ùëá(T-t)/T and adjust it by varying tùë°t while keeping TùëáT fixed.\nDots represent the mean over three trials with different random seeds, and error bars indicate standard deviations.\n\n### A.4 More Experiments on Early-Phase SAM\n\nIn this subsection, we provide more experimental results to demonstrate the effect of SAM on generalization and sharpness when applied during the early phase of training.\nIn [Figure9](https://ar5iv.org/html/2410.10373#A1.F9 \"In A.4 More Experiments on Early-Phase SAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we include more experiment results for ResNet-20 and VGG-16 on the CIFAR-10 datasets.\nSimilar to our results in [Figure5](https://ar5iv.org/html/2410.10373#S6.F5 \"In 6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the generalization gap between ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} remains substantial until the SAM training proportion exceeds 0.60.60.6.\nThe same applies for the the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}.\nThese results further validate that applying SAM only during the early phase offers limited improvements on generalization and sharpness of the final solution compared to full SAM training.\n\n![Refer to caption](https://ar5iv.org/html/2410.10373/assets/x9.png)Figure 9: Additional experiments: the impact of SAM training proportion on generalization/sharpness when switches from SAM to SGD.\nThe generalization gap between the models ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}(top row)/the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}(bottom row) vs. the SAM training proportion of ùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}.\nùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t} refers to the model obtained by switching from SAM to SGD, while ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} represents the model trained entirely with SAM.\nHere, TùëáT is the total number of training epochs, and tùë°t is the switching point.\nWe define SAM training proportion of ùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t} as t/Tùë°ùëát/T and adjust it by varying tùë°t while keeping TùëáT fixed.\nDots represent the mean over five trials with different random seeds, and error bars indicate standard deviations.\n\n## Appendix B Proofs in Section [5](https://ar5iv.org/html/2410.10373\\#S5 \"5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")\n\nIn our theoretical analysis of Stochastic SAM, defined in [Equation4](https://ar5iv.org/html/2410.10373#S3.E4 \"In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we adopt the technical simplification in Appendix C.2 of Andriushchenko & Flammarion ( [2022](https://ar5iv.org/html/2410.10373#bib.bib4 \"\")), which assume that the inner noise and outer noise are independent.\nSpecifically, we analyze the following variant of [Equation4](https://ar5iv.org/html/2410.10373#S3.E4 \"In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùúΩt+1=ùúΩt‚àíŒ∑‚Äã‚ÑíŒæt2‚Äã(ùúΩt+œÅ‚Äã‚àá‚ÑíŒæt1‚Äã(ùúΩt))subscriptùúΩùë°1subscriptùúΩùë°ùúÇsubscript‚Ñísuperscriptsubscriptùúâùë°2subscriptùúΩùë°ùúå‚àásubscript‚Ñísuperscriptsubscriptùúâùë°1subscriptùúΩùë°\\\\displaystyle\\\\bm{\\\\theta}\\_{t+1}=\\\\bm{\\\\theta}\\_{t}-\\\\eta\\\\mathcal{L}\\_{\\\\xi\\_{t}^{2}}(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{1}}(\\\\bm{\\\\theta}\\_{t})) |  | (6) |\n\nwhere Œæt1superscriptsubscriptùúâùë°1\\\\xi\\_{t}^{1} and Œæt2superscriptsubscriptùúâùë°2\\\\xi\\_{t}^{2} are two independent stochastic mini-batches of data of size BùêµB.\n\n### B.1 Proof of Theorem [5.1](https://ar5iv.org/html/2410.10373\\#S5.Thmtheorem1 \"Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") and [5.2](https://ar5iv.org/html/2410.10373\\#S5.Thmtheorem2 \"Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")\n\nFor simplicity, we denote the two-step update rules of SAM defined in [Equation6](https://ar5iv.org/html/2410.10373#A2.E6 \"In Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùúΩt+1/2=ùúΩt+œÅ‚Äã‚àá‚ÑíŒæt1‚Äã(ùúΩt),subscriptùúΩùë°12subscriptùúΩùë°ùúå‚àásubscript‚Ñísuperscriptsubscriptùúâùë°1subscriptùúΩùë°\\\\displaystyle\\\\bm{\\\\theta}\\_{t+1/2}=\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{1}}(\\\\bm{\\\\theta}\\_{t}), |  |\n|  | ùúΩt+1=ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚ÑíŒæt2‚Äã(ùúΩt+1/2).subscriptùúΩùë°1subscriptùúΩùë°12ùúÇ‚àásubscript‚Ñísuperscriptsubscriptùúâùë°2subscriptùúΩùë°12\\\\displaystyle\\\\bm{\\\\theta}\\_{t+1}=\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{2}}(\\\\bm{\\\\theta}\\_{t+1/2}). |  |\n\nFor BùêµB-batch gradient noise, denoted by ùùÉB‚Äã(ùúΩ)superscriptùùÉùêµùúΩ\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}), we have:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîº‚Äã\\[ùùÉB‚Äã(ùúΩ)‚ÄãùùÉB‚Äã(ùúΩ)‚ä§\\]=1B‚Äãùîº‚Äã\\[ùùÉ‚Äã(ùúΩ)‚ÄãùùÉ‚Äã(ùúΩ)‚ä§\\]=1B‚ÄãŒ£‚Äã(ùúΩ),ùîºdelimited-\\[\\]superscriptùùÉùêµùúΩsuperscriptùùÉùêµsuperscriptùúΩtop1ùêµùîºdelimited-\\[\\]ùùÉùúΩùùÉsuperscriptùúΩtop1ùêµŒ£ùúΩ\\\\displaystyle\\\\mathbb{E}\\[\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta})\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta})^{\\\\top}\\]=\\\\frac{1}{B}\\\\mathbb{E}\\[\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\bm{\\\\xi}(\\\\bm{\\\\theta})^{\\\\top}\\]=\\\\frac{1}{B}\\\\Sigma(\\\\bm{\\\\theta}), |  | (7) |\n\nwhere ùùÉ‚Äã(ùúΩ)ùùÉùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta}) is the 1-batch gradient noise, used in Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nFor the linearized model ( [Equation5](https://ar5iv.org/html/2410.10373#S5.E5 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), it holds that:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚Ñí‚Äã(ùúΩ)=12‚Äã(ùúΩ‚àíùúΩ‚ãÜ)‚ä§‚ÄãH‚Äã(ùúΩ‚ãÜ)‚Äã(ùúΩ‚àíùúΩ‚ãÜ).‚ÑíùúΩ12superscriptùúΩsuperscriptùúΩ‚ãÜtopùêªsuperscriptùúΩ‚ãÜùúΩsuperscriptùúΩ‚ãÜ\\\\displaystyle\\\\mathcal{L}(\\\\bm{\\\\theta})=\\\\frac{1}{2}(\\\\bm{\\\\theta}-\\\\bm{\\\\theta}^{\\\\star})^{\\\\top}H(\\\\bm{\\\\theta}^{\\\\star})(\\\\bm{\\\\theta}-\\\\bm{\\\\theta}^{\\\\star}). |  |\n\nWithout loss of generality, we can let ùúΩ‚ãÜ=0superscriptùúΩ‚ãÜ0\\\\bm{\\\\theta}^{\\\\star}=0.\nFor simplicity, we denote G:=H‚Äã(ùúΩ‚ãÜ)assignùê∫ùêªsuperscriptùúΩ‚ãÜG:=H(\\\\bm{\\\\theta}^{\\\\star}).\n\nNext, according to the definition of linear stability (Definition [5.1](https://ar5iv.org/html/2410.10373#S5.Thmdefinition1 \"Definition 5.1 (Loss-based linear stability of SAM). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), we consider the dynamics of stochastic SAM on the linearized model.\n\nFirst, we have the following estimate for ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°1\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})\\\\right\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°1\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})\\\\right\\] |  |\n|  | =\\\\displaystyle= | 12‚Äãùîº‚Äã\\[(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚ÑíŒæt2‚Äã(ùúΩt+1/2))‚ä§‚ÄãG‚Äã(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚ÑíŒæt2‚Äã(ùúΩt+1/2))\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°12ùúÇ‚àásubscript‚Ñísuperscriptsubscriptùúâùë°2subscriptùúΩùë°12topùê∫subscriptùúΩùë°12ùúÇ‚àásubscript‚Ñísuperscriptsubscriptùúâùë°2subscriptùúΩùë°12\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{2}}(\\\\bm{\\\\theta}\\_{t+1/2}))^{\\\\top}G(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{2}}(\\\\bm{\\\\theta}\\_{t+1/2}))\\\\right\\] |  |\n|  | =\\\\displaystyle= | 12‚Äãùîº‚Äã\\[(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(ùúΩt+1/2)‚àíŒ∑‚ÄãùùÉB‚Äã(ùúΩt+1/2))‚ä§‚ÄãG‚Äã(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(ùúΩt+1/2)‚àíŒ∑‚ÄãùùÉB‚Äã(ùúΩt+1/2))\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°12ùúÇ‚àá‚ÑísubscriptùúΩùë°12ùúÇsuperscriptùùÉùêµsubscriptùúΩùë°12topùê∫subscriptùúΩùë°12ùúÇ‚àá‚ÑísubscriptùúΩùë°12ùúÇsuperscriptùùÉùêµsubscriptùúΩùë°12\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})-\\\\eta\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t+1/2}))^{\\\\top}G(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})-\\\\eta\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t+1/2}))\\\\right\\] |  |\n|  | =\\\\displaystyle= | 12ùîº\\[(ùúΩt+1/2‚àíŒ∑‚àá‚Ñí(ùúΩt+1/2)‚ä§G(ùúΩt+1/2‚àíŒ∑‚àá‚Ñí(ùúΩt+1/2)\\]+0\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})^{\\\\top}G(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\]+0 |  |\n|  |  | +12‚ÄãŒ∑2‚Äãùîº‚Äã\\[ùùÉB‚Äã(ùúΩt+1/2)‚ä§‚ÄãG‚ÄãùùÉB‚Äã(ùúΩt+1/2)\\]12superscriptùúÇ2ùîºdelimited-\\[\\]superscriptùùÉùêµsuperscriptsubscriptùúΩùë°12topùê∫superscriptùùÉùêµsubscriptùúΩùë°12\\\\displaystyle+\\\\frac{1}{2}\\\\eta^{2}\\\\mathbb{E}\\\\left\\[{\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t+1/2})}^{\\\\top}G\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\] |  |\n|  | =([7](https://ar5iv.org/html/2410.10373#A2.E7 \"Equation 7 ‚Ä£ B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([7](https://ar5iv.org/html/2410.10373#A2.E7 \"Equation 7 ‚Ä£ B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: linear: batch noise})}}{=} | 12ùîº\\[(ùúΩt+1/2‚àíŒ∑‚àá‚Ñí(ùúΩt+1/2)‚ä§G(ùúΩt+1/2‚àíŒ∑‚àá‚Ñí(ùúΩt+1/2)\\]+Œ∑22‚ÄãBùîº\\[Tr(Œ£(ùúΩt+1/2)G))\\]\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})^{\\\\top}G(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\]+\\\\frac{\\\\eta^{2}}{2B}\\\\mathbb{E}\\\\left\\[\\\\operatorname{Tr}\\\\left(\\\\Sigma(\\\\bm{\\\\theta}\\_{t+1/2})G)\\\\right)\\\\right\\] |  |\n|  |  | ‚â•Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")‚Äã0+Œ∑2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]=Œ∑2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\].Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")0superscriptùúÇ2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12superscriptùúÇ2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\displaystyle\\\\overset{\\\\text{Assumption~{}\\\\ref{ass:noise}}}{\\\\geq}0+\\\\frac{\\\\eta^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\]=\\\\frac{\\\\eta^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\]. |  |\n\nThen we estimate the lower bound for ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\] |  |\n|  | =\\\\displaystyle= | 12‚Äãùîº‚Äã\\[(ùúΩt‚àíœÅ‚Äã‚àá‚ÑíŒæt1‚Äã(ùúΩt))‚ä§‚ÄãG‚Äã(ùúΩt+œÅ‚Äã‚àá‚ÑíŒæt1‚Äã(ùúΩt))\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°ùúå‚àásubscript‚Ñísuperscriptsubscriptùúâùë°1subscriptùúΩùë°topùê∫subscriptùúΩùë°ùúå‚àásubscript‚Ñísuperscriptsubscriptùúâùë°1subscriptùúΩùë°\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t}-\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{1}}(\\\\bm{\\\\theta}\\_{t}))^{\\\\top}G(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{1}}(\\\\bm{\\\\theta}\\_{t}))\\\\right\\] |  |\n|  | =\\\\displaystyle= | 12‚Äãùîº‚Äã\\[(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)+œÅ‚ÄãùùÉB‚Äã(ùúΩt))‚ä§‚ÄãG‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)+œÅ‚ÄãùùÉB‚Äã(ùúΩt))\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°ùúåsuperscriptùùÉùêµsubscriptùúΩùë°topùê∫subscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°ùúåsuperscriptùùÉùêµsubscriptùúΩùë°\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})+\\\\rho\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t}))^{\\\\top}G(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})+\\\\rho\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t}))\\\\right\\] |  |\n|  | =\\\\displaystyle= | 12‚Äãùîº‚Äã\\[(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))‚ä§‚ÄãG‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))\\]+12‚ÄãœÅ2‚Äãùîº‚Äã\\[ùùÉB‚Äã(ùúΩt)‚ä§‚ÄãG‚ÄãùùÉB‚Äã(ùúΩt)\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°topùê∫subscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°12superscriptùúå2ùîºdelimited-\\[\\]superscriptùùÉùêµsuperscriptsubscriptùúΩùë°topùê∫superscriptùùÉùêµsubscriptùúΩùë°\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}))^{\\\\top}G(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}))\\\\right\\]+\\\\frac{1}{2}\\\\rho^{2}\\\\mathbb{E}\\\\left\\[{\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t})}^{\\\\top}G\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n|  | =([7](https://ar5iv.org/html/2410.10373#A2.E7 \"Equation 7 ‚Ä£ B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([7](https://ar5iv.org/html/2410.10373#A2.E7 \"Equation 7 ‚Ä£ B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: linear: batch noise})}}{=} | 12‚Äãùîº‚Äã\\[(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))‚ä§‚ÄãG‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))\\]+œÅ22‚ÄãB‚Äãùîº‚Äã\\[Tr‚Å°(Œ£‚Äã(ùúΩt)‚ÄãG)\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°topùê∫subscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°superscriptùúå22ùêµùîºdelimited-\\[\\]TrŒ£subscriptùúΩùë°ùê∫\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}))^{\\\\top}G(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}))\\\\right\\]+\\\\frac{\\\\rho^{2}}{2B}\\\\mathbb{E}\\\\left\\[\\\\operatorname{Tr}\\\\left(\\\\Sigma(\\\\bm{\\\\theta}\\_{t})G\\\\right)\\\\right\\] |  |\n|  | ‚â•Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")Assumption [5.1](https://ar5iv.org/html/2410.10373#S5.Thmassumption1 \"Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")\\\\displaystyle\\\\overset{\\\\text{Assumption~{}\\\\ref{ass:noise}}}{\\\\geq} | 12‚Äãùîº‚Äã\\[(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))‚ä§‚ÄãG‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))\\]+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°topùê∫subscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}))^{\\\\top}G(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}))\\\\right\\]+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n|  | =\\\\displaystyle= | 12‚Äãùîº‚Äã\\[ùúΩt‚ä§‚Äã(I+œÅ‚ÄãG)‚ÄãG‚Äã(I+œÅ‚ÄãG)‚ÄãùúΩt\\]+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°topùêºùúåùê∫ùê∫ùêºùúåùê∫subscriptùúΩùë°superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[\\\\bm{\\\\theta}\\_{t}^{\\\\top}(I+\\\\rho G)G(I+\\\\rho G)\\\\bm{\\\\theta}\\_{t}\\\\right\\]+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n|  | ‚â•(I+œÅ‚ÄãG)‚ÄãG‚Äã(I+œÅ‚ÄãG)‚™∞Gsucceeds-or-equalsùêºùúåùê∫ùê∫ùêºùúåùê∫ùê∫\\\\displaystyle\\\\overset{(I+\\\\rho G)G(I+\\\\rho G)\\\\succeq G}{\\\\geq} | 12‚Äãùîº‚Äã\\[ùúΩt‚ä§‚ÄãG‚ÄãùúΩt\\]+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]12ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°topùê∫subscriptùúΩùë°superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\frac{1}{2}\\\\mathbb{E}\\\\left\\[\\\\bm{\\\\theta}\\_{t}^{\\\\top}G\\\\bm{\\\\theta}\\_{t}\\\\right\\]+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n|  | =\\\\displaystyle= | (1+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\].1superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\]. |  |\n\nBy combining these two estimates, we obtain:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1)\\]‚â•Œ∑2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äã(1+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°1superscriptùúÇ2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµ1superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})\\\\right\\]\\\\geq\\\\frac{\\\\eta^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n\nHence, if ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is linear stable for stochastic SAM, it must hold:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œ∑2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äã(1+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B)‚â§1,superscriptùúÇ2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµ1superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµ1\\\\displaystyle\\\\frac{\\\\eta^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\right)\\\\leq 1, |  | (8) |\n\nwhich completes the proof of Theorem [5.1](https://ar5iv.org/html/2410.10373#S5.Thmtheorem1 \"Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nFurthermore, if the condition ( [8](https://ar5iv.org/html/2410.10373#A2.E8 \"Equation 8 ‚Ä£ B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) can not be satisfied, i.e., Œ∑2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äã(1+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B)>1superscriptùúÇ2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµ1superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµ1\\\\frac{\\\\eta^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\right)>1, then the exponentially fast escape holds:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]‚â•Ct‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩ0)\\],ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°superscriptùê∂ùë°ùîºdelimited-\\[\\]‚ÑísubscriptùúΩ0\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\]\\\\geq C^{t}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0})\\\\right\\], |  |\n\nwhere C=Œ∑2‚ÄãŒ≥‚Äã‚à•G‚à•F2B‚Äã(1+œÅ2‚ÄãŒ≥‚Äã‚à•G‚à•F2B)>1ùê∂superscriptùúÇ2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµ1superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùêπ2ùêµ1C=\\\\frac{\\\\eta^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma\\\\left\\\\lVert G\\\\right\\\\rVert\\_{F}^{2}}{B}\\\\right)>1. This complete the proof of Theorem [5.2](https://ar5iv.org/html/2410.10373#S5.Thmtheorem2 \"Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\n### B.2 Proof of Proposition [5.1](https://ar5iv.org/html/2410.10373\\#S5.Thmproposition1 \"Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")\n\nAs we mentioned in Section [5.2](https://ar5iv.org/html/2410.10373#S5.SS2 \"5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), this proposition focus on a model size of p=1ùëù1p=1 and consider the full-batch SAM, i.e., Œ∏t+1=Œ∏t‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(Œ∏t+œÅ‚Äã‚àá‚Ñí‚Äã(Œ∏t))subscriptùúÉùë°1subscriptùúÉùë°ùúÇ‚àá‚ÑísubscriptùúÉùë°ùúå‚àá‚ÑísubscriptùúÉùë°\\\\theta\\_{t+1}=\\\\theta\\_{t}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\theta\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\theta\\_{t})).\n\n###### Proof of Proposition [5.1](https://ar5iv.org/html/2410.10373\\#S5.Thmproposition1 \"Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nFirst, we define the hitting time:\n\n|     |     |     |\n| --- | --- | --- |\n|  | T:=inf{t‚àà‚Ñï:\\|Œ∏t+1\\|‚â•b}.assignùëáinfimumconditional-setùë°‚ÑïsubscriptùúÉùë°1ùëè\\\\displaystyle T:=\\\\inf\\\\left\\\\{t\\\\in\\\\mathbb{N}:\\|\\\\theta\\_{t+1}\\|\\\\geq b\\\\right\\\\}. |  |\n\nWe aim to prove that TùëáT does not exists, which implies that Œ∏t‚àà(‚àíb,b)‚ààVbsubscriptùúÉùë°ùëèùëèsubscriptùëâùëè\\\\theta\\_{t}\\\\in(-b,b)\\\\in V\\_{b} holds for all t‚àà‚Ñïùë°‚Ñït\\\\in\\\\mathbb{N}.\n\nAssuming TùëáT exists, then one of the following three cases must hold:\n\n- ‚Ä¢\n\n\nCase I: Œ∏T=0subscriptùúÉùëá0\\\\theta\\_{T}=0. In this case, ‚Ñí‚Ä≤‚Äã(Œ∏T)=0superscript‚Ñí‚Ä≤subscriptùúÉùëá0\\\\mathcal{L}^{\\\\prime}(\\\\theta\\_{T})=0, which implies that Œ∏T+1=0subscriptùúÉùëá10\\\\theta\\_{T+1}=0. This contradicts the definition of TùëáT.\n\n- ‚Ä¢\n\n\nCase II: 0<Œ∏T<b0subscriptùúÉùëáùëè0<\\\\theta\\_{T}<b.\nBy the sub-quadratic property and œÅ‚â§1/aùúå1ùëé\\\\rho\\\\leq 1/a, for the inner update Œ∏T+1/2:=Œ∏T+œÅ‚Äã‚Ñí‚Ä≤‚Äã(Œ∏T)assignsubscriptùúÉùëá12subscriptùúÉùëáùúåsuperscript‚Ñí‚Ä≤subscriptùúÉùëá\\\\theta\\_{T+1/2}:=\\\\theta\\_{T}+\\\\rho\\\\mathcal{L}^{\\\\prime}(\\\\theta\\_{T}), we have:\n\n\n\n|     |     |     |\n| --- | --- | --- |\n|  | 0<Œ∏T<Œ∏T+1/2=Œ∏T+œÅ‚Äã‚à´0Œ∏T‚Ñí‚Ä≤‚Ä≤‚Äã(z)‚Äãd‚Äãz<Œ∏T+œÅ‚Äãa‚ÄãŒ∏T‚â§2‚ÄãŒ∏T<2‚Äãb.0subscriptùúÉùëásubscriptùúÉùëá12subscriptùúÉùëáùúåsuperscriptsubscript0subscriptùúÉùëásuperscript‚Ñí‚Ä≤‚Ä≤ùëßdùëßsubscriptùúÉùëáùúåùëésubscriptùúÉùëá2subscriptùúÉùëá2ùëè\\\\displaystyle 0<\\\\theta\\_{T}<\\\\theta\\_{T+1/2}=\\\\theta\\_{T}+\\\\rho\\\\int\\_{0}^{\\\\theta\\_{T}}\\\\mathcal{L}^{\\\\prime\\\\prime}(z){\\\\textnormal{d}}z<\\\\theta\\_{T}+\\\\rho a\\\\theta\\_{T}\\\\leq 2\\\\theta\\_{T}<2b. |  |\n\n\n\nConsequently, we have the two-sided bound for Œ∏T+1subscriptùúÉùëá1\\\\theta\\_{T+1}:\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œ∏T+1=subscriptùúÉùëá1absent\\\\displaystyle\\\\theta\\_{T+1}= | Œ∏T+1/2‚àíŒ∑‚Äã‚Ñí‚Ä≤‚Äã(Œ∏T+1/2)>Œ∏T+1/2‚àíŒ∑‚Äãsupz‚àà(0,2‚Äãb)‚Ñí‚Ä≤‚Äã(z)subscriptùúÉùëá12ùúÇsuperscript‚Ñí‚Ä≤subscriptùúÉùëá12subscriptùúÉùëá12ùúÇsubscriptsupremumùëß02ùëèsuperscript‚Ñí‚Ä≤ùëß\\\\displaystyle\\\\theta\\_{T+1/2}-\\\\eta\\\\mathcal{L}^{\\\\prime}(\\\\theta\\_{T+1/2})>\\\\theta\\_{T+1/2}-\\\\eta\\\\sup\\_{z\\\\in(0,2b)}\\\\mathcal{L}^{\\\\prime}(z) |  |\n|  | ‚â•\\\\displaystyle\\\\geq | 0‚àíŒ∑‚Äãmaxz‚àà(‚àí2‚Äãb,2‚Äãb)‚Å°‚Ñí‚Ä≤‚Äã(z)‚â•‚àíb;0ùúÇsubscriptùëß2ùëè2ùëèsuperscript‚Ñí‚Ä≤ùëßùëè\\\\displaystyle 0-\\\\eta\\\\max\\_{z\\\\in(-2b,2b)}\\\\mathcal{L}^{\\\\prime}(z)\\\\geq-b; |  |\n|  | Œ∏T+1=subscriptùúÉùëá1absent\\\\displaystyle\\\\theta\\_{T+1}= | Œ∏T+œÅ‚Äã‚Ñí‚Ä≤‚Äã(Œ∏T)‚àíŒ∑‚Äã‚Ñí‚Ä≤‚Äã(Œ∏T+1/2)subscriptùúÉùëáùúåsuperscript‚Ñí‚Ä≤subscriptùúÉùëáùúÇsuperscript‚Ñí‚Ä≤subscriptùúÉùëá12\\\\displaystyle\\\\theta\\_{T}+\\\\rho\\\\mathcal{L}^{\\\\prime}(\\\\theta\\_{T})-\\\\eta\\\\mathcal{L}^{\\\\prime}(\\\\theta\\_{T+1/2}) |  |\n|  | <\\\\displaystyle< | Œ∏T+Œ∑‚Äã‚Ñí‚Ä≤‚Äã(Œ∏T+1/2)‚àíŒ∑‚Äã‚Ñí‚Ä≤‚Äã(Œ∏T+1/2)=Œ∏T<b.subscriptùúÉùëáùúÇsuperscript‚Ñí‚Ä≤subscriptùúÉùëá12ùúÇsuperscript‚Ñí‚Ä≤subscriptùúÉùëá12subscriptùúÉùëáùëè\\\\displaystyle\\\\theta\\_{T}+\\\\eta\\\\mathcal{L}^{\\\\prime}(\\\\theta\\_{T+1/2})-\\\\eta\\\\mathcal{L}^{\\\\prime}(\\\\theta\\_{T+1/2})=\\\\theta\\_{T}<b. |  |\n\n\n\nThen we have \\|Œ∏T+1\\|<bsubscriptùúÉùëá1ùëè\\|\\\\theta\\_{T+1}\\|<b, which contradicts the definition of TùëáT.\n\n- ‚Ä¢\n\n\nCase III: ‚àíb<Œ∏T<0ùëèsubscriptùúÉùëá0-b<\\\\theta\\_{T}<0. The proof for this case is extremely similar to the proof for Case II. This case is also contradicts the definition of TùëáT.\n\n\nThus, we have proved that TùëáT does not exist, which implies that Œ∏T+1=0subscriptùúÉùëá10\\\\theta\\_{T+1}=0.\n‚àé\n\nThe next result provides an example for the highly sub-quadratic landscape.\nIntuitively, it means that the decay of ‚Ñí‚Ä≤‚Ä≤‚Äã(\\|z\\|)superscript‚Ñí‚Ä≤‚Ä≤ùëß\\\\mathcal{L}^{\\\\prime\\\\prime}(\\|z\\|) is extremely fast.\n\n###### Example B.1(highly sub-quadratic landscape).\n\nLet ‚Ñí‚Äã(0)=‚Ñí‚Ä≤‚Äã(0)=0‚Ñí0superscript‚Ñí‚Ä≤00\\\\mathcal{L}(0)=\\\\mathcal{L}^{\\\\prime}(0)=0, ‚Ñí‚Ä≤‚Ä≤‚Äã(0)=asuperscript‚Ñí‚Ä≤‚Ä≤0ùëé\\\\mathcal{L}^{\\\\prime\\\\prime}(0)=a, and\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚Ñí‚Ä≤‚Ä≤‚Äã(z)={a‚àí\\|z\\|œµ,\\|z\\|<a‚Äãœµ0,else in \\[‚àí2‚Äãb,2‚Äãb\\],superscript‚Ñí‚Ä≤‚Ä≤ùëßcasesùëéùëßitalic-œµùëßùëéitalic-œµ0else in \\[‚àí2b,2b\\]\\\\mathcal{L}^{\\\\prime\\\\prime}(z)=\\\\begin{cases}a-\\\\frac{\\|z\\|}{\\\\epsilon},&\\|z\\|<a\\\\epsilon\\\\\\<br>0,&\\\\text{else in $\\[-2b,2b\\]$}\\\\end{cases}, |  |\n\nwhere 0<œµ‚â™10italic-œµmuch-less-than10<\\\\epsilon\\\\ll 1 is a constant to reflect the sub-quadratic degree.\n\nNotice that this example satisfies Definition [5.2](https://ar5iv.org/html/2410.10373#S5.Thmdefinition2 \"Definition 5.2 (Sub-quadratic landscape for ùëù=1). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"). Moreover, it is straightforward that\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚Ñí‚Ä≤‚Äã(z)={z‚Äã(a‚àí\\|z\\|2‚Äãœµ),\\|z\\|<a‚Äãœµa‚Äãœµ2,else in \\[‚àí2‚Äãb,2‚Äãb\\].superscript‚Ñí‚Ä≤ùëßcasesùëßùëéùëß2italic-œµùëßùëéitalic-œµùëéitalic-œµ2else in \\[‚àí2b,2b\\]\\\\displaystyle\\\\mathcal{L}^{\\\\prime}(z)=\\\\begin{cases}z\\\\left(a-\\\\frac{\\|z\\|}{2\\\\epsilon}\\\\right),&\\|z\\|<a\\\\epsilon\\\\\\<br>\\\\frac{a\\\\epsilon}{2},&\\\\text{else in $\\[-2b,2b\\]$}\\\\end{cases}. |  |\n\nAdditionally, we can calculate the upper bounds for Œ∑ùúÇ\\\\eta and œÅùúå\\\\rho in Proposition [5.1](https://ar5iv.org/html/2410.10373#S5.Thmproposition1 \"Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"):\n\n|     |     |     |\n| --- | --- | --- |\n|  | Œ∑‚â§min\\|z\\|‚â§2‚Äãb‚Å°b\\|‚Ñí‚Ä≤‚Äã(z)\\|=2‚Äãbœµ‚Äãa,ùúÇsubscriptùëß2ùëèùëèsuperscript‚Ñí‚Ä≤ùëß2ùëèitalic-œµùëé\\\\displaystyle\\\\eta\\\\leq\\\\min\\_{\\|z\\|\\\\leq 2b}\\\\frac{b}{\\|\\\\mathcal{L}^{\\\\prime}(z)\\|}=\\\\frac{2b}{\\\\epsilon a}, |  |\n|  | œÅ‚â§min‚Å°{1a,min\\|z\\|‚â§b‚Å°\\|‚Ñí‚Ä≤‚Äã(2‚Äãz)‚Ñí‚Ä≤‚Äã(z)\\|}=min‚Å°{1a,2}.ùúå1ùëésubscriptùëßùëèsuperscript‚Ñí‚Ä≤2ùëßsuperscript‚Ñí‚Ä≤ùëß1ùëé2\\\\displaystyle\\\\rho\\\\leq\\\\min\\\\left\\\\{\\\\frac{1}{a},\\\\min\\_{\\|z\\|\\\\leq b}\\\\left\\|\\\\frac{\\\\mathcal{L}^{\\\\prime}(2z)}{\\\\mathcal{L}^{\\\\prime}(z)}\\\\right\\|\\\\right\\\\}=\\\\min\\\\left\\\\{\\\\frac{1}{a},2\\\\right\\\\}. |  |\n\nOne can see that in the highly sub-quadratic case, i.e., 0<œµ‚â™10italic-œµmuch-less-than10<\\\\epsilon\\\\ll 1, the upper bound for Œ∑ùúÇ\\\\eta goes to +‚àû+\\\\infty.\n\nIn addition, we prove [PropositionB.1](https://ar5iv.org/html/2410.10373#A2.Thmproposition1 \"Proposition B.1 (Non-local escape behaviour under a quadratic landscape.). ‚Ä£ B.2 Proof of Proposition 5.1 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), which illustrates that SAM will escape the current valley under a quadratic landscape.\nThis result stands in stark contrast to [Proposition5.1](https://ar5iv.org/html/2410.10373#S5.Thmproposition1 \"Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") for sub-quadratic landscape, which further confirms our adaptation of the sub-quadratic landscape.\n\n###### Proposition B.1(Non-local escape behaviour under a quadratic landscape.).\n\nAssume the landscape in the valley Vb=(‚àí2‚Äãb,2‚Äãb)subscriptùëâùëè2ùëè2ùëèV\\_{b}=(-2b,2b) be quadratic, i.e., ‚Ñí‚Äã(z)=a‚Äãz2/2‚Ñíùëßùëésuperscriptùëß22\\\\mathcal{L}(z)=az^{2}/2.\nThen, for all initialization Œ∏0‚ààVb\\{0}subscriptùúÉ0\\subscriptùëâùëè0\\\\theta\\_{0}\\\\in V\\_{b}\\\\backslash\\\\{0\\\\}, and Œ∑,œÅùúÇùúå\\\\eta,\\\\rho s.t. Œ∑>2a‚Äã(1+a‚ÄãœÅ)ùúÇ2ùëé1ùëéùúå\\\\eta>\\\\frac{2}{a(1+a\\\\rho)}, full-batch SAM will escape from the valley VbsubscriptùëâùëèV\\_{b}, i.e., there exists T>0ùëá0T>0 s.t. Œ∏T‚àâVbsubscriptùúÉùëásubscriptùëâùëè\\\\theta\\_{T}\\\\notin V\\_{b}.\n\n###### Proof of Proposition [B.1](https://ar5iv.org/html/2410.10373\\#A2.Thmproposition1 \"Proposition B.1 (Non-local escape behaviour under a quadratic landscape.). ‚Ä£ B.2 Proof of Proposition 5.1 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nBy a straightforward calculation, we have\n\n|     |     |     |\n| --- | --- | --- |\n|  | Œ∏t+1=Œ∏t‚àíŒ∑‚Äãa‚Äã(Œ∏t+œÅ‚ãÖa‚ÄãŒ∏t)=(1‚àíŒ∑‚Äãa‚Äã(1+a‚ÄãœÅ))‚ÄãŒ∏t.subscriptùúÉùë°1subscriptùúÉùë°ùúÇùëésubscriptùúÉùë°‚ãÖùúåùëésubscriptùúÉùë°1ùúÇùëé1ùëéùúåsubscriptùúÉùë°\\\\displaystyle\\\\theta\\_{t+1}=\\\\theta\\_{t}-\\\\eta a\\\\left(\\\\theta\\_{t}+\\\\rho\\\\cdot a\\\\theta\\_{t}\\\\right)=(1-\\\\eta a(1+a\\\\rho))\\\\theta\\_{t}. |  |\n\nIf Œ∑>2a‚Äã(1+a‚ÄãœÅ)ùúÇ2ùëé1ùëéùúå\\\\eta>\\\\frac{2}{a(1+a\\\\rho)}, then \\|Œ∏t\\|‚â•\\|1‚àíŒ∑‚Äãa‚Äã(1+a‚ÄãœÅ)\\|t‚Äã\\|Œ∏0\\|subscriptùúÉùë°superscript1ùúÇùëé1ùëéùúåùë°subscriptùúÉ0\\|\\\\theta\\_{t}\\|\\\\geq\\|1-\\\\eta a(1+a\\\\rho)\\|^{t}\\|\\\\theta\\_{0}\\|,\nwhere \\|1‚àíŒ∑‚Äãa‚Äã(1+a‚ÄãœÅ)\\|>11ùúÇùëé1ùëéùúå1\\|1-\\\\eta a(1+a\\\\rho)\\|>1.\nThis means that there exists T>0ùëá0T>0 s.t. Œ∏T‚àâVbsubscriptùúÉùëásubscriptùëâùëè\\\\theta\\_{T}\\\\notin V\\_{b}.\n‚àé\n\n### B.3 Proof of Theorem [5.3](https://ar5iv.org/html/2410.10373\\#S5.Thmtheorem3 \"Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")\n\nFor simplicity, we denote the two-step update rules of SAM defined in [Equation6](https://ar5iv.org/html/2410.10373#A2.E6 \"In Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùúΩt+1/2=ùúΩt+œÅ‚Äã‚àá‚ÑíŒæt1‚Äã(ùúΩt),subscriptùúΩùë°12subscriptùúΩùë°ùúå‚àásubscript‚Ñísuperscriptsubscriptùúâùë°1subscriptùúΩùë°\\\\displaystyle\\\\bm{\\\\theta}\\_{t+1/2}=\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{1}}(\\\\bm{\\\\theta}\\_{t}), |  |\n|  | ùúΩt+1=ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚ÑíŒæt2‚Äã(ùúΩt+1/2).subscriptùúΩùë°1subscriptùúΩùë°12ùúÇ‚àásubscript‚Ñísuperscriptsubscriptùúâùë°2subscriptùúΩùë°12\\\\displaystyle\\\\bm{\\\\theta}\\_{t+1}=\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{2}}(\\\\bm{\\\\theta}\\_{t+1/2}). |  |\n\nThen we list a few useful properties under the condition of Theorem [5.3](https://ar5iv.org/html/2410.10373#S5.Thmtheorem3 \"Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\n###### Lemma B.1.\n\nSuppose Assumption [5.2](https://ar5iv.org/html/2410.10373#S5.Thmassumption2 \"Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"). Then we have:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 2‚ÄãŒº‚Äã‚Ñí‚Äã(ùúΩ)‚â§‚à•‚àá‚Ñí‚Äã(ùúΩ)‚à•2‚â§2‚ÄãL2Œº‚Äã‚Ñí‚Äã(ùúΩ),‚àÄùúΩ.formulae-sequence2ùúá‚ÑíùúΩsuperscriptdelimited-‚à•‚à•‚àá‚ÑíùúΩ22superscriptùêø2ùúá‚ÑíùúΩfor-allùúΩ\\\\displaystyle 2\\\\mu\\\\mathcal{L}(\\\\bm{\\\\theta})\\\\leq\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\\\leq\\\\frac{2L^{2}}{\\\\mu}\\\\mathcal{L}(\\\\bm{\\\\theta}),\\ \\\\forall\\\\bm{\\\\theta}. |  | (9) |\n\n###### Proof of Lemma [B.1](https://ar5iv.org/html/2410.10373\\#A2.Thmlemma1 \"Lemma B.1. ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nThe upper bound is a direct corollary of PL and smoothness. Please refer to Lemma B.6 in Arora et al. ( [2022](https://ar5iv.org/html/2410.10373#bib.bib5 \"\")) and Lemma 5 in Ahn et al. ( [2023](https://ar5iv.org/html/2410.10373#bib.bib3 \"\")) for proof details.\n‚àé\n\nThe smoothness in Assumption [5.2](https://ar5iv.org/html/2410.10373#S5.Thmassumption2 \"Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") also implies the classical quadratic upper bound for the loss (Bubeck et al., [2015](https://ar5iv.org/html/2410.10373#bib.bib12 \"\")):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñí‚Äã(ùúΩ+ùíó)‚â§‚Ñí‚Äã(ùúΩ)+‚ü®‚àá‚Ñí‚Äã(ùúΩ),ùíó‚ü©+L2‚Äã‚à•ùíó‚à•2,‚àÄùúΩ,ùíó.‚ÑíùúΩùíó‚ÑíùúΩ‚àá‚ÑíùúΩùíóùêø2superscriptdelimited-‚à•‚à•ùíó2for-allùúΩùíó\\\\mathcal{L}(\\\\bm{\\\\theta}+\\\\bm{v})\\\\leq\\\\mathcal{L}(\\\\bm{\\\\theta})+\\\\left\\\\langle\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}),\\\\bm{v}\\\\right\\\\rangle+\\\\frac{L}{2}\\\\left\\\\lVert\\\\bm{v}\\\\right\\\\rVert^{2},\\ \\\\forall\\\\bm{\\\\theta},\\\\bm{v}. |  | (10) |\n\nAdditionally, Assumption [5.3](https://ar5iv.org/html/2410.10373#S5.Thmassumption3 \"Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") holds for the gradient noise ùùÉ‚Äã(ùúΩ)ùùÉùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta}) with batch size 1.\nThus, for BùêµB-batch gradient noise, denoted by ùùÉB‚Äã(ùúΩ)superscriptùùÉùêµùúΩ\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}), we have ùîº‚Äã\\[ùùÉB‚Äã(ùúΩ)‚ÄãùùÉB‚Äã(ùúΩ)‚ä§\\]=1B‚Äãùîº‚Äã\\[ùùÉ‚Äã(ùúΩ)‚ÄãùùÉ‚Äã(ùúΩ)‚ä§\\]ùîºdelimited-\\[\\]superscriptùùÉùêµùúΩsuperscriptùùÉùêµsuperscriptùúΩtop1ùêµùîºdelimited-\\[\\]ùùÉùúΩùùÉsuperscriptùúΩtop\\\\mathbb{E}\\[\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta})\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta})^{\\\\top}\\]=\\\\frac{1}{B}\\\\mathbb{E}\\[\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\bm{\\\\xi}(\\\\bm{\\\\theta})^{\\\\top}\\], implying:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîº‚Äã\\[‚à•ùùÉB‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2B‚Äã‚Ñí‚Äã(ùúΩ),‚àÄùúΩ.ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•superscriptùùÉùêµùúΩ2superscriptùúé2ùêµ‚ÑíùúΩfor-allùúΩ\\\\mathbb{E}\\\\left\\[\\\\left\\\\lVert\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\\\right\\]\\\\leq\\\\frac{\\\\sigma^{2}}{B}\\\\mathcal{L}(\\\\bm{\\\\theta}),\\ \\\\forall\\\\bm{\\\\theta}. |  | (11) |\n\nFor the learning rate Œ∑ùúÇ\\\\eta and the permutation radius œÅùúå\\\\rho, we choose then as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œ∑‚â§min‚Å°{1L,Œº‚ÄãB2‚ÄãL‚ÄãœÉ2},œÅ‚â§min‚Å°{1L,Œº‚ÄãB4‚ÄãL‚ÄãœÉ2,Œ∑‚ÄãŒº224‚ÄãL2}.formulae-sequenceùúÇ1ùêøùúáùêµ2ùêøsuperscriptùúé2ùúå1ùêøùúáùêµ4ùêøsuperscriptùúé2ùúÇsuperscriptùúá224superscriptùêø2\\\\eta\\\\leq\\\\min\\\\left\\\\{\\\\frac{1}{L},\\\\frac{\\\\mu B}{2L\\\\sigma^{2}}\\\\right\\\\},\\\\quad\\\\rho\\\\leq\\\\min\\\\left\\\\{\\\\frac{1}{L},\\\\frac{\\\\mu B}{4L\\\\sigma^{2}},\\\\frac{\\\\eta\\\\mu^{2}}{24L^{2}}\\\\right\\\\}. |  | (12) |\n\n#### B.3.1 Proof of Theorem [5.3](https://ar5iv.org/html/2410.10373\\#S5.Thmtheorem3 \"Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")\n\nFor ‚Ñí‚Äã(ùúΩt+1)‚ÑísubscriptùúΩùë°1\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1}), it has the quadratic upper bound:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  | ‚Ñí‚Äã(ùúΩt+1)=‚Ñí‚Äã(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚ÑíŒæt2‚Äã(ùúΩt+1/2))=‚Ñí‚Äã(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(ùúΩt+1/2)‚àíŒ∑‚ÄãùùÉB‚Äã(ùúΩt+1/2))‚ÑísubscriptùúΩùë°1‚ÑísubscriptùúΩùë°12ùúÇ‚àásubscript‚Ñísuperscriptsubscriptùúâùë°2subscriptùúΩùë°12‚ÑísubscriptùúΩùë°12ùúÇ‚àá‚ÑísubscriptùúΩùë°12ùúÇsuperscriptùùÉùêµsubscriptùúΩùë°12\\\\displaystyle\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})=\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{2}}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right)=\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})-\\\\eta\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right) |  |\n|  | ‚â§([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: quadratic bound})}}{\\\\leq} | ‚Ñí‚Äã(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(ùúΩt+1/2))‚àí‚ü®‚àá‚Ñí‚Äã(ùúΩt+1/2+Œ∑‚Äã‚àá‚Ñí‚Äã(ùúΩt+1/2)),Œ∑‚ÄãùùÉ‚Äã(ùúΩt+1/2)‚ü©‚ÑísubscriptùúΩùë°12ùúÇ‚àá‚ÑísubscriptùúΩùë°12‚àá‚ÑísubscriptùúΩùë°12ùúÇ‚àá‚ÑísubscriptùúΩùë°12ùúÇùùÉsubscriptùúΩùë°12\\\\displaystyle\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right)-\\\\left\\\\langle\\\\nabla\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t+1/2}+\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right),\\\\eta\\\\bm{\\\\xi}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\\\rangle |  |\n|  |  | +Œ∑2‚ÄãL2‚Äã‚à•ùùÉB‚Äã(ùúΩt+1/2)‚à•22.superscriptùúÇ2ùêø2superscriptsubscriptdelimited-‚à•‚à•superscriptùùÉùêµsubscriptùúΩùë°1222\\\\displaystyle+\\\\frac{\\\\eta^{2}L}{2}\\\\left\\\\lVert\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\\\rVert\\_{2}^{2}. |  |\n\nTaking the expectation, we obtain the upper bound of ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°1\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1)\\]‚â§ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(ùúΩt+1/2))\\]+Œ∑2‚ÄãL2‚Äãùîº‚Äã\\[‚à•ùùÉB‚Äã(ùúΩt+1/2)‚à•2\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°1ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12ùúÇ‚àá‚ÑísubscriptùúΩùë°12superscriptùúÇ2ùêø2ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•superscriptùùÉùêµsubscriptùúΩùë°122\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})\\\\right\\]\\\\leq\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right)\\\\right\\]+\\\\frac{\\\\eta^{2}L}{2}\\\\mathbb{E}\\\\left\\[\\\\left\\\\lVert\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\\\rVert^{2}\\\\right\\] |  |\n|  | ‚â§([11](https://ar5iv.org/html/2410.10373#A2.E11 \"Equation 11 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([11](https://ar5iv.org/html/2410.10373#A2.E11 \"Equation 11 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: noise magnitude})}}{\\\\leq} | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(ùúΩt+1/2))\\]+Œ∑2‚ÄãL2‚ÄãœÉ2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12ùúÇ‚àá‚ÑísubscriptùúΩùë°12superscriptùúÇ2ùêø2superscriptùúé2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t+1/2}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right)\\\\right\\]+\\\\frac{\\\\eta^{2}L}{2}\\\\frac{\\\\sigma^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\] |  |\n|  | ‚â§([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: quadratic bound})}}{\\\\leq} | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)‚àíŒ∑‚Äã‚à•‚àá‚Ñí‚Äã(ùúΩt+1/2)‚à•2+Œ∑2‚ÄãL2‚Äã‚à•‚àá‚Ñí‚Äã(ùúΩt+1/2)‚à•2\\]+Œ∑2‚ÄãL2‚ÄãœÉ2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12ùúÇsuperscriptdelimited-‚à•‚à•‚àá‚ÑísubscriptùúΩùë°122superscriptùúÇ2ùêø2superscriptdelimited-‚à•‚à•‚àá‚ÑísubscriptùúΩùë°122superscriptùúÇ2ùêø2superscriptùúé2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t+1/2}\\\\right)-\\\\eta\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\\\rVert^{2}+\\\\frac{\\\\eta^{2}L}{2}\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\\\rVert^{2}\\\\right\\]+\\\\frac{\\\\eta^{2}L}{2}\\\\frac{\\\\sigma^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\] |  |\n|  | ‚â§([9](https://ar5iv.org/html/2410.10373#A2.E9 \"Equation 9 ‚Ä£ Lemma B.1. ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([9](https://ar5iv.org/html/2410.10373#A2.E9 \"Equation 9 ‚Ä£ Lemma B.1. ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: PL})}}{\\\\leq} | (1‚àíŒ∑‚Äã(2‚àíŒ∑‚ÄãL)‚ÄãŒº+Œ∑2‚ÄãL‚ÄãœÉ22‚ÄãB)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]1ùúÇ2ùúÇùêøùúásuperscriptùúÇ2ùêøsuperscriptùúé22ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\displaystyle\\\\left(1-\\\\eta(2-\\\\eta L)\\\\mu+\\\\frac{\\\\eta^{2}L\\\\sigma^{2}}{2B}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\] |  |\n|  | ‚â§([12](https://ar5iv.org/html/2410.10373#A2.E12 \"Equation 12 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([12](https://ar5iv.org/html/2410.10373#A2.E12 \"Equation 12 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: eta})}}{\\\\leq} | (1‚àí3‚ÄãŒ∑‚ÄãŒº4)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\].13ùúÇùúá4ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\displaystyle\\\\left(1-\\\\frac{3\\\\eta\\\\mu}{4}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\]. |  |\n\nIn the similar way, for ‚Ñí‚Äã(ùúΩt+1/2)‚ÑísubscriptùúΩùë°12\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2}), it has the quadratic upper bound:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  | ‚Ñí‚Äã(ùúΩt+1/2)=‚Ñí‚Äã(ùúΩt+œÅ‚Äã‚àá‚ÑíŒæt1‚Äã(ùúΩt))=‚Ñí‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)+œÅ‚ÄãùùÉB‚Äã(ùúΩt))‚ÑísubscriptùúΩùë°12‚ÑísubscriptùúΩùë°ùúå‚àásubscript‚Ñísuperscriptsubscriptùúâùë°1subscriptùúΩùë°‚ÑísubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°ùúåsuperscriptùùÉùêµsubscriptùúΩùë°\\\\displaystyle\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})=\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}^{1}}(\\\\bm{\\\\theta}\\_{t})\\\\right)=\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})+\\\\rho\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t})\\\\right) |  |\n|  | ‚â§([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: quadratic bound})}}{\\\\leq} | ‚Ñí‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))+‚ü®‚àá‚Ñí‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)),œÅ‚ÄãùùÉ‚Äã(ùúΩt)‚ü©+œÅ2‚ÄãL2‚Äã‚à•ùùÉB‚Äã(ùúΩt)‚à•22.‚ÑísubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°‚àá‚ÑísubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°ùúåùùÉsubscriptùúΩùë°superscriptùúå2ùêø2superscriptsubscriptdelimited-‚à•‚à•superscriptùùÉùêµsubscriptùúΩùë°22\\\\displaystyle\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right)+\\\\left\\\\langle\\\\nabla\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right),\\\\rho\\\\bm{\\\\xi}(\\\\bm{\\\\theta}\\_{t})\\\\right\\\\rangle+\\\\frac{\\\\rho^{2}L}{2}\\\\left\\\\lVert\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t})\\\\right\\\\rVert\\_{2}^{2}. |  |\n\nTaking the expectation, we obtain the upper bound of ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]‚â§ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))\\]+œÅ2‚ÄãL2‚Äãùîº‚Äã\\[‚à•ùùÉB‚Äã(ùúΩt)‚à•2\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°superscriptùúå2ùêø2ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•superscriptùùÉùêµsubscriptùúΩùë°2\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\]\\\\leq\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right)\\\\right\\]+\\\\frac{\\\\rho^{2}L}{2}\\\\mathbb{E}\\\\left\\[\\\\left\\\\lVert\\\\bm{\\\\xi}^{B}(\\\\bm{\\\\theta}\\_{t})\\\\right\\\\rVert^{2}\\\\right\\] |  |\n|  | ‚â§([11](https://ar5iv.org/html/2410.10373#A2.E11 \"Equation 11 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([11](https://ar5iv.org/html/2410.10373#A2.E11 \"Equation 11 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: noise magnitude})}}{\\\\leq} | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt))\\]+œÅ2‚ÄãL2‚ÄãœÉ2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°superscriptùúå2ùêø2superscriptùúé2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right)\\\\right\\]+\\\\frac{\\\\rho^{2}L}{2}\\\\frac{\\\\sigma^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n|  | ‚â§([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([10](https://ar5iv.org/html/2410.10373#A2.E10 \"Equation 10 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: quadratic bound})}}{\\\\leq} | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)+œÅ‚Äã‚à•‚àá‚Ñí‚Äã(ùúΩt)‚à•2+œÅ2‚ÄãL2‚Äã‚à•‚àá‚Ñí‚Äã(ùúΩt)‚à•2\\]+œÅ2‚ÄãL2‚ÄãœÉ2B‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°ùúåsuperscriptdelimited-‚à•‚à•‚àá‚ÑísubscriptùúΩùë°2superscriptùúå2ùêø2superscriptdelimited-‚à•‚à•‚àá‚ÑísubscriptùúΩùë°2superscriptùúå2ùêø2superscriptùúé2ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}\\\\left(\\\\bm{\\\\theta}\\_{t}\\\\right)+\\\\rho\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\\\rVert^{2}+\\\\frac{\\\\rho^{2}L}{2}\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\\\rVert^{2}\\\\right\\]+\\\\frac{\\\\rho^{2}L}{2}\\\\frac{\\\\sigma^{2}}{B}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n|  | ‚â§([9](https://ar5iv.org/html/2410.10373#A2.E9 \"Equation 9 ‚Ä£ Lemma B.1. ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([9](https://ar5iv.org/html/2410.10373#A2.E9 \"Equation 9 ‚Ä£ Lemma B.1. ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: PL})}}{\\\\leq} | (1+œÅ‚Äã(2+œÅ‚ÄãL)‚ÄãL2Œº+œÅ2‚ÄãL‚ÄãœÉ22‚ÄãB)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]1ùúå2ùúåùêøsuperscriptùêø2ùúásuperscriptùúå2ùêøsuperscriptùúé22ùêµùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\left(1+\\\\frac{\\\\rho(2+\\\\rho L)L^{2}}{\\\\mu}+\\\\frac{\\\\rho^{2}L\\\\sigma^{2}}{2B}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\] |  |\n|  | ‚â§([12](https://ar5iv.org/html/2410.10373#A2.E12 \"Equation 12 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))([12](https://ar5iv.org/html/2410.10373#A2.E12 \"Equation 12 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))\\\\displaystyle\\\\overset{\\\\text{(\\\\ref{proof: equ: eta})}}{\\\\leq} | (1+6‚ÄãœÅ‚ÄãL2Œº)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\].16ùúåsuperscriptùêø2ùúáùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\left(1+\\\\frac{6\\\\rho L^{2}}{\\\\mu}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\]. |  |\n\nFinally, by combining our estimates for ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°1\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})\\\\right\\] and ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\], we obtain:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1)\\]‚â§(1‚àí3‚ÄãŒ∑‚ÄãŒº4)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt+1/2)\\]ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°113ùúÇùúá4ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°12\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1})\\\\right\\]\\\\leq\\\\left(1-\\\\frac{3\\\\eta\\\\mu}{4}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t+1/2})\\\\right\\] |  |\n|  | ‚â§\\\\displaystyle\\\\leq | (1‚àí3‚ÄãŒ∑‚ÄãŒº4)‚Äã(1+6‚ÄãœÅ‚ÄãL2Œº)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]‚Äã‚â§([12](https://ar5iv.org/html/2410.10373#A2.E12 \"Equation 12 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))‚Äã(1‚àíŒ∑‚ÄãŒº2)‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\],13ùúÇùúá416ùúåsuperscriptùêø2ùúáùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°([12](https://ar5iv.org/html/2410.10373#A2.E12 \"Equation 12 ‚Ä£ B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"))1ùúÇùúá2ùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°\\\\displaystyle\\\\left(1-\\\\frac{3\\\\eta\\\\mu}{4}\\\\right)\\\\left(1+\\\\frac{6\\\\rho L^{2}}{\\\\mu}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\]\\\\overset{\\\\text{(\\\\ref{proof: equ: eta})}}{\\\\leq}\\\\left(1-\\\\frac{\\\\eta\\\\mu}{2}\\\\right)\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\], |  |\n\nwhich implies the convergence rate:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]‚â§(1‚àíŒ∑‚ÄãŒº2)t‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩ0)\\],‚àÄt‚àà‚Ñï.formulae-sequenceùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°superscript1ùúÇùúá2ùë°ùîºdelimited-\\[\\]‚ÑísubscriptùúΩ0for-allùë°‚Ñï\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\]\\\\leq\\\\left(1-\\\\frac{\\\\eta\\\\mu}{2}\\\\right)^{t}\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0})\\\\right\\],\\ \\\\forall t\\\\in\\\\mathbb{N}. |  |\n\n### B.4 Comparison between two Definitions on Linear Stability\n\n###### Definition B.1(Norm/loss-based linear stability).\n\nFor an update rule ùúΩt+1=ùúΩt+F‚Äã(ùúΩt;ùùÉt)subscriptùúΩùë°1subscriptùúΩùë°ùêπsubscriptùúΩùë°subscriptùùÉùë°\\\\bm{\\\\theta}\\_{t+1}=\\\\bm{\\\\theta}\\_{t}+F(\\\\bm{\\\\theta}\\_{t};\\\\bm{\\\\xi}\\_{t}),\n\n- ‚Ä¢\n\n\n(Norm-based linear stability)\nA global minimum ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is said to be linearly stable if there exists a C>0ùê∂0C>0 such that it holds for SAM on the linearized model ( [Equation5](https://ar5iv.org/html/2410.10373#S5.E5 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) that ùîº‚Äã\\[‚à•ùúΩt‚àíùúΩ‚ãÜ‚à•2\\]‚â§C‚Äãùîº‚Äã\\[‚à•ùúΩ0‚àíùúΩ‚ãÜ‚à•2\\],‚àÄt‚â•0formulae-sequenceùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•subscriptùúΩùë°superscriptùúΩ‚ãÜ2ùê∂ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•subscriptùúΩ0superscriptùúΩ‚ãÜ2for-allùë°0\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{t}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rVert^{2}\\]\\\\leq C\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{0}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rVert^{2}\\],\\\\forall t\\\\geq 0.\n\n- ‚Ä¢\n\n\n(Loss-based linear stability)\nA global minimum ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is said to be linearly stable if there exists a C>0ùê∂0C>0 such that it holds for SAM on the linearized model ( [Equation5](https://ar5iv.org/html/2410.10373#S5.E5 \"In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) that ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]‚â§C‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩ0)\\],‚àÄt‚â•0formulae-sequenceùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°ùê∂ùîºdelimited-\\[\\]‚ÑísubscriptùúΩ0for-allùë°0\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\]\\\\leq C\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0})\\],\\\\forall t\\\\geq 0.\n\n\n###### Lemma B.2.\n\nThe following two-fold results holds:\n\n- ‚Ä¢\n\n\n(L1). If ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is norm-based linearly stable, then it must be loss-based linearly stable.\n\n- ‚Ä¢\n\n\n(L2). There exists an update rule and a G‚Äã(ùúΩ‚ãÜ)ùê∫superscriptùúΩ‚ãÜG(\\\\bm{\\\\theta}^{\\\\star}), such that the converse of (L1) does not hold.\n\n\n###### Proof of Lemma [B.2](https://ar5iv.org/html/2410.10373\\#A2.Thmlemma2 \"Lemma B.2. ‚Ä£ B.4 Comparison between two Definitions on Linear Stability ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nFor (L1), it is straightforward by\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚Ñí‚Äã(ùúΩt)=12‚Äã(ùúΩ‚àíùúΩ‚ãÜ)‚ä§‚ÄãG‚Äã(ùúΩ‚ãÜ)‚Äã(ùúΩ‚àíùúΩ‚ãÜ)‚â§‚à•G‚Äã(ùúΩ‚ãÜ)‚à•‚Äã‚à•ùúΩt‚àíùúΩ‚ãÜ‚à•2.‚ÑísubscriptùúΩùë°12superscriptùúΩsuperscriptùúΩ‚ãÜtopùê∫superscriptùúΩ‚ãÜùúΩsuperscriptùúΩ‚ãÜdelimited-‚à•‚à•ùê∫superscriptùúΩ‚ãÜsuperscriptdelimited-‚à•‚à•subscriptùúΩùë°superscriptùúΩ‚ãÜ2\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})=\\\\frac{1}{2}(\\\\bm{\\\\theta}-\\\\bm{\\\\theta}^{\\\\star})^{\\\\top}G(\\\\bm{\\\\theta}^{\\\\star})(\\\\bm{\\\\theta}-\\\\bm{\\\\theta}^{\\\\star})\\\\leq\\\\left\\\\lVert G(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{t}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rVert^{2}. |  |\n\nThus, the norm-based linear stability can imply the loss-based linear stability.\n\nFor (L2), we only need to consider an example containing degenerated directions. Specifically, let\n\n|     |     |     |\n| --- | --- | --- |\n|  | L‚Äã(ùúΩ)=12‚ÄãŒ∏12+0‚ãÖŒ∏22,ùêøùúΩ12superscriptsubscriptùúÉ12‚ãÖ0superscriptsubscriptùúÉ22\\\\displaystyle L(\\\\bm{\\\\theta})=\\\\frac{1}{2}\\\\theta\\_{1}^{2}+0\\\\cdot\\\\theta\\_{2}^{2}, |  |\n\nwith ùúΩ‚ãÜ=ùüésuperscriptùúΩ‚ãÜ0\\\\bm{\\\\theta}^{\\\\star}=\\\\mathbf{0}.\n\nConsider an update rule only occurs on Œ∏2subscriptùúÉ2\\\\theta\\_{2}:\n\n|     |     |     |\n| --- | --- | --- |\n|  | Œ∏t+1,1=Œ∏t,1;Œ∏t+1,2=Œ∏t,2+Œ∂t,Œ∂t‚àºùí©‚Äã(0,1),formulae-sequencesubscriptùúÉùë°11subscriptùúÉùë°1formulae-sequencesubscriptùúÉùë°12subscriptùúÉùë°2subscriptùúÅùë°similar-tosubscriptùúÅùë°ùí©01\\\\displaystyle\\\\theta\\_{t+1,1}=\\\\theta\\_{t,1};\\\\quad\\\\theta\\_{t+1,2}=\\\\theta\\_{t,2}+\\\\zeta\\_{t},\\ \\\\zeta\\_{t}\\\\sim\\\\mathcal{N}(0,1), |  |\n\nstarting from ùúΩ0=(1,1)‚ä§subscriptùúΩ0superscript11top\\\\bm{\\\\theta}\\_{0}=(1,1)^{\\\\top}.\nThen it is loss-base linearly stable due to\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚Ñí(ùúΩt)=12Œ∏t,12+0‚â°12Œ∏t,12=‚â°‚Ñí(ùúΩ0).\\\\displaystyle\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})=\\\\frac{1}{2}\\\\theta\\_{t,1}^{2}+0\\\\equiv\\\\frac{1}{2}\\\\theta\\_{t,1}^{2}=\\\\equiv\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0}). |  |\n\nHowever, it is norm-base linearly nonstable:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùîº‚Äã\\[‚à•ùúΩt‚à•2\\]=1+ùîº‚Äã\\[\\|ùúΩt,2\\|2\\]=1+ùîº‚Äã\\[\\|1+‚àës=0t‚àí1Œ∂s\\|2\\]=2+t‚Üí+‚àû‚Äã when t‚Üí+‚àû.ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•subscriptùúΩùë°21ùîºdelimited-\\[\\]superscriptsubscriptùúΩùë°221ùîºdelimited-\\[\\]superscript1superscriptsubscriptùë†0ùë°1subscriptùúÅùë†22ùë°‚Üí when t‚Üí+‚àû\\\\displaystyle\\\\mathbb{E}\\\\left\\[\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{t}\\\\right\\\\rVert^{2}\\\\right\\]=1+\\\\mathbb{E}\\\\left\\[\\|\\\\bm{\\\\theta}\\_{t,2}\\|^{2}\\\\right\\]=1+\\\\mathbb{E}\\\\left\\[\\\\left\\|1+\\\\sum\\_{s=0}^{t-1}\\\\zeta\\_{s}\\\\right\\|^{2}\\\\right\\]=2+t\\\\to+\\\\infty\\\\text{\\ when $t\\\\to+\\\\infty$}. |  |\n\n‚àé\n\n[‚óÑ](https://ar5iv.org/html/2410.10372) [![ar5iv homepage](https://ar5iv.org/assets/ar5iv.png)](https://ar5iv.org/) [Feeling\\\\\n\\\\\nlucky?](https://ar5iv.org/feeling_lucky) [Conversion\\\\\n\\\\\nreport](https://ar5iv.org/log/2410.10373) [Report\\\\\n\\\\\nan issue](https://github.com/dginev/ar5iv/issues/new?template=improve-article--arxiv-id-.md&title=Improve+article+2410.10373) [View original\\\\\n\\\\\non arXiv](https://arxiv.org/abs/2410.10373) [‚ñ∫](https://ar5iv.org/html/2410.10374)",
  "sections": {
    "1 Introduction": {
      "content": "Understanding the surprising generalization abilities of over-parameterized neural networks yields an important yet open problem in deep learning.\nRecently, it has been observed that the generalization of neural networks is closely tied to the sharpness of the loss landscape (Keskar et al., [2017]; Zhang et al., [2017]; Neyshabur et al., [2017]; Jiang et al., [2020]).\nThis has led to the development of many gradient-based optimization algorithms that explicitly/implicitly regularize the sharpness of solutions.\nIn particular, Foret et al. ( [2021]) proposed Sharpness-Aware Minimization (SAM), which has substantially improved the generalization and robustness (Zhang et al., [2024]) of neural networks across many tasks, including computer vision (Foret et al., [2021]; Chen et al., [2022]; Kaddour et al., [2022]) and natural language processing (Bahri et al., [2022]).\n\nDespite the empirical success of SAM, its effectiveness is not yet fully understood.\nAndriushchenko & Flammarion ( [2022])) has shown that existing theoretical justifications based on PAC-Bayes generalization bounds (Foret et al., [2021]; Wu et al., [2020a]) are incomplete in explaining the superior performance of SAM.\nAdditionally, recent theoretical analyses of SAM‚Äôs dynamics and properties often rely on unrealistic assumptions, such as a sufficiently small learning rate (Monzio Compagnoni et al., [2023]), which undermines the validity of their conclusions.\nUnderstanding the hidden mechanisms behind SAM remains an active area of research.\n\nRecent works show that the effectiveness of gradient-based optimization methods can be attributed to their _implicit bias_ toward solutions with favorable properties (Vardi, [2023]).\nOne notable example of such implicit bias is that Stochastic Gradient Descent (SGD) and its variants tend to find flat minima, which often leads to better generalization (Keskar et al., [2017]; Zhang et al., [2017]).\nIt is known that SAM selects flatter minima over SGD in practice, which represents a form of implicit bias as well.\nWhile the design of SAM is inspired by sharpness regularization, its practical implementation (see [Equation3]In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), which minimizes a first-order approximation of the original objective (see [Equations1]In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") and [2]Equation 2 ‚Ä£ 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), does not explicitly achieve this.\nUnderstanding SAM‚Äôs implicit bias towards flatter minima, especially in comparison to SGD, is of paramount importance for explaining its effectiveness and is the primary focus of this work.\n\n![Refer to caption]Figure 1: SAM operates efficiently even when applied only during the final few epochs of training.\n(a)\nTest error curves for WideResNet-16-8 on CIFAR-10 trained with different strategies.\nThe blue and green baseline curves represent training solely with SGD and SAM, respectively.\nThe orange curve shows the test error of a neural network initially trained with SGD up to epoch T~=175~ùëá175\\\\widetilde{T}=175, followed by SAM training up to epoch T=200ùëá200T=200.\nThe first 100 epochs are omitted for clarity.\nCurves are means and standard deviations over five trials with different random seeds.\nThe detailed settings and hyper-parameters are described in [Section3]Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n(b)\nA schematic picture of the training trajectory after applying SAM late in training.\nThe contour plot represents the loss landscape, with darker regions indicating lower loss.\nThe orange dotted lines depict the path of the SAM iterator.\n\nIn this work, we uncover an intriguing phenomenon in the training dynamics of SAM, which sheds light on understanding its implicit bias toward flatter minima.\nSpecifically, we find that SAM operates efficiently even when applied only during the last few epochs of training.\nAs shown in [Figure1]In 1 Introduction ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a), SAM applied in the last few epochs‚Äîafter initial training with SGD‚Äîcan achieve nearly the same test performance as training exclusively with SAM.\nFurthermore, our analysis of the solution sharpness reveals that last-few-epochs SAM identifies flatter minima as effectively as full SAM training.\nWe conclude that _SAM efficiently selects flatter minima over SGD late in training_.\nContrary to the conventional view that early training dynamics are critical (Achille et al., [2019]; Frankle et al., [2020]), our discovery underscores the importance of the late training phase for generalization.\n\nSubsequently, we delve deeper into the mechanism behind the efficiency of SAM in selecting flatter minima over SGD during the late phase of training.\nTheoretically, we identify a two-phase picture in the learning dynamics after applying SAM late in training: _Phase I._ SAM initially escapes from the relatively sharp minimum found by SGD exponentially fast; _Phase II._ it then rapidly converges to a flatter minimum over SGD within the same valley.\nSee [Figure1]In 1 Introduction ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (b) for an illustration.\nAs outlined in [Table1]In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we characterize the two-phase picture into four key claims (P1-4), each supported by rigorous analyses of SAM‚Äôs convergence, escape behavior, and bias toward flatter minima.\nThese claims are further validated by experiments in both toy models and real-world scenarios.\nThis two-phase picture explains the SAM‚Äôs ability to efficiently find flatter minima, even when applied only in the last few epochs, yielding novel insights into its implicit bias and effectiveness.\n\nFurthermore, we investigate the necessity of applying SAM during the early phase of training.\nOur results show that early-phase SAM has a minimal effect on both generalization and sharpness of the final solution.\nBased on these findings, we conjecture that the choice of the optimization algorithm during the late phase of training plays a more critical role in shaping the final properties of the solution.\nExtending this viewpoint to Adversarial Training (AT) (Madry et al., [2018]) and robustness, we find that similar to SAM, AT efficiently selects robust minima when applied late in training.\n\nIn summary, our work focuses on the implicit bias of SAM during the late phase of training, a topic that has not yet been carefully studied.\nOur main discovery unveils a surprising phenomenon in the late dynamics of SAM, and our novel two-phase picture significantly advances our understanding of its effectiveness.\nOur results demonstrate the value of analyzing optimization algorithms at the end of training and formulating theories from realistic nontrivial phenomena that provide valuable insights into the underlying mechanisms of deep learning.",
      "citations": [
        {
          "start_pos": 277,
          "end_pos": 298,
          "text": "Keskar et al., [2017]",
          "paper_id": "bib.bib29",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 300,
          "end_pos": 320,
          "text": "Zhang et al., [2017]",
          "paper_id": "bib.bib62",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 322,
          "end_pos": 346,
          "text": "Neyshabur et al., [2017]",
          "paper_id": "bib.bib46",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 348,
          "end_pos": 368,
          "text": "Jiang et al., [2020]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 531,
          "end_pos": 552,
          "text": "Foret et al. ( [2021]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 667,
          "end_pos": 687,
          "text": "Zhang et al., [2024]",
          "paper_id": "bib.bib63",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 754,
          "end_pos": 774,
          "text": "Foret et al., [2021]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 776,
          "end_pos": 795,
          "text": "Chen et al., [2022]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 797,
          "end_pos": 819,
          "text": "Kaddour et al., [2022]",
          "paper_id": "bib.bib27",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 854,
          "end_pos": 874,
          "text": "Bahri et al., [2022]",
          "paper_id": "bib.bib6",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1095,
          "end_pos": 1115,
          "text": "Foret et al., [2021]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1117,
          "end_pos": 1135,
          "text": "Wu et al., [2020a]",
          "paper_id": "bib.bib56",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1364,
          "end_pos": 1389,
          "text": "Compagnoni et al., [2023]",
          "paper_id": "bib.bib42",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1695,
          "end_pos": 1708,
          "text": "Vardi, [2023]",
          "paper_id": "bib.bib52",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1882,
          "end_pos": 1903,
          "text": "Keskar et al., [2017]",
          "paper_id": "bib.bib29",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1905,
          "end_pos": 1925,
          "text": "Zhang et al., [2017]",
          "paper_id": "bib.bib62",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4743,
          "end_pos": 4765,
          "text": "Achille et al., [2019]",
          "paper_id": "bib.bib1",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib10",
            "bib.bib9",
            "bib.bib8"
          ]
        },
        {
          "start_pos": 4767,
          "end_pos": 4789,
          "text": "Frankle et al., [2020]",
          "paper_id": "bib.bib20",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6584,
          "end_pos": 6604,
          "text": "Madry et al., [2018]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "2 Related Work": {
      "content": "Implicit flat-minima bias.\nExtensive studies have been dedicated to understand implicit bias in deep learning (Vardi, [2023]).\nOne notable example is the _flat-minima bias_: SGD and its variants tend to select flat minima (Keskar et al., [2017]; Zhang et al., [2017]), which often generalize better (Hochreiter & Schmidhuber, [1997]; Jiang et al., [2020]).\nMany works (Ma & Ying, [2021]; Mulayoff et al., [2021]; Wu & Su, [2023]; Gatmiry et al., [2023]; Wen et al., [2023b]) have theoretically justified the superior generalization of flat minima in neural networks.\nWu et al. ( [2018]; [2022])); Ma & Ying ( [2021])) have taken a dynamical stability perspective to explain why SGD favors flat minima; in-depth analysis of SGD dynamics near global minima shows that the SGD noise drives SGD towards flatter minima (Blanc et al., [2020]; Li et al., [2022]; Ma et al., [2022]; Damian et al., [2021]).\nFurther studies (Jastrzƒôbski et al., [2017]; Lyu et al., [2022]) have explored how training components, like learning rate and normalization, influence the flat-minima bias of SGD.\n\nUnderstandings towards SAM.\nInspired by the implicit flat-minima bias of SGD, Foret et al. ( [2021]) has proposed Sharpness-Aware Minimization (SAM) algorithm.\nSAM and its variants (Kwon et al., [2021]; Zhuang et al., [2022]; Du et al., [2022]; Liu et al., [2022]; Kim et al., [2022]; Mueller et al., [2023]; Becker et al., [2024]) have achieved superior performance across a wide range tasks (Chen et al., [2022]; Kaddour et al., [2022]; Bahri et al., [2022]).\nDespite their successes, their effectiveness remains poorly understood.\nOn the optimization front, Andriushchenko & Flammarion ( [2022])); Si & Yun ( [2023])); Shin et al. ( [2023]) have studied the convergence properties of stochastic SAM;\nMonzio Compagnoni et al. ( [2023]); Kim et al. ( [2023]) have demonstrated that SAM requires more time to escape saddle points compared to SGD;\nLong & Bartlett ( [2024])) have analyzed the edge of stability phenomenon for SAM.\nOn the implicit bias side,\nShin et al. ( [2023]); Behdin et al. ( [2023]) have examined SAM‚Äôs flat-minima bias using dynamical stability analysis;\nWen et al. ( [2023a]); Monzio Compagnoni et al. ( [2023]); Bartlett et al. ( [2023]) have studied how SAM moves towards flat minima;\nAndriushchenko & Flammarion ( [2022])) has showed that SAM has the low-rank bias;\nand Wen et al. ( [2023b]) has revealed that SAM does not only minimize sharpness to achieve better generalization.\nIn comparison, our work focuses on the dynamics of SAM in the late training phase, a topic largely unattended in the literature, offering both theoretical and empirical analyses of SAM‚Äôs convergence, escape behavior, and bias toward flatter minima.",
      "citations": [
        {
          "start_pos": 111,
          "end_pos": 124,
          "text": "Vardi, [2023]",
          "paper_id": "bib.bib52",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 223,
          "end_pos": 244,
          "text": "Keskar et al., [2017]",
          "paper_id": "bib.bib29",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 246,
          "end_pos": 266,
          "text": "Zhang et al., [2017]",
          "paper_id": "bib.bib62",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 300,
          "end_pos": 332,
          "text": "Hochreiter & Schmidhuber, [1997]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 334,
          "end_pos": 354,
          "text": "Jiang et al., [2020]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 369,
          "end_pos": 386,
          "text": "Ma & Ying, [2021]",
          "paper_id": "bib.bib39",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 388,
          "end_pos": 411,
          "text": "Mulayoff et al., [2021]",
          "paper_id": "bib.bib45",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 413,
          "end_pos": 428,
          "text": "Wu & Su, [2023]",
          "paper_id": "bib.bib58",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 430,
          "end_pos": 452,
          "text": "Gatmiry et al., [2023]",
          "paper_id": "bib.bib21",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib8",
            "bib.bib10",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 454,
          "end_pos": 473,
          "text": "Wen et al., [2023b]",
          "paper_id": "bib.bib54",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 567,
          "end_pos": 585,
          "text": "Wu et al. ( [2018]",
          "paper_id": "bib.bib59",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 815,
          "end_pos": 835,
          "text": "Blanc et al., [2020]",
          "paper_id": "bib.bib11",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 837,
          "end_pos": 854,
          "text": "Li et al., [2022]",
          "paper_id": "bib.bib34",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 856,
          "end_pos": 873,
          "text": "Ma et al., [2022]",
          "paper_id": "bib.bib40",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 875,
          "end_pos": 896,
          "text": "Damian et al., [2021]",
          "paper_id": "bib.bib15",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 923,
          "end_pos": 942,
          "text": "bski et al., [2017]",
          "paper_id": "bib.bib24",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 944,
          "end_pos": 962,
          "text": "Lyu et al., [2022]",
          "paper_id": "bib.bib38",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1159,
          "end_pos": 1180,
          "text": "Foret et al. ( [2021]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1263,
          "end_pos": 1282,
          "text": "Kwon et al., [2021]",
          "paper_id": "bib.bib33",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1284,
          "end_pos": 1305,
          "text": "Zhuang et al., [2022]",
          "paper_id": "bib.bib65",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1307,
          "end_pos": 1324,
          "text": "Du et al., [2022]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1326,
          "end_pos": 1344,
          "text": "Liu et al., [2022]",
          "paper_id": "bib.bib36",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1346,
          "end_pos": 1364,
          "text": "Kim et al., [2022]",
          "paper_id": "bib.bib31",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1366,
          "end_pos": 1388,
          "text": "Mueller et al., [2023]",
          "paper_id": "bib.bib44",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1390,
          "end_pos": 1411,
          "text": "Becker et al., [2024]",
          "paper_id": "bib.bib8",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib10",
            "bib.bib21",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 1475,
          "end_pos": 1494,
          "text": "Chen et al., [2022]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1496,
          "end_pos": 1518,
          "text": "Kaddour et al., [2022]",
          "paper_id": "bib.bib27",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1520,
          "end_pos": 1540,
          "text": "Bahri et al., [2022]",
          "paper_id": "bib.bib6",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1703,
          "end_pos": 1723,
          "text": "Shin et al. ( [2023]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1791,
          "end_pos": 1817,
          "text": "Compagnoni et al. ( [2023]",
          "paper_id": "bib.bib42",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1820,
          "end_pos": 1839,
          "text": "Kim et al. ( [2023]",
          "paper_id": "bib.bib30",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2038,
          "end_pos": 2058,
          "text": "Shin et al. ( [2023]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2061,
          "end_pos": 2083,
          "text": "Behdin et al. ( [2023]",
          "paper_id": "bib.bib10",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib8",
            "bib.bib21",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 2158,
          "end_pos": 2178,
          "text": "Wen et al. ( [2023a]",
          "paper_id": "bib.bib53",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2188,
          "end_pos": 2214,
          "text": "Compagnoni et al. ( [2023]",
          "paper_id": "bib.bib42",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2217,
          "end_pos": 2241,
          "text": "Bartlett et al. ( [2023]",
          "paper_id": "bib.bib7",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2377,
          "end_pos": 2397,
          "text": "Wen et al. ( [2023b]",
          "paper_id": "bib.bib54",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "3 Background and Preliminaries": {
      "content": "Notation and Setup.\nLet ùíÆ={(ùíôi,ùíöi)}i=1nùíÆsuperscriptsubscriptsubscriptùíôùëñsubscriptùíöùëñùëñ1ùëõ\\\\mathcal{S}=\\\\{({\\\\bm{x}}\\_{i},\\\\bm{y}\\_{i})\\\\}\\_{i=1}^{n} be the training set, where ùíôi‚àà‚Ñùdsubscriptùíôùëñsuperscript‚Ñùùëë{\\\\bm{x}}\\_{i}\\\\in\\\\mathbb{R}^{d} is the input and ùíöi‚àà‚Ñùksubscriptùíöùëñsuperscript‚Ñùùëò\\\\bm{y}\\_{i}\\\\in\\\\mathbb{R}^{k} is the target for the iùëñi-th data point i.i.d. sampled from distribution ùíÆùíÆ\\\\mathcal{S}.\nWe consider a model in the form of f‚Äã(ùíô;ùúΩ)ùëìùíôùúΩf(\\\\bm{x};\\\\bm{\\\\theta}), where ùúΩ‚àà‚ÑùpùúΩsuperscript‚Ñùùëù{\\\\bm{\\\\theta}}\\\\in\\\\mathbb{R}^{p} is the model parameters and f‚Äã(ùíô;ùúΩ)‚àà‚ÑùkùëìùíôùúΩsuperscript‚Ñùùëòf(\\\\bm{x};\\\\bm{\\\\theta})\\\\in\\\\mathbb{R}^{k} is the output for the input ùíôùíô\\\\bm{x}.\nThe loss of the model at the iùëñi-th sample (ùíôi,ùíöi)subscriptùíôùëñsubscriptùíöùëñ(\\\\bm{x}\\_{i},\\\\bm{y}\\_{i}) is denoted as ‚Ñì‚Äã(ùíöi;f‚Äã(ùíôi;ùúΩ))‚ÑìsubscriptùíöùëñùëìsubscriptùíôùëñùúΩ\\\\ell(\\\\bm{y}\\_{i};f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})), simplified to ‚Ñìi‚Äã(ùúΩ)subscript‚ÑìùëñùúΩ\\\\ell\\_{i}(\\\\bm{\\\\theta}).\nThe total loss over the training set is then given by ‚ÑíùíÆ‚Äã(ùúΩ)=1n‚Äã‚àëi=1n‚Ñìi‚Äã(ùúΩ)subscript‚ÑíùíÆùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõsubscript‚ÑìùëñùúΩ\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\bm{\\\\theta})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\ell\\_{i}(\\\\bm{\\\\theta}).\nFor classification tasks, Errùíü‚Å°(ùúΩ)subscriptErrùíüùúΩ\\\\operatorname{Err}\\_{\\\\mathcal{D}}(\\\\bm{\\\\theta}) denotes the classification error of the model f‚Äã(‚ãÖ;ùúΩ)ùëì‚ãÖùúΩf(\\\\cdot;\\\\bm{\\\\theta}) over dataset ùíüùíü\\\\mathcal{D}.\nFor a matrix Aùê¥A, let ‚à•A‚à•2subscriptdelimited-‚à•‚à•ùê¥2\\\\left\\\\lVert A\\\\right\\\\rVert\\_{2}, ‚à•A‚à•Fsubscriptdelimited-‚à•‚à•ùê¥ùêπ\\\\left\\\\lVert A\\\\right\\\\rVert\\_{F}, and Tr‚Å°(A)Trùê¥\\\\operatorname{Tr}(A) denote its spectral norm, Frobenius norm and trace, respectively.\n\nFor our theoretical analysis in [Section5]How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we always assume k=1ùëò1k=1 for simplicity333The extension to the case where k>1ùëò1k>1 is straightforward. and consider the squared loss, i.e., ‚Ñìi‚Äã(ùúΩ)=12‚Äã\\|f‚Äã(ùíôi;ùúΩ)‚àíyi\\|2subscript‚ÑìùëñùúΩ12superscriptùëìsubscriptùíôùëñùúΩsubscriptùë¶ùëñ2\\\\ell\\_{i}(\\\\bm{\\\\theta})=\\\\frac{1}{2}\\|f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})-y\\_{i}\\|^{2}.\nWe focus on the over-parameterized case in the sense that minùúΩ‚Å°‚Ñí‚Äã(ùúΩ)=0subscriptùúΩ‚ÑíùúΩ0\\\\min\\_{\\\\bm{\\\\theta}}\\\\mathcal{L}(\\\\bm{\\\\theta})=0.\nTo characterize the local geometry of the training loss at point ùúΩùúΩ\\\\bm{\\\\theta}, we consider the Fisher matrix\nG‚Äã(ùúΩ)=1n‚Äã‚àëi=1n‚àáf‚Äã(ùíôi;ùúΩ)‚Äã‚àáf‚Äã(ùíôi;ùúΩ)‚ä§ùê∫ùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõ‚àáùëìsubscriptùíôùëñùúΩ‚àáùëìsuperscriptsubscriptùíôùëñùúΩtopG(\\\\bm{\\\\theta})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\nabla f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})\\\\nabla f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})^{\\\\top}\nand the Hessian matrix H‚Äã(ùúΩ)=G‚Äã(ùúΩ)+1n‚Äã‚àëi=1n(f‚Äã(ùíôi;ùúΩ)‚àíyi)‚Äã‚àá2f‚Äã(ùíôi;ùúΩ)ùêªùúΩùê∫ùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõùëìsubscriptùíôùëñùúΩsubscriptùë¶ùëñsuperscript‚àá2ùëìsubscriptùíôùëñùúΩH(\\\\bm{\\\\theta})=G(\\\\bm{\\\\theta})+\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left(f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta})-y\\_{i}\\\\right)\\\\nabla^{2}f(\\\\bm{x}\\_{i};\\\\bm{\\\\theta}), where G‚Äã(ùúΩ)‚âàH‚Äã(ùúΩ)ùê∫ùúΩùêªùúΩG(\\\\bm{\\\\theta})\\\\approx H(\\\\bm{\\\\theta}) in the low-loss region.\n\nSharpness-Aware Minimization.\nThe central idea behind SAM is to minimize the worst-case loss within a neighborhood of the current parameters.\nSpecifically, SAM problem can be formulated as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minùúΩ‚Å°‚ÑíùíÆSAM‚Äã(ùúΩ;œÅ),where‚ÑíùíÆSAM‚Äã(ùúΩ;œÅ)=max‚à•œµ‚à•2‚â§œÅ‚Å°‚ÑíùíÆ‚Äã(ùúΩ+œµ).subscriptùúΩsuperscriptsubscript‚ÑíùíÆSAMùúΩùúåwheresuperscriptsubscript‚ÑíùíÆSAMùúΩùúåsubscriptsubscriptdelimited-‚à•‚à•bold-italic-œµ2ùúåsubscript‚ÑíùíÆùúΩbold-italic-œµ\\\\displaystyle\\\\min\\_{\\\\bm{\\\\theta}}\\\\mathcal{L}\\_{\\\\mathcal{S}}^{\\\\rm SAM}(\\\\bm{\\\\theta};\\\\rho),\\\\quad{\\\\rm where}\\\\quad\\\\mathcal{L}\\_{\\\\mathcal{S}}^{\\\\rm SAM}(\\\\bm{\\\\theta};\\\\rho)=\\\\max\\_{\\\\left\\\\lVert\\\\bm{\\\\epsilon}\\\\right\\\\rVert\\_{2}\\\\leq\\\\rho}\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\bm{\\\\theta}+\\\\bm{\\\\epsilon}). |  | (1) |\n\nHere, œÅùúå\\\\rho is a given neighborhood radius.\nHowever, finding the perturbation in the parameter space that maximizes the loss, i.e., œµbold-italic-œµ\\\\bm{\\\\epsilon}, can be computationally intractable in practice.\nThus Foret et al. ( [2021]) approximated the maximize-loss perturbation using a first order solution:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œµ‚âàarg‚Äãmax‚à•œµ‚à•2‚â§œÅ‚Å°(‚ÑíùíÆ‚Äã(ùúΩ)+œµ‚ä§‚Äã‚àá‚ÑíùíÆ‚Äã(ùúΩ))=œÅ‚Äã‚àá‚ÑíùíÆ‚Äã(ùúΩ)/‚à•‚àá‚ÑíùíÆ‚Äã(ùúΩ)‚à•2.bold-italic-œµsubscriptargmaxsubscriptdelimited-‚à•‚à•bold-italic-œµ2ùúåsubscript‚ÑíùíÆùúΩsuperscriptbold-italic-œµtop‚àásubscript‚ÑíùíÆùúΩùúå‚àásubscript‚ÑíùíÆùúΩsubscriptdelimited-‚à•‚à•‚àásubscript‚ÑíùíÆùúΩ2\\\\displaystyle\\\\bm{\\\\epsilon}\\\\approx\\\\operatorname\\*{arg\\\\,max}\\_{\\\\left\\\\lVert\\\\bm{\\\\epsilon}\\\\right\\\\rVert\\_{2}\\\\leq\\\\rho}\\\\left(\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)+\\\\bm{\\\\epsilon}^{\\\\top}\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)\\\\right)=\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)/\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}\\\\left(\\\\bm{\\\\theta}\\\\right)\\\\right\\\\rVert\\_{2}. |  | (2) |\n\nConsequently, let Œ∑ùúÇ\\\\eta be the learning rate and Œæt={Œæt,1,‚ãØ,Œæt,B}subscriptùúâùë°subscriptùúâùë°1‚ãØsubscriptùúâùë°ùêµ\\\\xi\\_{t}=\\\\{\\\\xi\\_{t,1},\\\\cdots,\\\\xi\\_{t,B}\\\\} be the batch indices sampled at iteration tùë°t, where BùêµB is the batch size.\nThe mini-batch loss is given by ‚ÑíŒæt‚Äã(ùúΩ)=1B‚Äã‚àëi‚ààŒæt‚Ñìi‚Äã(ùúΩ)subscript‚Ñísubscriptùúâùë°ùúΩ1ùêµsubscriptùëñsubscriptùúâùë°subscript‚ÑìùëñùúΩ\\\\mathcal{L}\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta})=\\\\frac{1}{B}\\\\sum\\_{i\\\\in\\\\xi\\_{t}}\\\\ell\\_{i}(\\\\bm{\\\\theta}).\nWith a small yet key modification to SGD444The iterative update rule of SGD is ùúΩt+1=ùúΩt‚àíŒ∑‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt)superscriptùúΩùë°1superscriptùúΩùë°ùúÇ‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°\\\\bm{\\\\theta}^{t+1}=\\\\bm{\\\\theta}^{t}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}\\\\right), the iterative update rule of SAM with stochastic gradients is:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùúΩt+1=ùúΩt‚àíŒ∑‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt+œÅt‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt)),whereœÅt=œÅ/‚à•‚àá‚ÑíŒæt‚Äã(ùúΩt)‚à•2.formulae-sequencesuperscriptùúΩùë°1superscriptùúΩùë°ùúÇ‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°subscriptùúåùë°‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°wheresubscriptùúåùë°ùúåsubscriptdelimited-‚à•‚à•‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°2\\\\displaystyle\\\\bm{\\\\theta}^{t+1}=\\\\bm{\\\\theta}^{t}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}+\\\\rho\\_{t}\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}^{t})\\\\right),\\\\quad{\\\\rm where}\\\\quad\\\\rho\\_{t}=\\\\rho/\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}\\\\right)\\\\right\\\\rVert\\_{2}. |  | (3) |\n\n![Refer to caption]Figure 2: The illustration of the switching method.\nBlue dashed lines represent SGD training, while orange dashed lines represent SAM training. ùúΩ0superscriptùúΩ0\\\\bm{\\\\theta}^{0} denotes the random initialization.\nt1,t2subscriptùë°1subscriptùë°2t\\_{1},t\\_{2} denotes two different switching points.\n\nOur experiments are conducted using the original implementation of SAM, however, for our theoretical analysis in [Section5]How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we simplify the original SAM by approximating the step size œÅtsubscriptùúåùë°\\\\rho\\_{t}, which is inversely proportional to the gradient norm, with a constant œÅùúå\\\\rho (see [Equation4]In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), as it is easier to analyze.\nAndriushchenko & Flammarion ( [2022])) empirically justified this simplification, showing that SAM with a constant œÅùúå\\\\rho achieves generalization performance comparable to the original SAM.\nThis approximation has been widely adopted in recent theoretical advances on SAM (Andriushchenko & Flammarion, [2022]; Behdin & Mazumder, [2023]; Agarwala & Dauphin, [2023]; Behdin et al., [2023]; Monzio Compagnoni et al., [2023]).\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùúΩt+1=ùúΩt‚àíŒ∑‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt+œÅ‚Äã‚àá‚ÑíŒæt‚Äã(ùúΩt)).superscriptùúΩùë°1superscriptùúΩùë°ùúÇ‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°ùúå‚àásubscript‚Ñísubscriptùúâùë°superscriptùúΩùë°\\\\displaystyle\\\\bm{\\\\theta}^{t+1}=\\\\bm{\\\\theta}^{t}-\\\\eta\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}\\\\left(\\\\bm{\\\\theta}^{t}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}^{t})\\\\right). |  | (4) |\n\nSwitching Method.\nIn this paper, we demonstrate our main discovery by switching between SGD and SAM at a specific point during training, referred to as the _switching method_.\nSpecifically, let TùëáT be the total number of training epochs and tùë°t be the switching epoch, considering the switch from SGD to SAM without loss of generality.\nWe initially train the model from scratch with SGD for tùë°t epochs to get ùúΩSGDtsuperscriptsubscriptùúΩSGDùë°\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{t}, and then switch to SAM for the remaining T‚àítùëáùë°T-t epochs to get ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}.\nNotably, when t=Tùë°ùëát=T or t=0ùë°0t=0, the model is trained exclusively with SGD or SAM, simply denoted as ùúΩSGDTsuperscriptsubscriptùúΩSGDùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{{SAM}}}^{T}, respectively.\nSee [Figure2]In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") for an illustration.\nWe fix the total number of training epochs TùëáT and vary the switching point tùë°t to study the effect of SAM at different training phases.\nTo ensure a fair comparison, we ensure the same initialization, mini-batch orders, and hyper-parameters across all models, regardless of the switching point.\nConsequently, the training trajectories of models with different switching points align precisely before the switch.\n\nMain Experimental Setup.\nFollowing Foret et al. ( [2021]); Kwon et al. ( [2021]), we perform experiments on the commonly used image classification datasets CIFAR-10/100 (Krizhevsky et al., [2009]), with standard architectures such as WideResNet (Zagoruyko & Komodakis, [2016]), ResNet (He et al., [2016]), and VGG (Simonyan & Zisserman, [2015]).\nWe use the standard configurations for the basic training settings shared by SAM and SGD (e.g., learning rate, batch size, and data augmentation) as in the original papers\n, and set the SAM-specific perturbation radius œÅùúå\\\\rho to 0.05, as recommended by Foret et al. ( [2021]).\nWe also extend our findings to AT (Madry et al., [2018]) and ASAM (Kwon et al., [2021]).\nDue to space limits, more experimental details and results can be found in [AppendixA]Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").",
      "citations": [
        {
          "start_pos": 3954,
          "end_pos": 3975,
          "text": "Foret et al. ( [2021]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7404,
          "end_pos": 7439,
          "text": "Andriushchenko & Flammarion, [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7441,
          "end_pos": 7466,
          "text": "Behdin & Mazumder, [2023]",
          "paper_id": "bib.bib9",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib10",
            "bib.bib49",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 7468,
          "end_pos": 7494,
          "text": "Agarwala & Dauphin, [2023]",
          "paper_id": "bib.bib2",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7496,
          "end_pos": 7517,
          "text": "Behdin et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib9",
            "bib.bib49",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 7526,
          "end_pos": 7551,
          "text": "Compagnoni et al., [2023]",
          "paper_id": "bib.bib42",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9426,
          "end_pos": 9447,
          "text": "Foret et al. ( [2021]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9450,
          "end_pos": 9470,
          "text": "Kwon et al. ( [2021]",
          "paper_id": "bib.bib33",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9561,
          "end_pos": 9586,
          "text": "Krizhevsky et al., [2009]",
          "paper_id": "bib.bib32",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9637,
          "end_pos": 9666,
          "text": "Zagoruyko & Komodakis, [2016]",
          "paper_id": "bib.bib61",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9677,
          "end_pos": 9694,
          "text": "He et al., [2016]",
          "paper_id": "bib.bib22",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9706,
          "end_pos": 9734,
          "text": "Simonyan & Zisserman, [2015]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib10",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 9991,
          "end_pos": 10012,
          "text": "Foret et al. ( [2021]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10050,
          "end_pos": 10070,
          "text": "Madry et al., [2018]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10082,
          "end_pos": 10101,
          "text": "Kwon et al., [2021]",
          "paper_id": "bib.bib33",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "4 SAM Efficiently Selects Flatter Minima Late In Training": {
      "content": "![Refer to caption]Figure 3: The impact of SAM training proportion on generalization/sharpness when switches from SGD to SAM.\nThe generalization gap between the models ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}(top row) / the sharpness of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}(bottom row) vs. the SAM training proportion of ùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}.\nùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t} refers to the model obtained by switching from SGD to SAM, while ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} represents the model trained entirely with SAM.\nHere, TùëáT is the total number of training epochs, and tùë°t is the switching point.\nWe define SAM training proportion of ùúΩSGD‚ÜíSAM,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDSAMùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t} as (T‚àít)/Tùëáùë°ùëá(T-t)/T and adjust it by varying tùë°t while keeping TùëáT fixed.\nDots represent the mean over three trials with different random seeds, and error bars indicate standard deviations.\nResults on more datasets and architectures can be found in [SectionA.4]A.4 More Experiments on Early-Phase SAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nIn this section, we provide empirical evidence indicating that SAM efficiently selects flatter minima over SGD late in training.\nWe first show that applying SAM only during the last few epochs of training achieves generalization comparable to training entirely with SAM.\nTaking a step further, we demonstrate that last-few-epochs SAM finds flatter minima as effectively as full SAM training.\n\nApplying SAM in the last few epochs achieves generalization comparable to full SAM training.\n\nWe conduct experiments on various datasets and architectures to investigate the effect of applying SAM late in training, after initial training with SGD, on generalization.\nSpecifically, we use the switching method (detailed in [Section3]Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), which switches from SGD to SAM at epoch tùë°t, to obtain the model ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}.\nFor comparison, we train a baseline model entirely with SAM under the same settings, resulting in ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}.\nBoth models are trained for a total of TùëáT epochs.\nTo assess the generalization ability of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} relative to ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}, we calculated the test loss and test error gaps between these two models: ‚Ñíùíütest‚Äã(ùúΩSGD‚ÜíSAM,tT)‚àí‚Ñíùíütest‚Äã(ùúΩSAMT)subscript‚ÑísubscriptùíütestsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëásubscript‚ÑísubscriptùíütestsuperscriptsubscriptùúΩSAMùëá\\\\mathcal{L}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}\\\\right)-\\\\mathcal{L}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}\\\\right) and Errùíütest‚Å°(ùúΩSGD‚ÜíSAM,tT)‚àíErrùíütest‚Å°(ùúΩSAMT)subscriptErrsubscriptùíütestsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëásubscriptErrsubscriptùíütestsuperscriptsubscriptùúΩSAMùëá\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}\\\\right)-\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{test}}}\\\\left(\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}\\\\right), where ùíütestsubscriptùíütest\\\\mathcal{D}\\_{\\\\textrm{test}} denotes the unseen test set.\nIf the generalization gap between ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} approaches zero, then we say ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} achieve nearly the same generalization performance as ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}.\n\nSurprisingly, we find that applying SAM only in the final few epochs can achieve nearly the same generalization performance as training entirely with SAM.\nIn particular, we fix the number of total training epochs TùëáT and vary the switching point tùë°t to adjust the SAM training proportion of ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T}, which is exactly (T‚àít)/Tùëáùë°ùëá(T-t)/T.\nWe analyze how the generalization gap between ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} changes as the SAM training proportion increases.\nIn [Figure3]In 4 SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the generalization gap becomes negligible once the SAM training proportion exceeds zero, indicating that even a few epochs of SAM applied at the end of training yield generalization performance comparable to full SAM training.\nThis phenomenon is consistently observed across various datasets and architectures.\n\nA similar phenomenon was noted by Andriushchenko & Flammarion ( [2022])), but it was not given significant attention.\nWe isolate and extend this phenomenon by showing that even fewer epochs of SAM (e.g., 1-5 epochs for WideResNet-16-8 on CIFAR-10) applied in the late phase of training yield test error and loss comparable to full SAM training.\n\nApplying SAM in the last few epochs finds flatter minima as effectively as full SAM training.\n\nFurthermore, we investigate the effect of applying SAM in the late phase of training on the sharpness of the final solution.\nSimilarly as before, we analyze how sharpness of the solution ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} changes w.r.t. the SAM training proportion.\nWe measure the sharpness along the most curved direction of the loss surface, i.e., the spectral norm of the Hessian matrix ‚à•H‚Äã(ùúΩ)‚à•2subscriptdelimited-‚à•‚à•ùêªùúΩ2\\\\left\\\\lVert H(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{2}.\nIn [Figure3]In 4 SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the sharpness of the solution ùúΩSGD‚ÜíSAM,tTsuperscriptsubscriptùúΩ‚ÜíSGDSAMùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},t}^{T} dramatically drops once the SAM training proportion is greater than zero, reflecting a similar trend to the generalization gap.\nThis indicates that applying SAM in the last few epochs of training is as effective as training entirely with SAM in achieving flatter minima.\n\nIn summary, we see that SAM efficiently selects flatter minima over SGD when applied late in training.\nThis suggests a fine-tuning scheme for SAM: start from a pretrained checkpoint and continue training with SAM for several epochs, reducing computational costs while maintaining similar performance.\nIn [Section5]How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we will dig deeper into the underlying mechanism behind this phenomenon and gain new insights into SAM‚Äôs implicit bias towards flatter minima.",
      "citations": []
    },
    "5 How Does SAM Efficiently Select Flatter Minima Late in Training?": {
      "content": "We have seen that SAM efficiently selects flatter minima over SGD when applied late in training.\nIn this section, we aim to explore the precise mechanism behind this phenomenon.\nTheoretically, we identify a two-phase picture in the training dynamics after switching to SAM in the late phase, which is characterized by four key claims (P1-4), as outlined in [Table1]In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nThis picture demonstrates that SAM provably escapes the minimum found by SGD and converges to a flatter minimum within the same valley in just a few steps, explaining its efficiency in selecting flatter minima late in training.\n\n|     |     |     |\n| --- | --- | --- |\n| Phase I(escape) | (P1).SAM rapidly escapes from the minimum found by SGD; | [Theorem5.2]Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n| (P2).However, the iterator remains within the current valley. | Proposition [5.1]Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n| Phase II(converge) | (P3).SAM converges to a flatter minimum compared to SGD; | Theorem [5.1]Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n| (P4).The convergence rate of SAM is extremely fast. | Theorem [5.3]Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") |\n\nTable 1: Overview of the two-phase picture and corresponding theoretical results.![Refer to caption]Figure 4: Two-phase picture in both toy example and real-world scenarios.(a) Visualization of the two-phase dynamics for [Example5.1]Example 5.1. ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nThe horizontal gray line represents the set of the global minima ‚Ñ≥={(u,v):v=0}‚Ñ≥conditional-setùë¢ùë£ùë£0\\\\mathcal{M}=\\\\{(u,v):v=0\\\\}, where smaller values of \\|u\\|ùë¢\\|u\\| correspond to flatter minima.\nThe blue lines trace the SGD iterates, leading to ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}}, while the orange lines show the SAM iterates, which converge to a flatter minimum ùúΩSAMendsuperscriptsubscriptùúΩSAMend\\\\bm{\\\\theta}\\_{\\\\text{SAM}}^{\\\\text{end}}, with a smaller value of \\|u\\|ùë¢\\|u\\|.\nNotably, ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}} and ùúΩSAMendsuperscriptsubscriptùúΩSAMend\\\\bm{\\\\theta}\\_{\\\\text{SAM}}^{\\\\text{end}} stay in the same valley around ‚Ñ≥‚Ñ≥\\\\mathcal{M}.\n(b) The exponentially fast escape from minima found by SGD.\nTrain loss ‚Ñíùíütrain‚Äã(ùúΩSGD‚ÜíSAM,TT+t)subscript‚ÑísubscriptùíütrainsuperscriptsubscriptùúΩ‚ÜíSGDSAMùëáùëáùë°\\\\mathcal{L}\\_{\\\\mathcal{D}\\_{\\\\textrm{train}}}(\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM},T}^{T+t}) v.s. the update step tùë°t.\nHere, TùëáT is the switching step, chosen to be sufficiently large for SGD to converge, and tùë°t is the number of updates after switching to SAM.\nThe red line represents the mean over 100100100 trials with different randomness.\n(c) SAM converges to a flatter minimum within the same valley as the one found by SGD.\nThe loss ‚Ñí‚Ñí\\\\mathcal{L}(top row) / the second-order finite difference ‚Ñí‚Ä≤‚Ä≤superscript‚Ñí‚Ä≤‚Ä≤\\\\mathcal{L}^{\\\\prime\\\\prime}(bottom row) of the interpolated model ùúΩŒªsubscriptùúΩùúÜ\\\\bm{\\\\theta}\\_{\\\\lambda} v.s. the interpolation coefficient ŒªùúÜ\\\\lambda.\nHere, ùúΩŒª=(1‚àíŒª)‚ÄãùúΩSGD‚ÜíSAMend+Œª‚ÄãùúΩSGDendsubscriptùúΩùúÜ1ùúÜsuperscriptsubscriptùúΩ‚ÜíSGDSAMendùúÜsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\lambda}=(1-\\\\lambda)\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM}}^{\\\\textrm{end}}+\\\\lambda\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{\\\\textrm{end}}, and ‚Ñí‚Ä≤‚Ä≤(ùúΩŒª)=(‚Ñí(ùúΩŒª+h+‚Ñí(ùúΩŒª‚àíh‚àí2‚Ñí(ùúΩŒª)/(2h)2\\\\mathcal{L}^{\\\\prime\\\\prime}(\\\\bm{\\\\theta}\\_{\\\\lambda})=\\\\left(\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{\\\\lambda+h}+\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{\\\\lambda-h}-2\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{\\\\lambda}\\\\right)/(2h)^{2}, where h‚Ñéh is fixed to 0.10.10.1.\nThis is no barrier in the loss curve, indicating ùúΩSGD‚ÜíSAMendsuperscriptsubscriptùúΩ‚ÜíSGDSAMend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM}}^{\\\\textrm{end}} and ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{\\\\textrm{end}} stays within the same valley.\n‚Ñí‚Ä≤‚Ä≤‚Äã(ùúΩŒª)superscript‚Ñí‚Ä≤‚Ä≤subscriptùúΩùúÜ\\\\mathcal{L}^{\\\\prime\\\\prime}(\\\\bm{\\\\theta}\\_{\\\\lambda}) gradually increases with ŒªùúÜ\\\\lambda, implying ùúΩSGD‚ÜíSAMendsuperscriptsubscriptùúΩ‚ÜíSGDSAMend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{SAM}}^{\\\\textrm{end}} is flatter than ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}}^{\\\\textrm{end}}.\n\nTo understand the two-phase picture, let us first consider a toy but representative example.\n\n###### Example 5.1.\n\nConsider using the shallow neural network f‚Äã(u,v;x)=tanh‚Å°(v‚Äãtanh‚Å°(u‚Äãx))ùëìùë¢ùë£ùë•ùë£ùë¢ùë•f(u,v;x)=\\\\tanh(v\\\\tanh(ux)) to fit a single data (x=1,y=0formulae-sequenceùë•1ùë¶0x=1,y=0) under the squared loss ‚Ñì‚Äã(y;y‚Ä≤)=(y‚àíy‚Ä≤)2/2‚Ñìùë¶superscriptùë¶‚Ä≤superscriptùë¶superscriptùë¶‚Ä≤22\\\\ell(y;y^{\\\\prime})=(y-y^{\\\\prime})^{2}/2, then the loss landscape can be written as ‚Ñí‚Äã(ùõâ)=12‚Äãtanh2‚Å°(v‚Äãtanh‚Å°(u))‚Ñíùõâ12superscript2ùë£ùë¢\\\\mathcal{L}(\\\\bm{\\\\theta})=\\\\frac{1}{2}\\\\tanh^{2}(v\\\\tanh(u)), where ùõâ=(u,v)ùõâùë¢ùë£\\\\bm{\\\\theta}=(u,v).\n\n[Figure4]In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a) visualizes the training dynamics for [Example5.1]Example 5.1. ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nIn [Figure4]In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a), the dynamics occur within the valley surrounding the set of the minima ‚Ñ≥={(u,v):v=0}‚Ñ≥conditional-setùë¢ùë£ùë£0\\\\mathcal{M}=\\\\{(u,v):v=0\\\\}.\nOn ‚Ñ≥‚Ñ≥\\\\mathcal{M}, the sharpness is given by ‚à•H‚Äã(ùúΩ)‚à•2=Tr‚Å°(H‚Äã(ùúΩ))=‚ÄñH‚Äã(ùúΩ)‚ÄñF=tanh2‚Å°(u)subscriptdelimited-‚à•‚à•ùêªùúΩ2TrùêªùúΩsubscriptnormùêªùúΩFsuperscript2ùë¢\\\\left\\\\lVert H(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{2}=\\\\operatorname{Tr}(H(\\\\bm{\\\\theta}))=\\\\\\|H(\\\\bm{\\\\theta})\\\\\\|\\_{\\\\rm F}=\\\\tanh^{2}(u), implying that the smaller the \\|u\\|ùë¢\\|u\\|, the flatter the minimum.\nInitially, SGD converges to a relatively sharp minimum ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}}.\nAfter switching to SAM, the iterator exhibits the two-phase dynamics:\n\n- ‚Ä¢\n\n\nPhase I (escape). SAM first escapes the sharp minimum ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}} found by SGD within a few iterations (P1), but remains within the same valley around ‚Ñ≥‚Ñ≥\\\\mathcal{M}555Note that the landscape has another valley around a different set of minima ùí©={(u,v):u=0}ùí©conditional-setùë¢ùë£ùë¢0\\\\mathcal{N}=\\\\{(u,v):u=0\\\\}(P2);\n\n- ‚Ä¢\n\n\nPhase II (converge). SAM then rapidly converges to another flatter minimum ùúΩSAMendsuperscriptsubscriptùúΩSAMend\\\\bm{\\\\theta}\\_{\\\\text{SAM}}^{\\\\text{end}}(P3-4), with a smaller \\|u\\|ùë¢\\|u\\| compared to ùúΩSGDendsuperscriptsubscriptùúΩSGDend\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}}.\n\n\nThis toy example successfully illustrates the two-phase picture after switching to SAM in the late training phase, but it offers only a basic intuition.\nIn the following, we will formally present our theoretical results, with each claim rigorously supported by corresponding analysis.\n\n### 5.1 Theoretical guarantees for P1 and P3: linear stability analysis\n\nIn this subsection, we provide theoretical support for two key claims in our two-phase picture through a linear stability analysis: P1. _SAM escapes from the relatively sharp minima found by SGD exponentially fast_; P3. _SAM converges to a flatter minima compared to SGD_.\n\nDuring the late phase of training, the model remains close to some global minimum ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} and can be locally approximated by its linearization:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | flin‚Äã(ùíô;ùúΩ)=f‚Äã(ùíô;ùúΩ‚ãÜ)+‚ü®‚àáf‚Äã(ùíô;ùúΩ‚ãÜ),ùúΩ‚àíùúΩ‚ãÜ‚ü©.subscriptùëìlinùíôùúΩùëìùíôsuperscriptùúΩ‚ãÜ‚àáùëìùíôsuperscriptùúΩ‚ãÜùúΩsuperscriptùúΩ‚ãÜf\\_{\\\\rm lin}(\\\\bm{x};\\\\bm{\\\\theta})=f(\\\\bm{x};\\\\bm{\\\\theta}^{\\\\star})+\\\\left\\\\langle\\\\nabla f(\\\\bm{x};\\\\bm{\\\\theta}^{\\\\star}),\\\\bm{\\\\theta}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rangle. |  | (5) |\n\nConsequently, we can characterize the local dynamical stability (Strogatz, [2000]) of the SAM iterator near the global minimum on this linearized model.\n\nSimilar to the linear stability of SGD (Wu et al., [2022]), we define the linear stability of SAM in [Definition5.1]Definition 5.1 (Loss-based linear stability of SAM). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nNote that for a specific optimizer, only linearly stable minima can be selected.\n\n###### Definition 5.1(Loss-based linear stability of SAM).\n\nA global minimum ùúΩ‚ãÜsuperscriptùúΩ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is said to be linearly stable for SAM if there exists a C>0ùê∂0C>0 such that it holds for SAM on the linearized model ( [Equation5]In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) that ùîº‚Äã\\[‚Ñí‚Äã(ùúΩt)\\]‚â§C‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùúΩ0)\\],‚àÄt‚â•0formulae-sequenceùîºdelimited-\\[\\]‚ÑísubscriptùúΩùë°ùê∂ùîºdelimited-\\[\\]‚ÑísubscriptùúΩ0for-allùë°0\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\]\\\\leq C\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0})\\],\\\\forall t\\\\geq 0.\n\nWu et al. ( [2022]) has shown that the linear stability of stochastic algorithms is significantly influenced by the gradient noise ùùÉ‚Äã(ùúΩ)=‚àá‚ÑìŒæ‚Äã(ùúΩ)‚àí‚àá‚Ñí‚Äã(ùúΩ)ùùÉùúΩ‚àásubscript‚ÑìùúâùúΩ‚àá‚ÑíùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta})=\\\\nabla\\\\ell\\_{\\\\xi}(\\\\bm{\\\\theta})-\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}), where Œæùúâ\\\\xi denotes the index of a random sample.\nThus, it is crucial to consider the structural properties of the gradient noise in our analysis.\n\nGradient noise structure.\nA series of studies (Zhu et al., [2018]; Feng & Tu, [2021]; Wu et al., [2020b]; [2022]); Mori et al., [2022]; Wojtowytsch, [2024]) have established two key properties of the gradient noise ùùÉ‚Äã(ùúΩ)ùùÉùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta}): (i) its shape is highly anisotropic; (ii) its magnitude is loss dependent.\nSpecifically, by incorporating both the noise shape and magnitude, Mori et al. ( [2022]) has proposed an approximation for the gradient noise covariance Œ£‚Äã(ùúΩ)=1n‚Äã‚àëi=1nùùÉ‚Äã(ùúΩ)‚ÄãùùÉ‚Äã(ùúΩ)‚ä§Œ£ùúΩ1ùëõsuperscriptsubscriptùëñ1ùëõùùÉùúΩùùÉsuperscriptùúΩtop\\\\Sigma(\\\\bm{\\\\theta})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\bm{\\\\xi}(\\\\bm{\\\\theta})^{\\\\top}, suggesting Œ£‚Äã(ùúΩ)‚àº2‚Äã‚Ñí‚Äã(ùúΩ)‚ÄãG‚Äã(ùúΩ)similar-toŒ£ùúΩ2‚ÑíùúΩùê∫ùúΩ\\\\Sigma(\\\\bm{\\\\theta})\\\\sim 2\\\\mathcal{L}(\\\\bm{\\\\theta})G(\\\\bm{\\\\theta}).\n\nInspired by this approximation, we assume a weaker666‚ÄúWeaker‚Äù means that the approximation Œ£‚Äã(ùúΩ)‚àº2‚Äã‚Ñí‚Äã(ùúΩ)‚ÄãG‚Äã(ùúΩ)similar-toŒ£ùúΩ2‚ÑíùúΩùê∫ùúΩ\\\\Sigma(\\\\bm{\\\\theta})\\\\sim 2\\\\mathcal{L}(\\\\bm{\\\\theta})G(\\\\bm{\\\\theta}) can imply our Assumption [5.3]Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"). alignment property of the noise covariance Œ£‚Äã(ùúΩ)Œ£ùúΩ\\\\Sigma(\\\\bm{\\\\theta}) (see Assumption [5.1]Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) in our analysis, which has been theoretically and empirically validated in recent works (Wu et al., [2022]; Wu & Su, [2023]).\n\n###### Assumption 5.1(Gradient noise alignment).\n\nThere exists Œ≥>0ùõæ0\\\\gamma>0 s.t. Tr‚Å°(Œ£‚Äã(ùúΩ)‚ÄãG‚Äã(ùúΩ))2‚Äã‚Ñí‚Äã(ùúΩ)‚Äã‚à•G‚Äã(ùúΩ)‚à•F2‚â•Œ≥TrŒ£ùúΩùê∫ùúΩ2‚ÑíùúΩsuperscriptsubscriptdelimited-‚à•‚à•ùê∫ùúΩùêπ2ùõæ\\\\frac{\\\\operatorname{Tr}(\\\\Sigma(\\\\bm{\\\\theta})G(\\\\bm{\\\\theta}))}{2\\\\mathcal{L}(\\\\bm{\\\\theta})\\\\left\\\\lVert G(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{F}^{2}}\\\\geq\\\\gamma for all ùúΩùúΩ\\\\bm{\\\\theta}.\n\nBy analyzing the linear stability of SAM under this gradient noise alignment assumption, we establish two theorems supporting the two key claims P1 and P3.\n\n###### Theorem 5.1(P3. Proof in [SectionB.1]B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nLet ùõâ‚ãÜsuperscriptùõâ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} be a global minimum that is linearly stable for SAM, and suppose Assumption [5.1]Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") holds.\nThen we have\n‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2‚Äã(1+œÅ2‚ÄãŒ≥B‚Äã‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2)‚â§BŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ21superscriptùúå2ùõæùêµsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma}{B}\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\right)\\\\leq\\\\frac{B}{\\\\eta^{2}\\\\gamma}.\n\n[Theorem5.1]Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") characterizes the sharpness of the linearly stable minima for SAM, which is influenced by the learning rate Œ∑ùúÇ\\\\eta, the batch size BùêµB, and the perturbation radius œÅùúå\\\\rho.\nSince only linearly stable minima can be selected by optimizer, [Theorem5.1]Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") characterizes the sharpness of global minima selected by SAM.\nNotably, taking œÅ=0ùúå0\\\\rho=0 recovers the corresponding result for SGD (see [Table2]In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")).\n\n|     |     |     |\n| --- | --- | --- |\n|  | SAM (Theorem [5.1]Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) | SGD (Wu et al., [2022]) |\n| Sharpness bound | ‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2‚ãÖ(1+œÅ2‚ÄãŒ≥B‚Äã‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2)‚â§BŒ∑2‚ÄãŒ≥‚ãÖsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ21superscriptùúå2ùõæùêµsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\cdot\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma}{B}\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\right)\\\\leq\\\\frac{B}{\\\\eta^{2}\\\\gamma} | ‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2‚â§BŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\leq\\\\frac{B}{\\\\eta^{2}\\\\gamma} |\n\nTable 2: Comparison of the sharpness of global minima selected by SAM and SGD.\n\nSupport for  P3.\nWe compare the bounds on the sharpness of the global minima selected by SAM and SGD in [Table2]In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nThe additional term 1+œÅ2‚ÄãŒ≥‚Äã‚à•H‚Äã(ùúΩ‚ãÜ)‚à•F2>11superscriptùúå2ùõæsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùúΩ‚ãÜùêπ211+\\\\rho^{2}\\\\gamma\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}>1 in SAM‚Äôs bound impose stricter requirement on the sharpness of global minima selected by SAM compared to SGD, which supports our key claim P3 that SAM tends to select flatter global minima over SGD.\nThis term arises from SAM‚Äôs inner update, i.e., ùúΩt+1/2=ùúΩt+œÅ‚Äã‚àá‚ÑìŒæt‚Äã(ùúΩt)=ùúΩt+œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)+œÅ‚Äã(‚àá‚ÑìŒæt‚Äã(ùúΩt)‚àí‚àá‚Ñí‚Äã(ùúΩt))subscriptùúΩùë°12subscriptùúΩùë°ùúå‚àásubscript‚Ñìsubscriptùúâùë°subscriptùúΩùë°subscriptùúΩùë°ùúå‚àá‚ÑísubscriptùúΩùë°ùúå‚àásubscript‚Ñìsubscriptùúâùë°subscriptùúΩùë°‚àá‚ÑísubscriptùúΩùë°\\\\bm{\\\\theta}\\_{t+1/2}=\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\ell\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}\\_{t})=\\\\bm{\\\\theta}\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})+\\\\rho(\\\\nabla\\\\ell\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}\\_{t})-\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})).\nIntuitively, the ascent update œÅ‚Äã‚àá‚Ñí‚Äã(ùúΩt)ùúå‚àá‚ÑísubscriptùúΩùë°\\\\rho\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t}) tends to increase the loss, while the noise œÅ‚Äã(‚àá‚ÑìŒæt‚Äã(ùúΩt)‚àí‚àá‚Ñí‚Äã(ùúΩt))ùúå‚àásubscript‚Ñìsubscriptùúâùë°subscriptùúΩùë°‚àá‚ÑísubscriptùúΩùë°\\\\rho(\\\\nabla\\\\ell\\_{\\\\xi\\_{t}}(\\\\bm{\\\\theta}\\_{t})-\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})) introduces extra stochasticity.\nThese factors together contribute to the flatter-minima selection by SAM.\n\n###### Theorem 5.2(P1. Proof in [SectionB.1]B.1 Proof of Theorem 5.1 and 5.2 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nLet ùõâ‚ãÜsuperscriptùõâ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} be a global minimum, and suppose Assumption [5.1]Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") holds.\nIf ‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2‚Äã(1+œÅ2‚ÄãŒ≥B‚Äã‚à•H‚Äã(ùõâ‚ãÜ)‚à•F2)>BŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ21superscriptùúå2ùõæùêµsuperscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptùõâ‚ãÜùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\left(1+\\\\frac{\\\\rho^{2}\\\\gamma}{B}\\\\left\\\\lVert H(\\\\bm{\\\\theta}^{\\\\star})\\\\right\\\\rVert\\_{F}^{2}\\\\right)>\\\\frac{B}{\\\\eta^{2}\\\\gamma}, then ùõâ‚ãÜsuperscriptùõâ‚ãÜ\\\\bm{\\\\theta}^{\\\\star} is linearly non-stable for SAM. Indeed, ùîº‚Äã\\[‚Ñí‚Äã(ùõât)\\]‚â•Ct‚Äãùîº‚Äã\\[‚Ñí‚Äã(ùõâ0)\\]ùîºdelimited-\\[\\]‚Ñísubscriptùõâùë°superscriptùê∂ùë°ùîºdelimited-\\[\\]‚Ñísubscriptùõâ0\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\]\\\\geq C^{t}\\\\mathbb{E}\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0})\\] holds for all t>0ùë°0t>0 with C>1ùê∂1C>1.\n\n[Theorem5.2]Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), together with [Theorem5.1]Theorem 5.1 (P3. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), characterize the necessary condition for a global minimum to be linearly stable for SAM, namely the stability condition of SAM.\nFurthermore, [Theorem5.2]Theorem 5.2 (P1. Proof in Section B.1.). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") illustrates that if a global minimum fails to meet the stability condition of SAM, the SAM iterator will escapes from the minimum exponentially fast.\n\nSupport for  P1.\nAlthough the sharpness bound for SGD in [Table2]In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") is an upper bound, Wu et al. ( [2022]) empirically demonstrates that the bound is nearly tight, with SGD solutions approximately satisfying ‚à•H‚Äã(ùúΩSGDend)‚à•F2‚âàBŒ∑2‚ÄãŒ≥superscriptsubscriptdelimited-‚à•‚à•ùêªsuperscriptsubscriptùúΩSGDendùêπ2ùêµsuperscriptùúÇ2ùõæ\\\\left\\\\lVert H(\\\\bm{\\\\theta}\\_{\\\\text{SGD}}^{\\\\text{end}})\\\\right\\\\rVert\\_{F}^{2}\\\\approx\\\\frac{B}{\\\\eta^{2}\\\\gamma}.\nThus, with the same Œ∑ùúÇ\\\\eta and BùêµB, the solution found by SGD cannot satisfy the stability condition of SAM.\nThis leads to our key claim P1 that SAM escapes from the sharp minima found by SGD exponentially fast, as validated by our experiments in [Figure4]In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (b).\n\nComparison with other linear stability analyses of SAM (Shin et al., [2023]; Behdin et al., [2023]).\nThese works have focused on the norm-based linear stability, characterized by ùîº‚Äã\\[‚à•ùúΩt‚àíùúΩ‚ãÜ‚à•2\\]‚â§C‚Äã‚à•ùúΩ0‚àíùúΩ‚ãÜ‚à•2,‚àÄt‚â•0formulae-sequenceùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•subscriptùúΩùë°superscriptùúΩ‚ãÜ2ùê∂superscriptdelimited-‚à•‚à•subscriptùúΩ0superscriptùúΩ‚ãÜ2for-allùë°0\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{t}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rVert^{2}\\]\\\\leq C\\\\left\\\\lVert\\\\bm{\\\\theta}\\_{0}-\\\\bm{\\\\theta}^{\\\\star}\\\\right\\\\rVert^{2},\\\\forall t\\\\geq 0, which is stricter than our loss-based stability (see [Definition5.1]Definition 5.1 (Loss-based linear stability of SAM). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) due to the presence of degenerate directions in over-parameterized models (see Lemma [B.2]Lemma B.2. ‚Ä£ B.4 Comparison between two Definitions on Linear Stability ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")).\nAnother key difference is the novel use of the alignment property of gradient noise (see Assumption [5.1]Assumption 5.1 (Gradient noise alignment). ‚Ä£ 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")) in our analysis, enabling us to derive a concrete bound on the sharpness of SAM‚Äôs solutions.\n\n### 5.2 Theoretical Guarantee for P2: Beyond Local Analysis\n\nIn this subsection, we provide theoretical support for another key claim in our two-phase picture: P2. _SAM remains within the current valley during escape._\n\nSub-quadratic landscape.\nIn high-loss regions, the local linearization in [Equation5]In 5.1 Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") no longer provides a valid approximation for neural networks, and consequently, the _quadratic approximation_ of the neural network loss landscape\n_fails to_ capture its true structure.\nBeyond the quadratic landscape, Ma et al. ( [2022]) has introduced the concept of the _sub-quadratic landscape_: the loss grows slower than a quadratic function, and the landscape in high-loss regions is significantly flatter than in low-loss regions.\nThe sub-quadratic landscape has been empirically verified in high-loss regions, and is able to explain the Edge of Stability phenomenon (Cohen et al., [2021]) (also observed in Wu et al. ( [2018]); Jastrzebski et al. ( [2020])), which the quadratic landscape cannot account for.\n\nWhile [Section5.1]Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") focuses on a local analysis near global minima, the analysis here is necessarily non-local, as SAM might iterate into high-loss regions during escape.\nIn this subsection, we need to show that SAM remains within the current valley during escape under a sub-quadratic landscape.\n\nAdditional setup.\nFor simplicity, we assume a model size of p=1ùëù1p=1 and consider the full-batch SAM, i.e., Œ∏t+1=Œ∏t‚àíŒ∑‚Äã‚àá‚Ñí‚Äã(Œ∏t+œÅ‚Äã‚àá‚Ñí‚Äã(Œ∏t))subscriptùúÉùë°1subscriptùúÉùë°ùúÇ‚àá‚ÑísubscriptùúÉùë°ùúå‚àá‚ÑísubscriptùúÉùë°\\\\theta\\_{t+1}=\\\\theta\\_{t}-\\\\eta\\\\nabla\\\\mathcal{L}(\\\\theta\\_{t}+\\\\rho\\\\nabla\\\\mathcal{L}(\\\\theta\\_{t})).\nThis setup is sufficient to illustrate that SAM will remain within the current valley under a sub-quadratic landscape.\n\n###### Definition 5.2(Sub-quadratic landscape for p=1ùëù1p=1).\n\nLet Œ∏‚ãÜ=0superscriptùúÉ‚ãÜ0\\\\theta^{\\\\star}=0 be a global minimum of ‚Ñí‚Ñí\\\\mathcal{L} with sharpness ‚Ñí‚Ä≤‚Ä≤‚Äã(0)=a>0superscript‚Ñí‚Ä≤‚Ä≤0ùëé0\\\\mathcal{L}^{\\\\prime\\\\prime}(0)=a>0.\nThe valley V=\\[‚àíc,c\\]ùëâùëêùëêV=\\[-c,c\\] is termed sub-quadratic if for all z,z1,z2‚ààVùëßsubscriptùëß1subscriptùëß2ùëâz,z\\_{1},z\\_{2}\\\\in V, it holds that z‚Äã‚Ñí‚Ä≤‚Äã(z)‚â•0ùëßsuperscript‚Ñí‚Ä≤ùëß0z\\\\mathcal{L}^{\\\\prime}(z)\\\\geq 0 and ‚Ñí‚Ä≤‚Ä≤‚Äã(\\|z1\\|)‚â•‚Ñí‚Ä≤‚Ä≤‚Äã(\\|z2\\|)superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß1superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß2\\\\mathcal{L}^{\\\\prime\\\\prime}(\\|z\\_{1}\\|)\\\\geq\\\\mathcal{L}^{\\\\prime\\\\prime}(\\|z\\_{2}\\|) if \\|z1\\|‚â§\\|z2\\|subscriptùëß1subscriptùëß2\\|z\\_{1}\\|\\\\leq\\|z\\_{2}\\|.\n\nFollowing Theorem 1 in (Ma et al., [2022]), we define the sub-quadratic landscape in [Definition5.2]Definition 5.2 (Sub-quadratic landscape for ùëù=1). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nSpecifically, for any 0<z1<z2<c0subscriptùëß1subscriptùëß2ùëê0<z\\_{1}<z\\_{2}<c, it holds that ‚Ñí‚Ä≤‚Ä≤‚Äã(z1)>‚Ñí‚Ä≤‚Ä≤‚Äã(z2)superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß1superscript‚Ñí‚Ä≤‚Ä≤subscriptùëß2\\\\mathcal{L}^{\\\\prime\\\\prime}(z\\_{1})>\\\\mathcal{L}^{\\\\prime\\\\prime}(z\\_{2}) and ‚Ñí‚Äã(z1)<‚Ñí‚Äã(z2)‚Ñísubscriptùëß1‚Ñísubscriptùëß2\\\\mathcal{L}(z\\_{1})<\\\\mathcal{L}(z\\_{2}), indicating that high-loss regions are flatter than low-loss regions.\nThe same applies for 0>z1>z2>‚àíc0subscriptùëß1subscriptùëß2ùëê0>z\\_{1}>z\\_{2}>-c.\n\n###### Proposition 5.1(P2. Proof in [SectionB.2]B.2 Proof of Proposition 5.1 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nUnder Definition [5.2]Definition 5.2 (Sub-quadratic landscape for ùëù=1). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), assume the landscape is sub-quadratic in the valley V=\\[‚àí2‚Äãb,2‚Äãb\\]ùëâ2ùëè2ùëèV=\\[-2b,2b\\].\nThen, for all initialization Œ∏0‚àà(‚àíb,b)subscriptùúÉ0ùëèùëè\\\\theta\\_{0}\\\\in(-b,b), and Œ∑,œÅùúÇùúå\\\\eta,\\\\rho s.t. Œ∑<minz‚ààV‚Å°b/\\|‚Ñí‚Ä≤‚Äã(z)\\|ùúÇsubscriptùëßùëâùëèsuperscript‚Ñí‚Ä≤ùëß\\\\eta<\\\\min\\\\limits\\_{z\\\\in V}b/\\|\\\\mathcal{L}^{\\\\prime}(z)\\|, œÅ‚â§min‚Å°{1/a,Œ∑‚ãÖmin0<\\|z\\|<b‚Å°\\|‚Ñí‚Ä≤‚Äã(2‚Äãz)/‚Ñí‚Ä≤‚Äã(z)\\|}ùúå1ùëé‚ãÖùúÇsubscript0ùëßùëèsuperscript‚Ñí‚Ä≤2ùëßsuperscript‚Ñí‚Ä≤ùëß\\\\rho\\\\leq\\\\min\\\\{1/a,\\\\eta\\\\cdot\\\\min\\\\limits\\_{0<\\|z\\|<b}\\|\\\\mathcal{L}^{\\\\prime}(2z)/\\\\mathcal{L}^{\\\\prime}(z)\\|\\\\}, the full-batch SAM will remain within the valley VùëâV, i.e., Œ∏t‚ààVsubscriptùúÉùë°ùëâ\\\\theta\\_{t}\\\\in V for all t‚àà‚Ñïùë°‚Ñït\\\\in\\\\mathbb{N}.\n\n[Proposition5.1]Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") shows that under a sub-quadratic landscape, even if SAM escapes the minimum Œ∏‚ãÜsuperscriptùúÉ‚ãÜ\\\\theta^{\\\\star} when Œ∑>2/a‚Äã(1+a‚ÄãœÅ)ùúÇ2ùëé1ùëéùúå\\\\eta>{2}/{a(1+a\\\\rho)} and Œ∏0‚âàŒ∏‚ãÜsubscriptùúÉ0superscriptùúÉ‚ãÜ\\\\theta\\_{0}\\\\approx\\\\theta^{\\\\star}, it will still remain within the current valley.\nThis proposition holds when Œ∑<minz‚ààVb‚Å°b/\\|‚Ñí‚Ä≤‚Äã(z)\\|ùúÇsubscriptùëßsubscriptùëâùëèùëèsuperscript‚Ñí‚Ä≤ùëß\\\\eta<\\\\min\\\\limits\\_{z\\\\in V\\_{b}}b/\\|\\\\mathcal{L}^{\\\\prime}(z)\\|, where the upper bound minz‚ààVb‚Å°b/\\|‚Ñí‚Ä≤‚Äã(z)\\|subscriptùëßsubscriptùëâùëèùëèsuperscript‚Ñí‚Ä≤ùëß\\\\min\\\\limits\\_{z\\\\in V\\_{b}}b/\\|\\\\mathcal{L}^{\\\\prime}(z)\\| and can be sufficiently large under highly sub-quadratic landscapes (see Example [B.1]Example B.1 (highly sub-quadratic landscape). ‚Ä£ B.2 Proof of Proposition 5.1 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")).\n\nSupport for P2.\nProposition [5.1]Proposition 5.1 (P2. Proof in Section B.2.). ‚Ä£ 5.2 Theoretical Guarantee for P2: Beyond Local Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") supports our key claim P2 that SAM remains within the current valley during escape. Intuitively, as shown in [Section5.1]Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the low-loss region around the sharp minimum found by SGD cannot satisfy SAM‚Äôs stability condition, causing SAM to escape toward higher-loss regions;\nhowever, under the sub-quadratic landscape, the high-loss regions are much flatter, which satisfies SAM‚Äôs stability condition and prevents it from escaping the current valley.\nThe experiment in [Figure4]In 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (c) back up this theoretical claim.\n\n### 5.3 Theoretical Guarantee for P4: Convergence Analysis\n\nIn this subsection, we provide theoretical support for the final claim in our two-phase picture: P4. _The convergence rate of SAM is significantly fast_.\n\nTo establish the convergence results for stochastic optimization algorithms, it is often necessary to make assumptions about the loss landscape and the magnitude of gradient noise ùùÉ‚Äã(ùúΩ)ùùÉùúΩ\\\\bm{\\\\xi}(\\\\bm{\\\\theta}).\n\n###### Assumption 5.2(Loss landscape: LùêøL-smoothness and Polyak‚Äì≈Åojasiewicz).\n\n(i) There exists L>0ùêø0L>0 s.t. ‚à•H‚Äã(ùúΩ)‚à•2‚â§Lsubscriptdelimited-‚à•‚à•ùêªùúΩ2ùêø\\\\left\\\\lVert H(\\\\bm{\\\\theta})\\\\right\\\\rVert\\_{2}\\\\leq L for all ùúΩùúΩ\\\\bm{\\\\theta}; (ii) There exists Œº>0ùúá0\\\\mu>0 s.t. ‚à•‚àá‚Ñí‚Äã(ùúΩ)‚à•2‚â•2‚ÄãŒº‚Äã‚Ñí‚Äã(ùúΩ)superscriptdelimited-‚à•‚à•‚àá‚ÑíùúΩ22ùúá‚ÑíùúΩ\\\\left\\\\lVert\\\\nabla\\\\mathcal{L}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\\\geq 2\\\\mu\\\\mathcal{L}(\\\\bm{\\\\theta}) for all ùúΩùúΩ\\\\bm{\\\\theta}.\n\nAssumption [5.2]Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") are quite standard and is frequently used in the non-convex optimization literature (Karimi et al., [2016]).\nSpecifically, for neural networks, if ‚Ñí‚Äã(‚ãÖ)‚Ñí‚ãÖ\\\\mathcal{L}(\\\\cdot) is four-times continuously differentiable, this assumption holds at least near the set of global minima of ‚Ñí‚Ñí\\\\mathcal{L}(Arora et al., [2022]).\n\n###### Assumption 5.3(Gradient noise magnitude).\n\nThere exists œÉ>0ùúé0\\\\sigma>0 s.t. ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2‚Äã‚Ñí‚Äã(ùúΩ),‚àÄùúΩùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2‚ÑíùúΩfor-allùúΩ\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2}\\\\mathcal{L}(\\\\bm{\\\\theta}),\\\\forall\\\\bm{\\\\theta}.\n\nThe bounded variance assumption ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2} is commonly employed in classical optimization theory (Bubeck et al., [2015]).\nHowever, as discussed in Section [5.1]Theoretical guarantees for P1 and P3: linear stability analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), recent studies (Mori et al., [2022]; Feng & Tu, [2021]; Liu et al., [2021]; Wojtowytsch, [2024]) have shown that the magnitude of SGD noise is also bounded by the loss value.\nThus, we introduce Assumption [5.3]Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"): ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2‚Äã‚Ñí‚Äã(ùúΩ)ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2‚ÑíùúΩ\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2}\\\\mathcal{L}(\\\\bm{\\\\theta}).\nThis indicates that the noise magnitude diminishes to zero at global minima, contrasting sharply with the classical bounded variance assumption and closely aligning with real-world scenarios.\n\nUnder these assumptions, we present the convergence result for stochastic SAM in [Theorem5.3]Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\n###### Theorem 5.3(P4. Proof in [SectionB.3]B.3 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs in Section 5 ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").).\n\nUnder Assumption [5.2]Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") and [5.3]Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), let {ùõât}tsubscriptsubscriptùõâùë°ùë°\\\\{\\\\bm{\\\\theta}\\_{t}\\\\}\\_{t} be the parameters trained by SAM.\nIf Œ∑‚â§min‚Å°{1/L,Œº‚ÄãB/2‚ÄãL‚ÄãœÉ2}ùúÇ1ùêøùúáùêµ2ùêøsuperscriptùúé2\\\\eta\\\\leq\\\\min\\\\{1/L,\\\\mu B/2L\\\\sigma^{2}\\\\} and œÅ‚â§min‚Å°{1/L,Œº‚ÄãB/4‚ÄãL‚ÄãœÉ2,Œ∑‚ÄãŒº2/24‚ÄãL2}ùúå1ùêøùúáùêµ4ùêøsuperscriptùúé2ùúÇsuperscriptùúá224superscriptùêø2\\\\rho\\\\leq\\\\min\\\\left\\\\{1/L,\\\\mu B/4L\\\\sigma^{2},\\\\eta\\\\mu^{2}/24L^{2}\\\\right\\\\}, then we have ùîº‚Äã\\[‚Ñí‚Äã(ùõât)\\]‚â§(1‚àíŒ∑‚ÄãŒº/2)t‚Äã‚Ñí‚Äã(ùõâ0),‚àÄt‚àà‚Ñïformulae-sequenceùîºdelimited-\\[\\]‚Ñísubscriptùõâùë°superscript1ùúÇùúá2ùë°‚Ñísubscriptùõâ0for-allùë°‚Ñï\\\\mathbb{E}\\\\left\\[\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{t})\\\\right\\]\\\\leq\\\\left(1-\\\\eta\\\\mu/2\\\\right)^{t}\\\\mathcal{L}(\\\\bm{\\\\theta}\\_{0}),\\ \\\\forall t\\\\in\\\\mathbb{N}.\n\nSupport for  P4. [Theorem5.3]Theorem 5.3 (P4. Proof in Section B.3.). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") supports our key claim P4 that the convergence rate of stochastic SAM is significantly fast,\nand notably faster than the previous result on SAM‚Äôs convergence rate (Andriushchenko & Flammarion, [2022]).\n\nComparison with other convergence results for stochastic SAM (Andriushchenko & Flammarion, [2022]; Shin et al., [2023]).\nThese works, along with our result, all study the convergence on stochastic SAM under the standard Assumption [5.2]Assumption 5.2 (Loss landscape: ùêø-smoothness and Polyak‚Äì≈Åojasiewicz). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nAndriushchenko & Flammarion ( [2022])) has shown that stochastic SAM converges under a polynomially fast rate of ùí™‚Äã(1/t)ùí™1ùë°\\\\mathcal{O}(1/t), but this is much slower than our exponentially fast rate.\nThe difference lies in the assumptions on gradient noise magnitude: they have used the classical assumption ùîº‚Äã\\[‚à•ùùÉ‚Äã(ùúΩ)‚à•2\\]‚â§œÉ2ùîºdelimited-\\[\\]superscriptdelimited-‚à•‚à•ùùÉùúΩ2superscriptùúé2\\\\mathbb{E}\\[\\\\left\\\\lVert\\\\bm{\\\\xi}(\\\\bm{\\\\theta})\\\\right\\\\rVert^{2}\\]\\\\leq\\\\sigma^{2}, whereas we rely on the more realistic Assumption [5.3]Assumption 5.3 (Gradient noise magnitude). ‚Ä£ 5.3 Theoretical Guarantee for P4: Convergence Analysis ‚Ä£ 5 How Does SAM Efficiently Select Flatter Minima Late in Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\nShin et al. ( [2023]) has also proved that stochastic SAM converges exponentially fast.\nHowever, their analysis is based on an additional interpolation assumption due to over-parameterization.",
      "citations": [
        {
          "start_pos": 9019,
          "end_pos": 9035,
          "text": "Strogatz, [2000]",
          "paper_id": "bib.bib50",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9148,
          "end_pos": 9165,
          "text": "Wu et al., [2022]",
          "paper_id": "bib.bib60",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10294,
          "end_pos": 10312,
          "text": "Wu et al. ( [2022]",
          "paper_id": "bib.bib60",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10757,
          "end_pos": 10775,
          "text": "Zhu et al., [2018]",
          "paper_id": "bib.bib64",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10777,
          "end_pos": 10794,
          "text": "Feng & Tu, [2021]",
          "paper_id": "bib.bib18",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10796,
          "end_pos": 10814,
          "text": "Wu et al., [2020b]",
          "paper_id": "bib.bib57",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10825,
          "end_pos": 10844,
          "text": "Mori et al., [2022]",
          "paper_id": "bib.bib43",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10846,
          "end_pos": 10865,
          "text": "Wojtowytsch, [2024]",
          "paper_id": "bib.bib55",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 11101,
          "end_pos": 11121,
          "text": "Mori et al. ( [2022]",
          "paper_id": "bib.bib43",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 12427,
          "end_pos": 12444,
          "text": "Wu et al., [2022]",
          "paper_id": "bib.bib60",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 12446,
          "end_pos": 12461,
          "text": "Wu & Su, [2023]",
          "paper_id": "bib.bib58",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 15452,
          "end_pos": 15469,
          "text": "Wu et al., [2022]",
          "paper_id": "bib.bib60",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 20443,
          "end_pos": 20461,
          "text": "Wu et al. ( [2022]",
          "paper_id": "bib.bib60",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 21255,
          "end_pos": 21274,
          "text": "Shin et al., [2023]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 21276,
          "end_pos": 21297,
          "text": "Behdin et al., [2023]",
          "paper_id": "bib.bib10",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib49",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 23575,
          "end_pos": 23593,
          "text": "Ma et al. ( [2022]",
          "paper_id": "bib.bib40",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 23932,
          "end_pos": 23952,
          "text": "Cohen et al., [2021]",
          "paper_id": "bib.bib14",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 23972,
          "end_pos": 23990,
          "text": "Wu et al. ( [2018]",
          "paper_id": "bib.bib59",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 23993,
          "end_pos": 24020,
          "text": "Jastrzebski et al. ( [2020]",
          "paper_id": "bib.bib25",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 25681,
          "end_pos": 25698,
          "text": "Ma et al., [2022]",
          "paper_id": "bib.bib40",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 31155,
          "end_pos": 31176,
          "text": "Karimi et al., [2016]",
          "paper_id": "bib.bib28",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 31367,
          "end_pos": 31387,
          "text": "Arora et al., [2022]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 31949,
          "end_pos": 31970,
          "text": "Bubeck et al., [2015]",
          "paper_id": "bib.bib12",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 32246,
          "end_pos": 32265,
          "text": "Mori et al., [2022]",
          "paper_id": "bib.bib43",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 32267,
          "end_pos": 32284,
          "text": "Feng & Tu, [2021]",
          "paper_id": "bib.bib18",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 32286,
          "end_pos": 32304,
          "text": "Liu et al., [2021]",
          "paper_id": "bib.bib35",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 32306,
          "end_pos": 32325,
          "text": "Wojtowytsch, [2024]",
          "paper_id": "bib.bib55",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 35275,
          "end_pos": 35310,
          "text": "Andriushchenko & Flammarion, [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 35376,
          "end_pos": 35411,
          "text": "Andriushchenko & Flammarion, [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 35413,
          "end_pos": 35432,
          "text": "Shin et al., [2023]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 36609,
          "end_pos": 36629,
          "text": "Shin et al. ( [2023]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "6 Is SAM Necessary in the Early Phase of Training?": {
      "content": "Since we have both empirically observed and theoretically justified SAM‚Äôs efficiency in selecting flatter minima in the late phase of training, one might question the necessity of using SAM in the early phase.\nIn this section, we demonstrate that applying SAM during the early phase offers only marginal benefits for generalization and sharpness compared to full SGD training.\nThus, we conjecture that the optimization algorithm chosen at the end of training is more critical in shaping the final solution‚Äôs properties.\nBased on this viewpoint, we extend our findings from SAM to Adversarial Training.\n\n![Refer to caption]Figure 5: The impact of SAM training proportion on generalization/sharpness when switches from SAM to SGD.\nThe generalization gap between the models ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}(top row)/the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}(bottom row) vs. the SAM training proportion of ùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}.\nùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t} refers to the model obtained by switching from SAM to SGD, while ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T} represents the model trained entirely with SAM.\nHere, TùëáT is the total number of training epochs, and tùë°t is the switching point.\nWe define SAM training proportion of ùúΩSAM‚ÜíSGD,tTsubscriptsuperscriptùúΩùëá‚ÜíSAMSGDùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t} as t/Tùë°ùëát/T and adjust it by varying tùë°t while keeping TùëáT fixed.\nDots represent the mean over three trials with different random seeds, and error bars indicate standard deviations.\nResults on more datasets and architectures can be found in [SectionA.4]A.4 More Experiments on Early-Phase SAM ‚Ä£ Appendix A More Experimental Details and Results ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\").\n\nEarly-phase SAM offers only marginal improvements over SGD in generalization and sharpness.\nWe conduct experiments under various settings to investigate the effect of applying SAM during the early phase of training, followed by SGD, on generalization and sharpness.\nSimilarly as [Section4]SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we use the switching method but switches from SAM to SGD, to obtain the model ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}.\nWe also train a baseline model entirely with SAM, yielding ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}.\nBy varying tùë°t while keep TùëáT fixed, we adjust the proportion of SAM training, defined as t/Tùë°ùëát/T, to examine its impact on the generalization gap between ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T} and ùúΩSAMTsuperscriptsubscriptùúΩSAMùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}}^{T}, as well as the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}.\nIn [Figure5]In 6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), the generalization gap remains substantial even when trained with SAM for most of the time (e.g., t/T=0.8ùë°ùëá0.8t/T=0.8).\nA similar trend is observed in the sharpness of ùúΩSAM‚ÜíSGD,tTsuperscriptsubscriptùúΩ‚ÜíSAMSGDùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SAM}\\\\to\\\\textrm{SGD},t}^{T}.\nOnly full SAM training (i.e., t/T=1ùë°ùëá1t/T=1) consistently finds the flat minima.\nThis suggests that applying SAM before SGD yields only limited improvements in generalization and sharpness compared to training entirely with SGD.\n\nTogether with findings in [Section4]SAM Efficiently Selects Flatter Minima Late In Training ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\"), we conjecture that the optimization algorithm chosen in the late training phase is more critical in determining the final solution‚Äôs properties.\nHowever, current findings are based solely on generalization/sharpness‚Äîcan we extend to other properties?\n\n![Refer to caption]Figure 6: AT improves robustness efficiently even when applied only during the final few epochs of training.\n(a)\nRobust/natural error vs. training epochs for model trained with different strategies.\n(b)\nRobust/natural error of ùúΩSGD‚ÜíATTsuperscriptsubscriptùúΩ‚ÜíSGDATùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT}}^{T} vs. the proportion of AT epochs (T‚àít)/Tùëáùë°ùëá(T-t)/T.\nIn both (a) and (b), dashed lines represents the robust error ErrùíüperturbsubscriptErrsubscriptùíüperturb\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{perturb}}}, and solid lines presents the natural error ErrùíücleansubscriptErrsubscriptùíüclean\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{clean}}}.\nBlue and green curves correspond to models trained solely with SGD and AT, i.e., ùúΩSGDTsubscriptsuperscriptùúΩùëáSGD\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}} and ùúΩATTsubscriptsuperscriptùúΩùëáAT\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{AT}}, respectively.\nOrange curves indicate models trained with the switching method, switching from SGD to AT at epoch tùë°t, i.e., ùúΩSGD‚ÜíAT,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDATùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}.\nAll models are trained for T=200ùëá200T=200 epochs.\nIn (a), we set the switching epoch tùë°t for ùúΩSGD‚ÜíAT,tTsubscriptsuperscriptùúΩùëá‚ÜíSGDATùë°\\\\bm{\\\\theta}^{T}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t} to 180180180.\nIn (b), we vary tùë°t while keep TùëáT fixed to adjust the AT training proportion for ùúΩSGD‚ÜíATTsuperscriptsubscriptùúΩ‚ÜíSGDATùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT}}^{T}.\nAll results are averaged over five trials with different random seeds.\n\nExtension: Adversarial Training efficiently finds robust minima late in training.\nAdversarial Training (AT) (Madry et al., [2018]), in which networks are trained on adversarial examples (Szegedy et al., [2014]), significantly improves the robustness of neural networks.\nRecently, Zhang et al. ( [2024]) highlighted a duality between SAM and AT: while SAM perturbs the model parameters along training (see [Equation1]In 3 Background and Preliminaries ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\")), AT perturbs input samples, with both methods relying on gradients for perturbations.\nHere, we pose the question: can our findings on SAM be extended to AT?\n\nSimilar to SAM, we discover that applying AT only during the final few epochs yields robustness comparable to training entirely with AT.\nWith the switching method, which switches from SGD to AT at epoch tùë°t, we obtain the model ùúΩSGD‚ÜíAT,tTsuperscriptsubscriptùúΩ‚ÜíSGDATùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}^{T}.\nWe evaluate its robustness by classification error on adversarial examples, termed robust error Errùíüperturb‚Å°(ùúΩ)subscriptErrsubscriptùíüperturbùúΩ\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{perturb}}}(\\\\bm{\\\\theta}), and its performance on clean examples, referred to as natural error Errùíüclean‚Å°(ùúΩ)subscriptErrsubscriptùíücleanùúΩ\\\\operatorname{Err}\\_{\\\\mathcal{D}\\_{\\\\textrm{clean}}}(\\\\bm{\\\\theta}).\nIn [Figure6]In 6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (a), the robust error of ùúΩSGD‚ÜíAT,tTsuperscriptsubscriptùúΩ‚ÜíSGDATùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}^{T} drops sharply after switching to AT at 180180180 epoch, matching that of full AT training, while the natural error only slightly spikes.\nAdditionally, we vary the switching point tùë°t to examine how the robustness of ùúΩSGD‚ÜíAT,tTsuperscriptsubscriptùúΩ‚ÜíSGDATùë°ùëá\\\\bm{\\\\theta}\\_{\\\\textrm{SGD}\\\\to\\\\textrm{AT},t}^{T} changes with the increasing proportion of AT epochs, i.e., (T‚àít)/Tùëáùë°ùëá(T-t)/T.\nIn [Figure6]In 6 Is SAM Necessary in the Early Phase of Training? ‚Ä£ Sharpness-Aware Minimization Efficiently Selects Flatter Minima Late In Training\") (b), the robust error of ùúΩATTsuperscriptsubscriptùúΩATùëá\\\\bm{\\\\theta}\\_{\\\\textrm{AT}}^{T} is comparable to that of models trained entirely with AT (i.e., when (T‚àít)/T=1ùëáùë°ùëá1(T-t)/T=1) once the proportion of AT epochs exceeds 00.\nThese results together confirm that AT efficiently enhances the robustness of neural networks late in training.",
      "citations": [
        {
          "start_pos": 6027,
          "end_pos": 6047,
          "text": "Madry et al., [2018]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6105,
          "end_pos": 6127,
          "text": "Szegedy et al., [2014]",
          "paper_id": "bib.bib51",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6198,
          "end_pos": 6219,
          "text": "Zhang et al. ( [2024]",
          "paper_id": "bib.bib63",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "7 Conclusion and Limitations": {
      "content": "In conclusion, we discovered an intriguing phenomenon that SAM efficiently selects flatter minima over SGD when applied late in training.\nWe provided a theoretical explanation for this by conducting a two-phase analysis of the learning dynamics after switching to SAM in the late training phase.\nOur results suggests that late training dynamics may play an important role if we want to understand the implicit bias of optimization algorithms.\nSince we extended our findings to AT with the switching method, a natural future direction is to generalize this novel approach to other optimization algorithms.\n\nLimitations.\nWe note that even if our theoretical setup closely reflects real settings, it still relies on several simplifications, such as assuming a constant perturbation radius œÅùúå\\\\rho and using squared loss.\nWe also note that our theory only explains the behaviour of SAM in the late training phase; it cannot account for the phenomena observed for early-phase SAM.",
      "citations": []
    }
  },
  "references": {
    "data": {
      "bib.bib1": {
        "id": "bib.bib1",
        "citation": "Achille et al. (2019)",
        "authors": "",
        "year": "",
        "title": "Critical learning periods in deep networks.",
        "venue": "International Conference on Learning Representations",
        "pages": "",
        "url": "https://openreview.net/forum?id=BkeStsCcKQ",
        "arxiv_id": "1711.08856",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Critical periods are time windows of early post-natal development during which sensory deficits can lead to permanent\nskill impairment (Kandel et al., [2013])). Researchers have documented\ncritical periods affecting a range of species and systems, from visual acuity in kittens (Wiesel & Hubel, [1963b]); Wiesel, [1982])) to song learning in birds (Konishi, [1985])).\nUncorrected eye defects (e.g., strabismus, cataracts) during the critical period for visual development lead to amblyopia in one in fifty adults.\n\nThe cause of critical periods is ascribed to the biochemical modulation of windows of neuronal plasticity (Hensch, [2004])). In this paper, however, we show that deep neural networks (DNNs), while completely devoid of such regulations, respond to sensory deficits in ways similar to those observed in humans and animal models. This surprising result suggests that critical periods may arise from information processing, rather than biochemical, phenomena.\n\nWe propose using the information in the weights, measured by an efficient approximation of the Fisher Information, to study critical period phenomena in DNNs. We show that, counterintuitively, the information in the weights does not increase monotonically during training. Instead, a rapid growth in information (‚Äúmemorization phase‚Äù) is followed by a reduction of information (‚Äúreorganization‚Äù or ‚Äúforgetting‚Äù phase), even as classification performance keeps increasing. This behavior is consistent across different tasks and network architectures. Critical periods are centered in the memorization phase.\n\nOur findings, described in [Section2]Experiments ‚Ä£ Critical Learning Periods in Deep Networks\"), indicate that the early transient is critical in determining the final solution of the optimization associated with training an artificial neural network. In particular, the effects of sensory deficits during a critical period cannot be overcome, no matter how much additional training is performed. Yet most theoretical studies have focused on the network behavior after convergence (Representation Learning) or on the asymptotic properties of the optimization scheme used for training (SGD).\n\nTo study this early phase, in [Section3]Fisher Information Analysis ‚Ä£ Critical Learning Periods in Deep Networks\"), we use the Fisher Information to quantify the effective connectivity of a network during training, and introduce the notion of Information Plasticity in learning. Information Plasticity is maximal during the memorization phase, and decreases in the reorganization phase. We show that deficit sensitivity during critical periods correlates strongly with the effective connectivity.\n\nIn [Section4]Discussion and Related Work ‚Ä£ Critical Learning Periods in Deep Networks\") we discuss our contribution in relation to previous work. When considered in conjunction with recent results on representation learning (Achille & Soatto, [2018])), our findings indicate that forgetting (reducing information in the weights) is critical to achieving invariance to nuisance variability as well as independence of the components of the representation, but comes at the price of reduced adaptability later in the training. We also hypothesize that the loss of physical connectivity in biology (neural plasticity) could be a consequence, rather than a cause, of the loss of Information Plasticity, which depends on how the information is distributed throughout a network during the early stages of learning. These results\nalso shed light on the common practice of pre-training a model on a task and then fine-tune it for another, one of the most rudimentary forms of transfer learning. Our experiments show that, rather than helpful, pre-training can be detrimental, even if the tasks are similar (e.g., same labels, slightly blurred images).\n\n![Refer to caption]Figure 1: DNNs exhibit critical periods.(A) Final accuracy achieved by a CNN trained with a cataract-like deficit as a function of the training epoch NùëÅN at which the deficit is removed (solid line). Performance is permanently impaired if the deficit is not corrected early enough, regardless of how much additional training is performed.\nAs in animal models, critical periods coincide with the early learning phase during which, in the absence of deficits, test accuracy would rapidly increase (dashed). (B) For comparison, we report acuity for kittens monocularly deprived since birth and tested at the time of eye-opening (solid), and normal visual acuity development (in kittens) as a function of their age (dashed) (Giffin & Mitchell, [1978]); Mitchell, [1988])).\n\nSensitivity during learning: (C) Final test accuracy of a DNN as a function of the onset of a short 40-epoch deficit. The decrease in the final performance can be used to measure the sensitivity to deficits. The most sensitive epochs corresponds to the early rapid learning phase, before the test error (dashed line) begins to plateau. Afterwards, the network is largely unaffected by the temporary deficit.\n(D) This can be compared with changes in the degree of functional disconnection (normalized numbers of V1 monocular cells disconnected from the contralateral eye) as a function of the kittens‚Äô age at the onset of a\n10-12-day deficit window (Olson & Freeman, [1980])). Dashed lines are as in A and B respectively, up to a re-scaling of the y-axis.",
            "citations": null
          },
          "2 Experiments": {
            "content": "A notable example of critical period-related deficit, commonly affecting humans, is amblyopia (reduced visual acuity in one eye) caused by cataracts during infancy or childhood (Taylor et al., [1979]); von Noorden, [1981])). Even after surgical correction of cataracts, the ability of the patients to regain normal acuity in the affected eye depends both on the duration of the deficit and on its age of onset, with earlier and longer deficits causing more severe effects.\nIn this section, we aim to study the effects of similar deficits in DNNs. To do so, we train a standard All-CNN architecture based on Springenberg et al. ( [2014])) (see [AppendixA]Appendix A Details of the experiments ‚Ä£ Critical Learning Periods in Deep Networks\")) to classify objects in small 32√ó32323232\\\\times 32 images from the CIFAR-10 dataset (Krizhevsky & Hinton, [2009])). We train with SGD using an exponential annealing schedule for the learning rate. To simulate the effect of cataracts, for the first t0subscriptùë°0t\\_{0} epochs the images in the dataset are downsampled to 8√ó8888\\\\times 8 and then upsampled back to 32√ó32323232\\\\times 32 using bilinear interpolation, in practice blurring the image and destroying small-scale details.111We employed this method, instead of a simpler Gaussian blur, since it has a very similar effect and makes the quantification of information loss clearer.\nAfter that, the training continues for 160160160 more epochs, giving the network time to converge and ensuring it is exposed to the same number of uncorrupted images as in the control (t0=0subscriptùë°00t\\_{0}=0) experiment.\n\nDNNs exhibit critical periods: In [Figure1]In 1 Introduction ‚Ä£ Critical Learning Periods in Deep Networks\"), we plot the final performance of a network affected by the deficit as a function of the epoch t0subscriptùë°0t\\_{0} at which the deficit is corrected.\nWe can readily observe the existence of a critical period: If the blur is not removed within the first 40-60 epochs, the final performance is severely decreased when compared to the baseline (up to a threefold increase in error).\nThe decrease in performance follows trends commonly observed in animals, and may be qualitatively compared, for example, to the loss of visual acuity observed in kittens monocularly deprived from birth as a function of the length of the deficit (Mitchell, [1988])).222See [AppendixC]Appendix C Experimental design and comparison with animal models ‚Ä£ Critical Learning Periods in Deep Networks\") for details on how to compare different models and deficits.\n\nWe can measure more accurately the sensitivity to a blur deficit during learning by introducing the deficit in a short window of constant length (40 epochs), starting at different epochs, and then measure the decrease in the DNN‚Äôs final performance compared to the baseline ( [Figure1]In 1 Introduction ‚Ä£ Critical Learning Periods in Deep Networks\")). Doing this, we observe that the sensitivity to the deficit peaks in the central part of the early rapid learning phase (at around 30 epochs), while introducing the deficit later produces little or no effect. A similar experiment performed on kittens, using a window of 10-12 days during which the animals are monocularly deprived, again shows a remarkable similarity between the profiles of the sensitivity curves (Olson & Freeman, [1980])).\n\n![Refer to caption]Figure 2: (Left) High-level perturbations do not induce a critical period.\nWhen the deficit only affects high-level features (vertical flip of the image) or the last layer of the CNN (label permutation), the network does not exhibit critical periods (test accuracy remains largely flat).\nOn the other hand, a sensory deprivation-like deficit (image is replaced by random noise) does cause a deficit, but the effect is less severe than in the case of image blur.\n(Right) Dependence of the critical period profile on the network‚Äôs depth. Adding more convolutional layers increases the effect of the deficit during its critical period (shown here is the decrease in test accuracy due to the deficit with respect to the test accuracy reached without deficits).\n\nHigh-level deficits are not associated with a critical period:\nA natural question is whether any change in the input data distribution\nwill have a corresponding critical period for learning.\nThis is not the case for neuronal\nnetworks, which remain plastic enough to adapt to high-level changes in sensory processing (Daw, [2014])). For example, it is well-reported that even adult humans can rapidly adapt to certain drastic changes, such as the inversion of the visual field (Stratton, [1896]); Kohler, [1964])).\nIn [Figure2]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\"), we observe that DNNs are also largely unaffected by high-level deficits ‚Äì such as vertical flipping of the image, or random permutation of the output labels: After deficit correction, the network quickly recovers its baseline performance.\nThis hints at a finer interplay between the structure of the data distribution and the optimization algorithm, resulting in the existence of a critical period.\n\nSensory deprivation:\nWe now apply to the network a more drastic deficit, where each image is replaced by white noise. [Figure2]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") shows hows this extreme deficit exhibits a remarkably less severe effect than the one obtained by only blurring images: Training the network with white noise does not provide any information on the natural images, and results in milder effects than those caused by a deficit (e.g., image blur), which instead conveys _some_ information, but leads the network to (incorrectly) learn that no fine structure is present in the images.\nA similar effect has been observed in animals, where a period of early sensory deprivation (dark-rearing) can lengthen the critical period and thus cause less severe effects than those documented in light-reared animals (Mower, [1991])). We refer the reader to [AppendixC]Appendix C Experimental design and comparison with animal models ‚Ä£ Critical Learning Periods in Deep Networks\") for a more detailed comparison between sensory deprivation and training on white noise.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 3: Critical periods in different DNN architectures and optimization schemes.(Left) Effect of an image blur deficit in a ResNet architecture trained on CIFAR-10 with learning rate annealing and (Center) in a deep fully-connected network trained on MNIST with a fixed learning rate. Different architectures, using different optimization methods and trained on different datasets, still exhibit qualitatively similar critical period behavior.\n\n(Right) Same experiment as in [Figure1]In 1 Introduction ‚Ä£ Critical Learning Periods in Deep Networks\"), but using a fixed learning rate instead of an annealing scheme. Although the time scale of the critical period is longer, the trends are similar, supporting the notion that critical periods cannot be explained solely in terms of the loss landscape of the optimization.\n(Bottom Left) Networks trained without weight decay have shorter and sharper critical periods. Gradually increasing the weight decay makes the critical period longer, until the point where it stops training properly.\n(Bottom Right) When using a different optimization method (Adam) we obtain similar results as with standard SGD.\n\nArchitecture, depth, and learning rate annealing: [Figure3]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") shows that a fully-connected network trained on the MNIST digit classification dataset also shows a critical period for the image blur deficit. Therefore, the convolutional structure is not necessary, nor is the use of natural images. Similarly, a ResNet-18 trained on CIFAR-10 also has a critical period, which is also remarkably sharper than the one found in a standard convolutional network ( [Figure1]In 1 Introduction ‚Ä£ Critical Learning Periods in Deep Networks\")). This is especially interesting, since ResNets allow for easier backpropagation of gradients to the lower layers, thus suggesting that the critical period is not caused by vanishing gradients. However, [Figure2]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") (Right) shows that the presence of a critical period does indeed depend critically on the depth of the network.\nIn [Figure3]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\"), we confirm that a critical period exists even when the network is trained with a constant learning rate, and therefore cannot be explained by an annealed learning rate in later epochs.\n\nOptimization method and weight decay: [Figure3]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") (Bottom Right) shows that when using Adam as the optimization scheme, which renormalizes the gradients using a running mean of their first two moments, we still observe a critical period similar to that of standard SGD. However, changing the hyperparameters of the optimization can change the shape of the critical period: In [Figure3]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") (Bottom Left) we show that increasing weight decay makes critical periods longer and less sharp. This can be explained as it both slows the convergence of the network, and it limits the ability of higher layers to change to overcome the deficit, thus encouraging lower layers to also learn new features.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 4: Critical periods in DNNs are traced back to changes in the Fisher Information. (Left) Trace of the Fisher Information of the network weights as a function of the training epoch (blue line), showing two distinct phases of training: First,\ninformation sharply increases, but once test performance starts to plateau (green line), the information in the weights decreases during a ‚Äúconsolidation‚Äù phase.\nEventually less information is stored, yet test accuracy improves slightly\n(green line). The weights‚Äô Fisher Information correlates strongly with the network‚Äôs sensitivity to critical periods, computed as in [Figure1]In 1 Introduction ‚Ä£ Critical Learning Periods in Deep Networks\") using both a window size of 40 and 60, and fitted here to the Fisher Information using a simple exponential fit.\n(Center)\nRecalling the connection between FIM ad connectivity, we may compare it to synaptic density during development in the visual cortex of macaques (Rakic et al., [1986])). Here too, a rapid increase in connectivity is followed by elimination of synapses (pruning) continuing throughout life.\n(Right) Effects of a critical period-inducing blurring deficit on the Fisher Information: The impaired network uses more information to solve the task, compared to training in the absence of a deficit, since it is forced to memorize the labels case by case.",
            "citations": null
          },
          "3 Fisher Information Analysis": {
            "content": "We have established empirically that, in animals and DNNs alike, the initial phases of training are critical to the outcome of the training process.\nIn animals, this strongly relates to changes in the brain architecture of the areas associated with the deficit (Daw, [2014])). This is inevitably different in artificial networks, since their connectivity is formally fixed at all times during training. However, not all the connections are equally useful to the network:\nConsider a network encoding the approximate posterior distribution pw‚Äã(y\\|x)subscriptùëùùë§conditionalùë¶ùë•p\\_{w}(y\\|x), parameterized by the weights wùë§w, of the task variable yùë¶y given an input image xùë•x. The dependency of the final output from a specific connection can be estimated by perturbing the corresponding weight and looking at the magnitude of the change in the final distribution. Specifically, given a perturbation w‚Ä≤=w+Œ¥‚Äãwsuperscriptùë§‚Ä≤ùë§ùõøùë§w^{\\\\prime}=w+\\\\delta w of the weights, the discrepancy between the pw‚Äã(y\\|x)subscriptùëùùë§conditionalùë¶ùë•p\\_{w}(y\\|x) and the perturbed network output pw‚Ä≤‚Äã(y\\|x)subscriptùëùsuperscriptùë§‚Ä≤conditionalùë¶ùë•p\\_{w^{\\\\prime}}(y\\|x) can be measured by their Kullback-Leibler divergence, which, to second-order approximation, is given by:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùîºxKL(pw‚Ä≤(y\\|x)‚à•pw(y\\|x))=Œ¥w‚ãÖFŒ¥w+o(Œ¥w2),\\\\mathbb{E}\\_{x}\\\\operatorname{KL}(\\\\,p\\_{w^{\\\\prime}}(y\\|x)\\\\,\\\\\\|\\\\,p\\_{w}(y\\|x)\\\\,)=\\\\delta w\\\\cdot F\\\\delta w+o(\\\\delta w^{2}), |  |\n\nwhere the expectation over xùë•x is computed using the empirical data distribution Q^‚Äã(x)^ùëÑùë•\\\\hat{Q}(x) given by the dataset, and\n\n|     |     |     |\n| --- | --- | --- |\n|  | F:=ùîºx‚àºQ^‚Äã(x)‚Äãùîºy‚àºpw‚Äã(y\\|x)‚Äã\\[‚àáwlog‚Å°pw‚Äã(y\\|x)‚Äã‚àáwlog‚Å°pw‚Äã(y\\|x)T\\]assignùêπsubscriptùîºsimilar-toùë•^ùëÑùë•subscriptùîºsimilar-toùë¶subscriptùëùùë§conditionalùë¶ùë•delimited-\\[\\]subscript‚àáùë§subscriptùëùùë§conditionalùë¶ùë•subscript‚àáùë§subscriptùëùùë§superscriptconditionalùë¶ùë•ùëáF:=\\\\mathbb{E}\\_{x\\\\sim\\\\hat{Q}(x)}\\\\mathbb{E}\\_{y\\\\sim p\\_{w}(y\\|x)}\\[\\\\nabla\\_{w}\\\\log p\\_{w}(y\\|x)\\\\nabla\\_{w}\\\\log p\\_{w}(y\\|x)^{T}\\] |  |\n\nis the Fisher Information Matrix (FIM). The FIM can thus be considered a local metric measuring how much the perturbation of a single weight (or a combination of weights) affects the output of the network (Amari & Nagaoka, [2000])). In particular, weights with low Fisher Information can be changed or ‚Äúpruned‚Äù with little effect on the network‚Äôs performance. This suggests that the Fisher Information can be used as a measure of the effective connectivity of a DNN, or, more generally, of the ‚Äúsynaptic strength‚Äù of a connection (Kirkpatrick et al., [2017])).\nFinally, the FIM is also a semi-definite approximation of the Hessian of the loss function (Martens, [2014])) and hence of the curvature of the loss landscape at a particular point wùë§w during training, providing an elegant connection between the FIM and the optimization procedure (Amari & Nagaoka, [2000])), which we will also employ later.\n\nUnfortunately, the full FIM is too large to compute. Rather, we use its trace to measure the global or layer-wise connection strength, which we can compute efficiently using ( [AppendixA]Appendix A Details of the experiments ‚Ä£ Critical Learning Periods in Deep Networks\")):\n\n|     |     |     |\n| --- | --- | --- |\n|  | tr(F)=ùîºx‚àºQ^‚Äã(x)ùîºy‚àºpw‚Äã(y\\|x)\\[‚à•‚àáwlogpw(y\\|x)‚à•2\\].\\\\operatorname{tr}(F)=\\\\mathbb{E}\\_{x\\\\sim\\\\hat{Q}(x)}\\\\mathbb{E}\\_{y\\\\sim p\\_{w}(y\\|x)}\\[\\\\\\|\\\\nabla\\_{w}\\\\log p\\_{w}(y\\|x)\\\\\\|^{2}\\]. |  |\n\nIn order to capture the behavior of the off-diagonal terms, we also tried computing the log-determinant of the full matrix using the Kronecker-Factorized approximation of Martens & Grosse ( [2015])), but we observed the same qualitative trend as the trace. Since the FIM is a local measure, it is very sensitive to the irregularities of the loss landscape. Therefore, in this section we mainly use ResNets, which have a relatively smooth landscape (Li et al., [2018])). For other architectures we use instead a more robust estimator of the FIM based on the injection of noise in the weights (Achille & Soatto, [2018])), also described in [AppendixA]Appendix A Details of the experiments ‚Ä£ Critical Learning Periods in Deep Networks\").\n\nTwo phases of learning: As its name suggests, the FIM can be thought as a measure of the quantity of information about the training data that is contained in the model (Fisher, [1925])). Based on this, one would expect the overall strength of the connections to increase monotonically as we acquire information from experience.\nHowever, this is not the case:\nWhile during an initial phase the network acquires information about the data, which results in a large increase in the strength of the connections, once the performance in the task begins to plateau, the network starts decreasing the overall strength of its connections. However, this does not correspond to a reduction in performance, rather, performance keeps slowly improving.\nThis can be seen as a ‚Äúforgetting‚Äù, or ‚Äúcompression‚Äù phase, during which redundant connections are eliminated and non-relevant variability in the data is discarded.\nIt is well-established how the elimination (‚Äúpruning‚Äù) of unnecessary synapses is a fundamental process during learning and brain development (Rakic et al., [1986])) ( [Figure4]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\"), Center); in [Figure4]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") (Left) an analogous phenomenon is clearly and quantitatively shown for DNNs.\n\nStrikingly, these changes in the connection strength are closely related to the sensitivity to critical-period-inducing deficits such as image blur, computed using the ‚Äúsliding window‚Äù method as in [Figure1]In 1 Introduction ‚Ä£ Critical Learning Periods in Deep Networks\"). In [Figure4]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") we see that the sensitivity closely follows the trend of the FIM. This is remarkable since the FIM is a local quantity computed at a single point during the training of a network in the absence of deficit, while sensitivity during a critical period is computed, using test data, at the end of the impaired network training.\n[Figure4]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") (Right) further emphasizes the effect of deficits on the FIM: in the presence of a deficit, the FIM grows and remains substantially higher even after the deficit is removed. This may be attributed to the fact that, when the data are so corrupted that classification is impossible, the network is forced to memorize the labels, therefore increasing the quantity of information needed to perform the same task.\n\nLayer-wise effects of deficits: A layer-wise analysis of the FIM sheds further light on how the deficit affects the network. When the network (in this case All-CNN, which has a clearer division among layers than ResNet) is trained without deficits, the most important connections are in the intermediate layers ( [Figure5]In 3 Fisher Information Analysis ‚Ä£ Critical Learning Periods in Deep Networks\"), Left), which can process the input CIFAR-10 image at the most informative intermediate scale. However, if the network is initially trained on blurred data ( [Figure5]In 3 Fisher Information Analysis ‚Ä£ Critical Learning Periods in Deep Networks\"), top right), the strength of the connections is dominated by the top layer (Layer 6). This is to be expected, since the low-level and mid-level structures of the images are destroyed, making the lower layers ineffective. However, if the deficit is removed early in the training ( [Figure5]In 3 Fisher Information Analysis ‚Ä£ Critical Learning Periods in Deep Networks\"), top center), the network manages to ‚Äúreorganize‚Äù, reducing the information contained in the last layer, and, at the same time, increasing the information in the intermediate layers. We refer to these phenomena as changes in ‚ÄúInformation Plasticity‚Äù. If, however, the data change occurs after the consolidation phase, the network is unable to change its effective connectivity: The connection strength of each layer remains substantially constant. The network has lost its Information Plasticity and is past its critical period.\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 5:\n\nNormalized quantity of information contained in the weights of each layer as a function of the training epoch. (Top Left) In the absence of deficits,\nthe network relies mostly on the middle layers (3-4-5) to solve the task. (Top Right) In the presence of an image blur deficit until epoch 100,\nmore resources are allocated to the higher layers (6-7) rather than to the middle layers.\nThe blur\ndeficit destroys low- and mid-level features processed by those layers, leaving only the global features of the image, which are processed by the higher layers. Even if the deficit is removed, the middle layers remain underdeveloped. (Top Center)\nWhen the deficit is removed at an earlier epoch, the layers can partially reconfigure (notice, e.g., the fast loss of information of layer 6), resulting in less severe long-term consequences. We refer to the redistribution of information and the relative changes in effective connectivity as ‚ÄúInformation Plasticity‚Äù.\n(Bottom row) Same plots, but using a vertical flip deficit, which does not induce a critical period. As expected, the quantity of information in the layers is not affected.\n\nCritical periods as bottleneck crossings: The analysis of the FIM also sheds light on the geometry of the loss function and the learning dynamics. Since the FIM can be interpreted as the local curvature of the residual landscape, Fig. 4 shows that learning entails crossing ‚Äúbottlenecks:‚Äù In the initial phase the network enters regions of high curvature (high Fisher Information), and once consolidation begins, the curvature decreases, allowing it to cross the bottleneck and enter the valley below. If the statistics change after crossing the bottleneck, the network is trapped. In this interpretation, the early phases of convergence are critical in leading the network towards the ‚Äúright‚Äù final valley. The end of critical periods comes after the network has crossed all bottlenecks (and thus learned the features) and entered a wide valley (region of the weight space with low curvature, or low Fisher Information).",
            "citations": null
          },
          "4 Discussion and Related Work": {
            "content": "Critical periods have thus far been considered an exclusively biological phenomenon. At the same time, the analysis of DNNs has focused on asymptotic properties and neglected the initial transient behavior. To the best of our knowledge, we are the first to show that artificial neural networks exhibit critical period phenomena, and to highlight the critical role of the transient in determining the asymptotic performance of the network.\nInspired by the role of synaptic connectivity in modulating critical periods, we introduce the use of Fisher Information to study this initial phase. We show that the initial sensitivity to deficits closely follows changes in the FIM, both global, as the network first rapidly increases and then decreases the amount of stored information, and layer-wise, as the network ‚Äúreorganizes‚Äù its effective connectivity in order to optimally process information.\n\nOur work naturally relates to the extensive literature on critical periods in biology. Despite artificial networks being an extremely reductionist approximation of neuronal networks, they exhibit behaviors that are qualitatively similar to the critical periods observed in human and animal models.\nOur information analysis shows that the initial rapid memorization phase is followed by a loss of Information Plasticity which, counterintuitively, further improves the performance. On the other hand, when combined with the analysis of Achille & Soatto ( [2018])) this suggests that a ‚Äúforgetting‚Äù phase may be desirable, or even necessary, in order to learn robust, nuisance-invariant representations.\n\nThe existence of two distinct phases of training has been observed and discussed by Shwartz-Ziv & Tishby ( [2017])), although their analysis builds on the (Shannon) information of the activations, rather than the (Fisher) information in the weights.\nOn a multi-layer perceptron (MLP), Shwartz-Ziv & Tishby ( [2017])) empirically link the two phases to a sudden increase in the gradients‚Äô covariance. It may be tempting to compare these results with our Fisher Information analysis. However, it must be noted that the FIM is computed using the gradients with respect to the model prediction, not to the ground truth label, leading to important qualitative differences. In [Figure6]In Appendix B Additional plots ‚Ä£ Critical Learning Periods in Deep Networks\"), we show that the covariance and norm of the gradients exhibit no clear trends during training with and without deficits, and, therefore, unlike the FIM, do not correlate with the sensitivity to critical periods.\nNonetheless, a connection between our FIM analysis and the information in the activations can be established based on the work of Achille & Soatto ( [2018])), which shows that the FIM of the weights can be used to bound the information in the activations. In fact, we may intuitively expect that ‚Äúpruning‚Äù of connections naturally leads to loss of information in the corresponding activations. Thus, our analysis corroborates and expands on some of the claims of Shwartz-Ziv & Tishby ( [2017])), while using an independent framework.\n\nAside from being more closely related to the deficit sensitivity during critical periods, Fisher Information also has a number of technical advantages: Its diagonal is simple to estimate, even on modern state-of-the-art architectures and compelling datasets, and it is less sensitive to the choice estimator of mutual information, avoiding some of the most common criticism of the use of information quantities in the analysis of deep learning models.\nFinally, the FIM allows us to probe fine changes in the effective connectivity across the layers of the network ( [Figure5]In 3 Fisher Information Analysis ‚Ä£ Critical Learning Periods in Deep Networks\")), which are not visible in Shwartz-Ziv & Tishby ( [2017])).\n\nA complete analysis of the activations should account not only for the amount of information (both task- and nuisance-related), but also for its accessibility, e.g., how easily task-related information can be extracted by a linear classifier. Following a similar idea, Montavon et al. ( [2011])) studied the layer-wise, or ‚Äúspatial‚Äù (but not temporal) evolution of the simplicity of the representation by performing a principal component analysis (PCA) of a radial basis function (RBF) kernel embedding of each layer representation.\nThey showed that, on a multi-layer perceptron, task-relevant information increasingly concentrate on the first principal components of the representation‚Äôs embedding, implying that they become more easily ‚Äúaccessible‚Äù layer after layer, while nuisance information (when codified at all) is encoded in the remaining components.\nIn our work, instead, we focus on the temporal evolution of the weights. However, it is important to notice how a network with simpler weights (as measured by the FIM) also requires a simpler smooth representation (as measured, e.g., by the RBF embedding) in order to operate properly, since it needs to be resistant to perturbations of the weights. Thus our analysis is wholly compatible with the intuitions of Montavon et al. ( [2011])). It would be interesting to study the joint spatio-temporal evolution of the network using both frameworks at once.\n\nOne advantage of focusing on the information of the weights rather than on the activations, or the behavior of the network, is to have a readout of the ‚Äúeffective connectivity‚Äù during critical periods, which can be compared to similar readouts in animals.\nIn fact, ‚Äúbehavioral‚Äù readouts upon deficit removal, both in artificial and neuronal networks, can potentially be confounded by deficit-coping changes at different levels of the visual pathways (Daw, [2014]); Knudsen, [2004])). On the other hand, deficits in deprived animals correlate strongly with the abnormalities in the circuitry of the visual pathways, which we characterize in DNNs using the FIM to study its ‚Äúeffective connectivity‚Äù, i.e., the connections that are actually employed by the network to solve the task. Sensitivity to critical periods and the trace of the Fisher Information peak at the same epochs, in accord with the evidence that skill development and critical periods in neuronal networks are modulated by changes (generally experience-dependent) in synaptic plasticity (Knudsen, [2004]); Hensch, [2004])).\nOur layer-wise analysis of the Fisher Information ( [Figure5]In 3 Fisher Information Analysis ‚Ä£ Critical Learning Periods in Deep Networks\")) also shows that visual deficits reinforce higher layers to the detriment of intermediate layers, leaving low-level layers virtually untouched. If the deficit is removed after the critical period ends, the network is not able to reverse these effects. Although the two systems are radically different, a similar response can be found in the visual pathways of animal models: Lower levels (e.g., retina, lateral geniculate nucleus) and higher-level visual areas (e.g., V2 and post-V2) show little remodeling upon deprivation, while most changes happen in different layers of V1 (Wiesel & Hubel, [1963a]); Hendrickson et al., [1987])).\n\nAn insightful interpretation of critical periods in animal models was proposed by Knudsen ( [2004])): The initial connections of neuronal networks are unstable and easily modified (highly plastic), but as more ‚Äúsamples‚Äù are observed, they change and reach a more stable configuration which is difficult to modify. Learning can, however, still happen within the newly created connectivity pattern. This is largely compatible with our findings: Sensitivity to critical-period-inducing deficits peaks when connections are remodeled ( [Figure4]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\"), Left), and different connectivity profiles are observed in networks trained with and without a deficit ( [Figure5]In 3 Fisher Information Analysis ‚Ä£ Critical Learning Periods in Deep Networks\")). Moreover, high-level deficits such as image-flipping and label permutation, which do not require radical restructuring of the network‚Äôs connections in order to be corrected, do not exhibit a critical period.\n\nApplying a deficit at the beginning of the training may be compared to the common practice of pre-training, which is generally found to improve the performance of the network. Erhan et al. ( [2010])) study\nthe somewhat related, but now seldom used, practice of layer-wise unsupervised pre-training, and suggest that it may act as a regularizer by moving the weights of the network towards an area of the loss landscape closer to the attractors for good solutions, and also that early examples have a stronger effect in steering the network towards particular solutions. Here, we have shown that pre-training on blurred data can have the opposite effect; _i.e._, it can severely decrease the final performance of the network.\nHowever, in our case, interpreting the deficit‚Äôs effect as moving the network close to a bad attractor is difficult to reconcile with the smooth transition observed in the critical periods since the network would either converge to this attractor, and thus have low accuracy, or escape completely.\n\nInstead, we can reconcile our experiments with the geometry of the loss function by introducing a different explanation based on the interpretation of the FIM as an approximation of the local curvature. [Figure4]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") suggests that SGD encounters two different phases during the network training: At first, the network moves towards high-curvature regions of the loss landscape, while in the second phase the curvature decreases and the network eventually converges to a flat minimum (as observed in Keskar et al. ( [2017]))). We can interpret these as the network crossing narrow bottlenecks during its training in order to learn useful features, before eventually entering a flat region of the loss surface once learning is completed and ending up trapped there. When combining this assumption with our deficit sensitivity analysis, we can hypothesize that the critical period occurs precisely upon crossing of this bottleneck.\nIt is also worth noticing how there is evidence that convergence to flat minima (minima with low curvature) in a DNN correlates with a good generalization performance (Hochreiter & Schmidhuber, [1997]); Li et al., [2018]); Chaudhari et al., [2017]); Keskar et al., [2017])). Indeed, using this interpretation, [Figure4]In 2 Experiments ‚Ä£ Critical Learning Periods in Deep Networks\") (Right) tells us that networks more affected by the deficit converge to sharper minima. However, we have also found that the performance of the network is already mostly determined during the early ‚Äúsensitive‚Äù phase. The final sharpness at convergence may thus be an epiphenomenon rather than the cause of good generalization.",
            "citations": null
          },
          "5 Conclusion": {
            "content": "Our goal in this paper is not so much to investigate the human (or animal) brain through artificial networks, but rather to understand fundamental information processing phenomena, both in their biological and artificial implementations. It is also not our goal to suggest that, since they both exhibit critical periods, DNNs are necessarily a valid model of neurobiological information processing, although recent work has emphasized this aspect.\nWe engage in an ‚ÄúArtificial Neuroscience‚Äù exercise in part to address a technological need to develop ‚Äúexplainable‚Äù artificial intelligence systems whose behavior can be understood and predicted. While traditionally well-understood mathematical models were used by neuroscientists to study biological phenomena, information processing in modern artificial networks is often just as poorly understood as in biology, so we chose to exploit well-known biological phenomena as probes to study information processing in artificial networks.\n\nConversely, it would also be interesting to explore ways to test whether biological networks prune connections as a consequence of a loss of Information Plasticity, rather than as a cause. The mechanisms underlying network reconfiguration during learning and development might be an evolutionary outcome obtained under the pressure of fundamental information processing phenomena.\n\n#### Acknowledgements\n\nWe thank the anonymous reviewers for their thoughtful feedback, and for suggesting new experiments and relevant literature.\nSupported by ONR N00014-17-1-2072, ARO W911NF-17-1-0304, AFOSR FA9550-15-1-0229 and FA8650-11-1-7156.",
            "citations": null
          }
        },
        "abstract": "Similar to humans and animals, deep artificial neural networks exhibit\ncritical periods during which a temporary stimulus deficit can impair the\ndevelopment of a skill. The extent of the impairment depends on the onset and\nlength of the deficit window, as in animal models, and on the size of the\nneural network. Deficits that do not affect low-level statistics, such as\nvertical flipping of the images, have no lasting effect on performance and can\nbe overcome with further training. To better understand this phenomenon, we use\nthe Fisher Information of the weights to measure the effective connectivity\nbetween layers of a network during training. Counterintuitively, information\nrises rapidly in the early phases of training, and then decreases, preventing\nredistribution of information resources in a phenomenon we refer to as a loss\nof \"Information Plasticity\". Our analysis suggests that the first few epochs\nare critical for the creation of strong connections that are optimal relative\nto the input data distribution. Once such strong connections are created, they\ndo not appear to change during additional training. These findings suggest that\nthe initial learning transient, under-scrutinized compared to asymptotic\nbehavior, plays a key role in determining the outcome of the training process.\nOur findings, combined with recent theoretical results in the literature, also\nsuggest that forgetting (decrease of information in the weights) is critical to\nachieving invariance and disentanglement in representation learning. Finally,\ncritical periods are not restricted to biological systems, but can emerge\nnaturally in learning systems, whether biological or artificial, due to\nfundamental constrains arising from learning dynamics and information\nprocessing."
      },
      "bib.bib3": {
        "id": "bib.bib3",
        "citation": "Ahn et al. (2023)",
        "authors": "",
        "year": "",
        "title": "How to escape sharp minima with random perturbations.",
        "venue": "arXiv preprint arXiv:2305.15659",
        "pages": "",
        "url": "",
        "arxiv_id": "2305.15659",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "In modern machine learning applications, the training loss function f:‚Ñùd‚Üí‚Ñù:ùëì‚Üísuperscript‚Ñùùëë‚Ñùf:\\\\mathbb{R}^{d}\\\\to\\\\mathbb{R} to be optimized often has a continuum of local/global minima, and the central question is which minima lead to good prediction performance.\nAmong many different properties for minima, ‚Äúflatness‚Äù of minima has been a promising candidate extensively studied in the literature (Hochreiter and Schmidhuber, [1997]); Keskar et al., [2017]); Dinh et al., [2017]); Dziugaite and Roy, [2017]); Neyshabur et al., [2017]); Sagun et al., [2017]); Yao et al., [2018]); Chaudhari et al., [2019]); He et al., [2019]); Mulayoff and Michaeli, [2020]); Tsuzuku et al., [2020]); Xie et al., [2021])).\n\nRecently, there has been a resurgence of interest in flat minima due to various advances in both empirical and theoretical domains. Motivated by the extensive research on flat minima, this work undertakes a formal study that\n\n- _(i)_\n\n\ndelineates a clear definition for flat minima, and\n\n- _(ii)_\n\n\nstudies the upper complexity bounds of finding them.\n\n\nWe begin by emphasizing the significance of flat minima, based on recent advancements in the field.\n\n### 1.1 Why flat minima?\n\nSeveral recent optimization methods that are explicitly designed to find flat minima have achieved substantial empirical success (Chaudhari et al., [2019]); Izmailov et al., [2018]); Foret et al., [2021]); Wu et al., [2020]); Zheng et al., [2021]); Norton and Royset, [2021]); Kaddour et al., [2022])).\nOne notable example is sharpness-aware minimization (SAM) (Foret et al., [2021])), which has shown significant improvements in prediction performance of deep neural network models for image classification problems (Foret et al., [2021])) and language processing problems (Bahri et al., [2022])).\nFurthermore, research by Liu et al. ( [2023])) indicates that for language model pretraining, the flatness of minima serves as a more reliable predictor of model efficacy than the pretraining loss itself, particularly when the loss approaches its minimum values.\n\nComplementing the empirical evidence, recent theoretical research underscores the importance of flat minima as a desirable attribute for optimization. Key insights include:\n\n- ‚Ä¢\n\n\n_Provable generalization of flat minima._ For overparameterized models, research by Ding et al. ( [2022])) demonstrates that flat minima correspond to the true solutions in low-rank matrix recovery tasks, such as matrix/bilinear sensing, robust PCA, matrix completion, and regression with a single hidden layer neural network, leading to better generalization.\nThis is further extended by Gatmiry et al. ( [2023])) to deep linear networks learned from linear measurements.\nIn other words, in a range of nonconvex problems with multiple minima, flat minima yield superior predictive performance.\n\n- ‚Ä¢\n\n\n_Benifits of flat minima in pretraining._ Along with the empirical validations, Liu et al. ( [2023])) prove that in simplified masked language models, flat minima correlate with the most generalizable solutions.\n\n- ‚Ä¢\n\n\n_Inductive bias of algorithms towards flat minima._ It has been proved that various practical optimization algorithms inherently favor flat minima.\nThis includes stochastic gradient descent (SGD) (Blanc et al., [2020]); Wang et al., [2022]); Damian et al., [2021]); Li et al., [2022]); Liu et al., [2023])), gradient descent (GD) with large learning rates Arora et al. ( [2022])); Damian et al. ( [2023])); Ahn et al. ( [2023])), sharpness-aware minimization (SAM) (Bartlett et al., [2022]); Wen et al., [2022]); Compagnoni et al., [2023]); Dai et al., [2023])), and a communication-efficient variant of SGD (Gu et al., [2023])).\nThe practical success of these algorithms indicates that flatter minima might be linked to better generalization properties.\n\n\nMotivated by such recent advances, the main goal of this work is to initiate a formal study of the behavior of algorithms for finding flat minima, especially an understanding of their upper complexity bounds.\n\n### 1.2 Overview of our main results\n\nIn this work, we formulate a particular notion of flatness for minima and design efficient algorithms for finding them.\nWe adopt the trace of Hessian of the loss tr‚Å°(‚àá2f‚Äã(ùíô))trsuperscript‚àá2ùëìùíô\\\\operatorname{tr}(\\\\nabla^{2}f({\\\\bm{x}})) as a measure of ‚Äúflatness,‚Äù where lower values of the trace imply flatter regions within the loss landscape. The reasons governing this choice are many, especially its deep relevance across a rich variety of research, as summarized in [Subsection 2.1]Measure of flatness ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\"). With this metric, we characterize a flat minimum as a local minimum where any local enhancement in flatness would result in an increased cost, effectively delineating regions where the model is both stable and efficient in terms of performance.\nMore formally, we define the notion of (œµ,œµ‚Ä≤)italic-œµsuperscriptitalic-œµ‚Ä≤(\\\\epsilon,\\\\epsilon^{\\\\prime})-flat minima in [Definition 2]Definition 2 (Approximate flat minima). ‚Ä£ 2.2 Formal definition of flat minima ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\").\nSee [Section 2]Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\") for precise details.\n\nGiven the notion of flat minima, the main goal of this work is to design algorithms that find an approximate flat minimum efficiently.\nAt first glance, the goal of finding a flat minimum might seem computationally expensive because minimizing tr‚Å°(‚àá2f)trsuperscript‚àá2ùëì\\\\operatorname{tr}(\\\\nabla^{2}f) would require information about second or higher derivatives.\nNotably, this work demonstrates that one can reach a flat minimum using only first derivatives (gradients).\n\n- ‚Ä¢\n\n\nIn [Section 3]Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"), we present a gradient-based algorithm called the randomly smoothed perturbation algorithm ( [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) which finds a (œµ,œµ)italic-œµitalic-œµ(\\\\epsilon,\\\\sqrt{\\\\epsilon})-flat minimum within ùí™‚Äã(œµ‚àí3)ùí™superscriptitalic-œµ3\\\\mathcal{O}\\\\left(\\\\epsilon^{-3}\\\\right) iterations for general costs without structure ( [Theorem 1]Theorem 1. ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")). The main component of the algorithm is to use gradients computed from randomly perturbed iterates to estimate a direction that leads to flatter minima.\n\n- ‚Ä¢\n\n\nIn [Section 4]Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"), we consider the setting where fùëìf is the training loss over a training data set and the initialization is near the set of global minima, motivated by overparametrized models in practice (Zhang et al., [2021])).\nIn such a setting, we present another gradient-based algorithm called the sharpness-aware perturbation algorithm ( [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")), inspired by sharpness-aware minimization (SAM) (Foret et al., [2021])).\nWe show that this algorithm finds a (œµ,œµ)italic-œµitalic-œµ(\\\\epsilon,\\\\sqrt{\\\\epsilon})-flat minimum within ùí™‚Äã(d‚àí1‚Äãœµ‚àí2‚Äã(1‚à®1d3‚Äãœµ))ùí™superscriptùëë1superscriptitalic-œµ211superscriptùëë3italic-œµ\\\\mathcal{O}\\\\left(d^{-1}\\\\epsilon^{-2}(1\\\\vee\\\\frac{1}{d^{3}\\\\epsilon})\\\\right) iterations ( [Theorem 2]Theorem 2. ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) ‚Äì here dùëëd denotes the dimension of the domain. This demonstrates that a practical algorithm like SAM can find flat minima much faster than the randomly smoothed perturabtion algorithm in high dimensional settings.\n\n\nSee [Table 1]Table 1 ‚Ä£ 1.2 Overview of our main results ‚Ä£ 1 Introduction ‚Ä£ How to escape sharp minima with random perturbations\") for a high level summary of our results.\n\n|     |     |     |\n| --- | --- | --- |\n| Setting | Iterations for (œµ,œµ)italic-œµitalic-œµ(\\\\epsilon,\\\\sqrt{\\\\epsilon})-flat minima ( [Definition 2]Definition 2 (Approximate flat minima). ‚Ä£ 2.2 Formal definition of flat minima ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\")) | Algorithm |\n| General loss | ùìû‚Äã(œµ‚àíùüë)ùìûsuperscriptbold-italic-œµ3\\\\bm{\\\\mathcal{O}\\\\left(\\\\epsilon^{-3}\\\\right)}gradient queries ( [Theorem 1]Theorem 1. ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) | Randomly Smoothed Perturbation ( [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) |\n| Training loss ( [1]Setting 1 (Training loss over data). ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) | ùìû‚Äã(ùíÖ‚àíùüè‚Äãœµ‚àíùüê‚Äã(ùüè‚à®ùüèùíÖùüë‚Äãœµ))ùìûsuperscriptùíÖ1superscriptbold-italic-œµ211superscriptùíÖ3bold-italic-œµ\\\\bm{\\\\mathcal{O}\\\\left(d^{-1}\\\\epsilon^{-2}(1\\\\vee\\\\frac{1}{d^{3}\\\\epsilon})\\\\right)}gradient queries ( [Theorem 2]Theorem 2. ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) | Sharpness-Aware Perturbation ( [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) |\n\nTable 1: A high level summary of the main results with emphasis on the dependence on dùëëd and œµitalic-œµ\\\\epsilon.",
            "citations": null
          },
          "2 Formulating flat minima": {
            "content": "In this section, we formally define the notion of flat minima.\n\n### 2.1 Measure of flatness\n\nWithin the literature reviewed in [Subsection 1.1]Why flat minima? ‚Ä£ 1 Introduction ‚Ä£ How to escape sharp minima with random perturbations\"), a recurring metric for evaluating ‚Äúflatness‚Äù in loss landscapes is the trace of the Hessian matrix of the loss function tr‚Å°(‚àá2f‚Äã(ùíô))trsuperscript‚àá2ùëìùíô\\\\operatorname{tr}(\\\\nabla^{2}f({\\\\bm{x}})).\nThis metric intuitively reflects the curvature of the loss landscape around minima, where the Hessian matrix ‚àá2f‚Äã(ùíô)superscript‚àá2ùëìùíô\\\\nabla^{2}f({\\\\bm{x}}) is expected to be positive semi-definite. Consequently, lower values of the trace indicate regions where the loss landscape is flatter.\nFor simplicity, we will refer to this metric as _the trace of Hessian_.\nKey insights from recent research include:\n\n![Refer to caption]Figure 1: Figure from Liu et al. ( [2023])). They pretrain language models for probabilistic context-free grammar with different optimization methods, and compare their downstream accuracy. As shown in the plot, the trace of Hessian is a better indicator of the performance than the pretraining loss itself.\n\n![Refer to caption]Figure 2: Figure from Damian et al. ( [2021])). For training ResNet-18 on CIFAR 10, they measure the trace of Hessian across the iterates of SGD with label noise and have observed an inspiring relation between tr‚Å°(‚àá2f‚Äã(ùíôt))trsuperscript‚àá2ùëìsubscriptùíôùë°\\\\operatorname{tr}(\\\\nabla^{2}f({\\\\bm{x}}\\_{t})) and prediction performance.\n\n- ‚Ä¢\n\n\n_Overparameterized low-rank matrix recovery._ In this domain, the trace of Hessian has been identified as the _correct notion of flatness_.\nDing et al. ( [2022])) show that the most desirable minima, which correspond to ground truth solutions, are those with the lowest trace of Hessian values.\nThis principle is also applicable to the analysis of deep linear networks, as highlighted by Gatmiry et al. ( [2023])), where the same measure plays a pivotal role.\n\n- ‚Ä¢\n\n\n_Language model pretraining._\nThe importance of the trace of Hessian extends to language model pretraining, as demonstrated by Liu et al. ( [2023])).\nMore specifically, Liu et al. ( [2023])) conduct an insightful experiment (see [Figure 2]Figure 2 ‚Ä£ 2.1 Measure of flatness ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\")) that demonstrates the effectiveness of the trace of Hessian as a good measure of model performance.\nThis observation is backed by their theoretical results for simple language models.\n\n- ‚Ä¢\n\n\n_Model output stability._ Furthermore, the work (Ma and Ying, [2021])) links the trace of Hessian to the stability of model outputs in deep neural networks relative to input data variations. This relationship underscores the significance of the trace of Hessian in improving model generalization and enhancing adversarial robustness.\n\n- ‚Ä¢\n\n\n_Practical optimization algorithms._ Lastly, various practical optimization algorithms are shown to be inherently biased toward achieving lower values of the trace of Hessian. This includes SGD with label noise, as discussed in works by Blanc et al. ( [2020])); Damian et al. ( [2021])); Li et al. ( [2022])), and without label noise for the language modeling pretraining (Liu et al., [2023])).\nIn particular, Damian et al. ( [2021])) conduct an inspiring experiment showing a strong correlation between the trace of Hessian and the prediction performance of models (see [Figure 2]Figure 2 ‚Ä£ 2.1 Measure of flatness ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\")).\nAdditionally, stochastic SAM is proven to prefer lower trace of Hessian values (Wen et al., [2022])).\n\n\n### 2.2 Formal definition of flat minima\n\nMotivated by the previous works discussed above, we adopt the trace of Hessian as the measure of flatness.\nSpecifically, we consider the (normalized) trace of Hessian tr‚Å°(‚àá2f‚Äã(ùíô))/tr‚Å°(Id)=tr‚Å°(‚àá2f‚Äã(ùíô))/dtrsuperscript‚àá2ùëìùíôtrsubscriptùêºùëëtrsuperscript‚àá2ùëìùíôùëë\\\\operatorname{tr}(\\\\nabla^{2}f({\\\\bm{x}}))/\\\\operatorname{tr}(I\\_{d})=\\\\operatorname{tr}(\\\\nabla^{2}f({\\\\bm{x}}))/d. Here we use the normalization to match the scale of flatness with the loss. For simplicity, we henceforth use the following notation:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùóçùóã¬Ø(x)‚âîtr‚Å°(‚àá2f‚Äã(ùíô))tr‚Å°(Id)=tr‚Å°(‚àá2f‚Äã(ùíô))d.\\\\displaystyle\\\\boxed{\\\\overline{\\\\mathsf{tr}}(x)\\\\coloneqq\\\\frac{\\\\operatorname{tr}(\\\\nabla^{2}f({\\\\bm{x}}))}{\\\\operatorname{tr}(I\\_{d})}=\\\\frac{\\\\operatorname{tr}(\\\\nabla^{2}f({\\\\bm{x}}))}{d}\\\\,.} |  | (1) |\n\nGiven this choice, our notion of flat minima at a high level is _a local minimum (of fùëìf) for which one cannot locally decrease ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} without increasing the cost fùëìf._ In particular, this concept becomes nontrivial when the set of local minima is connected (or locally forms a manifold), which is indeed the case for the over-parametrized neural networks, as shown empirically in (Draxler et al., [2018]); Garipov et al., [2018])) and theoretically in (Cooper, [2021])).\n\nOne straightforward way to define a (locally) flat minimum is the following: a local minimum which is also a local minimum of ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}}.\nHowever, this definition is not well-defined as the set of local minima of fùëìf can be disjoint from that of ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} as shown in the following example.\n\n###### Example 1.\n\nConsider a two-dimensional function f:(x1,x2)‚Ü¶(x1‚Äãx2‚àí1)2:ùëìmaps-tosubscriptùë•1subscriptùë•2superscriptsubscriptùë•1subscriptùë•212f:(x\\_{1},x\\_{2})\\\\mapsto(x\\_{1}x\\_{2}-1)^{2}.\nThen it holds that\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ‚àáf‚Äã(ùíô)‚àáùëìùíô\\\\displaystyle\\\\nabla f({\\\\bm{x}}) | =2‚Äã(x1‚Äãx2‚àí1)‚Äã\\[x2x1\\]andabsent2subscriptùë•1subscriptùë•21matrixsubscriptùë•2subscriptùë•1and\\\\displaystyle={\\\\footnotesize 2(x\\_{1}x\\_{2}-1)\\\\begin{bmatrix}x\\_{2}\\\\\\<br>x\\_{1}\\\\end{bmatrix}}\\\\quad\\\\text{and} |  | (2) |\n|  | ‚àá2f‚Äã(ùíô)superscript‚àá2ùëìùíô\\\\displaystyle\\\\nabla^{2}f({\\\\bm{x}}) | =\\[2‚Äãx224‚Äãx1‚Äãx2‚àí24‚Äãx1‚Äãx2‚àí22‚Äãx12\\].absentmatrix2superscriptsubscriptùë•224subscriptùë•1subscriptùë•224subscriptùë•1subscriptùë•222superscriptsubscriptùë•12\\\\displaystyle={\\\\footnotesize\\\\begin{bmatrix}2x\\_{2}^{2}&4x\\_{1}x\\_{2}-2\\\\\\<br>4x\\_{1}x\\_{2}-2&2x\\_{1}^{2}\\\\end{bmatrix}}\\\\,. |  | (3) |\n\nHence, the set of minima is ùí≥‚ãÜ={(x1,x2):x1‚Äãx2=1}superscriptùí≥‚ãÜconditional-setsubscriptùë•1subscriptùë•2subscriptùë•1subscriptùë•21\\\\mathcal{X}^{\\\\star}=\\\\{(x\\_{1},x\\_{2})~{}:~{}x\\_{1}x\\_{2}=1\\\\} and ùóçùóã¬Ø‚Äã(ùê±)=(2‚Äãx12+2‚Äãx22)/2=x12+x22¬Øùóçùóãùê±2superscriptsubscriptùë•122superscriptsubscriptùë•222superscriptsubscriptùë•12superscriptsubscriptùë•22\\\\overline{\\\\mathsf{tr}}({\\\\bm{x}})=(2x\\_{1}^{2}+2x\\_{2}^{2})/2=x\\_{1}^{2}+x\\_{2}^{2}.\nThe unique minimum of ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} is (0,0)00(0,0) which does not intersect with ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nWhen restricted to ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}, ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} achieve its minimum at (1,1)11(1,1) and (‚àí1,‚àí1)11(-1,-1), so those two points are flat minima.\n\nHence, we consider the local optimality of ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} restricted to the set of local minima ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nIn practice, finding local minima with respect to ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} might be too stringent, so as an initial effort, we set our goal to find _a local minimum that is also a stationary point of ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} restricted to the set of local minima_.\nTo formalize this, we introduce the limit map under the gradient flow, following (Li et al., [2022]); Arora et al., [2022]); Wen et al., [2022])).\n\n###### Definition 1(Limit point under gradient flow).\n\nGiven a point ùê±ùê±{\\\\bm{x}}, let Œ¶‚Äã(ùê±)Œ¶ùê±\\\\Phi({\\\\bm{x}}) be the limiting point of the gradient flow on fùëìf starting at ùê±ùê±{\\\\bm{x}}.\nMore formally, letting ùê±‚Äã(t)ùê±ùë°{\\\\bm{x}}(t) be the iterate at time tùë°t of the gradient flow starting at ùê±ùê±{\\\\bm{x}}, i.e., ùê±‚Äã(0)=ùê±ùê±0ùê±{\\\\bm{x}}(0)={\\\\bm{x}} and ùê±Àô‚Äã(t)=‚àí‚àáf‚Äã(ùê±‚Äã(t))Àôùê±ùë°‚àáùëìùê±ùë°\\\\dot{\\\\bm{x}}(t)=-\\\\nabla f({\\\\bm{x}}(t)), Œ¶‚Äã(ùê±)Œ¶ùê±\\\\Phi({\\\\bm{x}}) is defined as limt‚Üí‚àûùê±‚Äã(t)subscript‚Üíùë°ùê±ùë°\\\\lim\\_{t\\\\to\\\\infty}{\\\\bm{x}}(t).\n\nWhen ùíôùíô{\\\\bm{x}} is near a set of local minima, Œ¶‚Äã(ùíô)Œ¶ùíô\\\\Phi({\\\\bm{x}}) is approximately equal to the projection onto the local minima set.\nThus, the trace of Hessian ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} along the manifold can be captured by the functional ùóçùóã¬Ø‚Äã(Œ¶‚Äã(x))¬ØùóçùóãŒ¶ùë•\\\\overline{\\\\mathsf{tr}}(\\\\Phi(x)).\nTherefore, we say a local minimum ùíô‚ãÜsuperscriptùíô‚ãÜ{\\\\bm{x}}^{\\\\star} is a stationary point of ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} restricted to ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star} if\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àá\\[ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíô‚ãÜ))\\]=‚àÇŒ¶‚Äã(ùíô‚ãÜ)‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíô‚ãÜ))=ùüé.‚àá¬ØùóçùóãŒ¶superscriptùíô‚ãÜŒ¶superscriptùíô‚ãÜ‚àá¬ØùóçùóãŒ¶superscriptùíô‚ãÜ0\\\\displaystyle\\\\nabla\\\\left\\[\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}^{\\\\star}))\\\\right\\]=\\\\partial\\\\Phi({\\\\bm{x}}^{\\\\star})\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}^{\\\\star}))=\\\\mathbf{0}\\\\,. |  | (4) |\n\nIn particular, if ‚àá\\[ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíô‚ãÜ))\\]‚â†ùüé‚àá¬ØùóçùóãŒ¶superscriptùíô‚ãÜ0\\\\nabla\\\\left\\[\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}^{\\\\star}))\\\\right\\]\\\\neq\\\\mathbf{0}, moving along the direction of ‚àí‚àá\\[ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíô‚ãÜ))\\]‚àá¬ØùóçùóãŒ¶superscriptùíô‚ãÜ-\\\\nabla\\\\left\\[\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}^{\\\\star}))\\\\right\\] will locally decrease the value ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíô))¬ØùóçùóãŒ¶ùíô\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}})) while staying within the set of minima, hence leading to a flatter minimum.\nMoreover, if ùíô‚ãÜsuperscriptùíô‚ãÜ{\\\\bm{x}}^{\\\\star} is an isolated local minimum, then ‚àÇŒ¶‚Äã(ùíô‚ãÜ)=ùüéŒ¶superscriptùíô‚ãÜ0\\\\partial\\\\Phi({\\\\bm{x}}^{\\\\star})=\\\\mathbf{0}, and hence ‚àá\\[ùóçùóã¬Ø(Œ¶(ùíô‚ãÜ)))\\]=ùüé\\\\nabla\\\\left\\[\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}^{\\\\star})))\\\\right\\]=\\\\mathbf{0}.\nThis leads to the following definition.\n\n###### Definition 2(Approximate flat minima).\n\nWe say a point ùê±ùê±{\\\\bm{x}} is an (œµ,œµ‚Ä≤)italic-œµsuperscriptitalic-œµ‚Ä≤(\\\\epsilon,\\\\epsilon^{\\\\prime})-flat minimum if ùê±‚ãÜ=Œ¶‚Äã(ùê±)superscriptùê±‚ãÜŒ¶ùê±{\\\\bm{x}}^{\\\\star}=\\\\Phi({\\\\bm{x}}) is a local minimum of fùëìf and it satisfies\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Äñùíô‚àíùíô‚ãÜ‚Äñ‚â§œµand‚Äñ\\[‚àá(ùóçùóã¬Ø‚àòŒ¶)\\]‚Äã(ùíô‚ãÜ)‚Äñ‚â§œµ‚Ä≤.formulae-sequencenormùíôsuperscriptùíô‚ãÜitalic-œµandnormdelimited-\\[\\]‚àá¬ØùóçùóãŒ¶superscriptùíô‚ãÜsuperscriptitalic-œµ‚Ä≤\\\\displaystyle\\\\left\\\\\\|{\\\\bm{x}}-{\\\\bm{x}}^{\\\\star}\\\\right\\\\\\|\\\\leq\\\\epsilon\\\\quad\\\\text{and}\\\\quad\\\\left\\\\\\|\\\\left\\[\\\\nabla\\\\left(\\\\overline{\\\\mathsf{tr}}\\\\circ\\\\Phi\\\\right)\\\\right\\]({\\\\bm{x}}^{\\\\star})\\\\right\\\\\\|\\\\leq\\\\epsilon^{\\\\prime}\\\\,. |  | (5) |",
            "citations": null
          },
          "3 Randomly smoothed perturbation escapes sharp minima": {
            "content": "In this section, we present a gradient-based algorithm for finding an approximate flat minimum. We first discuss the setting for our analysis.\n\nFirst, since the question of finding candidates for approximate local minima (or second order stationary points) is well-studied, thanks to the vast literature on the topic over the last decade (Ge et al., [2015]); Agarwal et al., [2017]); Carmon et al., [2018]); Fang et al., [2018]); Jin et al., [2021])), we do not further explore it, but single out the question of seeking flatness by assuming that the initial iterate ùíô0subscriptùíô0{\\\\bm{x}}\\_{0} is already close to the set of local minima ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nFor instance, assuming that the loss fùëìf satisfies strict saddle properties (Ge et al., [2015]); Jin et al., [2017])),\none can find a point that is within the œµitalic-œµ\\\\epsilon-neighborhood of ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star} within O~‚Äã(œµ‚àí2)~ùëÇsuperscriptitalic-œµ2\\\\tilde{O}(\\\\epsilon^{-2}) iterations.\n\nWe next discuss the setting for the loss function.\nIn order for our notion of flat minima ( [Definition 2]Definition 2 (Approximate flat minima). ‚Ä£ 2.2 Formal definition of flat minima ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\")) to be well defined, we assume that the loss function is four times continuously differentiable near the local minima set ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nMore formally, we make the following assumption about the loss function.\n\n###### Assumption 1(Loss near minima).\n\nThere exists Œ∂>0ùúÅ0\\\\zeta>0 such that within Œ∂ùúÅ\\\\zeta-neighborhood of the set of local minima ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}, the following properties hold:\n\n1. (a)\n\n\nfùëìf is four-times continuously differentiable.\n\n2. (b)\n\n\nThe limit map under gradient flow Œ¶Œ¶\\\\Phi ( [Definition 1]Definition 1 (Limit point under gradient flow). ‚Ä£ 2.2 Formal definition of flat minima ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\")) is well-defined and is twice Lipschitz differentiable. Also, Œ¶‚Äã(ùíô)‚ààùí≥‚ãÜŒ¶ùíôsuperscriptùí≥‚ãÜ\\\\Phi({\\\\bm{x}})\\\\in\\\\mathcal{X}^{\\\\star} and the gradient flow starting at ùíôùíô{\\\\bm{x}} is contained within the Œ∂ùúÅ\\\\zeta-neighborhood of ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\n\n3. (c)\n\n\nThe Polyak‚Äì≈Åojasiewicz (PL) inequality holds locally, i.e., f‚Äã(ùíô)‚àíf‚Äã(Œ¶‚Äã(ùíô))‚â§12‚ÄãŒ±‚Äã‚Äñ‚àáf‚Äã(ùíô)‚Äñ2ùëìùíôùëìŒ¶ùíô12ùõºsuperscriptnorm‚àáùëìùíô2f({\\\\bm{x}})-f(\\\\Phi({\\\\bm{x}}))\\\\leq\\\\frac{1}{2\\\\alpha}\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}})\\\\right\\\\\\|^{2}.\n\n\nIt fact, the last two conditions (b), (c) are consequences of fùëìf being four-times continuously differentiable (Arora et al., [2022]), Appendix B).\nWe include them for concreteness.\n\n### 3.1 Main result\n\nUnder this setting, we present a gradient-based algorithm for finding approximate flat minima and its theoretical guarantees.\nOur proposed algorithm is called the randomly smoothed perturbation algorithm ( [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")).\nThe main component of the algorithm is the perturbed gradient step that is employed whenever the gradient norm is smaller than a tolerance œµ0subscriptitalic-œµ0\\\\epsilon\\_{0}:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùíôt+1subscriptùíôùë°1\\\\displaystyle{\\\\bm{x}}\\_{t+1} | ‚Üêùíôt‚àíŒ∑‚Äã(‚àáf‚Äã(ùíôt)+ùíót),where‚Üêabsentsubscriptùíôùë°ùúÇ‚àáùëìsubscriptùíôùë°subscriptùíóùë°where\\\\displaystyle\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta\\\\left(\\\\nabla f({\\\\bm{x}}\\_{t})+{\\\\bm{v}}\\_{t}\\\\right),\\\\quad\\\\text{where} |  | (6) |\n|  | ùíótsubscriptùíóùë°\\\\displaystyle{\\\\bm{v}}\\_{t} | ‚âîProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáf‚Äã(ùíôt+œÅ‚Äãùíàt)‚âîabsentsubscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àáùëìsubscriptùíôùë°ùúåsubscriptùíàùë°\\\\displaystyle\\\\coloneqq\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla f({\\\\bm{x}}\\_{t}+\\\\rho{\\\\bm{g}}\\_{t}) |  | (7) |\n\nHere ùíàt‚àºUnif‚Äã(ùïäd‚àí1)similar-tosubscriptùíàùë°Unifsuperscriptùïäùëë1{\\\\bm{g}}\\_{t}\\\\sim\\\\mathrm{Unif}(\\\\mathbb{S}^{d-1}) is a random unit vector, and for two vectors ùíñ,ùíóùíñùíó{\\\\bm{u}},{\\\\bm{v}}, Projùíñ‚üÇ‚ÄãùíósubscriptsuperscriptProjperpendicular-toùíñùíó\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\bm{u}}{\\\\bm{v}} is the ‚Äúprojecting-out‚Äù operator, i.e., Projùíñ‚üÇ‚Äãùíó‚âîùíó‚àí‚ü®ùíñ,ùíó‚ü©‚Äãùíñ‚Äñùíñ‚Äñ‚âîsubscriptsuperscriptProjperpendicular-toùíñùíóùíóùíñùíóùíñnormùíñ\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\bm{u}}{\\\\bm{v}}\\\\coloneqq{\\\\bm{v}}-\\\\left\\\\langle{\\\\bm{u}},{\\\\bm{v}}\\\\right\\\\rangle\\\\frac{{\\\\bm{u}}}{\\\\left\\\\\\|{\\\\bm{u}}\\\\right\\\\\\|}.\nAt a high level, ( [6]In 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) adds a perturbation direction ùíótsubscriptùíóùë°{\\\\bm{v}}\\_{t} to the ordinary gradient step, where the perturbation direction ùíótsubscriptùíóùë°{\\\\bm{v}}\\_{t} is computed using gradients at a randomly perturbed iterate ùíôt+œÅ‚Äãùíàtsubscriptùíôùë°ùúåsubscriptùíàùë°{\\\\bm{x}}\\_{t}+\\\\rho{\\\\bm{g}}\\_{t} and then projecting out the gradient ‚àáf‚Äã(ùíôt)‚àáùëìsubscriptùíôùë°\\\\nabla f({\\\\bm{x}}\\_{t}).\nThe gradient of a randomly perturbed iterate ‚àáf‚Äã(ùíôt+œÅ‚Äãùíàt)‚àáùëìsubscriptùíôùë°ùúåsubscriptùíàùë°\\\\nabla f({\\\\bm{x}}\\_{t}+\\\\rho{\\\\bm{g}}\\_{t}) can be also interpreted as the (stochastic) gradient of widely known _randomized smoothing_ of fùëìf (hence its name ‚Äúrandomly smoothed perturbation‚Äù)‚Äîa widely known technique for nonsmooth optimization (Duchi et al., [2012])).\nIn some sense, this work discovers a new property of randomized smoothing for nonconvex optimization: _randomized smoothing seeks flat minima!_\nWe now present the theoretical guarantee of [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\").\n\nAlgorithm 1 Randomly Smoothed Perturbation\n\n0:ùíô0subscriptùíô0{\\\\bm{x}}\\_{0}, learning rates Œ∑,Œ∑‚Ä≤ùúÇsuperscriptùúÇ‚Ä≤\\\\eta,\\\\eta^{\\\\prime}, perturbation radius œÅùúå\\\\rho, tolerance œµ0subscriptitalic-œµ0\\\\epsilon\\_{0}, the number of steps TùëáT.\n\nfort=0,1,‚Ä¶,T‚àí1ùë°01‚Ä¶ùëá1t=0,1,\\\\ldots,T-1do\n\nif‚Äñ‚àáf‚Äã(ùíôt)‚Äñ‚â§œµ0norm‚àáùëìsubscriptùíôùë°subscriptitalic-œµ0\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{t})\\\\right\\\\\\|\\\\leq\\\\epsilon\\_{0}then\n\nùíôt+1‚Üêùíôt‚àíŒ∑‚Äã(‚àáf‚Äã(ùíôt)+ùíót)‚Üêsubscriptùíôùë°1subscriptùíôùë°ùúÇ‚àáùëìsubscriptùíôùë°subscriptùíóùë°{\\\\bm{x}}\\_{t+1}\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta\\\\left(\\\\nabla f({\\\\bm{x}}\\_{t})+{\\\\bm{v}}\\_{t}\\\\right),\n\n        ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉwhere ùíót‚âîProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáf‚Äã(ùíôt+œÅ‚Äãùíàt)‚âîsubscriptùíóùë°subscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àáùëìsubscriptùíôùë°ùúåsubscriptùíàùë°{\\\\bm{v}}\\_{t}\\\\coloneqq\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla f({\\\\bm{x}}\\_{t}+\\\\rho{\\\\bm{g}}\\_{t}) and ùíàt‚àºUnif‚Äã(ùïäd‚àí1)similar-tosubscriptùíàùë°Unifsuperscriptùïäùëë1{\\\\bm{g}}\\_{t}\\\\sim\\\\mathrm{Unif}(\\\\mathbb{S}^{d-1})\n\nelse\n\nùíôt+1‚Üêùíôt‚àíŒ∑‚Ä≤‚Äã‚àáf‚Äã(ùíôt)‚Üêsubscriptùíôùë°1subscriptùíôùë°superscriptùúÇ‚Ä≤‚àáùëìsubscriptùíôùë°{\\\\bm{x}}\\_{t+1}\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta^{\\\\prime}\\\\nabla f({\\\\bm{x}}\\_{t})\n\nreturnùíô^^ùíô\\\\widehat{{\\\\bm{x}}} uniformly at random111The uniformly chosen iterate is for the sake of analysis, and it‚Äôs a standard approach often used in convergence to stationary points analysis. See, _e.g._, (Ghadimi and Lan, [2013]); Reddi et al., [2016])). from {ùíô1,‚Ä¶,ùíôT}subscriptùíô1‚Ä¶subscriptùíôùëá\\\\{{\\\\bm{x}}\\_{1},\\\\dots,{\\\\bm{x}}\\_{T}\\\\}\n\n###### Theorem 1.\n\nLet [Assumption 1]Assumption 1 (Loss near minima). ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") hold and fùëìf have Œ≤ùõΩ\\\\beta-Lipschitz gradients. Let the target accuracy œµ>0italic-œµ0\\\\epsilon>0 be chosen sufficiently small, and Œ¥‚àà(0,1)ùõø01\\\\delta\\\\in(0,1).\nSuppose that ùê±0subscriptùê±0{\\\\bm{x}}\\_{0} is Œ∂ùúÅ\\\\zeta-close to ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nThen, the randomly smoothed perturbation algorithm ( [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) with parameters Œ∑=ùí™‚Äã(Œ¥‚Äãœµ)ùúÇùí™ùõøitalic-œµ\\\\eta=\\\\mathcal{O}\\\\left(\\\\delta\\\\epsilon\\\\right), Œ∑‚Ä≤=1/Œ≤superscriptùúÇ‚Ä≤1ùõΩ\\\\eta^{\\\\prime}=1/\\\\beta, œÅ=ùí™‚Äã(Œ¥‚Äãœµ)ùúåùí™ùõøitalic-œµ\\\\rho=\\\\mathcal{O}\\\\left(\\\\delta\\\\sqrt{\\\\epsilon}\\\\right), œµ0=ùí™‚Äã(Œ¥1.5‚Äãœµ)subscriptitalic-œµ0ùí™superscriptùõø1.5italic-œµ\\\\epsilon\\_{0}=\\\\mathcal{O}\\\\left(\\\\delta^{1.5}\\\\epsilon\\\\right) returns an (œµ,œµ)italic-œµitalic-œµ(\\\\epsilon,\\\\sqrt{\\\\epsilon})-flat minimum with probability at least 1‚àíùí™‚Äã(Œ¥)1ùí™ùõø1-\\\\mathcal{O}\\\\left(\\\\delta\\\\right) after T=ùí™‚Äã(œµ‚àí3‚ÄãŒ¥‚àí4)ùëáùí™superscriptitalic-œµ3superscriptùõø4T=\\\\mathcal{O}\\\\left(\\\\epsilon^{-3}\\\\delta^{-4}\\\\right) iterations.\n\n#### Minimizing flatness only using gradients?\n\nAt first glance, finding a flat minimum seems computationally expensive since minimizing tr‚Å°(‚àá2f)trsuperscript‚àá2ùëì\\\\operatorname{tr}(\\\\nabla^{2}f) would require information about second or higher derivatives.\nThus, [Theorem 1]Theorem 1. ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") may sound quite surprising to some readers since [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") only uses gradients which only pertains to information about first derivatives.\n\nHowever, it turns out using the gradients from the perturbed iterates ùíôt+œÅ‚Äãùíàtsubscriptùíôùë°ùúåsubscriptùíàùë°{\\\\bm{x}}\\_{t}+\\\\rho{\\\\bm{g}}\\_{t} lets us get access to specific third derivatives of fùëìf in a parsimonious way.\nMore precisely, as we shall see in our proof sketch, the crux of the perturbation step ( [6]In 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) is that the gradients of ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} can be estimated using gradients from perturbed iterates.\nIn particular, we show that (see ( [14]In Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"))) in expectation, it holds that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîº‚Äãùíót=12‚ÄãœÅ2‚ÄãProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáùóçùóã¬Ø‚Äã(ùíôt)+lower order terms.ùîºsubscriptùíóùë°12superscriptùúå2subscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àá¬Øùóçùóãsubscriptùíôùë°lower order terms.\\\\displaystyle\\\\mathbb{E}{\\\\bm{v}}\\_{t}=\\\\frac{1}{2}\\\\rho^{2}\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla\\\\overline{\\\\mathsf{tr}}({\\\\bm{x}}\\_{t})+\\\\text{lower order terms.} |  | (8) |\n\nUsing this property, one can prove that each step of the perturbed gradient step decrease the trace of Hessian along the local minima set; see [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\").\nWe remark that this general principle of estimating higher order derivatives from gradients in a parsimonious way is inspired by recent works on understanding dynamics of sharpness-aware minimization (Bartlett et al., [2022]); Wen et al., [2022])) and gradient descent at edge-of-stability (Arora et al., [2022]); Damian et al., [2023])).\n\n### 3.2 Proof sketch of [Theorem 1]Theorem 1. ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")\n\nIn this section, we provide a proof sketch of [Theorem 1]Theorem 1. ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"),\nThe full proof can be found in [Appendix B]Appendix B Proof of Theorem 1 ‚Ä£ How to escape sharp minima with random perturbations\").\nWe first sketch the overall structure of the proof and then detail each part:\n\n1. 1.\n\n\nWe first show that iterates enters an ùí™‚Äã(œµ0)ùí™subscriptitalic-œµ0\\\\mathcal{O}\\\\left(\\\\epsilon\\_{0}\\\\right)-neighborhood of the local minima set ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star} in a few steps, and the subsequent iterates remain there.\n\n2. 2.\n\n\nWhen the iterates is ùí™‚Äã(œµ0)ùí™subscriptitalic-œµ0\\\\mathcal{O}\\\\left(\\\\epsilon\\_{0}\\\\right)-near ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}, we show that the perturbed gradient step in [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") decreases the trace of Hessian ùóçùóã¬Ø‚Äã(Œ¶)¬ØùóçùóãŒ¶\\\\overline{\\\\mathsf{tr}}(\\\\Phi) in expectation as long as ‚Äñ‚àÇŒ¶‚Äã(Œ¶‚Äã(ùíôt))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))‚Äñ‚â•œµnormŒ¶Œ¶subscriptùíôùë°‚àá¬ØùóçùóãŒ¶subscriptùíôùë°italic-œµ\\\\left\\\\\\|\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\right\\\\\\|\\\\geq\\\\sqrt{\\\\epsilon}.\n\n3. 3.\n\n\nWe then combine the above two properties to show that [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") finds a flat minimum.\n\n\n#### Perturbation does not increase the cost too much.\n\nFirst, since ùíô0subscriptùíô0{\\\\bm{x}}\\_{0} is Œ∂ùúÅ\\\\zeta-close to ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star} where the loss function satisfies the Polyak‚Äì≈Åojasiewicz (PL) inequality, the standard linear convergence result of gradient descent guarantees that the iterate enters an ùí™‚Äã(œµ0)ùí™subscriptitalic-œµ0\\\\mathcal{O}\\\\left(\\\\epsilon\\_{0}\\\\right)-neighborhood of ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nWe thus assume that ùíô0subscriptùíô0{\\\\bm{x}}\\_{0} itself satisfies ‚Äñ‚àáf‚Äã(ùíô0)‚Äñ‚â§œµ0norm‚àáùëìsubscriptùíô0subscriptitalic-œµ0\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{0})\\\\right\\\\\\|\\\\leq\\\\epsilon\\_{0} without loss of generality.\nWe next show that the perturbation ùíótsubscriptùíóùë°{\\\\bm{v}}\\_{t} we add at each step to the gradient only leads to a small increase in the cost. This claim follows from the following variant of well-known descent lemma.\n\n###### Lemma 1.\n\nFor Œ∑‚â§1/Œ≤ùúÇ1ùõΩ\\\\eta\\\\leq 1/\\\\beta, consider a one-step of the perturbed gradient step of [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"): ùê±t+1‚Üêùê±t‚àíŒ∑‚Äã(‚àáf‚Äã(ùê±t)+ùêØt)‚Üêsubscriptùê±ùë°1subscriptùê±ùë°ùúÇ‚àáùëìsubscriptùê±ùë°subscriptùêØùë°{\\\\bm{x}}\\_{t+1}\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta\\\\left(\\\\nabla f({\\\\bm{x}}\\_{t})+{\\\\bm{v}}\\_{t}\\\\right).\nThen we have\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | f‚Äã(ùíôt+1)‚â§f‚Äã(ùíôt)‚àí12‚ÄãŒ∑‚Äã‚Äñ‚àáf‚Äã(ùíôt)‚Äñ2+Œ≤‚ÄãŒ∑22‚Äã‚Äñùíót‚Äñ2.ùëìsubscriptùíôùë°1ùëìsubscriptùíôùë°12ùúÇsuperscriptnorm‚àáùëìsubscriptùíôùë°2ùõΩsuperscriptùúÇ22superscriptnormsubscriptùíóùë°2\\\\displaystyle f({\\\\bm{x}}\\_{t+1})\\\\leq f({\\\\bm{x}}\\_{t})-\\\\frac{1}{2}\\\\eta\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{t})\\\\right\\\\\\|^{2}+\\\\frac{\\\\beta\\\\eta^{2}}{2}\\\\left\\\\\\|{\\\\bm{v}}\\_{t}\\\\right\\\\\\|^{2}. |  | (9) |\n\nThe proof of [Lemma 1]Lemma 1. ‚Ä£ Perturbation does not increase the cost too much. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") uses the fact that ùíót‚üÇ‚àáf‚Äã(ùíôt)perpendicular-tosubscriptùíóùë°‚àáùëìsubscriptùíôùë°{\\\\bm{v}}\\_{t}\\\\perp\\\\nabla f({\\\\bm{x}}\\_{t}).\nNow, with the Œ≤ùõΩ\\\\beta-Lipschitz gradient condition, one can show that ‚Äñùíót‚Äñ=ùí™‚Äã(œÅ)normsubscriptùíóùë°ùí™ùúå\\\\left\\\\\\|{\\\\bm{v}}\\_{t}\\\\right\\\\\\|=\\\\mathcal{O}\\\\left(\\\\rho\\\\right).\nHence, whenever the gradient becomes large as ‚Äñ‚àáf‚Äã(ùíôt)‚Äñ‚â≥Œ∑‚ÄãœÅ2greater-than-or-equivalent-tonorm‚àáùëìsubscriptùíôùë°ùúÇsuperscriptùúå2\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{t})\\\\right\\\\\\|\\\\gtrsim\\\\eta\\\\rho^{2}, the perturbed update starts decreasing the loss again and brings the iterates back close to ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nUsing this property, one can show that the iterates ùíôtsubscriptùíôùë°{\\\\bm{x}}\\_{t} remain in an œµ0subscriptitalic-œµ0\\\\epsilon\\_{0}-neighborhood of ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}, i.e., ‚Äñùíôt‚àíŒ¶‚Äã(ùíôt)‚Äñ=ùí™‚Äã(‚Äñ‚àáf‚Äã(ùíôt)‚Äñ)=ùí™‚Äã(œµ0)normsubscriptùíôùë°Œ¶subscriptùíôùë°ùí™norm‚àáùëìsubscriptùíôùë°ùí™subscriptitalic-œµ0\\\\left\\\\\\|{\\\\bm{x}}\\_{t}-\\\\Phi({\\\\bm{x}}\\_{t})\\\\right\\\\\\|=\\\\mathcal{O}\\\\left(\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{t})\\\\right\\\\\\|\\\\right)=\\\\mathcal{O}\\\\left(\\\\epsilon\\_{0}\\\\right). See [Lemma 8]Lemma 8. ‚Ä£ A.1 Auxiliary lemmas ‚Ä£ Appendix A Preliminaries ‚Ä£ How to escape sharp minima with random perturbations\") for precise details.\n\n#### Perturbation step decreases ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))¬ØùóçùóãŒ¶subscriptùíôùë°\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) in expectation.\n\nNow the main part of the analysis is to show that the perturbation updates lead to decrease in the trace Hessian along ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}, i.e., decrease in ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))¬ØùóçùóãŒ¶subscriptùíôùë°\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})), as show in the following result.\n\n###### Lemma 2.\n\nLet [Assumption 1]Assumption 1 (Loss near minima). ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") hold. Let the target accuracy œµ>0italic-œµ0\\\\epsilon>0 be chosen sufficiently small, and Œ¥‚àà(0,1)ùõø01\\\\delta\\\\in(0,1).\nConsider the perturbed gradient step of [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"), i.e.,\nùê±t+1‚Üêùê±t‚àíŒ∑‚Äã(‚àáf‚Äã(ùê±t)+ùêØt)‚Üêsubscriptùê±ùë°1subscriptùê±ùë°ùúÇ‚àáùëìsubscriptùê±ùë°subscriptùêØùë°{\\\\bm{x}}\\_{t+1}\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta\\\\left(\\\\nabla f({\\\\bm{x}}\\_{t})+{\\\\bm{v}}\\_{t}\\\\right) starting from ùê±tsubscriptùê±ùë°{\\\\bm{x}}\\_{t} such that ‚Äñ‚àáf‚Äã(ùê±t)‚Äñ‚â§œµ0norm‚àáùëìsubscriptùê±ùë°subscriptitalic-œµ0\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{t})\\\\right\\\\\\|\\\\leq\\\\epsilon\\_{0} with parameters Œ∑=ùí™‚Äã(Œ¥‚Äãœµ)ùúÇùí™ùõøitalic-œµ\\\\eta=\\\\mathcal{O}\\\\left(\\\\delta\\\\epsilon\\\\right), œÅ=ùí™‚Äã(Œ¥‚Äãœµ)ùúåùí™ùõøitalic-œµ\\\\rho=\\\\mathcal{O}\\\\left(\\\\delta\\\\sqrt{\\\\epsilon}\\\\right) and œµ0=ùí™‚Äã(Œ¥1.5‚Äãœµ)subscriptitalic-œµ0ùí™superscriptùõø1.5italic-œµ\\\\epsilon\\_{0}=\\\\mathcal{O}\\\\left(\\\\delta^{1.5}\\\\epsilon\\\\right).\nAssume that ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùê±t))¬ØùóçùóãŒ¶subscriptùê±ùë°\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) has sufficiently large gradient\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Äñ‚àÇŒ¶‚Äã(Œ¶‚Äã(ùíôt))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))‚Äñ‚â•œµ.normŒ¶Œ¶subscriptùíôùë°‚àá¬ØùóçùóãŒ¶subscriptùíôùë°italic-œµ\\\\displaystyle\\\\left\\\\\\|\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\right\\\\\\|\\\\geq\\\\sqrt{\\\\epsilon}\\\\,. |  | (10) |\n\nThen the trace of Hessian ùóçùóã¬Ø‚Äã(Œ¶)¬ØùóçùóãŒ¶\\\\overline{\\\\mathsf{tr}}(\\\\Phi) decreases as\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùîº‚Äãùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt+1))‚àíùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))ùîº¬ØùóçùóãŒ¶subscriptùíôùë°1¬ØùóçùóãŒ¶subscriptùíôùë°\\\\displaystyle\\\\mathbb{E}\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t+1}))-\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) | ‚â§‚àíŒ©‚Äã(Œ¥3‚Äãœµ3),absentŒ©superscriptùõø3superscriptitalic-œµ3\\\\displaystyle\\\\leq-\\\\Omega(\\\\delta^{3}\\\\epsilon^{3})\\\\,, |  | (11) |\n\nwhere the expectation is over the perturbation ùê†t‚àºUniform‚Äã(ùïäd‚àí1)similar-tosubscriptùê†ùë°Uniformsuperscriptùïäùëë1{\\\\bm{g}}\\_{t}\\\\sim\\\\mathrm{Uniform}(\\\\mathbb{S}^{d-1}) in [Algorithm 1]Algorithm 1 ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\").\n\n_Proof sketch of [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"):_\nWe begin with the Taylor expansion of the perturbed gradient:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ‚àáf‚Äã(ùíôt+œÅ‚Äãùíàt)‚àáùëìsubscriptùíôùë°ùúåsubscriptùíàùë°\\\\displaystyle\\\\nabla f({\\\\bm{x}}\\_{t}+\\\\rho{\\\\bm{g}}\\_{t}) | =‚àáf‚Äã(ùíôt)+œÅ‚Äã‚àá2f‚Äã(ùíôt)‚Äãùíàtabsent‚àáùëìsubscriptùíôùë°ùúåsuperscript‚àá2ùëìsubscriptùíôùë°subscriptùíàùë°\\\\displaystyle=\\\\nabla f({\\\\bm{x}}\\_{t})+\\\\rho\\\\nabla^{2}f({\\\\bm{x}}\\_{t}){\\\\bm{g}}\\_{t} |  | (12) |\n|  |  | +12‚ÄãœÅ2‚Äã‚àá3f‚Äã(ùíôt)‚Äã\\[ùíàt,ùíàt\\]+ùí™‚Äã(œÅ3).12superscriptùúå2superscript‚àá3ùëìsubscriptùíôùë°subscriptùíàùë°subscriptùíàùë°ùí™superscriptùúå3\\\\displaystyle+\\\\frac{1}{2}\\\\rho^{2}\\\\nabla^{3}f({\\\\bm{x}}\\_{t})\\\\left\\[{\\\\bm{g}}\\_{t},{\\\\bm{g}}\\_{t}\\\\right\\]+\\\\mathcal{O}\\\\left(\\\\rho^{3}\\\\right)\\\\,. |  | (13) |\n\nNow let us compute the expectation of the projected out version of the perturbed gradient, i.e., ùîº‚ÄãProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáf‚Äã(ùíôt+œÅ‚Äãùíàt)ùîºsubscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àáùëìsubscriptùíôùë°ùúåsubscriptùíàùë°\\\\mathbb{E}\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla f({\\\\bm{x}}\\_{t}+\\\\rho{\\\\bm{g}}\\_{t}).\nFirst, note that in ( [12]In Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")), the projection operator removes ‚àáf‚Äã(ùíôt)‚àáùëìsubscriptùíôùë°\\\\nabla f({\\\\bm{x}}\\_{t}), and using the fact ùîº‚Äã\\[ùíàt\\]=ùüéùîºdelimited-\\[\\]subscriptùíàùë°0\\\\mathbb{E}\\[{\\\\bm{g}}\\_{t}\\]=\\\\mathbf{0}, the second term œÅ‚Äã‚àá2f‚Äã(ùíôt)‚Äãùíàtùúåsuperscript‚àá2ùëìsubscriptùíôùë°subscriptùíàùë°\\\\rho\\\\nabla^{2}f({\\\\bm{x}}\\_{t}){\\\\bm{g}}\\_{t} also vanishes in expectation.\nTurning to the third term, an interesting thing happens.\nSince ùîº‚Äã\\[ùíàt‚Äãùíàt‚ä§\\]=1d‚Äãùêàdùîºdelimited-\\[\\]subscriptùíàùë°superscriptsubscriptùíàùë°top1ùëësubscriptùêàùëë\\\\mathbb{E}\\[{\\\\bm{g}}\\_{t}{\\\\bm{g}}\\_{t}^{\\\\top}\\]=\\\\frac{1}{d}\\\\mathbf{I}\\_{d}, using the fact ‚àá3f‚Äã(ùíôt)‚Äã\\[ùíàt,ùíàt\\]=‚àá(‚àá2f‚Äã(ùíôt)‚Äã\\[ùíàt,ùíàt\\])=‚àátr‚Å°(‚àá2f‚Äã(ùíôt)‚Äãùíàt‚Äãùíàt‚ä§)superscript‚àá3ùëìsubscriptùíôùë°subscriptùíàùë°subscriptùíàùë°‚àásuperscript‚àá2ùëìsubscriptùíôùë°subscriptùíàùë°subscriptùíàùë°‚àátrsuperscript‚àá2ùëìsubscriptùíôùë°subscriptùíàùë°superscriptsubscriptùíàùë°top\\\\nabla^{3}f({\\\\bm{x}}\\_{t})\\\\left\\[{\\\\bm{g}}\\_{t},{\\\\bm{g}}\\_{t}\\\\right\\]=\\\\nabla(\\\\nabla^{2}f({\\\\bm{x}}\\_{t})\\\\left\\[{\\\\bm{g}}\\_{t},{\\\\bm{g}}\\_{t}\\\\right\\])=\\\\nabla\\\\operatorname{tr}\\\\left(\\\\nabla^{2}f({\\\\bm{x}}\\_{t}){\\\\bm{g}}\\_{t}{\\\\bm{g}}\\_{t}^{\\\\top}\\\\right), it follows that\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùîº‚Äãùíótùîºsubscriptùíóùë°\\\\displaystyle\\\\mathbb{E}{\\\\bm{v}}\\_{t} | =12‚ÄãœÅ2‚ÄãProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáùóçùóã¬Ø‚Äã(ùíôt)+ùí™‚Äã(œÅ3),absent12superscriptùúå2subscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àá¬Øùóçùóãsubscriptùíôùë°ùí™superscriptùúå3\\\\displaystyle=\\\\frac{1}{2}\\\\rho^{2}\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla\\\\overline{\\\\mathsf{tr}}({\\\\bm{x}}\\_{t})+\\\\mathcal{O}\\\\left(\\\\rho^{3}\\\\right)\\\\,, |  | (14) |\n\nNow, with the high-order smoothness properties of fùëìf, we obtain\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt+1))‚àíùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))¬ØùóçùóãŒ¶subscriptùíôùë°1¬ØùóçùóãŒ¶subscriptùíôùë°\\\\displaystyle\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t+1}))-\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) |  | (15) |\n|  | =ùóçùóã¬Ø‚Äã(Œ¶‚Äã(Œ¶‚Äã(ùíôt+1)))‚àíùóçùóã¬Ø‚Äã(Œ¶‚Äã(Œ¶‚Äã(ùíôt)))absent¬ØùóçùóãŒ¶Œ¶subscriptùíôùë°1¬ØùóçùóãŒ¶Œ¶subscriptùíôùë°\\\\displaystyle\\\\quad=\\\\overline{\\\\mathsf{tr}}(\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t+1})))-\\\\overline{\\\\mathsf{tr}}(\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))) |  | (16) |\n|  | ‚â§‚ü®‚àÇŒ¶‚Äã(Œ¶‚Äã(ùíôt))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt)),Œ¶‚Äã(ùíôt+1)‚àíŒ¶‚Äã(ùíôt)‚ü©absentŒ¶Œ¶subscriptùíôùë°‚àá¬ØùóçùóãŒ¶subscriptùíôùë°Œ¶subscriptùíôùë°1Œ¶subscriptùíôùë°\\\\displaystyle\\\\quad\\\\leq\\\\left\\\\langle\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})),\\\\Phi({\\\\bm{x}}\\_{t+1})-\\\\Phi({\\\\bm{x}}\\_{t})\\\\right\\\\rangle |  | (17) |\n|  | +ùí™‚Äã(‚ÄñŒ¶‚Äã(ùíôt+1)‚àíŒ¶‚Äã(ùíôt)‚Äñ2).ùí™superscriptnormŒ¶subscriptùíôùë°1Œ¶subscriptùíôùë°2\\\\displaystyle\\\\quad\\\\quad+\\\\mathcal{O}\\\\left(\\\\left\\\\\\|\\\\Phi({\\\\bm{x}}\\_{t+1})-\\\\Phi({\\\\bm{x}}\\_{t})\\\\right\\\\\\|^{2}\\\\right)\\\\,. |  | (18) |\n\nUsing ( [14]In Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) and carefully bounding terms, one can prove the following upper bound on ùîº‚Äãùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt+1))‚àíùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))ùîº¬ØùóçùóãŒ¶subscriptùíôùë°1¬ØùóçùóãŒ¶subscriptùíôùë°\\\\mathbb{E}\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t+1}))-\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})): (‚àát‚âî‚àÇŒ¶‚Äã(Œ¶‚Äã(ùíôt))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))‚âîsubscriptbold-‚àáùë°Œ¶Œ¶subscriptùíôùë°‚àá¬ØùóçùóãŒ¶subscriptùíôùë°{\\\\bm{\\\\nabla}}\\_{t}\\\\coloneqq\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})))\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àíŒ∑‚ÄãœÅ2‚Äã‚Äñ‚àát‚Äñ2+O‚Äã(Œ∑‚ÄãœÅ2‚Äãœµ0‚Äã‚Äñ‚àát‚Äñ+Œ∑‚ÄãœÅ3‚Äã‚Äñ‚àát‚Äñ+Œ∑2‚ÄãœÅ2).ùúÇsuperscriptùúå2superscriptnormsubscriptbold-‚àáùë°2ùëÇùúÇsuperscriptùúå2subscriptitalic-œµ0normsubscriptbold-‚àáùë°ùúÇsuperscriptùúå3normsubscriptbold-‚àáùë°superscriptùúÇ2superscriptùúå2\\\\displaystyle-\\\\eta\\\\rho^{2}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|^{2}+O\\\\left(\\\\eta\\\\rho^{2}\\\\epsilon\\_{0}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|+\\\\eta\\\\rho^{3}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|+\\\\eta^{2}\\\\rho^{2}\\\\right)\\\\,. |  | (19) |\n\nThe inequality ( [11]In Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) implies that as long as ‚Äñ‚àát‚Äñ‚â•Œ©‚Äã(max‚Å°{œµ0,œÅ,Œ∑})normsubscriptbold-‚àáùë°Œ©subscriptitalic-œµ0ùúåùúÇ\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|\\\\geq\\\\Omega(\\\\max\\\\{\\\\epsilon\\_{0},\\\\rho,\\\\sqrt{\\\\eta}\\\\}), ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))¬ØùóçùóãŒ¶subscriptùíôùë°\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) decreases in expectation by Œ∑‚ÄãœÅ2‚Äã‚Äñ‚àát‚Äñ2ùúÇsuperscriptùúå2superscriptnormsubscriptbold-‚àáùë°2\\\\eta\\\\rho^{2}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|^{2}.\nDue to our choices of œÅ,Œ∑,œµ0ùúåùúÇsubscriptitalic-œµ0\\\\rho,\\\\eta,\\\\epsilon\\_{0}, [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") follows. ‚àé\n\nUsing similar argument, one can show that the perturbation step does not increase the trace Hessian value too much even when ‚Äñ‚àÇŒ¶‚Äã(Œ¶‚Äã(ùíôt))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))‚Äñ‚â§œµnormŒ¶Œ¶subscriptùíôùë°‚àá¬ØùóçùóãŒ¶subscriptùíôùë°italic-œµ\\\\left\\\\\\|\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\right\\\\\\|\\\\leq\\\\sqrt{\\\\epsilon}.\n\n###### Lemma 3.\n\nUnder the same setting as [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"), assume now that ‚Äñ‚àÇŒ¶‚Äã(Œ¶‚Äã(ùê±t))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùê±t))‚Äñ‚â§œµnormŒ¶Œ¶subscriptùê±ùë°‚àá¬ØùóçùóãŒ¶subscriptùê±ùë°italic-œµ\\\\left\\\\\\|\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\right\\\\\\|\\\\leq\\\\sqrt{\\\\epsilon}. Then we have ùîº‚Äãùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùê±t+1))‚àíùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùê±t))‚â§ùí™‚Äã(Œ¥4‚Äãœµ3)ùîº¬ØùóçùóãŒ¶subscriptùê±ùë°1¬ØùóçùóãŒ¶subscriptùê±ùë°ùí™superscriptùõø4superscriptitalic-œµ3\\\\mathbb{E}\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t+1}))-\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\leq\\\\mathcal{O}\\\\left(\\\\delta^{4}\\\\epsilon^{3}\\\\right).\n\n#### Putting things together.\n\nUsing the results so far, we establish a high probability result by returning one of the iterates uniformly at random, following (Ghadimi and Lan, [2013]); Reddi et al., [2016]); Daneshmand et al., [2018])).\nFor t=1,2,‚Ä¶,Tùë°12‚Ä¶ùëát=1,2,\\\\dots,T,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | let Atsubscriptùê¥ùë°A\\_{t} be the event ‚Äñ‚àÇŒ¶‚Äã(Œ¶‚Äã(ùíôt))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))‚Äñ‚â•œµnormŒ¶Œ¶subscriptùíôùë°‚àá¬ØùóçùóãŒ¶subscriptùíôùë°italic-œµ\\\\left\\\\\\|\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\right\\\\\\|\\\\geq\\\\sqrt{\\\\epsilon}, |  | (20) |\n\nand Let PtsubscriptùëÉùë°P\\_{t} denote the probability of event Atsubscriptùê¥ùë°A\\_{t}.\nThen, the probability of returning a (œµ,œµ)italic-œµitalic-œµ(\\\\epsilon,\\\\sqrt{\\\\epsilon})-flat minimum is simply equal to 1T‚Äã‚àët=1T(1‚àíPt)1ùëásuperscriptsubscriptùë°1ùëá1subscriptùëÉùë°\\\\frac{1}{T}\\\\sum\\_{t=1}^{T}(1-P\\_{t}).\nIt turns out one can upper bound the sum of PtsubscriptùëÉùë°P\\_{t}‚Äôs using [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"); see [Appendix B]Appendix B Proof of Theorem 1 ‚Ä£ How to escape sharp minima with random perturbations\") for details.\nIn particular, choosing T=Œ©‚Äã(œµ‚àí3‚ÄãŒ¥‚àí4)ùëáŒ©superscriptitalic-œµ3superscriptùõø4T={\\\\Omega}\\\\left(\\\\epsilon^{-3}\\\\delta^{-4}\\\\right), we get\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 1T‚Äã‚àët=1TPt‚â≤ùîº‚Äãùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíô0))T‚ÄãŒ¥3‚Äãœµ3+Œ¥=ùí™‚Äã(Œ¥).less-than-or-similar-to1ùëásuperscriptsubscriptùë°1ùëásubscriptùëÉùë°ùîº¬ØùóçùóãŒ¶subscriptùíô0ùëásuperscriptùõø3superscriptitalic-œµ3ùõøùí™ùõø\\\\displaystyle\\\\frac{1}{T}\\\\sum\\_{t=1}^{T}P\\_{t}\\\\lesssim\\\\frac{\\\\mathbb{E}\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{0}))}{T\\\\delta^{3}\\\\epsilon^{3}}+\\\\delta=\\\\mathcal{O}\\\\left(\\\\delta\\\\right)\\\\,. |  | (21) |\n\nThis concludes the proof of [Theorem 1]Theorem 1. ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\").",
            "citations": null
          },
          "4 Faster escape with sharpness-aware perturbation": {
            "content": "In this section, we present another gradient-based algorithm for finding an approximate flat minima for the case where the loss fùëìf is a training loss over a training data set.\nMore formally, we consider the following setting for training loss, following the one in\n(Wen et al., [2022])).\n\n###### Setting 1(Training loss over data).\n\nLet nùëõn be the number of training data, and for i=1,‚Ä¶,nùëñ1‚Ä¶ùëõi=1,\\\\dots,n, let pi‚Äã(ùê±)subscriptùëùùëñùê±p\\_{i}({\\\\bm{x}}) be the model prediction output on the iùëñi-th data, and yisubscriptùë¶ùëñy\\_{i} be the iùëñi-th label.\nFor a loss function ‚Ñì‚Ñì\\\\ell, let fùëìf be defined as the following training loss\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | f‚Äã(ùíô)=1n‚Äã‚àëi=1nfi‚Äã(ùíô)‚âî1n‚Äã‚àëi=1n‚Ñì‚Äã(pi‚Äã(ùíô),yi).ùëìùíô1ùëõsuperscriptsubscriptùëñ1ùëõsubscriptùëìùëñùíô‚âî1ùëõsuperscriptsubscriptùëñ1ùëõ‚Ñìsubscriptùëùùëñùíôsubscriptùë¶ùëñ\\\\displaystyle f({\\\\bm{x}})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}f\\_{i}({\\\\bm{x}})\\\\coloneqq\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\ell(p\\_{i}({\\\\bm{x}}),y\\_{i})\\\\,. |  | (22) |\n\nHere ‚Ñì‚Ñì\\\\ell satifies arg‚Äãminz‚àà‚Ñù‚Å°‚Ñì‚Äã(z,y)=ysubscriptargminùëß‚Ñù‚Ñìùëßùë¶ùë¶\\\\operatorname\\*{arg\\\\,min}\\_{z\\\\in\\\\mathbb{R}}\\\\ell(z,y)=y‚àÄyfor-allùë¶\\\\forall y, and ‚àÇ2‚Ñì‚Äã(z,y)‚àÇ2z\\|z=y>0evaluated-atsuperscript2‚Ñìùëßùë¶superscript2ùëßùëßùë¶0\\\\frac{\\\\partial^{2}\\\\ell(z,y)}{\\\\partial^{2}z}\\|\\_{z=y}>0.\nLastly, we consider ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star} to be the set of global minima, i.e., ùí≥‚ãÜ={ùê±‚àà‚Ñùd:pi‚Äã(ùê±)=yi,‚àÄi=1,‚Ä¶,n}superscriptùí≥‚ãÜconditional-setùê±superscript‚Ñùùëëformulae-sequencesubscriptùëùùëñùê±subscriptùë¶ùëñfor-allùëñ1‚Ä¶ùëõ\\\\mathcal{X}^{\\\\star}=\\\\{{\\\\bm{x}}\\\\in\\\\mathbb{R}^{d}~{}:~{}p\\_{i}({\\\\bm{x}})=y\\_{i},\\\\forall i=1,\\\\dots,n\\\\}.\nWe assume that ‚àápi‚Äã(ùê±)‚â†ùüé‚àásubscriptùëùùëñùê±0\\\\nabla p\\_{i}({\\\\bm{x}})\\\\neq\\\\mathbf{0} for ùê±‚ààùí≥‚ãÜùê±superscriptùí≥‚ãÜ{\\\\bm{x}}\\\\in\\\\mathcal{X}^{\\\\star}, ‚àÄi=1,‚Ä¶,nfor-allùëñ1‚Ä¶ùëõ\\\\forall i=1,\\\\dots,n.\n\nWe note that the assumption that ‚àápi‚Äã(ùíô)‚â†ùüé‚àásubscriptùëùùëñùíô0\\\\nabla p\\_{i}({\\\\bm{x}})\\\\neq\\\\mathbf{0} for ùíô‚ààùí≥‚ãÜùíôsuperscriptùí≥‚ãÜ{\\\\bm{x}}\\\\in\\\\mathcal{X}^{\\\\star} is without loss of generality.\nMore precisely, by Sard‚Äôs Theorem, ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star} defined above is just equal to the set of global minima, except for a measure-zero set of labels.\n\n### 4.1 Main result\n\nUnder [1]Setting 1 (Training loss over data). ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"), we present another gradient-based algorithm for finding approximate flat minima ( [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")).\nThe main component of our proposed algorithm is the perturbed gradient step\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùíôt+1subscriptùíôùë°1\\\\displaystyle{\\\\bm{x}}\\_{t+1} | ‚Üêùíôt‚àíŒ∑‚Äã(‚àáf‚Äã(ùíôt)+ùíót),where‚Üêabsentsubscriptùíôùë°ùúÇ‚àáùëìsubscriptùíôùë°subscriptùíóùë°where\\\\displaystyle\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta\\\\left(\\\\nabla f({\\\\bm{x}}\\_{t})+{\\\\bm{v}}\\_{t}\\\\right)\\\\,,\\\\quad\\\\text{where} |  | (23) |\n|  | ùíótsubscriptùíóùë°\\\\displaystyle{\\\\bm{v}}\\_{t} | ‚âîProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáfi‚Äã(ùíôt+œÅ‚ÄãœÉt‚Äã‚àáfi‚Äã(ùíôt)‚Äñ‚àáfi‚Äã(ùíôt)‚Äñ)‚âîabsentsubscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àásubscriptùëìùëñsubscriptùíôùë°ùúåsubscriptùúéùë°‚àásubscriptùëìùëñsubscriptùíôùë°norm‚àásubscriptùëìùëñsubscriptùíôùë°\\\\displaystyle\\\\coloneqq\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t}+\\\\rho\\\\sigma\\_{t}\\\\frac{\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})}{\\\\left\\\\\\|\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})\\\\right\\\\\\|}) |  | (24) |\n\nfor random samples i‚àº\\[n\\]similar-toùëñdelimited-\\[\\]ùëõi\\\\sim\\[n\\] and œÉt‚àº{¬±1}similar-tosubscriptùúéùë°plus-or-minus1\\\\sigma\\_{t}\\\\sim\\\\{\\\\pm 1\\\\}.\n\n###### Remark 1.\n\nHere, note that the direction ‚àáfi‚Äã(ùê±t)/‚Äñ‚àáfi‚Äã(ùê±t)‚Äñ‚àásubscriptùëìùëñsubscriptùê±ùë°norm‚àásubscriptùëìùëñsubscriptùê±ùë°\\\\nicefrac{{\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})}}{{\\\\left\\\\\\|\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})\\\\right\\\\\\|}} could be ill-defined when the stochastic gradient exactly vanishes at ùê±tsubscriptùê±ùë°{\\\\bm{x}}\\_{t}.\nIn that case, one can use ‚àáfi‚Äã(ùê±t+ùõè)/‚Äñ‚àáfi‚Äã(ùê±t+ùõè)‚Äñ‚àásubscriptùëìùëñsubscriptùê±ùë°ùõènorm‚àásubscriptùëìùëñsubscriptùê±ùë°ùõè\\\\nicefrac{{\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t}+{\\\\bm{\\\\xi}})}}{{\\\\left\\\\\\|\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t}+{\\\\bm{\\\\xi}})\\\\right\\\\\\|}} where ùõèùõè\\\\bm{\\\\xi} is a random vector with a small norm, say œµ3superscriptitalic-œµ3\\\\epsilon^{3}.\nHence, to avoid tedious technicality, we assume for the remaining of the paper that ( [23]In 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) is well-defined at each step.\n\nNotice the distinction between ( [6]In 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")) and ( [23]In 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")).\nIn particular, for the randomly smoothed perturbation algorithm, ùíótsubscriptùíóùë°{\\\\bm{v}}\\_{t} is computed using the gradient at a randomly perturbed iterate.\nOn the other hand, in the update ( [23]In 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")), ùíótsubscriptùíóùë°{\\\\bm{v}}\\_{t} is computed using the _stochastic_ gradient at an iterate perturbed along the _stochastic gradient direction_.\nThe idea of computing the (stochastic) gradient at an iterate perturbed along the (stochastic) gradient direction is inspired by sharpenss-aware minimization (SAM) of Foret et al. ( [2021])), a practical optimization algorithm showing substantial success in practice. Hence, we call our algorithm the _sharpness-aware perturbation_ algorithm.\n\nAs we shall see in detail in [Theorem 2]Theorem 2. ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"), the sharpness-aware perturbation step ( [23]In 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) leads to an improved guarantee for finding a flat minimum.\nThe key idea‚Äîas we detail in [Subsection 4.2]Proof sketch of Theorem 2 ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")‚Äîis that this perturbation leads to faster decrease in ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}}.\nIn particular, [Lemma 4]Lemma 4. ‚Ä£ Sharpness-aware perturbation decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) faster. ‚Ä£ 4.2 Proof sketch of Theorem 2 ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\") shows that each sharpness-aware perturbation decreases ùóçùóã¬Ø¬Øùóçùóã\\\\overline{\\\\mathsf{tr}} by Œ©‚Äã(d‚Äãmin‚Å°{1,œµ‚Äãd3}‚ãÖŒ¥3‚Äãœµ2)Œ©‚ãÖùëë1italic-œµsuperscriptùëë3superscriptùõø3superscriptitalic-œµ2\\\\Omega({d\\\\min\\\\{1,\\\\epsilon d^{3}\\\\}}\\\\cdot\\\\delta^{3}\\\\epsilon^{2}), which is\nd‚Äãœµ‚àí1‚Äãmin‚Å°{1,œµ‚Äãd3}ùëësuperscriptitalic-œµ11italic-œµsuperscriptùëë3d\\\\epsilon^{-1}\\\\min\\\\{1,\\\\epsilon d^{3}\\\\} times larger than the decrease of Œ©‚Äã(Œ¥3‚Äãœµ3)Œ©superscriptùõø3superscriptitalic-œµ3\\\\Omega(\\\\delta^{3}\\\\epsilon^{3}) due to the randomly smoothed perturbation (shown in [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")).\nWe now present the theoretical guarantee of [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\").\n\nAlgorithm 2 Sharpness-Aware Perturbation\n\n0:ùíô0subscriptùíô0{\\\\bm{x}}\\_{0}, learning rates Œ∑,Œ∑‚Ä≤ùúÇsuperscriptùúÇ‚Ä≤\\\\eta,\\\\eta^{\\\\prime}, perturbation radius œÅùúå\\\\rho, tolerance œµ0subscriptitalic-œµ0\\\\epsilon\\_{0}, the number of steps TùëáT.\n\nfort=0,1,‚Ä¶,T‚àí1ùë°01‚Ä¶ùëá1t=0,1,\\\\ldots,T-1do\n\nif‚Äñ‚àáf‚Äã(ùíôt)‚Äñ‚â§œµ0norm‚àáùëìsubscriptùíôùë°subscriptitalic-œµ0\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{t})\\\\right\\\\\\|\\\\leq\\\\epsilon\\_{0}then\n\nùíôt+1‚Üêùíôt‚àíŒ∑‚Äã(‚àáf‚Äã(ùíôt)+ùíót)‚Üêsubscriptùíôùë°1subscriptùíôùë°ùúÇ‚àáùëìsubscriptùíôùë°subscriptùíóùë°{\\\\bm{x}}\\_{t+1}\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta\\\\left(\\\\nabla f({\\\\bm{x}}\\_{t})+{\\\\bm{v}}\\_{t}\\\\right),\n\n        where ùíót‚âîProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáfi‚Äã(ùíôt+œÅ‚ÄãœÉt‚Äã‚àáfi‚Äã(ùíôt)‚Äñ‚àáfi‚Äã(ùíôt)‚Äñ)‚âîsubscriptùíóùë°subscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àásubscriptùëìùëñsubscriptùíôùë°ùúåsubscriptùúéùë°‚àásubscriptùëìùëñsubscriptùíôùë°norm‚àásubscriptùëìùëñsubscriptùíôùë°{\\\\bm{v}}\\_{t}\\\\coloneqq\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t}+\\\\rho\\\\sigma\\_{t}\\\\frac{\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})}{\\\\left\\\\\\|\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})\\\\right\\\\\\|}) for i‚àºUnif‚Äã(\\[n\\])similar-toùëñUnifdelimited-\\[\\]ùëõi\\\\sim\\\\mathrm{Unif}(\\[n\\]) and œÉt‚àºUnif‚Äã({¬±1})similar-tosubscriptùúéùë°Unifplus-or-minus1\\\\sigma\\_{t}\\\\sim\\\\mathrm{Unif}(\\\\{\\\\pm 1\\\\}).\n\nelse\n\nùíôt+1‚Üêùíôt‚àíŒ∑‚Ä≤‚Äã‚àáf‚Äã(ùíôt)‚Üêsubscriptùíôùë°1subscriptùíôùë°superscriptùúÇ‚Ä≤‚àáùëìsubscriptùíôùë°{\\\\bm{x}}\\_{t+1}\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta^{\\\\prime}\\\\nabla f({\\\\bm{x}}\\_{t})\n\nreturnùíô^^ùíô\\\\widehat{{\\\\bm{x}}} uniformly at random from {ùíô1,‚Ä¶,ùíôT}subscriptùíô1‚Ä¶subscriptùíôùëá\\\\{{\\\\bm{x}}\\_{1},\\\\dots,{\\\\bm{x}}\\_{T}\\\\}\n\n###### Theorem 2.\n\nUnder [1]Setting 1 (Training loss over data). ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"), let [Assumption 1]Assumption 1 (Loss near minima). ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") hold and each fisubscriptùëìùëñf\\_{i} is four times coutinuously differentiable within the Œ∂ùúÅ\\\\zeta-neighborhood of ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star} and have Œ≤ùõΩ\\\\beta-Lipschitz gradients.\nLet the target accuracy œµ>0italic-œµ0\\\\epsilon>0 be chosen sufficiently small, and Œ¥‚àà(0,1)ùõø01\\\\delta\\\\in(0,1).\nSuppose that ùê±0subscriptùê±0{\\\\bm{x}}\\_{0} is Œ∂ùúÅ\\\\zeta-close to ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}.\nThen, for ŒΩ‚âîmin‚Å°{d,œµ‚àí1/3}‚âîùúàùëësuperscriptitalic-œµ13\\\\nu\\\\coloneqq\\\\min\\\\{d,\\\\epsilon^{-1/3}\\\\}, the sharpness-aware perturbation algorithm ( [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) with parameters\nŒ∑=ùí™‚Äã(ŒΩ‚ÄãŒ¥‚Äãœµ)ùúÇùí™ùúàùõøitalic-œµ\\\\eta=\\\\mathcal{O}\\\\left(\\\\nu\\\\delta\\\\epsilon\\\\right), Œ∑‚Ä≤=1/Œ≤superscriptùúÇ‚Ä≤1ùõΩ\\\\eta^{\\\\prime}=1/\\\\beta, œÅ=ùí™‚Äã(ŒΩ‚ÄãŒ¥‚Äãœµ)ùúåùí™ùúàùõøitalic-œµ\\\\rho=\\\\mathcal{O}\\\\left(\\\\nu\\\\delta\\\\sqrt{\\\\epsilon}\\\\right), œµ0=ùí™‚Äã(ŒΩ1.5‚ÄãŒ¥1.5‚Äãœµ)subscriptitalic-œµ0ùí™superscriptùúà1.5superscriptùõø1.5italic-œµ\\\\epsilon\\_{0}=\\\\mathcal{O}\\\\left(\\\\nu^{1.5}\\\\delta^{1.5}\\\\epsilon\\\\right) returns an (ùí™‚Äã(œµ0),œµ)ùí™subscriptitalic-œµ0italic-œµ(\\\\mathcal{O}\\\\left(\\\\epsilon\\_{0}\\\\right),\\\\sqrt{\\\\epsilon})-flat minimum with probability at least 1‚àíùí™‚Äã(Œ¥)1ùí™ùõø1-\\\\mathcal{O}\\\\left(\\\\delta\\\\right) after T=ùí™‚Äã(d‚àí1‚Äãœµ‚àí2‚ãÖmax‚Å°{1,1d3‚Äãœµ}‚ãÖŒ¥‚àí4)ùëáùí™‚ãÖsuperscriptùëë1superscriptitalic-œµ211superscriptùëë3italic-œµsuperscriptùõø4T=\\\\mathcal{O}\\\\left(d^{-1}\\\\epsilon^{-2}\\\\cdot\\\\max\\\\left\\\\{1,\\\\frac{1}{d^{3}\\\\epsilon}\\\\right\\\\}\\\\cdot\\\\delta^{-4}\\\\right) iterations.\nFrom this (ùí™‚Äã(œµ0),œµ)ùí™subscriptitalic-œµ0italic-œµ(\\\\mathcal{O}\\\\left(\\\\epsilon\\_{0}\\\\right),\\\\sqrt{\\\\epsilon})-flat minimum, gradient descent with step size Œ∑=ùí™‚Äã(œµ)ùúÇùí™italic-œµ\\\\eta=\\\\mathcal{O}\\\\left(\\\\epsilon\\\\right) reaches a (œµ,œµ)italic-œµitalic-œµ(\\\\epsilon,\\\\sqrt{\\\\epsilon})-flat minimum within ùí™‚Äã(œµ‚àí1‚Äãlog‚Å°(1/œµ))ùí™superscriptitalic-œµ11italic-œµ\\\\mathcal{O}\\\\left(\\\\epsilon^{-1}\\\\log(1/\\\\epsilon)\\\\right) iterations.\n\n#### Curious role of stochastic gradients.\n\nSome readers might wonder the role of stochastic gradients in ( [23]In 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"))‚Äîfor instance, what happens if we replace them by _full-batch_ gradients ‚àáf‚àáùëì\\\\nabla f?\nEmpirically, it has been observed that for SAM‚Äôs performance, it is important to use stochastic gradients over full-batch (Foret et al., [2021]); Kaddour et al., [2022]); Kaur et al., [2023])).\nOur analysis (see the proof sketch of [Lemma 4]Lemma 4. ‚Ä£ Sharpness-aware perturbation decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) faster. ‚Ä£ 4.2 Proof sketch of Theorem 2 ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")) provides a partial explanation for the success of using stochastic gradients, from the perspective of finding flat minima.\nIn particular, we show that stochastic gradients are important for faster decrease in the trace of the Hessian.\n\n### 4.2 Proof sketch of [Theorem 2]Theorem 2. ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")\n\nIn this section, we sketch a proof of [Theorem 2]Theorem 2. ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"); for the full proof please see [Appendix C]Appendix C Proof of Theorem 2 ‚Ä£ How to escape sharp minima with random perturbations\").\nFirst, similarly to the proof of [Theorem 1]Theorem 1. ‚Ä£ 3.1 Main result ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"), one can show that once ùíôtsubscriptùíôùë°{\\\\bm{x}}\\_{t} enters an ùí™‚Äã(œµ0)ùí™subscriptitalic-œµ0\\\\mathcal{O}\\\\left(\\\\epsilon\\_{0}\\\\right)-neighborhood of ùí≥‚ãÜsuperscriptùí≥‚ãÜ\\\\mathcal{X}^{\\\\star}, all subsequent iterates ùíôtsubscriptùíôùë°{\\\\bm{x}}\\_{t} remain in the neighborhood. Now we sketch the proof of decrease in the trace of the Hessian.\n\n#### Sharpness-aware perturbation decreases ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))¬ØùóçùóãŒ¶subscriptùíôùë°\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) faster.\n\nSimilarly to [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"), the main part is to show that the trace of Hessian decreases during each perturbed gradient step.\n\n###### Lemma 4.\n\nLet [Assumption 1]Assumption 1 (Loss near minima). ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\") hold.\nLet the target accuracy œµ>0italic-œµ0\\\\epsilon>0 be chosen sufficiently small, and Œ¥‚àà(0,1)ùõø01\\\\delta\\\\in(0,1).\nConsider the perturbed gradient step of [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"), i.e.,\nùê±t+1‚Üêùê±t‚àíŒ∑‚Äã(‚àáf‚Äã(ùê±t)+ùêØt)‚Üêsubscriptùê±ùë°1subscriptùê±ùë°ùúÇ‚àáùëìsubscriptùê±ùë°subscriptùêØùë°{\\\\bm{x}}\\_{t+1}\\\\leftarrow{\\\\bm{x}}\\_{t}-\\\\eta\\\\left(\\\\nabla f({\\\\bm{x}}\\_{t})+{\\\\bm{v}}\\_{t}\\\\right) starting from ùê±tsubscriptùê±ùë°{\\\\bm{x}}\\_{t} such that ‚Äñ‚àáf‚Äã(ùê±t)‚Äñ‚â§œµ0norm‚àáùëìsubscriptùê±ùë°subscriptitalic-œµ0\\\\left\\\\\\|\\\\nabla f({\\\\bm{x}}\\_{t})\\\\right\\\\\\|\\\\leq\\\\epsilon\\_{0} with parameters Œ∑=ùí™‚Äã(ŒΩ‚ÄãŒ¥‚Äãœµ)ùúÇùí™ùúàùõøitalic-œµ\\\\eta=\\\\mathcal{O}\\\\left(\\\\nu\\\\delta\\\\epsilon\\\\right), œÅ=(ŒΩ‚ÄãŒ¥‚Äãœµ)ùúåùúàùõøitalic-œµ\\\\rho=(\\\\nu\\\\delta\\\\sqrt{\\\\epsilon}), œµ0=ùí™‚Äã(ŒΩ1.5‚ÄãŒ¥1.5‚Äãœµ)subscriptitalic-œµ0ùí™superscriptùúà1.5superscriptùõø1.5italic-œµ\\\\epsilon\\_{0}=\\\\mathcal{O}\\\\left(\\\\nu^{1.5}\\\\delta^{1.5}\\\\epsilon\\\\right).\nAssume that ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùê±t))¬ØùóçùóãŒ¶subscriptùê±ùë°\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) has sufficiently large gradient\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Äñ‚àÇŒ¶‚Äã(Œ¶‚Äã(ùíôt))‚Äã‚àáùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))‚Äñ‚â•œµ.normŒ¶Œ¶subscriptùíôùë°‚àá¬ØùóçùóãŒ¶subscriptùíôùë°italic-œµ\\\\displaystyle\\\\left\\\\\\|\\\\partial\\\\Phi(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\nabla\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\right\\\\\\|\\\\geq\\\\sqrt{\\\\epsilon}\\\\,. |  | (25) |\n\nThen the trace of Hessian ùóçùóã¬Ø‚Äã(Œ¶)¬ØùóçùóãŒ¶\\\\overline{\\\\mathsf{tr}}(\\\\Phi) decreases as\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùîº‚Äãùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt+1))‚àíùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))ùîº¬ØùóçùóãŒ¶subscriptùíôùë°1¬ØùóçùóãŒ¶subscriptùíôùë°\\\\displaystyle\\\\mathbb{E}\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t+1}))-\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) | ‚â§‚àíŒ©‚Äã(d‚ÄãŒΩ3‚ÄãŒ¥3‚Äãœµ3),absentŒ©ùëësuperscriptùúà3superscriptùõø3superscriptitalic-œµ3\\\\displaystyle\\\\leq-\\\\Omega({\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}d\\\\nu^{3}}\\\\delta^{3}\\\\epsilon^{3})\\\\,, |  | (26) |\n\nwhere the expectation is over the random samples i‚àºUnif‚Äã(\\[n\\])similar-toùëñUnifdelimited-\\[\\]ùëõi\\\\sim\\\\mathrm{Unif}(\\[n\\]) and œÉt‚àºUnif‚Äã({¬±1})similar-tosubscriptùúéùë°Unifplus-or-minus1\\\\sigma\\_{t}\\\\sim\\\\mathrm{Unif}(\\\\{\\\\pm 1\\\\}) in [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\").\n\n_Proof sketch of [Lemma 4]Lemma 4. ‚Ä£ Sharpness-aware perturbation decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) faster. ‚Ä£ 4.2 Proof sketch of Theorem 2 ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"):_\nFor notational simplicity, let ùíài,t‚âî‚àáfi‚Äã(ùíôt)‚Äñ‚àáfi‚Äã(ùíôt)‚Äñ‚âîsubscriptùíàùëñùë°‚àásubscriptùëìùëñsubscriptùíôùë°norm‚àásubscriptùëìùëñsubscriptùíôùë°{\\\\bm{g}}\\_{i,t}\\\\coloneqq\\\\frac{\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})}{\\\\left\\\\\\|\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})\\\\right\\\\\\|}.\nTo illustrate the main idea effectively, we make the simplifying assumption that for ùíô‚ãÜ‚ààùí≥‚ãÜsuperscriptùíô‚ãÜsuperscriptùí≥‚ãÜ{\\\\bm{x}}^{\\\\star}\\\\in\\\\mathcal{X}^{\\\\star}, the gradient of model outputs {‚àápi‚Äã(ùíô)}i=1nsuperscriptsubscript‚àásubscriptùëùùëñùíôùëñ1ùëõ\\\\{\\\\nabla p\\_{i}({\\\\bm{x}})\\\\}\\_{i=1}^{n} are orthogonal; our full proof in [Appendix C]Appendix C Proof of Theorem 2 ‚Ä£ How to escape sharp minima with random perturbations\") does not require this assumption.\nTo warm-up, let us first consider the case where we use the _full-batch gradient_ instead of the stochastic gradient for the outer part of the perturbation, i.e., consider\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùíót‚Ä≤‚âîProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àáf‚Äã(ùíôt+œÅ‚ÄãœÉt‚Äãùíài,t)‚âîsuperscriptsubscriptùíóùë°‚Ä≤subscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àáùëìsubscriptùíôùë°ùúåsubscriptùúéùë°subscriptùíàùëñùë°\\\\displaystyle{\\\\bm{v}}\\_{t}^{\\\\prime}\\\\coloneqq\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla f({\\\\bm{x}}\\_{t}+\\\\rho\\\\sigma\\_{t}{\\\\bm{g}}\\_{i,t}) |  | (27) |\n\nBecause ùîº‚Äã\\[œÉt‚Äãùíàt\\]=ùüéùîºdelimited-\\[\\]subscriptùúéùë°subscriptùíàùë°0\\\\mathbb{E}\\[\\\\sigma\\_{t}{\\\\bm{g}}\\_{t}\\]=\\\\mathbf{0} (since\nùîº‚Äã\\[œÉt\\]=0ùîºdelimited-\\[\\]subscriptùúéùë°0\\\\mathbb{E}\\[\\\\sigma\\_{t}\\]=0), a similar calculation as the proof of [Lemma 2]Lemma 2. ‚Ä£ Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"), we arrive at\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùîº‚Äãùíót‚Ä≤ùîºsuperscriptsubscriptùíóùë°‚Ä≤\\\\displaystyle\\\\mathbb{E}{\\\\bm{v}}\\_{t}^{\\\\prime} | =12‚ÄãœÅ2‚ÄãProj‚àáf‚Äã(ùíôt)‚üÇ‚Äã‚àátr‚Å°(‚àá2f‚Äã(ùíôt)‚Äãùíài,t‚Äãùíài,t‚ä§)+ùí™‚Äã(œÅ3).absent12superscriptùúå2subscriptsuperscriptProjperpendicular-to‚àáùëìsubscriptùíôùë°‚àátrsuperscript‚àá2ùëìsubscriptùíôùë°subscriptùíàùëñùë°superscriptsubscriptùíàùëñùë°topùí™superscriptùúå3\\\\displaystyle=\\\\frac{1}{2}\\\\rho^{2}\\\\mathrm{Proj}^{\\\\perp}\\_{\\\\nabla f({\\\\bm{x}}\\_{t})}\\\\nabla\\\\operatorname{tr}\\\\left(\\\\nabla^{2}f({\\\\bm{x}}\\_{t}){\\\\bm{g}}\\_{i,t}{\\\\bm{g}}\\_{i,t}^{\\\\top}\\\\right)+\\\\mathcal{O}\\\\left(\\\\rho^{3}\\\\right)\\\\,. |  | (28) |\n\nNow the key observation, inspired by Wen et al. ( [2022])), is that at a minimum ùíô‚ãÜ‚ààùí≥‚ãÜsuperscriptùíô‚ãÜsuperscriptùí≥‚ãÜ{\\\\bm{x}}^{\\\\star}\\\\in\\\\mathcal{X}^{\\\\star}, the Hessian is given as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àá2f‚Äã(ùíô‚ãÜ)=1n‚Äã‚àëi=1n‚Ñì‚Ä≤‚Ä≤‚Äã(pi‚Äã(ùíô‚ãÜ),yi)‚Äã‚àápi‚Äã(ùíô‚ãÜ)‚Äã‚àápi‚Äã(ùíô‚ãÜ)‚ä§.superscript‚àá2ùëìsuperscriptùíô‚ãÜ1ùëõsuperscriptsubscriptùëñ1ùëõsuperscript‚Ñì‚Ä≤‚Ä≤subscriptùëùùëñsuperscriptùíô‚ãÜsubscriptùë¶ùëñ‚àásubscriptùëùùëñsuperscriptùíô‚ãÜ‚àásubscriptùëùùëñsuperscriptsuperscriptùíô‚ãÜtop\\\\displaystyle\\\\nabla^{2}f({\\\\bm{x}}^{\\\\star})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\ell^{\\\\prime\\\\prime}(p\\_{i}({\\\\bm{x}}^{\\\\star}),y\\_{i})\\\\nabla p\\_{i}({\\\\bm{x}}^{\\\\star})\\\\nabla p\\_{i}({\\\\bm{x}}^{\\\\star})^{\\\\top}\\\\,. |  | (29) |\n\nHence, due to our simplifying assumption for this proof sketch, namely the orthogonality of the gradient of model outputs {‚àápi‚Äã(ùíô‚ãÜ)}i=1nsuperscriptsubscript‚àásubscriptùëùùëñsuperscriptùíô‚ãÜùëñ1ùëõ\\\\{\\\\nabla p\\_{i}({\\\\bm{x}}^{\\\\star})\\\\}\\_{i=1}^{n}, it follows that ùíñi‚Äã(ùíô‚ãÜ)‚âî‚àápi‚Äã(ùíô‚ãÜ)/‚Äñ‚àápi‚Äã(ùíô‚ãÜ)‚Äñ‚âîsubscriptùíñùëñsuperscriptùíô‚ãÜ‚àásubscriptùëùùëñsuperscriptùíô‚ãÜnorm‚àásubscriptùëùùëñsuperscriptùíô‚ãÜ{\\\\bm{u}}\\_{i}({\\\\bm{x}}^{\\\\star})\\\\coloneqq\\\\nabla p\\_{i}({\\\\bm{x}}^{\\\\star})/\\\\left\\\\\\|\\\\nabla p\\_{i}({\\\\bm{x}}^{\\\\star})\\\\right\\\\\\| is the eigenvector of the Hessian.\nLet Œªi‚Äã(ùíô‚ãÜ)subscriptùúÜùëñsuperscriptùíô‚ãÜ\\\\lambda\\_{i}({\\\\bm{x}}^{\\\\star}) be the corresponding eigenvalue.\nFurthermore, we have ‚àáfi‚Äã(ùíôt)=‚àÇ‚Ñì‚Äã(z,yi)‚àÇz\\|z=pi‚Äã(ùíôt)‚Äã‚àápi‚Äã(ùíôt)‚àásubscriptùëìùëñsubscriptùíôùë°evaluated-at‚Ñìùëßsubscriptùë¶ùëñùëßùëßsubscriptùëùùëñsubscriptùíôùë°‚àásubscriptùëùùëñsubscriptùíôùë°\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})=\\\\frac{\\\\partial\\\\ell(z,y\\_{i})}{\\\\partial z}\\|\\_{z=p\\_{i}({\\\\bm{x}}\\_{t})}\\\\nabla p\\_{i}({\\\\bm{x}}\\_{t}), which implies ‚àáfi‚Äã(ùíôt)‚Äñ‚àáfi‚Äã(ùíôt)‚Äñ=‚àápi‚Äã(ùíôt)‚Äñ‚àápi‚Äã(ùíôt)‚Äñ=ùíñi‚Äã(ùíôt)‚àásubscriptùëìùëñsubscriptùíôùë°norm‚àásubscriptùëìùëñsubscriptùíôùë°‚àásubscriptùëùùëñsubscriptùíôùë°norm‚àásubscriptùëùùëñsubscriptùíôùë°subscriptùíñùëñsubscriptùíôùë°\\\\frac{\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})}{\\\\left\\\\\\|\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})\\\\right\\\\\\|}=\\\\frac{\\\\nabla p\\_{i}({\\\\bm{x}}\\_{t})}{\\\\left\\\\\\|\\\\nabla p\\_{i}({\\\\bm{x}}\\_{t})\\\\right\\\\\\|}={\\\\bm{u}}\\_{i}({\\\\bm{x}}\\_{t}) as long as ‚àáfi‚Äã(ùíôt)‚â†0‚àásubscriptùëìùëñsubscriptùíôùë°0\\\\nabla f\\_{i}({\\\\bm{x}}\\_{t})\\\\neq 0.\nHence, as long as ùíôtsubscriptùíôùë°{\\\\bm{x}}\\_{t} stays near Œ¶‚Äã(ùíôt)Œ¶subscriptùíôùë°\\\\Phi({\\\\bm{x}}\\_{t}), it follows that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîº‚Äãtr‚Å°(‚àá2f‚Äã(ùíôt)‚Äãùíài,t‚Äãùíài,t‚ä§)‚âàùîº‚ÄãŒªi‚Äã(Œ¶‚Äã(ùíôt))=dn‚Äãùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt)),ùîºtrsuperscript‚àá2ùëìsubscriptùíôùë°subscriptùíàùëñùë°superscriptsubscriptùíàùëñùë°topùîºsubscriptùúÜùëñŒ¶subscriptùíôùë°ùëëùëõ¬ØùóçùóãŒ¶subscriptùíôùë°\\\\displaystyle\\\\mathbb{E}\\\\operatorname{tr}\\\\left(\\\\nabla^{2}f({\\\\bm{x}}\\_{t}){\\\\bm{g}}\\_{i,t}{\\\\bm{g}}\\_{i,t}^{\\\\top}\\\\right)\\\\approx\\\\mathbb{E}\\\\lambda\\_{i}(\\\\Phi({\\\\bm{x}}\\_{t}))=\\\\frac{d}{n}\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\,, |  | (30) |\n\nwhich notably gives us dnùëëùëõ\\\\frac{d}{n} times larger gradient than the randomly smoothed perturbation ( [14]In Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")).\nOn the other hand, one can do even better by choosing the stochastic gradient for the outerpart of perturbation. Similar calculations to the above yield\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîº‚Äãtr‚Å°(‚àá2fi‚Äã(ùíôt)‚Äãùíài,t‚Äãùíài,t‚ä§)‚âàn‚Äãùîº‚ÄãŒªi‚Äã(Œ¶‚Äã(ùíôt))=d‚ãÖùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt)),ùîºtrsuperscript‚àá2subscriptùëìùëñsubscriptùíôùë°subscriptùíàùëñùë°superscriptsubscriptùíàùëñùë°topùëõùîºsubscriptùúÜùëñŒ¶subscriptùíôùë°‚ãÖùëë¬ØùóçùóãŒ¶subscriptùíôùë°\\\\displaystyle\\\\mathbb{E}\\\\operatorname{tr}\\\\left(\\\\nabla^{2}f\\_{i}({\\\\bm{x}}\\_{t}){\\\\bm{g}}\\_{i,t}{\\\\bm{g}}\\_{i,t}^{\\\\top}\\\\right)\\\\approx n\\\\mathbb{E}\\\\lambda\\_{i}(\\\\Phi({\\\\bm{x}}\\_{t}))={\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}d}\\\\cdot\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))\\\\,, |  | (31) |\n\nwhich now leads to dùëëd times larger gradient than ( [14]In Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")). This leads to the following inequality that is an improvement of ( [19]In Perturbation step decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) in expectation. ‚Ä£ 3.2 Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\")): ùîº‚Äãùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt+1))‚àíùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))‚àíd‚ãÖŒ∑‚ÄãœÅ2‚Äã‚Äñ‚àát‚Äñ2+ùí™‚Äã(d‚ÄãŒ∑‚ÄãœÅ2‚Äãœµ0‚Äã‚Äñ‚àát‚Äñ+Œ∑‚ÄãœÅ3‚Äã‚Äñ‚àát‚Äñ+Œ∑2‚ÄãœÅ2)ùîº¬ØùóçùóãŒ¶subscriptùíôùë°1¬ØùóçùóãŒ¶subscriptùíôùë°‚ãÖùëëùúÇsuperscriptùúå2superscriptnormsubscriptbold-‚àáùë°2ùí™ùëëùúÇsuperscriptùúå2subscriptitalic-œµ0normsubscriptbold-‚àáùë°ùúÇsuperscriptùúå3normsubscriptbold-‚àáùë°superscriptùúÇ2superscriptùúå2\\\\mathbb{E}\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t+1}))-\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t}))-{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}d}\\\\cdot\\\\eta\\\\rho^{2}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|^{2}+\\\\mathcal{O}\\\\left(d\\\\eta\\\\rho^{2}\\\\epsilon\\_{0}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|+\\\\eta\\\\rho^{3}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|+\\\\eta^{2}\\\\rho^{2}\\\\right).\nThis inequality implies that as long as ‚Äñ‚àát‚Äñ‚â•Œ©‚Äã(max‚Å°{œµ0,œÅ/d,Œ∑/d})normsubscriptbold-‚àáùë°Œ©subscriptitalic-œµ0ùúåùëëùúÇùëë\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|\\\\geq\\\\Omega(\\\\max\\\\{\\\\epsilon\\_{0},\\\\rho/d,\\\\sqrt{\\\\eta/d}\\\\}), ùóçùóã¬Ø‚Äã(Œ¶‚Äã(ùíôt))¬ØùóçùóãŒ¶subscriptùíôùë°\\\\overline{\\\\mathsf{tr}}(\\\\Phi({\\\\bm{x}}\\_{t})) decreases in expectation by d‚ÄãŒ∑‚ÄãœÅ2‚Äã‚Äñ‚àát‚Äñ2ùëëùúÇsuperscriptùúå2superscriptnormsubscriptbold-‚àáùë°2d\\\\eta\\\\rho^{2}\\\\left\\\\\\|{\\\\bm{\\\\nabla}}\\_{t}\\\\right\\\\\\|^{2}.\nDue to our choices of œÅ,Œ∑,œµ0ùúåùúÇsubscriptitalic-œµ0\\\\rho,\\\\eta,\\\\epsilon\\_{0}, [Lemma 4]Lemma 4. ‚Ä£ Sharpness-aware perturbation decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) faster. ‚Ä£ 4.2 Proof sketch of Theorem 2 ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\") follows. ‚àé\n\nUsing [Lemma 4]Lemma 4. ‚Ä£ Sharpness-aware perturbation decreases (ùóçùóã)ÃÑ‚Å¢(Œ¶‚Å¢(ùíô_ùë°)) faster. ‚Ä£ 4.2 Proof sketch of Theorem 2 ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\"), and following the analysis presented in [Subsection 3.2]Proof sketch of Theorem 1 ‚Ä£ 3 Randomly smoothed perturbation escapes sharp minima ‚Ä£ How to escape sharp minima with random perturbations\"), it can be shown that [Algorithm 2]Algorithm 2 ‚Ä£ 4.1 Main result ‚Ä£ 4 Faster escape with sharpness-aware perturbation ‚Ä£ How to escape sharp minima with random perturbations\")\nreturns a (œµ0,œµ)subscriptitalic-œµ0italic-œµ(\\\\epsilon\\_{0},\\\\sqrt{\\\\epsilon})-flat minimum ùíô^^ùíô\\\\widehat{{\\\\bm{x}}} with probability at least 1‚àíùí™‚Äã(Œ¥)1ùí™ùõø1-\\\\mathcal{O}\\\\left(\\\\delta\\\\right) after\nT=ùí™‚Äã(d‚àí1‚Äãœµ‚àí3‚ÄãŒΩ‚àí3‚ÄãŒ¥‚àí4)ùëáùí™superscriptùëë1superscriptitalic-œµ3superscriptùúà3superscriptùõø4T=\\\\mathcal{O}\\\\left(d^{-1}\\\\epsilon^{-3}\\\\nu^{-3}\\\\delta^{-4}\\\\right) iterations.\nFrom this (œµ0,œµ)subscriptitalic-œµ0italic-œµ(\\\\epsilon\\_{0},\\\\sqrt{\\\\epsilon})-flat minimum ùíô^^ùíô\\\\widehat{{\\\\bm{x}}}, one can find a (œµ,œµ)italic-œµitalic-œµ(\\\\epsilon,\\\\sqrt{\\\\epsilon})-flat minimum in a few iterations.",
            "citations": null
          },
          "5 Experiments": {
            "content": "![Refer to caption]Figure 3:  (Left) The comparison between Randomly Smoothed Perturbation (‚ÄúRS‚Äù) and Sharpness-Aware Perturbation (‚ÄúSA‚Äù). (Right) Comparison of SA with different batch sizes.\n\nWe run experiments based on training ResNet-18 on the CIFAR10 dataset to test the ability of proposed algorithms to escape sharp global minima.\nFollowing Damian et al. ( [2021])), the algorithms are initialized at a point corresponding to a sharp global minimizer that achieve poor test accuracy.\nCrucially, we choose this setting because (Damian et al., [2021]), Figure 1) verify that test accuracy is inversely correlated with the trace of Hessian (see [Figure 2]Figure 2 ‚Ä£ 2.1 Measure of flatness ‚Ä£ 2 Formulating flat minima ‚Ä£ How to escape sharp minima with random perturbations\")).\nThis bad global minimizer, due to Liu et al. ( [2020])), achieves 100%percent100100\\\\% training accuracy, but only 48%percent4848\\\\% test accuracy.\nWe choose the constant learning rate of Œ∑=0.001ùúÇ0.001\\\\eta=0.001, which is small enough such that SGD baseline without any perturbation does not escape.\n\nWe discuss the results one by one. First of all, we highlight that the training accuracy stays at 100%percent100100\\\\% for all algorithms.\n\n- ‚Ä¢\n\n\nComparison between two methods. In the left plot of [Figure 3]Figure 3 ‚Ä£ 5 Experiments ‚Ä£ How to escape sharp minima with random perturbations\"), we compare the performance of Randomly Smoothed Perturbation (‚ÄúRS‚Äù) and Sharpness-Aware Perturbation (‚ÄúSA‚Äù). We choose the batch size of 128128128 for both methods. Consistent with our theory, one can see that SA is more effective in escaping sharp minima even with a smaller perturbation radius œÅùúå\\\\rho.\n\n- ‚Ä¢\n\n\nDifferent batch sizes. Our theory suggests that batch size 111 should be effective in escaping sharp minima. We verify this in the right plot of [Figure 3]Figure 3 ‚Ä£ 5 Experiments ‚Ä£ How to escape sharp minima with random perturbations\") by choosing the batch size to be B=1,64,128ùêµ164128B=1,64,128.\nWe do see that the case of B=1ùêµ1B=1 is quite effective in escaping sharp minima.",
            "citations": null
          },
          "6 Related work and future work": {
            "content": "The last decade has seen a great success in theoretical studies on the question of finding (approximate) stationary points (Ghadimi and Lan, [2013]); Ge et al., [2015]); Agarwal et al., [2017]); Daneshmand et al., [2018]); Carmon et al., [2018]); Fang et al., [2018]); Allen-Zhu, [2018]); Zhou and Gu, [2020]); Jin et al., [2021])).\nThis work extends this line of research to a new notion of stationary point, namely an approximate flat minima.\nWe believe that further studies on defining/refining practical notions of flat minima and designing efficient algorithms for them would lead to better understanding of practical nonconvex optimization for machine learning.\nIn the same spirit, we believe that characterizing lower bounds would be of great importance, similar to the ones for the stationary points (Carmon et al., [2020]); Drori and Shamir, [2020]); Carmon et al., [2021]); Arjevani et al., [2023])).\n\nAnother important direction is to further investigate the effectiveness of the flatness. Recent results have shown that the flatness is not always a good indicator of model efficacy Andriushchenko et al. ( [2023])); Wen et al. ( [2023])). It would be interesting to understand the precise role of flatness, given that we have a lot of evidence of its success.\nMoreover, studying other notions of flatness, such as the maximum eigenvalue of Hessian Œªmax‚Äã(‚àá2f‚Äã(ùíô))subscriptùúÜsuperscript‚àá2ùëìùíô\\\\lambda\\_{\\\\max}(\\\\nabla^{2}f({\\\\bm{x}})), and exploring the algorithmic questions there would be also interesting future directions.",
            "citations": null
          }
        },
        "abstract": "Modern machine learning applications have witnessed the remarkable success of\noptimization algorithms that are designed to find flat minima. Motivated by\nthis design choice, we undertake a formal study that (i) formulates the notion\nof flat minima, and (ii) studies the complexity of finding them. Specifically,\nwe adopt the trace of the Hessian of the cost function as a measure of\nflatness, and use it to formally define the notion of approximate flat minima.\nUnder this notion, we then analyze algorithms that find approximate flat minima\nefficiently. For general cost functions, we discuss a gradient-based algorithm\nthat finds an approximate flat local minimum efficiently. The main component of\nthe algorithm is to use gradients computed from randomly perturbed iterates to\nestimate a direction that leads to flatter minima. For the setting where the\ncost function is an empirical risk over training data, we present a faster\nalgorithm that is inspired by a recently proposed practical algorithm called\nsharpness-aware minimization, supporting its success in practice."
      },
      "bib.bib8": {
        "id": "bib.bib8",
        "citation": "Becker et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Momentum-sam: Sharpness aware minimization without computational overhead.",
        "venue": "arXiv preprint arXiv:2401.12033",
        "pages": "",
        "url": "",
        "arxiv_id": "2401.12033",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "While artificial neural networks (ANNs) are typically trained by Empirical Risk Minimization (ERM), i.e., the minimization of a predefined loss function on a finite set of training data, the actual purpose is to generalize over this dataset and fit the model to the underlying data distribution.\nDue to heavy overparameterization of state-of-the-art ANN models (Nakkiran et al., [2021])), the risk of assimilating the training data increases.\nAs a consequence, a fundamental challenge in designing network architectures and training procedures is to ensure the objective of ERM to be an adequate proxy for learning the underlying data distribution.\n\nOne strategy to tackle this problem is to exploit the properties of the loss landscape of the parameter space on the training data.\nA strong link between the sharpness in this loss landscape and the models generalization capability has been proposed by Hochreiter & Schmidhuber ( [1994])) and further analyzed in the work of Keskar et al. ( [2017])).\nFollowing these works, Foret et al. ( [2021])) proposed an algorithm to explicitly reduce the sharpness of loss minima and thereby improve the generalization performance, named Sharpness Aware Minimization (SAM). Built on top of gradient based optimizers such as SGD or Adam (Kingma & Ba, [2015])), SAM searches for a loss maximum in a limited parameter vicinity for each optimization step and calculates the loss gradient at this ascended parameter position.\nTo construct a computationally feasible training algorithm, SAM approximates the loss landscape linearly so that the maximization is reduced to a single gradient ascent step.\nMoreover, this step is performed on a single batch rather than the full training set.\n\nUnfortunately, the ascent step requires an additional forward and backward pass and therefore doubles the computational time, limiting the applications of SAM severely.\nEven though the linear approximation of the loss landscape poses a vast simplification and\nForet et al. ( [2021])) showed that searching for the maximum with multiple iterations of projected gradient ascent steps indeed yields higher maxima, these maxima, however, do not improve the generalization, suggesting that finding the actual maximum in the local vicinity is not pivotal.\nInstead, it appears to be sufficient to alter the parameters to find an elevated point and perform the gradient calculation from there.\nFollowing this reasoning, the ascent step can be understood as a temporary parameter perturbation, revealing strong resemblance of the SAM algorithm to extragradient methods (Korpelevich, [1976])) and Nesterov Accelerated Gradient (Nesterov, [1983]); Sutskever et al., [2013])) which both calculate gradients at perturbed positions and were also discussed previously in the context of sharpness and generalization (Lin et al., [2020a]); Wen et al., [2018])).\n\nCommonly, measures to address generalization issues are applied between the data distribution and the full training dataset (Keskar et al., [2017]); Li et al., [2018])).\nSince the generalization error is caused by the limited sample size, further reducing the regarded sample size to single batches might impose additional deteriorating effects.\nThus motivated, we reconsider the effect of momentum in batch-based gradient optimization algorithms as follows.\nThe momentum vector not only represents a trace over iterations in the loss landscape and therefore accumulates the gradients at past parameter positions, but also builds an exponential moving average over gradients of successive batches.\nHence, the resultant momentum vector can also be seen as an approximation of the gradient of the loss on a larger subset - in the limiting case on the full training dataset.\n\nBuilding on these observations and the theoretical framework of SAM, which assumes using the entire dataset for sharpness estimations, we present Momentum-SAM (MSAM).\nMSAM aims to minimize the global sharpness without imposing additional forward and backward pass computations by using the momentum direction as an approximated, yet less stochastic, direction for sharpness computations.\nIn summary, our contribution is as follows:\n\n- ‚Ä¢\n\n\nWe propose Momentum-SAM (MSAM), an algorithm to minimize training loss sharpness without computational overhead over base optimizers such as SGD or Adam.\n\n- ‚Ä¢\n\n\nThe simplicity of our algorithm and the reduced computational costs enable the usage of sharpness-aware minimization for a variety of different applications without severely compromising the generalization capabilities and performance improvements of SAM.\n\n- ‚Ä¢\n\n\nWe discuss similarities and differences between MSAM and Nesterov Accelerated Gradient (NAG) and reveal novel perspectives on SAM, MSAM, as well as on NAG.\n\n- ‚Ä¢\n\n\nWe validate MSAM on multiple image classification benchmarks and compare MSAM against related sharpness-aware approaches.\n\n\n### 1.1 Related Work\n\nCorrelations between loss sharpness, generalization, and overfitting were studied extensively  (Hochreiter & Schmidhuber, [1994]); Keskar et al., [2017]); Lin et al., [2020b]); Yao et al., [2018]); Li et al., [2018]); Liu et al., [2020]); Damian et al., [2021])), all linking flatter minima to better generalization, while Dinh et al. ( [2017])) showed that sharp minima can generalize too.\nWhile the above-mentioned works focus on analysing loss sharpness, algorithms to explicitly target sharpness reduction were suggested by Zheng et al. ( [2021])); Wu et al. ( [2020])); Chaudhari et al. ( [2017])) with SAM (Foret et al., [2021])) being most prevalent.\n\nSAM relies on computing gradients at parameters distinct from the current iterations position.\nThis resembles extragradient methods (Korpelevich, [1976])) like Optimistic Mirror Descent (OMD) (Juditsky et al., [2011])) or Nesterov Accelerated Gradient (NAG) (Nesterov, [1983]); Sutskever et al., [2013])) which were also applied to Deep Learning, either based on perturbations by last iterations gradients (Daskalakis et al., [2018]); Lin et al., [2020a])) or random perturbations (Wen et al., [2018])).\n\nAdaptive-SAM (ASAM) (Kwon et al., [2021])) accommodates SAM by scaling the perturbations relative to the weights norms to take scale invariance between layers into account, resulting in a significant performance improvement over SAM.\nFurthermore, Kim et al. ( [2022])) refine ASAM by considering Fisher information geometry of the parameter space.\nAlso seeking to improve SAM, GSAM (Zhuang et al., [2022])) posit that minimizing the perturbed loss might not guarantee a flatter loss and suggest using a combination of the SAM gradient and the SGD gradients component orthogonal to the SAM gradient for the weight updates.\n\nUnlike the aforementioned methods, several algorithms were proposed to reduce SAMs runtime, mostly sharing the idea of reducing the number of additional forward/backward passes, in contrast to our approach which relies on finding more efficient parameter perturbations.\nFor example, Jiang et al. ( [2023])) are evaluating in each iteration if a perturbation calculation is to be performed.\nLookSAM Liu et al. ( [2022])) updates perturbations only each kùëòk-th iterations and applies perturbation components orthogonal to SGD gradients in iterations in between.\nMi et al. ( [2022])) are following an approach based on sparse matrix operations and ESAM (Du et al., [2022b])) combines parameter sparsification with the idea to reduce the number of input samples for second forward/backward passes.\nSimilarly, Bahri et al. ( [2021])) and Ni et al. ( [2022])) calculate perturbations on micro-batches.\nNot explicitly targeted at efficiency optimization, Mueller & Hein ( [2022])) show that only perturbing Batch Norm layers even further improves SAM.\nSAF and its memory efficient version MESA were proposed by Du et al. ( [2022a])), focusing on storing past iterations weights to minimize sharpness on the digits output instead of the loss function.\nPerturbations in momentum direction after the momentum buffer update resulting in better performance but no speedup where proposed by Li & Giannakis ( [2023])).\nFurthermore, several concepts were proposed to explain the success of SAM and related approaches (Andriushchenko & Flammarion, [2022]); M√∂llenhoff & Khan, [2023])).",
            "citations": null
          },
          "2 Method": {
            "content": "### 2.1 Notation\n\nGiven a finite training dataset ùíÆ‚äÇùí≥√óùí¥ùíÆùí≥ùí¥\\\\mathcal{S}\\\\subset\\\\mathcal{X}\\\\times\\\\mathcal{Y} where ùí≥ùí≥\\\\mathcal{X} is the set of possible inputs and ùí¥ùí¥\\\\mathcal{Y} the set of possible targets drawn from a joint distribution ùîáùîá\\\\mathfrak{D}, we study a model fùíò:ùí≥‚Üíùí¥:subscriptùëìùíò‚Üíùí≥ùí¥f\\_{\\\\bm{w}}:\\\\mathcal{X}\\\\rightarrow\\\\mathcal{Y} parameterized by ùíò‚ààùí≤ùíòùí≤\\\\bm{w}\\\\in\\\\mathcal{W}, an element-wise loss function l:ùí≤√óùí≥√óùí¥‚Üí‚Ñù:ùëô‚Üíùí≤ùí≥ùí¥‚Ñùl:\\\\mathcal{W}\\\\times\\\\mathcal{X}\\\\times\\\\mathcal{Y}\\\\rightarrow\\\\mathbb{R}, the distribution loss Lùîá‚Äã(ùíò)=ùîº(x,y)‚àºùîá‚Äã(l‚Äã(ùíò,x,y))subscriptùêøùîáùíòsubscriptùîºsimilar-toùë•ùë¶ùîáùëôùíòùë•ùë¶L\\_{\\\\mathfrak{D}}(\\\\bm{w})=\\\\mathbb{E}\\_{(x,y)\\\\sim\\\\mathfrak{D}}(l(\\\\bm{w},x,y)) and the empirical (training) loss LùíÆ‚Äã(ùíò)=1/\\|ùíÆ\\|‚Äã‚àë(x,y)‚ààùíÆl‚Äã(ùíò,x,y)subscriptùêøùíÆùíò1ùíÆsubscriptùë•ùë¶ùíÆùëôùíòùë•ùë¶L\\_{\\\\mathcal{S}}(\\\\bm{w})=1/\\|\\\\mathcal{S}\\|\\\\sum\\_{(x,y)\\\\in\\\\mathcal{S}}l(\\\\bm{w},x,y).\nIf calculated on a single batch ‚Ñ¨‚äÇS‚Ñ¨ùëÜ\\\\mathcal{B}\\\\subset S we denote the loss as L‚Ñ¨subscriptùêø‚Ñ¨L\\_{\\\\mathcal{B}}.\nWe denote the L2-norm by \\|\\|‚ãÖ\\|\\|\\|\\|\\\\cdot\\|\\|.\n\n### 2.2 Sharpness Aware Minimization (SAM)\n\nFor many datasets modern neural network architectures and empirical risk minimization algorithms like SGD or Adam (Kingma & Ba, [2015])) effectively minimize the approximation and optimization error (i.e. finding low LùíÆ‚Äã(ùíò)subscriptùêøùíÆùíòL\\_{\\\\mathcal{S}}(\\\\bm{w})), while reducing the generalization error (Lùîá‚Äã(ùíò)‚àíLùíÆ‚Äã(ùíò)subscriptùêøùîáùíòsubscriptùêøùíÆùíòL\\_{\\\\mathfrak{D}}(\\\\bm{w})-L\\_{\\\\mathcal{S}}(\\\\bm{w})) remains a major challenge.\nFollowing ideas of Hochreiter & Schmidhuber ( [1994])), Keskar et al. ( [2017])) observed a link between sharpness of the minimized empirical loss LùíÆ‚Äã(ùíòopt)subscriptùêøùíÆsuperscriptùíòoptL\\_{\\\\mathcal{S}}(\\\\bm{w^{\\\\text{opt}}}) with respect to the parameters and the generalization error.\nIntuitively, this follows from the observation that perturbations in inputs (cf. adversarial training (Goodfellow et al., [2015]))) and perturbations in parameters have a similar effect on network outputs (due to both being factors in matrix-vector products) and that the generalization error is caused by the limitation to a smaller input subset which resembles an input perturbation.\n\nWithout giving an explicit implementation, Keskar et al. ( [2017])) sketches the idea of avoiding sharp minima by replacing the empirical loss minimization with a minimization of the highest loss value within a ball in parameter space of fixed size œÅùúå\\\\rho:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minùíò‚Äãmax‚Äñœµ‚Äñ‚â§œÅ‚ÄãLùíÆ‚Äã(ùíò+œµ)ùíòminnormbold-italic-œµùúåmaxsubscriptùêøùíÆùíòbold-italic-œµ\\\\underset{\\\\bm{w}}{\\\\text{min}}~{}\\\\underset{\\|\\|\\\\bm{\\\\epsilon}\\|\\|\\\\leq\\\\rho}{\\\\text{max}}~{}L\\_{\\\\mathcal{S}}(\\\\bm{w}+\\\\bm{\\\\epsilon}) |  | (1) |\n\nForet et al. ( [2021])) propose a computationally feasible algorithm to approximate this training objective via so-called Sharpness Aware Minimization (SAM).\nSAM heavily reduces the computational costs of the inner maximization routine of Eq. [1]In 2.2 Sharpness Aware Minimization (SAM) ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") by approximating the loss landscape in first order, neglecting second order derivatives resulting from the min-max objective, and performing the maximization on single batches (or per GPU in case of mùëöm-sharpness).\nThese simplifications result in adding one gradient ascent step with fixed step length before the gradient calculation, i.e., reformulating the loss as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | L‚Ñ¨SAM‚Äã(ùíò)‚âîL‚Ñ¨‚Äã(ùíò+œµSAM)‚Äãwhere‚ÄãœµSAM‚âîœÅ‚Äã‚àáL‚Ñ¨‚Äã(ùíò)‚Äñ‚àáL‚Ñ¨‚Äã(ùíò)‚Äñ.‚âîsuperscriptsubscriptùêø‚Ñ¨SAMùíòsubscriptùêø‚Ñ¨ùíòsuperscriptbold-italic-œµSAMwheresuperscriptbold-italic-œµSAM‚âîùúå‚àásubscriptùêø‚Ñ¨ùíònorm‚àásubscriptùêø‚Ñ¨ùíòL\\_{\\\\mathcal{B}}^{\\\\text{SAM}}(\\\\bm{w})\\\\coloneqq L\\_{\\\\mathcal{B}}(\\\\bm{w}+\\\\bm{\\\\epsilon}^{\\\\text{SAM}})~{}~{}\\\\text{where}~{}~{}\\\\bm{\\\\epsilon}^{\\\\text{SAM}}\\\\coloneqq\\\\rho\\\\frac{\\\\nabla L\\_{\\\\mathcal{B}}(\\\\bm{w})}{\\|\\|\\\\nabla L\\_{\\\\mathcal{B}}(\\\\bm{w})\\|\\|}. |  | (2) |\n\nThe parameters are temporarily perturbed by œµSAMsuperscriptbold-italic-œµSAM\\\\bm{\\\\epsilon}^{\\\\text{SAM}} in the direction of the locally highest slope with the perturbation removed again after gradient calculation. Thus, the parameters are not altered permanently. While performance improvements could be achieved (Foret et al., [2021]); Chen et al., [2022])) the computation of œµSAMsuperscriptbold-italic-œµSAM\\\\bm{\\\\epsilon}^{\\\\text{SAM}} demands an additional backward pass and the computation of L‚Ñ¨‚Äã(ùíò+œµSAM)subscriptùêø‚Ñ¨ùíòsuperscriptbold-italic-œµSAML\\_{\\\\mathcal{B}}(\\\\bm{w}+\\\\bm{\\\\epsilon}^{\\\\text{SAM}}) an additional forward pass, resulting in roughly doubling the runtime of SAM compared to base optimizer like SGD or Adam.\n\nMinimizing Eq. [2]In 2.2 Sharpness Aware Minimization (SAM) ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") can also be interpreted as jointly minimizing the unperturbed loss function L‚Ñ¨‚Äã(ùíò)subscriptùêø‚Ñ¨ùíòL\\_{\\\\mathcal{B}}(\\\\bm{w}) and the sharpness of the loss landscape defined by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | S‚Ñ¨‚Äã(ùíò)‚âîL‚Ñ¨‚Äã(ùíò+œµ)‚àíL‚Ñ¨‚Äã(ùíò).‚âîsubscriptùëÜ‚Ñ¨ùíòsubscriptùêø‚Ñ¨ùíòbold-italic-œµsubscriptùêø‚Ñ¨ùíòS\\_{\\\\mathcal{B}}(\\\\bm{w})\\\\coloneqq L\\_{\\\\mathcal{B}}(\\\\bm{w}+\\\\bm{\\\\epsilon})-L\\_{\\\\mathcal{B}}(\\\\bm{w}). |  | (3) |\n\n### 2.3 Momentum and Nesterov Accelerated Gradient\n\nCommonly, SGD is used with momentum, i.e., instead of updating parameters by gradients directly (ùíòt+1=ùíòt‚àíŒ∑‚Äã‚àáL‚Ñ¨t‚Äã(ùíòt)subscriptùíòùë°1subscriptùíòùë°ùúÇ‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°\\\\bm{w}\\_{t+1}=\\\\bm{w}\\_{t}-\\\\eta\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t}) with learning rate Œ∑ùúÇ\\\\eta), an exponential moving average of past gradients is used for the updates.\nGiven the momentum factor Œºùúá\\\\mu and the momentum vector ùíót+1=Œº‚Äãùíót+‚àáL‚Ñ¨t‚Äã(ùíòt)subscriptùíóùë°1ùúásubscriptùíóùë°‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°\\\\bm{v}\\_{t+1}=\\\\mu\\\\bm{v}\\_{t}+\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t}) the update rule becomes ùíòt+1=ùíòt‚àíŒ∑‚Äãùíót+1subscriptùíòùë°1subscriptùíòùë°ùúÇsubscriptùíóùë°1\\\\bm{w}\\_{t+1}=\\\\bm{w}\\_{t}-\\\\eta\\\\bm{v}\\_{t+1}.\n\nThe momentum vector has two averaging effects.\nFirst, it averages the gradient at different positions in the parameter space ùíòtsubscriptùíòùë°\\\\bm{w}\\_{t} and second, it averages the gradient over multiple batches ‚Ñ¨tsubscript‚Ñ¨ùë°\\\\mathcal{B}\\_{t} which can be interpreted as an increase of the effective batch size.\n\nThe update step consists of the momentum vector of the past iteration and the present iterations gradient.\nWhile this gradient is calculated prior to the momentum vector update in standard momentum training, NAG instead calculates the gradient after the momentum vector step is performed.\nThe update rule for the momentum vector thus becomes ùíót+1=Œº‚Äãùíót+‚àáL‚Ñ¨t‚Äã(ùíòt‚àíŒ∑‚ÄãŒº‚Äãùíót)subscriptùíóùë°1ùúásubscriptùíóùë°‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°ùúÇùúásubscriptùíóùë°\\\\bm{v}\\_{t+1}=\\\\mu\\\\bm{v}\\_{t}+\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t}-\\\\eta\\\\mu\\\\bm{v}\\_{t}).\nAnalogously to Eq. [2]In 2.2 Sharpness Aware Minimization (SAM) ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\"), NAG can be formulated in terms of a perturbed loss function as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | L‚Ñ¨NAG‚Äã(ùíò)‚âîL‚Ñ¨‚Äã(ùíò+œµNAG)‚Äãwhere‚ÄãœµNAG‚âî‚àíŒ∑‚ÄãŒº‚Äãùíót.‚âîsuperscriptsubscriptùêø‚Ñ¨NAGùíòsubscriptùêø‚Ñ¨ùíòsuperscriptbold-italic-œµNAGwheresuperscriptbold-italic-œµNAG‚âîùúÇùúásubscriptùíóùë°L\\_{\\\\mathcal{B}}^{\\\\text{NAG}}(\\\\bm{w})\\\\coloneqq L\\_{\\\\mathcal{B}}(\\\\bm{w}+\\\\bm{\\\\epsilon}^{\\\\text{NAG}})~{}~{}\\\\text{where}~{}~{}\\\\bm{\\\\epsilon}^{\\\\text{NAG}}\\\\coloneqq-\\\\eta\\\\mu\\\\bm{v}\\_{t}. |  | (4) |\n\nSince the perturbation vector œµNAGsuperscriptbold-italic-œµNAG\\\\bm{\\\\epsilon}^{\\\\text{NAG}} neither depends on the networks output nor its gradient at step tùë°t no additional forward or backward pass is needed.\n\nInput:training data ùíÆùíÆ\\\\mathcal{S}, momentum Œºùúá\\\\mu, learning rate Œ∑ùúÇ\\\\eta, perturbation strength œÅùúå\\\\rho\n\nInitialize:weights ùíò~0‚Üê‚Üêsubscriptbold-~ùíò0absent\\\\bm{\\\\widetilde{w}}\\_{0}\\\\leftarrowrandom, momentum vector ùíó0‚Üê0‚Üêsubscriptùíó00\\\\bm{v}\\_{0}\\\\leftarrow 0\n\nfor _t‚Üê0‚Üêùë°0t\\\\leftarrow 0to T_ do\n\n\nsample batch ‚Ñ¨t‚äÇùíÆsubscript‚Ñ¨ùë°ùíÆ\\\\mathcal{B}\\_{t}\\\\subset\\\\mathcal{S}\n\nL‚Ñ¨t‚Äã(ùíò~t)=1/\\|‚Ñ¨t\\|‚Äã‚àë(x,y)‚àà‚Ñ¨tl‚Äã(ùíò~t,x,y)subscriptùêøsubscript‚Ñ¨ùë°subscriptbold-~ùíòùë°1subscript‚Ñ¨ùë°subscriptùë•ùë¶subscript‚Ñ¨ùë°ùëôsubscriptbold-~ùíòùë°ùë•ùë¶L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{\\\\widetilde{w}}\\_{t})=1/\\|\\\\mathcal{B}\\_{t}\\|\\\\sum\\_{(x,y)\\\\in\\\\mathcal{B}\\_{t}}l(\\\\bm{\\\\widetilde{w}}\\_{t},x,y)// perturbed forward pass\n\nùíàMSAM=‚àáL‚Ñ¨t‚Äã(ùíò~t)subscriptùíàMSAM‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptbold-~ùíòùë°\\\\bm{g}\\_{\\\\text{MSAM}}=\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{\\\\widetilde{w}}\\_{t})// perturbed backward pass\n\nùíòt=ùíò~t+œÅ‚Äãùíót‚Äñùíót‚Äñsubscriptùíòùë°subscriptbold-~ùíòùë°ùúåsubscriptùíóùë°normsubscriptùíóùë°\\\\bm{w}\\_{t}=\\\\bm{\\\\widetilde{w}}\\_{t}+{\\\\color\\[rgb\\]{0,0.390625,0}\\\\rho\\\\frac{\\\\bm{v}\\_{t}}{\\|\\|\\\\bm{v}\\_{t}\\|\\|}}// remove last perturbation\n\nùíót+1subscriptùíóùë°1\\\\bm{v}\\_{t+1}==Œº‚Äãùíótùúásubscriptùíóùë°\\\\mu\\\\bm{v}\\_{t}++ùíàMSAMsubscriptùíàMSAM\\\\bm{g}\\_{\\\\text{MSAM}}// update momentum vector\n\nùíòt+1=ùíòt‚àíŒ∑subscriptùíòùë°1subscriptùíòùë°ùúÇ\\\\bm{w}\\_{t+1}=\\\\bm{w}\\_{t}-\\\\etaùíót+1subscriptùíóùë°1\\\\bm{v}\\_{t+1}// SGD step\n\nùíò~t+1=ùíòt+1‚àísubscriptbold-~ùíòùë°1limit-fromsubscriptùíòùë°1\\\\bm{\\\\widetilde{w}}\\_{t+1}=\\\\bm{w}\\_{t+1}-œÅ‚Äãùíót+1‚Äñùíót+1‚Äñùúåsubscriptùíóùë°1normsubscriptùíóùë°1\\\\rho\\\\frac{\\\\bm{v}\\_{t+1}}{\\|\\|\\\\bm{v}\\_{t+1}\\|\\|}// perturb for next iteration\n\n      end for\n\nùíòT=ùíò~T+œÅ‚ÄãùíóT‚ÄñùíóT‚Äñsubscriptùíòùëásubscriptbold-~ùíòùëáùúåsubscriptùíóùëánormsubscriptùíóùëá\\\\bm{w}\\_{T}=\\\\bm{\\\\widetilde{w}}\\_{T}+\\\\rho\\\\frac{\\\\bm{v}\\_{T}}{\\|\\|\\\\bm{v}\\_{T}\\|\\|}// remove final perturbation\n\nreturn _ùê∞Tsubscriptùê∞ùëá\\\\bm{w}\\_{T}_\n\nAlgorithm 1SGD with Momentum-SAM (MSAM; efficient implementation)\n\n![Refer to caption]\n\nFigure 1: Schematic illustrations of optimization algorithms based on SGD.\nNAG calculates gradients after updating parameters with the momentum vector.\nSAM and MSAM calculate gradients at perturbed positions but remove perturbations again before the parameter update step.\nSee Alg. [1]In Figure 1 ‚Ä£ 2.3 Momentum and Nesterov Accelerated Gradient ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") for detailed description of the efficient implementation of MSAM.\n\n### 2.4 Momentum-SAM\n\nForet et al. ( [2021])) show that performing multiple iterations of projected gradient ascent in the inner maximization does result in parameters with higher loss inside the œÅùúå\\\\rho-ball (cf. Eq. [1]In 2.2 Sharpness Aware Minimization (SAM) ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")).\nHowever, and counterintuitively, this improved inner maximization does not yield a better generalization of the model.\nWe conclude that finding the exact (per batch) local maximum is not pivotal to SAM.\nInspired by NAG and given that the theoretical framework of sharpness minimization is based on calculating the sharpness on the full training dataset, we propose using the momentum vector as the perturbation direction and call the resulting algorithm Momentum-SAM (MSAM) (further perturbations are discussed in Appx. [A.7]A.7 Random and Last Gradient Perturbations ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")).\nFollowing the above notation, this yields the loss objective\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | L‚Ñ¨MSAM‚Äã(ùíò)‚âîL‚Ñ¨‚Äã(ùíò+œµMSAM)‚Äãwhere‚ÄãœµMSAM‚âî‚àíœÅ‚Äãùíót‚Äñùíót‚Äñ.‚âîsuperscriptsubscriptùêø‚Ñ¨MSAMùíòsubscriptùêø‚Ñ¨ùíòsuperscriptbold-italic-œµMSAMwheresuperscriptbold-italic-œµMSAM‚âîùúåsubscriptùíóùë°normsubscriptùíóùë°L\\_{\\\\mathcal{B}}^{\\\\text{MSAM}}(\\\\bm{w})\\\\coloneqq L\\_{\\\\mathcal{B}}(\\\\bm{w}+\\\\bm{\\\\epsilon}^{\\\\text{MSAM}})~{}~{}\\\\text{where}~{}~{}\\\\bm{\\\\epsilon}^{\\\\text{MSAM}}\\\\coloneqq-\\\\rho\\\\frac{\\\\bm{v}\\_{t}}{\\|\\|\\\\bm{v}\\_{t}\\|\\|}. |  | (5) |\n\nContrary to SAM, we perturb in the negative direction.\nSince we use the momentum vector before it is updated, a step in the negative direction of the momentum has already been performed in the iteration before, thus, the loss is expected to increase again for sufficiently large step sizes.\nThe stepsize by œµMSAMsuperscriptbold-italic-œµMSAM\\\\bm{\\\\epsilon}^{\\\\text{MSAM}} is typically at least one order of magnitude higher than learning rate steps, so we overshoot local minima in momentum direction and reach an increased perturbed loss offering a suitable direction for sharpness estimation.\nWe empirically show that the momentum descent step actually results in an ascent on the per-batch loss in Sec. [4.1]Optimization and Generalization Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") and Sec. [A.11]A.11 Loss Ascent in Momentum Direction ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\").\nFor an efficient implementation, we shift the starting point of each iteration to be the perturbed parameters ùíò~t=ùíòt‚àíœÅ‚Äãùíót/‚Äñùíót‚Äñsubscriptbold-~ùíòùë°subscriptùíòùë°ùúåsubscriptùíóùë°normsubscriptùíóùë°\\\\bm{\\\\widetilde{w}}\\_{t}=\\\\bm{w}\\_{t}-\\\\rho\\\\bm{v}\\_{t}/\\|\\|\\\\bm{v}\\_{t}\\|\\| (in analogy to common implementations of NAG) and remove the final perturbation after the last iteration (see Alg. [1]In Figure 1 ‚Ä£ 2.3 Momentum and Nesterov Accelerated Gradient ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")).\nAll mentioned optimization strategies are depicted in detail in Fig. [1]Figure 1 ‚Ä£ 2.3 Momentum and Nesterov Accelerated Gradient ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\").\nSince SGD with momentum as well as Adam store a running mean of gradients, MSAM does not take up additional memory and comes with negligible computational overhead.\n\nFurthermore, we confirm that a similar theoretical generalization bound as reported by Foret et al. ( [2021])) also holds for directions of high curvature as the momentum direction (see Appx. [A.1]A.1 Theoretical Analysis of MSAM ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")).",
            "citations": null
          },
          "3 Experimental Results": {
            "content": "### 3.1 Speed and Accuracy for ResNets on CIFAR100\n\nTable 1: Comparison against multiple (sharpness-aware) optimizers. Baseline optimizers are SGD for CIFAR100 and AdamW for ImageNet. Please see Appx. [A.5]A.5 Details on Optimizer Comparison ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") for experimental details. MSAM outperforms optimizers of equal speed (AdamW/SGD and NAG) and alternative approaches for faster sharpness reduction.\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| Optimizer | CIFAR100 | ImageNet | Speed |\n| WRN-28-10 | WRN-16-4 | ResNet-50 | ViT-S/32 |\n| SAM | 84.1684.1684.16¬±0.12plus-or-minus0.12\\\\pm 0.12 | 79.2579.2579.25¬±0.10plus-or-minus0.10\\\\pm 0.10 | 83.3683.3683.36¬±0.17plus-or-minus0.17\\\\pm 0.17 | 69.169.169.1 | 0.52 |\n| Baseline | 81.5181.5181.51¬±0.09plus-or-minus0.09\\\\pm 0.09 | 76.9076.9076.90¬±0.15plus-or-minus0.15\\\\pm 0.15 | 81.4681.4681.46¬±0.13plus-or-minus0.13\\\\pm 0.13 | 67.067.067.0 | 1.001.00\\\\bm{1.00} |\n| NAG | 82.0082.0082.00¬±0.11plus-or-minus0.11\\\\pm 0.11 | 77.0977.0977.09¬±0.18plus-or-minus0.18\\\\pm 0.18 | 82.1282.1282.12¬±0.12plus-or-minus0.12\\\\pm 0.12 | ‚àí- | 0.990.99\\\\bm{0.99} |\n| LookSAM | 83.3183.31\\\\bm{83.31}¬±0.12plus-or-minus0.12\\\\pm 0.12 | 79.0079.00\\\\bm{79.00}¬±0.08plus-or-minus0.08\\\\pm 0.08 | 82.2482.2482.24¬±0.11plus-or-minus0.11\\\\pm 0.11 | 68.068.068.0 | 0.84 |\n| ESAM | 82.7182.7182.71¬±0.38plus-or-minus0.38\\\\pm 0.38 | 77.7977.7977.79¬±0.11plus-or-minus0.11\\\\pm 0.11 | 80.4980.4980.49¬±0.40plus-or-minus0.40\\\\pm 0.40 | 66.166.166.1 | 0.62 |\n| MESA | 82.7582.7582.75¬±0.08plus-or-minus0.08\\\\pm 0.08 | 78.3278.3278.32¬±0.08plus-or-minus0.08\\\\pm 0.08 | 81.9481.9481.94¬±0.26plus-or-minus0.26\\\\pm 0.26 | 69.069.0\\\\bm{69.0} | 0.77 |\n| MSAM (ours) | 83.2183.21\\\\bm{83.21}¬±0.07plus-or-minus0.07\\\\pm 0.07 | 79.1179.11\\\\bm{79.11}¬±0.09plus-or-minus0.09\\\\pm 0.09 | 82.6582.65\\\\bm{82.65}¬±0.12plus-or-minus0.12\\\\pm 0.12 | 69.169.1\\\\bm{69.1} | 0.990.99\\\\bm{0.99} |\n\nIn Tab. [1]Table 1 ‚Ä£ 3.1 Speed and Accuracy for ResNets on CIFAR100 ‚Ä£ 3 Experimental Results ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\"), we show test accuracies for MSAM and related optimizers for WideResNet-28-10, WideResNet-16-4 (Zagoruyko & Komodakis, [2016])) and ResNet50 (He et al., [2016])) on CIFAR100 (Krizhevsky & Hinton, [2009])) and ImageNet-1k (Deng et al., [2009])) next to the training speed.\nWe first tuned the learning rate and weight decay for SGD/AdamW and then optimized œÅùúå\\\\rho for each model (see Appx. [A.4]A.4 Training and Implementation Details ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") for more details).\nAdditionally, we conducted experiments with related approaches which seek to make SAM more efficient, namely ESAM (Du et al., [2022b])), LookSAM (Liu et al., [2022])) and MESA (Du et al., [2022a])).\nWhile Du et al. ( [2022a])) also proposed a second optimizer (SAF), we decided to compare against the memory-efficient version MESA (as recommended by the authors for e.g. ImageNet).\nNote that LookSAM required tuning of an additional hyperparameter. See Appx. [A.5]A.5 Details on Optimizer Comparison ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") for implementation details on the related optimizers.\nOptimizers of the same speed as MSAM (i.e. SGD/AdamW and NAG) are significantly outperformed.\nWhile SAM reaches slightly higher accuracies than MSAM, twice as much runtime is needed.\nAccuracies of MSAM and LookSAM do not differ significantly for WideResNets, however, MSAM performs better on ResNet-50, is faster, and does not demand additional hyperparameter tuning.\nFor ESAM we observed only a minor speedup compared to SAM and the accuracies of MSAM could not be reached.\nMESA yields similar results to MSAM for ViT on ImageNet but performs worse on all models on CIFAR100 and is slower compared to MSAM.\n\n### 3.2 ResNet and ViT on ImageNet Results\n\nMoreover, we test MSAM for ResNets (He et al., [2016])) and further ViT variants (Dosovitskiy et al., [2021])) on ImageNet-1k (Deng et al., [2009])) and report results in Tab. [2]Table 2 ‚Ä£ 3.2 ResNet and ViT on ImageNet Results ‚Ä£ 3 Experimental Results ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\").\nDue to limited computational resources, we only run single iterations, but provide an estimate of the uncertainty by running 5 iterations of baseline optimizers for the smallest models per category and calculate the standard deviations.\nDuring the learning rate warm-up phase commonly used for ViTs we set œÅMSAM=0subscriptùúåMSAM0\\\\rho\\_{\\\\text{MSAM}}=0.\nSAM also benefits from this effect, but less pronounced, so we kept SAM active during warm-up phase to stay consistent with related work (see Appx. [A.3]A.3 Effects of MSAM/SAM During ViT‚Äôs Warm-up Phase ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") for detailed discussion). While performance improvements are small for ResNets for MSAM and SAM, both optimizers achieve clear improvements for ViTs.\nEven though slightly below SAMs performance for most models, MSAM yields comparable results while being almost twice as fast.\n\nIn addition, we conducted experiments for ViT-S/32 on ImageNet when giving MSAM the same computational budget as SAM (i.e. training for 180 epochs) yielding a test accuracy of 70.1% and thus clearly outperforming SAMs 69.1% (also see Appx. [A.9]A.9 Comparison with Same Computational Budgets ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")).\n\nTable 2: Test accuracies on ImageNet for baseline optimizers (SGD or AdamW), SAM and MSAM.\nEstimated uncertainties: ResNet: ¬±0.08plus-or-minus0.08\\\\pm 0.08, ViT (90 epochs): ¬±0.17plus-or-minus0.17\\\\pm 0.17, ViT (300 epochs): ¬±0.24plus-or-minus0.24\\\\pm 0.24.\nImprovements over baseline are given in green.\nMSAM yields results comparable to SAM for most models while being ‚âà2absent2\\\\approx 2 times faster in all our experiments.\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| Model | Epochs | Baseline | SAM | MSAM |\n| ResNet-50 | 100 | SGD | 76.376.376.3 | 76.676.676.6+0.30.3+0.3 | 76.576.576.5+0.20.2+0.2 |\n| ResNet-101 | 100 | SGD | 77.977.977.9 | 78.778.778.7+0.80.8+0.8 | 78.278.278.2+0.30.3+0.3 |\n| ViT-S/32 | 300 | AdamW | 67.267.267.2 | 71.471.471.4+4.24.2+4.2 | 70.570.570.5+3.33.3+3.3 |\n| 90 | AdamW | 67.067.067.0 | 69.169.169.1+2.12.1+2.1 | 69.169.169.1+2.12.1+2.1 |\n| ViT-S/16 | 300 | AdamW | 73.073.073.0 | 78.278.278.2+5.25.2+5.2 | 75.875.875.8+2.82.8+2.8 |\n| 90 | AdamW | 72.672.672.6 | 75.875.875.8+3.23.2+3.2 | 74.974.974.9+2.32.3+2.3 |\n| ViT-B/32 | 90 | AdamW | 66.966.966.9 | 70.470.470.4+3.53.5+3.5 | 70.270.270.2+3.33.3+3.3 |\n| ViT-B/16 | 90 | AdamW | 73.073.073.0 | 77.777.777.7+4.74.7+4.7 | 75.775.775.7+2.72.7+2.7 |\n\n### 3.3 Combination with other SAM Variants\n\nAs shown by Kwon et al. ( [2021])), weighting the perturbation components by the parameters significantly improves SAM.\nSimilarly, Mueller & Hein ( [2022])) showed that applying the perturbations only to the Batch Norm layers (Ioffe & Szegedy, [2015])) yields further enhancements.\nBoth of these techniques can also be applied to MSAM, yielding test results similar to SAM (see Tab. [3]Table 3 ‚Ä£ 3.3 Combination with other SAM Variants ‚Ä£ 3 Experimental Results ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")).\n\nTable 3: Test accuracy for different variants of MSAM/SAM on CIFAR100.\nAdaptive refers to ASAM (Kwon et al., [2021])) and BN-only to applying the perturbance only to Batch Norm layers (cf. Mueller & Hein ( [2022]))).\nMSAM performs well with both variants.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| Optimizer | WRN-28-10 | WRN-16-4 | ResNet-50 |\n| SGD | 81.5181.5181.51¬±0.09plus-or-minus0.09\\\\pm 0.09 | 76.9076.9076.90¬±0.15plus-or-minus0.15\\\\pm 0.15 | 81.4681.4681.46¬±0.13plus-or-minus0.13\\\\pm 0.13 |\n| vanilla | SAM | 84.1684.1684.16¬±0.12plus-or-minus0.12\\\\pm 0.12 | 79.2579.2579.25¬±0.10plus-or-minus0.10\\\\pm 0.10 | 83.3683.3683.36¬±0.17plus-or-minus0.17\\\\pm 0.17 |\n| MSAM | 83.2183.2183.21¬±0.07plus-or-minus0.07\\\\pm 0.07 | 79.1179.1179.11¬±0.09plus-or-minus0.09\\\\pm 0.09 | 82.6582.6582.65¬±0.12plus-or-minus0.12\\\\pm 0.12 |\n| adaptive | SAM | 84.7484.7484.74¬±0.13plus-or-minus0.13\\\\pm 0.13 | 79.9679.9679.96¬±0.13plus-or-minus0.13\\\\pm 0.13 | 83.3083.3083.30¬±0.06plus-or-minus0.06\\\\pm 0.06 |\n| MSAM | 84.1584.1584.15¬±0.13plus-or-minus0.13\\\\pm 0.13 | 79.8979.8979.89¬±0.09plus-or-minus0.09\\\\pm 0.09 | 83.4883.4883.48¬±0.08plus-or-minus0.08\\\\pm 0.08 |\n| BN-only | SAM | 84.5784.5784.57¬±0.07plus-or-minus0.07\\\\pm 0.07 | 79.7379.7379.73¬±0.24plus-or-minus0.24\\\\pm 0.24 | 84.5184.5184.51¬±0.17plus-or-minus0.17\\\\pm 0.17 |\n| MSAM | 83.6283.6283.62¬±0.09plus-or-minus0.09\\\\pm 0.09 | 79.7379.7379.73¬±0.14plus-or-minus0.14\\\\pm 0.14 | 83.4983.4983.49¬±0.19plus-or-minus0.19\\\\pm 0.19 |",
            "citations": null
          },
          "4 Properties of MSAM": {
            "content": "### 4.1 Optimization and Generalization Analysis\n\nInstead of ascending along the positive gradient as in SAM, we propose perturbing along the negative momentum vector (positive œÅMSAMsuperscriptùúåMSAM\\\\rho^{\\\\text{MSAM}} in our notation) as it is also done by extragradient methods like Lin et al. ( [2020a])).\nWe did not observe any increase in test performance when perturbing in the positive momentum direction (negative œÅMSAMsuperscriptùúåMSAM\\\\rho^{\\\\text{MSAM}}).\nIn fact, negative œÅùúå\\\\rho values cause a rapid decrease in test accuracy, whereas positive œÅùúå\\\\rho values cause a gain in test accuracy of more than 2%percent22\\\\% for a WideResNet-16-4 trained on CIFAR100 as depicted in Fig. [2]Figure 2 ‚Ä£ 4.1 Optimization and Generalization Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") A, while NAG only provides minor improvements.\n\nFig. [2]Figure 2 ‚Ä£ 4.1 Optimization and Generalization Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") B shows the same data on logarithmic scale next to the test accuracy.\nThe ordinate limits are chosen such that baseline (SGD) accuracies as well as maximal gains by MSAM align.\nNAG improves the training accuracy greatly, especially compared to the gains in test accuracy.\nThis underlines that NAG is designed to foster the optimization procedure (ERM) but does not improve the generalization capabilities of the model.\nSimilarly, for MSAM the maximal test accuracy is reached for high values of œÅùúå\\\\rho where the train accuracy dropped far below the baseline, emphasising the effect of MSAM on the generalization instead of optimization.\n\nFurthermore, small negative values of œÅùúå\\\\rho induce a steep decrease in training accuracy while the test accuracy is not significantly affected, but drops for higher negative œÅùúå\\\\rho.\nThis might offer an explanation why MSAM does not improve the test accuracy with negative œÅùúå\\\\rho values.\nA perturbation in the positive momentum vector direction resembles a step back to past iterations which might result in the gradient not encoding appropriate present or future information about the optimization direction and thus seems to be ill-suited to reduce the training loss effectively, counteracting the benefits of the increased generalization (larger test-train gap).\nSAM might not suffer from this effect, since the local (per batch) gradient does not encode much of the general optimization direction (which is dominated by the momentum vector), hence, the perturbed parameters disagree with parameters from previous iterations.\n\nCounterintuitively, the cosine similarity between the momentum vector ùíót‚àí1subscriptùíóùë°1\\\\bm{v}\\_{t-1} and the gradient gt=‚àáL‚Ñ¨t‚Äã(ùíòt)subscriptùëîùë°‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°g\\_{t}=\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{{w}}\\_{t}) is negative for most iterations (though nears zero at the end of training; see Fig. [2]Figure 2 ‚Ä£ 4.1 Optimization and Generalization Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") C).\nThus, the negative momentum direction actually has a positive slope, so that perturbing in this direction resembles an ascent on the per-batch loss, further supporting the analogy of MSAM and SAM, and offering an explanation for the benefit of the negative sign (see Appx. [A.11]A.11 Loss Ascent in Momentum Direction ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") for an empirical validation).\nSince an update step in the momentum direction was already performed, further moving in this direction overshoots the local minima and thus causes the positive slope.\nThis is also in line with our theoretical considerations in Appx. [A.1]A.1 Theoretical Analysis of MSAM ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\").\nIndependently of sharpness minimization, this observation might offer interesting insights to SGD in general and we intend to follow this up in future work.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 2: WideRestNet-16-4 on CIFAR100 A: Test accuracy for positive and negative œÅùúå\\\\rho compared against SGD and NAG.\nB: Train and test accuracy on logarithmic scale.\nC: Cosine similarity between momentum vector ùíót‚àí1subscriptùíóùë°1\\\\bm{v}\\_{t-1} and gradient gt=‚àáL‚Ñ¨t‚Äã(ùíòt)subscriptùëîùë°‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°g\\_{t}=\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t}).\nMomentum vector direction has mostly negative slope during training and approaches zero at the end.\n\n### 4.2 Similarity between SAM and MSAM\n\nTo support our hypotheses that MSAM yields a valid alternative to SAM, we investigate the similarity between the resulting gradients.\nAfter searching for the optimal value, we keep œÅSAM=0.3subscriptùúåSAM0.3\\\\rho\\_{\\\\text{SAM}}=0.3 fixed, train a model with SAM, and calculate the gradients\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùíàSGDsubscriptùíàSGD\\\\displaystyle\\\\bm{g}\\_{\\\\text{SGD}} | =‚àáL‚Ñ¨t‚Äã(ùíòt)absent‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°\\\\displaystyle=\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t}) |  | (6) |\n|  | ùíàSAMsubscriptùíàSAM\\\\displaystyle\\\\bm{g}\\_{\\\\text{SAM}} | =‚àáL‚Ñ¨t‚Äã(ùíòt+œÅSAM‚Äã‚àáL‚Ñ¨t‚Äã(ùíòt)/‚Äñ‚àáL‚Ñ¨t‚Äã(ùíòt)‚Äñ)absent‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°subscriptùúåSAM‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°norm‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°\\\\displaystyle=\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t}+\\\\rho\\_{\\\\text{SAM}}\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t})/\\|\\|\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t})\\|\\|) |  | (7) |\n|  | ùíàMSAM‚Äã(œÅMSAM)subscriptùíàMSAMsubscriptùúåMSAM\\\\displaystyle\\\\bm{g}\\_{\\\\text{MSAM}}(\\\\rho\\_{\\\\text{MSAM}}) | =‚àáL‚Ñ¨t‚Äã(ùíòt‚àíœÅMSAM‚Äãùíót/‚Äñùíót‚Äñ)absent‚àásubscriptùêøsubscript‚Ñ¨ùë°subscriptùíòùë°subscriptùúåMSAMsubscriptùíóùë°normsubscriptùíóùë°\\\\displaystyle=\\\\nabla L\\_{\\\\mathcal{B}\\_{t}}(\\\\bm{w}\\_{t}-\\\\rho\\_{\\\\text{MSAM}}\\\\bm{v}\\_{t}/\\|\\|\\\\bm{v}\\_{t}\\|\\|) |  | (8) |\n\nwhile we keep œÅMSAMsubscriptùúåMSAM\\\\rho\\_{\\\\text{MSAM}} as a free parameter.\nTo eliminate gradient directions which do not contribute in distinguishing between SAM and SGD gradients, we first project ùíàMSAMsubscriptùíàMSAM\\\\bm{g}\\_{\\\\text{MSAM}} into the plane spanned by ùíàSAMsubscriptùíàSAM\\\\bm{g}\\_{\\\\text{SAM}} and ùíàSGDsubscriptùíàSGD\\\\bm{g}\\_{\\\\text{SGD}} and then calculate the angle Œ∏ùúÉ\\\\theta to ùíàSAMsubscriptùíàSAM\\\\bm{g}\\_{\\\\text{SAM}} (see Fig. [3]Figure 3 ‚Ä£ 4.2 Similarity between SAM and MSAM ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") A).\nBy repeating this every 50 iterations for various values œÅMSAMsubscriptùúåMSAM\\\\rho\\_{\\\\text{MSAM}} and calculating the value of zero-crossing œÅ0subscriptùúå0\\\\rho\\_{0}, we determine when the maximal resemblance to SAM is reached (see Fig. [3]Figure 3 ‚Ä£ 4.2 Similarity between SAM and MSAM ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") B).\nAs shown in Fig. [3]Figure 3 ‚Ä£ 4.2 Similarity between SAM and MSAM ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") C, œÅ0subscriptùúå0\\\\rho\\_{0} reaches values close to the optimal regime of œÅMSAMopt‚âà3superscriptsubscriptùúåMSAMopt3\\\\rho\\_{\\\\text{MSAM}}^{\\\\text{opt}}\\\\approx 3 (cf. Fig. [2]Figure 2 ‚Ä£ 4.1 Optimization and Generalization Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") A) for most epochs.\nWhile this correlation does not yield strict evidence it offers additional empirical support for the similarity between SAM and MSAM gradients.\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 3: A: Projecting gMSAMsubscriptùëîMSAMg\\_{\\\\text{MSAM}} into the plane of gSAMsubscriptùëîSAMg\\_{\\\\text{SAM}} and gSGDsubscriptùëîSGDg\\_{\\\\text{SGD}} to measure SAM/MSAM similarity.\nB: Varying œÅMSAMsubscriptùúåMSAM\\\\rho\\_{\\\\text{MSAM}} until maximal similarity is reached (i.e. Œ∏=0ùúÉ0\\\\theta=0) and determine œÅ0subscriptùúå0\\\\rho\\_{0}.\nC: œÅMSAMsubscriptùúåMSAM\\\\rho\\_{\\\\text{MSAM}} at maximal similarity œÅ0subscriptùúå0\\\\rho\\_{0} is close to generalization optimality (œÅMSAMoptsuperscriptsubscriptùúåMSAMopt\\\\rho\\_{\\\\text{MSAM}}^{\\\\text{opt}}, cf. Fig. [2]Figure 2 ‚Ä£ 4.1 Optimization and Generalization Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") A) for most epochs.\n\n### 4.3 Loss Sharpness Analysis\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 4: Sharpness (Eq. [3]In 2.2 Sharpness Aware Minimization (SAM) ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")) after full training (200 epochs) for WideResNet-16-4 on CIFAR100 along different directions œµbold-italic-œµ\\\\bm{\\\\epsilon} scaled by œÅùúå\\\\rho.\nA: Gradient direction (as used as perturbation in SAM).\nB: Momentum direction (as in MSAM).\nC: Random filter-normalized direction as in Li et al. ( [2018])).\nVertical line at œÅoptsuperscriptùúåopt\\\\rho^{\\\\text{opt}} marks values of optimal test performance (cf. Fig. [A.3]Figure A.3 ‚Ä£ A.6 Full Hyper Parameter Search Results ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") A).\nMSAM and SAM are reducing their respective optimization objective best while MSAM reaches the lowest sharpness along random directions.\n\nAs mentioned above (and discussed by Foret et al. ( [2021]))), the SAM implementation performs the loss maximization step on a single data batch instead of the full training set (L‚Ñ¨subscriptùêø‚Ñ¨L\\_{\\\\mathcal{B}} vs. LùíÆsubscriptùêøùíÆL\\_{\\\\mathcal{S}}).\nTo analyze the efficacy of SAMs sharpness minimization, we therefore compare the sharpness (cf. Eq. [3]In 2.2 Sharpness Aware Minimization (SAM) ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")) in the direction of local (per batch) gradients for models after full training with SGD, SAM and MSAM as a function of the perturbation scale œÅùúå\\\\rho in Fig. [4]Figure 4 ‚Ä£ 4.3 Loss Sharpness Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") A.\nThe minima in local gradient directions are shifted from œÅ=0ùúå0\\\\rho=0, since parameters found after training are usually not minima but saddle points (Dauphin et al., [2014])).\nCompared to the other optimizers, SAM successfully minimizes the sharpness, especially at optimal œÅoptsubscriptùúåopt\\\\rho\\_{\\\\text{opt}} (as used during training).\n\nThe sharpness in momentum direction (Fig. [4]Figure 4 ‚Ä£ 4.3 Loss Sharpness Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") B) represents the MSAM objective (Eq. [5]In 2.4 Momentum-SAM ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")).\nHere we do not include the negative sign in the definition of œµbold-italic-œµ\\\\bm{\\\\epsilon} (as in Eq. [5]In 2.4 Momentum-SAM ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")), hence œÅoptsubscriptùúåopt\\\\rho\\_{\\\\text{opt}} is negative.\nAs expected, MSAM reduces this sharpness best.\nIn contrast to the definition before, the sharpness is symmetric now for positive and negative signs.\nWhile MSAM only minimizes the sharpness in the negative direction explicitly, the positive direction is reduced jointly, further supporting the validity of perturbations in the negative momentum direction.\n\nIn Fig. [4]Figure 4 ‚Ä£ 4.3 Loss Sharpness Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") C, we choose filter-normalized random vectors as perturbations as in Li et al. ( [2018])).\nSince the loss landscape is rotational symmetric around the origin for multiple directions (as used in the original paper), we confine out analysis to one perturbation dimension.\nMSAM reaches the lowest sharpness, while both MSAM and SAM, significantly flatten the loss.\nThis might be caused by MSAM approximating the maximization of LùíÆsubscriptùêøùíÆL\\_{\\\\mathcal{S}} better due to the momentum vector ùíótsubscriptùíóùë°\\\\bm{v}\\_{t} being an aggregation of gradients of multiple batches.\n\nInterestingly, this relates to the findings of Foret et al. ( [2021])) regarding mùëöm-sharpness, where the authors performed the maximization on even smaller data samples (fractions of batches per GPU in distributed training), yielding even better generalization.\nIn this sense MSAM, reduces mùëöm even further over ordinary SAM (m=1ùëö1m=1).\nIn the same line of argument and despite being more efficient, MSAM oftentimes does not improve generalization compared to SAM.\nHowever, contradicting the general idea behind correlations of generalization and sharpness, MSAM yields flatter minima (if defined as in Fig. [4]Figure 4 ‚Ä£ 4.3 Loss Sharpness Analysis ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") C), hence, indicating that explanations for the improved generalization of SAM/MSAM go beyond the reduction in sharpness.\n\nWe additionally analyze the loss curvature for SGD, SAM and MSAM in Appx. [A.2]A.2 Curvature ‚Ä£ Appendix A Appendix ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\").\n\n### 4.4 Normalization\n\nTo gain a better understanding of the relation between MSAM and NAG, we conducted an ablation study by gradually altering the MSAM algorithm until it matches NAG.\nFirstly, we drop the normalization of the perturbation œµbold-italic-œµ\\\\bm{\\\\epsilon} (numerator in Eq. [5]In 2.4 Momentum-SAM ‚Ä£ 2 Method ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\")), then we reintroduce the learning rate Œ∑ùúÇ\\\\eta to scale œµbold-italic-œµ\\\\bm{\\\\epsilon}, and finally set œÅ=1ùúå1\\\\rho=1 to arrive at NAG.\nTrain and test accuracies as functions of œÅùúå\\\\rho are shown in Fig. [5]Figure 5 ‚Ä£ 4.4 Normalization ‚Ä£ 4 Properties of MSAM ‚Ä£ Momentum-SAM: Sharpness Aware Minimization without Computational Overhead\") for all variants.\nDropping the normalization only causes a shift of œÅùúå\\\\rho indicating that changes of the momentum norm during training are negligible.\nHowever, scaling by Œ∑ùúÇ\\\\eta drastically impacts the performance.\nSince the model is trained with a cosine learning rate scheduler (Loshchilov & Hutter, [2017])), œÅùúå\\\\rho decays jointly with Œ∑ùúÇ\\\\eta.\nThe train accuracy is increased significantly not only for œÅ=1ùúå1\\\\rho=1 (NAG), but even further for higher œÅùúå\\\\rho, while the test performance drops at the same time when compared to MSAM.\nThus, optimization is improved again while generalization is not, revealing separable mechanisms for test performance improvements of MSAM and NAG.\nHigh disturbances compared to the step size at the end of training appear to be crucial for increased generalization.\nExtensively investigating the effect of SAM/MSAM during different stages of training might offer potential to make SAM even more effective and/or efficient (i.e. by scheduling œÅùúå\\\\rho to only apply disturbances for selected episodes).\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 5: Test (A) and train (B) accuracy for WideResNet-16-4 on CIFAR100 for different normalization schemes of MSAM in dependence on œÅùúå\\\\rho.\nMSAM without normalization works equally well.\nIf the perturbation œµitalic-œµ\\\\epsilon is scaled by learning rate Œ∑ùúÇ\\\\eta train performance (optimization) is increased while test performance (generalization) benefits only marginally.",
            "citations": null
          },
          "5 Conclusion": {
            "content": "In this work we introduced Momentum-SAM (MSAM), an optimizer achieving comparable results to the SAM optimizer while requiring no significant computational or memory overhead over optimizers such as Adam or SGD, hence, halving the computational load compared to SAM.\nOn the one hand, this reduces the major hindrance for a widespread application of SAM-like algorithms when training resources are limited.\nOn the other hand, we showed that perturbations independent of local gradients (in particular the momentum direction) can yield significant performance enhancements.\nGiven the affinity of MSAM and NAG, we demonstrated new perspectives on SAM/MSAM as well as on NAG and underlined the importance as well as the need for future research of scaling and scheduling of perturbations to further improve sharpness-aware optimizers.",
            "citations": null
          }
        },
        "abstract": "The recently proposed optimization algorithm for deep neural networks\nSharpness Aware Minimization (SAM) suggests perturbing parameters before\ngradient calculation by a gradient ascent step to guide the optimization into\nparameter space regions of flat loss. While significant generalization\nimprovements and thus reduction of overfitting could be demonstrated, the\ncomputational costs are doubled due to the additionally needed gradient\ncalculation, making SAM unfeasible in case of limited computationally\ncapacities. Motivated by Nesterov Accelerated Gradient (NAG) we propose\nMomentum-SAM (MSAM), which perturbs parameters in the direction of the\naccumulated momentum vector to achieve low sharpness without significant\ncomputational overhead or memory demands over SGD or Adam. We evaluate MSAM in\ndetail and reveal insights on separable mechanisms of NAG, SAM and MSAM\nregarding training optimization and generalization. Code is available at\nhttps://github.com/MarlonBecker/MSAM."
      },
      "bib.bib9": {
        "id": "bib.bib9",
        "citation": "Behdin & Mazumder (2023)",
        "authors": "",
        "year": "",
        "title": "On statistical properties of sharpness-aware minimization: Provable guarantees.",
        "venue": "arXiv preprint arXiv:2302.11836",
        "pages": "",
        "url": "",
        "arxiv_id": "2302.11836",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Training Deep Neural Networks (DNN) can be challenging, as it requires minimizing non-convex loss functions with numerous local minima (and saddle points).\nAs different local minima have different generalization properties, recent research has been focused on developing optimization methods and techniques that improve the quality of DNN training, leading to better generalization over unseen data.\n\nAn important property of a DNN solution‚Äôs landscape is its sharpness, which is defined as how rapidly the loss value changes locally. A flatter solution is a solution where the highest and the lowest loss values in the region do not differ too much. Sharpness measures in practice include the largest eigenvalue \\[ [38])\\] or trace \\[ [21])\\] of the Hessian of the loss. Sharpness-Aware Minimization (SAM) \\[ [15])\\] is an optimization framework that builds on the observation that sharpness of the training loss correlates\nwith the generalization performance of a DNN. Specifically, flatter solutions to DNNs have been found to generalize better \\[ [14]), [24]), [40]), [39]), [15])\\]. Thus, in SAM, the loss function is modified, in a way that it encourages convergence to flatter regions of the loss. SAM has been shown to be empirically successful in numerous tasks \\[ [9]), [6]), [3])\\] and has been extended to several variations \\[ [41]), [13])\\]. Thus, there has been a growing interest in understanding the theoretical underpinnings of SAM. In this paper, our goal is to further the theoretical understanding of SAM, by exploring the implicit regularization implications of the algorithm dynamics.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| CIFAR100 | Theory, noiseless | CIFAR10-noisy | Theory, noisy |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n| (a) | (b) | (c) | (d) |\n\nFigure 1: Comparison of GD and SAM classification error on the validation set, over epochs for different cases. (a): CIFAR100 with clean labels on ResNet50. (b): Theoretical error curve for a particular model from our analysis for a noiseless case. (c): CIFAR10 with noisy training labels on ResNet50. (d): Theoretical error curve for a noisy case. Note that our theoretical plots capture the relative profile of real data.\n\nRelated Work.\\[ [15])\\] introduced SAM and presented upper bounds for the generalization performance of SAM. Their bound suggests that SAM should generalize well, however, their result does not completely explain why SAM performs better than a vanilla training using Stochastic Gradient Descent (SGD).\nMost current papers explain the statistical performance of SAM through analyzing the SAM solution loss landscape and geometry, specially, its sharpness. Particularly, continuous time analysis (i.e. when the step size is infinitesimally small) has been used to show SAM can choose more sparse solutions \\[ [2])\\], can regularize eigenvalues of the Hessian of the loss \\[ [37])\\] and eventually select flatter solutions \\[ [10])\\]. The recent work of \\[ [35])\\] also explores the connections between SAM and variational inference, and how SAM seeks flatter solutions. \\[ [1])\\] show that SAM regularizes the eigenvalues of the Hessian, resulting in a flatter solution. Another interesting work is by \\[ [4])\\] which explores SAM‚Äôs trajectory for quadratic loss functions and explains how SAM can lead to flatter minima. Although the fact that SAM solutions are flatter partially explains the good generalization of SAM, we note that sharp minima can generalize as well \\[ [12]), [23])\\] and sharpness can be generally manipulated by reparameterizing the network \\[ [21])\\]. This shows the need for a _statistical_ analysis of SAM, rather than a _geometric_ one.\n\nSummary of Results and Approach. In a departure from the literature, we directly study the statistical properties and performance of SAM. To this end, we consider two statistical problems, a neural network with a hidden layer, and (indefinite) kernel regression, as kernel methods have been shown to be closely related to DNNs and understanding kernel methods is valuable in the DNN literature \\[ [8]), [16]), [17]), [7]), [22])\\]. We present a crisp characterization of the prediction error of SAM and Gradient Descent (GD) for these two problems over the course of the algorithm, and show that under certain conditions, SAM can have a lower prediction error compared to GD. In our analysis, we study both convex and non-convex problems and show that SAM particularly works well in the non-convex cases, where GD might have unbounded error unlike SAM. Moreover, we show that SAM solutions in our setup tend to be flatter compared to GD, which theoretically shows the correlation between statistical performance and sharpness.\n\nOn a technical level, we characterize the SAM trajectory for the aforementioned problems and show a bias-variance trade-off for the prediction error of the algorithm, where bias generally decreases over iterations and variance increases. We show that SAM has a lower bias compared to GD, while GD‚Äôs variance can be lower than SAM‚Äôs. This shows SAM performs better when bias is the dominant term, for example when the noise is not too large or the total number of epochs is finite, as is in practice \\[ [32])\\], specially for large models \\[ [19]), [5])\\]. Moreover, we show that in non-convex settings, GD can have unbounded bias and variance while SAM is able to keep the error bounded, showing a better performance. Our numerical results on several models including deep neural networks agree with our theoretical insights.\n\nWe use numerical experiments to illustrate some of our results. In Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")(a), we compare SAM and GD classification error on the validation set over epochs when training ResNet50 network on CIFAR100 dataset (see Section [5]Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") for more details on numerical experiments). We see that SAM has better accuracy over GD for almost all epochs, specially in earlier phases of training, which can be explained by our theory. As the training labels are not noisy in this case, bias is likely to be dominant and as we show, SAM‚Äôs bias is less than GD‚Äôs for all iterations under our model assumptions. In fact, in Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")(b) we show the error plot calculated from our theory for a noiseless model111The details of plots in Figures [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")(b,d) are discussed in Appendix [A]Appendix A Details of example from Section 1 ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"). The plots show error for a kernel regression problem with least-squares loss., which follows the same trends as Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")(a), showing how our theory can explain the differences of GD/SAM in practice. In another case, we compare the performance of SAM and GD for CIFAR10 with training label noise in Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")(c). Both methods perform worse in later epochs, which can be due to variance becoming dominant. However, GD performs even worse than SAM in the noisy setup. As we show, in the non-convex settings GD can have larger (and even unbounded) variance over SAM, which explains the performance gap seen here. Particularly, Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")(d) plots the error from our theory for a noisy model, which again, shows similar trends to the real data plots, such as non-monotonicity of the error and the increasing gap between SAM and GD in later iterations.\n\nWe note that our approach is different from the previous work. Instead of studying geometric properties of SAM‚Äôs solution such as its sharpness, which can partially explain why SAM generalizes better, we directly study the statistical performance of SAM. Hence, we present a direct explanation for SAM‚Äôs performance in practice, rather than relying on the correlation between flatness and generalization. Moreover, our analysis is different from previous work, which does not require us to assume the step size is infinitesimally small, unlike most current work \\[ [10]), [2]), [37]), [35])\\]. This provides insights for non-infitnesimal step sizes used in practice.\n\nOur contributions. Our contributions in this paper can be summarized as follows: (i) We study the statistical performance of SAM for one layer neural networks and (indefinite) kernel regression; (ii) We show that for these two problem classes, SAM has lower prediction error over GD under certain conditions, specially for non-convex settings; (iii) We show that in our settings, SAM tends to be flatter, confirming the correlation between generalization and flatness; (iv) We verify our theoretical findings using numerical experiments on synthetic and real data, and models including DNNs.",
            "citations": null
          },
          "2 SAM: An Overview": {
            "content": "Let f:‚Ñùp‚Ü¶‚Ñù:ùëìmaps-tosuperscript‚Ñùùëù‚Ñùf:\\\\mathbb{R}^{p}\\\\mapsto\\\\mathbb{R} be the objective function that we seek to minimize. In many machine learning applications in particular, we have f‚Äã(ùíò)=‚àëi=1nfi‚Äã(ùíò)/nùëìùíòsuperscriptsubscriptùëñ1ùëõsubscriptùëìùëñùíòùëõf(\\\\boldsymbol{w})=\\\\sum\\_{i=1}^{n}f\\_{i}(\\\\boldsymbol{w})/n where fisubscriptùëìùëñf\\_{i} is the loss value corresponding to the iùëñi-th observation. A standard approach to minimizing fùëìf is the GD approach where the model parameters, or weights, are updated by the iterations\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùíòk+1GDsuperscriptsubscriptùíòùëò1GD\\\\displaystyle\\\\boldsymbol{w}\\_{k+1}^{\\\\mathrm{GD}} | =ùíòkGD‚àíŒ∑‚Äã‚àáf‚Äã(ùíòkGD)absentsuperscriptsubscriptùíòùëòGDùúÇ‚àáùëìsuperscriptsubscriptùíòùëòGD\\\\displaystyle=\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}}-\\\\eta\\\\nabla f(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}}) |  | (1) |\n\nwhere Œ∑>0ùúÇ0\\\\eta>0 is the step size or learning rate. In SAM \\[ [15])\\], the goal is to find a flatter solution that does not fluctuate too much in a neighborhood of the solution. Therefore, SAM modifies fùëìf as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | fSAM‚Äã(ùíò)=max‚Äñùú∫‚Äñ2‚â§œÅ‚Å°f‚Äã(ùíò+ùú∫)superscriptùëìSAMùíòsubscriptsubscriptnormùú∫2ùúåùëìùíòùú∫f^{\\\\mathrm{SAM}}(\\\\boldsymbol{w})=\\\\max\\_{\\\\\\|\\\\boldsymbol{\\\\varepsilon}\\\\\\|\\_{2}\\\\leq\\\\rho}f(\\\\boldsymbol{w}+\\\\boldsymbol{\\\\varepsilon}) |  | (2) |\n\nand GD is then applied over fSAMsuperscriptùëìSAMf^{\\\\mathrm{SAM}}, which captures the worst objective locally. The hope is that by minimizing fSAMsuperscriptùëìSAMf^{\\\\mathrm{SAM}}, a solution is found that does not perform bad locally, and hence the local loss function is flat. As calculating fSAMsuperscriptùëìSAMf^{\\\\mathrm{SAM}} in closed form is difficult, \\[ [15])\\] suggest to approximate fùëìf with a linear function, i.e.,\n\n|     |     |     |\n| --- | --- | --- |\n|  | argmax‚Äñùú∫‚Äñ2‚â§œÅf‚Äã(ùíò+ùú∫)‚âàargmax‚Äñùú∫‚Äñ2‚â§œÅf‚Äã(ùíò)+ùú∫T‚Äã‚àáf‚Äã(ùíò).subscriptargmaxsubscriptnormùú∫2ùúåùëìùíòùú∫subscriptargmaxsubscriptnormùú∫2ùúåùëìùíòsuperscriptùú∫ùëá‚àáùëìùíò\\\\mathop{\\\\mathrm{argmax}}\\_{\\\\\\|\\\\boldsymbol{\\\\varepsilon}\\\\\\|\\_{2}\\\\leq\\\\rho}f(\\\\boldsymbol{w}+\\\\boldsymbol{\\\\varepsilon})\\\\approx\\\\mathop{\\\\mathrm{argmax}}\\_{\\\\\\|\\\\boldsymbol{\\\\varepsilon}\\\\\\|\\_{2}\\\\leq\\\\rho}f(\\\\boldsymbol{w})+\\\\boldsymbol{\\\\varepsilon}^{T}\\\\nabla f(\\\\boldsymbol{w}). |  |\n\nThe linear approximation leads to \\[ [15])\\]:\n\n|     |     |     |\n| --- | --- | --- |\n|  | fSAM‚Äã(ùíò)‚âàf‚Äã(ùíò+œÅ‚Äã‚àáf‚Äã(ùíò)/‚Äñ‚àáf‚Äã(ùíò)‚Äñ2).superscriptùëìSAMùíòùëìùíòùúå‚àáùëìùíòsubscriptnorm‚àáùëìùíò2f^{\\\\mathrm{SAM}}(\\\\boldsymbol{w})\\\\approx f(\\\\boldsymbol{w}+\\\\rho\\\\nabla f(\\\\boldsymbol{w})/\\\\\\|\\\\nabla f(\\\\boldsymbol{w})\\\\\\|\\_{2}). |  |\n\nTaking the gradient of this approximation and ignoring second order terms, the SAM updates are given as (we refer to \\[ [15])\\] for details of derivation)\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùíòk+1SAMsuperscriptsubscriptùíòùëò1SAM\\\\displaystyle\\\\boldsymbol{w}\\_{k+1}^{\\\\mathrm{SAM}} | =ùíòkSAM‚àíŒ∑‚Äã‚àáf‚Äã(ùíòkSAM+œÅ‚Äã‚àáf‚Äã(ùíòkSAM)).absentsuperscriptsubscriptùíòùëòSAMùúÇ‚àáùëìsuperscriptsubscriptùíòùëòSAMùúå‚àáùëìsuperscriptsubscriptùíòùëòSAM\\\\displaystyle=\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}-\\\\eta\\\\nabla f(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}+\\\\rho\\\\nabla f(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})). |  | (3) |\n\nWe note that in ( [3]In 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")), we ignored the normalization of the inner gradient. But recent work \\[ [2])\\] has shown that the effect of such normalization can be neglected and we follow suit. We also note that our analysis in this work is done directly on ( [3]In 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) (based on the linear approximation to fùëìf) which is implemented in practice, unlike the original loss fSAMsuperscriptùëìSAMf^{\\\\mathrm{SAM}} which is hard to compute.\n\n### 2.1 Overview of Results\n\nThroughout the paper, we assume nùëõn data points (yi,ùíôi)i=1nsuperscriptsubscriptsubscriptùë¶ùëñsubscriptùíôùëñùëñ1ùëõ(y\\_{i},\\\\boldsymbol{x}\\_{i})\\_{i=1}^{n} are given with ùíôi‚àà‚Ñùdsubscriptùíôùëñsuperscript‚Ñùùëë\\\\boldsymbol{x}\\_{i}\\\\in\\\\mathbb{R}^{d}. In our statistical model, each observation is yi=yi‚àó+œµisubscriptùë¶ùëñsuperscriptsubscriptùë¶ùëñsubscriptitalic-œµùëñy\\_{i}=y\\_{i}^{\\*}+\\\\epsilon\\_{i} where yi‚àósuperscriptsubscriptùë¶ùëñy\\_{i}^{\\*} is the true noiseless observation and œµisubscriptitalic-œµùëñ\\\\epsilon\\_{i}‚Äôs are the zero-mean independent noise values with IE‚Äã\\[œµ‚ÄãœµT\\]=œÉ2‚Äãùë∞IEdelimited-\\[\\]bold-italic-œµsuperscriptbold-italic-œµùëásuperscriptùúé2ùë∞{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[\\\\boldsymbol{\\\\epsilon}\\\\boldsymbol{\\\\epsilon}^{T}\\]=\\\\sigma^{2}\\\\boldsymbol{I}. We let Œ¶‚Äã(ùíò;ùíôi)Œ¶ùíòsubscriptùíôùëñ\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x}\\_{i}) to be our predicted value for observation iùëñi, where ùíò‚àà‚Ñùpùíòsuperscript‚Ñùùëù\\\\boldsymbol{w}\\\\in\\\\mathbb{R}^{p} parameterizes the model. We consider the least squares loss as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | f‚Äã(ùíò)=12‚Äã‚àëi=1n(yi‚àíŒ¶‚Äã(ùíò;ùíôi))2.ùëìùíò12superscriptsubscriptùëñ1ùëõsuperscriptsubscriptùë¶ùëñŒ¶ùíòsubscriptùíôùëñ2f(\\\\boldsymbol{w})=\\\\frac{1}{2}\\\\sum\\_{i=1}^{n}\\\\left(y\\_{i}-\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x}\\_{i})\\\\right)^{2}. |  | (4) |\n\nThe expected prediction error for a solution ùíòùíò\\\\boldsymbol{w} is therefore defined as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Error‚Äã(ùíò)=IEœµ‚Äã\\[1n‚Äã‚àëi=1n(yi‚àó‚àíŒ¶‚Äã(ùíò;ùíôi))2\\].ErrorùíòsubscriptIEbold-italic-œµdelimited-\\[\\]1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsuperscriptsubscriptùë¶ùëñŒ¶ùíòsubscriptùíôùëñ2\\\\mathrm{Error}(\\\\boldsymbol{w})={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\\\left\\[\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left(y\\_{i}^{\\*}-\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x}\\_{i})\\\\right)^{2}\\\\right\\]. |  | (5) |\n\nOne hence can decompose error as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Error‚Äã(ùíò)=1n‚Äã‚àëi=1n(yi‚àó‚àíIEœµ‚Äã\\[Œ¶‚Äã(ùíò;ùíôi)\\])2‚èüBias2‚Äã(ùíò)+1n‚ÄãIEœµ‚Äã\\[‚àëi=1n(Œ¶‚Äã(ùíò;ùíôi)‚àíIEœµ‚Äã\\[Œ¶‚Äã(ùíò;ùíôi)\\])2\\]‚èüVar‚Äã(ùíò).Errorùíòsubscript‚èü1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsuperscriptsubscriptùë¶ùëñsubscriptIEbold-italic-œµdelimited-\\[\\]Œ¶ùíòsubscriptùíôùëñ2superscriptBias2ùíòsubscript‚èü1ùëõsubscriptIEbold-italic-œµdelimited-\\[\\]superscriptsubscriptùëñ1ùëõsuperscriptŒ¶ùíòsubscriptùíôùëñsubscriptIEbold-italic-œµdelimited-\\[\\]Œ¶ùíòsubscriptùíôùëñ2Varùíò\\\\mathrm{Error}(\\\\boldsymbol{w})=\\\\underbrace{\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left(y\\_{i}^{\\*}-{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\\\left\\[\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x}\\_{i})\\\\right\\]\\\\right)^{2}}\\_{\\\\mathrm{Bias}^{2}(\\\\boldsymbol{w})}+\\\\underbrace{\\\\frac{1}{n}{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\\\left\\[\\\\sum\\_{i=1}^{n}\\\\left(\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x}\\_{i})-{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\\\left\\[\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x}\\_{i})\\\\right\\]\\\\right)^{2}\\\\right\\]}\\_{\\\\mathrm{Var}(\\\\boldsymbol{w})}. |  | (6) |\n\nThe bias term in ( [6]In 2.1 Overview of Results ‚Ä£ 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) captures how far the expected predicted value is from the true model, while the variance term is the variance of the prediction resulting from the noise.\n\nWe discuss the details of models we study in Section [3.1]Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") for the neural network model, and in Section [3.2]Kernel Regression ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") for the kernel regression case. Our goal is to show that under certain condition, SAM has lower statistical error compared to GD.\nTo this end, we will characterize the bias and variance terms in ( [6]In 2.1 Overview of Results ‚Ä£ 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")). Specifically, we show that in all cases that we consider, SAM has a lower bias compared to GD. Moreover, SAM has higher variance in convex settings, but has significantly lower variance in non-convex settings. This quantifies that SAM is well-suited for non-convex problems.",
            "citations": null
          },
          "3 Statistical Models": {
            "content": "Before stating our results, we discuss two important statistical models that we consider and present a formal problem definition for each.\n\n### 3.1 Neural Networks with a Hidden Layer\n\nLet œï‚Äã(x):‚Ñù‚Ü¶‚Ñù:italic-œïùë•maps-to‚Ñù‚Ñù\\\\phi(x):\\\\mathbb{R}\\\\mapsto\\\\mathbb{R} be a possibly non-linear activation function. A neural network with one hidden layer and LùêøL hidden neurons can be defined as Œ¶‚Äã(ùíò;ùíô)=‚àël=1Lœï‚Äã(ùíôT‚Äãùíò(l))Œ¶ùíòùíôsuperscriptsubscriptùëô1ùêøitalic-œïsuperscriptùíôùëásuperscriptùíòùëô\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x})=\\\\sum\\_{l=1}^{L}\\\\phi(\\\\boldsymbol{x}^{T}\\\\boldsymbol{w}^{(l)}) where ùíò(l)‚àà‚Ñùdsuperscriptùíòùëôsuperscript‚Ñùùëë\\\\boldsymbol{w}^{(l)}\\\\in\\\\mathbb{R}^{d} and ùíò=(ùíò(1),‚ãØ,ùíò(L))‚àà‚Ñùpùíòsuperscriptùíò1‚ãØsuperscriptùíòùêøsuperscript‚Ñùùëù\\\\boldsymbol{w}=(\\\\boldsymbol{w}^{(1)},\\\\cdots,\\\\boldsymbol{w}^{(L)})\\\\in\\\\mathbb{R}^{p} where p=d‚ÄãLùëùùëëùêøp=dL. For the rest of the paper, we consider the ReLU as the activation function, œï‚Äã(x)=max‚Å°(0,x)italic-œïùë•0ùë•\\\\phi(x)=\\\\max(0,x).\nLet ùíÇ‚Äã(ùíò;ùíô)=(ùíÇ1‚Äã(ùíò;ùíô),‚ãØ,ùíÇL‚Äã(ùíò;ùíô))‚àà‚ÑùpùíÇùíòùíôsubscriptùíÇ1ùíòùíô‚ãØsubscriptùíÇùêøùíòùíôsuperscript‚Ñùùëù\\\\boldsymbol{a}(\\\\boldsymbol{w};\\\\boldsymbol{x})=(\\\\boldsymbol{a}\\_{1}(\\\\boldsymbol{w};\\\\boldsymbol{x}),\\\\cdots,\\\\boldsymbol{a}\\_{L}(\\\\boldsymbol{w};\\\\boldsymbol{x}))\\\\in\\\\mathbb{R}^{p} where for l‚àà\\[L\\]ùëôdelimited-\\[\\]ùêøl\\\\in\\[L\\], we have ùíÇl‚Äã(ùíò;ùíô)‚àà‚ÑùdsubscriptùíÇùëôùíòùíôsuperscript‚Ñùùëë\\\\boldsymbol{a}\\_{l}(\\\\boldsymbol{w};\\\\boldsymbol{x})\\\\in\\\\mathbb{R}^{d},\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùíÇl‚Äã(ùíò;ùíô)={ùüéif ‚ÄãùíôT‚Äãùíò(l)‚â§0ùíôif ‚ÄãùíôT‚Äãùíò(l)>0.subscriptùíÇùëôùíòùíôcases0if superscriptùíôùëásuperscriptùíòùëô0ùíôif superscriptùíôùëásuperscriptùíòùëô0\\\\boldsymbol{a}\\_{l}(\\\\boldsymbol{w};\\\\boldsymbol{x})=\\\\begin{cases}\\\\boldsymbol{0}&\\\\mbox{if }\\\\boldsymbol{x}^{T}\\\\boldsymbol{w}^{(l)}\\\\leq 0\\\\\\<br>\\\\boldsymbol{x}&\\\\mbox{if }\\\\boldsymbol{x}^{T}\\\\boldsymbol{w}^{(l)}>0.\\\\end{cases} |  | (7) |\n\nUnder this notation, for the ReLU activation we have Œ¶‚Äã(ùíò;ùíô)=ùíÇ‚Äã(ùíò,ùíô)T‚ÄãùíòŒ¶ùíòùíôùíÇsuperscriptùíòùíôùëáùíò\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x})=\\\\boldsymbol{a}(\\\\boldsymbol{w},\\\\boldsymbol{x})^{T}\\\\boldsymbol{w}. We study the sequence ùíòkSAMsuperscriptsubscriptùíòùëòSAM\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}} from ( [3]In 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) where f‚Äã(ùíò)ùëìùíòf(\\\\boldsymbol{w}) is given in ( [4]In 2.1 Overview of Results ‚Ä£ 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")). In particular, we let ùíòkGDsuperscriptsubscriptùíòùëòGD\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}} to be the sequence from ( [1]In 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) with œÅ=0ùúå0\\\\rho=0. We assume both SAM and GD use the same step size Œ∑ùúÇ\\\\eta and they both start from an initial solution such as ùíò0subscriptùíò0\\\\boldsymbol{w}\\_{0}. We also consider the following assumptions.\n\n1. (A1)\n\n\nThere exists k¬Ø‚â•1¬Øùëò1\\\\bar{k}\\\\geq 1 such that for 0‚â§k‚â§k¬Ø0ùëò¬Øùëò0\\\\leq k\\\\leq\\\\bar{k} and i‚àà\\[n\\]ùëñdelimited-\\[\\]ùëõi\\\\in\\[n\\], we have\n\n\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùíÇ‚Äã(ùíòkSAM;ùíôi)=ùíÇ‚Äã(ùíòkGD;ùíôi)=ùíÇ‚Äã(ùíò0;ùíôi).ùíÇsuperscriptsubscriptùíòùëòSAMsubscriptùíôùëñùíÇsuperscriptsubscriptùíòùëòGDsubscriptùíôùëñùíÇsubscriptùíò0subscriptùíôùëñ\\\\boldsymbol{a}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}};\\\\boldsymbol{x}\\_{i})=\\\\boldsymbol{a}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}};\\\\boldsymbol{x}\\_{i})=\\\\boldsymbol{a}(\\\\boldsymbol{w}\\_{0};\\\\boldsymbol{x}\\_{i}). |  |\n\n2. (A2)\n\n\nThere exists ùíò¬Ø‚àà‚Ñùp¬Øùíòsuperscript‚Ñùùëù\\\\bar{\\\\boldsymbol{w}}\\\\in\\\\mathbb{R}^{p} such that ùíÇ‚Äã(ùíò¬Ø;ùíôi)=ùíÇ‚Äã(ùíò0;ùíôi)ùíÇ¬ØùíòsubscriptùíôùëñùíÇsubscriptùíò0subscriptùíôùëñ\\\\boldsymbol{a}(\\\\bar{\\\\boldsymbol{w}};\\\\boldsymbol{x}\\_{i})=\\\\boldsymbol{a}(\\\\boldsymbol{w}\\_{0};\\\\boldsymbol{x}\\_{i}) for i‚àà\\[n\\]ùëñdelimited-\\[\\]ùëõi\\\\in\\[n\\] and yi‚àó=ùíÇ‚Äã(ùíò¬Ø;ùíôi)T‚Äãùíò¬Øsuperscriptsubscriptùë¶ùëñùíÇsuperscript¬Øùíòsubscriptùíôùëñùëá¬Øùíòy\\_{i}^{\\*}=\\\\boldsymbol{a}(\\\\bar{\\\\boldsymbol{w}};\\\\boldsymbol{x}\\_{i})^{T}\\\\bar{\\\\boldsymbol{w}}.\n\n\nAssumption [(A1)]item (A1) ‚Ä£ 3.1 Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") states that the quantities ùíôT‚Äãùíò(l)superscriptùíôùëásuperscriptùíòùëô\\\\boldsymbol{x}^{T}\\\\boldsymbol{w}^{(l)} do not change sign over the course of the algorithm to avoid non-differentiability of ReLU. This can be ensured by choosing a sufficiently small step size or studying the method near a local minimum where the solution does not change significantly, a common approach to studying DNNs \\[ [39]), [38]), [29])\\]. Moreover, as ùíÇ‚Äã(ùíò;ùíô)‚àà‚Ñùd‚ÄãLùíÇùíòùíôsuperscript‚Ñùùëëùêø\\\\boldsymbol{a}(\\\\boldsymbol{w};\\\\boldsymbol{x})\\\\in\\\\mathbb{R}^{dL}, Assumption [(A2)]item (A2) ‚Ä£ 3.1 Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") is likely to hold true if LùêøL is sufficiently large (i.e. the total number of hidden neurons is large).\n\nIt is worth noting that if œï‚Äã(x)=xitalic-œïùë•ùë•\\\\phi(x)=x and L=1ùêø1L=1, Œ¶‚Äã(ùíò;ùíô)=ùíòT‚ÄãùíôŒ¶ùíòùíôsuperscriptùíòùëáùíô\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x})=\\\\boldsymbol{w}^{T}\\\\boldsymbol{x} which simplifies the model described above to the ordinary least-squares problem. By taking ùíÇ‚Äã(ùíò;ùíô)=ùíôùíÇùíòùíôùíô\\\\boldsymbol{a}(\\\\boldsymbol{w};\\\\boldsymbol{x})=\\\\boldsymbol{x}, we have Œ¶‚Äã(ùíò;ùíô)=ùíÇ‚Äã(ùíò;ùíô)T‚Äãùíò=ùíôT‚ÄãùíòŒ¶ùíòùíôùíÇsuperscriptùíòùíôùëáùíòsuperscriptùíôùëáùíò\\\\Phi(\\\\boldsymbol{w};\\\\boldsymbol{x})=\\\\boldsymbol{a}(\\\\boldsymbol{w};\\\\boldsymbol{x})^{T}\\\\boldsymbol{w}=\\\\boldsymbol{x}^{T}\\\\boldsymbol{w} similar to the ReLU case above. Moreover, Assumption [(A1)]item (A1) ‚Ä£ 3.1 Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") holds trivially for the linear regression case, and Assumption [(A2)]item (A2) ‚Ä£ 3.1 Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") simplifies to existence of ùíò¬Ø‚àà‚Ñùd¬Øùíòsuperscript‚Ñùùëë\\\\bar{\\\\boldsymbol{w}}\\\\in\\\\mathbb{R}^{d} such that yi‚àó=ùíôiT‚Äãùíò¬Øsuperscriptsubscriptùë¶ùëñsuperscriptsubscriptùíôùëñùëá¬Øùíòy\\_{i}^{\\*}=\\\\boldsymbol{x}\\_{i}^{T}\\\\bar{\\\\boldsymbol{w}} for i‚àà\\[n\\]ùëñdelimited-\\[\\]ùëõi\\\\in\\[n\\] which is standard in the linear regression literature. Therefore, the framework developed here for ReLU networks can be readily applied to the linear regression problem.\n\n### 3.2 Kernel Regression\n\nKernel methods and feature mappings have been a staple of machine learning algorithms in different applications \\[ [20])\\]. Moreover, kernel methods have been studied to better understand optimization and generalization in machine learning \\[ [26])\\]. This is specially interesting as a long line of work has explored connections and similarities between DNNs and kernels \\[ [8]), [16]), [17]), [7]), [22])\\], making the analysis of kernel methods even more important. Let K:‚Ñùd√ó‚Ñùd‚Ü¶‚Ñù:ùêæmaps-tosuperscript‚Ñùùëësuperscript‚Ñùùëë‚ÑùK:\\\\mathbb{R}^{d}\\\\times\\\\mathbb{R}^{d}\\\\mapsto\\\\mathbb{R} be a kernel and ùëø‚àà‚Ñùn√ódùëøsuperscript‚Ñùùëõùëë\\\\boldsymbol{X}\\\\in\\\\mathbb{R}^{n\\\\times d} be the model matrix with rows of ùíô1,‚ãØ,ùíônsubscriptùíô1‚ãØsubscriptùíôùëõ\\\\boldsymbol{x}\\_{1},\\\\cdots,\\\\boldsymbol{x}\\_{n}. We define the Gram matrix associated with this kernel and data as\nùë≤ùëø=\\[K‚Äã(ùíôi,ùíôj)\\]subscriptùë≤ùëødelimited-\\[\\]ùêæsubscriptùíôùëñsubscriptùíôùëó\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}}=\\[K(\\\\boldsymbol{x}\\_{i},\\\\boldsymbol{x}\\_{j})\\].\nA classical assumption in kernel learning is that KùêæK is Positive Semidefinite (PSD), that is ùë≤ùëøsubscriptùë≤ùëø\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}} is PSD for any ùëø‚àà‚Ñùn√ódùëøsuperscript‚Ñùùëõùëë\\\\boldsymbol{X}\\\\in\\\\mathbb{R}^{n\\\\times d} and n‚â•1ùëõ1n\\\\geq 1. However, there has been a growing interest in learning with indefinite kernels as they often appear in practice due to noisy observations and/or certain data structures (see \\[ [27]), [28]), [30]), [31])\\] and references therein). Therefore, throughout this paper, we do not assume KùêæK is PSD. In fact, we assume K=K+‚àíK‚àíùêæsubscriptùêæsubscriptùêæK=K\\_{+}-K\\_{-} where K+,K‚àísubscriptùêæsubscriptùêæK\\_{+},K\\_{-} are two PSD kernels, resulting in KùêæK being indefinite. We use ‚ÑãKsubscript‚Ñãùêæ\\\\mathcal{H}\\_{K} to denote the Reproducing Kreƒ≠n Kernel Space (RKKS) for which KùêæK is the reproducing kernel. Note that ‚ÑãK=‚ÑãK+‚Äã‚®Å‚ÑãK‚àísubscript‚Ñãùêæsubscript‚Ñãsubscriptùêædirect-sumsubscript‚Ñãsubscriptùêæ\\\\mathcal{H}\\_{K}=\\\\mathcal{H}\\_{K\\_{+}}\\\\bigoplus\\\\mathcal{H}\\_{K\\_{-}} where ‚ÑãK+,‚ÑãK‚àísubscript‚Ñãsubscriptùêæsubscript‚Ñãsubscriptùêæ\\\\mathcal{H}\\_{K\\_{+}},\\\\mathcal{H}\\_{K\\_{-}} are Reproducing Kernel Hilbert Spaces (RKHS) associated with K+,K‚àísubscriptùêæsubscriptùêæK\\_{+},K\\_{-} and ‚®Ådirect-sum\\\\bigoplus denotes orthogonal direct sum \\[ [27])\\]. We also assume KùêæK is symmetric, that is K‚Äã(ùíôi,ùíôj)=K‚Äã(ùíôj,ùíôi)ùêæsubscriptùíôùëñsubscriptùíôùëóùêæsubscriptùíôùëósubscriptùíôùëñK(\\\\boldsymbol{x}\\_{i},\\\\boldsymbol{x}\\_{j})=K(\\\\boldsymbol{x}\\_{j},\\\\boldsymbol{x}\\_{i}) for all ùíôi,ùíôjsubscriptùíôùëñsubscriptùíôùëó\\\\boldsymbol{x}\\_{i},\\\\boldsymbol{x}\\_{j}. Given pairs of observations (yi,ùíôi)i=1nsuperscriptsubscriptsubscriptùë¶ùëñsubscriptùíôùëñùëñ1ùëõ(y\\_{i},\\\\boldsymbol{x}\\_{i})\\_{i=1}^{n}, we seek to learn the function h‚àà‚ÑãK‚Ñésubscript‚Ñãùêæh\\\\in\\\\mathcal{H}\\_{K} such that h‚Äã(ùíôi)‚âàyi‚Ñésubscriptùíôùëñsubscriptùë¶ùëñh(\\\\boldsymbol{x}\\_{i})\\\\approx y\\_{i} for all iùëñi. To this end, for h‚àà‚ÑãK‚Ñésubscript‚Ñãùêæh\\\\in\\\\mathcal{H}\\_{K} we define the loss\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | L‚Äã\\[h\\]=12‚Äã‚àëi=1n(h‚Äã(ùíôi)‚àíyi)2.ùêødelimited-\\[\\]‚Ñé12superscriptsubscriptùëñ1ùëõsuperscript‚Ñésubscriptùíôùëñsubscriptùë¶ùëñ2L\\[h\\]=\\\\frac{1}{2}\\\\sum\\_{i=1}^{n}(h(\\\\boldsymbol{x}\\_{i})-y\\_{i})^{2}. |  | (8) |\n\nWe note that L‚Äã\\[h\\]ùêødelimited-\\[\\]‚ÑéL\\[h\\] is a function of h‚àà‚ÑãK‚Ñésubscript‚Ñãùêæh\\\\in\\\\mathcal{H}\\_{K}. The gradient of this loss then can be calculated as222We provide a short review of kernel gradients in Appendix [B]Appendix B Review of Kernel Gradients ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\").\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àáL‚Äã\\[h\\]=‚àëi=1n(h‚Äã(ùíôi)‚àíyi)‚ÄãK‚Äã(ùíôi,‚ãÖ)‚àà‚ÑãK‚àáùêødelimited-\\[\\]‚Ñésuperscriptsubscriptùëñ1ùëõ‚Ñésubscriptùíôùëñsubscriptùë¶ùëñùêæsubscriptùíôùëñ‚ãÖsubscript‚Ñãùêæ\\\\nabla L\\[h\\]=\\\\sum\\_{i=1}^{n}(h(\\\\boldsymbol{x}\\_{i})-y\\_{i})K(\\\\boldsymbol{x}\\_{i},\\\\cdot)\\\\in\\\\mathcal{H}\\_{K} |  | (9) |\n\nwhere K‚Äã(ùíô,‚ãÖ):‚Ñùd‚Ü¶‚Ñù:ùêæùíô‚ãÖmaps-tosuperscript‚Ñùùëë‚ÑùK(\\\\boldsymbol{x},\\\\cdot):\\\\mathbb{R}^{d}\\\\mapsto\\\\mathbb{R} denotes the evaluation function, K‚Äã(ùíô,‚ãÖ)‚Äã(ùíö)=K‚Äã(ùíô,ùíö)ùêæùíô‚ãÖùíöùêæùíôùíöK(\\\\boldsymbol{x},\\\\cdot)(\\\\boldsymbol{y})=K(\\\\boldsymbol{x},\\\\boldsymbol{y}). Although the SAM algorithm was introduced in the context of losses in ‚Ñùpsuperscript‚Ñùùëù\\\\mathbb{R}^{p}, one can mimic SAM in the RKKS. Specifically, we define KernelSAM, an equivalent of SAM algorithm in the RKKS, by iterations\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | hk+1SAM=hkSAM‚àíŒ∑‚Äã‚àáL‚Äã\\[hkSAM+œÅ‚Äã‚àáL‚Äã\\[hkSAM\\]\\].superscriptsubscript‚Ñéùëò1SAMsuperscriptsubscript‚ÑéùëòSAMùúÇ‚àáùêødelimited-\\[\\]superscriptsubscript‚ÑéùëòSAMùúå‚àáùêødelimited-\\[\\]superscriptsubscript‚ÑéùëòSAMh\\_{k+1}^{\\\\mathrm{SAM}}=h\\_{k}^{\\\\mathrm{SAM}}-\\\\eta\\\\nabla L\\[h\\_{k}^{\\\\mathrm{SAM}}+\\\\rho\\\\nabla L\\[h\\_{k}^{\\\\mathrm{SAM}}\\]\\]. |  | (10) |\n\nOur first result is a representer theorem for KernelSAM. For ùíò‚àà‚Ñùnùíòsuperscript‚Ñùùëõ\\\\boldsymbol{w}\\\\in\\\\mathbb{R}^{n}, we will use the notation\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùíòT‚Äãùë≤‚Äã(ùëø,‚ãÖ):=‚àëi=1nwi‚ÄãK‚Äã(ùíôi,‚ãÖ)‚àà‚ÑãK.assignsuperscriptùíòùëáùë≤ùëø‚ãÖsuperscriptsubscriptùëñ1ùëõsubscriptùë§ùëñùêæsubscriptùíôùëñ‚ãÖsubscript‚Ñãùêæ\\\\boldsymbol{w}^{T}\\\\boldsymbol{K}(\\\\boldsymbol{X},\\\\cdot):=\\\\sum\\_{i=1}^{n}w\\_{i}K(\\\\boldsymbol{x}\\_{i},\\\\cdot)\\\\in\\\\mathcal{H}\\_{K}. |  |\n\n###### Theorem 1.\n\nSuppose h0SAM=0superscriptsubscript‚Ñé0SAM0h\\_{0}^{\\\\mathrm{SAM}}=0. Then, for k‚â•1ùëò1k\\\\geq 1, there exists ùê∞kSAM‚àà‚Ñùnsuperscriptsubscriptùê∞ùëòSAMsuperscript‚Ñùùëõ\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}\\\\in\\\\mathbb{R}^{n} such that\nhkSAM=(ùê∞kSAM)T‚Äãùêä‚Äã(ùêó,‚ãÖ)superscriptsubscript‚ÑéùëòSAMsuperscriptsuperscriptsubscriptùê∞ùëòSAMùëáùêäùêó‚ãÖh\\_{k}^{\\\\mathrm{SAM}}=(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})^{T}\\\\boldsymbol{K}(\\\\boldsymbol{X},\\\\cdot).333An explicit expression for updates can be found in ( [E.8]In Proof. ‚Ä£ E.2 Proof of Theorem 1 ‚Ä£ Appendix E Proof of Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")).\n\nTheorem [1]Theorem 1. ‚Ä£ 3.2 Kernel Regression ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") shows that at each iteration, the SAM solution can be represented as a linear combination of K‚Äã(ùíôi,‚ãÖ)ùêæsubscriptùíôùëñ‚ãÖK(\\\\boldsymbol{x}\\_{i},\\\\cdot) which allows us to directly study ùíòkSAMsuperscriptsubscriptùíòùëòSAM\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}. Therefore, using the notation from Section [2.1]Overview of Results ‚Ä£ 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"),\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œ¶‚Äã(ùíòkSAM;ùíô)=‚àëj=1n(wkSAM)j‚ÄãK‚Äã(ùíôj,ùíô)=hkSAM‚Äã(ùíô).Œ¶superscriptsubscriptùíòùëòSAMùíôsuperscriptsubscriptùëó1ùëõsubscriptsuperscriptsubscriptùë§ùëòSAMùëóùêæsubscriptùíôùëóùíôsuperscriptsubscript‚ÑéùëòSAMùíô\\\\Phi(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}};\\\\boldsymbol{x})=\\\\sum\\_{j=1}^{n}(w\\_{k}^{\\\\mathrm{SAM}})\\_{j}K(\\\\boldsymbol{x}\\_{j},\\\\boldsymbol{x})=h\\_{k}^{\\\\mathrm{SAM}}(\\\\boldsymbol{x}). |  | (11) |\n\nSimilar to the case of ReLU networks, we seek to characterize the error for KernelSAM. To this end, we assume the model is well-specified and there exists ùíò¬Ø‚àà‚Ñùn¬Øùíòsuperscript‚Ñùùëõ\\\\bar{\\\\boldsymbol{w}}\\\\in\\\\mathbb{R}^{n} such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | yi=‚àëj=1nw¬Øj‚ÄãK‚Äã(ùíôj,ùíôi)‚èüyi‚àó+œµisubscriptùë¶ùëñsubscript‚èüsuperscriptsubscriptùëó1ùëõsubscript¬Øùë§ùëóùêæsubscriptùíôùëósubscriptùíôùëñsuperscriptsubscriptùë¶ùëñsubscriptitalic-œµùëñy\\_{i}=\\\\underbrace{\\\\sum\\_{j=1}^{n}\\\\bar{w}\\_{j}K(\\\\boldsymbol{x}\\_{j},\\\\boldsymbol{x}\\_{i})}\\_{y\\_{i}^{\\*}}+\\\\epsilon\\_{i} |  | (12) |\n\nwhere œµisubscriptitalic-œµùëñ\\\\epsilon\\_{i}‚Äôs are the noise values, independent of ùëøùëø\\\\boldsymbol{X}, with the property IE‚Äã\\[œµ\\]=ùüéIEdelimited-\\[\\]bold-italic-œµ0{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[\\\\boldsymbol{\\\\epsilon}\\]=\\\\boldsymbol{0} and IE‚Äã\\[œµ‚ÄãœµT\\]=œÉ2‚Äãùë∞IEdelimited-\\[\\]bold-italic-œµsuperscriptbold-italic-œµùëásuperscriptùúé2ùë∞{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[\\\\boldsymbol{\\\\epsilon}\\\\boldsymbol{\\\\epsilon}^{T}\\]=\\\\sigma^{2}\\\\boldsymbol{I}.\nWith this notation, we let h¬Ø=ùíò¬ØT‚Äãùë≤‚Äã(ùëø,‚ãÖ)¬Ø‚Ñésuperscript¬Øùíòùëáùë≤ùëø‚ãÖ\\\\bar{h}=\\\\bar{\\\\boldsymbol{w}}^{T}\\\\boldsymbol{K}(\\\\boldsymbol{X},\\\\cdot) to be the noiseless estimator. The expected error for hkSAM=(ùíòkSAM)T‚Äãùë≤‚Äã(ùëø,‚ãÖ)‚àà‚ÑãKsuperscriptsubscript‚ÑéùëòSAMsuperscriptsuperscriptsubscriptùíòùëòSAMùëáùë≤ùëø‚ãÖsubscript‚Ñãùêæh\\_{k}^{\\\\mathrm{SAM}}=(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})^{T}\\\\boldsymbol{K}(\\\\boldsymbol{X},\\\\cdot)\\\\in\\\\mathcal{H}\\_{K} is defined as\n\n|     |     |     |\n| --- | --- | --- |\n|  | Error‚Äã(ùíòkSAM)=IEœµ‚Äã\\[1n‚Äã‚àëi=1n(h¬Ø‚Äã(ùíôi)‚àíhkSAM‚Äã(ùíôi))2\\]=IEœµ‚Äã\\[1n‚Äã‚àëi=1n(yi‚àó‚àíŒ¶‚Äã(ùíòkSAM;ùíôi))2\\]ErrorsuperscriptsubscriptùíòùëòSAMsubscriptIEbold-italic-œµdelimited-\\[\\]1ùëõsuperscriptsubscriptùëñ1ùëõsuperscript¬Ø‚Ñésubscriptùíôùëñsuperscriptsubscript‚ÑéùëòSAMsubscriptùíôùëñ2subscriptIEbold-italic-œµdelimited-\\[\\]1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsuperscriptsubscriptùë¶ùëñŒ¶superscriptsubscriptùíòùëòSAMsubscriptùíôùëñ2\\\\mathrm{Error}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\\\left\\[\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left(\\\\bar{h}(\\\\boldsymbol{x}\\_{i})-h\\_{k}^{\\\\mathrm{SAM}}(\\\\boldsymbol{x}\\_{i})\\\\right)^{2}\\\\right\\]={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\\\left\\[\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left(y\\_{i}^{\\*}-\\\\Phi(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}};\\\\boldsymbol{x}\\_{i})\\\\right)^{2}\\\\right\\] |  |\n\nwith Œ¶‚Äã(‚ãÖ;‚ãÖ)Œ¶‚ãÖ‚ãÖ\\\\Phi(\\\\cdot;\\\\cdot) defined in ( [11]In 3.2 Kernel Regression ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")). Our final result in this section shows that under the model discussed here, KernelSAM is equivalent to applying SAM on a (non-convex) quadratic objective.\n\n###### Theorem 2.\n\nThe solution ùê∞kSAMsuperscriptsubscriptùê∞ùëòSAM\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}} defined in Theorem [1]Theorem 1. ‚Ä£ 3.2 Kernel Regression ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") follows ( [3]In 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) where\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | f‚Äã(ùíò)=12‚Äã(ùíò‚àíùíò¬Ø)T‚Äãùë≤ùëø‚Äã(ùíò‚àíùíò¬Ø)‚àíùíòT‚Äãœµ.ùëìùíò12superscriptùíò¬Øùíòùëásubscriptùë≤ùëøùíò¬Øùíòsuperscriptùíòùëábold-italic-œµf(\\\\boldsymbol{w})=\\\\frac{1}{2}(\\\\boldsymbol{w}-\\\\bar{\\\\boldsymbol{w}})^{T}\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}}(\\\\boldsymbol{w}-\\\\bar{\\\\boldsymbol{w}})-\\\\boldsymbol{w}^{T}\\\\boldsymbol{\\\\epsilon}. |  | (13) |\n\nAs we study indefinite kernels, ùë≤ùëøsubscriptùë≤ùëø\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}} might be indefinite and therefore f‚Äã(ùíò)ùëìùíòf(\\\\boldsymbol{w}) in Theorem [2]Theorem 2. ‚Ä£ 3.2 Kernel Regression ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") can be non-convex. This shows that our analysis of SAM applies to both convex (as in the linear regression case discussed in Section [3.1]Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") and PSD kernels) and non-convex functions, as for indefinite kernels.",
            "citations": null
          },
          "4 Main Results": {
            "content": "### 4.1 ReLU Networks\n\nIn this section, we review our theoretical results for the ReLU networks discussed in Section [3.1]Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"). We note that as discussed, this model also readily applies to the least-squares linear regression problem and therefore, we do not study that problem separately. Let ùë®‚àà‚Ñùn√ópùë®superscript‚Ñùùëõùëù\\\\boldsymbol{A}\\\\in\\\\mathbb{R}^{n\\\\times p} be the matrix with iùëñi-th row equal to ùíÇ‚Äã(ùíò0;ùíôi)ùíÇsubscriptùíò0subscriptùíôùëñ\\\\boldsymbol{a}(\\\\boldsymbol{w}\\_{0};\\\\boldsymbol{x}\\_{i}). Let us consider the following Singular Value Decomposition (SVD) of ùë®ùë®\\\\boldsymbol{A},\nùë®=ùëΩ‚Äãùö∫‚ÄãùëºT=\\[ùëΩ1ùëΩ2\\]‚Äã\\[ùö∫1ùüé\\]‚Äã\\[ùëº1Tùëº2T\\]ùë®ùëΩùö∫superscriptùëºùëámatrixsubscriptùëΩ1subscriptùëΩ2matrixsubscriptùö∫1missing-subexpressionmissing-subexpression0matrixsuperscriptsubscriptùëº1ùëásuperscriptsubscriptùëº2ùëá\\\\boldsymbol{A}=\\\\boldsymbol{V}\\\\boldsymbol{\\\\Sigma}\\\\boldsymbol{U}^{T}=\\\\begin{bmatrix}\\\\boldsymbol{V}\\_{1}&\\\\boldsymbol{V}\\_{2}\\\\end{bmatrix}\\\\begin{bmatrix}\\\\boldsymbol{\\\\Sigma}\\_{1}&\\\\\\\n&\\\\boldsymbol{0}\\\\end{bmatrix}\\\\begin{bmatrix}\\\\boldsymbol{U}\\_{1}^{T}\\\\\\\n\\\\boldsymbol{U}\\_{2}^{T}\\\\end{bmatrix}\nwhere ùö∫1‚àà‚Ñùr√órsubscriptùö∫1superscript‚Ñùùëüùëü\\\\boldsymbol{\\\\Sigma}\\_{1}\\\\in\\\\mathbb{R}^{r\\\\times r} collects nonzero singular values of ùë®ùë®\\\\boldsymbol{A} and rùëür is the rank of ùë®ùë®\\\\boldsymbol{A}. We let ùë´1=ùö∫12subscriptùë´1superscriptsubscriptùö∫12\\\\boldsymbol{D}\\_{1}=\\\\boldsymbol{\\\\Sigma}\\_{1}^{2}. Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") characterizes the error for the neural model discussed in Section [3.1]Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\").\n\n###### Theorem 3.\n\nSuppose ùê∞0=ùêî1‚Äãùêî1T‚Äãùê∞0subscriptùê∞0subscriptùêî1superscriptsubscriptùêî1ùëásubscriptùê∞0\\\\boldsymbol{w}\\_{0}=\\\\boldsymbol{U}\\_{1}\\\\boldsymbol{U}\\_{1}^{T}\\\\boldsymbol{w}\\_{0} and ùüé‚â∫ùêà‚àíŒ∑‚ÄãùêÉ1‚àíŒ∑‚ÄãœÅ‚ÄãùêÉ12‚â∫ùêàprecedes0ùêàùúÇsubscriptùêÉ1ùúÇùúåsuperscriptsubscriptùêÉ12precedesùêà\\\\boldsymbol{0}\\\\prec\\\\boldsymbol{I}-\\\\eta\\\\boldsymbol{D}\\_{1}-\\\\eta\\\\rho\\\\boldsymbol{D}\\_{1}^{2}\\\\prec\\\\boldsymbol{I} and let ùêÆ=ùêî1T‚Äã(ùê∞¬Ø‚àíùê∞0)ùêÆsuperscriptsubscriptùêî1ùëá¬Øùê∞subscriptùê∞0\\\\boldsymbol{u}=\\\\boldsymbol{U}\\_{1}^{T}(\\\\bar{\\\\boldsymbol{w}}-\\\\boldsymbol{w}\\_{0}). Then, under the model from Section [3.1]Neural Networks with a Hidden Layer ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") one has for k‚â§k¬Øùëò¬Øùëòk\\\\leq\\\\bar{k}\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | Bias2‚Äã(ùíòkSAM)superscriptBias2superscriptsubscriptùíòùëòSAM\\\\displaystyle\\\\mathrm{Bias}^{2}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}) | =1n‚Äã‚àëi=1r(1‚àíŒ∑‚Äãdi‚àíŒ∑‚ÄãœÅ‚Äãdi2)2‚Äãk‚Äãdi‚Äãui2absent1ùëõsuperscriptsubscriptùëñ1ùëüsuperscript1ùúÇsubscriptùëëùëñùúÇùúåsuperscriptsubscriptùëëùëñ22ùëòsubscriptùëëùëñsuperscriptsubscriptùë¢ùëñ2\\\\displaystyle=\\\\frac{1}{n}\\\\sum\\_{i=1}^{r}(1-\\\\eta d\\_{i}-\\\\eta\\\\rho d\\_{i}^{2})^{2k}d\\_{i}u\\_{i}^{2} |  | (14) |\n|  | Var‚Äã(ùíòkSAM)VarsuperscriptsubscriptùíòùëòSAM\\\\displaystyle\\\\mathrm{Var}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}) | =œÉ2n‚Äãùñ≥ùóã‚Äã((ùë∞‚àí(ùë∞‚àíŒ∑‚Äãùë´1‚àíŒ∑‚ÄãœÅ‚Äãùë´12)k)2).absentsuperscriptùúé2ùëõùñ≥ùóãsuperscriptùë∞superscriptùë∞ùúÇsubscriptùë´1ùúÇùúåsuperscriptsubscriptùë´12ùëò2\\\\displaystyle=\\\\frac{\\\\sigma^{2}}{n}\\\\mathsf{Tr}\\\\left(\\\\left(\\\\boldsymbol{I}-(\\\\boldsymbol{I}-\\\\eta\\\\boldsymbol{D}\\_{1}-\\\\eta\\\\rho\\\\boldsymbol{D}\\_{1}^{2})^{k}\\\\right)^{2}\\\\right). |  |\n\nIn particular, for k¬Ø‚â•k‚â•0¬Øùëòùëò0\\\\bar{k}\\\\geq k\\\\geq 0 one has Bias2‚Äã(ùê∞kSAM)‚â§Bias2‚Äã(ùê∞kGD)superscriptBias2superscriptsubscriptùê∞ùëòSAMsuperscriptBias2superscriptsubscriptùê∞ùëòGD\\\\mathrm{Bias}^{2}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})\\\\leq\\\\mathrm{Bias}^{2}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}}) and Var‚Äã(ùê∞kSAM)‚â•Var‚Äã(ùê∞kGD)Varsuperscriptsubscriptùê∞ùëòSAMVarsuperscriptsubscriptùê∞ùëòGD\\\\mathrm{Var}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})\\\\geq\\\\mathrm{Var}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}}).\n\nWe note that Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") is applicable to GD by setting œÅ=0ùúå0\\\\rho=0. Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") precisely characterizes the expected SAM trajectory, and its corresponding bias and variance terms for the neural network model.\nSpecifically,\nwe see that bias for SAM in each iteration is smaller than GD, while the variance for SAM is larger. We note that as kùëòk increases, the bias term decreases while the variance increases. Therefore, if the optimization is run for finitely many steps, the bias term is more likely to be the dominant term and as SAM has a lower bias, SAM is more likely to outperform GD. This intuitive argument is formalized in Proposition [1]Proposition 1. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\").\n\n###### Proposition 1.\n\nSuppose there exists a numerical constant c0>1subscriptùëê01c\\_{0}>1 such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 1‚àíŒ∑‚Äãdr‚â§c0‚Äã(1‚àíŒ∑‚Äãd1‚àíŒ∑‚ÄãœÅ‚Äãd12),1‚àíŒ∑‚Äãd1‚â•c0‚Äã(1‚àíŒ∑‚Äãdr‚àíŒ∑‚ÄãœÅ‚Äãdr2).formulae-sequence1ùúÇsubscriptùëëùëüsubscriptùëê01ùúÇsubscriptùëë1ùúÇùúåsuperscriptsubscriptùëë121ùúÇsubscriptùëë1subscriptùëê01ùúÇsubscriptùëëùëüùúÇùúåsuperscriptsubscriptùëëùëü2\\\\displaystyle 1-\\\\eta d\\_{r}\\\\leq c\\_{0}(1-\\\\eta d\\_{1}-\\\\eta\\\\rho d\\_{1}^{2}),~{}~{}1-\\\\eta d\\_{1}\\\\geq\\\\sqrt{c\\_{0}}(1-\\\\eta d\\_{r}-\\\\eta\\\\rho d\\_{r}^{2}). |  | (15) |\n\nLet SNR=‚Äñùêó‚Äã(ùê∞¬Ø‚àíùê∞0)‚Äñ22/r‚ÄãœÉ2SNRsuperscriptsubscriptnormùêó¬Øùê∞subscriptùê∞022ùëüsuperscriptùúé2\\\\mathrm{SNR}=\\\\\\|\\\\boldsymbol{X}(\\\\bar{\\\\boldsymbol{w}}-\\\\boldsymbol{w}\\_{0})\\\\\\|\\_{2}^{2}/r\\\\sigma^{2} and assume SNR‚â•1SNR1\\\\mathrm{SNR}\\\\geq 1. Under the assumptions of Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), if\n\n|     |     |     |\n| --- | --- | --- |\n|  | k‚â§log‚Å°\\[2/(SNR+1)\\]log‚Å°\\[(1‚àíŒ∑‚Äãd1‚àíŒ∑‚ÄãœÅ‚Äãd12)2/(1‚àíŒ∑‚Äãdr‚àíŒ∑‚ÄãœÅ‚Äãdr2)\\]‚àßk¬Øùëò2SNR1superscript1ùúÇsubscriptùëë1ùúÇùúåsuperscriptsubscriptùëë1221ùúÇsubscriptùëëùëüùúÇùúåsuperscriptsubscriptùëëùëü2¬Øùëòk\\\\leq\\\\frac{\\\\log\\[2/(\\\\mathrm{SNR}+1)\\]}{\\\\log\\[(1-\\\\eta d\\_{1}-\\\\eta\\\\rho d\\_{1}^{2})^{2}/(1-\\\\eta d\\_{r}-\\\\eta\\\\rho d\\_{r}^{2})\\]}\\\\land\\\\bar{k} |  |\n\none has\nError‚Äã(ùê∞kSAM)‚â§Error‚Äã(ùê∞kGD)Errorsuperscriptsubscriptùê∞ùëòSAMErrorsuperscriptsubscriptùê∞ùëòGD\\\\mathrm{Error}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})\\\\leq\\\\mathrm{Error}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}}).\n\nProposition [1]Proposition 1. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") shows that, assuming noise is not too large, SAM has a lower error compared to GD if the optimization is run for finitely many steps.\n\n###### Remark 1.\n\nAs noted, in practice DNNs are trained for a limited number of epochs \\[ [32])\\], and it is believed \\[ [19]), [5])\\] recent large neural networks, specially language models, tend to be undertrained due to resources limitations. This shows the assumption that kùëòk is finite is realistic.\n\n###### Remark 2.\n\nAn interesting special case of Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") is the noiseless case where œÉ=0ùúé0\\\\sigma=0. We note that Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") implies that SAM has a lower error than GD for all iterations k‚â•1ùëò1k\\\\geq 1 for this case.\n\n###### Remark 3.\n\nIn Appendix [C]Appendix C Discussion on Propositions 1 and 2 ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), we discuss the selection of Œ∑,œÅùúÇùúå\\\\eta,\\\\rho to ensure condition ( [15]In Proposition 1. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) holds. On a high level, condition ( [15]In Proposition 1. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) suggests taking œÅ‚â•Œ∑ùúåùúÇ\\\\rho\\\\geq\\\\eta to take advantage of SAM performance.\n\n###### Remark 4.\n\nProposition [1]Proposition 1. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") suggests that the total number of iterations should be smaller in noisy cases. As we demonstrate numerically in Section [5]Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), this is necessary to avoid overfitting to noise.\n\n### 4.2 Kernel Regression\n\nAssume the eigenvalue decomposition ùë≤ùëø=ùëº‚Äãùë´‚ÄãùëºTsubscriptùë≤ùëøùëºùë´superscriptùëºùëá\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}}=\\\\boldsymbol{U}\\\\boldsymbol{D}\\\\boldsymbol{U}^{T}. For simplicity, we assume ùóãùñ∫ùóáùóÑ‚Äã(ùë≤ùëø)=nùóãùñ∫ùóáùóÑsubscriptùë≤ùëøùëõ\\\\mathsf{rank}(\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}})=n. We let ùëº1,ùë´1subscriptùëº1subscriptùë´1\\\\boldsymbol{U}\\_{1},\\\\boldsymbol{D}\\_{1} and ùëº2,ùë´2subscriptùëº2subscriptùë´2\\\\boldsymbol{U}\\_{2},\\\\boldsymbol{D}\\_{2} collect eigenvectors and eigenvalues of ùë≤ùëøsubscriptùë≤ùëø\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}} corresponding to positive and negative eigenvalues, respectively. We also let ùë´=diag‚Äã(d1,‚ãØ,dn)ùë´diagsubscriptùëë1‚ãØsubscriptùëëùëõ\\\\boldsymbol{D}=\\\\mathrm{diag}(d\\_{1},\\\\cdots,d\\_{n}) with d1‚â•‚ãØ‚â•dnsubscriptùëë1‚ãØsubscriptùëëùëõd\\_{1}\\\\geq\\\\cdots\\\\geq d\\_{n}.\n\n###### Theorem 4.\n\nSuppose h0SAM=0superscriptsubscript‚Ñé0SAM0h\\_{0}^{\\\\mathrm{SAM}}=0 and let ùêÆ=ùêîT‚Äãùê∞¬ØùêÆsuperscriptùêîùëá¬Øùê∞\\\\boldsymbol{u}=\\\\boldsymbol{U}^{T}{\\\\bar{\\\\boldsymbol{w}}}. Then, Var‚Äã(ùê∞kSAM)=Var+‚Äã(ùê∞kSAM)+Var‚àí‚Äã(ùê∞kSAM)Varsuperscriptsubscriptùê∞ùëòSAMsuperscriptVarsuperscriptsubscriptùê∞ùëòSAMsuperscriptVarsuperscriptsubscriptùê∞ùëòSAM\\\\mathrm{Var}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})=\\\\mathrm{Var}^{+}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})+\\\\mathrm{Var}^{-}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}) where\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | Bias2‚Äã(ùíòkSAM)superscriptBias2superscriptsubscriptùíòùëòSAM\\\\displaystyle\\\\mathrm{Bias}^{2}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}) | =1n‚Äã‚àëi=1n(1‚àíŒ∑‚Äãdi‚àíŒ∑‚ÄãœÅ‚Äãdi2)2‚Äãk‚Äãdi2‚Äãui2absent1ùëõsuperscriptsubscriptùëñ1ùëõsuperscript1ùúÇsubscriptùëëùëñùúÇùúåsuperscriptsubscriptùëëùëñ22ùëòsuperscriptsubscriptùëëùëñ2superscriptsubscriptùë¢ùëñ2\\\\displaystyle=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}(1-\\\\eta d\\_{i}-\\\\eta\\\\rho d\\_{i}^{2})^{2k}d\\_{i}^{2}u\\_{i}^{2} |  | (16) |\n|  | Var+‚Äã(ùíòkSAM)superscriptVarsuperscriptsubscriptùíòùëòSAM\\\\displaystyle\\\\mathrm{Var}^{+}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}) | =œÉ2n‚Äãùñ≥ùóã‚Äã((ùë∞‚àí(ùë∞‚àíŒ∑‚Äãùë´1‚àíŒ∑‚ÄãœÅ‚Äãùë´12)k)2)absentsuperscriptùúé2ùëõùñ≥ùóãsuperscriptùë∞superscriptùë∞ùúÇsubscriptùë´1ùúÇùúåsuperscriptsubscriptùë´12ùëò2\\\\displaystyle=\\\\frac{\\\\sigma^{2}}{n}\\\\mathsf{Tr}\\\\left(\\\\left(\\\\boldsymbol{I}-(\\\\boldsymbol{I}-\\\\eta\\\\boldsymbol{D}\\_{1}-\\\\eta\\\\rho\\\\boldsymbol{D}\\_{1}^{2})^{k}\\\\right)^{2}\\\\right) |  |\n|  | Var‚àí‚Äã(ùíòkSAM)superscriptVarsuperscriptsubscriptùíòùëòSAM\\\\displaystyle\\\\mathrm{Var}^{-}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}) | =œÉ2n‚Äãùñ≥ùóã‚Äã((ùë∞‚àí(ùë∞‚àíŒ∑‚Äãùë´2‚àíŒ∑‚ÄãœÅ‚Äãùë´22)k)2).absentsuperscriptùúé2ùëõùñ≥ùóãsuperscriptùë∞superscriptùë∞ùúÇsubscriptùë´2ùúÇùúåsuperscriptsubscriptùë´22ùëò2\\\\displaystyle=\\\\frac{\\\\sigma^{2}}{n}\\\\mathsf{Tr}\\\\left(\\\\left(\\\\boldsymbol{I}-(\\\\boldsymbol{I}-\\\\eta\\\\boldsymbol{D}\\_{2}-\\\\eta\\\\rho\\\\boldsymbol{D}\\_{2}^{2})^{k}\\\\right)^{2}\\\\right). |  |\n\nIn Theorem [4]Theorem 4. ‚Ä£ 4.2 Kernel Regression ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), Var+,Var‚àísuperscriptVarsuperscriptVar\\\\mathrm{Var}^{+},\\\\mathrm{Var}^{-} capture the variance from positive and negative eigenvalues of ùë≤ùëøsubscriptùë≤ùëø\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}}, respectively. As we see, the behavior in a non-convex case where some eigenvalues are negative is wildly different from the case where all eigenvalues are non-negative. In particular, if dn<0subscriptùëëùëõ0d\\_{n}<0, not only Bias2‚Äã(ùíòkSAM)‚â§Bias2‚Äã(ùíòkGD)superscriptBias2superscriptsubscriptùíòùëòSAMsuperscriptBias2superscriptsubscriptùíòùëòGD\\\\mathrm{Bias}^{2}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})\\\\leq\\\\mathrm{Bias}^{2}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}}), but the GD bias actually diverges to infinity, while the SAM bias converges to zero under the assumptions of Theorem [4]Theorem 4. ‚Ä£ 4.2 Kernel Regression ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"). In terms of variance, we see that similarly, Var‚àísuperscriptVar\\\\mathrm{Var}^{-} for SAM stays bounded, while it can diverge to infinity for GD. This shows that in the indefinite setting, GD might have unbounded error in the limit of k‚Üí‚àû‚Üíùëòk\\\\to\\\\infty while SAM can keep the error bounded. We also see Var+superscriptVar\\\\mathrm{Var}^{+} shows a behavior similar to the variance from the ReLU case (Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")), implying that when the number of iterations is limited, SAM has smaller error than GD. This shows that SAM is even more suited to the non-convex case as it performs well for both finite and infinite number of iterations. This explanation is formalized in Proposition [2]Proposition 2. ‚Ä£ 4.2 Kernel Regression ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\").\n\n###### Proposition 2.\n\nSuppose there exists a numerical constant c0>1subscriptùëê01c\\_{0}>1 such that\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | 1‚àíŒ∑‚Äãdr1ùúÇsubscriptùëëùëü\\\\displaystyle 1-\\\\eta d\\_{r} | ‚â§c0‚Äã(1‚àíŒ∑‚Äãd1‚àíŒ∑‚ÄãœÅ‚Äãd12),1‚àíŒ∑‚Äãd1‚â•c0‚Äã(1‚àíŒ∑‚Äãdr‚àíŒ∑‚ÄãœÅ‚Äãdr2)formulae-sequenceabsentsubscriptùëê01ùúÇsubscriptùëë1ùúÇùúåsuperscriptsubscriptùëë121ùúÇsubscriptùëë1subscriptùëê01ùúÇsubscriptùëëùëüùúÇùúåsuperscriptsubscriptùëëùëü2\\\\displaystyle\\\\leq c\\_{0}(1-\\\\eta d\\_{1}-\\\\eta\\\\rho d\\_{1}^{2}),~{}~{}1-\\\\eta d\\_{1}\\\\geq\\\\sqrt{c\\_{0}}(1-\\\\eta d\\_{r}-\\\\eta\\\\rho d\\_{r}^{2}) |  | (17) |\n\nwhere rùëür is such that dr>0,dr+1<0formulae-sequencesubscriptùëëùëü0subscriptùëëùëü10d\\_{r}>0,d\\_{r+1}<0. Moreover, assume there exists Œµ>0ùúÄ0\\\\varepsilon>0 that for j‚â•r+1ùëóùëü1j\\\\geq r+1,\n\n|     |     |     |\n| --- | --- | --- |\n|  | 1‚àíŒ∑‚Äãdj‚àíŒ∑‚ÄãœÅ‚Äãdj2‚â§1‚â§1+Œµ‚â§1‚àíŒ∑‚Äãdj.1ùúÇsubscriptùëëùëóùúÇùúåsuperscriptsubscriptùëëùëó211ùúÄ1ùúÇsubscriptùëëùëó1-\\\\eta d\\_{j}-\\\\eta\\\\rho d\\_{j}^{2}\\\\leq 1\\\\leq 1+\\\\varepsilon\\\\leq 1-\\\\eta d\\_{j}. |  |\n\nLet SNR=‚Äñùêäùêó‚Äãùê∞¬Ø‚Äñ22/r‚ÄãœÉ2SNRsuperscriptsubscriptnormsubscriptùêäùêó¬Øùê∞22ùëüsuperscriptùúé2\\\\mathrm{SNR}=\\\\\\|\\\\boldsymbol{K}\\_{\\\\boldsymbol{X}}\\\\bar{\\\\boldsymbol{w}}\\\\\\|\\_{2}^{2}/r\\\\sigma^{2} and assume SNR‚â•1SNR1\\\\mathrm{SNR}\\\\geq 1. Then, under the assumptions of Theorem [4]Theorem 4. ‚Ä£ 4.2 Kernel Regression ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), if\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | k‚â§log‚Å°\\[2/(SNR+1)\\]log‚Å°\\[(1‚àíŒ∑‚Äãd1‚àíŒ∑‚ÄãœÅ‚Äãd12)2/(1‚àíŒ∑‚Äãdr‚àíŒ∑‚ÄãœÅ‚Äãdr2)\\]‚ÄãAND‚Äãk‚â•log‚Å°2log‚Å°(1+Œµ)ùëò2SNR1superscript1ùúÇsubscriptùëë1ùúÇùúåsuperscriptsubscriptùëë1221ùúÇsubscriptùëëùëüùúÇùúåsuperscriptsubscriptùëëùëü2ANDùëò21ùúÄk\\\\leq\\\\frac{\\\\log\\[2/(\\\\mathrm{SNR}+1)\\]}{\\\\log\\[(1-\\\\eta d\\_{1}-\\\\eta\\\\rho d\\_{1}^{2})^{2}/(1-\\\\eta d\\_{r}-\\\\eta\\\\rho d\\_{r}^{2})\\]}~{}~{}\\\\text{AND}~{}~{}k\\\\geq\\\\frac{\\\\log 2}{\\\\log(1+\\\\varepsilon)} |  | (18) |\n\none has\nError‚Äã(ùê∞kSAM)‚â§Error‚Äã(ùê∞kGD)Errorsuperscriptsubscriptùê∞ùëòSAMErrorsuperscriptsubscriptùê∞ùëòGD\\\\mathrm{Error}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})\\\\leq\\\\mathrm{Error}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}}). Moreover, if dn<0subscriptùëëùëõ0d\\_{n}<0,\n\n|     |     |     |\n| --- | --- | --- |\n|  | limk‚Üí‚àûError‚Äã(ùíòkGD)=‚àû,limk‚Üí‚àûError‚Äã(ùíòkSAM)<‚àû.formulae-sequencesubscript‚ÜíùëòErrorsuperscriptsubscriptùíòùëòGDsubscript‚ÜíùëòErrorsuperscriptsubscriptùíòùëòSAM\\\\lim\\_{k\\\\to\\\\infty}\\\\mathrm{Error}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{GD}})=\\\\infty,\\\\lim\\_{k\\\\to\\\\infty}\\\\mathrm{Error}(\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}})<\\\\infty. |  |\n\nSimilar to Proposition [1]Proposition 1. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), Proposition [2]Proposition 2. ‚Ä£ 4.2 Kernel Regression ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") shows that when the total number of iterations is not too large, SAM performs better. Moreover, as discussed, SAM is able to keep the error bounded in the non-convex case, while GD‚Äôs error diverges as k‚Üí‚àû‚Üíùëòk\\\\to\\\\infty.\n\n### 4.3 SAM solutions are flat.\n\nAs discussed, numerous papers have numerically observed the correlation between flatness and generalization, where flatter solutions tend to generalize better. In our work, we directly explained how SAM can perform better statistically compared to GD. However, one might ask if such a correlation between flatness and error exists in our setup. Here, we answer this question in the affirmative. Let us define the sharpness for SAM (and GD similarly) as the expected local fluctuations in the loss,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œ∫kSAM=max‚Äñùú∫‚Äñ2‚â§œÅ0‚Å°IEœµ‚Äã\\[f‚Äã(IEœµ‚Äã\\[ùíòkSAM\\]+ùú∫)‚àíf‚Äã(IEœµ‚Äã\\[ùíòkSAM\\])\\]subscriptsuperscriptùúÖSAMùëòsubscriptsubscriptnormùú∫2subscriptùúå0subscriptIEbold-italic-œµdelimited-\\[\\]ùëìsubscriptIEbold-italic-œµdelimited-\\[\\]superscriptsubscriptùíòùëòSAMùú∫ùëìsubscriptIEbold-italic-œµdelimited-\\[\\]superscriptsubscriptùíòùëòSAM\\\\kappa^{\\\\mathrm{SAM}}\\_{k}=\\\\max\\_{\\\\\\|\\\\boldsymbol{\\\\varepsilon}\\\\\\|\\_{2}\\\\leq\\\\rho\\_{0}}{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\[f({\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\[\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}\\]+\\\\boldsymbol{\\\\varepsilon})-f({\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\_{\\\\boldsymbol{\\\\epsilon}}\\[\\\\boldsymbol{w}\\_{k}^{\\\\mathrm{SAM}}\\])\\] |  | (19) |\n\nfor some œÅ0>0subscriptùúå00\\\\rho\\_{0}>0 which might be different from œÅùúå\\\\rho, and fùëìf is given in ( [4]In 2.1 Overview of Results ‚Ä£ 2 SAM: An Overview ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) for the ReLU case and in ( [13]In Theorem 2. ‚Ä£ 3.2 Kernel Regression ‚Ä£ 3 Statistical Models ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) for the kernel regression setup. Note that this can be considered as the expected value of sharpness defined by \\[ [15])\\], max‚Äñùú∫‚Äñ2‚â§œÅ0‚Å°f‚Äã(ùíò+ùú∫)‚àíf‚Äã(ùíò)subscriptsubscriptnormùú∫2subscriptùúå0ùëìùíòùú∫ùëìùíò\\\\max\\_{\\\\\\|\\\\boldsymbol{\\\\varepsilon}\\\\\\|\\_{2}\\\\leq\\\\rho\\_{0}}f(\\\\boldsymbol{w}+\\\\boldsymbol{\\\\varepsilon})-f(\\\\boldsymbol{w}) which motivates the SAM algorithm.\n\n###### Proposition 3.\n\n(1) Under the assumptions of Theorem [3]Theorem 3. ‚Ä£ 4.1 ReLU Networks ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), for k‚â•1k1k\\\\geq 1\n\n|     |     |     |\n| --- | --- | --- |\n|  | Œ∫kGD‚àíŒ∫kSAM‚â•œÅ02‚Äãdr‚àíd12+œÅ0‚Äã(‚àëi=1r(1‚àíŒ∑‚Äãdi)2‚Äãk‚Äãdi2‚Äãui2‚àí‚àëi=1r(1‚àíŒ∑‚Äãdi‚àíŒ∑‚ÄãœÅ‚Äãdi2)2‚Äãk‚Äãdi2‚Äãui2).subscriptsuperscriptùúÖGDùëòsubscriptsuperscriptùúÖSAMùëòsuperscriptsubscriptùúå02subscriptùëëùëüsubscriptùëë12subscriptùúå0superscriptsubscriptùëñ1ùëüsuperscript1ùúÇsubscriptùëëùëñ2ùëòsuperscriptsubscriptùëëùëñ2superscriptsubscriptùë¢ùëñ2superscriptsubscriptùëñ1ùëüsuperscript1ùúÇsubscriptùëëùëñùúÇùúåsuperscriptsubscriptùëëùëñ22ùëòsuperscriptsubscriptùëëùëñ2superscriptsubscriptùë¢ùëñ2\\\\kappa^{\\\\mathrm{GD}}\\_{k}-\\\\kappa^{\\\\mathrm{SAM}}\\_{k}\\\\geq\\\\rho\\_{0}^{2}\\\\frac{d\\_{r}-d\\_{1}}{2}+\\\\rho\\_{0}\\\\left(\\\\sqrt{\\\\sum\\_{i=1}^{r}(1-\\\\eta d\\_{i})^{2k}d\\_{i}^{2}u\\_{i}^{2}}-\\\\sqrt{\\\\sum\\_{i=1}^{r}(1-\\\\eta d\\_{i}-\\\\eta\\\\rho d\\_{i}^{2})^{2k}d\\_{i}^{2}u\\_{i}^{2}}\\\\right). |  |\n\n(2) Under the assumptions of Theorem [4]Theorem 4. ‚Ä£ 4.2 Kernel Regression ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), if dn<0subscriptdn0d\\_{n}<0\n\n|     |     |     |\n| --- | --- | --- |\n|  | limk‚Üí‚àûŒ∫kGD=‚àû>Œ∫kSAM‚Äã‚àÄk‚â•1.subscript‚ÜíùëòsubscriptsuperscriptùúÖGDùëòsuperscriptsubscriptùúÖùëòSAMfor-allùëò1\\\\lim\\_{k\\\\to\\\\infty}\\\\kappa^{\\\\mathrm{GD}}\\_{k}=\\\\infty>\\\\kappa\\_{k}^{\\\\mathrm{SAM}}~{}~{}\\\\forall k\\\\geq 1. |  |\n\nProposition [3]Proposition 3. ‚Ä£ 4.3 SAM solutions are flat. ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") shows that for the ReLU setup, SAM has lower sharpness compared to GD for sufficiently small œÅ0,ksubscriptùúå0ùëò\\\\rho\\_{0},k. Specially, if dr=d1subscriptùëëùëüsubscriptùëë1d\\_{r}=d\\_{1}, SAM has lower sharpness for k,œÅ0>0ùëòsubscriptùúå00k,\\\\rho\\_{0}>0. Moreover, for the indefinite kernel setup, this proposition shows that GD has unbounded sharpness, unlike SAM. This further confirms the connections between generalization and flatness observed theoretically \\[ [11])\\] and numerically \\[ [15]), [39])\\] in the literature. Moreover, this is in agreement with the previous work showing SAM leads to flatter solutions compared to GD \\[ [4]), [1]), [37]), [35]), [15])\\].",
            "citations": null
          },
          "5 Numerical Experiments": {
            "content": "We conduct various numerical experiments on linear models, kernel methods and deep neural networks to examine the theory we developed and to gain further insight into SAM. Due to space limitations, we only discuss main insights from our DNN experiments here. We use CIFAR10/100 \\[ [25])\\] data and noisy versions of CIFAR10 provided by \\[ [36])\\] to train ResNet50 network \\[ [18])\\] in our experiments here. Additional results for ResNet18 network as well as experiments on linear/kernel models can be found in Appendix [F]Appendix F Additional Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\").\n\nLarge œÅùúå\\\\rho vs small œÅùúå\\\\rho: First, we consider the case with clean (noiseless) labels, where one can expect the bias to be the dominant term. In this case, our theory would suggest taking a larger œÅùúå\\\\rho lowers the error. Moreover, our theory anticipates SAM performs specially better than (S)GD in earlier epochs where the difference in bias is even larger.\n\nWe show that these insights hold true in our experiments. Particularly, in Figure [2]Figure 2 ‚Ä£ 5 Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") \\[Two Left Panels\\] we observe that when œÅ>0ùúå0\\\\rho>0, SAM performs better than GD in almost all epochs. We see that as we increase œÅùúå\\\\rho, SAM performs quite well over the first 150 epochs. However, the gains from large œÅùúå\\\\rho tend to fade in later epochs as smaller values of œÅùúå\\\\rho get to lower bias values as well. Nevertheless, we see that in terms of accuracy, it is better to choose a larger œÅùúå\\\\rho rather than a small œÅùúå\\\\rho (the accuracy values are given in figure legends. Also see Figure [F.6]Figure F.6 ‚Ä£ F.3.2 Comparison of SGD and SAM ‚Ä£ F.3 Deep Learning Experiments ‚Ä£ Appendix F Additional Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") for more details). In case of CIFAR10, œÅ=0.1ùúå0.1\\\\rho=0.1 is the best value of œÅùúå\\\\rho in our experiments and taking œÅ=0.5ùúå0.5\\\\rho=0.5 results in a smaller loss of accuracy, compared to taking œÅ=0ùúå0\\\\rho=0 (i.e. GD). In the case of CIFAR100, œÅ=0.5ùúå0.5\\\\rho=0.5 results in better accuracy compared to œÅ=0.1ùúå0.1\\\\rho=0.1, which shows that generally, overestimating œÅùúå\\\\rho is less harmful than underestimating œÅùúå\\\\rho. This mostly agrees with theory that taking larger œÅùúå\\\\rho in noiseless settings is better, although we note that in practice, variance might not be exactly zero so large œÅùúå\\\\rho might perform slightly worse than smaller œÅùúå\\\\rho, as is the case for CIFAR10.\n\nEarly stopping in noisy settings: Next, we consider a noisy setting and show that to avoid overfitting, the training has to be stopped early, showing the assumption that the number of epochs is finite is realistic. We use two versions of noisy CIFAR10, random label 1 and worse labels from \\[ [36])\\] which we call random and worse, respectively. The random version has about 17%percent1717\\\\% noise in training labels, while worse has about 40%percent4040\\\\% noise. The validation labels for both datasets are noiseless. As we see in Figure [2]Figure 2 ‚Ä£ 5 Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\") \\[Two Right Panels\\], as the noise increases both methods tend to overfit in the later stages of training, and overfitting is stronger when noise is higher. This shows that in noisy settings training has to be stopped earlier as noise increases.\n\nPerformance under noise: As we see from Figure [2]Figure 2 ‚Ä£ 5 Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), in noisy settings the gap between SAM and GD is even larger. This can be explained as in non-convex settings, GD can have unbounded variance (cf. Theorem [4]Theorem 4. ‚Ä£ 4.2 Kernel Regression ‚Ä£ 4 Main Results ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")) which leads to worse performance of GD specially in later epochs.\n\nDecaying œÅùúå\\\\rho helps: We observe that having large œÅùúå\\\\rho helps in initial phases of training, while having a smaller œÅùúå\\\\rho might help in the later phases. Therefore, we propose to start SAM with a large value of œÅùúå\\\\rho to decrease bias and then decay œÅùúå\\\\rho over the course of algorithm to limit the increase of variance (the details are discussed in Appendix [F]Appendix F Additional Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\")). The result for this case are shown in Table [1]Table 1 ‚Ä£ 5 Numerical Experiments ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"). Full is the accuracy at the end of training (epoch 200) and Early corresponds to early stopping (epoch 120 for SGD and 50 for SAM-based methods). As can be seen, starting with larger than optimal œÅùúå\\\\rho and decaying leads to accuracy results similar or slightly better than using the optimal fixed œÅùúå\\\\rho. Interestingly, using large œÅùúå\\\\rho leads to considerably better performance if training has to be stopped early, which is often the case in practice specially for large models \\[ [19]), [5])\\] due to resource limitations.\n\n| CIFAR10 | CIFAR100 | CIFAR10-Random | CIFAR10-Worse |\n| --- | --- | --- | --- |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n\nFigure 2: Accuracy over epochs for SAM and GD with ResNet50 and different datasets. The number in the parenthesis in the legend shows the average best accuracy.Table 1: Comparison of SGD, SAM with optimal œÅùúå\\\\rho and SAM with œÅùúå\\\\rho decaying over the course of algorithm.\n\n| Dataset | Method | Full | Early |\n| --- | --- | --- | --- |\n| CIFAR10 | SGD | 95.44¬±0.06plus-or-minus95.440.0695.44\\\\pm 0.06 | 82.99¬±0.75plus-or-minus82.990.7582.99\\\\pm 0.75 |\n| SAM | 96.31¬±0.06plus-or-minus96.310.0696.31\\\\pm 0.06 | 81.43¬±2.73plus-or-minus81.432.7381.43\\\\pm 2.73 |\n| SAM-Decay | 96.42¬±0.10plus-or-minus96.420.1096.42\\\\pm 0.10 | 86.79¬±0.38plus-or-minus86.790.3886.79\\\\pm 0.38 |\n| CIFAR100 | SGD | 79.50¬±0.33plus-or-minus79.500.3379.50\\\\pm 0.33 | 58.87¬±0.62plus-or-minus58.870.6258.87\\\\pm 0.62 |\n| SAM | 82.01¬±0.09plus-or-minus82.010.0982.01\\\\pm 0.09 | 60.20¬±0.97plus-or-minus60.200.9760.20\\\\pm 0.97 |\n| SAM-Decay | 82.02¬±0.27plus-or-minus82.020.2782.02\\\\pm 0.27 | 61.92¬±1.63plus-or-minus61.921.6361.92\\\\pm 1.63 |",
            "citations": null
          },
          "6 Conclusion and Future Work": {
            "content": "We presented a direct explanation of why SAM generalizes well through\nstudying the statistical performance of SAM/GD for two classes of problems. Specifically, we showed that SAM works well for neural networks with a hidden ReLU layer if the noise is not too high. We also showed that in indefinite kernel regression, corresponding to a non-convex optimization problem, SAM can have bounded error while GD has unbounded error.\nAn interesting question is that how stochastic version of SAM would differ from the full-batch setting studied here. In Appendix [D]Appendix D Effect of Stochasticity: A Special Case ‚Ä£ On Statistical Properties of Sharpness-Aware Minimization: Provable Guarantees\"), we study a stochastic version of SAM and compare it to SGD for a special case. As we see, SAM tends to benefit from stochasticity even more, specially in high-dimensional settings. A deeper analysis of stochastic SAM is left for a future work.",
            "citations": null
          }
        },
        "abstract": "Sharpness-Aware Minimization (SAM) is a recent optimization framework aiming\nto improve the deep neural network generalization, through obtaining flatter\n(i.e. less sharp) solutions. As SAM has been numerically successful, recent\npapers have studied the theoretical aspects of the framework and have shown SAM\nsolutions are indeed flat. However, there has been limited theoretical\nexploration regarding statistical properties of SAM. In this work, we directly\nstudy the statistical performance of SAM, and present a new theoretical\nexplanation of why SAM generalizes well. To this end, we study two statistical\nproblems, neural networks with a hidden layer and kernel regression, and prove\nunder certain conditions, SAM has smaller prediction error over Gradient\nDescent (GD). Our results concern both convex and non-convex settings, and show\nthat SAM is particularly well-suited for non-convex problems. Additionally, we\nprove that in our setup, SAM solutions are less sharp as well, showing our\nresults are in agreement with the previous work. Our theoretical findings are\nvalidated using numerical experiments on numerous scenarios, including deep\nneural networks."
      },
      "bib.bib10": {
        "id": "bib.bib10",
        "citation": "Behdin et al. (2023)",
        "authors": "",
        "year": "",
        "title": "msam: Micro-batch-averaged sharpness-aware minimization.",
        "venue": "arXiv preprint arXiv:2302.09693",
        "pages": "",
        "url": "",
        "arxiv_id": "2302.09693",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Overparameterized deep neural networks (DNNs) have established themselves as a cornerstone of modern advancements in machine learning, consistently delivering state-of-the-art results across diverse domains such as image comprehension \\[ [1]), [2]), [3])\\], natural language processing (NLP) \\[ [4]), [5]), [6])\\], and recommender systems \\[ [7]), [8])\\]. The training of DNNs necessitates the minimization of complex and non-convex loss functions, entailing a multitude of minima. Intriguingly, these distinct minima can exhibit varying degrees of generalizability when faced with previously unseen data \\[ [9]), [10])\\]. Consequently, the selection of an optimization framework capable of identifying minima that contribute to robust generalization performance assumes paramount significance. A broad spectrum of optimization algorithms has been developed to cater to diverse domains, including methodologies like stochastic gradient descent (SGD), heavy-ball momentum \\[ [11])\\], Adam \\[ [12])\\], and LAMB \\[ [13])\\], among others. When complemented with appropriate regularization techniques, these approaches play a pivotal role in yielding robust generalization capabilities.\nThe ability to perform implicit regularization of SGD-like methods has also garnered considerable attention in recent years  \\[ [14]), [15])\\].\n\nIn recent times, a substantial body of work has been dedicated to exploring the relationship between the geometry of the loss landscape and its impact on generalization \\[ [9]), [16]), [17]), [18]), [19]), [20])\\]. The novel Sharpness-Aware Minimization (SAM) algorithm \\[ [21])\\] capitalizes on this interplay by introducing adjustments to the loss function that enable the optimization process to gravitate towards solutions characterized by increased flatness during training, resulting in enhanced generalization across a broad spectrum of tasks and domains. Specifically, this approach transforms the structure of the loss function to account for the maximal value within a localized vicinity surrounding the current parameters within the loss landscape. The gradient descent step within this framework involves a composite of two distinct phases, the first applying an adversarial perturbation. Conceptually, SAM gauges flatness by analyzing gradients in an adversarial direction, guiding a descent strategy based on the sharpness at its worst case.\n\nUnlike standard gradient descent (GD), the compositional nature of the SAM gradient computation implies that further splitting the mini-batch into disjoint shards (micro-batches) and averaging the updates will not lead to the same gradient. This was noted in Foret et al. \\[ [21])\\], where they introduced this notion as mSAM, with mùëöm being the number of micro-batches of a single mini-batch. By splitting into disjoint shards, mSAM leverages several adversarial directions, which may more robustly represent flatness.\nIn this work, we build the corresponding theoretical framework for improved flatness of mSAM that utilizes and extends previous techniques. Our extensive experimental results confirm these insights on a wide range of tasks. While the focus will particularly be on mSAM, our techniques apply more generally. They further imply that splitting the mini-batch for compositional gradient computations, utilized in other variants of SAM, may also lead to an improved flatness of minima. Such observations invariably encourage further study of splitting the mini-batch into shards whenever the gradient update follows a non-linear aggregation.\n\n#### Related Work:\n\nAlthough the sharpness of the loss landscape can be calculated using several different measures, such as the largest eigenvalue \\[ [22])\\], trace \\[ [23])\\], or Frobenius norm \\[ [18])\\] of the loss Hessian, many of these metrics prove to be computationally demanding for practical purposes. Given the established correlation between the sharpness of the loss landscape and generalization performance \\[ [9])\\], the central concept underlying the SAM algorithm \\[ [21])\\] revolves around guiding the network to explore regions where the worst-case loss value within a local neighbourhood remains reasonably moderate. This pragmatic approximation of sharpness offers a computationally manageable alternative, distinct from the sharpness metrics mentioned before. The emergence of SAM has sparked a wave of interest in sharpness-aware training, culminating in the development of several variants \\[ [24]), [25]), [26]), [27]), [28])\\].\n\nIn this paper, we focus on the effect of further splitting the mini-batch into shards for gradient computation of sharpness-aware minimization methods. While our theoretical results on flatness will generalize, we primarily consider mSAM, which is this technique applied to the original SAM algorithm. In Foret et al. \\[ [21])\\], mSAM is used implicitly to reduce the computational cost of SAM by avoiding synchronization across multiple GPUs (referred to as ‚Äúaccelerators‚Äù hereinafter). Recently, it has been observed via limited experimentation that mSAM results in better generalization performance \\[ [21]), [29]), [30])\\]. Andriushchenko and Flammarion \\[ [31])\\] present mathematical expressions for mSAM, but their analysis is primarily focused on a particular version of mSAM (see Section [2]Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") for more details). The experiments are also limited to image classification tasks on small architectures. This paper provides a more general theoretical framework that can also be extended to other sharpness-aware minimization variants.\n\nA cluster of contemporary research papers centered on the stability analysis of GD and SGD-like algorithms unveil that they function in a regime teetering on the edge of stability \\[ [15]), [32]), [33]), [14])\\]. This precarious balance is characterized by the maximum eigenvalue of the Hessian matrix associated with the training loss converging near the threshold of 2/Œ∑2ùúÇ2/\\\\eta, where Œ∑ùúÇ\\\\eta denotes the learning rate. These findings subsequently offer a foundation upon which upper bounds on the maximum eigenvalue of the Hessian can be formulated (further elaboration is provided in Section [3]Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")).\n\n#### Our Contributions:\n\nOur contributions in this paper can be summarized as follows:\n\n- ‚Ä¢\n\n\nWe demonstrate how mSAM improves flatness over SAM, which in turn guarantees better flatness than SGD. To that end, we leverage theoretical ideas about the implicit generalization ability of SGD-like methods and recent work related to the stability analysis of full-batch GD and SGD.\n\n- ‚Ä¢\n\n\nStarting from the mathematical description of mSAM, we present an explicit and flexible implementation of mSAM that does not rely on accelerator synchronization and is compatible with any single/multi-accelerator setup.\n\n- ‚Ä¢\n\n\nWe conduct extensive experiments on a wide variety of computer vision and NLP tasks, leveraging architectures like Convolutional Neural Networks (CNNs) \\[ [1]), [2])\\] and Transformers \\[ [4])\\], where mSAM consistently outperforms SAM and vanilla training strategy.",
            "citations": null
          },
          "2 Algorithm": {
            "content": "In this section, we rigorously introduce mSAM, based on the SAM algorithm that aims to obtain flat solutions to the empirical loss function. In particular, SAM tries to find a solution that minimizes the worst-case loss in a ball around the solution. Mathematically, let ùíØ={(ùê±i,yi),i‚àà\\[n\\]:ùê±i‚ààùí≥,yi‚ààùí¥}ùíØconditional-setsubscriptùê±ùëñsubscriptùë¶ùëñùëñdelimited-\\[\\]ùëõformulae-sequencesubscriptùê±ùëñùí≥subscriptùë¶ùëñùí¥\\\\mathcal{T}=\\\\{(\\\\mathbf{x}\\_{i},y\\_{i}),i\\\\in\\[n\\]:\\\\mathbf{x}\\_{i}\\\\in\\\\mathcal{X},y\\_{i}\\\\in\\\\mathcal{Y}\\\\} be a training dataset of nùëõn samples, where ùí≥ùí≥\\\\mathcal{X} is the set of features, ùí¥ùí¥\\\\mathcal{Y} is the set of outcomes and \\[n\\]={1,‚Ä¶,n}delimited-\\[\\]ùëõ1‚Ä¶ùëõ\\[n\\]=\\\\{1,\\\\ldots,n\\\\}. Moreover, let ‚Ñì:‚Ñùd√óùí≥√óùí¥‚Ü¶‚Ñù:‚Ñìmaps-tosuperscript‚Ñùùëëùí≥ùí¥‚Ñù\\\\ell:\\\\mathbb{R}^{d}\\\\times\\\\mathcal{X}\\\\times\\\\mathcal{Y}\\\\mapsto\\\\mathbb{R} be a differentiable loss function, where dùëëd is the number of model parameters. Let ùíÆ‚äÇ\\[n\\]ùíÆdelimited-\\[\\]ùëõ\\\\mathcal{S}\\\\subset\\[n\\] be a randomly chosen mini-batch of size BùêµB.\nThe empirical loss over the mini-batch ùíÆùíÆ\\\\mathcal{S} is defined as ‚ÑíùíÆ‚Äã(ùê∞)=‚àëi‚ààùíÆ‚Ñì‚Äã(ùê∞;ùê±i,yi)/Bsubscript‚ÑíùíÆùê∞subscriptùëñùíÆ‚Ñìùê∞subscriptùê±ùëñsubscriptùë¶ùëñùêµ\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w})=\\\\sum\\_{i\\\\in\\\\mathcal{S}}\\\\ell(\\\\mathbf{w};\\\\mathbf{x}\\_{i},y\\_{i})/B, where wùë§w parameterizes the neural network. With this notation in place, the SAM loss function is defined as \\[ [21])\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíùíÆS‚ÄãA‚ÄãM‚Äã(ùê∞)=max‚Äñœµ‚Äñp‚â§œÅ‚Å°‚ÑíùíÆ‚Äã(ùê∞+œµ)subscriptsuperscript‚ÑíùëÜùê¥ùëÄùíÆùê∞subscriptsubscriptnormitalic-œµùëùùúåsubscript‚ÑíùíÆùê∞italic-œµ\\\\mathcal{L}^{SAM}\\_{\\\\mathcal{S}}(\\\\mathbf{w})=\\\\max\\_{\\\\\\|\\\\mathbf{\\\\epsilon}\\\\\\|\\_{p}\\\\leq\\\\rho}\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w}+\\\\mathbf{\\\\epsilon}) |  | (1) |\n\nfor some p‚â•1ùëù1p\\\\geq 1. In this work, we use p=2ùëù2p=2. In practice, however, the maximization step in ( [1]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) cannot be done in closed form. Hence, authors in \\[ [21])\\] use a first-order approximation to ‚ÑíSsubscript‚ÑíùëÜ\\\\mathcal{L}\\_{S} to simplify ( [1]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíùíÆS‚ÄãA‚ÄãM‚Äã(ùê∞)‚âàmax‚Äñœµ‚Äñ2‚â§œÅ‚Å°‚ÑíùíÆ‚Äã(ùê∞)+œµT‚Äã‚àá‚ÑíS‚Äã(ùê∞).subscriptsuperscript‚ÑíùëÜùê¥ùëÄùíÆùê∞subscriptsubscriptnormitalic-œµ2ùúåsubscript‚ÑíùíÆùê∞superscriptitalic-œµùëá‚àásubscript‚ÑíùëÜùê∞\\\\mathcal{L}^{SAM}\\_{\\\\mathcal{S}}(\\\\mathbf{w})\\\\approx\\\\max\\_{\\\\\\|\\\\mathbf{\\\\epsilon}\\\\\\|\\_{2}\\\\leq\\\\rho}\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w})+\\\\mathbf{\\\\epsilon}^{T}\\\\nabla\\\\mathcal{L}\\_{S}(\\\\mathbf{w}). |  | (2) |\n\nIt is easy to see that the maximum in Problem ( [2]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) is achieved for\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œµ^=œÅ‚Äã‚àá‚ÑíùíÆ‚Äã(ùê∞)/‚Äñ‚àá‚ÑíùíÆ‚Äã(ùê∞)‚Äñ2.^italic-œµùúå‚àásubscript‚ÑíùíÆùê∞subscriptnorm‚àásubscript‚ÑíùíÆùê∞2\\\\hat{\\\\mathbf{\\\\epsilon}}=\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w})/\\\\\\|\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w})\\\\\\|\\_{2}. |  | (3) |\n\nAs a result, ‚ÑíùíÆS‚ÄãA‚ÄãM‚âà‚ÑíùíÆ‚Äã(w+œµ^)superscriptsubscript‚ÑíùíÆùëÜùê¥ùëÄsubscript‚ÑíùíÆùë§^italic-œµ\\\\mathcal{L}\\_{\\\\mathcal{S}}^{SAM}\\\\approx\\\\mathcal{L}\\_{\\\\mathcal{S}}(w+\\\\hat{\\\\epsilon}). This leads to the gradient\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚àá‚ÑíùíÆS‚ÄãA‚ÄãM‚Äã(ùê∞)‚âà‚àáùê∞\\[‚ÑíùíÆ‚Äã(ùê∞+œµ^)\\]=‚àÇ(ùê∞+œµ^)‚àÇùê∞‚Äã‚àá‚ÑíùíÆ‚Äã(ùê∞+œµ^).‚àásuperscriptsubscript‚ÑíùíÆùëÜùê¥ùëÄùê∞subscript‚àáùê∞subscript‚ÑíùíÆùê∞^italic-œµùê∞^italic-œµùê∞‚àásubscript‚ÑíùíÆùê∞^italic-œµ\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}^{SAM}(\\\\mathbf{w})\\\\approx\\\\nabla\\_{\\\\mathbf{w}}\\\\left\\[\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w}+\\\\hat{\\\\mathbf{\\\\epsilon}})\\\\right\\]=\\\\frac{\\\\partial(\\\\mathbf{w}+\\\\hat{\\\\mathbf{\\\\epsilon}})}{\\\\partial\\\\mathbf{w}}\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w}+\\\\hat{\\\\mathbf{\\\\epsilon}}). |  |\n\nHowever, calculating ‚àÇ(w+œµ^)/‚àÇwùë§^italic-œµùë§\\\\partial(w+\\\\hat{\\\\epsilon})/\\\\partial w involves second-order terms that require access to Hessian, which can be computationally inefficient in practice. Thus, by ignoring the second-order terms in the above approximation, the gradient of the SAM loss can be approximated as \\[ [21])\\]:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àá‚ÑíùíÆS‚ÄãA‚ÄãM‚Äã(ùê∞)‚âà‚àá‚ÑíùíÆ‚Äã(ùê∞+œÅ‚Äã‚àá‚ÑíùíÆ‚Äã(ùê∞)/‚Äñ‚àá‚ÑíùíÆ‚Äã(ùê∞)‚Äñ2)‚àásubscriptsuperscript‚ÑíùëÜùê¥ùëÄùíÆùê∞‚àásubscript‚ÑíùíÆùê∞ùúå‚àásubscript‚ÑíùíÆùê∞subscriptnorm‚àásubscript‚ÑíùíÆùê∞2\\\\nabla\\\\mathcal{L}^{SAM}\\_{\\\\mathcal{S}}(\\\\mathbf{w})\\\\approx\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w}+\\\\rho\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w})/\\\\\\|\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w})\\\\\\|\\_{2}) |  | (4) |\n\nwhich is used in the SAM algorithm (for example, in conjunction with SGD). We refer to Foret et al. \\[ [21])\\] for more details and intuitions about SAM. We call the inner gradient calculations on the right-hand side of ( [4]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) as the SAM ascent step and the outer gradient calculations as the gradient step. mSAM \\[ [21])\\] is a variation of the SAM algorithm. In general, for mSAM, a mini-batch of data ùíÆùíÆ\\\\mathcal{S} is further divided into mùëöm smaller disjoint shards (aka ‚Äúmicro-batches‚Äù), such as ùíÆ1,‚ãØ,ùíÆmsubscriptùíÆ1‚ãØsubscriptùíÆùëö\\\\mathcal{S}\\_{1},\\\\cdots,\\\\mathcal{S}\\_{m} where ‚à™j=1mùíÆj=ùíÆsuperscriptsubscriptùëó1ùëösubscriptùíÆùëóùíÆ\\\\cup\\_{j=1}^{m}\\\\mathcal{S}\\_{j}=\\\\mathcal{S}. For simplicity, we assume \\|ùíÆ1\\|=‚ãØ=\\|ùíÆm\\|=\\|ùíÆ\\|/msubscriptùíÆ1‚ãØsubscriptùíÆùëöùíÆùëö\\|\\\\mathcal{S}\\_{1}\\|=\\\\cdots=\\|\\\\mathcal{S}\\_{m}\\|=\\|\\\\mathcal{S}\\|/m although such an assumption is not necessary in general. The mSAM loss is a variation of the SAM loss, defined as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíùíÆm‚ÄãS‚ÄãA‚ÄãM‚Äã(ùê∞)=1m‚Äã‚àëj=1mmax‚Äñœµ(j)‚Äñ2‚â§œÅ‚Å°‚ÑíùíÆj‚Äã(ùê∞+œµ(j)).subscriptsuperscript‚ÑíùëöùëÜùê¥ùëÄùíÆùê∞1ùëösuperscriptsubscriptùëó1ùëösubscriptsubscriptnormsuperscriptitalic-œµùëó2ùúåsubscript‚ÑísubscriptùíÆùëóùê∞superscriptitalic-œµùëó\\\\mathcal{L}^{mSAM}\\_{\\\\mathcal{S}}(\\\\mathbf{w})=\\\\frac{1}{m}\\\\sum\\_{j=1}^{m}\\\\max\\_{\\\\\\|\\\\mathbf{\\\\epsilon}^{(j)}\\\\\\|\\_{2}\\\\leq\\\\rho}\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{j}}(\\\\mathbf{w}+\\\\mathbf{\\\\epsilon}^{(j)}). |  | (5) |\n\nIntuitively, mSAM is a version of SAM where the ascent step (or the weight perturbation) of SAM is done independently on each micro-batch using different œµ(j)superscriptitalic-œµùëó\\\\epsilon^{(j)}, instead of using an average perturbation such as œµitalic-œµ\\\\mathbf{\\\\epsilon} for all micro-batches. The mSAM gradient can thereby be derived as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àá‚ÑíùíÆm‚ÄãS‚ÄãA‚ÄãM‚Äã(ùê∞)=1m‚Äã‚àëj=1m‚àá‚ÑíùíÆj‚Äã(ùê∞+œÅ‚Äã‚àá‚ÑíùíÆj‚Äã(ùê∞)‚Äñ‚àá‚ÑíùíÆj‚Äã(ùê∞)‚Äñ2),‚àásubscriptsuperscript‚ÑíùëöùëÜùê¥ùëÄùíÆùê∞1ùëösuperscriptsubscriptùëó1ùëö‚àásubscript‚ÑísubscriptùíÆùëóùê∞ùúå‚àásubscript‚ÑísubscriptùíÆùëóùê∞subscriptnorm‚àásubscript‚ÑísubscriptùíÆùëóùê∞2\\\\nabla\\\\mathcal{L}^{mSAM}\\_{\\\\mathcal{S}}(\\\\mathbf{w})=\\\\frac{1}{m}\\\\sum\\_{j=1}^{m}\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{j}}(\\\\mathbf{w}+\\\\rho\\\\frac{\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{j}}(\\\\mathbf{w})}{\\\\\\|\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{j}}(\\\\mathbf{w})\\\\\\|\\_{2}}), |  | (6) |\n\nwhere ( [6]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) is a first-order approximation to the gradient of ( [5]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")). We also note that the loss ( [5]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) is related to the mSAM definition of Andriushchenko and Flammarion \\[ [31])\\]. See Table [1]Table 1 ‚Ä£ 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") for a side-by-side comparison of SAM and mSAM and their different implementations.\n\n|  | SAM | mSAM |\n| Loss function | max‚Äñœµ‚Äñ2‚â§œÅ‚Äã‚àëi=1m‚ÑíùíÆi‚Äã(ùê∞+œµ)/msubscriptsubscriptnormitalic-œµ2ùúåsuperscriptsubscriptùëñ1ùëösubscript‚ÑísubscriptùíÆùëñùê∞italic-œµùëö\\\\max\\_{\\\\\\|\\\\mathbf{\\\\epsilon}\\\\\\|\\_{2}\\\\leq\\\\rho}\\\\sum\\_{i=1}^{m}\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{i}}(\\\\mathbf{w}+\\\\mathbf{\\\\epsilon})/m | ‚àëi=1mmax‚Äñœµ(i)‚Äñ2‚â§œÅ‚Å°‚ÑíùíÆi‚Äã(ùê∞+œµ(i))/msuperscriptsubscriptùëñ1ùëösubscriptsubscriptnormsuperscriptitalic-œµùëñ2ùúåsubscript‚ÑísubscriptùíÆùëñùê∞superscriptitalic-œµùëñùëö\\\\sum\\_{i=1}^{m}\\\\max\\_{\\\\\\|\\\\mathbf{\\\\epsilon}^{(i)}\\\\\\|\\_{2}\\\\leq\\\\rho}\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{i}}(\\\\mathbf{w}+\\\\mathbf{\\\\epsilon}^{(i)})/m |\n| Ascent step | œµ^‚àùœÅ‚Äã‚àëi=1m‚àá‚ÑíùíÆi‚Äã(ùê∞)/mproportional-to^italic-œµùúåsuperscriptsubscriptùëñ1ùëö‚àásubscript‚ÑísubscriptùíÆùëñùê∞ùëö\\\\hat{\\\\mathbf{\\\\epsilon}}\\\\propto\\\\rho{\\\\sum\\_{i=1}^{m}\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{i}}(\\\\mathbf{w})}/m | œµ^(i)‚àùœÅ‚Äã‚àá‚ÑíùíÆi‚Äã(ùê∞),i‚àà\\[m\\]formulae-sequenceproportional-tosuperscript^italic-œµùëñùúå‚àásubscript‚ÑísubscriptùíÆùëñùê∞ùëñdelimited-\\[\\]ùëö\\\\hat{\\\\mathbf{\\\\epsilon}}^{(i)}\\\\propto\\\\rho{\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{i}}(\\\\mathbf{w})},~{}i\\\\in\\[m\\] |\n| Gradient | g=‚àëi=1m‚àá‚ÑíùíÆi‚Äã(ùê∞+œµ^)/mùëîsuperscriptsubscriptùëñ1ùëö‚àásubscript‚ÑísubscriptùíÆùëñùê∞^italic-œµùëög=\\\\sum\\_{i=1}^{m}\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{i}}(\\\\mathbf{w}+\\\\hat{\\\\mathbf{\\\\epsilon}})/m | g=‚àëi=1m‚àá‚ÑíùíÆi‚Äã(ùê∞+œµ^(i))/mùëîsuperscriptsubscriptùëñ1ùëö‚àásubscript‚ÑísubscriptùíÆùëñùê∞superscript^italic-œµùëñùëög=\\\\sum\\_{i=1}^{m}\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}\\_{i}}(\\\\mathbf{w}+\\\\hat{\\\\mathbf{\\\\epsilon}}^{(i)})/m |\n| Implementations | \\[FKMN\\] | \\[FKMN\\] | \\[AF\\] | Ours |\n| Possible mùëöm values | - | ##\\\\# of accelerators | flexible | flexible |\n| Processor support | Multiple | Multiple | Single | Multiple |\n\nTable 1: Comparison of SAM with Different mSAM Implementations. \\[FKMN\\] refers to Foret et al. \\[ [21])\\] and \\[AF\\] refers to Andriushchenko and Flammarion \\[ [31])\\].\n\nAn important distinction between our work and prior work is that we treat mùëöm as a model hyper-parameter to improve generalization. In particular, in mSAM implementation of Foret et al. \\[ [21])\\], the value of mùëöm is fixed to the number of hardware accelerators, micro-batch iùëñi is the part of the data that is loaded onto accelerator iùëñi, and each accelerator uses a separate perturbation, simulating the effect of mSAM. With this implementation, mùëöm is an artefact of the hardware setup. On the other hand, the analysis of Andriushchenko and Flammarion \\[ [31])\\] mostly concerns the value m=\\|ùíÆ\\|:=BùëöùíÆassignùêµm=\\|\\\\mathcal{S}\\|:=B where ùíÆùíÆ\\\\mathcal{S} is the mini-batch under consideration, and we denote its size as BùêµB for ease of use in latter sections. In contrast, we consider a wide range of values for mùëöm in our experiments. This offers the flexibility to choose an appropriate value of mùëöm that leads to a better generalization performance. Moreover, our implementation supports any single/multi-accelerator setup and allows the user to set an appropriate value of mùëöm.",
            "citations": null
          },
          "3 Justification of mSAM": {
            "content": "Over-parameterized DNNs have a continuum (a manifold of large size) of minima, ‚Ñ≥‚Ñ≥{\\\\cal{M}} due to the number of parameters being much larger than the number of training examples. An intriguing property of DNNs is that different minima in ‚Ñ≥‚Ñ≥{\\\\cal{M}} have different sharpness values. When trained using SGD with a large learning rate and small batch size, these DNNs have an implicit ability to move towards minima which are flat - or equivalently, less sharp, with sharpness expressed as the spectral norm of the Hessian111Sharpness can also be quantified in other ways. See \\[ [22]), [18]), [14]), [32])\\] for some details.\\[ [22]), [18])\\]. Jastrzebski et al. \\[ [14])\\], Cohen et al. \\[ [15])\\] establish a theoretical framework to explain this phenomenon with strong empirical backing. Accordingly, this approach is followed by most recent theoretical papers on analyzing the properties of GD, SGD, and SAM \\[ [15]), [32]), [34]), [35]), [36])\\]. In this section, we review a generalized version of such analyses in SGD and extend it to SAM and mSAM. This extension of the well-studied framework implies that SAM improves flatness over SAM, and mSAM improves flatness even further than SAM. The proofs of all results in this section are given in appendix [A]Appendix A Proofs of the results in section 3 ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\n\n### 3.1 Analysis of Linear Stability\n\nOur analysis will focus on the general minibatch stochastic dynamic update of the following form:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùê∞(t+1)=ùê∞t‚àíŒ∑‚ÄãùêùùíÆ‚Äã(ùê∞t)subscriptùê∞ùë°1subscriptùê∞ùë°ùúÇsubscriptùêùùíÆsubscriptùê∞ùë°\\\\mathbf{w}\\_{(t+1)}=\\\\mathbf{w}\\_{t}-\\\\eta\\\\;\\\\mathbf{d}\\_{\\\\mathcal{S}}(\\\\mathbf{w}\\_{t}) |  | (7) |\n\nThe trio of methodologies under scrutiny ‚Äî SGD, SAM and mSAM ‚Äî all derive from the common foundation of ‚àá‚ÑíùíÆ‚àásubscript‚ÑíùíÆ\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}, yet they adopt distinct formulations for ùêùùíÆsubscriptùêùùíÆ\\\\mathbf{d}\\_{\\\\mathcal{S}}. Given their shared objective to minimize the training loss, each minimum within the continuum ‚Ñ≥‚Ñ≥\\\\mathcal{M} can be posited as an equilibrium point of the dynamic system ( [7]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")). Let ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*} represent a minimum within this continuum. It is anticipated that the stability attributes of trajectories surrounding ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*} will depend on hyperparameters, specifically the learning rate Œ∑ùúÇ\\\\eta and the mini-batch size BùêµB. Furthermore, due to inherent differences in their dynamics, the three methods mentioned above will manifest varying stability characteristics even with identical values of Œ∑ùúÇ\\\\eta and BùêµB. Establishing these properties hinges upon an extension of an approach to stability introduced by Wu et al. \\[ [22])\\].\n\nIn particular, Wu et al. \\[ [22])\\] use a linear approximation of the gradient (equivalently, a quadratic approximation of the loss) around ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àá‚Ñíi‚Äã(ùê∞)‚âàùêái‚Äã(ùê∞‚àó)‚Äã(ùê∞‚àíùê∞‚àó),‚àásubscript‚Ñíùëñùê∞subscriptùêáùëñsuperscriptùê∞ùê∞superscriptùê∞\\\\nabla\\\\mathcal{L}\\_{i}(\\\\mathbf{w})\\\\approx\\\\mathbf{H}\\_{i}(\\\\mathbf{w}^{\\*})(\\\\mathbf{w}-\\\\mathbf{w}^{\\*}), |  | (8) |\n\nwhere the subscript iùëñi corresponds to the ithsuperscriptùëñthi^{\\\\text{th}} training example.\nFor the sake of simplicity in notation, and without sacrificing generality, we assume that ùê∞‚àó=ùüésuperscriptùê∞0\\\\mathbf{w}^{\\*}=\\\\mathbf{0}. Incorporating the approximation ( [8]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) into the construction of ùêùùêù\\\\mathbf{d} as outlined in ( [7]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) yields a reformulation of the following manner:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùê∞(t+1)=(ùêà‚àíŒ∑‚ÄãùêâùíÆ‚Äã(ùê∞‚àó))‚Äãùê∞tsubscriptùê∞ùë°1ùêàùúÇsubscriptùêâùíÆsuperscriptùê∞subscriptùê∞ùë°\\\\mathbf{w}\\_{(t+1)}=(\\\\mathbf{I}-\\\\eta\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}))\\\\;\\\\mathbf{w}\\_{t} |  | (9) |\n\nThe comprehensive derivation of ùêâùíÆ‚Äã(ùê∞‚àó)subscriptùêâùíÆsuperscriptùê∞\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}) for all three methods are presented in section [3.2]Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"), with further elaboration available in appendix [A]Appendix A Proofs of the results in section 3 ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\nWe assume that ùêâùíÆ‚Äã(ùê∞‚àó)subscriptùêâùíÆsuperscriptùê∞\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}) is symmetric and positive semi-definite (PSD). The corresponding stability concept as outlined by Wu et al. \\[ [22])\\] is articulated by examining the following expression:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | IE‚Äã‚Äñùê∞(t+1)‚Äñ2=ùê∞tT‚ÄãIE‚Äã\\[(ùêà‚àíŒ∑‚ÄãùêâùíÆ‚Äã(ùê∞‚àó))2\\]‚Äãùê∞tIEsuperscriptnormsubscriptùê∞ùë°12superscriptsubscriptùê∞ùë°ùëáIEdelimited-\\[\\]superscriptùêàùúÇsubscriptùêâùíÆsuperscriptùê∞2subscriptùê∞ùë°{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\\\\\|\\\\mathbf{w}\\_{(t+1)}\\\\\\|^{2}=\\\\mathbf{w}\\_{t}^{T}{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{I}-\\\\eta\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}))^{2}\\]\\\\;\\\\mathbf{w}\\_{t} |  | (10) |\n\nTo ensure that IE‚Äã‚Äñùê∞(t+1)‚Äñ2‚â§‚Äñùê∞t‚Äñ2‚Äã‚àÄùê∞tIEsuperscriptnormsubscriptùê∞ùë°12superscriptnormsubscriptùê∞ùë°2for-allsubscriptùê∞ùë°{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\\\\\|\\\\mathbf{w}\\_{(t+1)}\\\\\\|^{2}\\\\leq\\\\\\|\\\\mathbf{w}\\_{t}\\\\\\|^{2}\\\\;\\\\forall\\\\mathbf{w}\\_{t}, we must have Œª1‚Äã(IE‚Äã\\[(ùêà‚àíŒ∑‚ÄãùêâùíÆ‚Äã(ùê∞‚àó))2\\])‚â§1subscriptùúÜ1IEdelimited-\\[\\]superscriptùêàùúÇsubscriptùêâùíÆsuperscriptùê∞21\\\\lambda\\_{1}({\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{I}-\\\\eta\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}))^{2}\\])\\\\leq 1, where Œª1‚Äã(ùêÄ)subscriptùúÜ1ùêÄ\\\\lambda\\_{1}(\\\\mathbf{A}) is the spectral norm of matrix ùêÄùêÄ\\\\mathbf{A}.\n\n###### Lemma 3.1.\n\nIE‚Äã\\[(ùêà‚àíŒ∑‚ÄãùêâùíÆ‚Äã(ùê∞‚àó))2\\]=(ùêà‚àíŒ∑‚Äãùêâ‚àó)2+Œ∑2‚Äãùö∫IEdelimited-\\[\\]superscriptùêàùúÇsubscriptùêâùíÆsuperscriptùê∞2superscriptùêàùúÇsuperscriptùêâ2superscriptùúÇ2ùö∫{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{I}-\\\\eta\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}))^{2}\\]=(\\\\mathbf{I}-\\\\eta\\\\mathbf{J}^{\\*})^{2}+\\\\eta^{2}\\\\mathbf{\\\\Sigma}, where ùö∫=IE‚Äã\\[(ùêâùíÆ‚Äã(ùê∞‚àó)‚àíùêâ‚àó)2\\]ùö∫IEdelimited-\\[\\]superscriptsubscriptùêâùíÆsuperscriptùê∞superscriptùêâ2\\\\mathbf{\\\\Sigma}={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*})-\\\\mathbf{J}^{\\*})^{2}\\] and ùêâ‚àó=IE‚Äã\\[ùêâùíÆ‚Äã(ùê∞‚àó)\\]superscriptùêâIEdelimited-\\[\\]subscriptùêâùíÆsuperscriptùê∞\\\\mathbf{J}^{\\*}={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[\\\\mathbf{J}\\_{\\\\mathcal{S}}(\\\\mathbf{w}^{\\*})\\].\n\nTherefore, stability holds iff\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œª1‚Äã((ùêà‚àíŒ∑‚Äãùêâ‚àó)2+Œ∑2‚Äãùö∫)‚â§1subscriptùúÜ1superscriptùêàùúÇsuperscriptùêâ2superscriptùúÇ2ùö∫1\\\\lambda\\_{1}((\\\\mathbf{I}-\\\\eta\\\\mathbf{J}^{\\*})^{2}+\\\\eta^{2}\\\\mathbf{\\\\Sigma})\\\\leq 1 |  | (11) |\n\nFor the full batch case, ùö∫=ùüéùö∫0\\\\mathbf{\\\\Sigma}=\\\\mathbf{0}, rendering the verification of\n( [11]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) straightforward (see Lemma 3.2 below). However, for the mini-batch case, due to the complexity of analyzing ( [11]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")), Wu et al. \\[ [22])\\] opt to substitute the stability evaluation, ( [11]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")), with the following necessary condition:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | S1:Œª1‚Äã((ùêà‚àíŒ∑‚Äãùêâ‚àó)2)‚â§1‚Äã and ‚ÄãS2:Œ∑2‚ÄãŒª1‚Äã(ùö∫)‚â§1,:subscriptùëÜ1subscriptùúÜ1superscriptùêàùúÇsuperscriptùêâ21 and subscriptùëÜ2:superscriptùúÇ2subscriptùúÜ1ùö∫1S\\_{1}:\\\\lambda\\_{1}((\\\\mathbf{I}-\\\\eta\\\\mathbf{J}^{\\*})^{2})\\\\leq 1\\\\mbox{ and }S\\_{2}:\\\\eta^{2}\\\\lambda\\_{1}(\\\\mathbf{\\\\Sigma})\\\\leq 1, |  | (12) |\n\nwhich we consider hereafter to define stability. Since Œª1‚Äã(ùêÄ+ùêÅ)‚â•max‚Å°{Œª1‚Äã(ùêÄ),Œª1‚Äã(ùêÅ)}subscriptùúÜ1ùêÄùêÅsubscriptùúÜ1ùêÄsubscriptùúÜ1ùêÅ\\\\lambda\\_{1}(\\\\mathbf{A}+\\\\mathbf{B})\\\\geq\\\\max\\\\{\\\\lambda\\_{1}(\\\\mathbf{A}),\\\\lambda\\_{1}(\\\\mathbf{B})\\\\} holds true for any pair of symmetric PSD matrices ùêÄùêÄ\\\\mathbf{A} and ùêÅùêÅ\\\\mathbf{B}, the condition stated in ( [12]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) can be considered as a relaxation of the condition in ( [11]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")).\n\n###### Lemma 3.2.\n\nS1subscriptùëÜ1S\\_{1} is equivalent to checking if Œ∑‚ÄãŒª1‚Äã(ùêâ‚àó)‚â§2ùúÇsubscriptùúÜ1superscriptùêâ2\\\\eta\\\\lambda\\_{1}(\\\\mathbf{J}^{\\*})\\\\leq 2.\n\nThe following result is a corollary of ( [12]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) and Lemma 3.2, and it plays a pivotal role in substantiating the principal conclusions of subsection [3.2]Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\n\n###### Lemma 3.3.\n\nThe stability condition of ( [12]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) will be violated (i.e., the equilibrium point, ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*} is considered to be unstable for ( [9]In 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"))) iff\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œ∑‚ÄãŒª1‚Äã(ùêâ‚àó)>2‚Äã or ‚ÄãŒ∑2‚ÄãŒª1‚Äã(ùö∫)>1.ùúÇsubscriptùúÜ1superscriptùêâ2 or superscriptùúÇ2subscriptùúÜ1ùö∫1\\\\eta\\\\lambda\\_{1}(\\\\mathbf{J}^{\\*})>2\\\\mbox{ or }\\\\eta^{2}\\\\lambda\\_{1}(\\\\mathbf{\\\\Sigma})>1. |  | (13) |\n\nSeveral previous works \\[ [14]), [37]), [18]), [38])\\] empirically demonstrate and use an alignment assumption between ùêâ‚àósuperscriptùêâ\\\\mathbf{J}^{\\*} and ùö∫ùö∫\\\\mathbf{\\\\Sigma}. We make a similar assumption as given below:\n\n###### Assumption 3.1.\n\nùêâ‚àó=Œ≤‚Äãùö∫superscriptùêâùõΩùö∫\\\\mathbf{J}^{\\*}=\\\\beta\\\\mathbf{\\\\Sigma}, where Œ≤>0ùõΩ0\\\\beta>0 is a constant that depends on hyper-parameters, BùêµB and nùëõn.\n\nJastrzebski et al. \\[ [14])\\] also point out that Œ≤ùõΩ\\\\beta depends on BùêµB and the number of training examples only. Given assumption 3.1, the conditions for stability, instability and edge (boundary) can be written more simply as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Stability Condition: ‚ÄãŒ±‚ÄãŒª1‚Äã(ùêâ‚àó)‚â§1Stability Condition: ùõºsubscriptùúÜ1superscriptùêâ1\\\\displaystyle\\\\mbox{Stability Condition: }\\\\alpha\\\\lambda\\_{1}(\\\\mathbf{J}^{\\*})\\\\leq 1 |  | (14) |\n|  | Instability Condition: ‚ÄãŒ±‚ÄãŒª1‚Äã(ùêâ‚àó)>1Instability Condition: ùõºsubscriptùúÜ1superscriptùêâ1\\\\displaystyle\\\\mbox{Instability Condition: }\\\\alpha\\\\lambda\\_{1}(\\\\mathbf{J}^{\\*})>1 |  | (15) |\n|  | Edge of Stability: ‚ÄãŒ±‚ÄãŒª1‚Äã(ùêâ‚àó)=1Edge of Stability: ùõºsubscriptùúÜ1superscriptùêâ1\\\\displaystyle\\\\mbox{Edge of Stability: }\\\\alpha\\\\lambda\\_{1}(\\\\mathbf{J}^{\\*})=1 |  | (16) |\n\nwhere Œ±=max‚Å°{Œ∑2,Œ∑2‚ÄãŒ≤}ùõºùúÇ2superscriptùúÇ2ùõΩ\\\\alpha=\\\\max\\\\{\\\\frac{\\\\eta}{2},\\\\eta^{2}\\\\beta\\\\}.\n\n### 3.2 Application to SGD, SAM and mSAM\n\nWe delve into applying the findings from section [3.1]Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") to SGD, SAM and mSAM. For differentiation, we employ subscripts 1, 2, and 3 to denote SGD, SAM, and mSAM.\nSince ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*} is a minimum, we assume that, for each example iùëñi, the Hessian, ùêái‚Äã(ùê∞‚àó)subscriptùêáùëñsuperscriptùê∞\\\\mathbf{H}\\_{i}(\\\\mathbf{w}^{\\*}) is symmetric and positive semi-definite (PSD). Given this foundation, all other matrices we engage with in the subsequent analysis also turn out to be PSD. For SGD, Wu et al. \\[ [22])\\] show that:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùêâ1‚àó=ùêá¬Ø‚àó‚Äã and ‚Äãùö∫1=IE‚Äã\\[(ùêáùíÆ‚àó‚àíùêá¬Ø‚àó)2\\]=ùêï‚Äã(ùêáùíÆ‚àó),superscriptsubscriptùêâ1superscript¬Øùêá and subscriptùö∫1IEdelimited-\\[\\]superscriptsuperscriptsubscriptùêáùíÆsuperscript¬Øùêá2ùêïsuperscriptsubscriptùêáùíÆ\\\\mathbf{J}\\_{1}^{\\*}=\\\\bar{\\\\mathbf{H}}^{\\*}\\\\mbox{ and }\\\\mathbf{\\\\Sigma}\\_{1}={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*}-\\\\bar{\\\\mathbf{H}}^{\\*})^{2}\\]=\\\\mathbf{V}(\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*}), |  | (17) |\n\nwhere ùêáùíÆ‚àósuperscriptsubscriptùêáùíÆ\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*} is the Hessian of ‚ÑíùíÆsubscript‚ÑíùíÆ\\\\mathcal{L}\\_{\\\\mathcal{S}} at ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*}, ùêá¬Ø‚àósuperscript¬Øùêá\\\\bar{\\\\mathbf{H}}^{\\*} is the Hessian of the full batch mean loss at ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*} and ùêï‚Äã(ùêóùíÆ)=IE‚Äã\\[(ùêóùíÆ‚àíIE‚Äã\\[ùêóùíÆ\\])2\\]ùêïsubscriptùêóùíÆIEdelimited-\\[\\]superscriptsubscriptùêóùíÆIEdelimited-\\[\\]subscriptùêóùíÆ2\\\\mathbf{V}(\\\\mathbf{X}\\_{\\\\mathcal{S}})={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{X}\\_{\\\\mathcal{S}}-{\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[\\\\mathbf{X}\\_{\\\\mathcal{S}}\\])^{2}\\] denotes the variance of ùêóùíÆsubscriptùêóùíÆ\\\\mathbf{X}\\_{\\\\mathcal{S}}.\n\n###### Assumption 3.2.\n\nFor analysis with SAM and mSAM, we leave out the normalization terms in ( [4]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) and ( [6]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")).\n\nIn a recent study, Agarwala and Dauphin \\[ [39])\\] analyze the stability characteristics of the full batch unnormalized SAM, as described in ( [4]In 2 Algorithm ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")), where ùíÆùíÆ\\\\mathcal{S} signifies the complete training set. Notably, they too exclude the normalizer term ‚Äñ‚àá‚ÑíùíÆ‚Äã(ùê∞)‚Äñ2subscriptnorm‚àásubscript‚ÑíùíÆùê∞2\\\\\\|\\\\nabla\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\mathbf{w})\\\\\\|\\_{2} to simplify the analysis. However, unlike Agarwala and Dauphin \\[ [39])\\], we do not require the full batch assumption.\n\nLet us now apply the general linear stability analysis that we develop in section [3.1]Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") to SAM and mSAM; for them, ùêùùíÆsubscriptùêùùíÆ\\\\mathbf{d}\\_{\\\\mathcal{S}} is given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùêù2,ùíÆ‚Äã(ùê∞)=ùêù1,ùíÆ‚Äã(ùê∞+œÅ‚Äãùêù1,ùíÆ‚Äã(ùê∞)),subscriptùêù2ùíÆùê∞subscriptùêù1ùíÆùê∞ùúåsubscriptùêù1ùíÆùê∞\\\\mathbf{d}\\_{2,\\\\mathcal{S}}(\\\\mathbf{w})=\\\\mathbf{d}\\_{1,\\\\mathcal{S}}(\\\\mathbf{w}+\\\\rho\\\\mathbf{d}\\_{1,\\\\mathcal{S}}(\\\\mathbf{w})), |  | (18) |\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùêù3,ùíÆ‚Äã(ùê∞)=1m‚Äã‚àëj=1mùêù2,ùíÆj‚Äã(ùê∞).subscriptùêù3ùíÆùê∞1ùëösuperscriptsubscriptùëó1ùëösubscriptùêù2subscriptùíÆùëóùê∞\\\\mathbf{d}\\_{3,\\\\mathcal{S}}(\\\\mathbf{w})=\\\\frac{1}{m}\\\\sum\\_{j=1}^{m}\\\\mathbf{d}\\_{2,\\\\mathcal{S}\\_{j}}(\\\\mathbf{w}). |  | (19) |\n\nwhere ùêù1,ùíÆsubscriptùêù1ùíÆ\\\\mathbf{d}\\_{1,\\\\mathcal{S}} is the SGD gradient given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùêù1,ùíÆ‚Äã(ùê∞)=1\\|ùíÆ\\|‚Äã‚àëi‚ààùíÆ‚àá‚Ñí‚Äã(ùê∞;ei),subscriptùêù1ùíÆùê∞1ùíÆsubscriptùëñùíÆ‚àá‚Ñíùê∞subscriptùëíùëñ\\\\mathbf{d}\\_{1,\\\\mathcal{S}}(\\\\mathbf{w})=\\\\frac{1}{\\|\\\\mathcal{S}\\|}\\\\sum\\_{i\\\\in\\\\mathcal{S}}\\\\nabla\\\\mathcal{L}(\\\\mathbf{w};e\\_{i}), |  | (20) |\n\nand ei=(ùê±i,yi)subscriptùëíùëñsubscriptùê±ùëñsubscriptùë¶ùëñe\\_{i}=(\\\\mathbf{x}\\_{i},y\\_{i}) denotes the iùëñi-th training example.\nIt is clear from ( [18]In 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) and ( [19]In 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) that the linear approximations of SAM and mSAM, i.e., the determination of ùêâ1,ùíÆ‚Äã(ùê∞‚àó)subscriptùêâ1ùíÆsuperscriptùê∞\\\\mathbf{J}\\_{1,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}) and ùêâ2,ùíÆ‚Äã(ùê∞‚àó)subscriptùêâ2ùíÆsuperscriptùê∞\\\\mathbf{J}\\_{2,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}) depend on the linearization of ‚àáùêù1,ùíÆ‚àásubscriptùêù1ùíÆ\\\\nabla\\\\mathbf{d}\\_{1,{\\\\mathcal{S}}} which is given by:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àáùêù1,ùíÆ=ùêáùíÆ‚àó‚Äãùê∞‚áíùêâ1,ùíÆ‚Äã(ùê∞‚àó)=ùêáùíÆ‚àó‚Äã==def‚Äã1\\|ùíÆ\\|‚Äã‚àëi‚ààùíÆùêái‚Äã(ùê∞‚àó)‚àásubscriptùêù1ùíÆsuperscriptsubscriptùêáùíÆùê∞‚áísubscriptùêâ1ùíÆsuperscriptùê∞superscriptsubscriptùêáùíÆdef==1ùíÆsubscriptùëñùíÆsubscriptùêáùëñsuperscriptùê∞\\\\nabla\\\\mathbf{d}\\_{1,{\\\\mathcal{S}}}=\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*}\\\\mathbf{w}\\\\Rightarrow\\\\mathbf{J}\\_{1,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*})=\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*}\\\\overset{\\\\mathrm{def}}{=\\\\joinrel=}\\\\frac{1}{\\|\\\\mathcal{S}\\|}\\\\sum\\_{i\\\\in\\\\mathcal{S}}\\\\mathbf{H}\\_{i}(\\\\mathbf{w}^{\\*}) |  | (21) |\n\nWhen the details are worked out (see appendix [A]Appendix A Proofs of the results in section 3 ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) we obtain expressions for ùêâ1,ùíÆ‚Äã(ùê∞‚àó)subscriptùêâ1ùíÆsuperscriptùê∞\\\\mathbf{J}\\_{1,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}) and ùêâ2,ùíÆ‚Äã(ùê∞‚àó)subscriptùêâ2ùíÆsuperscriptùê∞\\\\mathbf{J}\\_{2,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*}) given by the following lemma.\n\n###### Lemma 3.4.\n\n(a) ùêâ‚àósuperscriptùêâ\\\\mathbf{J}^{\\*} for SAM and mSAM are given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùêâ2‚àó=ùêá¬Ø‚àó+œÅ‚Äã(ùêá¬Ø‚àó)2+œÅ‚Äãùö∫1,superscriptsubscriptùêâ2superscript¬Øùêáùúåsuperscriptsuperscript¬Øùêá2ùúåsubscriptùö∫1\\\\displaystyle\\\\mathbf{J}\\_{2}^{\\*}=\\\\bar{\\\\mathbf{H}}^{\\*}+\\\\rho(\\\\bar{\\\\mathbf{H}}^{\\*})^{2}+\\\\rho\\\\mathbf{\\\\Sigma}\\_{1}, |  | (22) |\n|  | ùêâ3‚àó=ùêá¬Ø‚àó+œÅ‚Äã(ùêá¬Ø‚àó)2+œÅ‚Äãùö∫1+ùõÄ,superscriptsubscriptùêâ3superscript¬Øùêáùúåsuperscriptsuperscript¬Øùêá2ùúåsubscriptùö∫1ùõÄ\\\\displaystyle\\\\mathbf{J}\\_{3}^{\\*}=\\\\bar{\\\\mathbf{H}}^{\\*}+\\\\rho(\\\\bar{\\\\mathbf{H}}^{\\*})^{2}+\\\\rho\\\\mathbf{\\\\Sigma}\\_{1}+\\\\mathbf{\\\\Omega}, |  | (23) |\n\nwhere\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùõÄ=IE‚Äã\\[œÅm‚Äã‚àëj=1m(ùêáùíÆj‚àó‚àíùêáùíÆ‚àó)2\\].ùõÄIEdelimited-\\[\\]ùúåùëösuperscriptsubscriptùëó1ùëösuperscriptsuperscriptsubscriptùêásubscriptùíÆùëósuperscriptsubscriptùêáùíÆ2\\\\mathbf{\\\\Omega}={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\\\left\\[\\\\frac{\\\\rho}{m}\\\\sum\\_{j=1}^{m}(\\\\mathbf{H}\\_{\\\\mathcal{S}\\_{j}}^{\\*}-\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*})^{2}\\\\right\\]. |  | (24) |\n\n(b) ùö∫ùö∫\\\\mathbf{\\\\Sigma} for SAM and mSAM are given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùö∫2=IE‚Äã\\[(ùêáùíÆ‚àó+œÅ‚Äã(ùêáùíÆ‚àó)2‚àíùêâ2‚àó)2\\]subscriptùö∫2IEdelimited-\\[\\]superscriptsuperscriptsubscriptùêáùíÆùúåsuperscriptsuperscriptsubscriptùêáùíÆ2superscriptsubscriptùêâ22\\\\displaystyle\\\\mathbf{\\\\Sigma}\\_{2}={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*}+\\\\rho(\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*})^{2}-\\\\mathbf{J}\\_{2}^{\\*})^{2}\\] |  | (25) |\n|  | ùö∫3=IE‚Äã\\[(ùêâ3,ùíÆ‚Äã(ùê∞‚àó)‚àíùêâ3‚àó)2\\]subscriptùö∫3IEdelimited-\\[\\]superscriptsubscriptùêâ3ùíÆsuperscriptùê∞superscriptsubscriptùêâ32\\\\displaystyle\\\\mathbf{\\\\Sigma}\\_{3}={\\\\rm I}\\\\kern-1.79993pt{\\\\rm E}\\[(\\\\mathbf{J}\\_{3,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*})-\\\\mathbf{J}\\_{3}^{\\*})^{2}\\] |  | (26) |\n\nwhere\n\n|     |     |     |\n| --- | --- | --- |\n|  | ùêâ3,ùíÆ‚Äã(ùê∞‚àó)=ùêáùíÆ‚àó+œÅ‚Äã(ùêáùíÆ‚àó)2+œÅm‚Äã‚àëj=1m(ùêáùíÆj‚àó‚àíùêáùíÆ‚àó)2.subscriptùêâ3ùíÆsuperscriptùê∞superscriptsubscriptùêáùíÆùúåsuperscriptsuperscriptsubscriptùêáùíÆ2ùúåùëösuperscriptsubscriptùëó1ùëösuperscriptsuperscriptsubscriptùêásubscriptùíÆùëósuperscriptsubscriptùêáùíÆ2\\\\displaystyle\\\\mathbf{J}\\_{3,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*})=\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*}+\\\\rho(\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*})^{2}+\\\\frac{\\\\rho}{m}\\\\sum\\_{j=1}^{m}(\\\\mathbf{H}\\_{\\\\mathcal{S}\\_{j}}^{\\*}-\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*})^{2}. |  |\n\n(c) Equivalently, ùö∫2subscriptùö∫2\\\\mathbf{\\\\Sigma}\\_{2} and ùö∫3subscriptùö∫3\\\\mathbf{\\\\Sigma}\\_{3} can also be written as matrix variances:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùö∫2=ùêï‚Äã(ùêáùíÆ‚àó+œÅ‚Äã(ùêáùíÆ‚àó)2)subscriptùö∫2ùêïsuperscriptsubscriptùêáùíÆùúåsuperscriptsuperscriptsubscriptùêáùíÆ2\\\\displaystyle\\\\mathbf{\\\\Sigma}\\_{2}=\\\\mathbf{V}(\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*}+\\\\rho(\\\\mathbf{H}\\_{\\\\mathcal{S}}^{\\*})^{2}) |  | (27) |\n|  | ùö∫3=ùêï‚Äã(ùêâ3,ùíÆ‚Äã(ùê∞‚àó))subscriptùö∫3ùêïsubscriptùêâ3ùíÆsuperscriptùê∞\\\\displaystyle\\\\mathbf{\\\\Sigma}\\_{3}=\\\\mathbf{V}(\\\\mathbf{J}\\_{3,\\\\mathcal{S}}(\\\\mathbf{w}^{\\*})) |  | (28) |\n\n| Dataset | Model | Vanilla | SAM | mSAM |\n| CIFAR 10 | ResNet50 | 95.45¬±0.10plus-or-minus95.450.1095.45\\\\pm 0.10 | 96.09¬±0.11plus-or-minus96.090.1196.09\\\\pm 0.11 | 96.40¬±0.06plus-or-minus96.400.0696.40\\\\pm 0.06 |\n| WRN-28-10 | 95.92¬±0.12plus-or-minus95.920.1295.92\\\\pm 0.12 | 96.90¬±0.05plus-or-minus96.900.0596.90\\\\pm 0.05 | 96.95¬±0.04plus-or-minus96.950.0496.95\\\\pm 0.04 |\n| ViT-B/16 | 97.68¬±0.03plus-or-minus97.680.0397.68\\\\pm 0.03 | 97.75¬±0.06plus-or-minus97.750.0697.75\\\\pm 0.06 | 98.29¬±0.08plus-or-minus98.290.0898.29\\\\pm 0.08 |\n| CIFAR 100 | ResNet50 | 80.68¬±0.13plus-or-minus80.680.1380.68\\\\pm 0.13 | 81.49¬±0.18plus-or-minus81.490.1881.49\\\\pm 0.18 | 83.37¬±0.10plus-or-minus83.370.1083.37\\\\pm 0.10 |\n| WRN-28-10 | 81.01¬±0.19plus-or-minus81.010.1981.01\\\\pm 0.19 | 82.93¬±0.13plus-or-minus82.930.1382.93\\\\pm 0.13 | 84.07¬±0.06plus-or-minus84.070.0684.07\\\\pm 0.06 |\n| ViT-B/16 | 88.02¬±0.17plus-or-minus88.020.1788.02\\\\pm 0.17 | 88.75¬±0.07plus-or-minus88.750.0788.75\\\\pm 0.07 | 89.00¬±0.17plus-or-minus89.000.1789.00\\\\pm 0.17 |\n| ImageNet 1k | ResNet50 | 76.35¬±0.09plus-or-minus76.350.0976.35\\\\pm 0.09 | 76.61¬±0.07plus-or-minus76.610.0776.61\\\\pm 0.07 | 76.79¬±0.09plus-or-minus76.790.0976.79\\\\pm 0.09 |\n| WRN50-2-bottleneck | 78.04¬±0.09plus-or-minus0.09\\\\pm 0.09 | 78.50¬±0.09plus-or-minus78.500.0978.50\\\\pm 0.09 | 79.36¬±0.04plus-or-minus79.360.0479.36\\\\pm 0.04 |\n| ViT-S/32 | 64.53¬±0.72plus-or-minus64.530.7264.53\\\\pm 0.72 | 65.86¬±0.81plus-or-minus65.860.8165.86\\\\pm 0.81 | 66.76¬±0.22plus-or-minus66.760.2266.76\\\\pm 0.22 |\n\nTable 2: Accuracy Results for CNN Architectures\n\nIt is imperative to acknowledge that the theoretical analysis of SAM-like methodologies with the normalization term presents a formidable undertaking, as highlighted by Dai et al. \\[ [40])\\]. Consequently, we defer this intricate endeavour to a subsequent phase.\n\n### 3.3 Implications on Sharpness\n\nIt is apparent from the expressions in ( [17]In 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")), ( [27]In Lemma 3.4. ‚Ä£ 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")), and ( [28]In Lemma 3.4. ‚Ä£ 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) that, in the progression from SGD to mSAM, the ùö∫ùö∫\\\\mathbf{\\\\Sigma}‚Äôs are computed as variances of matrices, with the inclusion of supplementary stochastic matrices at each stage. Consequently, one can anticipate the validity of the following theorem.\n\n###### Theorem 3.1.\n\nFor any given Œ∑ùúÇ\\\\eta, BùêµB and ùê∞‚àósuperscriptùê∞\\\\mathbf{w}^{\\*}, (a) if SGD is unstable then SAM is unstable; and, (b) if SAM is unstable, then mSAM is unstable.\n\nThanks to the rigorous theoretical and empirical analyses by Cohen et al. \\[ [15]), [32])\\], Arora et al. \\[ [33])\\], GD on neural network training is understood to reach and operate in a regime known as the Edge of Stability (EoS), where the maximum eigenvalue of the training loss Hessian hovers just above the value 2/Œ∑2ùúÇ2/\\\\eta (see Lemma [3.2]Lemma 3.2. ‚Ä£ 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") above). Upon entering the EoS region, the training loss exhibits non-monotonic behavior over brief time intervals, while consistently decreasing over longer periods. In the mini-batch setting, Jastrzebski et al. \\[ [14])\\] conduct systematic experiments, applying the stability theory introduced by Wu et al. \\[ [22])\\], thereby identifying a corresponding EoS behavior for SGD.\n\nThe assertion of Theorem [3.1]Theorem 3.1. ‚Ä£ 3.3 Implications on Sharpness ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") remains independent of the reliance on assumption [3.1]Assumption 3.1. ‚Ä£ 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). Through the meticulous delineation of precise mathematical expressions, this theorem unveils the inherent propensity of mSAM to manifest greater susceptibility to instability in contrast to SAM, attributed to the incorporation of micro-batching. It is notable that SAM, owing to its adversarial step, exhibits a heightened level of instability as compared to SGD. For the mini-batch setting, these results are new. Combined with the way ùêá¬Ø‚àósuperscript¬Øùêá\\\\bar{\\\\mathbf{H}}^{\\*} is involved in the expressions, theorem [3.1]Theorem 3.1. ‚Ä£ 3.3 Implications on Sharpness ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"), assumption [3.1]Assumption 3.1. ‚Ä£ 3.1 Analysis of Linear Stability ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"), and the EoS theory culminate in the following pivotal finding, which serves as a direct comparative analysis of the sharpness inherent in the three methods.\n\n###### Theorem 3.2.\n\nFor any given Œ∑ùúÇ\\\\eta and BùêµB, if ùêá1‚àósuperscriptsubscriptùêá1\\\\mathbf{H}\\_{1}^{\\*}, ùêá2‚àósuperscriptsubscriptùêá2\\\\mathbf{H}\\_{2}^{\\*} and ùêá3‚àósuperscriptsubscriptùêá3\\\\mathbf{H}\\_{3}^{\\*} denote, respectively the Hessians of SGD, SAM and mSAM at their edge of stability, then Œª1‚Äã(ùêá1‚àó)‚â•Œª1‚Äã(ùêá2‚àó)‚â•Œª1‚Äã(ùêá3‚àó)subscriptùúÜ1superscriptsubscriptùêá1subscriptùúÜ1superscriptsubscriptùêá2subscriptùúÜ1superscriptsubscriptùêá3\\\\lambda\\_{1}(\\\\mathbf{H}\\_{1}^{\\*})\\\\geq\\\\lambda\\_{1}(\\\\mathbf{H}\\_{2}^{\\*})\\\\geq\\\\lambda\\_{1}(\\\\mathbf{H}\\_{3}^{\\*}).\n\nAppendix [A]Appendix A Proofs of the results in section 3 ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") gives a proof of this result. Let us give a rough explanation of this important result. Comparing the expressions for ùêâ1‚àósuperscriptsubscriptùêâ1\\\\mathbf{J}\\_{1}^{\\*}, ùêâ2‚àósuperscriptsubscriptùêâ2\\\\mathbf{J}\\_{2}^{\\*} and ùêâ3‚àósuperscriptsubscriptùêâ3\\\\mathbf{J}\\_{3}^{\\*} in ( [17]In 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) ( [22]In Lemma 3.4. ‚Ä£ 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) and ( [23]In Lemma 3.4. ‚Ä£ 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")), we can see from the additional terms that come as we go from ùêâ1‚àósuperscriptsubscriptùêâ1\\\\mathbf{J}\\_{1}^{\\*} to ùêâ2‚àósuperscriptsubscriptùêâ2\\\\mathbf{J}\\_{2}^{\\*} to ùêâ3‚àósuperscriptsubscriptùêâ3\\\\mathbf{J}\\_{3}^{\\*} that, for meeting the edge of stability condition Œª1‚Äã(ùêâi‚àó)=1‚Äã‚àÄisubscriptùúÜ1superscriptsubscriptùêâùëñ1for-allùëñ\\\\lambda\\_{1}(\\\\mathbf{J}\\_{i}^{\\*})=1\\\\;\\\\forall i, Œª1‚Äã(ùêá3‚àó)subscriptùúÜ1superscriptsubscriptùêá3\\\\lambda\\_{1}(\\\\mathbf{H}\\_{3}^{\\*}) cannot be larger than Œª1‚Äã(ùêá2‚àó)subscriptùúÜ1superscriptsubscriptùêá2\\\\lambda\\_{1}(\\\\mathbf{H}\\_{2}^{\\*}), which in turn cannot be larger than Œª1‚Äã(ùêá1‚àó)subscriptùúÜ1superscriptsubscriptùêá1\\\\lambda\\_{1}(\\\\mathbf{H}\\_{1}^{\\*}). Thus, mSAM has better flatness than SAM, and SAM has better flatness than SGD.\n\nWe support Theorem [3.2]Theorem 3.2. ‚Ä£ 3.3 Implications on Sharpness ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") with an empirical investigation on three datasets in Section [5]A Deeper Investigation of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"); see Table [4]Table 4 ‚Ä£ 4.2 NLP Fine-tuning ‚Ä£ 4 Numerical Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") there and the discussion below it.",
            "citations": null
          },
          "4 Numerical Experiments": {
            "content": "This section compares mSAM to SAM and vanilla optimization methods (i.e. without sharpness-aware modification) on various model architectures and datasets. We report the average and standard deviation of accuracy on the test data over five independent runs. We also note that we use the same values of hyper-parameters for all algorithms, where œÅùúå\\\\rho is chosen based on the best validation performance for SAM, and other hyper-parameters are chosen based on the best validation error for vanilla methods. Moreover, although using different values of œÅùúå\\\\rho for each micro-batch in mSAM is possible, doing so requires tuning numerous hyper-parameters, which is computationally infeasible. Therefore, we use the exact value of œÅùúå\\\\rho for all micro-batches.\n\n### 4.1 Image Classification\n\nIn our first set of experiments on image classification datasets,\nwe compare the performance of mSAM, SAM and vanilla methods with multiple CNN architectures such as ResNets \\[ [2])\\] and WideResNet \\[ [41])\\]. We use CIFAR10/100 \\[ [42])\\] and ImageNet \\[ [43])\\] datasets as our test bed. We use different seeds for all five runs of each experiment.\n\nThe average accuracies corresponding to the experiments with the three datasets and the architectures of ResNet and WideResNet are reported in Table [2]Table 2 ‚Ä£ 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). For the CIFAR datasets, we use an effective batch size of 512512512 across four NVIDIA V100 GPUs. For the ImageNet dataset, we use an effective batch size of 204820482048 across eight GPUs. We use m=32ùëö32m=32 for mSAM for CIFAR and 444/888 for ResNet50 and WideResNet-50-2, respectively, for ImageNet. Details about hyper-parameters used to produce these results can be found in Appendix [C]Appendix C Hyper-parameters for Image Classification Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). Overall, mSAM consistently leads to better accuracy than SAM and vanilla methods in all CNN-related experimental results reported in Table [2]Table 2 ‚Ä£ 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\n\nFollowing recent results that suggest that sharpness-aware optimization can substantially improve the generalization quality of Vision Transformers (ViTs)  \\[ [29])\\], we conduct additional experiments on ViT architectures. In particular, we use the pre-trained ViT-B/16 checkpoint from \\[ [44])\\] and fine-tune the model on CIFAR10/100 data independently. For ImageNet, we train a smaller version of the ViT model (ViT-S/32) from scratch. We choose 512512512 as the batch size for the CIFAR fine-tuning tasks and use 409640964096 as the batch size for training from scratch on the ImageNet dataset. The average accuracy results for ViT are reported in Table [2]Table 2 ‚Ä£ 3.2 Application to SGD, SAM and mSAM ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). Similar to results on CNNs, mSAM outperforms both SAM and vanilla training across all sets of ViT-related tasks. Note that we do not leverage any advanced data augmentation techniques, and only use inception-style image pre-processing. Other hyper-parameters to produce these results are listed in Appendix [C]Appendix C Hyper-parameters for Image Classification Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\n\n### 4.2 NLP Fine-tuning\n\nOur next set of experiments is based on four tasks from the GLUE benchmark \\[ [45])\\]. In particular, we choose COLA and MRPC as two small datasets and SST-2 and QQP as two larger datasets for empirical evaluation. Fine-tuning experiments are performed with the RoBERTa-base model \\[ [6])\\] on four NVIDIA V100 GPUs with an effective batch size of 323232. For the ease of reproduction of the results, we tabulate all the hyper-parameters used in Appendix [D]Appendix D Hyper-parameters for GLUE Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). For the fine-tuning experiments, we report the average value of Matthews Correlation Coefficient for COLA, and average accuracy for other datasets in Table [4]Table 4 ‚Ä£ 4.2 NLP Fine-tuning ‚Ä£ 4 Numerical Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). Overall, mSAM performs better than the baseline methods on these datasets. However, the variance among different runs is comparably high for smaller datasets such as COLA and MRPC. On the other hand, the results on larger data such as SST-2 and QQP are expectedly more robust across different runs.\n\n| Task | Vanilla | SAM | mSAM (m=8ùëö8m=8) |\n| --- | --- | --- | --- |\n| COLA | 63.66¬±2.46plus-or-minus63.662.4663.66\\\\pm 2.46 | 64.30¬±0.49plus-or-minus64.300.4964.30\\\\pm 0.49 | 64.57¬±0.66plus-or-minus64.570.6664.57\\\\pm 0.66 |\n| MRPC | 89.79¬±0.05plus-or-minus89.790.0589.79\\\\pm 0.05 | 90.37¬±0.13plus-or-minus90.370.1390.37\\\\pm 0.13 | 90.92¬±0.16plus-or-minus90.920.1690.92\\\\pm 0.16 |\n| SST-2 | 94.27¬±0.18plus-or-minus94.270.1894.27\\\\pm 0.18 | 95.21¬±0.12plus-or-minus95.210.1295.21\\\\pm 0.12 | 95.38¬±0.10plus-or-minus95.380.1095.38\\\\pm 0.10 |\n| QQP | 91.70¬±0.11plus-or-minus91.700.1191.70\\\\pm 0.11 | 92.13¬±0.02plus-or-minus92.130.0292.13\\\\pm 0.02 | 92.18¬±0.03plus-or-minus92.180.0392.18\\\\pm 0.03 |\n\nTable 3: Accuracy Results for GLUE Tasks\n\n| Model | Vanilla | SAM | mSAM |\n| --- | --- | --- | --- |\n| ResNet50 | 26¬±2plus-or-minus26226\\\\pm 2 | 21¬±3plus-or-minus21321\\\\pm 3 | 18¬±1plus-or-minus18118\\\\pm 1 |\n| WRN-28-10 | 92¬±4plus-or-minus92492\\\\pm 4 | 30¬±2plus-or-minus30230\\\\pm 2 | 17¬±1plus-or-minus17117\\\\pm 1 |\n\nTable 4: ŒªmaxsubscriptùúÜ\\\\lambda\\_{\\\\max} (sharpness) for CNNs",
            "citations": null
          },
          "5 A Deeper Investigation of mSAM": {
            "content": "To further understand the mSAM algorithm, we design and report some experiments in this section. Additional experimental results are moved to Appendix [B]Appendix B mSAM and Computational Efficiency ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\n\n|     |     |\n| --- | --- |\n| ResNet50 | WRN-28-10 |\n| ![Refer to caption] | ![Refer to caption] |\n| mùëöm | mùëöm |\n\nFigure 1: The effect of varying mùëöm on accuracy. We see that increasing mùëöm up to 32 results in better accuracy. However, increasing mùëöm further leads to worse results/marginal improvements.\n\n#### Effect of varying mùëöm:\n\nIn our experiments, we have observed that a larger value of mùëöm often leads to better test accuracy. We recover SAM by setting m=1ùëö1m=1, which produces inferior results. To test this hypothesis, we set up the experiments with the CIFAR100 dataset on two CNNs, ResNet50 and WRN-28-10, in the same setup as in Section [4.1]Image Classification ‚Ä£ 4 Numerical Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). We run mSAM for different values of m‚àà{4,8,16,32,64}ùëö48163264m\\\\in\\\\{4,8,16,32,64\\\\}. The accuracy results for these experiments are shown in Figure [1]Figure 1 ‚Ä£ 5 A Deeper Investigation of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\n\nIncreasing mùëöm improves the performance up to m‚âà32ùëö32m\\\\approx 32. However, a value of mùëöm larger than this threshold either leads to worse performance or marginal improvements, so increasing mùëöm does not necessarily result in better generalization. Intuitively, when the micro-batch is too small, the perturbation derived according to the micro-batch might not be a good estimate of the actual SAM perturbation, leading to worse performance. We leave the theoretical analysis of such a phenomenon an interesting direction for future research. We also note that understanding how the optimal value of mùëöm and batch size interact is an open question for future work.\n\n#### Are mSAM solutions flat?\n\nThe SAM algorithm hypothesizes that flat solutions generalize better. Since mSAM consistently outperforms SAM, it is worth investigating if mSAM settles for even flatter solutions than SAM, as predicted by our theory in section [3]Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). To that end and to quantify sharpness, we calculate the largest eigenvalue of the Hessian of the loss function ‚ÑíùíÆ‚Äã(w‚Üí)subscript‚ÑíùíÆ‚Üíùë§\\\\mathcal{L}\\_{\\\\mathcal{S}}(\\\\vec{w}) at the final solution, denoted as ŒªmaxsubscriptùúÜ\\\\lambda\\_{\\\\max}. We calculate ŒªmaxsubscriptùúÜ\\\\lambda\\_{\\\\max} over the full train data using power iteration, as implemented by \\[ [46])\\]. We use the ResNet50 and WRN-28-10 models trained on CIFAR100 (see Section [4.1]Image Classification ‚Ä£ 4 Numerical Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\")) to calculate ŒªmaxsubscriptùúÜ\\\\lambda\\_{\\\\max}. The average results for these experiments are reported in Table [4]Table 4 ‚Ä£ 4.2 NLP Fine-tuning ‚Ä£ 4 Numerical Experiments ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"). We see that mSAM leads to solutions with smaller ŒªmaxsubscriptùúÜ\\\\lambda\\_{\\\\max} than SAM and vanilla SGD, and this finding agrees with Theorem [3.2]Theorem 3.2. ‚Ä£ 3.3 Implications on Sharpness ‚Ä£ 3 Justification of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\").\n\n| Model | Vanilla | SAM | mSAM |\n| --- | --- | --- | --- |\n| ResNet50 | 14.7414.7414.74 | 25.5425.5425.54 | 25.8725.8725.87 |\n| WRN-50-2-bottleneck | 27.6827.6827.68 | 52.0252.0252.02 | 58.9358.9358.93 |\n| ViT-S/32 | 19.9119.9119.91 | 24.5024.5024.50 | 30.6630.6630.66 |\n\nTable 5: Runtime of different methods and architectures on ImageNet data (in hours)\n\n#### mSAM runtime:\n\nA general misconception about mSAM is that it is computationally inefficient, as the total number of forward-backwards passes in the network is multiplied by mùëöm\\[ [30])\\]. However, note that these passes are performed on micro-batches, which are mùëöm times smaller than the actual minibatch. Hence, the overall computational cost gets amortized and is never as high as mùëöm times the cost of SAM. In practice, on large networks, the runtime of mSAM is _only_ 1.11.11.1-1.21.21.2 times more compared to SAM. Particularly, in Table [5]Table 5 ‚Ä£ Are mSAM solutions flat? ‚Ä£ 5 A Deeper Investigation of mSAM ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\") we report the runtime of SGD, SAM and mSAM for the ImageNet data. The overhead of mSAM over SAM for ViT-S/32 is about 20%percent2020\\\\%, while for ResNet50 the overhead is negligible. We discuss the computational efficiency of mSAM in more details in Appendix [B]Appendix B mSAM and Computational Efficiency ‚Ä£ mSAM: Micro-Batch-Averaged Sharpness-Aware Minimization\"), as well as discussing a few hybrid algorithms to reduce the computational cost of mSAM even further.",
            "citations": null
          },
          "6 Discussion": {
            "content": "Within the confines of this study, we proffer a theoretical rationale that explains how mSAM leads to flatter solutions when compared with SAM. This perspective extends a contemporary framework of stability dynamics. It is discernible from intuitive observations that minima characterized by heightened flatness frequently correlate with enhanced generalization capabilities. Our comprehensive empirical inquiry reinforces such theoretical assertion by demonstrating the superiority of mSAM over SAM across diverse datasets with image classification and NLP tasks and a spectrum of model architectures, including CNNs and Transformers. The extent of performance differentiation is notably contingent upon the specifics of the dataset and the inherent architecture. Our empirical endeavours reveal that the computational overhead associated with mSAM does not incur a significantly higher cost than SAM, thereby establishing its viability for solving large-scale problems.\n\nFurthermore, our theoretical framework is amenable to broader generalization, specifically, the dissection of the conventional mini-batch into micro-batches. This extension becomes particularly pertinent when considering gradient computation of a compositional nature, an attribute often observed in other iterations of sharpness-aware minimization algorithm. An avenue ripe for future exploration entails the augmentation and extension of the flatness theory as applied to the segmentation of mini-batches into micro-batches, particularly in the context of gradient updates characterized by non-linear aggregation. Such a development presents an intriguing prospect wherein this technique could be pragmatically harnessed to enhance the generalization efficacy of alternative methodologies.",
            "citations": null
          }
        },
        "abstract": "Modern deep learning models are over-parameterized, where different optima\ncan result in widely varying generalization performance. The Sharpness-Aware\nMinimization (SAM) technique modifies the fundamental loss function that steers\ngradient descent methods toward flatter minima, which are believed to exhibit\nenhanced generalization prowess. Our study delves into a specific variant of\nSAM known as micro-batch SAM (mSAM). This variation involves aggregating\nupdates derived from adversarial perturbations across multiple shards\n(micro-batches) of a mini-batch during training. We extend a recently developed\nand well-studied general framework for flatness analysis to theoretically show\nthat SAM achieves flatter minima than SGD, and mSAM achieves even flatter\nminima than SAM. We provide a thorough empirical evaluation of various image\nclassification and natural language processing tasks to substantiate this\ntheoretical advancement. We also show that contrary to previous work, mSAM can\nbe implemented in a flexible and parallelizable manner without significantly\nincreasing computational costs. Our implementation of mSAM yields superior\ngeneralization performance across a wide range of tasks compared to SAM,\nfurther supporting our theoretical framework."
      },
      "bib.bib16": {
        "id": "bib.bib16",
        "citation": "DeVries (2017)",
        "authors": "",
        "year": "",
        "title": "Improved regularization of convolutional neural networks with cutout.",
        "venue": "arXiv preprint arXiv:1708.04552",
        "pages": "",
        "url": "",
        "arxiv_id": "1708.04552",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "In recent years deep learning has contributed to considerable advances in the field of computer vision, resulting in state-of-the-art performance in many challenging vision tasks such as object recognition \\[ [8])\\], semantic segmentation \\[ [11])\\], image captioning \\[ [19])\\], and human pose estimation \\[ [17])\\]. Much of these improvements can be attributed to the use of convolutional neural networks (CNNs) \\[ [9])\\], which are capable of learning complex hierarchical feature representations of images. As the complexity of the task to be solved increases, the resource utilization of such models increases as well: memory footprint, parameters, operations count, inference time and power consumption \\[ [2])\\].\nModern networks commonly contain on the order of tens to hundreds of millions of learned parameters which provide the necessary representational power for such tasks, but with the increased representational power also comes increased probability of overfitting, leading to poor generalization.\n\nIn order to combat the potential for overfitting, several different regularization techniques can be applied, such as data augmentation or the judicious addition of noise to activations, parameters, or data. In the domain of computer vision, data augmentation is almost ubiquitous due to its ease of implementation and effectiveness. Simple image transforms such as mirroring or cropping can be applied to create new training data which can be used to improve model robustness and increase accuracy \\[ [9])\\]. Large models can also be regularized by adding noise during the training process, whether it be added to the input, weights, or gradients. One of the most common uses of noise for improving model accuracy is dropout \\[ [6])\\], which stochastically drops neuron activations during training and as a result discourages the co-adaptation of feature detectors.\n\n![Refer to caption]Figure 1: Cutout applied to images from the CIFAR-10 dataset.\n\nIn this work we consider applying noise in a similar fashion to dropout, but with two important distinctions. The first difference is that units are dropped out only at the input layer of a CNN, rather than in the intermediate feature layers. The second difference is that we drop out contiguous sections of inputs rather than individual pixels, as demonstrated in Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\"). In this fashion, dropped out regions are propagated through all subsequent feature maps, producing a final representation of the image which contains no trace of the removed input, other than what can be recovered by its context. This technique encourages the network to better utilize the full context of the image, rather than relying on the presence of a small set of specific visual features. This method, which we call cutout, can be interpreted as applying a spatial prior to dropout in input space, much in the same way that convolutional neural networks leverage information about spatial structure in order to improve performance over that of feed-forward networks.\n\nIn the remainder of this paper, we introduce cutout and demonstrate that masking out contiguous sections of the input to convolutional neural networks can improve model robustness and ultimately yield better model performance. We show that this simple method works in conjunction with other current state-of-the-art techniques such as residual networks and batch normalization, and can also be combined with most regularization techniques, including standard dropout and data augmentation. Additionally, cutout can be applied during data loading in parallel with the main training task, making it effectively computationally free. To evaluate this technique we conduct tests on several popular image recognition datasets, achieving state-of-the-art results on CIFAR-10, CIFAR-100, and SVHN. We also achieve competitive results on STL-10, demonstrating the usefulness of cutout for low data and higher resolution problems.",
            "citations": null
          },
          "2 Related Work": {
            "content": "Our work is most closely related to two common regularization techniques: data augmentation and dropout. Here we examine the use of both methods in the setting of training convolutional neural networks. We also discuss denoising auto-encoders and context encoders, which share some similarities with our work.\n\n### 2.1 Data Augmentation for Images\n\nData augmentation has long been used in practice when training convolutional neural networks. When training LeNet5 \\[ [9])\\] for optical character recognition, LeCun _et al_. apply various affine transforms, including horizontal and vertical translation, scaling, squeezing, and horizontal shearing to improve their model‚Äôs accuracy and robustness.\n\nIn \\[ [1])\\], Bengio _et al_. demonstrate that deep architectures benefit much more from data augmentation than shallow architectures. They apply a large variety of transformations to their handwritten character dataset, including local elastic deformation, motion blur, Gaussian smoothing, Gaussian noise, salt and pepper noise, pixel permutation, and adding fake scratches and other occlusions to the images, in addition to affine transformations.\n\nTo improve the performance of AlexNet \\[ [8])\\] for the 2012 ImageNet Large Scale Visual Recognition Competition, Krizhevsky _et al_. apply image mirroring, cropping, as well as randomly adjusting colour and intensity values based on ranges determined using principal component analysis on the dataset.\n\nWu _et al_. take a more aggressive approach with image augmentation when training Deep Image \\[ [21])\\] on the ImageNet dataset. In addition to flipping and cropping they apply a wide range of colour casting, vignetting, rotation, and lens distortion (pin cushion and barrel distortion), as well as horizontal and vertical stretching.\n\nLemley _et al_. tackle the issue of data augmentation with a learned end-to-end approach called Smart Augmentation \\[ [10])\\] instead of relying on hard-coded transformations. In this method, a neural network is trained to intelligently combine existing samples in order to generate additional data that is useful for the training process.\n\nOf these techniques ours is closest to the occlusions applied in \\[ [1])\\], however their occlusions generally take the form of scratches, dots, or scribbles that overlay the target character, while we use zero-masking to completely obstruct an entire region.\n\n### 2.2 Dropout in Convolutional Neural Networks\n\nAnother common regularization technique is dropout \\[ [6]), [15])\\], which was first introduced by Hinton _et al_. Dropout is implemented by setting hidden unit activations to zero with some fixed probability during training. All activations are kept when evaluating the network, but the resulting output is scaled according to the dropout probability. This technique has the effect of approximately averaging over an exponential number of smaller sub-networks, and works well as a robust type of bagging, which discourages the co-adaptation of feature detectors within the network.\n\nWhile dropout was found to be very effective at regularizing fully-connected layers, it appears to be less powerful when used with convolutional layers \\[ [16])\\]. This reduction in potency can largely be attributed to two factors. The first is that convolutional layers already have much fewer parameters than fully-connected layers, and therefore require less regularization. The second factor is that neighbouring pixels in images share much of the same information. If any of them are dropped out then the information they contain will likely still be passed on from the neighbouring pixels that are still active. For these reasons, dropout in convolutional layers simply acts to increase robustness to noisy inputs, rather than having the same model averaging effect that is observed in fully-connected layers.\n\nIn an attempt to increase the effectiveness of dropout in convolutional layers, several variations on the original dropout formula have been proposed. Tompson _et al_. introduce SpatialDropout \\[ [16])\\], which randomly discards entire feature maps rather than individual pixels, effectively bypassing the issue of neighbouring pixels passing similar information.\n\nWu and Gu propose probabilistic weighted pooling \\[ [20])\\], wherein activations in each pooling region are dropped with some probability. This approach is similar to applying dropout before each pooling layer, except that instead of scaling the output with respect to the dropout probability at test time, the output of each pooling function is selected to be the sum of the activations weighted by the dropout probability. The authors claim that this approach approximates averaging over an exponential number of sub-networks as dropout does.\n\nIn a more targeted approach, Park and Kwak introduce max-drop \\[ [13])\\], which drops the maximal activation across feature maps or channels with some probability. While this regularization method performed better than conventional dropout on convolutional layers in some cases, they found that when used in CNNs that utilized batch normalization, both max-drop and SpatialDropout performed worse than standard dropout.\n\n### 2.3 Denoising Auto-encoders & Context Encoders\n\nDenosing auto-encoders \\[ [18])\\] and context encoders \\[ [14])\\] both rely on self-supervised learning to elicit useful feature representations of images. These models work by corrupting input images and requiring the network to reconstruct them using the remaining pixels as context to determine how best to fill in the blanks. Specifically, denoising auto-encoders that apply Bernoulli noise randomly erase individual pixels in the input image, while context encoders erase larger spatial regions. In order to properly fill in the missing information, the auto-encoders are forced to learn how to extract useful features from the images, rather than simply learning an identity function. As context encoders are required to fill in a larger region of the image they are required to have a better understanding of the global content of the image, and therefore they learn higher-level features compared to denoising auto-encoders \\[ [14])\\]. These feature representations have been demonstrated to be useful for pre-training classification, detection, and semantic segmentation models.\n\nWhile removing contiguous sections of the input has previously been used as an image corruption technique, like in context encoders, to our knowledge it has not previously been applied directly to the training of supervised models.",
            "citations": null
          },
          "3 Cutout": {
            "content": "Cutout is a simple regularization technique for convolutional neural networks that involves removing contiguous sections of input images, effectively augmenting the dataset with partially occluded versions of existing samples. This technique can be interpreted as an extension of dropout in input space, but with a spatial prior applied, much in the same way that CNNs apply a spatial prior to achieve improved performance over feed-forward networks on image data.\n\nFrom the comparison between dropout and cutout, we can also draw parallels to denoising autoencoders and context encoders. While both models have the same goal, context encoders are more effective at representation learning, as they force the model to understand the content of the image in a global sense, rather than a local sense as denoising auto-encoders do.\nIn the same way, cutout forces models to take more of the full image context into consideration, rather than focusing on a few key visual features, which may not always be present.\n\nOne of the major differences between cutout and other dropout variants is that units are dropped at the input stage of the network rather than in the intermediate layers. This approach has the effect that visual features, including objects that are removed from the input image, are correspondingly removed from all subsequent feature maps. Other dropout variants generally consider each feature map individually, and as a result, features that are randomly removed from one feature map may still be present in others. These inconsistencies produce a noisy representation of the input image, thereby forcing the network to become more robust to noisy inputs. In this sense, cutout is much closer to data augmentation than dropout, as it is not creating noise, but instead generating images that appear novel to the network.\n\n### 3.1 Motivation\n\nThe main motivation for cutout comes from the problem of object occlusion, which is commonly encountered in many computer vision tasks, such as object recognition, tracking, or human pose estimation. By generating new images which simulate occluded examples, we not only better prepare the model for encounters with occlusions in the real world, but the model also learns to take more of the image context into consideration when making decisions.\n\nWe initially developed cutout as a targeted approach that specifically removed important visual features from the input of the image. This approach was similar to max-drop \\[ [13])\\], in that we aimed to remove maximally activated features in order to encourage the network to consider less prominent features. To accomplish this goal, we extracted and stored the maximally activated feature map for each image in the dataset at each epoch. During the next epoch we then upsampled the saved feature maps back to the input resolution, and thresholded them at the mean feature map value to obtain a binary mask, which was finally overlaid on the original image before being passed through the CNN. Figure [2]Figure 2 ‚Ä£ 3.1 Motivation ‚Ä£ 3 Cutout ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\") demonstrates this early version of cutout.\n\nWhile this targeted cutout method performed well, we found that randomly removing regions of a fixed size performed just as well as the targeted approach, without requiring any manipulation of the feature maps. Due to the inherent simplicity of this alternative approach, we focus on removing fixed-size regions for all of our experiments.\n\n![Refer to caption]Figure 2: An early version of cutout applied to images from the CIFAR-10 dataset. This targeted approach often occludes part-level features of the image, such as heads, legs, or wheels.\n\n### 3.2 Implementation Details\n\nTo implement cutout, we simply apply a fixed-size zero-mask to a random location of each input image during each epoch of training, as shown in Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\"). Unlike dropout and its variants, we do not apply any rescaling of weights at test time. For best performance, the dataset should be normalized about zero so that modified images will not have a large effect on the expected batch statistics.\n\nIn general, we found that the size of the cutout region is a more important hyperparameter than the shape, so for simplicity, we conduct all of our experiments using a square patch as the cutout region. When cutout is applied to an image, we randomly select a pixel coordinate within the image as a center point and then place the cutout mask around that location. This method allows for the possibility that not all parts of the cutout mask are contained within the image. Interestingly, we found that allowing portions of the patches to lay outside the borders of the image (rather than constraining the entire patch to be within the image) was critical to achieving good performance. Our explanation for this phenomenon is that it is important for the model to receive some examples where a large portion of the image is visible during training. An alternative approach that achieves similar performance is to randomly apply cutout constrained within the image region, but with 50% probability so that the network sometimes receives unmodified images.\n\nThe cutout operation can easily be applied on the CPU along with any other data augmentation steps during data loading. By implementing this operation on the CPU in parallel with the main GPU training task, we can hide the computation and obtain performance improvements for virtually free.",
            "citations": null
          },
          "4 Experiments": {
            "content": "![Refer to caption](a)CIFAR-10\n\n![Refer to caption](b)CIFAR-100\n\nFigure 3: Cutout patch length with respect to validation accuracy with 95% confidence intervals (average of five runs). Tests run on CIFAR-10 and CIFAR-100 datasets using WRN-28-10 and standard data augmentation. Baseline indicates a model trained with no cutout.\n\n| Method | C10 | C10+ | C100 | C100+ | SVHN |\n| --- | --- | --- | --- | --- | --- |\n| ResNet18 \\[ [5])\\] | 10.63¬±0.26plus-or-minus10.630.2610.63\\\\pm 0.26 | 4.72¬±0.21plus-or-minus4.720.214.72\\\\pm 0.21 | 36.68¬±0.57plus-or-minus36.680.5736.68\\\\pm 0.57 | 22.46¬±0.31plus-or-minus22.460.3122.46\\\\pm 0.31 | - |\n| ResNet18 + cutout | 9.31¬±0.18plus-or-minus9.310.189.31\\\\pm 0.18 | 3.99¬±0.13plus-or-minus3.990.133.99\\\\pm 0.13 | 34.98¬±0.29plus-or-minus34.980.2934.98\\\\pm 0.29 | 21.96¬±0.24plus-or-minus21.960.2421.96\\\\pm 0.24 | - |\n| WideResNet \\[ [22])\\] | 6.97¬±0.22plus-or-minus6.970.226.97\\\\pm 0.22 | 3.87¬±0.08plus-or-minus3.870.083.87\\\\pm 0.08 | 26.06¬±0.22plus-or-minus26.060.2226.06\\\\pm 0.22 | 18.8¬±0.08plus-or-minus18.80.0818.8\\\\pm 0.08 | 1.60¬±0.05plus-or-minus1.600.051.60\\\\pm 0.05 |\n| WideResNet + cutout | 5.54¬±0.08plus-or-minus5.540.08\\\\mathbf{5.54\\\\pm 0.08} | 3.08¬±0.16plus-or-minus3.080.163.08\\\\pm 0.16 | 23.94¬±0.15plus-or-minus23.940.15\\\\mathbf{23.94\\\\pm 0.15} | 18.41¬±0.27plus-or-minus18.410.2718.41\\\\pm 0.27 | 1.30¬±0.03plus-or-minus1.300.03\\\\mathbf{1.30\\\\pm 0.03} |\n| Shake-shake regularization \\[ [4])\\] | - | 2.862.862.86 | - | 15.8515.8515.85 | - |\n| Shake-shake regularization + cutout | - | 2.56¬±0.07plus-or-minus2.560.07\\\\mathbf{2.56\\\\pm 0.07} | - | 15.20¬±0.21plus-or-minus15.200.21\\\\mathbf{15.20\\\\pm 0.21} | - |\n\nTable 1: Test error rates (%) on CIFAR (C10, C100) and SVHN datasets. ‚Äú+‚Äù indicates standard data augmentation (mirror + crop). Results averaged over five runs, with the exception of shake-shake regularization which only had three runs each. Baseline shake-shake regularization results taken from \\[ [4])\\].\n\nTo evaluate the performance of cutout, we apply it to a variety of natural image recognition datasets: CIFAR-10, CIFAR-100, SVHN, and STL-10.\n\n### 4.1 CIFAR-10 and CIFAR-100\n\nBoth of the CIFAR datasets \\[ [7])\\] consist of 60,000 colour images of size 32√ó32323232\\\\times 32 pixels. CIFAR-10 has 10 distinct classes, such as cat, dog, car, and boat. CIFAR-100 contains 100 classes, but requires much more fine-grained recognition compared to CIFAR-10 as some classes are very visually similar. For example, it contains five different classes of trees: maple, oak, palm, pine, and willow. Each dataset is split into a training set with 50,000 images and a test set with 10,000 images.\n\nBoth datasets were normalized using per-channel mean and standard deviation. When required, we apply the standard data augmentation scheme for these datasets \\[ [5])\\]. Images are first zero-padded with 4 pixels on each side to obtain a 40√ó40404040\\\\times 40 pixel image, then a 32√ó32323232\\\\times 32 crop is randomly extracted. Images are also randomly mirrored horizontally with 50% probability.\n\nTo evaluate cutout on the CIFAR datasets, we train models using two modern architectures: a deep residual network \\[ [5])\\] with a depth of 18 (ResNet18), and a wide residual network \\[ [22])\\] with a depth of 28, a widening factor of 10, and dropout with a drop probability of p = 0.3 in the convolutional layers (WRN-28-10). For both of these experiments, we use the same training procedure as specified in \\[ [22])\\]. That is, we train for 200 epochs with batches of 128 images using SGD, Nesterov momentum of 0.9, and weight decay of 5e-4. The learning rate is initially set to 0.1, but is scheduled to decrease by a factor of 5x after each of the 60th, 120th, and 160th epochs. We also apply cutout to shake-shake regularization models \\[ [4])\\] that currently achieve state-of-the-art performance on the CIFAR datasets, specifically a 26 2√ó962629626\\ 2\\\\times 96d ‚ÄúShake-Shake-Image‚Äù ResNet for CIFAR-10 and a 29 2√ó4√ó6429246429\\ 2\\\\times 4\\\\times 64d ‚ÄúShake-Even-Image‚Äù ResNeXt for CIFAR-100. For our tests, we use the original code and training settings provided by the author of \\[ [4])\\], with the only change being the addition of cutout.\n\nTo find the best parameters for cutout we isolate 10% of the training set to use as a validation set and train on the remaining images. As our cutout shape is square, we perform a grid search over the side length parameter to find the optimal size. We find that model accuracy follows a parabolic trend, increasing proportionally to the cutout size until an optimal point, after which accuracy again decreases and eventually drops below that of the baseline model. This behaviour can be observed in Figure [3(a)]In Figure 3 ‚Ä£ 4 Experiments ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\") and [3(b)]In Figure 3 ‚Ä£ 4 Experiments ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\"), which depict the grid searches conducted on CIFAR-10 and CIFAR-100 respectively. Based on these validation results we select a cutout size of 16√ó16161616\\\\times 16 pixels to use on CIFAR-10 and a cutout size of 8√ó8888\\\\times 8 pixels for CIFAR-100 when training on the full datasets. Interestingly, it appears that as the number of classes increases, the optimal cutout size decreases. This makes sense, as when more fine-grained detection is required then the context of the image will be less useful for identifying the category. Instead, smaller and more nuanced details are important.\n\nAs shown in Table [1]Table 1 ‚Ä£ 4 Experiments ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\"), the addition of cutout to the ResNet18 and WRN-28-10 models increased their accuracy on CIFAR-10 and CIFAR-100 by between 0.4 to 2.0 percentage points. We draw attention to the fact that cutout yields these performance improvements even when applied to complex models that already utilize batch normalization, dropout, and data augmentation. Adding cutout to the current state-of-the-art shake-shake regularization models improves performance by 0.3 and 0.6 percentage points on CIFAR-10 and CIFAR-100 respectively, yielding new state-of-the-art results of 2.56% and 15.20% test error.\n\n### 4.2 SVHN\n\nThe Street View House Numbers (SVHN) dataset \\[ [12])\\] contains a total of 630,420 colour images with a resolution of 32√ó32323232\\\\times 32 pixels. Each image is centered about a number from one to ten, which needs to be identified. The official dataset split contains 73,257 training images and 26,032 test images, but there are also 531,131 additional training images available. Following standard procedure for this dataset \\[ [22])\\], we use both available training sets when training our models, and do not apply any data augmentation. All images are normalized using per-channel mean and standard deviation.\n\nTo evalute cutout on the SVHN dataset we apply it to a WideResNet with a depth of 16, a widening factor of 8, and dropout on the convolutional layers with a dropout rate of p = 0.4 (WRN-16-8). This particular configuration currently holds state-of-the-art performance on the SVHN dataset with a test error of 1.54% \\[ [22])\\]. We repeat the same training procedure as specified in \\[ [22])\\] by training for 160 epochs with batches of 128 images. The network is optimized using SGD with Nesterov momentum of 0.9 and weight decay of 5e-4. The learning rate is initially set to 0.01, but is reduced by a factor of 10x after the 80th and 120th epochs. The one change we do make to the original training procedure (for both baseline and cutout) is to normalize the data so that it is compatible with cutout (see ¬ß [3.2]Implementation Details ‚Ä£ 3 Cutout ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\")). The original implementation scales data to lie between 0 and 1.\n\nTo find the optimal size for the cutout region we conduct a grid search using 10% of the training set for validation and ultimately select a cutout size of 20√ó20202020\\\\times 20 pixels. While this may seem like a large portion of the image to remove, it is important to remember that the cutout patches are not constrained to lie fully within the bounds of the image.\n\n![Refer to caption](c)2nd Residual Block\n\n![Refer to caption](d)3rd Residual Block\n\n![Refer to caption](e)4th Residual Block\n\nFigure 4: Magnitude of feature activations, sorted by descending value, and averaged over all test samples. A standard ResNet18 is compared with a ResNet18 trained with cutout at three different depths.\n\nUsing these settings we train the WRN-16-8 and observe an average reduction in test error of 0.3 percentage points, resulting in a new state-of-the-art performance of 1.30% test error, as shown in Table [1]Table 1 ‚Ä£ 4 Experiments ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\").\n\n### 4.3 STL-10\n\nThe STL-10 dataset \\[ [3])\\] consists of a total of 113,000 colour images with a resolution of 96√ó96969696\\\\times 96 pixels. The training set only contains 5,000 images while the test set consists of 8,000 images. All training and test set images belong to one of ten classes, such as airplane, bird, or horse. The remainder of the dataset is composed of 100,000 unlabeled images belonging to the target ten classes, plus additional but visually similar classes. While the main purpose of the STL-10 dataset is to test semi-supervised learning algorithms, we use it to observe how cutout performs when applied to higher resolution images in a low data setting. For this reason, we discard the unlabeled portion of the dataset and only use the labeled training set.\n\nThe dataset was normalized by subtracting the per-channel mean and dividing by the per-channel standard deviation. Simple data augmentation was also applied in a similar fashion to the CIFAR datasets. Specifically, images were zero-padded with 12 pixels on each side and then a 96√ó96969696\\\\times 96 crop was randomly extracted. Mirroring horizontally was also applied with 50% probability.\n\nTo evaluate the performance of cutout on the STL-10 dataset we use a WideResNet with a depth of 16, a widening factor of 8, and dropout with a drop rate of p = 0.3 in the convolutional layers. We train the model for 1000 epochs with batches of 128 images using SGD with Nesterov momentum of 0.9 and weight decay of 5e-4. The learning rate is initially set to 0.1 but is reduced by a factor of 5x after the 300th, 400th, 600th, and 800th epochs.\n\nWe perform a grid search over the cutout size parameter using 10% of the training images as a validation set and select a square size of 24√ó24242424\\\\times 24 pixels for the no data-augmentation case and 32√ó32323232\\\\times 32 pixels for training STL-10 with data augmentation. Training the model using these values yields a reduction in test error of 2.7 percentage points in the no data augmentation case, and 1.5 percentage points when also using data augmentation, as shown in Table [2]Table 2 ‚Ä£ 4.3 STL-10 ‚Ä£ 4 Experiments ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\").\n\n| Model | STL10 | STL10+ |\n| --- | --- | --- |\n| WideResNet | 23.48¬±0.68plus-or-minus23.480.6823.48\\\\pm 0.68 | 14.21¬±0.29plus-or-minus14.210.2914.21\\\\pm 0.29 |\n| WideResNet + cutout | 20.77¬±0.38plus-or-minus20.770.38\\\\mathbf{20.77\\\\pm 0.38} | 12.74¬±0.23plus-or-minus12.740.23\\\\mathbf{12.74\\\\pm 0.23} |\n\nTable 2: Test error rates on STL-10 dataset. ‚Äú+‚Äù indicates standard data augmentation (mirror + crop). Results averaged over five runs on full training set.\n\n### 4.4 Analysis of Cutout‚Äôs Effect on Activations\n\nIn order to better understand the effect of cutout, we compare the average magnitude of feature activations in a ResNet18 when trained with and without cutout on CIFAR-10. The models were trained with data augmentation using the same settings as defined in Section [4.1]CIFAR-10 and CIFAR-100 ‚Ä£ 4 Experiments ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\"), achieving scores of 3.89% and 4.94% test error respectively.\n\nIn Figure [4]Figure 4 ‚Ä£ 4.2 SVHN ‚Ä£ 4 Experiments ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\"), we sort the activations within each layer by ascending magnitude, averaged over all samples in the test set. We observe that the shallow layers of the network experience a general increase in activation strength, while in deeper layers, we see more activations in the tail end of the distribution. The latter observation illustrates that cutout is indeed encouraging the network to take into account a wider variety of features when making predictions, rather than relying on the presence of a smaller number of features. Figure [5]Figure 5 ‚Ä£ Appendix A Supplementary Materials ‚Ä£ Improved Regularization of Convolutional Neural Networks with Cutout\") demonstrates similar observations for individual samples, where the effects of cutout are more pronounced.",
            "citations": null
          },
          "5 Conclusion": {
            "content": "Cutout was originally conceived as a targeted method for removing visual\nfeatures with high activations in later layers of a CNN. Our motivation was to\nencourage the network to focus more on complimentary and less prominent features, in\norder to generalize to situations like occlusion. However, we discovered that\nthe conceptually and computationally simpler approach of randomly masking square\nsections of the image performed equivalently in the experiments we conducted.\nImportantly, this simple regularizer proved to be complementary to\nexisting forms of data augmentation and regularization. Applied to modern\narchitectures, such as wide residual networks or shake-shake regularization models,\nit achieves state-of-the-art performance on the CIFAR-10,\nCIFAR-100, and SVHN vision benchmarks. So why hasn‚Äôt it been reported or\nanalyzed to date?\nOne reason could be the fact that using a combination of corrupted and clean images appears to be important for its success.\nFuture work will return to\nour original investigation of visual feature removal informed by activations.",
            "citations": null
          }
        },
        "abstract": "Convolutional neural networks are capable of learning powerful\nrepresentational spaces, which are necessary for tackling complex learning\ntasks. However, due to the model capacity required to capture such\nrepresentations, they are often susceptible to overfitting and therefore\nrequire proper regularization in order to generalize well. In this paper, we\nshow that the simple regularization technique of randomly masking out square\nregions of input during training, which we call cutout, can be used to improve\nthe robustness and overall performance of convolutional neural networks. Not\nonly is this method extremely easy to implement, but we also demonstrate that\nit can be used in conjunction with existing forms of data augmentation and\nother regularizers to further improve model performance. We evaluate this\nmethod by applying it to current state-of-the-art architectures on the\nCIFAR-10, CIFAR-100, and SVHN datasets, yielding new state-of-the-art results\nof 2.56%, 15.20%, and 1.30% test error respectively. Code is available at\nhttps://github.com/uoguelph-mlrg/Cutout"
      },
      "bib.bib21": {
        "id": "bib.bib21",
        "citation": "Gatmiry et al. (2023)",
        "authors": "",
        "year": "",
        "title": "The inductive bias of flatness regularization for deep matrix factorization.",
        "venue": "arXiv preprint arXiv:2306.13239",
        "pages": "",
        "url": "",
        "arxiv_id": "2306.13239",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Modern deep neural networks are typically over-parametrized and equipped with huge model capacity, but surprisingly, they generalize well when trained using stochastic gradient descent (SGD) or its variants (Zhang et al., [2017])). A recent line of research suggested the _implicit bias_ of SGD as a possible explanation to this mysterious ability.\nIn particular, Damian et al. ( [2021])); Li et al. ( [2021])); Arora et al. ( [2022])); Lyu et al. ( [2022])); Wen et al. ( [2022])); Liu et al. ( [2022a])) have shown that SGD can implicitly minimize the _sharpness_ of the training loss, in particular, the trace of the Hessian of the training loss, to obtain the final model. However, despite the strong empirical evidence on the correlation between various notions of sharpness and generalization (Keskar et al., [2016]); Jastrzebski et al., [2017]); Neyshabur et al., [2017]); Jiang et al., [2019])) and the effectiveness of using sharpness regularization on improving generalization (Foret et al., [2020]); Wu et al., [2020]); Zheng et al., [2021]); Norton and Royset, [2021])), the connection between penalization of the sharpness of training loss and better generalization still remains majorly unclear (Dinh et al., [2017]); Andriushchenko et al., [2023])) and has only been proved in the context of two-layer linear models (Li et al., [2021]); Nacson et al., [2022]); Ding et al., [2022])). To further understand this connection beyond the two layer case, we study the inductive bias of penalizing the _trace of the Hessian_ of training loss and its effect on the _generalization_ in an important theoretical deep learning setting: _deep linear networks_ (or equivalently, _deep matrix factorization_(Arora et al., [2019]))). We start by briefly describing the problem setup.\n\n#### Deep Matrix Factorization.\n\nConsider an LùêøL-layer deep network where L‚àà‚Ñï+,L‚â•2formulae-sequenceùêøsuperscript‚Ñïùêø2L\\\\in\\\\mathbb{N}^{+},L\\\\geq 2 is the depth of the model. Let Wi‚àà‚Ñùdi√ódi‚àí1subscriptùëäùëñsuperscript‚Ñùsubscriptùëëùëñsubscriptùëëùëñ1W\\_{i}\\\\in\\\\mathbb{R}^{d\\_{i}\\\\times d\\_{i-1}} and disubscriptùëëùëñd\\_{i} denote the layer weight matrix and width of the ithsuperscriptùëñthi^{\\\\text{th}} (i‚àà\\[L\\]ùëñdelimited-\\[\\]ùêøi\\\\in\\[L\\]) layer respectively. We use ùêñùêñ\\\\mathbf{W} to denote the concatenation of all the parameters (W1,‚Ä¶,WL)subscriptùëä1‚Ä¶subscriptùëäùêø(W\\_{1},\\\\ldots,W\\_{L}) and define the _end-to-end matrix_ of ùêñùêñ\\\\mathbf{W} as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | E‚Äã(ùêñ)‚âúWL‚ÄãWL‚àí1‚Äã‚ãØ‚ÄãW1.‚âúùê∏ùêñsubscriptùëäùêøsubscriptùëäùêø1‚ãØsubscriptùëä1\\\\displaystyle E(\\\\mathbf{W})\\\\triangleq W\\_{L}W\\_{L-1}\\\\cdots W\\_{1}. |  | (1) |\n\nIn this paper, we focus on models that are linear in the space of the end-to-end matrix E‚Äã(W)ùê∏ùëäE(W). Suppose M‚àó‚àà‚ÑùdL√ód0superscriptùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M^{\\*}\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}} is the target end-to-end matrix, and we observe nùëõn linear measurements (matrices) Ai‚àà‚ÑùdL√ód0subscriptùê¥ùëñsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0A\\_{i}\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}} and the corresponding labels bi=‚ü®Ai,M‚àó‚ü©subscriptùëèùëñsubscriptùê¥ùëñsuperscriptùëÄb\\_{i}=\\\\left\\\\langle A\\_{i},M^{\\*}\\\\right\\\\rangle.\nThe training loss of ùêñùêñ\\\\mathbf{W} is the mean-squared error (MSE) between the prediction ‚ü®Ai,WL‚ÄãWL‚àí1‚Äã‚ãØ‚ÄãW1‚ü©subscriptùê¥ùëñsubscriptùëäùêøsubscriptùëäùêø1‚ãØsubscriptùëä1\\\\left\\\\langle A\\_{i},W\\_{L}W\\_{L-1}\\\\cdots W\\_{1}\\\\right\\\\rangle and the observation bisubscriptùëèùëñb\\_{i}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñí‚Äã(ùêñ)‚âú1n‚Äã‚àëi=1n(‚ü®Ai,WL‚ÄãWL‚àí1‚Äã‚ãØ‚ÄãW1‚ü©‚àíbi)2.‚âú‚Ñíùêñ1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùê¥ùëñsubscriptùëäùêøsubscriptùëäùêø1‚ãØsubscriptùëä1subscriptùëèùëñ2\\\\displaystyle{\\\\mathcal{L}}(\\\\mathbf{W})\\\\triangleq\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left(\\\\left\\\\langle A\\_{i},W\\_{L}W\\_{L-1}\\\\cdots W\\_{1}\\\\right\\\\rangle-b\\_{i}\\\\right)^{2}. |  | (2) |\n\nThroughout this paper, we assume that di‚â•min‚Å°(d0,dL)subscriptùëëùëñsubscriptùëë0subscriptùëëùêød\\_{i}\\\\geq\\\\min(d\\_{0},d\\_{L}) for each i‚àà\\[L\\]ùëñdelimited-\\[\\]ùêøi\\\\in\\[L\\] and, thus, the image of the function E‚Äã(‚ãÖ)ùê∏‚ãÖE(\\\\cdot) is the entire ‚ÑùdL√ód0superscript‚Ñùsubscriptùëëùêøsubscriptùëë0\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}. In particular, this ensures that the deep models are sufficiently expressive in the sense that minùëæ‚Å°‚Ñí‚Äã(ùëæ)=0subscriptùëæ‚Ñíùëæ0\\\\min\\\\limits\\_{{\\\\bm{W}}}{\\\\mathcal{L}}({\\\\bm{W}})=0. For this setting, we aim to understand the structure of the trace of the Hessian minimization, as described below. The trace of Hessian is the sum of the eigenvalues of Hessian, which is an indicator of sharpness and it is known that variants of SGD, such as label noise SGD or 1-SAM, are biased toward models with a smaller trace of Hessian (Li et al., [2021]); Wen et al., [2022])).\n\nMin Trace of Hessian Interpolating Solution. Our primary object of study is the interpolating solution with the minimum trace of Hessian, defined as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùëæ‚àó‚ààarg‚Äãminùëæ:‚Ñí‚Äã(ùëæ)=0‚Å°tr‚Äã\\[‚àá2‚Ñí‚Äã(ùëæ)\\].superscriptùëæsubscriptargmin:ùëæ‚Ñíùëæ0trdelimited-\\[\\]superscript‚àá2‚Ñíùëæ\\\\displaystyle{\\\\bm{W}}^{\\*}\\\\in\\\\operatorname\\*{arg\\\\,min}\\_{{\\\\bm{W}}:{\\\\mathcal{L}}({\\\\bm{W}})=0}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}({\\\\bm{W}})\\]. |  | (3) |\n\nAs we shall see shortly, the solution to the above optimization problem is not unique. We are interested in understanding the underlying structure of any minimizer ùëæ‚àósuperscriptùëæ{\\\\bm{W}}^{\\*}. This will, in turn, inform us about the generalization nature of these solutions.\n\n### 1.1 Main Results\n\nBefore delving into the technical details, we state our main results in this section. This also serves the purpose of highlighting the primary technical contributions of the paper.\nFirst, since the generalization of ùëæùëæ{\\\\bm{W}} only depends on its end-to-end matrix E‚Äã(ùëæ)ùê∏ùëæE({\\\\bm{W}}), it is informative to derive the properties of E‚Äã(ùëæ‚àó)ùê∏superscriptùëæE({\\\\bm{W}}^{\\*}) for any min trace of the Hessian interpolating solution ùëæ‚àósuperscriptùëæ{\\\\bm{W}}^{\\*} defined in ( [3]Equation 3 ‚Ä£ Deep Matrix Factorization. ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")). Indeed, penalizing the trace of Hessian in the WùëäW space induces an equivalent penalization in the space of the end-to-end parameters. More concretely, given an end-to-end parameter MùëÄM, let the induced regularizer F‚Äã(M)ùêπùëÄF(M) denote the trace of Hessian of the training loss at ùëæùëæ{\\\\bm{W}} among all ùëæùëæ{\\\\bm{W}}‚Äôs that instantiate the end-to-end matrix MùëÄM i.e., E‚Äã(ùëæ)=Mùê∏ùëæùëÄE({\\\\bm{W}})=M.\n\n###### Definition 1(Induced Regularizer).\n\nSuppose M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}} is an end-to-end parameter that fits the training data perfectly (that is, ‚ü®Ai,M‚ü©=bi,‚àÄi‚àà\\[n\\]formulae-sequencesubscriptùê¥ùëñùëÄsubscriptùëèùëñfor-allùëñdelimited-\\[\\]ùëõ\\\\left\\\\langle A\\_{i},M\\\\right\\\\rangle=b\\_{i},\\ \\\\forall i\\\\in\\[n\\]). We define the _induced regularizer_ as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Äã(M)‚âúminùëæ:E‚Äã(ùëæ)=M‚Å°tr‚Äã\\[‚àá2‚Ñí‚Äã(ùëæ)\\]‚âúùêπùëÄsubscript:ùëæùê∏ùëæùëÄtrdelimited-\\[\\]superscript‚àá2‚Ñíùëæ\\\\displaystyle F(M)\\\\triangleq\\\\min\\_{{\\\\bm{W}}:E({\\\\bm{W}})=M}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}({\\\\bm{W}})\\] |  | (4) |\n\nSince the image of E‚Äã(‚ãÖ)ùê∏‚ãÖE(\\\\cdot) is the entire ‚ÑùdL√ód0superscript‚Ñùsubscriptùëëùêøsubscriptùëë0\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}} by our assumption that di‚â•min‚Å°(d0,dL)subscriptùëëùëñsubscriptùëë0subscriptùëëùêød\\_{i}\\\\geq\\\\min(d\\_{0},d\\_{L}), function FùêπF is well-defined for all M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}. It is easy to see that minimizing the trace of the Hessian in the original parameter space (see ( [3]Equation 3 ‚Ä£ Deep Matrix Factorization. ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"))) is equivalent to penalizing F‚Äã(M)ùêπùëÄF(M) in the end-to-end parameter. Indeed, the minimizers of the implicit regularizer in the end-to-end space are related to the minimizers of the implicit regularizer in the ùëæùëæ{\\\\bm{W}} space, i.e.,\n\n|     |     |     |\n| --- | --- | --- |\n|  | arg‚ÄãminM:‚Ñí‚Ä≤‚Äã(M)=0‚Å°F‚Äã(M)={E‚Äã(ùëæ‚àó)‚à£ùëæ‚àó‚ààarg‚Äãminùëæ:‚Ñí‚Äã(ùëæ)=0‚Å°tr‚Äã\\[‚àá2‚Ñí‚Äã(ùëæ)\\]},subscriptargmin:ùëÄsuperscript‚Ñí‚Ä≤ùëÄ0ùêπùëÄconditional-setùê∏superscriptùëæsuperscriptùëæsubscriptargmin:ùëæ‚Ñíùëæ0trdelimited-\\[\\]superscript‚àá2‚Ñíùëæ\\\\displaystyle\\\\operatorname\\*{arg\\\\,min}\\\\limits\\_{M:{\\\\mathcal{L}}^{\\\\prime}(M)=0}F(M)=\\\\left\\\\{E({\\\\bm{W}}^{\\*})\\\\mid{\\\\bm{W}}^{\\*}\\\\in\\\\operatorname\\*{arg\\\\,min}\\\\limits\\_{{\\\\bm{W}}:{\\\\mathcal{L}}({\\\\bm{W}})=0}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}({\\\\bm{W}})\\]\\\\right\\\\}, |  |\n\nwhere for any M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}, we define ‚Ñí‚Ä≤‚Äã(M)‚âú1n‚Äã‚àëi=1(‚ü®Ai,M‚ü©‚àíbi)2‚âúsuperscript‚Ñí‚Ä≤ùëÄ1ùëõsubscriptùëñ1superscriptsubscriptùê¥ùëñùëÄsubscriptùëèùëñ2{\\\\mathcal{L}}^{\\\\prime}(M)\\\\triangleq\\\\frac{1}{n}\\\\sum\\_{i=1}\\\\left(\\\\left\\\\langle A\\_{i},M\\\\right\\\\rangle-b\\_{i}\\\\right)^{2} and thus ‚Ñí‚Äã(ùëæ)=‚Ñí‚Ä≤‚Äã(E‚Äã(ùëæ))‚Ñíùëæsuperscript‚Ñí‚Ä≤ùê∏ùëæ{\\\\mathcal{L}}({\\\\bm{W}})={\\\\mathcal{L}}^{\\\\prime}(E({\\\\bm{W}})). This directly follows from the definition of FùêπF in ( [4]Equation 4 ‚Ä£ Definition 1 (Induced Regularizer). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")). Our main result characterizes the induced regularizer F‚Äã(M)ùêπùëÄF(M) when the data satisfies the RIP property.\n\n###### Theorem 1(Induced regularizer under RIP).\n\nSuppose the linear measurements {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} satisfy the (1,Œ¥)1ùõø(1,\\\\delta)-RIP condition.\n\n1. 1.\n\n\nFor any M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}} such that ‚ü®Ai,M‚ü©=bi,‚àÄi‚àà\\[n\\]formulae-sequencesubscriptùê¥ùëñùëÄsubscriptùëèùëñfor-allùëñdelimited-\\[\\]ùëõ\\\\left\\\\langle A\\_{i},M\\\\right\\\\rangle=b\\_{i},\\ \\\\forall i\\\\in\\[n\\], it holds that\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (1‚àíŒ¥)‚ÄãL‚Äã(d0‚ÄãdL)1/L‚Äã‚ÄñM‚Äñ‚àó2‚Äã(L‚àí1)/L‚â§F‚Äã(M)‚â§(1+Œ¥)‚ÄãL‚Äã(d0‚ÄãdL)1/L‚Äã‚ÄñM‚Äñ‚àó2‚Äã(L‚àí1)/L.1ùõøùêøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsuperscriptsubscriptnormùëÄ2ùêø1ùêøùêπùëÄ1ùõøùêøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsuperscriptsubscriptnormùëÄ2ùêø1ùêø\\\\displaystyle(1-\\\\delta)L{(d\\_{0}d\\_{L})}^{1/L}\\\\\\|M\\\\\\|\\_{\\*}^{2(L-1)/L}\\\\leq F(M)\\\\leq(1+\\\\delta)L{(d\\_{0}d\\_{L})}^{1/L}\\\\\\|M\\\\\\|\\_{\\*}^{2(L-1)/L}. |  | (5) |\n\n2. 2.\n\n\nLet ùëæ‚àó‚ààarg‚Äãminùëæ:‚Ñí‚Äã(ùëæ)=0‚Å°tr‚Äã\\[‚àá2‚Ñí‚Äã(ùëæ)\\]superscriptùëæsubscriptargmin:ùëæ‚Ñíùëæ0trdelimited-\\[\\]superscript‚àá2‚Ñíùëæ{\\\\bm{W}}^{\\*}\\\\in\\\\operatorname\\*{arg\\\\,min}\\_{{\\\\bm{W}}:{\\\\mathcal{L}}({\\\\bm{W}})=0}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}({\\\\bm{W}})\\] be an interpolating solution with minimal trace of Hessian . Then E‚Äã(ùëæ‚àó)ùê∏superscriptùëæE({\\\\bm{W}}^{\\*}) roughly minimizes the nuclear norm among all interpolating solutions of ‚Ñí‚Ä≤superscript‚Ñí‚Ä≤{\\\\mathcal{L}}^{\\\\prime}. That is,\n\n\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚ÄñE‚Äã(ùëæ‚àó)‚Äñ‚àó‚â§1+Œ¥1‚àíŒ¥‚Äãmin‚Ñí‚Ä≤‚Äã(M)=0‚Å°‚ÄñM‚Äñ‚àó.subscriptnormùê∏superscriptùëæ1ùõø1ùõøsubscriptsuperscript‚Ñí‚Ä≤ùëÄ0subscriptnormùëÄ\\\\displaystyle\\\\\\|E({\\\\bm{W}}^{\\*})\\\\\\|\\_{\\*}\\\\leq\\\\frac{1+\\\\delta}{1-\\\\delta}\\\\min\\_{{\\\\mathcal{L}}^{\\\\prime}(M)=0}\\\\\\|M\\\\\\|\\_{\\*}. |  |\n\n\n| Settings | Induced Regularizer F‚Äã(M)/LùêπùëÄùêøF(M)/L | Theorem |\n| --- | --- | --- |\n| (1,Œ¥)1ùõø(1,\\\\delta)-RIP | (1¬±O‚Äã(Œ¥))‚Äã(d0‚ÄãdL)1/L‚Äã‚ÄñM‚Äñ‚àó2‚àí2/Lplus-or-minus1ùëÇùõøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsuperscriptsubscriptnormùëÄ22ùêø(1\\\\pm O(\\\\delta)){(d\\_{0}d\\_{L})}^{1/L}\\\\\\|M\\\\\\|\\_{\\*}^{2-\\\\nicefrac{{2}}{{L}}} | [Theorem1]Theorem 1 (Induced regularizer under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") |\n| L=2ùêø2L=2 | ‚Äñ(1n‚ÄãAi‚ÄãAi‚ä§)1/2‚ÄãM‚Äã(1n‚ÄãAi‚ä§‚ÄãAi)1/2‚Äñ‚àósubscriptnormsuperscript1ùëõsubscriptùê¥ùëñsuperscriptsubscriptùê¥ùëñtop12ùëÄsuperscript1ùëõsuperscriptsubscriptùê¥ùëñtopsubscriptùê¥ùëñ12\\\\left\\\\\\|\\\\left(\\\\frac{1}{n}A\\_{i}A\\_{i}^{\\\\top}\\\\right)^{\\\\nicefrac{{1}}{{2}}}M\\\\left(\\\\frac{1}{n}A\\_{i}^{\\\\top}A\\_{i}\\\\right)^{\\\\nicefrac{{1}}{{2}}}\\\\right\\\\\\|\\_{\\*} | [Theorem5]Theorem 5 (Ding et al. (2022)). ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") ((Ding et al., [2022]))) |\n| n=1ùëõ1n=1 | ‚Äñ(AT‚ÄãM)L‚àí1‚ÄãAT‚ÄñS2/L2/Lsuperscriptsubscriptnormsuperscriptsuperscriptùê¥ùëáùëÄùêø1superscriptùê¥ùëásubscriptùëÜ2ùêø2ùêø\\\\left\\\\\\|\\\\Big{(}A^{T}M\\\\Big{)}^{L-1}A^{T}\\\\right\\\\\\|\\_{S\\_{2/L}}^{2/L} | [Theorem7]Theorem 7. ‚Ä£ 6 Result for the Single Measurement Case ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") |\n\nTable 1: Summary of properties of the induced regularizer in the end-to-end matrix space. Here ‚à•‚ãÖ‚à•Sp\\\\left\\\\\\|\\\\cdot\\\\right\\\\\\|\\_{S\\_{p}} denotes the Schatten pùëùp-norm for p‚àà\\[1,‚àû\\]ùëù1p\\\\in\\[1,\\\\infty\\] and Schatten pùëùp-quasinorm for p‚àà(0,1)ùëù01p\\\\in(0,1) (see [Definition2]Definition 2 (Schatten ùëù-(quasi)norm). ‚Ä£ Rademacher Complexity. ‚Ä£ 3 Preliminaries ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")). ‚à•‚ãÖ‚à•‚àó\\\\left\\\\\\|\\\\cdot\\\\right\\\\\\|\\_{\\*} denotes the Schatten 1-norm, also known as the nuclear norm.\n\nHowever, for more general cases, it is challenging to compute the closed-form expression of FùêπF. In this work, we derive closed-form expressions for FùêπF in the following two cases: (1) depth LùêøL is equal to 222 and (2) there is only one measurement, _i.e._, n=1ùëõ1n=1 (see [Table1]In 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")).\nLeveraging the above characterization of induced regularzier, we obtain the following result on the generalization bounds:\n\n###### Theorem 2(Recovery of the ground truth under RIP).\n\nSuppose the linear measurements {(Ai)}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{(A\\_{i})\\\\}\\_{i=1}^{n} satisfy the (2,Œ¥‚Äã(n))2ùõøùëõ(2,\\\\delta(n))-RIP ( [Definition3]Definition 3 (Restricted Isometry Property (RIP)). ‚Ä£ 5.1 Preliminaries for RIP ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")). Then for any ùêñ‚àó‚ààarg‚Äãminùêñ:‚Ñí‚Äã(ùêñ)=0‚Å°tr‚Äã\\[‚àá2‚Ñí‚Äã(ùêñ)\\]superscriptùêñsubscriptargmin:ùêñ‚Ñíùêñ0trdelimited-\\[\\]superscript‚àá2‚Ñíùêñ{\\\\bm{W}}^{\\*}\\\\in\\\\operatorname\\*{arg\\\\,min}\\\\limits\\_{{\\\\bm{W}}:{\\\\mathcal{L}}({\\\\bm{W}})=0}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}({\\\\bm{W}})\\], we have\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÄñE‚Äã(ùëæ‚àó)‚àíM‚àó‚ÄñF2‚â§8‚ÄãŒ¥‚Äã(n)(1‚àíŒ¥‚Äã(n))2‚Äã‚ÄñM‚àó‚Äñ‚àó2.superscriptsubscriptnormùê∏superscriptùëæsuperscriptùëÄùêπ28ùõøùëõsuperscript1ùõøùëõ2superscriptsubscriptnormsuperscriptùëÄ2\\\\displaystyle\\\\\\|E({\\\\bm{W}}^{\\*})-M^{\\*}\\\\\\|\\_{F}^{2}\\\\leq\\\\frac{8\\\\delta(n)}{(1-\\\\delta(n))^{2}}\\\\\\|M^{\\*}\\\\\\|\\_{\\*}^{2}. |  | (6) |\n\nwhere Œ¥‚Äã(n)ùõøùëõ\\\\delta(n) depends on the number of measurements nùëõn and the distribution of the measurements.\n\nIf we further suppose {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} are independently sampled from some distribution over ‚ÑùdL√ód0superscript‚Ñùsubscriptùëëùêøsubscriptùëë0\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}} satisfying that ùîºA‚Äã‚ü®A,M‚ü©2=‚ÄñM‚ÄñF2subscriptùîºùê¥superscriptùê¥ùëÄ2superscriptsubscriptnormùëÄùêπ2\\\\mathbb{E}\\_{A}\\\\left\\\\langle A,M\\\\right\\\\rangle^{2}=\\\\left\\\\\\|M\\\\right\\\\\\|\\_{F}^{2}, _e.g._, the standard multivariate Gaussian distribution, denoted by ùí¢dL√ód0subscriptùí¢subscriptùëëùêøsubscriptùëë0{\\\\mathcal{G}}\\_{d\\_{L}\\\\times d\\_{0}}, we know Œ¥‚Äã(n)=O‚Äã(dL+d0n)ùõøùëõùëÇsubscriptùëëùêøsubscriptùëë0ùëõ\\\\delta(n)=O(\\\\sqrt{\\\\tfrac{d\\_{L}+d\\_{0}}{n}}) from Candes and Plan ( [2011]))\n(see [Section5.1]Preliminaries for RIP ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") for more examples).\n\n###### Theorem 3.\n\nFor n‚â•Œ©‚Äã(r‚Äã(d0+dL))ùëõŒ©ùëüsubscriptùëë0subscriptùëëùêøn\\\\geq\\\\Omega(r(d\\_{0}+d\\_{L})), with probability at least 1‚àíexp‚Å°(Œ©‚Äã(d0+dL))1Œ©subscriptùëë0subscriptùëëùêø1-\\\\exp(\\\\Omega(d\\_{0}+d\\_{L})) over the randomly sampled {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} from multivariate Gaussian distribution ùí¢ùí¢{\\\\mathcal{G}}, for any minimum trace of Hessian interpolating solution ùêñ‚àó‚ààarg‚Äãminùêñ:‚Ñí‚Äã(ùêñ)=0‚Å°tr‚Äã\\[‚àá2‚Ñí‚Äã(ùêñ)\\]superscriptùêñsubscriptargmin:ùêñ‚Ñíùêñ0trdelimited-\\[\\]superscript‚àá2‚Ñíùêñ{\\\\bm{W}}^{\\*}\\\\in\\\\operatorname\\*{arg\\\\,min}\\\\limits\\_{{\\\\bm{W}}:{\\\\mathcal{L}}({\\\\bm{W}})=0}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}({\\\\bm{W}})\\], the population loss ‚Ñí¬Ø‚Äã(ùêñ‚àó)‚âúùîºA‚àºùí¢‚Äã(‚ü®A,E‚Äã(ùêñ‚àó)‚ü©‚àí‚ü®A,M‚àó‚ü©)2‚âú¬Ø‚Ñísuperscriptùêñsubscriptùîºsimilar-toùê¥ùí¢superscriptùê¥ùê∏superscriptùêñùê¥superscriptùëÄ2\\\\overline{\\\\mathcal{L}}({\\\\bm{W}}^{\\*})\\\\triangleq\\\\mathbb{E}\\_{A\\\\sim{\\\\mathcal{G}}}(\\\\left\\\\langle A,E({\\\\bm{W}}^{\\*})\\\\right\\\\rangle-\\\\left\\\\langle A,M^{\\*}\\\\right\\\\rangle)^{2} satisfies that\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚Ñí¬Ø‚Äã(ùëæ‚àó)=‚ÄñE‚Äã(ùëæ‚àó)‚àíM‚àó‚ÄñF2‚â§O‚Äã(d0+dLn‚Äã‚ÄñM‚àó‚Äñ‚àó2‚Äãlog3‚Å°n).¬Ø‚Ñísuperscriptùëæsuperscriptsubscriptnormùê∏superscriptùëæsuperscriptùëÄùêπ2ùëÇsubscriptùëë0subscriptùëëùêøùëõsuperscriptsubscriptnormsuperscriptùëÄ2superscript3ùëõ\\\\displaystyle\\\\overline{\\\\mathcal{L}}({\\\\bm{W}}^{\\*})=\\\\left\\\\\\|E({\\\\bm{W}}^{\\*})-M^{\\*}\\\\right\\\\\\|\\_{F}^{2}\\\\leq O\\\\Big{(}\\\\frac{d\\_{0}+d\\_{L}}{n}\\\\\\|M^{\\*}\\\\\\|\\_{\\*}^{2}\\\\log^{3}n\\\\Big{)}. |  |\n\nNext, we state a lower bound for the conventional estimator for overparameterized models that minimizes the norm. The lower bound states that, to achieve a small error, the number of samples should be as large as the product of the dimensions of the end-to-end matrix d0‚ÄãdLsubscriptùëë0subscriptùëëùêød\\_{0}d\\_{L} as opposed to d0+dLsubscriptùëë0subscriptùëëùêød\\_{0}+d\\_{L} in case of the min trace of Hessian minimizer. It is proved in Appendix [D]Appendix D Proof of Theorem 4 ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\n###### Theorem 4(Lower bound for ‚Ñì2subscript‚Ñì2\\\\ell\\_{2} regression).\n\nSuppose {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} are randomly sampled from multivariate Gaussian distribution ùí¢ùí¢{\\\\mathcal{G}}, let ùêñ~=arg‚Äãminùêñ:‚Ñí‚Äã(ùêñ)=0‚Å°‚ÄñE‚Äã(ùêñ)‚ÄñF~ùêñsubscriptargmin:ùêñ‚Ñíùêñ0subscriptnormùê∏ùêñùêπ\\\\tilde{\\\\bm{W}}=\\\\operatorname\\*{arg\\\\,min}\\_{{\\\\bm{W}}:{\\\\mathcal{L}}({\\\\bm{W}})=0}\\\\\\|E({\\\\bm{W}})\\\\\\|\\_{F} to be the minimum Frobenius norm interpolating solution, then the expected population loss is\n\n|     |     |     |\n| --- | --- | --- |\n|  | missingE‚Å°‚Ñí¬Ø‚Äã(ùëæ~)=(1‚àímin‚Å°{n,d0‚ÄãdL}d0‚ÄãdL)‚Äã‚ÄñM‚àó‚ÄñF2.missingE¬Ø‚Ñí~ùëæ1ùëõsubscriptùëë0subscriptùëëùêøsubscriptùëë0subscriptùëëùêøsuperscriptsubscriptnormsuperscriptùëÄùêπ2\\\\displaystyle\\\\operatorname{\\\\mathop{\\\\mathbb{missing}}{E}}\\\\overline{{\\\\mathcal{L}}}(\\\\tilde{\\\\bm{W}})=(1-\\\\tfrac{\\\\min\\\\{n,d\\_{0}d\\_{L}\\\\}}{d\\_{0}d\\_{L}})\\\\left\\\\\\|M^{\\*}\\\\right\\\\\\|\\_{F}^{2}. |  |\n\nThe lower bound in Theorem [4]Theorem 4 (Lower bound for ‚Ñì‚ÇÇ regression). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") shows in order to obtain an O‚Äã(1)ùëÇ1O(1)-relatively accurate estimates of the ground truth in expectation, namely to guarantee missingE‚Å°‚Ñí¬Ø‚Äã(ùëæ~)‚â§O‚Äã(1)‚Äã‚ÄñM‚àó‚ÄñF2missingE¬Ø‚Ñí~ùëæùëÇ1superscriptsubscriptnormsuperscriptùëÄùêπ2\\\\operatorname{\\\\mathop{\\\\mathbb{missing}}{E}}\\\\overline{{\\\\mathcal{L}}}(\\\\tilde{\\\\bm{W}})\\\\leq O(1)\\\\\\|M^{\\*}\\\\\\|\\_{F}^{2}, the minimum Frobenius norm interpolating solution needs at least Œ©‚Äã(d0‚ÄãdL)Œ©subscriptùëë0subscriptùëëùêø\\\\Omega(d\\_{0}d\\_{L}) samples. In contrast, the minimizer of trace of Hessian in the same problem only requires O‚Äã((d0+dL)‚Äã‚ÄñM‚àó‚Äñ‚àó2/‚ÄñM‚àó‚ÄñF2)ùëÇsubscriptùëë0subscriptùëëùêøsuperscriptsubscriptnormsuperscriptùëÄ2superscriptsubscriptnormsuperscriptùëÄùêπ2O((d\\_{0}+d\\_{L})\\\\\\|M^{\\*}\\\\\\|\\_{\\*}^{2}/\\\\\\|M^{\\*}\\\\\\|\\_{F}^{2}) samples, which is at most O‚Äã(r‚Äã(d0+dL)d0‚ÄãdL)ùëÇùëüsubscriptùëë0subscriptùëëùêøsubscriptùëë0subscriptùëëùêøO(\\\\frac{r(d\\_{0}+d\\_{L})}{d\\_{0}d\\_{L}}) fraction of the number of samples that is required for the minimum Frobenius norm interpolator (Theorem [3]Theorem 3. ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")).",
            "citations": null
          },
          "2 Related Work": {
            "content": "#### Connection Between Sharpness and Generalization.\n\nResearch on the connection between generalization and sharpness dates back to Hochreiter and Schmidhuber ( [1997])). Keskar et al. ( [2016])) famously observe that when increasing the batch size of SGD, the test error and the sharpness of the learned solution both increase. Jastrzebski et al. ( [2017])) extend this observation and found that there is a positive correlation between sharpness and the ratio between learning rate and batch size. Jiang et al. ( [2019])) perform a large-scale empirical study on various notions of generalization measures and show that sharpness-based measures correlate with generalization best. Liu et al. ( [2022a])) find that among language models with the same validation pretraining loss, those that have smaller sharpness can have better downstream performance. On the other hand, Dinh et al. ( [2017])) argue that for networks with scaling invariance, there always exist models with good generalization but with arbitrarily large sharpness. We note this does not contradict our main result here, which only asserts the interpolation solution with a minimal trace of Hessian generalizes well, but not vice versa. Empirically, sharpness minimization is also a popular and effective regularization method for overparametrized models (Norton and Royset, [2021]); Foret et al., [2021]); Zheng et al., [2021]); Wu et al., [2020]); Kwon et al., [2021]); Liu et al., [2022b]); Zhuang et al., [2022]); Zhao et al., [2022]); Andriushchenko and Flammarion, [2022])).\n\n#### Implicit Bias of Sharpness Minimization.\n\nRecent theoretical works (Blanc et al., [2019]); Damian et al., [2021]); Li et al., [2021]); Liu et al., [2022a])) show that SGD with label noise is implicitly biased toward local minimizers with a smaller trace of Hessian under the assumption that the minimizers locally connect as a manifold. Such a manifold setting is empirically verified by Draxler et al. ( [2018])); Garipov et al. ( [2018])) in the sense that the set of minimizers of the training loss is path-connected. It is the same situation for the deep matrix factorization problem studied in this paper, although we do not study the optimization trajectory. Instead, we directly study properties of the minimum trace of Hessian interpolation solution.\n\nSharpness-reduction implicit bias can also happen for deterministic GD. Arora et al. ( [2022])) show that normalized GD implicitly penalizes the largest eigenvalue of the Hessian. Ma et al. ( [2022])) argues that such sharpness reduction phenomena can also be caused by a multi-scale loss landscape. Lyu et al. ( [2022])) show that GD with weight decay on a scale-invariant loss function implicitly decreases the spherical sharpness, _i.e._, the largest eigenvalue of the Hessian evaluated at the normalized parameter. Another line of work focuses on the sharpness minimization effect of a large learning rate in GD, assuming that it converges at the end of training. This has been studied mainly through linear stability analysis (Wu et al., [2018]); Cohen et al., [2021]); Ma and Ying, [2021]); Cohen et al., [2022])). Recent theoretical analysis (Damian et al., [2022]); Li et al., [2022])) showed that the sharpness minimization effect of a large learning rate in GD does not necessarily rely on convergence and linear stability, through a four-phase characterization of the dynamics at the Edge of Stability regime (Cohen et al., [2021])).\n\n#### Sharpness-related Generalization Bounds.\n\nMost existing sharpness-related generalizations depend on not only the sharpness of the training loss but also other complexity measures like a norm of the parameters or even undesirable dependence on the number of parameters (Dziugaite and Roy, [2017]); Wei and Ma, [2019a]), [b]); Foret et al., [2021]); Norton and Royset, [2021])). In contrast, our result only involves the trace of Hessian but not parameter norm or the number of parameters, _e.g._, our result holds for any (large) width of intermediate layers, d1,‚Ä¶,dL‚àí1subscriptùëë1‚Ä¶subscriptùëëùêø1d\\_{1},\\\\ldots,d\\_{L-1}.\n\n#### Implicit Bias of Gradient Descent on Matrix Factorization.\n\nAt first glance, overfitting could happen when the number of linear measurements is less than the size of the groundtruth matrix. Surprisingly, a recent line of works (Gunasekar et al., [2017]); Arora et al., [2019]); Gissin et al., [2019]); Li et al., [2020]); Razin and Cohen, [2020]); Belabbas, [2020]); Jacot et al., [2021]); Razin et al., [2021])) has shown that GD starting from small initialization has a good implicit bias towards solutions with approximate recovery of ground truth. Notably, Gunasekar et al. ( [2017])) show that for depth 222, GD from infinitesimal initialization is implicitly biased to the minimum nuclear norm solution under commuting measurements and Arora et al. ( [2019])) generalize this results to deep matrix factorization for any depth. This is very similar to our main result that for all depth (‚â•2absent2\\\\geq 2) the implicit regularization is minimizing nuclear norm, though the settings are different. Moreover, when the measurements satisfy RIP, Li et al. ( [2017])); St√∂ger and Soltanolkotabi ( [2021])) show that GD exactly recovers the ground truth.\n\n#### Provable Generalization of Flatness Regularization for Two-layer Models.\n\nTo our best knowledge, most existing generalization analysis for flat regularization are for two-layer models, _e.g._, Li et al. ( [2021])) shows that the min trace of hessian interpolating solution of 2-layer diagonal linear networks can recover sparse ground truth on gaussian or boolean data, and Nacson et al. ( [2022])) proves a generalization bound for the interpolating solutions with the smallest maximum eigenvalue of Hessian for non-centered data.\nDing et al. ( [2022])) is probably the most related work to ours, which shows that the trace of Hessian implicit bias for two-layer matrix factorization is a rescaled version of the nuclear norm of the end-to-end matrix. Using this formula, they further prove that the flattest solution in this problem recovers the low-rank ground truth. However, matrix factorization with more than two layers is fundamentally more challenging compared to the depth two case; while we managed to obtain a formula for the trace of Hessian for deeper networks given a single measurement (see [Theorem7]Theorem 7. ‚Ä£ 6 Result for the Single Measurement Case ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")), as far as we know, one in general cannot obtain a closed-form solution for the trace of Hessian regularizer as a function of the end-to-end matrix for multiple measurements. In this work, we discover a way to bypass this hardness by showing that minimizing the trace of Hessian regularizer for a fixed end-to-end matrix approximately amounts to the nuclear norm of the end-to-end matrix, when the linear measurements satisfy the RIP property. As a cost of this approximation, we are not able to show the exact recovery of the low-rank ground truth, but only up to a certain precision.\n\n#### Sharpness Minimization in Deep Diagonal Linear Network.\n\nDing et al. ( [2022])) show that the minimizer of trace of Hessianin a deep diagonal matrix factorization model with Gaussian linear measurements becomes the Schatten 2‚àí2/L22ùêø2-2/L norm of a rescaled version of the end to end matrix. At first glance, their result might seem contradictory to our result in the RIP setup, as their implicit regularization is not always the Nuclear norm ‚Äî the sparsity regularization vanishes when L‚Üí‚àû‚ÜíùêøL\\\\to\\\\infty. Similar results have been obtained by Nacson et al. ( [2022])) for minimizing a different notion of sharpness among all interpolating solutions, the largest eigenvalue of Hessian, on the same diagonal linear models. The subtle difference is that since we consider the more standard setting without assuming the weight matrices are all diagonal, then in the calculation of the trace of Hessian of the loss we need to also differentiate the loss with respect to the non-diagonal entries, even though their values are zero, which is quite different from ‚Ñìpsubscript‚Ñìùëù\\\\ell\\_{p} norm regularization.\nThis curiously shows the complicated interplay between the geometry of the loss landscape and the implicit bias of the algorithm.",
            "citations": null
          },
          "3 Preliminaries": {
            "content": "Notation. We use \\[n\\]delimited-\\[\\]ùëõ\\[n\\] to denote {1,2,‚Ä¶,n}12‚Ä¶ùëõ\\\\{1,2,\\\\ldots,n\\\\} for every n‚àà‚Ñïùëõ‚Ñïn\\\\in\\\\mathbb{N}. We use ‚ÄñM‚ÄñFsubscriptnormùëÄùêπ\\\\left\\\\\\|M\\\\right\\\\\\|\\_{F}, ‚ÄñM‚Äñ‚àósubscriptnormùëÄ\\\\left\\\\\\|M\\\\right\\\\\\|\\_{\\*}, ‚ÄñM‚Äñ2subscriptnormùëÄ2\\\\left\\\\\\|M\\\\right\\\\\\|\\_{2} and tr‚Äã(M)trùëÄ\\\\textup{tr}(M) to denote the Frobenius norm, nuclear norm, spectral norm and trace of matrix MùëÄM respectively. For any function fùëìf defined over set SùëÜS such that minx‚ààS‚Å°f‚Äã(x)subscriptùë•ùëÜùëìùë•\\\\min\\_{x\\\\in S}f(x) exists, we use arg‚ÄãminS‚Å°fsubscriptargminùëÜùëì\\\\operatorname\\*{arg\\\\,min}\\_{S}f to denote the set {y‚ààS‚à£f‚Äã(y)=minx‚ààS‚Å°f‚Äã(x)}conditional-setùë¶ùëÜùëìùë¶subscriptùë•ùëÜùëìùë•\\\\{y\\\\in S\\\\mid f(y)=\\\\min\\_{x\\\\in S}f(x)\\\\}. Given a matrix MùëÄM, we use hMsubscript‚ÑéùëÄh\\_{M} to denote the linear map A‚Ü¶‚ü®A,M‚ü©maps-toùê¥ùê¥ùëÄA\\\\mapsto\\\\left\\\\langle A,M\\\\right\\\\rangle. We use ‚Ñãrsubscript‚Ñãùëü{\\\\mathcal{H}}\\_{r} to to denote the set ‚Ñãr‚âú{hM‚à£‚ÄñM‚Äñ‚àó‚â§r}‚âúsubscript‚Ñãùëüconditional-setsubscript‚ÑéùëÄsubscriptnormùëÄùëü{\\\\mathcal{H}}\\_{r}\\\\triangleq\\\\{h\\_{M}\\\\mid\\\\left\\\\\\|M\\\\right\\\\\\|\\_{\\*}\\\\leq r\\\\}. Mi:subscriptùëÄ:ùëñabsentM\\_{i:} and M:jsubscriptùëÄ:absentùëóM\\_{:j} are used to denote the iùëñith row and jùëójth column of the matrix MùëÄM.\n\nThe following definitions will be important to the technical discussion in the paper.\n\n#### Rademacher Complexity.\n\nGiven nùëõn data points {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n}, the _empirical Rademacher complexity_ of function class ‚Ñã‚Ñã{\\\\mathcal{H}} is defined as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñõn‚Äã(‚Ñã)subscript‚Ñõùëõ‚Ñã\\\\displaystyle{\\\\mathcal{R}}\\_{n}({\\\\mathcal{H}}) | =1n‚ÄãmissingEœµ‚àº{¬±1}n‚Äãsuph‚àà‚Ñã‚àëi=1nœµi‚Äãh‚Äã(Ai).absent1ùëõsubscriptmissingEsimilar-toitalic-œµsuperscriptplus-or-minus1ùëõsubscriptsupremum‚Ñé‚Ñãsuperscriptsubscriptùëñ1ùëõsubscriptitalic-œµùëñ‚Ñésubscriptùê¥ùëñ\\\\displaystyle=\\\\frac{1}{n}\\\\operatorname{\\\\mathop{\\\\mathbb{missing}}{E}}\\_{\\\\epsilon\\\\sim\\\\{\\\\pm 1\\\\}^{n}}\\\\sup\\_{h\\\\in{\\\\mathcal{H}}}\\\\sum\\_{i=1}^{n}\\\\epsilon\\_{i}h(A\\_{i}). |  |\n\nGiven a distribution PùëÉP, the _population Rademacher complexity_ is defined as follows:\n‚Ñõ¬Øn‚Äã(‚Ñã)=missingEAi‚Äã‚àºi‚Äãi‚Äãd‚ÄãP‚Å°‚Ñõn‚Äã(‚Ñã)subscript¬Ø‚Ñõùëõ‚ÑãsubscriptmissingEsubscriptùê¥ùëñùëñùëñùëësimilar-toùëÉsubscript‚Ñõùëõ‚Ñã\\\\overline{\\\\mathcal{R}}\\_{n}({\\\\mathcal{H}})=\\\\operatorname{\\\\mathop{\\\\mathbb{missing}}{E}}\\\\limits\\_{A\\_{i}\\\\overset{iid}{\\\\sim}P}{\\\\mathcal{R}}\\_{n}({\\\\mathcal{H}}). This is mainly used to upper bound the generalization gap of SGD.\n\n###### Definition 2(Schatten pùëùp-(quasi)norm).\n\nGiven any d,d‚Ä≤‚àà‚Ñï+ùëësuperscriptùëë‚Ä≤superscript‚Ñïd,d^{\\\\prime}\\\\in\\\\mathbb{N}^{+}, p‚àà(0,‚àû)ùëù0p\\\\in(0,\\\\infty) a matrix M‚àà‚Ñùd√ód‚Ä≤ùëÄsuperscript‚Ñùùëësuperscriptùëë‚Ä≤M\\\\in\\\\mathbb{R}^{d\\\\times d^{\\\\prime}} with singular values œÉ1‚Äã(M),‚Ä¶,œÉmin‚Å°(d,d‚Ä≤)‚Äã(M)subscriptùúé1ùëÄ‚Ä¶subscriptùúéùëësuperscriptùëë‚Ä≤ùëÄ\\\\sigma\\_{1}(M),\\\\ldots,\\\\sigma\\_{\\\\min(d,d^{\\\\prime})}(M), we define the Schattern pùëùp-(semi)norm as\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚ÄñM‚ÄñSp=(‚àëi=1min‚Å°(d,d‚Ä≤)œÉip‚Äã(M))1/p.subscriptnormùëÄsubscriptùëÜùëùsuperscriptsuperscriptsubscriptùëñ1ùëësuperscriptùëë‚Ä≤superscriptsubscriptùúéùëñùëùùëÄ1ùëù\\\\displaystyle\\\\left\\\\\\|M\\\\right\\\\\\|\\_{S\\_{p}}=\\\\left(\\\\sum\\\\nolimits\\_{i=1}^{\\\\min(d,d^{\\\\prime})}{\\\\sigma\\_{i}^{p}(M)}\\\\right)^{1/p}. |  |\n\nNote that in this definition ‚à•‚ãÖ‚à•Sp\\\\left\\\\\\|\\\\cdot\\\\right\\\\\\|\\_{S\\_{p}} is a norm only when p‚â•1ùëù1p\\\\geq 1. When p‚àà(0,1)ùëù01p\\\\in(0,1), the triangle inequality does not hold. Note that when p‚àà(0,1)ùëù01p\\\\in(0,1), ‚ÄñA+B‚ÄñSp‚â§21/p‚àí1‚Äã(‚ÄñA‚ÄñSp+‚ÄñB‚ÄñSp)subscriptnormùê¥ùêµsubscriptùëÜùëùsuperscript21ùëù1subscriptnormùê¥subscriptùëÜùëùsubscriptnormùêµsubscriptùëÜùëù\\\\left\\\\\\|A+B\\\\right\\\\\\|\\_{S\\_{p}}\\\\leq 2^{\\\\nicefrac{{1}}{{p}}-1}(\\\\left\\\\\\|A\\\\right\\\\\\|\\_{S\\_{p}}+\\\\left\\\\\\|B\\\\right\\\\\\|\\_{S\\_{p}}) for any matrices Aùê¥A and BùêµB, however, 21/p‚àí1>1superscript21ùëù112^{\\\\nicefrac{{1}}{{p}}-1}>1.\n\nWe use LùêøL to denote the depth of the linear model and ùëæ=(W1,‚Ä¶,WL)ùëæsubscriptùëä1‚Ä¶subscriptùëäùêø{\\\\bm{W}}=(W\\_{1},\\\\ldots,W\\_{L}) to denote the parameters, where Wi‚àà‚Ñùdi√ódi‚àí1subscriptùëäùëñsuperscript‚Ñùsubscriptùëëùëñsubscriptùëëùëñ1W\\_{i}\\\\in\\\\mathbb{R}^{d\\_{i}\\\\times d\\_{i-1}}. We assume that di‚â•min‚Å°(d0,dL)subscriptùëëùëñsubscriptùëë0subscriptùëëùêød\\_{i}\\\\geq\\\\min(d\\_{0},d\\_{L}) for each i‚àà\\[L‚àí1\\]ùëñdelimited-\\[\\]ùêø1i\\\\in\\[L-1\\] and, thus, the image of E‚Äã(ùëæ)ùê∏ùëæE({\\\\bm{W}}) is the entire ‚ÑùdL√ód0superscript‚Ñùsubscriptùëëùêøsubscriptùëë0\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}.\nFollowing is a simple relationship between nuclear norm and Frobenius norm that is used frequently in the paper.\n\n###### Lemma 1.\n\nFor any matrices Aùê¥A and BùêµB, it holds that ‚ÄñA‚ÄãB‚Äñ‚àó‚â§‚ÄñA‚ÄñF‚Äã‚ÄñB‚ÄñFsubscriptnormùê¥ùêµsubscriptnormùê¥ùêπsubscriptnormùêµùêπ\\\\\\|AB\\\\\\|\\_{\\*}\\\\leq\\\\\\|A\\\\\\|\\_{F}\\\\\\|B\\\\\\|\\_{F}.",
            "citations": null
          },
          "4 Exact Formulation of Induced Regularizer by Trace of Hessian": {
            "content": "In this section, we derive the exact formulation of trace of Hessian for ‚Ñì2subscript‚Ñì2\\\\ell\\_{2} loss over deep matrix factorization models with linear measurements as a minimization problem over ùëæùëæ{\\\\bm{W}}. We shall later approximate this formula by a different function in Section [5]Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), which allows us to calculate the implicit bias in closed-form in the space of end-to-end matrices.\n\nWe first introduce the following simple lemma showing that the trace of the Hessian of the loss is equal to the sum of squares of norms of the gradients of the neural network output.\n\n###### Lemma 2.\n\nFor any twice-differentiable function {fi‚Äã(ùêñ)}i=1nsuperscriptsubscriptsubscriptùëìùëñùêñùëñ1ùëõ\\\\{f\\_{i}({\\\\bm{W}})\\\\}\\_{i=1}^{n}, real-valued labels {bi}i=1nsuperscriptsubscriptsubscriptùëèùëñùëñ1ùëõ\\\\{b\\_{i}\\\\}\\_{i=1}^{n}, loss function ‚Ñí‚Äã(ùêñ)=1n‚Äã‚àëi=1n(fi‚Äã(ùêñ)‚àíbi)2‚Ñíùêñ1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùëìùëñùêñsubscriptùëèùëñ2\\\\mathcal{L}(\\\\mathbf{W})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}(f\\_{i}({\\\\bm{W}})-b\\_{i})^{2}, and any ùêñùêñ{\\\\bm{W}} satisfying ‚Ñí‚Äã(ùêñ)=0‚Ñíùêñ0{\\\\mathcal{L}}({\\\\bm{W}})=0, it holds that\n\n|     |     |     |\n| --- | --- | --- |\n|  | tr‚Äã(‚àá2‚Ñí‚Äã(ùêñ))=2n‚Äã‚àëi=1n‚Äñ‚àáfi‚Äã(ùêñ)‚Äñ2.trsuperscript‚àá2‚Ñíùêñ2ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptnorm‚àásubscriptùëìùëñùêñ2\\\\displaystyle\\\\textup{tr}(\\\\nabla^{2}{\\\\mathcal{L}}({\\\\mathbf{W}}))=\\\\frac{2}{n}\\\\sum\\_{i=1}^{n}\\\\\\|\\\\nabla f\\_{i}(\\\\mathbf{W})\\\\\\|^{2}. |  |\n\nUsing Lemma [2]Lemma 2. ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we calculate the trace of Hessian for the particular loss defined in ( [2]Equation 2 ‚Ä£ Deep Matrix Factorization. ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")). To do this, we consider ùêñùêñ\\\\mathbf{W} in Lemma [2]Lemma 2. ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") to be the concatenation of matrices (W1,‚Ä¶,WL)subscriptùëä1‚Ä¶subscriptùëäùêø(W\\_{1},\\\\dots,W\\_{L}) and we set fi‚Äã(ùëæ)subscriptùëìùëñùëæf\\_{i}({\\\\bm{W}}) to be the linear measurement ‚ü®Ai,E‚Äã(ùëæ)‚ü©subscriptùê¥ùëñùê∏ùëæ\\\\left\\\\langle A\\_{i},E({\\\\bm{W}})\\\\right\\\\rangle, where E‚Äã(ùëæ)=WL‚Äã‚ãØ‚ÄãW1ùê∏ùëæsubscriptùëäùêø‚ãØsubscriptùëä1E({\\\\bm{W}})=W\\_{L}\\\\cdots W\\_{1} (see ( [1]Equation 1 ‚Ä£ Deep Matrix Factorization. ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"))).\nTo calculate the trace of Hessian, according to Lemma [2]Lemma 2. ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we need to calculate the gradient of ‚Ñí‚Äã(ùêñ)‚Ñíùêñ\\\\mathcal{L}(\\\\mathbf{W}) in ( [2]Equation 2 ‚Ä£ Deep Matrix Factorization. ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")). To this end, for a fixed iùëñi, we compute the gradient of ‚ü®Ai,E‚Äã(ùëæ)‚ü©subscriptùê¥ùëñùê∏ùëæ\\\\left\\\\langle A\\_{i},E({\\\\bm{W}})\\\\right\\\\rangle with respect to one of the weight matrices WjsubscriptùëäùëóW\\_{j}.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àáWj‚ü®Ai,E‚Äã(ùëæ)‚ü©subscript‚àásubscriptùëäùëósubscriptùê¥ùëñùê∏ùëæ\\\\displaystyle\\\\nabla\\_{W\\_{j}}\\\\left\\\\langle A\\_{i},E({\\\\bm{W}})\\\\right\\\\rangle | =‚àáWjtr‚Äã(Ai‚ä§‚ÄãWL‚Äã‚Ä¶‚ÄãW1)absentsubscript‚àásubscriptùëäùëótrsuperscriptsubscriptùê¥ùëñtopsubscriptùëäùêø‚Ä¶subscriptùëä1\\\\displaystyle=\\\\nabla\\_{W\\_{j}}\\\\textup{tr}(A\\_{i}^{\\\\top}W\\_{L}\\\\dots W\\_{1}) |  |\n|  |  | =‚àáWjtr‚Äã((Wj‚àí1‚Äã‚Ä¶‚ÄãW1‚ÄãAi‚ä§‚ÄãWL‚Äã‚Ä¶‚ÄãWj+1)‚ÄãWj)absentsubscript‚àásubscriptùëäùëótrsubscriptùëäùëó1‚Ä¶subscriptùëä1superscriptsubscriptùê¥ùëñtopsubscriptùëäùêø‚Ä¶subscriptùëäùëó1subscriptùëäùëó\\\\displaystyle=\\\\nabla\\_{W\\_{j}}\\\\textup{tr}((W\\_{j-1}\\\\dots W\\_{1}A\\_{i}^{\\\\top}W\\_{L}\\\\dots W\\_{j+1})W\\_{j}) |  |\n|  |  | =(Wj‚àí1‚Äã‚Ä¶‚ÄãW1‚ÄãAi‚ä§‚ÄãWL‚Äã‚Ä¶‚ÄãWj+1)‚ä§.absentsuperscriptsubscriptùëäùëó1‚Ä¶subscriptùëä1superscriptsubscriptùê¥ùëñtopsubscriptùëäùêø‚Ä¶subscriptùëäùëó1top\\\\displaystyle=(W\\_{j-1}\\\\dots W\\_{1}A\\_{i}^{\\\\top}W\\_{L}\\\\dots W\\_{j+1})^{\\\\top}. |  |\n\nAccording to Lemma [2]Lemma 2. ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), trace of Hessian is given by\n\n|     |     |     |\n| --- | --- | --- |\n|  | tr‚Äã(‚àá2L)‚Äã(W)=1n‚Äã‚àëi=1n‚àëj=1L‚Äñ‚ü®Ai,E‚Äã(ùëæ)‚ü©‚ÄñF2=1n‚Äã‚àëi=1n‚àëj=1L‚ÄñWj‚àí1‚Äã‚Ä¶‚ÄãW1‚ÄãAi‚ä§‚ÄãWL‚Äã‚Ä¶‚ÄãWj+1‚ÄñF2.trsuperscript‚àá2ùêøW1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùëó1ùêøsuperscriptsubscriptnormsubscriptùê¥ùëñùê∏ùëæùêπ21ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùëó1ùêøsuperscriptsubscriptnormsubscriptùëäùëó1‚Ä¶subscriptùëä1superscriptsubscriptùê¥ùëñtopsubscriptùëäùêø‚Ä¶subscriptùëäùëó1ùêπ2\\\\displaystyle\\\\textup{tr}(\\\\nabla^{2}L)(\\\\textbf{W})=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\sum\\_{j=1}^{L}\\\\\\|\\\\left\\\\langle A\\_{i},E({\\\\bm{W}})\\\\right\\\\rangle\\\\\\|\\_{F}^{2}=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\sum\\_{j=1}^{L}\\\\\\|W\\_{j-1}\\\\dots W\\_{1}A\\_{i}^{\\\\top}W\\_{L}\\\\dots W\\_{j+1}\\\\\\|\\_{F}^{2}. |  |\n\nAs mentioned earlier, our approach is to characterize the minimizer of the trace of Hessian among all interpolating solutions by its induced regularizer in the end-to-end matrix space. The above calculation provides the following more tractable characterization of induced regularizer FùêπF in ( [12]Equation 12 ‚Ä£ Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Äã(M)=minE‚Äã(ùëæ)=M‚Äã‚àëi=1n‚àëj=1L‚ÄñWj‚àí1‚Äã‚Ä¶‚ÄãW1‚ÄãAi‚ä§‚ÄãWL‚Äã‚Ä¶‚ÄãWj+1‚ÄñF2.ùêπùëÄsubscriptùê∏ùëæùëÄsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùëó1ùêøsuperscriptsubscriptnormsubscriptùëäùëó1‚Ä¶subscriptùëä1superscriptsubscriptùê¥ùëñtopsubscriptùëäùêø‚Ä¶subscriptùëäùëó1ùêπ2\\\\displaystyle F(M)=\\\\min\\_{E({\\\\bm{W}})=M}\\\\sum\\_{i=1}^{n}\\\\sum\\_{j=1}^{L}\\\\\\|W\\_{j-1}\\\\dots W\\_{1}A\\_{i}^{\\\\top}W\\_{L}\\\\dots W\\_{j+1}\\\\\\|\\_{F}^{2}. |  | (7) |\n\nIn general, we cannot solve FùêπF in closed form for general linear measurements {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n}; however, interestingly, we show that it can be solved approximately under reasonable assumption on the measurements. In particular, we show that the induced regularizer, as defined in ( [7]Equation 7 ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")), will be approximately proportional to a power of the nuclear norm of E‚Äã(ùëæ)ùê∏ùëæE({\\\\bm{W}}) given that the measurements {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} satisfy a natural norm-preserving property known as the Restricted Isometry Property (RIP) (Candes and Plan, [2011]); Recht et al., [2010])).\n\nBefore diving into the proof of the general result for RIP, we first illustrate the connection between nuclear norm and the induced regularizer for the depth-two case. In this case, fortunately, we can compute the closed form of the induced regularizer. This result was first proved by Ding et al. ( [2022])).\nFor self-completeness, we also provide a short proof.\n\n###### Theorem 5(Ding et al. ( [2022]))).\n\nFor any M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}, it holds that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Äã(M)‚âúminW2‚ÄãW1=M‚Å°tr‚Äã\\[‚àá2‚Ñí\\]‚Äã(ùëæ)=2‚Äã‚Äñ(1n‚Äã‚àëiAi‚ÄãAi‚ä§)1/2‚ÄãM‚Äã(1n‚Äã‚àëiAi‚ä§‚ÄãAi)1/2‚Äñ‚àó.‚âúùêπùëÄsubscriptsubscriptùëä2subscriptùëä1ùëÄtrdelimited-\\[\\]superscript‚àá2‚Ñíùëæ2subscriptnormsuperscript1ùëõsubscriptùëñsubscriptùê¥ùëñsuperscriptsubscriptùê¥ùëñtop12ùëÄsuperscript1ùëõsubscriptùëñsuperscriptsubscriptùê¥ùëñtopsubscriptùê¥ùëñ12\\\\displaystyle F(M)\\\\triangleq\\\\min\\_{W\\_{2}W\\_{1}=M}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}\\]({\\\\bm{W}})=2\\\\left\\\\\\|\\\\left(\\\\tfrac{1}{n}\\\\sum\\\\nolimits\\_{i}A\\_{i}A\\_{i}^{\\\\top}\\\\right)^{\\\\nicefrac{{1}}{{2}}}M\\\\left(\\\\tfrac{1}{n}\\\\sum\\\\nolimits\\_{i}A\\_{i}^{\\\\top}A\\_{i}\\\\right)^{\\\\nicefrac{{1}}{{2}}}\\\\right\\\\\\|\\_{\\*}. |  | (8) |\n\n###### Proof of [Theorem5]Theorem 5 (Ding et al. (2022)). ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\nWe first define B1=(‚àëi=1nAi‚ÄãAiT)12subscriptùêµ1superscriptsuperscriptsubscriptùëñ1ùëõsubscriptùê¥ùëñsuperscriptsubscriptùê¥ùëñùëá12{B\\_{1}}=(\\\\sum\\_{i=1}^{n}A\\_{i}{A\\_{i}}^{T})^{\\\\frac{1}{2}} and B2=(‚àëi=1nAiT‚ÄãAi)12subscriptùêµ2superscriptsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùê¥ùëñùëásubscriptùê¥ùëñ12{B\\_{2}}=(\\\\sum\\_{i=1}^{n}{A\\_{i}}^{T}A\\_{i})^{\\\\frac{1}{2}}.\nTherefore we have that\n\n|     |     |     |\n| --- | --- | --- |\n|  | tr‚Äã\\[‚àá2‚Ñí\\]‚Äã(ùëæ)=‚àëi=1n(‚ÄñAiT‚ÄãW2‚ÄñF2+‚ÄñW1‚ÄãAiT‚ÄñF2)=‚ÄñB1‚ÄãW2‚ÄñF2+‚ÄñW1‚ÄãB2‚ÄñF2.trdelimited-\\[\\]superscript‚àá2‚Ñíùëæsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptnormsuperscriptsubscriptùê¥ùëñùëásubscriptùëä2ùêπ2superscriptsubscriptnormsubscriptùëä1superscriptsubscriptùê¥ùëñùëáùêπ2superscriptsubscriptnormsubscriptùêµ1subscriptùëä2ùêπ2superscriptsubscriptnormsubscriptùëä1subscriptùêµ2ùêπ2\\\\displaystyle\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}\\]({\\\\bm{W}})=\\\\sum\\_{i=1}^{n}\\\\left(\\\\\\|{A\\_{i}}^{T}W\\_{2}\\\\\\|\\_{F}^{2}+\\\\\\|W\\_{1}{A\\_{i}}^{T}\\\\\\|\\_{F}^{2}\\\\right)=\\\\\\|B\\_{1}W\\_{2}\\\\\\|\\_{F}^{2}+\\\\\\|W\\_{1}B\\_{2}\\\\\\|\\_{F}^{2}. |  |\n\nFurther applying [Lemma1]Lemma 1. ‚Ä£ Rademacher Complexity. ‚Ä£ 3 Preliminaries ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we have that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Äã(M)=ùêπùëÄabsent\\\\displaystyle F(M)= | minW2‚ÄãW1=M‚Å°tr‚Äã\\[‚àá2‚Ñí\\]‚Äã(ùëæ)=minW2‚ÄãW1=M‚Äã‚àëi=1n(‚ÄñAiT‚ÄãW2‚ÄñF2+‚ÄñW1‚ÄãAiT‚ÄñF2)subscriptsubscriptùëä2subscriptùëä1ùëÄtrdelimited-\\[\\]superscript‚àá2‚Ñíùëæsubscriptsubscriptùëä2subscriptùëä1ùëÄsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptnormsuperscriptsubscriptùê¥ùëñùëásubscriptùëä2ùêπ2superscriptsubscriptnormsubscriptùëä1superscriptsubscriptùê¥ùëñùëáùêπ2\\\\displaystyle\\\\min\\_{W\\_{2}W\\_{1}=M}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}\\]({\\\\bm{W}})=\\\\min\\_{W\\_{2}W\\_{1}=M}\\\\sum\\_{i=1}^{n}\\\\left(\\\\\\|{A\\_{i}}^{T}W\\_{2}\\\\\\|\\_{F}^{2}+\\\\\\|W\\_{1}{A\\_{i}}^{T}\\\\\\|\\_{F}^{2}\\\\right) |  |\n|  | ‚â•\\\\displaystyle\\\\geq | minW2‚ÄãW1=M‚Å°2‚Äã‚ÄñB1‚ÄãW2‚ÄãW1‚ÄãB2‚Äñ‚àó2=2‚Äã‚ÄñB1‚ÄãM‚ÄãB2‚Äñ‚àó2.subscriptsubscriptùëä2subscriptùëä1ùëÄ2superscriptsubscriptnormsubscriptùêµ1subscriptùëä2subscriptùëä1subscriptùêµ222superscriptsubscriptnormsubscriptùêµ1ùëÄsubscriptùêµ22\\\\displaystyle\\\\min\\_{W\\_{2}W\\_{1}=M}2\\\\\\|B\\_{1}W\\_{2}W\\_{1}B\\_{2}\\\\\\|\\_{\\*}^{2}=2\\\\\\|B\\_{1}MB\\_{2}\\\\\\|\\_{\\*}^{2}. |  |\n\nNext we show this lower bound of F‚Äã(M)ùêπùëÄF(M) can be attained. Let U‚ÄãŒõ‚ÄãVTùëàŒõsuperscriptùëâùëáU\\\\Lambda V^{T} be the SVD of B1‚ÄãM‚ÄãB2subscriptùêµ1ùëÄsubscriptùêµ2B\\_{1}MB\\_{2}. The equality condition happens for W2‚àó=B1‚Ä†‚ÄãU‚ÄãŒõ1/2,W1‚àó=Œõ1/2‚ÄãVT‚ÄãB2‚Ä†formulae-sequencesubscriptsuperscriptùëä2superscriptsubscriptùêµ1‚Ä†ùëàsuperscriptŒõ12subscriptsuperscriptùëä1superscriptŒõ12superscriptùëâùëásuperscriptsubscriptùêµ2‚Ä†W^{\\*}\\_{2}={B\\_{1}}^{\\\\dagger}U\\\\Lambda^{1/2},W^{\\*}\\_{1}=\\\\Lambda^{1/2}V^{T}{B\\_{2}}^{\\\\dagger}, where we have that ‚àëi=1n‚ÄñAiT‚ÄãW2‚àó‚ÄñF2+‚ÄñW1‚àó‚ÄãAiT‚ÄñF2=2‚Äã‚ÄñŒõ‚ÄñF2=2‚Äã‚ÄñB1‚ÄãM‚ÄãB2‚ÄñF2superscriptsubscriptùëñ1ùëõsuperscriptsubscriptnormsuperscriptsubscriptùê¥ùëñùëásubscriptsuperscriptùëä2ùêπ2superscriptsubscriptnormsubscriptsuperscriptùëä1superscriptsubscriptùê¥ùëñùëáùêπ22superscriptsubscriptnormŒõùêπ22superscriptsubscriptnormsubscriptùêµ1ùëÄsubscriptùêµ2ùêπ2\\\\sum\\_{i=1}^{n}\\\\\\|{A\\_{i}}^{T}W^{\\*}\\_{2}\\\\\\|\\_{F}^{2}+\\\\\\|W^{\\*}\\_{1}{A\\_{i}}^{T}\\\\\\|\\_{F}^{2}=2\\\\\\|\\\\Lambda\\\\\\|\\_{F}^{2}=2\\\\\\|B\\_{1}MB\\_{2}\\\\\\|\\_{F}^{2}.\nThis completes the proof.\n‚àé\n\nThe right-hand side in ( [8]Equation 8 ‚Ä£ Theorem 5 (Ding et al. (2022)). ‚Ä£ 4 Exact Formulation of Induced Regularizer by Trace of Hessian ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) will be very close to the nuclear norm of MùëÄM if the two extra multiplicative terms are close to the identity matrix. It turns out that {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} satisfying the (1,Œ¥)1ùõø(1,\\\\delta)-RIP exactly guarantees the two extra terms are O‚Äã(Œ¥)ùëÇùõøO(\\\\delta)-close to identity. However, the case for deep networks where depth is larger than two is fundamentally different from the two-layer case, where one can obtain a closed form for FùêπF. To the best of our knowledge, it is open whether one obtain a closed form for the induced-regularizer for the trace of Hessian when L>2ùêø2L>2. Nonetheless, in Section [5.1]Preliminaries for RIP ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we show that under RIP, we can still approximate it with the nuclear norm.",
            "citations": null
          },
          "5 Results for Measurements with Restricted Isometry Property (RIP)": {
            "content": "In this section, we present our main results for the generalization benefit of flatness regularization in deep linear networks. We structure the analysis as follows:\n\n1. 1.\n\n\nIn [Section5.1]Preliminaries for RIP ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we first recap some preliminaries on the RIP property.\n\n2. 2.\n\n\nIn [Section5.2]Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we prove that the induced regularizer by trace of Hessian is approximately the power of nuclear norm for (1,Œ¥)1ùõø(1,\\\\delta)-RIP measurements ( [Theorem1]Theorem 1 (Induced regularizer under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")).\n\n3. 3.\n\n\nIn [Section5.3]Recovering the Ground truth ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we prove that the minimum trace of Hessian interpolating solution with (2,Œ¥)2ùõø(2,\\\\delta)-RIP measurements can recover the ground truth M‚àósuperscriptùëÄM^{\\*} up to error Œ¥‚Äã‚ÄñM‚àó‚Äñ‚àó2ùõøsuperscriptsubscriptnormsuperscriptùëÄ2\\\\delta\\\\left\\\\\\|M^{\\*}\\\\right\\\\\\|\\_{\\*}^{2}. For {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} sampled from Gaussian distributions, we know Œ¥=O‚Äã(d0+dLn)ùõøùëÇsubscriptùëë0subscriptùëëùêøùëõ\\\\delta=O(\\\\sqrt{\\\\frac{d\\_{0}+d\\_{L}}{n}}).\n\n4. 4.\n\n\nIn [Section5.4]Generalization Bound ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we prove a generalization bound with faster rate of d0+dLn‚Äã‚ÄñM‚àó‚Äñ‚àó2subscriptùëë0subscriptùëëùêøùëõsuperscriptsubscriptnormsuperscriptùëÄ2\\\\frac{d\\_{0}+d\\_{L}}{n}\\\\left\\\\\\|M^{\\*}\\\\right\\\\\\|\\_{\\*}^{2} using local Rademacher complexity based techniques from Srebro et al. ( [2010])).\n\n\nNext, we discuss important distributions of measurements for which the RIP property holds.\n\n### 5.1 Preliminaries for RIP\n\n###### Definition 3(Restricted Isometry Property (RIP)).\n\nA family of matrices {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} satisfies the (r,Œ¥)ùëüùõø(r,\\\\delta)-RIP iff for any matrix XùëãX with the same dimension and rank at most rùëür:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (1‚àíŒ¥)‚Äã‚ÄñX‚ÄñF2‚â§1n‚Äã‚àëi=1n‚ü®Ai,X‚ü©2‚â§(1+Œ¥)‚Äã‚ÄñX‚ÄñF2.1ùõøsuperscriptsubscriptnormùëãùêπ21ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùê¥ùëñùëã21ùõøsuperscriptsubscriptnormùëãùêπ2\\\\displaystyle(1-\\\\delta)\\\\\\|X\\\\\\|\\_{F}^{2}\\\\leq\\\\frac{1}{n}\\\\sum\\\\nolimits\\_{i=1}^{n}\\\\langle A\\_{i},X\\\\rangle^{2}\\\\leq(1+\\\\delta)\\\\\\|X\\\\\\|\\_{F}^{2}. |  | (9) |\n\nNext, we give two examples of distributions where Œ©‚Äã(r‚Äã(d0+dL))Œ©ùëüsubscriptùëë0subscriptùëëùêø\\\\Omega(r(d\\_{0}+d\\_{L})) samples guarantee (r,O‚Äã(1))ùëüùëÇ1(r,O(1))-RIP.\nThe proofs follow from Theorem 2.3 in Candes and Plan ( [2011])).\n\n###### Example 1.\n\nSuppose for every i‚àà{1,‚Ä¶,n}ùëñ1‚Ä¶ùëõi\\\\in\\\\{1,\\\\dots,n\\\\}, each entry in the matrix Aisubscriptùê¥ùëñA\\_{i} is an independent standard Gaussian random variable, _i.e._, Ai‚Äã‚àºi.i.d.‚Äãùí¢dL√ód‚Äã0A\\_{i}\\\\overset{i.i.d.}{\\\\sim}{\\\\mathcal{G}}\\_{d\\_{L}\\\\times d0}. For every constant Œ¥‚àà(0,1)ùõø01\\\\delta\\\\in(0,1), if n‚â•Œ©‚Äã(r‚Äã(d0+dL))ùëõŒ©ùëüsubscriptùëë0subscriptùëëùêøn\\\\geq\\\\Omega(r(d\\_{0}+d\\_{L})), then with probability 1‚àíeŒ©‚Äã(n)1superscriptùëíŒ©ùëõ1-e^{\\\\Omega(n)}, {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} satisfies (r,Œ¥)ùëüùõø(r,\\\\delta)-RIP.\n\n###### Example 2.\n\nIf each entry of Aisubscriptùê¥ùëñA\\_{i} is from a symmetric Bernoulli random variable with variance 111, i.e. for all i,k,‚Ñìùëñùëò‚Ñìi,k,\\\\ell, entry \\[Ai\\]k,‚Ñìsubscriptdelimited-\\[\\]subscriptùê¥ùëñùëò‚Ñì\\[A\\_{i}\\]\\_{k,\\\\ell} is either equal to 111 or ‚àí11-1 with equal probabilities, then for any rùëür and Œ¥ùõø\\\\delta, (r,Œ¥)ùëüùõø(r,\\\\delta)-RIP holds with same probability as in [Example1]Example 1. ‚Ä£ 5.1 Preliminaries for RIP ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") if the same condition there is satisfied.\n\n### 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm\n\nThis section focuses primarily on the proof of [Theorem2]Theorem 2 (Recovery of the ground truth under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"). Our proof consists of two steps: (1) we show that the trace of Hessian of training loss at the minimizer ùëæùëæ{\\\\bm{W}} is multiplicatively O‚Äã(Œ¥)ùëÇùõøO(\\\\delta)-close to the regularizer R‚Äã(ùëæ)ùëÖùëæR({\\\\bm{W}}) defined below ( [Lemma3]Lemma 3. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) and (2) we show that the induced regularizer of RùëÖR, F‚Ä≤‚Äã(M)superscriptùêπ‚Ä≤ùëÄF^{\\\\prime}(M), is proportional to ‚ÄñM‚Äñ‚àó2‚Äã(L‚àí1)/LsuperscriptsubscriptnormùëÄ2ùêø1ùêø\\\\left\\\\\\|M\\\\right\\\\\\|\\_{\\*}^{2(L-1)/L} ( [Lemma4]Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")).\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | R‚Äã(ùëæ)‚âú‚ÄñWL‚Äã‚Ä¶‚ÄãW2‚ÄñF2‚Äãd0+‚àëj=2L‚àí1‚ÄñWL‚Äã‚Ä¶‚ÄãWj+1‚ÄñF2‚Äã‚ÄñWj‚àí1‚Äã‚Ä¶‚ÄãW1‚ÄñF2+‚ÄñWL‚àí1‚Äã‚Ä¶‚ÄãW1‚ÄñF2‚ÄãdL.‚âúùëÖùëæsuperscriptsubscriptnormsubscriptùëäùêø‚Ä¶subscriptùëä2ùêπ2subscriptùëë0superscriptsubscriptùëó2ùêø1superscriptsubscriptnormsubscriptùëäùêø‚Ä¶subscriptùëäùëó1ùêπ2superscriptsubscriptnormsubscriptùëäùëó1‚Ä¶subscriptùëä1ùêπ2superscriptsubscriptnormsubscriptùëäùêø1‚Ä¶subscriptùëä1ùêπ2subscriptùëëùêø\\\\displaystyle\\\\!\\\\!\\\\!\\\\!R({\\\\bm{W}})\\\\triangleq\\\\\\|W\\_{L}\\\\dots W\\_{2}\\\\\\|\\_{F}^{2}d\\_{0}+\\\\sum\\_{j=2}^{L-1}\\\\\\|W\\_{L}\\\\dots W\\_{j+1}\\\\\\|\\_{F}^{2}\\\\\\|W\\_{j-1}\\\\dots W\\_{1}\\\\\\|\\_{F}^{2}+\\\\\\|W\\_{L-1}\\\\dots W\\_{1}\\\\\\|\\_{F}^{2}d\\_{L}. |  | (10) |\n\n###### Lemma 3.\n\nSuppose the linear measurement {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} satisfy (1,Œ¥)1ùõø(1,\\\\delta)-RIP. Then, for any ùêñùêñ{\\\\bm{W}} such that ‚Ñí‚Äã(ùêñ)=0‚Ñíùêñ0{\\\\mathcal{L}}({\\\\bm{W}})=0, it holds that\n\n|     |     |     |\n| --- | --- | --- |\n|  | (1‚àíŒ¥)‚ÄãR‚Äã(W)‚â§tr‚Äã(‚àá2L)‚Äã(W)‚â§(1+Œ¥)‚ÄãR‚Äã(W).1ùõøùëÖWtrsuperscript‚àá2ùêøW1ùõøùëÖW\\\\displaystyle(1-\\\\delta)R(\\\\textbf{W})\\\\leq\\\\textup{tr}(\\\\nabla^{2}L)(\\\\textbf{W})\\\\leq(1+\\\\delta)R(\\\\textbf{W}). |  |\n\nSince tr‚Äã(‚àá2‚Ñí)‚Äã(ùëæ)trsuperscript‚àá2‚Ñíùëæ\\\\textup{tr}(\\\\nabla^{2}{\\\\mathcal{L}})({\\\\bm{W}}) closely approximates R‚Äã(ùëæ)ùëÖùëæR({\\\\bm{W}}), we can study RùëÖR instead of tr‚Äã\\[‚àá2‚Ñí\\]trdelimited-\\[\\]superscript‚àá2‚Ñí\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}\\] to understand the implicit bias up to a multiplicative factor (1+Œ¥)1ùõø(1+\\\\delta). In particular, we want to solve the induced regularizer of R‚Äã(ùëæ)ùëÖùëæR({\\\\bm{W}}) on the space of end-to-end matrices, F‚Ä≤‚Äã(M)superscriptùêπ‚Ä≤ùëÄF^{\\\\prime}(M):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Ä≤‚Äã(M)‚âúminùëæ:WL‚Äã‚ãØ‚ÄãW1=M‚Å°R‚Äã(W).‚âúsuperscriptùêπ‚Ä≤ùëÄsubscript:ùëæsubscriptùëäùêø‚ãØsubscriptùëä1ùëÄùëÖW\\\\displaystyle F^{\\\\prime}(M)\\\\triangleq\\\\min\\_{{\\\\bm{W}}:W\\_{L}\\\\cdots W\\_{1}=M}R(\\\\textbf{W}). |  | (11) |\n\nSurprisingly, we can solve this problem in closed form.\n\n###### Lemma 4.\n\nFor any M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}, it holds that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Ä≤‚Äã(M)‚âúminùëæ:WL‚Äã‚Ä¶‚ÄãW1=M‚Å°R‚Äã(W)=L‚Äã(d0‚ÄãdL)1/L‚Äã‚ÄñM‚Äñ‚àó2‚Äã(L‚àí1)/L.‚âúsuperscriptùêπ‚Ä≤ùëÄsubscript:ùëæsubscriptùëäùêø‚Ä¶subscriptùëä1ùëÄùëÖWùêøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsuperscriptsubscriptnormùëÄ2ùêø1ùêø\\\\displaystyle F^{\\\\prime}(M)\\\\triangleq\\\\min\\_{{\\\\bm{W}}:\\ W\\_{L}\\\\dots W\\_{1}=M}R(\\\\textbf{W})=L{(d\\_{0}d\\_{L})}^{1/L}\\\\\\|M\\\\\\|\\_{\\*}^{2(L-1)/L}. |  | (12) |\n\n###### Proof of [Lemma4]Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\nApplying the LùêøL-version of the AM-GM to Equation ( [10]Equation 10 ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")):\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | (R‚Äã(W)/L)L‚â•superscriptùëÖWùêøùêøabsent\\\\displaystyle\\\\left(R(\\\\textbf{W})/L\\\\right)^{L}\\\\geq | d0‚Äã‚ÄñWL‚Äã‚ãØ‚ÄãW2‚ÄñF2‚ãÖ‚ÄñW1‚ÄñF2‚Äã‚ÄñWL‚Äã‚ãØ‚ÄãW3‚ÄñF2‚Äã‚ãØ‚Äã‚ÄñWL‚àí1‚Äã‚ãØ‚ÄãW1‚ÄñF2‚ÄãdL.‚ãÖsubscriptùëë0superscriptsubscriptnormsubscriptùëäùêø‚ãØsubscriptùëä2ùêπ2superscriptsubscriptnormsubscriptùëä1ùêπ2superscriptsubscriptnormsubscriptùëäùêø‚ãØsubscriptùëä3ùêπ2‚ãØsuperscriptsubscriptnormsubscriptùëäùêø1‚ãØsubscriptùëä1ùêπ2subscriptùëëùêø\\\\displaystyle d\\_{0}\\\\\\|W\\_{L}\\\\cdots W\\_{2}\\\\\\|\\_{F}^{2}\\\\cdot\\\\\\|W\\_{1}\\\\\\|\\_{F}^{2}\\\\\\|W\\_{L}\\\\cdots W\\_{3}\\\\\\|\\_{F}^{2}\\\\cdots\\\\\\|W\\_{L-1}\\\\cdots W\\_{1}\\\\\\|\\_{F}^{2}d\\_{L}. |  | (13) |\n|  | =\\\\displaystyle= | d0‚ÄãdL‚Äã‚àèj=1L‚àí1(‚ÄñWL‚Äã‚ãØ‚ÄãWj+1‚ÄñF2‚Äã‚ÄñWj‚Äã‚ãØ‚ÄãW1‚ÄñF2)subscriptùëë0subscriptùëëùêøsuperscriptsubscriptproductùëó1ùêø1superscriptsubscriptnormsubscriptùëäùêø‚ãØsubscriptùëäùëó1ùêπ2superscriptsubscriptnormsubscriptùëäùëó‚ãØsubscriptùëä1ùêπ2\\\\displaystyle d\\_{0}d\\_{L}\\\\prod\\_{j=1}^{L-1}\\\\left(\\\\left\\\\\\|W\\_{L}\\\\cdots W\\_{j+1}\\\\right\\\\\\|\\_{F}^{2}\\\\left\\\\\\|W\\_{j}\\\\cdots W\\_{1}\\\\right\\\\\\|\\_{F}^{2}\\\\right) |  |\n\nNow using Lemma [1]Lemma 1. ‚Ä£ Rademacher Complexity. ‚Ä£ 3 Preliminaries ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we have for every 1‚â§j‚â§L‚àí11ùëóùêø11\\\\leq j\\\\leq L-1:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÄñWL‚Äã‚Ä¶‚ÄãWj+1‚ÄñF2‚Äã‚ÄñWj‚Äã‚Ä¶‚ÄãW1‚ÄñF2‚â•‚ÄñWL‚Äã‚Ä¶‚ÄãW1‚Äñ‚àó2=‚ÄñM‚Äñ‚àó2.superscriptsubscriptnormsubscriptùëäùêø‚Ä¶subscriptùëäùëó1ùêπ2superscriptsubscriptnormsubscriptùëäùëó‚Ä¶subscriptùëä1ùêπ2superscriptsubscriptnormsubscriptùëäùêø‚Ä¶subscriptùëä12superscriptsubscriptnormùëÄ2\\\\displaystyle\\\\\\|W\\_{L}\\\\dots W\\_{j+1}\\\\\\|\\_{F}^{2}\\\\\\|W\\_{j}\\\\dots W\\_{1}\\\\\\|\\_{F}^{2}\\\\geq\\\\\\|W\\_{L}\\\\dots W\\_{1}\\\\\\|\\_{\\*}^{2}=\\\\\\|M\\\\\\|\\_{\\*}^{2}. |  | (14) |\n\nMultiplying Equation ( [14]Equation 14 ‚Ä£ Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) for all 1‚â§j‚â§L‚àí11ùëóùêø11\\\\leq j\\\\leq L-1 and combining with Equation ( [13]Equation 13 ‚Ä£ Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) implies\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | min{W\\|WL‚Äã‚Ä¶‚ÄãW1=M}‚Å°R‚Äã(W)‚â•L‚Äã(d0‚ÄãdL)1/L‚Äã‚ÄñM‚Äñ‚àó2‚Äã(L‚àí1)/L.subscriptconditional-setùëäsubscriptùëäùêø‚Ä¶subscriptùëä1ùëÄùëÖWùêøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsuperscriptsubscriptnormùëÄ2ùêø1ùêø\\\\displaystyle\\\\min\\_{\\\\{W\\|\\ W\\_{L}\\\\dots W\\_{1}=M\\\\}}R(\\\\textbf{W})\\\\geq L(d\\_{0}d\\_{L})^{1/L}\\\\\\|M\\\\\\|\\_{\\*}^{2(L-1)/L}. |  | (15) |\n\nNow we show that equality can indeed be attained. To construct an example in which the equality happens, consider the singular value decomposition of MùëÄM: M=U‚ÄãŒõ‚ÄãVTùëÄùëàŒõsuperscriptùëâùëáM=U\\\\Lambda V^{T}, where ŒõŒõ\\\\Lambda is a square matrix with dimension rank‚Äã(M)rankùëÄ\\\\mathrm{rank}(M).\n\nFor 1‚â§i‚â§L1ùëñùêø1\\\\leq i\\\\leq L, we pick Qi‚àà‚Ñùdi√órank‚Äã(M)subscriptùëÑùëñsuperscript‚ÑùsubscriptùëëùëñrankùëÄQ\\_{i}\\\\in\\\\mathbb{R}^{d\\_{i}\\\\times\\\\mathrm{rank}(M)} to be any matrix with orthonormal columns. Note that rank‚Äã(M)rankùëÄ\\\\mathrm{rank}(M) is not larger than disubscriptùëëùëñd\\_{i} for all 1‚â§i‚â§L1ùëñùêø1\\\\leq i\\\\leq L, hence such orthonormal matrices QisubscriptùëÑùëñQ\\_{i} exist. Then we define the following with Œ±,Œ±‚Ä≤>0ùõºsuperscriptùõº‚Ä≤0\\\\alpha,\\\\alpha^{\\\\prime}>0 being constants to be determined:\n\n|     |     |     |\n| --- | --- | --- |\n|  | WL=Œ±‚Ä≤‚ÄãŒ±‚àí(L‚àí2)/2‚ÄãU‚ÄãŒõ1/2‚ÄãQL‚àí1T‚àà‚ÑùdL√ódL‚àí1,subscriptùëäùêøsuperscriptùõº‚Ä≤superscriptùõºùêø22ùëàsuperscriptŒõ12superscriptsubscriptùëÑùêø1ùëásuperscript‚Ñùsubscriptùëëùêøsubscriptùëëùêø1\\\\displaystyle W\\_{L}=\\\\alpha^{\\\\prime}\\\\alpha^{-(L-2)/2}U\\\\Lambda^{1/2}{Q\\_{L-1}}^{T}\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{L-1}}, |  |\n|  | Wi=Œ±‚ÄãQi‚ÄãQi‚àí1T‚àà‚Ñùdi√ódi‚àí1,‚àÄ2‚â§i‚â§L‚àí1,formulae-sequencesubscriptùëäùëñùõºsubscriptùëÑùëñsuperscriptsubscriptùëÑùëñ1ùëásuperscript‚Ñùsubscriptùëëùëñsubscriptùëëùëñ1for-all2ùëñùêø1\\\\displaystyle W\\_{i}=\\\\alpha Q\\_{i}{Q\\_{i-1}}^{T}\\\\in\\\\mathbb{R}^{d\\_{i}\\\\times d\\_{i-1}},\\\\quad\\\\forall 2\\\\leq i\\\\leq L-1, |  |\n|  | W1=Œ±‚Ä≤‚àí1‚ÄãŒ±‚àí(L‚àí2)/2‚ÄãQ1‚ÄãŒõ1/2‚ÄãVT‚àà‚Ñùd1√ód0.subscriptùëä1superscriptsuperscriptùõº‚Ä≤1superscriptùõºùêø22subscriptùëÑ1superscriptŒõ12superscriptùëâùëásuperscript‚Ñùsubscriptùëë1subscriptùëë0\\\\displaystyle W\\_{1}={\\\\alpha^{\\\\prime}}^{-1}\\\\alpha^{-(L-2)/2}Q\\_{1}\\\\Lambda^{1/2}V^{T}\\\\in\\\\mathbb{R}^{d\\_{1}\\\\times d\\_{0}}. |  |\n\nNote that ŒõŒõ\\\\Lambda is a square matrix with dimension rank‚Äã(M)rankùëÄ\\\\mathrm{rank}(M).\nFirst of all, note that the defined matrices satisfy\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | WL‚ÄãWL‚àí1‚Äã‚Ä¶‚ÄãW1subscriptùëäùêøsubscriptùëäùêø1‚Ä¶subscriptùëä1\\\\displaystyle W\\_{L}W\\_{L-1}\\\\dots W\\_{1} | =Œ±L‚àí2‚ÄãŒ±‚àí(L‚àí2)‚ÄãU‚ÄãŒõ1/2‚ÄãŒõ1/2‚ÄãVT=M.absentsuperscriptùõºùêø2superscriptùõºùêø2ùëàsuperscriptŒõ12superscriptŒõ12superscriptùëâùëáùëÄ\\\\displaystyle=\\\\alpha^{L-2}\\\\alpha^{-(L-2)}U\\\\Lambda^{1/2}\\\\Lambda^{1/2}V^{T}=M. |  |\n\nTo gain some intuition, we check that the equality case for all the inequalities that we applied above. We set the value of Œ±ùõº\\\\alpha in a way that these equality cases can hold simultaneously.\nNote that for the matrix holder inequality that we applied in Equation ( [14]Equation 14 ‚Ä£ Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")):\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚ÄñWL‚Äã‚Ä¶‚ÄãWj+1‚ÄñF2‚Äã‚ÄñWj‚Äã‚Ä¶‚ÄãW1‚ÄñF2=‚ÄñWL‚Äã‚Ä¶‚ÄãW1‚Äñ‚àó2=‚ÄñŒõ1/2‚ÄñF2,superscriptsubscriptnormsubscriptùëäùêø‚Ä¶subscriptùëäùëó1ùêπ2superscriptsubscriptnormsubscriptùëäùëó‚Ä¶subscriptùëä1ùêπ2superscriptsubscriptnormsubscriptùëäùêø‚Ä¶subscriptùëä12superscriptsubscriptnormsuperscriptŒõ12ùêπ2\\\\displaystyle\\\\\\|W\\_{L}\\\\dots W\\_{j+1}\\\\\\|\\_{F}^{2}\\\\\\|W\\_{j}\\\\dots W\\_{1}\\\\\\|\\_{F}^{2}=\\\\\\|W\\_{L}\\\\dots W\\_{1}\\\\\\|\\_{\\*}^{2}=\\\\\\|\\\\Lambda^{1/2}\\\\\\|\\_{F}^{2}, |  |\n\nindependent of the choice of Œ±ùõº\\\\alpha. It remains to check the equality case for the AM-GM inequality that we applied in [Equation13]In Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"). We have for all 2‚â§j‚â§L‚àí12ùëóùêø12\\\\leq j\\\\leq L-1:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÄñWL‚Äã‚Ä¶‚ÄãWj+1‚ÄñF‚Äã‚ÄñWj‚àí1‚Äã‚Ä¶‚ÄãW1‚ÄñFsubscriptnormsubscriptùëäùêø‚Ä¶subscriptùëäùëó1ùêπsubscriptnormsubscriptùëäùëó1‚Ä¶subscriptùëä1ùêπ\\\\displaystyle\\\\\\|W\\_{L}\\\\dots W\\_{j+1}\\\\\\|\\_{F}\\\\\\|W\\_{j-1}\\\\dots W\\_{1}\\\\\\|\\_{F} |  |\n|  | =Œ±j‚àí2‚ÄãŒ±‚àí(L‚àí2)/2‚ÄãŒ±L‚àíj‚àí1‚ÄãŒ±‚àí(L‚àí2)/2‚Äã‚ÄñU‚ÄãŒõ1/2‚ÄñF‚Äã‚ÄñŒõ1/2‚ÄãVT‚ÄñF=Œ±‚àí1‚Äã‚ÄñŒõ1/2‚ÄñF2,absentsuperscriptùõºùëó2superscriptùõºùêø22superscriptùõºùêøùëó1superscriptùõºùêø22subscriptnormùëàsuperscriptŒõ12ùêπsubscriptnormsuperscriptŒõ12superscriptùëâùëáùêπsuperscriptùõº1superscriptsubscriptnormsuperscriptŒõ12ùêπ2\\\\displaystyle=\\\\alpha^{j-2}\\\\alpha^{-(L-2)/2}\\\\alpha^{L-j-1}\\\\alpha^{-(L-2)/2}\\\\\\|U\\\\Lambda^{1/2}\\\\\\|\\_{F}\\\\\\|\\\\Lambda^{1/2}V^{T}\\\\\\|\\_{F}=\\\\alpha^{-1}\\\\\\|\\\\Lambda^{1/2}\\\\\\|\\_{F}^{2}, |  | (16) |\n\nHence, equality happens for all of them.\nMoreover, for cases j=1ùëó1j=1 and j=Lùëóùêøj=L, we have\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d0‚Äã‚ÄñWL‚Äã‚Ä¶‚ÄãW2‚Äñ=‚ÄñŒõ1/2‚ÄñF‚Äãd0‚ÄãŒ±‚Ä≤‚ÄãŒ±L‚àí2‚ÄãŒ±‚àí(L‚àí2)/2=‚ÄñŒõ1/2‚ÄñF‚Äãd0‚ÄãŒ±‚Ä≤‚ÄãŒ±(L‚àí2)/2.subscriptùëë0normsubscriptùëäùêø‚Ä¶subscriptùëä2subscriptnormsuperscriptŒõ12ùêπsubscriptùëë0superscriptùõº‚Ä≤superscriptùõºùêø2superscriptùõºùêø22subscriptnormsuperscriptŒõ12ùêπsubscriptùëë0superscriptùõº‚Ä≤superscriptùõºùêø22\\\\displaystyle d\\_{0}\\\\\\|W\\_{L}\\\\dots W\\_{2}\\\\\\|=\\\\\\|\\\\Lambda^{1/2}\\\\\\|\\_{F}d\\_{0}\\\\alpha^{\\\\prime}\\\\alpha^{L-2}\\\\alpha^{-(L-2)/2}=\\\\\\|\\\\Lambda^{1/2}\\\\\\|\\_{F}d\\_{0}\\\\alpha^{\\\\prime}\\\\alpha^{(L-2)/2}. |  | (17) |\n|  | dL‚Äã‚ÄñWL‚àí1‚Äã‚Ä¶‚ÄãW1‚Äñ=‚ÄñŒõ1/2‚ÄñF‚ÄãdL‚ÄãŒ±‚Ä≤‚àí1‚ÄãŒ±L‚àí2‚ÄãŒ±‚àí(L‚àí2)/2=‚ÄñŒõ1/2‚ÄñF‚ÄãdL‚ÄãŒ±‚Ä≤‚àí1‚ÄãŒ±(L‚àí2)/2.subscriptùëëùêønormsubscriptùëäùêø1‚Ä¶subscriptùëä1subscriptnormsuperscriptŒõ12ùêπsubscriptùëëùêøsuperscriptsuperscriptùõº‚Ä≤1superscriptùõºùêø2superscriptùõºùêø22subscriptnormsuperscriptŒõ12ùêπsubscriptùëëùêøsuperscriptsuperscriptùõº‚Ä≤1superscriptùõºùêø22\\\\displaystyle d\\_{L}\\\\\\|W\\_{L-1}\\\\dots W\\_{1}\\\\\\|=\\\\\\|\\\\Lambda^{1/2}\\\\\\|\\_{F}d\\_{L}{\\\\alpha^{\\\\prime}}^{-1}\\\\alpha^{L-2}\\\\alpha^{-(L-2)/2}=\\\\\\|\\\\Lambda^{1/2}\\\\\\|\\_{F}d\\_{L}{\\\\alpha^{\\\\prime}}^{-1}\\\\alpha^{(L-2)/2}. |  | (18) |\n\nThus it suffices to set Œ±‚Ä≤=(dLd0)1/2superscriptùõº‚Ä≤superscriptsubscriptùëëùêøsubscriptùëë012\\\\alpha^{\\\\prime}=(\\\\frac{d\\_{L}}{d\\_{0}})^{1/2} and Œ±=(‚ÄñŒõ1/2‚ÄñFd0‚ÄãdL)2/L=(‚ÄñM‚Äñ‚àód0‚ÄãdL)1/LùõºsuperscriptsubscriptnormsuperscriptŒõ12ùêπsubscriptùëë0subscriptùëëùêø2ùêøsuperscriptsubscriptnormùëÄsubscriptùëë0subscriptùëëùêø1ùêø\\\\alpha=(\\\\frac{\\\\\\|\\\\Lambda^{1/2}\\\\\\|\\_{F}}{\\\\sqrt{d\\_{0}d\\_{L}}})^{2/L}=(\\\\frac{\\\\\\|M\\\\\\|\\_{\\*}}{d\\_{0}d\\_{L}})^{1/L} so that the left-hand sides of ( [16]Equation 16 ‚Ä£ Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")), ( [17]Equation 17 ‚Ä£ Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")), and ( [18]Equation 18 ‚Ä£ Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) are equal, which implies that the lower bound in Equation ( [15]Equation 15 ‚Ä£ Proof of Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) is actually an equality. The proof is complete.\n‚àé\n\nNow we can prove [Theorem1]Theorem 1 (Induced regularizer under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") as an implication of [Lemma4]Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\n###### Proof of [Theorem1]Theorem 1 (Induced regularizer under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\nThe first claim is a corollary of [Lemma3]Lemma 3. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\nWe note that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Äã(M)ùêπùëÄ\\\\displaystyle F(M) | =minWL‚Äã‚Ä¶‚ÄãW1=M‚Å°tr‚Äã\\[‚àá2‚Ñí\\]‚Äã(M)‚â§(1+Œ¥)‚ÄãminWL‚Äã‚Ä¶‚ÄãW1=M‚Å°R‚Äã(ùêñ)=(1+Œ¥)‚ÄãF‚Ä≤‚Äã(M)absentsubscriptsubscriptùëäùêø‚Ä¶subscriptùëä1ùëÄtrdelimited-\\[\\]superscript‚àá2‚ÑíùëÄ1ùõøsubscriptsubscriptùëäùêø‚Ä¶subscriptùëä1ùëÄùëÖùêñ1ùõøsuperscriptùêπ‚Ä≤ùëÄ\\\\displaystyle=\\\\min\\_{W\\_{L}\\\\dots W\\_{1}=M}\\\\textup{tr}\\[\\\\nabla^{2}\\\\mathcal{L}\\](M)\\\\leq(1+\\\\delta)\\\\min\\_{W\\_{L}\\\\dots W\\_{1}=M}R(\\\\mathbf{W})=(1+\\\\delta)F^{\\\\prime}(M) |  |\n|  | F‚Äã(M)ùêπùëÄ\\\\displaystyle F(M) | =minWL‚Äã‚Ä¶‚ÄãW1=M‚Å°tr‚Äã\\[‚àá2‚Ñí\\]‚Äã(M)‚â•(1‚àíŒ¥)‚ÄãminWL‚Äã‚Ä¶‚ÄãW1=M‚Å°R‚Äã(ùêñ)=(1‚àíŒ¥)‚ÄãF‚Ä≤‚Äã(M).absentsubscriptsubscriptùëäùêø‚Ä¶subscriptùëä1ùëÄtrdelimited-\\[\\]superscript‚àá2‚ÑíùëÄ1ùõøsubscriptsubscriptùëäùêø‚Ä¶subscriptùëä1ùëÄùëÖùêñ1ùõøsuperscriptùêπ‚Ä≤ùëÄ\\\\displaystyle=\\\\min\\_{W\\_{L}\\\\dots W\\_{1}=M}\\\\textup{tr}\\[\\\\nabla^{2}\\\\mathcal{L}\\](M)\\\\geq(1-\\\\delta)\\\\min\\_{W\\_{L}\\\\dots W\\_{1}=M}R(\\\\mathbf{W})=(1-\\\\delta)F^{\\\\prime}(M). |  |\n\nFor the second claim, pick ùêñ¬Ø¬Øùêñ\\\\bar{\\\\mathbf{W}} that minimizes R‚Äã(ùêñ¬Ø)ùëÖ¬ØùêñR(\\\\bar{\\\\mathbf{W}}) over all ùêñùêñ\\\\mathbf{W}‚Äôs that satisfy the linear measurements, thus we have that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | R‚Äã(ùêñ¬Ø)=L‚Äã(d0‚ÄãdL)1/L‚Äã‚ÄñE‚Äã(ùëæ¬Ø)‚Äñ‚àó2‚Äã(L‚àí1)/L=L‚Äã(d0‚ÄãdL)1/L‚Äãmin‚Ñí‚Ä≤‚Äã(M)=0‚Å°‚ÄñM‚Äñ‚àó2‚Äã(L‚àí1)/L.ùëÖ¬Øùêñùêøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsuperscriptsubscriptnormùê∏¬Øùëæ2ùêø1ùêøùêøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsubscriptsuperscript‚Ñí‚Ä≤ùëÄ0superscriptsubscriptnormùëÄ2ùêø1ùêø\\\\displaystyle R(\\\\bar{\\\\mathbf{W}})=L(d\\_{0}d\\_{L})^{1/L}{\\\\\\|E(\\\\bar{{\\\\bm{W}}})\\\\\\|\\_{\\*}}^{2(L-1)/L}=L(d\\_{0}d\\_{L})^{1/L}{\\\\min\\_{{\\\\mathcal{L}}^{\\\\prime}(M)=0}\\\\\\|M\\\\\\|\\_{\\*}}^{2(L-1)/L}. |  | (19) |\n\nNow from the definition of E‚Äã(ùëæ‚àó)ùê∏superscriptùëæE({\\\\bm{W}}^{\\*}),\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | tr‚Äã(‚àá2L)‚Äã(ùêñ‚àó)‚â§tr‚Äã(‚àá2L)‚Äã(ùêñ¬Ø)‚â§(1+Œ¥)‚ÄãR‚Äã(ùêñ¬Ø),trsuperscript‚àá2ùêøsuperscriptùêñtrsuperscript‚àá2ùêø¬Øùêñ1ùõøùëÖ¬Øùêñ\\\\displaystyle\\\\textup{tr}(\\\\nabla^{2}L)(\\\\mathbf{W}^{\\*})\\\\leq\\\\textup{tr}(\\\\nabla^{2}L)(\\\\bar{\\\\mathbf{W}})\\\\leq(1+\\\\delta)R(\\\\bar{\\\\mathbf{W}}), |  | (20) |\n\nwhere the last inequality follows from the definition of WùëäW. On the other hand\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | tr‚Äã(‚àá2L)‚Äã(ùêñ‚àó)‚â•(1‚àíŒ¥)‚ÄãR‚Äã(ùêñ¬Ø)‚â•(1‚àíŒ¥)‚ÄãL‚Äã(d0‚ÄãdL)1/L‚Äã‚ÄñE‚Äã(ùêñ‚àó)‚Äñ‚àó2‚Äã(L‚àí1)/L.trsuperscript‚àá2ùêøsuperscriptùêñ1ùõøùëÖ¬Øùêñ1ùõøùêøsuperscriptsubscriptùëë0subscriptùëëùêø1ùêøsuperscriptsubscriptnormùê∏superscriptùêñ2ùêø1ùêø\\\\displaystyle\\\\textup{tr}(\\\\nabla^{2}L)({\\\\mathbf{W}}^{\\*})\\\\geq(1-\\\\delta)R(\\\\bar{\\\\mathbf{W}})\\\\geq(1-\\\\delta)L(d\\_{0}d\\_{L})^{1/L}{\\\\\\|E({\\\\mathbf{W}}^{\\*})\\\\\\|\\_{\\*}}^{2(L-1)/L}. |  | (21) |\n\nCombining ( [19]Equation 19 ‚Ä£ Proof of Theorem 1. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")), ( [20]Equation 20 ‚Ä£ Proof of Theorem 1. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) and ( [21]Equation 21 ‚Ä£ Proof of Theorem 1. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")),\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚ÄñE‚Äã(ùêñ‚àó)‚Äñ‚àó‚â§(1+Œ¥1‚àíŒ¥)L2‚Äã(L‚àí1)‚Äãmin‚Ñí‚Ä≤‚Äã(M)=0‚Å°‚ÄñM‚Äñ‚àó.subscriptnormùê∏superscriptùêñsuperscript1ùõø1ùõøùêø2ùêø1subscriptsuperscript‚Ñí‚Ä≤ùëÄ0subscriptnormùëÄ\\\\displaystyle\\\\\\|E({\\\\mathbf{W}}^{\\*})\\\\\\|\\_{\\*}\\\\leq(\\\\frac{1+\\\\delta}{1-\\\\delta})^{\\\\frac{L}{2(L-1)}}\\\\min\\_{{\\\\mathcal{L}}^{\\\\prime}(M)=0}\\\\\\|M\\\\\\|\\_{\\*}. |  |\n\nThe proof is completed by noting that L2‚Äã(L‚àí1)‚â§1ùêø2ùêø11\\\\frac{L}{2(L-1)}\\\\leq 1 for all L‚â•2ùêø2L\\\\geq 2.\n‚àé\n\nThus combining [Example1]Example 1. ‚Ä£ 5.1 Preliminaries for RIP ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") and [Theorem1]Theorem 1 (Induced regularizer under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") with Œ¥=1/2ùõø12\\\\delta=1/2, we have the following corollary.\n\n###### Corollary 1.\n\nLet {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} be sampled independently from Gaussian distribution ùí¢dL√ód0subscriptùí¢subscriptùëëùêøsubscriptùëë0{\\\\mathcal{G}}\\_{d\\_{L}\\\\times d\\_{0}} where n‚â•Œ©‚Äã((d0+dL))ùëõŒ©subscriptùëë0subscriptùëëùêøn\\\\geq\\\\Omega((d\\_{0}+d\\_{L})), with probability at least 1‚àíexp‚Å°(Œ©‚Äã(n))1Œ©ùëõ1-\\\\exp(\\\\Omega(n)), we have\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚ÄñE‚Äã(ùëæ‚àó)‚Äñ‚àó‚â§3‚Äãmin‚Ñí‚Ä≤‚Äã(M)=0‚Å°‚ÄñM‚Äñ‚àó‚â§3‚Äã‚ÄñE‚Äã(ùëæ‚àó)‚Äñ‚àó.subscriptnormùê∏superscriptùëæ3subscriptsuperscript‚Ñí‚Ä≤ùëÄ0subscriptnormùëÄ3subscriptnormùê∏superscriptùëæ\\\\displaystyle\\\\\\|E({\\\\bm{W}}^{\\*})\\\\\\|\\_{\\*}\\\\leq 3\\\\min\\_{{\\\\mathcal{L}}^{\\\\prime}(M)=0}\\\\\\|M\\\\\\|\\_{\\*}\\\\leq 3\\\\left\\\\\\|E({\\\\bm{W}}^{\\*})\\\\right\\\\\\|\\_{\\*}. |  |\n\n### 5.3 Recovering the Ground truth\n\nIn this section, we prove Theorem [2]Theorem 2 (Recovery of the ground truth under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"). The idea is to show that under RIP, the empirical loss ‚Ñí‚Äã(ùëæ)‚Ñíùëæ{\\\\mathcal{L}}({\\\\bm{W}}) is a good approximation for the Frobenius distance of E‚Äã(ùëæ)ùê∏ùëæE({\\\\bm{W}}) to the ground truth M‚àósuperscriptùëÄM^{\\*}. To this end, we first introduce a very useful Lemma [5]Lemma 5. ‚Ä£ 5.3 Recovering the Ground truth ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") below, whose proof is deferred to [AppendixC]Appendix C Other Omitted Proofs ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\n###### Lemma 5.\n\nSuppose the measurements {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} satisfy the (2,Œ¥)2ùõø(2,\\\\delta)-RIP condition. Then for any matrix M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}, we have that\n\n|     |     |     |\n| --- | --- | --- |\n|  | \\|1n‚Äã‚àëi=1n‚ü®Ai,M‚ü©2‚àí‚ÄñM‚ÄñF2\\|‚â§2‚ÄãŒ¥‚Äã‚ÄñM‚Äñ‚àó2.1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùê¥ùëñùëÄ2superscriptsubscriptnormùëÄùêπ22ùõøsubscriptsuperscriptnormùëÄ2\\\\displaystyle\\\\Big{\\|}\\\\frac{1}{n}\\\\sum\\\\nolimits\\_{i=1}^{n}\\\\left\\\\langle A\\_{i},M\\\\right\\\\rangle^{2}-\\\\\\|M\\\\\\|\\_{F}^{2}\\\\Big{\\|}\\\\leq 2\\\\delta\\\\\\|M\\\\\\|^{2}\\_{\\*}. |  |\n\nWe note that if {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n} are i.i.d. random matrices with each coordinate being independent, zero mean, and unit variance (like standard Gaussian distribution), then ‚ÄñW‚àíM‚àó‚ÄñF2superscriptsubscriptnormùëäsuperscriptùëÄùêπ2\\\\\\|W-M^{\\*}\\\\\\|\\_{F}^{2} is the population squared loss corresponding to WùëäW. Thus, [Theorem2]Theorem 2 (Recovery of the ground truth under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") implies a generalization bound for this case. Now we are ready to prove [Theorem2]Theorem 2 (Recovery of the ground truth under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\n###### Proof of [Theorem2]Theorem 2 (Recovery of the ground truth under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").\n\nNote that from [Theorem1]Theorem 1 (Induced regularizer under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"),\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚ÄñE‚Äã(ùëæ)‚Äñ‚àó‚â§1+Œ¥1‚àíŒ¥‚Äãmin‚Ñí‚Ä≤‚Äã(M)=0‚Å°‚ÄñM‚Äñ‚àó‚â§1+Œ¥1‚àíŒ¥‚Äã‚ÄñM‚àó‚Äñ‚àó,subscriptnormùê∏ùëæ1ùõø1ùõøsubscriptsuperscript‚Ñí‚Ä≤ùëÄ0subscriptnormùëÄ1ùõø1ùõøsubscriptnormsuperscriptùëÄ\\\\displaystyle\\\\\\|E({\\\\bm{W}})\\\\\\|\\_{\\*}\\\\leq\\\\frac{1+\\\\delta}{1-\\\\delta}\\\\min\\_{{\\\\mathcal{L}}^{\\\\prime}(M)=0}\\\\\\|M\\\\\\|\\_{\\*}\\\\leq\\\\frac{1+\\\\delta}{1-\\\\delta}\\\\\\|M^{\\*}\\\\\\|\\_{\\*}, |  |\n\nwhich implies the following by triangle inequality,\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ‚ÄñE‚Äã(ùëæ)‚àíM‚àó‚Äñ‚àósubscriptnormùê∏ùëæsuperscriptùëÄ\\\\displaystyle\\\\\\|E({\\\\bm{W}})-M^{\\*}\\\\\\|\\_{\\*} | ‚â§‚ÄñE~‚Äã(ùëæ)‚Äñ‚àó+‚ÄñM‚àó‚Äñ‚àó‚â§21‚àíŒ¥‚Äã‚ÄñM‚àó‚Äñ‚àó.absentsubscriptnorm~ùê∏ùëæsubscriptnormsuperscriptùëÄ21ùõøsubscriptnormsuperscriptùëÄ\\\\displaystyle\\\\leq\\\\\\|\\\\tilde{E}({\\\\bm{W}})\\\\\\|\\_{\\*}+\\\\\\|M^{\\*}\\\\\\|\\_{\\*}\\\\leq\\\\frac{2}{1-\\\\delta}\\\\\\|M^{\\*}\\\\\\|\\_{\\*}. |  | (22) |\n\nCombining ( [22]Equation 22 ‚Ä£ Proof of Theorem 2. ‚Ä£ 5.3 Recovering the Ground truth ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) with Lemma [5]Lemma 5. ‚Ä£ 5.3 Recovering the Ground truth ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") (with M=E‚Äã(ùëæ)‚àíM‚àóùëÄùê∏ùëæsuperscriptùëÄM=E({\\\\bm{W}})-M^{\\*}):\n\n|     |     |     |\n| --- | --- | --- |\n|  | \\|1n‚Äã‚àëi=1n‚ü®Ai,E‚Äã(ùëæ‚àó)‚àíM‚àó‚ü©2‚àí‚ÄñE‚Äã(ùëæ‚àó)‚àíM‚àó‚ÄñF2\\|‚â§8‚ÄãŒ¥(1‚àíŒ¥)2‚Äã‚ÄñM‚àó‚Äñ‚àó2.1ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùê¥ùëñùê∏superscriptùëæsuperscriptùëÄ2superscriptsubscriptnormùê∏superscriptùëæsuperscriptùëÄùêπ28ùõøsuperscript1ùõø2superscriptsubscriptnormsuperscriptùëÄ2\\\\displaystyle\\\\Big{\\|}\\\\frac{1}{n}\\\\sum\\\\nolimits\\_{i=1}^{n}\\\\left\\\\langle A\\_{i},E({\\\\bm{W}}^{\\*})-M^{\\*}\\\\right\\\\rangle^{2}-\\\\\\|E({\\\\bm{W}}^{\\*})-M^{\\*}\\\\\\|\\_{F}^{2}\\\\Big{\\|}\\\\leq\\\\frac{8\\\\delta}{(1-\\\\delta)^{2}}\\\\\\|M^{\\*}\\\\\\|\\_{\\*}^{2}. |  |\n\nSince W‚àósuperscriptùëäW^{\\*} satisfies the linear constraints tr‚Äã(Ai‚ÄãE‚Äã(ùêñ‚àó))=bitrsubscriptùê¥ùëñùê∏superscriptùêñsubscriptùëèùëñ\\\\textup{tr}(A\\_{i}E(\\\\mathbf{W}^{\\*}))=b\\_{i}, 1n‚Äã‚àëi=1n‚ü®Ai,E‚Äã(ùëæ‚àó)‚àíM‚àó‚ü©2=1n‚Äã‚àëi=1n(‚ü®Ai,E‚Äã(ùëæ‚àó)‚ü©‚àíbi)2=01ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùê¥ùëñùê∏superscriptùëæsuperscriptùëÄ21ùëõsuperscriptsubscriptùëñ1ùëõsuperscriptsubscriptùê¥ùëñùê∏superscriptùëæsubscriptùëèùëñ20\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\left\\\\langle A\\_{i},E({\\\\bm{W}}^{\\*})-M^{\\*}\\\\right\\\\rangle^{2}=\\\\frac{1}{n}\\\\sum\\_{i=1}^{n}\\\\big{(}\\\\left\\\\langle A\\_{i},E({\\\\bm{W}}^{\\*})\\\\right\\\\rangle-b\\_{i}\\\\big{)}^{2}=0, which completes the proof.\n‚àé\n\n### 5.4 Generalization Bound\n\nIn this section, we prove the generalization bound in Theorem [3]Theorem 3. ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), which yields a faster rate of O‚Äã(d0+dLn‚Äã‚ÄñM‚àó‚Äñ‚àó2)ùëÇsubscriptùëë0subscriptùëëùêøùëõsuperscriptsubscriptnormsuperscriptùëÄ2O(\\\\frac{d\\_{0}+d\\_{L}}{n}\\\\left\\\\\\|M^{\\*}\\\\right\\\\\\|\\_{\\*}^{2}) compared to O‚Äã(d0+dLn‚Äã‚ÄñM‚àó‚Äñ‚àó2)ùëÇsubscriptùëë0subscriptùëëùêøùëõsuperscriptsubscriptnormsuperscriptùëÄ2O(\\\\sqrt{\\\\frac{d\\_{0}+d\\_{L}}{n}}\\\\left\\\\\\|M^{\\*}\\\\right\\\\\\|\\_{\\*}^{2}) in Theorem [2]Theorem 2 (Recovery of the ground truth under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"). The intuition for this is as follows: By [Corollary1]Corollary 1. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), we know that with very high probability, the learned solution has a bounded nuclear norm for its end-to-end matrix, no larger than 3‚Äã‚ÄñM‚àó‚Äñ23subscriptnormsuperscriptùëÄ23\\\\left\\\\\\|M^{\\*}\\\\right\\\\\\|\\_{2}, where M‚àósuperscriptùëÄM^{\\*} is the ground truth.\nThe key mathematical tool is [Theorem6]Theorem 6 (Theorem 1, Srebro et al. (2010)). ‚Ä£ 5.4 Generalization Bound ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"), which provides an upper bound on the population error of the learned interpolation solution that is proportional to the square of the Rademacher complexity of the function class ‚Ñã3‚Äã‚ÄñM‚àó‚Äñ‚àó={hM‚à£‚ÄñM‚Äñ‚àó‚â§3‚Äã‚ÄñM‚àó‚Äñ‚àó}subscript‚Ñã3subscriptnormsuperscriptùëÄconditional-setsubscript‚ÑéùëÄsubscriptnormùëÄ3subscriptnormsuperscriptùëÄ{\\\\mathcal{H}}\\_{3\\\\\\|M^{\\*}\\\\\\|\\_{\\*}}=\\\\{h\\_{M}\\\\mid\\\\left\\\\\\|M\\\\right\\\\\\|\\_{\\*}\\\\leq 3\\\\left\\\\\\|M^{\\*}\\\\right\\\\\\|\\_{\\*}\\\\}.\n\n###### Theorem 6(Theorem 1, Srebro et al. ( [2010]))).\n\nLet ‚Ñã‚Ñã{\\\\mathcal{H}} be a class of real-valued functions and ‚Ñì:‚Ñù√ó‚Ñù‚Üí‚Ñù:‚Ñì‚Üí‚Ñù‚Ñù‚Ñù\\\\ell:\\\\mathbb{R}\\\\times\\\\mathbb{R}\\\\to\\\\mathbb{R} be a differentiable non-negative loss function satisfying that (1) for any fixed y‚àà‚Ñùùë¶‚Ñùy\\\\in\\\\mathbb{R}, the partial derivative ‚Ñì‚Äã(‚ãÖ,y)‚Ñì‚ãÖùë¶\\\\ell(\\\\cdot,y) with respect to its first coordinate is HùêªH-Lipschitz and (2) \\|supx,y‚Ñì‚Äã(x,y)\\|‚â§Bsubscriptsupremumùë•ùë¶‚Ñìùë•ùë¶ùêµ\\|\\\\sup\\_{x,y}\\\\ell(x,y)\\|\\\\leq B, where H,BùêªùêµH,B are some positive constants. Then for any p>0ùëù0p>0, we have that with probability at least 1‚àíp1ùëù1-p over a random sample of size nùëõn, for any h‚àà‚Ñã‚Ñé‚Ñãh\\\\in{\\\\mathcal{H}} with zero training loss,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñí¬Ø‚Äã(h)‚â§O‚Äã(H‚Äãlog3‚Å°n‚Äã‚Ñõn2‚Äã(‚Ñã)+B‚Äãlog‚Å°(1/p)n).¬Ø‚Ñí‚ÑéùëÇùêªsuperscript3ùëõsuperscriptsubscript‚Ñõùëõ2‚Ñãùêµ1ùëùùëõ\\\\displaystyle\\\\bar{\\\\mathcal{L}}(h)\\\\leq O\\\\left(H\\\\log^{3}n{\\\\mathcal{R}}\\_{n}^{2}({\\\\mathcal{H}})+\\\\frac{B\\\\log(1/p)}{n}\\\\right). |  | (23) |\n\nOne technical difficulty is that [Theorem6]Theorem 6 (Theorem 1, Srebro et al. (2010)). ‚Ä£ 5.4 Generalization Bound ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") only works for bounded loss functions, but the ‚Ñì2subscript‚Ñì2\\\\ell\\_{2} loss on Gaussian data is unbounded. To circumvent this issue, we construct a smoothly truncated variant of ‚Ñì2subscript‚Ñì2\\\\ell\\_{2} loss ( [41]Equation 41 ‚Ä£ Proof of Theorem 3. ‚Ä£ C.1 Proof of Theorem 3 ‚Ä£ Appendix C Other Omitted Proofs ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) and apply [Theorem6]Theorem 6 (Theorem 1, Srebro et al. (2010)). ‚Ä£ 5.4 Generalization Bound ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") on that. Finally, we show that with a carefully chosen threshold, this truncation happens very rarely and, thus, does not change the population loss significantly. The proof can be found in [AppendixC]Appendix C Other Omitted Proofs ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\").",
            "citations": null
          },
          "6 Result for the Single Measurement Case": {
            "content": "Quite surprisingly, even though in the general case we cannot compute the closed-form of the induced regularizer in ( [12]Equation 12 ‚Ä£ Lemma 4. ‚Ä£ 5.2 Induced Regularizer of Trace of Hessian is Approximately Nuclear Norm ‚Ä£ 5 Results for Measurements with Restricted Isometry Property (RIP) ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")), we can find its minimum as a quasinorm function of the E‚Äã(ùëæ)ùê∏ùëæE({\\\\bm{W}}) which only depends on the singular values of E‚Äã(ùëæ)ùê∏ùëæE({\\\\bm{W}}). This yields the following result for multiple layers LùêøL (possibly L>2ùêø2L>2) with a single measurement.\n\n###### Theorem 7.\n\nSuppose there is only a single measurement matrix Aùê¥A, _i.e._, n=1ùëõ1n=1. For any M‚àà‚ÑùdL√ód0ùëÄsuperscript‚Ñùsubscriptùëëùêøsubscriptùëë0M\\\\in\\\\mathbb{R}^{d\\_{L}\\\\times d\\_{0}}, the following holds:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | F‚Äã(M)=minWL‚Äã‚Ä¶‚ÄãW1=M‚Å°tr‚Äã\\[‚àá2‚Ñí\\]‚Äã(ùëæ)=L‚Äã‚Äñ(AT‚ÄãM)L‚àí1‚ÄãAT‚ÄñS2/L2/L.ùêπùëÄsubscriptsubscriptùëäùêø‚Ä¶subscriptùëä1ùëÄtrdelimited-\\[\\]superscript‚àá2‚Ñíùëæùêøsuperscriptsubscriptnormsuperscriptsuperscriptùê¥ùëáùëÄùêø1superscriptùê¥ùëásubscriptùëÜ2ùêø2ùêø\\\\displaystyle F(M)=\\\\min\\_{W\\_{L}\\\\dots W\\_{1}=M}\\\\textup{tr}\\[\\\\nabla^{2}{\\\\mathcal{L}}\\]({\\\\bm{W}})=L\\\\left\\\\\\|\\\\Big{(}A^{T}M\\\\Big{)}^{L-1}A^{T}\\\\right\\\\\\|\\_{S\\_{2/L}}^{2/L}. |  | (24) |\n\nTo better illustrate the behavior of this induced regularizer, consider the case where the measurement matrix Aùê¥A is identity and MùëÄM is symmetric with eigenvalues {œÉi}i=1dsuperscriptsubscriptsubscriptùúéùëñùëñ1ùëë\\\\{\\\\sigma\\_{i}\\\\}\\_{i=1}^{d}. Then, it is easy to see that F‚Äã(M)ùêπùëÄF(M) in ( [24]Equation 24 ‚Ä£ Theorem 7. ‚Ä£ 6 Result for the Single Measurement Case ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")) is equal to F‚Äã(M)=‚àëiœÉi2‚Äã(L‚àí1)/LùêπùëÄsubscriptùëñsuperscriptsubscriptùúéùëñ2ùêø1ùêøF(M)=\\\\sum\\_{i}\\\\sigma\\_{i}^{2(L-1)/L}. Interestingly, we see that the value of F‚Äã(M)ùêπùëÄF(M) converges to the Frobenius norm of MùëÄM and not the nuclear norm as LùêøL becomes large, which behaves quite differently (e.g. in the context of sparse recovery). This means that beyond RIP, the induced regularizer can behave very differently, and perhaps the success of training deep networks with SGD is closely tied to the properties of the dataset.",
            "citations": null
          },
          "7 Experiments": {
            "content": "In this section, we examine our theoretical results with controlled experiments via synthetic data. The experiments are based on mini-batch SGD and label noise SGD (Blanc et al., [2019])). Both use the standard update rule ùëæt+1=ùëæt‚àíŒ∑‚Äã‚àá‚Ñít‚Äã(ùëæt)subscriptùëæùë°1subscriptùëæùë°ùúÇ‚àásubscript‚Ñíùë°subscriptùëæùë°{\\\\bm{W}}\\_{t+1}={\\\\bm{W}}\\_{t}-\\\\eta\\\\nabla{\\\\mathcal{L}}\\_{t}({\\\\bm{W}}\\_{t}), but with different objectives:\n\n- ‚Ä¢\n\n\nMini-batch loss: ‚Ñítmini-batch‚Äã(ùëæ)=1B‚Äã‚àëi‚àà‚Ñ¨t(fi‚Äã(ùëæ)‚àíbi)2superscriptsubscript‚Ñíùë°mini-batchùëæ1ùêµsubscriptùëñsubscript‚Ñ¨ùë°superscriptsubscriptùëìùëñùëæsubscriptùëèùëñ2{\\\\mathcal{L}}\\_{t}^{\\\\textup{mini-batch}}({\\\\bm{W}})=\\\\frac{1}{B}\\\\sum\\_{i\\\\in\\\\mathcal{B}\\_{t}}(f\\_{i}({\\\\bm{W}})-b\\_{i})^{2};\n\n- ‚Ä¢\n\n\nLabel-noise loss: ‚Ñítlabel-noise‚Äã(ùëæ)=1B‚Äã‚àëi‚àà‚Ñ¨t(fi‚Äã(ùëæ)‚àíbi+Œæt,i)2superscriptsubscript‚Ñíùë°label-noiseùëæ1ùêµsubscriptùëñsubscript‚Ñ¨ùë°superscriptsubscriptùëìùëñùëæsubscriptùëèùëñsubscriptùúâùë°ùëñ2{\\\\mathcal{L}}\\_{t}^{\\\\textup{label-noise}({\\\\bm{W}})}=\\\\frac{1}{B}\\\\sum\\_{i\\\\in\\\\mathcal{B}\\_{t}}(f\\_{i}({\\\\bm{W}})-b\\_{i}+\\\\xi\\_{t,i})^{2},\n\n\nwhere ‚Ñ¨tsubscript‚Ñ¨ùë°\\\\mathcal{B}\\_{t} is the batch of size BùêµB independently sampled with replacement at step tùë°t and Œæt‚àà‚Ñùdsubscriptùúâùë°superscript‚Ñùùëë\\\\xi\\_{t}\\\\in\\\\mathbb{R}^{d} are i.i.d. multivariate zero-mean Gaussian random variables with unit variance.\n\nIt is known that with a small learning rate, label noise SGD implicitly minimizes the trace of Hessian of the loss, after reaching zero loss (Damian et al., [2021]); Li et al., [2021])). In particular, Li et al. ( [2021])) show that after reaching zero loss, in the limit of step size going to zero, label noise SGD converges to a gradient flow according to the negative gradient of the trace of Hessian of the loss. As a result, we expect label noise SGD to be biased to regions with smaller trace of Hessian. We also compare the label noise SGD with vanilla SGD without label noise as a baseline, which can potentially find a solution with large sharpness when the learning rate is small. Note this is not contradictory with the common belief that mini-batch SGD prefers flat minimizers and thus benefits generalization (Keskar et al., [2016]); Jastrzebski et al., [2017])). For example, assuming the convergence of mini-batch SGD, (Wu et al., [2018])) shows that the solution found by SGD must have a small sharpness, bounded by a certain function of the learning rate. However, there is no guarantee when the learning rate is small and the upper bound of sharpness becomes vacuous.\n\n![Refer to caption]Figure 1: Train and test loss. Label noise SGD leads to better generalization results due to the sharpness-minimization implicit biases (as shown in Figure [2]Figure 2 ‚Ä£ 7 Experiments ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")), while mini-batch SGD without label noise finds solutions with much larger test loss.![Refer to caption]Figure 2: Trace of Hessian and Nuclear Norm. Label noise SGD recovers the min nuclear norm solution via its sharpness-minimization implicit regularization and thus leads to better generalization (see [Figure1]In 7 Experiments ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\")).\n\nIn our synthetic experiments, we sample n=600ùëõ600n=600 input matrices {Ai}i=1nsuperscriptsubscriptsubscriptùê¥ùëñùëñ1ùëõ\\\\{A\\_{i}\\\\}\\_{i=1}^{n}, where Ai‚àà‚Ñùd√ódsubscriptùê¥ùëñsuperscript‚ÑùùëëùëëA\\_{i}\\\\in{\\\\mathbb{R}}^{d\\\\times d} with d=60ùëë60d=60. Each entry Ai(j,k)superscriptsubscriptùê¥ùëñùëóùëòA\\_{i}^{(j,k)} is i.i.d. sampled from normal distribution ùí©‚Äã(0,1)ùí©01{\\\\mathcal{N}}(0,1). The ground truth matrix M‚àósuperscriptùëÄ‚àóM^{\\\\ast} is constructed by M‚àó=M1‚ÄãM2/dsuperscriptùëÄ‚àósubscriptùëÄ1subscriptùëÄ2ùëëM^{\\\\ast}=M\\_{1}M\\_{2}/d, where M1‚àà‚Ñùd√órsubscriptùëÄ1superscript‚ÑùùëëùëüM\\_{1}\\\\in{\\\\mathbb{R}}^{d\\\\times r} and M2‚àà‚Ñùr√ódsubscriptùëÄ2superscript‚ÑùùëüùëëM\\_{2}\\\\in{\\\\mathbb{R}}^{r\\\\times d} and rùëür is the rank of M‚àósuperscriptùëÄ‚àóM^{\\\\ast}. The entries in M1subscriptùëÄ1M\\_{1} and M2subscriptùëÄ2M\\_{2} are again i.i.d. sampled from ùí©‚Äã(0,1)ùí©01{\\\\mathcal{N}}(0,1) and the rank rùëür is set to 333. The corresponding label is therefore computed via bi=‚ü®Ai,M‚àó‚ü©subscriptùëèùëñsubscriptùê¥ùëñsuperscriptùëÄ‚àób\\_{i}=\\\\langle A\\_{i},M^{\\\\ast}\\\\rangle. The parameters (W1,‚Ä¶,WL)subscriptùëä1‚Ä¶subscriptùëäùêø(W\\_{1},...,W\\_{L}) are sampled from a zero-mean normal distribution for depth L=2,3,5,ùêø235L=2,3,5, and 101010. For label noise SGD, we optimize the parameter via SGD with label noise drawn from ùí©‚Äã(0,1)ùí©01{\\\\mathcal{N}}(0,1) and batch size 505050. The learning rate is set to 0.010.010.01.\n\nWe examine our theory by plotting the training and testing loss along with the nuclear norm and the trace of Hessian of the label noise SGD solutions in [Figures1]In 7 Experiments ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") and [2]Figure 2 ‚Ä£ 7 Experiments ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"). As the figure illustrates, the trace of the Hessian exhibits a gradual decrement, eventually reaching a state of convergence over the course of the training process. This phenomenon co-occurs with the decreasing of the nuclear norm of the end-to-end matrix. In particular, we further plot the nuclear norm of the min nuclear norm solution obtained via solving convex optimization in [Figure2]In 7 Experiments ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\") and demonstrate that label noise SGD converges to the minimal nuclear norm solution, as predicted by our theorem [Theorem1]Theorem 1 (Induced regularizer under RIP). ‚Ä£ 1.1 Main Results ‚Ä£ 1 Introduction ‚Ä£ The Inductive Bias of Flatness Regularization for Deep Matrix Factorization\"). As a consequence of this sharpness-minimization implicit bias, the test loss decreases drastically.\n\nInterestingly, there are a few large spikes in the training loss curve of mini-batch SGD without label noise even after the training loss becomes as small as 10‚àí12superscript101210^{-12} and its generalization improves immediately after recovering from the spike. Meanwhile, the trace of hessian and the nuclear decrease during this process. We do not have a complete explanation for such spikes. One possible explanation from the literature (Ma et al., [2018])) is that the loss landscape around the minimizers is too sharp and thus mini-batch SGD is not linear stable around the minimizer, so it escapes eventually. However, this explanation does not explain why minibatch SGD can find a flatter minimizer each time after escaping and re-converging.",
            "citations": null
          },
          "8 Conclusion and Future Directions": {
            "content": "In this paper, we study the inductive bias of the minimum trace of the Hessian solutions for learning deep linear networks from linear measurements. We show that trace of Hessian regularization of loss on the end-to-end matrix of deep linear networks roughly corresponds to nuclear norm regularization under restricted isometry property (RIP) and yields a way to recover the ground truth matrix. Furthermore, leveraging this connection with the nuclear norm regularization, we show a generalization bound which yields a faster rate than Frobenius (or ‚Ñì2subscript‚Ñì2\\\\ell\\_{2} norm) regularizer for Gaussian distributions. Finally, going beyond RIP conditions, we obtain closed-form solutions for the case of a single measurement. Several avenues for future work remain open, e.g., more general characterization of trace of Hessian regularization beyond RIP settings and understanding it for neural networks with non-linear activations.",
            "citations": null
          }
        },
        "abstract": "Recent works on over-parameterized neural networks have shown that the\nstochasticity in optimizers has the implicit regularization effect of\nminimizing the sharpness of the loss function (in particular, the trace of its\nHessian) over the family zero-loss solutions. More explicit forms of flatness\nregularization also empirically improve the generalization performance.\nHowever, it remains unclear why and when flatness regularization leads to\nbetter generalization. This work takes the first step toward understanding the\ninductive bias of the minimum trace of the Hessian solutions in an important\nsetting: learning deep linear networks from linear measurements, also known as\n\\emph{deep matrix factorization}. We show that for all depth greater than one,\nwith the standard Restricted Isometry Property (RIP) on the measurements,\nminimizing the trace of Hessian is approximately equivalent to minimizing the\nSchatten 1-norm of the corresponding end-to-end matrix parameters (i.e., the\nproduct of all layer matrices), which in turn leads to better generalization.\nWe empirically verify our theoretical findings on synthetic datasets."
      },
      "bib.bib49": {
        "id": "bib.bib49",
        "citation": "Simonyan & Zisserman (2015)",
        "authors": "",
        "year": "",
        "title": "Very deep convolutional networks for large-scale image recognition.",
        "venue": "3rd International Conference on Learning Representations, ICLR 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings",
        "pages": "",
        "url": "http://arxiv.org/abs/1409.1556",
        "arxiv_id": "1409.1556",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Convolutional networks (ConvNets) have recently enjoyed a great success in large-scale image and video recognition (Krizhevsky et al., [2012]); Zeiler & Fergus, [2013]); Sermanet et al., [2014]); Simonyan & Zisserman, [2014]))\nwhich has become possible due to the large public image repositories, such as ImageNet (Deng et al., [2009])), and high-performance computing systems, such as GPUs or large-scale distributed clusters (Dean et al., [2012])).\nIn particular, an important role in the advance of deep visual recognition architectures has been played by the ImageNet Large-Scale Visual Recognition Challenge (ILSVRC) (Russakovsky et al., [2014])),\nwhich has served as a testbed for a few generations of large-scale image classification systems, from high-dimensional shallow feature encodings (Perronnin et al., [2010])) (the winner of ILSVRC-2011)\nto deep ConvNets (Krizhevsky et al., [2012])) (the winner of ILSVRC-2012).\n\nWith ConvNets becoming more of a commodity in the computer vision field, a number of attempts have been made to improve the original architecture of Krizhevsky et al. ( [2012])) in a bid to achieve\nbetter accuracy. For instance, the best-performing submissions to the ILSVRC-2013 (Zeiler & Fergus, [2013]); Sermanet et al., [2014])) utilised smaller receptive window size and smaller stride of the first convolutional\nlayer. Another line of improvements dealt with training and testing the networks densely over the whole image and over multiple scales (Sermanet et al., [2014]); Howard, [2014])).\nIn this paper, we address another important aspect of ConvNet architecture design ‚Äì its depth.\nTo this end, we fix other parameters of the architecture, and steadily increase the depth of the network by adding more convolutional layers, which is feasible due to the use of very small (3√ó3333\\\\times 3) convolution filters in all layers.\n\nAs a result, we come up with significantly more accurate ConvNet architectures, which not only achieve the state-of-the-art accuracy on ILSVRC classification and localisation tasks, but are also applicable to other image recognition datasets, where they achieve excellent performance even when\nused as a part of a relatively simple pipelines (e.g. deep features classified by a linear SVM without fine-tuning).\nWe have released our two best-performing models111 [http://www.robots.ox.ac.uk/~vgg/research/very\\_deep/] to facilitate further research.\n\nThe rest of the paper is organised as follows. In Sect. [2]ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), we describe our ConvNet configurations.\nThe details of the image classification training and evaluation are then presented in Sect. [3]Classification Framework ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), and the configurations are compared on the ILSVRC classification task in Sect. [4]Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"). Sect. [5]Conclusion ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\") concludes the paper.\nFor completeness, we also describe and assess our ILSVRC-2014 object localisation system in Appendix [A]Appendix A Localisation ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), and discuss the generalisation of very deep features to\nother datasets in Appendix [B]Appendix B Generalisation of Very Deep Features ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"). Finally, Appendix [C]Appendix C Paper Revisions ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\") contains the list of major paper revisions.",
            "citations": null
          },
          "2 ConvNet Configurations": {
            "content": "To measure the improvement brought by the increased ConvNet depth in a fair setting, all our ConvNet layer configurations are designed using the same principles, inspired by Ciresan et al. ( [2011])); Krizhevsky et al. ( [2012])).\nIn this section, we first describe a generic layout of our ConvNet configurations (Sect. [2.1]Architecture ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")) and then detail the specific configurations used in the evaluation (Sect. [2.2]Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")).\nOur design choices are then discussed and compared to the prior art in Sect. [2.3]Discussion ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\").\n\n### 2.1 Architecture\n\nDuring training, the input to our ConvNets is a fixed-size 224√ó224224224224\\\\times 224 RGB image. The only pre-processing we do is subtracting the mean RGB value, computed on the training set, from each pixel.\nThe image is passed through a stack of convolutional (conv.) layers, where we use filters with a very small receptive field: 3√ó3333\\\\times 3 (which is the smallest size to capture the notion of\nleft/right, up/down, center).\nIn one of the configurations we also utilise 1√ó1111\\\\times 1 convolution filters, which can be seen as a linear transformation of the input channels (followed by non-linearity).\nThe convolution stride is fixed to 111 pixel; the spatial padding of conv. layer input is such that the spatial resolution is preserved after convolution, i.e. the padding is 111 pixel for 3√ó3333\\\\times 3 conv. layers.\nSpatial pooling is carried out by five max-pooling layers, which follow some of the conv. layers (not all the conv. layers are followed by max-pooling).\nMax-pooling is performed over a 2√ó2222\\\\times 2 pixel window, with stride 222.\n\nA stack of convolutional layers (which has a different depth in different architectures) is followed by three Fully-Connected (FC) layers: the first\ntwo have 4096 channels each, the third performs 1000-way ILSVRC classification and thus contains 1000 channels (one for each class). The final layer is the soft-max layer.\nThe configuration of the fully connected layers is the same in all networks.\n\nAll hidden layers are equipped with the rectification (ReLU (Krizhevsky et al., [2012]))) non-linearity.\nWe note that none of our networks (except for one) contain Local Response Normalisation (LRN) normalisation (Krizhevsky et al., [2012])): as will be shown in Sect. [4]Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), such normalisation\ndoes not improve the performance on the ILSVRC dataset, but leads to increased memory consumption and computation time.\nWhere applicable, the parameters for the LRN layer are those of (Krizhevsky et al., [2012])).\n\n### 2.2 Configurations\n\nThe ConvNet configurations, evaluated in this paper, are outlined in Table [1]Table 1 ‚Ä£ 2.2 Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), one per column. In the following we will refer to the nets by their names\n(A‚ÄìE). All configurations follow the generic design presented in Sect. [2.1]Architecture ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), and differ only in the depth:\nfrom 11 weight layers in the network A (8 conv. and 3 FC layers) to 19 weight layers in the network E (16 conv. and 3 FC layers).\nThe width of conv. layers (the number of channels) is rather small, starting from 646464 in the first layer and then increasing by a factor of 222 after each max-pooling layer,\nuntil it reaches 512512512.\n\nIn Table [2]Table 2 ‚Ä£ 2.2 Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\") we report the number of parameters for each configuration.\nIn spite of a large depth, the number of weights in our nets is not greater than the number of weights in a more shallow net with larger conv. layer widths and receptive fields\n(144M weights in (Sermanet et al., [2014]))).\n\nTable 1: ConvNet configurations (shown in columns).\nThe depth of the configurations increases from the left (A) to the right (E), as more layers are added (the added layers are shown in bold).\nThe convolutional layer parameters are denoted as ‚Äúconv‚ü®‚ü®\\\\langlereceptive field size‚ü©‚ü©\\\\rangle-‚ü®‚ü®\\\\langlenumber of channels‚ü©‚ü©\\\\rangle‚Äù.\nThe ReLU activation function is not shown for brevity.\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| ConvNet Configuration |\n| A | A-LRN | B | C | D | E |\n| 11 weight | 11 weight | 13 weight | 16 weight | 16 weight | 19 weight |\n| layers | layers | layers | layers | layers | layers |\n| input (224√ó224224224224\\\\times 224 RGB image) |\n| conv3-64 | conv3-64 | conv3-64 | conv3-64 | conv3-64 | conv3-64 |\n|  | LRN | conv3-64 | conv3-64 | conv3-64 | conv3-64 |\n| maxpool |\n| conv3-128 | conv3-128 | conv3-128 | conv3-128 | conv3-128 | conv3-128 |\n|  |  | conv3-128 | conv3-128 | conv3-128 | conv3-128 |\n| maxpool |\n| conv3-256 | conv3-256 | conv3-256 | conv3-256 | conv3-256 | conv3-256 |\n| conv3-256 | conv3-256 | conv3-256 | conv3-256 | conv3-256 | conv3-256 |\n|  |  |  | conv1-256 | conv3-256 | conv3-256 |\n|  |  |  |  |  | conv3-256 |\n| maxpool |\n| conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 |\n| conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 |\n|  |  |  | conv1-512 | conv3-512 | conv3-512 |\n|  |  |  |  |  | conv3-512 |\n| maxpool |\n| conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 |\n| conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 | conv3-512 |\n|  |  |  | conv1-512 | conv3-512 | conv3-512 |\n|  |  |  |  |  | conv3-512 |\n| maxpool |\n| FC-4096 |\n| FC-4096 |\n| FC-1000 |\n| soft-max |\n\nTable 2: Number of parameters (in millions).\n\n| Network | A,A-LRN | B | C | D | E |\n| --- | --- | --- | --- | --- | --- |\n| Number of parameters | 133 | 133 | 134 | 138 | 144 |\n\n### 2.3 Discussion\n\nOur ConvNet configurations are quite different from the ones used in the top-performing entries of the ILSVRC-2012 (Krizhevsky et al., [2012])) and ILSVRC-2013 competitions (Zeiler & Fergus, [2013]); Sermanet et al., [2014])).\nRather than using relatively large receptive fields in the first conv. layers (e.g. 11√ó11111111\\\\times 11 with stride 444 in (Krizhevsky et al., [2012])), or 7√ó7777\\\\times 7 with stride 222 in (Zeiler & Fergus, [2013]); Sermanet et al., [2014]))),\nwe use very small 3√ó3333\\\\times 3 receptive fields throughout the whole net, which are convolved with the input at every pixel (with stride 111).\nIt is easy to see that a stack of two 3√ó3333\\\\times 3 conv. layers (without spatial pooling in between) has an effective receptive field of 5√ó5555\\\\times 5;\nthree such layers have a 7√ó7777\\\\times 7 effective receptive field.\nSo what have we gained by using, for instance, a stack of three 3√ó3333\\\\times 3 conv. layers instead of a single 7√ó7777\\\\times 7 layer?\nFirst, we incorporate three non-linear rectification layers instead of a single one, which makes the decision function more discriminative.\nSecond, we decrease the number of parameters: assuming that both the input and the output of a three-layer 3√ó3333\\\\times 3 convolution stack has Cùê∂C channels, the stack is parametrised\nby 3‚Äã(32‚ÄãC2)=27‚ÄãC23superscript32superscriptùê∂227superscriptùê∂23\\\\left(3^{2}C^{2}\\\\right)=27C^{2} weights; at the same time, a single 7√ó7777\\\\times 7 conv. layer would require 72‚ÄãC2=49‚ÄãC2superscript72superscriptùê∂249superscriptùê∂27^{2}C^{2}=49C^{2} parameters, i.e. 81%percent8181\\\\% more.\nThis can be seen as imposing a regularisation on the 7√ó7777\\\\times 7 conv. filters, forcing them to have a decomposition through the 3√ó3333\\\\times 3 filters (with non-linearity injected in between).\n\nThe incorporation of 1√ó1111\\\\times 1 conv. layers (configuration C, Table [1]Table 1 ‚Ä£ 2.2 Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")) is a way to increase the non-linearity of the decision function without affecting\nthe receptive fields of the conv. layers. Even though in our case the 1√ó1111\\\\times 1 convolution is essentially a linear projection onto the space of the same dimensionality\n(the number of input and output channels is the same), an additional non-linearity is introduced by the rectification function.\nIt should be noted that 1√ó1111\\\\times 1 conv. layers have recently been utilised in the ‚ÄúNetwork in Network‚Äù architecture of Lin et al. ( [2014])).\n\nSmall-size convolution filters have been previously used by Ciresan et al. ( [2011])), but their nets are significantly less deep than ours, and they did not\nevaluate on the large-scale ILSVRC dataset.\nGoodfellow et al. ( [2014])) applied deep ConvNets (111111 weight layers) to the task of street number recognition, and showed that the increased depth led to better performance.\nGoogLeNet (Szegedy et al., [2014])), a top-performing entry of the ILSVRC-2014 classification task, was developed independently of our work, but is similar in that it is based on very deep ConvNets (22 weight layers) and small convolution filters (apart from 3√ó3333\\\\times 3, they also use 1√ó1111\\\\times 1 and 5√ó5555\\\\times 5 convolutions). Their network topology is, however, more complex than ours, and the spatial resolution of the feature maps is reduced more aggressively in the first layers to decrease the amount of computation. As will be shown in Sect. [4.5]Comparison with the State of the Art ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), our model is outperforming that of Szegedy et al. ( [2014])) in terms of the single-network classification accuracy.",
            "citations": null
          },
          "3 Classification Framework": {
            "content": "In the previous section we presented the details of our network configurations. In this section, we describe the details of classification ConvNet training and evaluation.\n\n### 3.1 Training\n\nThe ConvNet training procedure generally follows Krizhevsky et al. ( [2012])) (except for sampling the input crops from multi-scale training images, as explained later).\nNamely, the training is carried out by optimising the multinomial logistic regression objective using mini-batch gradient descent (based on back-propagation (LeCun et al., [1989]))) with momentum. The batch size was set to 256256256, momentum to 0.90.90.9.\nThe training was regularised by weight decay (the L2subscriptùêø2L\\_{2} penalty multiplier set to 5‚ãÖ10‚àí4‚ãÖ5superscript1045\\\\cdot 10^{-4}) and dropout regularisation for the first two fully-connected layers (dropout ratio set to 0.50.50.5).\nThe learning rate was initially set to 10‚àí2superscript10210^{-2}, and then decreased\nby a factor of 101010 when the validation set accuracy stopped improving. In total, the learning rate was decreased 3 times, and the learning was stopped after 370370370K iterations\n(74 epochs). We conjecture that in spite of the larger number of parameters and the greater depth of our nets compared to (Krizhevsky et al., [2012])), the nets required less epochs\nto converge due to (a) implicit regularisation imposed by greater depth and smaller conv. filter sizes; (b) pre-initialisation of certain layers.\n\nThe initialisation of the network weights is important, since bad initialisation can stall learning due to the instability of gradient in deep nets.\nTo circumvent this problem, we began with training the configuration A (Table [1]Table 1 ‚Ä£ 2.2 Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")), shallow enough to be trained with random initialisation. Then, when training deeper\narchitectures, we initialised the first four convolutional layers and the last three fully-connected layers with the layers of net A (the intermediate layers were\ninitialised randomly). We did not decrease the learning rate for the pre-initialised layers, allowing them to change during learning.\nFor random initialisation (where applicable), we sampled the weights from a normal distribution with the zero mean and 10‚àí2superscript10210^{-2} variance. The biases were initialised with zero.\nIt is worth noting that after the paper submission we found that it is possible to initialise the weights without pre-training by using the random initialisation procedure of Glorot & Bengio ( [2010])).\n\nTo obtain the fixed-size 224√ó224224224224\\\\times 224 ConvNet input images, they were randomly cropped from rescaled training images (one crop per image per SGD iteration).\nTo further augment the training set, the crops underwent random horizontal flipping and random RGB colour shift (Krizhevsky et al., [2012])). Training image rescaling is explained below.\n\n##### Training image size.\n\nLet SùëÜS be the smallest side of an isotropically-rescaled training image, from which the ConvNet input is cropped (we also refer to SùëÜS as the training scale).\nWhile the crop size is fixed to 224√ó224224224224\\\\times 224, in principle SùëÜS can take on any value not less than 224224224: for S=224ùëÜ224S=224 the crop will capture whole-image statistics, completely spanning the smallest side of a training image;\nfor S‚â´224much-greater-thanùëÜ224S\\\\gg 224 the crop will correspond to a small part of the image, containing a small object or an object part.\n\nWe consider two approaches for setting the training scale SùëÜS.\nThe first is to fix SùëÜS, which corresponds to single-scale training (note that image content within the sampled crops can still represent multi-scale image statistics).\nIn our experiments, we evaluated models trained at two fixed scales: S=256ùëÜ256S=256 (which has been widely used in the prior art (Krizhevsky et al., [2012]); Zeiler & Fergus, [2013]); Sermanet et al., [2014]))) and S=384ùëÜ384S=384.\nGiven a ConvNet configuration, we first trained the network using S=256ùëÜ256S=256.\nTo speed-up training of the S=384ùëÜ384S=384 network, it was initialised with the weights pre-trained with S=256ùëÜ256S=256, and we used a smaller initial learning rate of 10‚àí3superscript10310^{-3}.\n\nThe second approach to setting SùëÜS is multi-scale training, where each training image is individually rescaled by randomly sampling SùëÜS from a certain range \\[Sm‚Äãi‚Äãn,Sm‚Äãa‚Äãx\\]subscriptùëÜùëöùëñùëõsubscriptùëÜùëöùëéùë•\\\\left\\[S\\_{min},S\\_{max}\\\\right\\] (we used Sm‚Äãi‚Äãn=256subscriptùëÜùëöùëñùëõ256S\\_{min}=256 and Sm‚Äãa‚Äãx=512subscriptùëÜùëöùëéùë•512S\\_{max}=512).\nSince objects in images can be of different size, it is beneficial to take this into account during training.\nThis can also be seen as training set augmentation by scale jittering, where a single model is trained to recognise objects over a wide range of scales.\nFor speed reasons, we trained multi-scale models by fine-tuning all layers of a single-scale model with the same configuration, pre-trained with fixed S=384ùëÜ384S=384.\n\n### 3.2 Testing\n\nAt test time, given a trained ConvNet and an input image, it is classified in the following way.\nFirst, it is isotropically rescaled to a pre-defined smallest image side, denoted as QùëÑQ (we also refer to it as the test scale).\nWe note that QùëÑQ is not necessarily equal to the training scale SùëÜS (as we will show in Sect. [4]Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"),\nusing several values of QùëÑQ for each SùëÜS leads to improved performance).\nThen, the network is applied densely over the rescaled test image in a way similar to (Sermanet et al., [2014])). Namely, the fully-connected layers are first converted to convolutional layers (the first FC layer to a 7√ó7777\\\\times 7 conv. layer, the last two FC layers to 1√ó1111\\\\times 1 conv. layers). The resulting fully-convolutional net is then applied to the whole (uncropped) image.\nThe result is a class score map with the number of channels equal to the number of classes, and a variable spatial resolution, dependent\non the input image size. Finally, to obtain a fixed-size vector of class scores for the image, the class score map is spatially averaged (sum-pooled).\nWe also augment the test set by horizontal flipping of the images; the soft-max class posteriors of the original and flipped images are averaged to obtain\nthe final scores for the image.\n\nSince the fully-convolutional network is applied over the whole image, there is no need to sample multiple crops at test time (Krizhevsky et al., [2012])), which is less efficient as it requires network re-computation for each crop. At the same time, using a large set of crops, as done by Szegedy et al. ( [2014])), can lead to improved accuracy, as it results in a finer sampling of the input image compared to the fully-convolutional net.\nAlso, multi-crop evaluation is complementary to dense evaluation due to different convolution boundary conditions: when applying a ConvNet to a crop, the convolved feature maps are padded with zeros, while\nin the case of dense evaluation the padding for the same crop naturally comes from the neighbouring parts of an image (due to both the convolutions and spatial pooling), which substantially increases the overall network receptive field, so more context is captured.\nWhile we believe that in practice the increased computation time of multiple crops does not justify the potential gains in accuracy, for reference we also evaluate our networks using 505050 crops per scale (5√ó5555\\\\times 5 regular grid with 222 flips), for a total of 150150150 crops over 333 scales, which is comparable to 144144144 crops over 444 scales used by Szegedy et al. ( [2014])).\n\n### 3.3 Implementation Details\n\nOur implementation is derived from the publicly available C++ Caffe toolbox (Jia, [2013])) (branched out in December 2013), but contains a number of significant modifications,\nallowing us to perform training and evaluation on multiple GPUs installed in a single system, as well as train and evaluate on full-size (uncropped) images at multiple scales (as described above).\nMulti-GPU training exploits data parallelism, and is carried out by splitting each batch of training images into several GPU batches, processed in parallel on each GPU.\nAfter the GPU batch gradients are computed, they are averaged to obtain the gradient of the full batch.\nGradient computation is synchronous across the GPUs, so the result is exactly the same as when training on a single GPU.\n\nWhile more sophisticated methods of speeding up ConvNet training have been recently proposed (Krizhevsky, [2014])), which employ model and data parallelism for different layers\nof the net, we have found that our conceptually much simpler scheme already provides a speedup of 3.753.753.75 times on an off-the-shelf 4-GPU system, as compared to using a single GPU.\nOn a system equipped with four NVIDIA Titan Black GPUs, training a single net took 2‚Äì3 weeks depending on the architecture.",
            "citations": null
          },
          "4 Classification Experiments": {
            "content": "##### Dataset.\n\nIn this section, we present the image classification results achieved by the described ConvNet architectures on the ILSVRC-2012 dataset (which was used for ILSVRC 2012‚Äì2014 challenges).\nThe dataset includes images of 1000 classes, and is split into three sets: training (1.31.31.3M images), validation (505050K images), and testing (100100100K images with held-out class labels).\nThe classification performance is evaluated using two measures: the top-1 and top-5 error. The former is a multi-class classification error, i.e. the proportion of incorrectly\nclassified images; the latter is the main evaluation criterion used in ILSVRC, and is computed as the proportion of images such that the ground-truth category is outside the top-5 predicted categories.\n\nFor the majority of experiments, we used the validation set as the test set. Certain experiments were also carried out on the test set and submitted to the official ILSVRC server\nas a ‚ÄúVGG‚Äù team entry to the ILSVRC-2014 competition (Russakovsky et al., [2014])).\n\n### 4.1 Single Scale Evaluation\n\nWe begin with evaluating the performance of individual ConvNet models at a single scale with the layer configurations described in Sect. [2.2]Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\").\nThe test image size was set as follows: Q=SùëÑùëÜQ=S for fixed SùëÜS, and Q=0.5‚Äã(Sm‚Äãi‚Äãn+Sm‚Äãa‚Äãx)ùëÑ0.5subscriptùëÜùëöùëñùëõsubscriptùëÜùëöùëéùë•Q=0.5(S\\_{min}+S\\_{max}) for jittered S‚àà\\[Sm‚Äãi‚Äãn,Sm‚Äãa‚Äãx\\]ùëÜsubscriptùëÜùëöùëñùëõsubscriptùëÜùëöùëéùë•S\\\\in\\\\left\\[S\\_{min},S\\_{max}\\\\right\\].\nThe results of are shown in Table [3]Table 3 ‚Ä£ 4.1 Single Scale Evaluation ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\").\n\nFirst, we note that using local response normalisation (A-LRN network) does not improve on the model A\nwithout any normalisation layers. We thus do not employ normalisation in the deeper architectures (B‚ÄìE).\n\nSecond, we observe that the classification error decreases with the increased ConvNet depth: from 11 layers in A to 19 layers in E.\nNotably, in spite of the same depth, the configuration C (which contains three 1√ó1111\\\\times 1 conv. layers), performs worse than\nthe configuration D, which uses 3√ó3333\\\\times 3 conv. layers throughout the network.\nThis indicates that while the additional non-linearity does help (C is better than B), it is also important to capture spatial context by using conv. filters with non-trivial receptive fields (D is better than C).\nThe error rate of our architecture saturates when the depth reaches 191919 layers, but even deeper models might be beneficial for larger datasets.\nWe also compared the net B with a shallow net with five 5√ó5555\\\\times 5 conv. layers, which was derived from B by replacing\neach pair of 3√ó3333\\\\times 3 conv. layers with a single 5√ó5555\\\\times 5 conv. layer (which has the same receptive field as explained in Sect. [2.3]Discussion ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")).\nThe top-1 error of the shallow net was measured to be 7%percent77\\\\% higher than that of B (on a center crop), which confirms that a deep net with small\nfilters outperforms a shallow net with larger filters.\n\nFinally, scale jittering at training time (S‚àà\\[256;512\\]ùëÜ256512S\\\\in\\[256;512\\]) leads to significantly better results than training on images with fixed smallest side (S=256ùëÜ256S=256 or S=384ùëÜ384S=384),\neven though a single scale is used at test time. This confirms that training set augmentation by scale jittering is indeed helpful for capturing multi-scale image statistics.\n\nTable 3: ConvNet performance at a single test scale.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| ConvNet config. (Table [1]Table 1 ‚Ä£ 2.2 Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")) | smallest image side | top-1 val. error (%) | top-5 val. error (%) |\n|  | train (SùëÜS) | test (QùëÑQ) |  |  |\n| A | 256 | 256 | 29.6 | 10.4 |\n| A-LRN | 256 | 256 | 29.7 | 10.5 |\n| B | 256 | 256 | 28.7 | 9.9 |\n| C | 256 | 256 | 28.1 | 9.4 |\n| 384 | 384 | 28.1 | 9.3 |\n| \\[256;512\\] | 384 | 27.3 | 8.8 |\n| D | 256 | 256 | 27.0 | 8.8 |\n| 384 | 384 | 26.8 | 8.7 |\n| \\[256;512\\] | 384 | 25.6 | 8.1 |\n| E | 256 | 256 | 27.3 | 9.0 |\n| 384 | 384 | 26.9 | 8.7 |\n| \\[256;512\\] | 384 | 25.5 | 8.0 |\n\n### 4.2 Multi-Scale Evaluation\n\nHaving evaluated the ConvNet models at a single scale, we now assess the effect of scale jittering at test time.\nIt consists of running a model over several rescaled versions of a test image (corresponding to different values of QùëÑQ), followed by averaging the resulting class posteriors.\nConsidering that a large discrepancy between training and testing scales leads to a drop in performance, the models trained with fixed SùëÜS were evaluated over\nthree test image sizes, close to the training one: Q={S‚àí32,S,S+32}ùëÑùëÜ32ùëÜùëÜ32Q=\\\\{S-32,S,S+32\\\\}.\nAt the same time, scale jittering at training time allows the network to be applied to a wider range of scales at test time, so the model trained\nwith variable S‚àà\\[Sm‚Äãi‚Äãn;Sm‚Äãa‚Äãx\\]ùëÜsubscriptùëÜùëöùëñùëõsubscriptùëÜùëöùëéùë•S\\\\in\\[S\\_{min};S\\_{max}\\] was evaluated over a larger range of sizes Q={Sm‚Äãi‚Äãn,0.5‚Äã(Sm‚Äãi‚Äãn+Sm‚Äãa‚Äãx),Sm‚Äãa‚Äãx}ùëÑsubscriptùëÜùëöùëñùëõ0.5subscriptùëÜùëöùëñùëõsubscriptùëÜùëöùëéùë•subscriptùëÜùëöùëéùë•Q=\\\\{S\\_{min},0.5(S\\_{min}+S\\_{max}),S\\_{max}\\\\}.\n\nThe results, presented in Table [4]Table 4 ‚Ä£ 4.2 Multi-Scale Evaluation ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), indicate that scale jittering at test time leads to better performance (as compared to evaluating\nthe same model at a single scale, shown in Table [3]Table 3 ‚Ä£ 4.1 Single Scale Evaluation ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")).\nAs before, the deepest configurations (D and E) perform the best, and scale jittering is better than training with a fixed smallest side SùëÜS.\nOur best single-network performance on the validation set is 24.8%/7.5%percent24.8percent7.524.8\\\\%/7.5\\\\% top-1/top-5 error (highlighted in bold in Table [4]Table 4 ‚Ä£ 4.2 Multi-Scale Evaluation ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")).\nOn the test set, the configuration E achieves 7.3%percent7.37.3\\\\% top-5 error.\n\nTable 4: ConvNet performance at multiple test scales.\n\n| ConvNet config. (Table [1]Table 1 ‚Ä£ 2.2 Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")) | smallest image side | top-1 val. error (%) | top-5 val. error (%) |\n|  | train (SùëÜS) | test (QùëÑQ) |  |  |\n| B | 256 | 224,256,288 | 28.2 | 9.6 |\n| C | 256 | 224,256,288 | 27.7 | 9.2 |\n| 384 | 352,384,416 | 27.8 | 9.2 |\n| \\[256;512\\]256512\\\\left\\[256;512\\\\right\\] | 256,384,512 | 26.3 | 8.2 |\n| D | 256 | 224,256,288 | 26.6 | 8.6 |\n| 384 | 352,384,416 | 26.5 | 8.6 |\n| \\[256;512\\]256512\\\\left\\[256;512\\\\right\\] | 256,384,512 | 24.8 | 7.5 |\n| E | 256 | 224,256,288 | 26.9 | 8.7 |\n| 384 | 352,384,416 | 26.7 | 8.6 |\n| \\[256;512\\]256512\\\\left\\[256;512\\\\right\\] | 256,384,512 | 24.8 | 7.5 |\n\n### 4.3 Multi-crop evaluation\n\nIn Table [5]Table 5 ‚Ä£ 4.3 Multi-crop evaluation ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\") we compare dense ConvNet evaluation with mult-crop evaluation (see Sect. [3.2]Testing ‚Ä£ 3 Classification Framework ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\") for details). We also assess the complementarity of the two evaluation techniques by averaging their soft-max outputs. As can be seen, using multiple crops performs slightly better than dense evaluation, and the two approaches are indeed complementary, as their combination outperforms each of them. As noted above, we hypothesize that this is due to a different treatment of convolution boundary conditions.\n\nTable 5: ConvNet evaluation techniques comparison.\nIn all experiments the training scale SùëÜS was sampled from \\[256;512\\]256512\\\\left\\[256;512\\\\right\\], and three test scales QùëÑQ were considered: {256,384,512}256384512\\\\left\\\\{256,384,512\\\\right\\\\}.\n\n| ConvNet config. (Table [1]Table 1 ‚Ä£ 2.2 Configurations ‚Ä£ 2 ConvNet Configurations ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")) | Evaluation method | top-1 val. error (%) | top-5 val. error (%) |\n| --- | --- | --- | --- |\n| D | dense | 24.8 | 7.5 |\n| multi-crop | 24.6 | 7.5 |\n| multi-crop & dense | 24.4 | 7.2 |\n| E | dense | 24.8 | 7.5 |\n| multi-crop | 24.6 | 7.4 |\n| multi-crop & dense | 24.4 | 7.1 |\n\n### 4.4 ConvNet Fusion\n\nUp until now, we evaluated the performance of individual ConvNet models.\nIn this part of the experiments, we combine the outputs of several models by averaging their soft-max class posteriors.\nThis improves the performance due to complementarity of the models, and was used in the top ILSVRC submissions in 2012 (Krizhevsky et al., [2012])) and 2013 (Zeiler & Fergus, [2013]); Sermanet et al., [2014])).\n\nThe results are shown in Table [6]Table 6 ‚Ä£ 4.4 ConvNet Fusion ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\").\nBy the time of ILSVRC submission we had only trained the single-scale networks, as well as a multi-scale model D (by fine-tuning only the fully-connected layers rather than all layers). The resulting ensemble of 7 networks has 7.3%percent7.37.3\\\\% ILSVRC test error.\nAfter the submission, we considered an ensemble of only two best-performing multi-scale models (configurations D and E), which reduced the test error to\n7.0%percent7.07.0\\\\% using dense evaluation and 6.8%percent6.86.8\\\\% using combined dense and multi-crop evaluation.\nFor reference, our best-performing single model achieves 7.1%percent7.17.1\\\\% error (model E, Table [5]Table 5 ‚Ä£ 4.3 Multi-crop evaluation ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\")).\n\nTable 6: Multiple ConvNet fusion results.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Combined ConvNet models | Error |\n| top-1 val | top-5 val | top-5 test |\n| ILSVRC submission |\n| \\\\pbox11cm<br>(D/256/224,256,288), (D/384/352,384,416), (D/\\[256;512\\]/256,384,512) |  |  |  |\n| (C/256/224,256,288), (C/384/352,384,416) |  |  |  |\n| (E/256/224,256,288), (E/384/352,384,416) | 24.7 | 7.5 | 7.3 |\n| post-submission |\n| \\\\pbox11cm<br>(D/\\[256;512\\]/256,384,512), (E/\\[256;512\\]/256,384,512), dense eval. | 24.0 | 7.1 | 7.0 |\n| \\\\pbox11cm<br>(D/\\[256;512\\]/256,384,512), (E/\\[256;512\\]/256,384,512), multi-crop | 23.9 | 7.2 | - |\n| \\\\pbox11cm<br>(D/\\[256;512\\]/256,384,512), (E/\\[256;512\\]/256,384,512), multi-crop & dense eval. | 23.7 | 6.8 | 6.8 |\n\n### 4.5 Comparison with the State of the Art\n\nFinally, we compare our results with the state of the art in Table [7]Table 7 ‚Ä£ 4.5 Comparison with the State of the Art ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\").\nIn the classification task of ILSVRC-2014 challenge (Russakovsky et al., [2014])), our ‚ÄúVGG‚Äù team secured the 2nd place with 7.3%percent7.37.3\\\\% test error using an ensemble\nof 7 models. After the submission, we decreased the error rate to 6.8%percent6.86.8\\\\% using an ensemble of 2 models.\n\nAs can be seen from Table [7]Table 7 ‚Ä£ 4.5 Comparison with the State of the Art ‚Ä£ 4 Classification Experiments ‚Ä£ Very Deep Convolutional Networks for Large-Scale Image Recognition\"), our very deep ConvNets significantly outperform the previous generation of models, which achieved the best results\nin the ILSVRC-2012 and ILSVRC-2013 competitions. Our result is also competitive with respect to the classification task winner (GoogLeNet with 6.7%percent6.76.7\\\\% error) and substantially\noutperforms the ILSVRC-2013 winning submission Clarifai, which achieved 11.2%percent11.211.2\\\\% with outside training data and 11.7%percent11.711.7\\\\% without it.\nThis is remarkable, considering that our best result is achieved by combining just two models ‚Äì significantly less than used in most ILSVRC submissions.\nIn terms of the single-net performance, our architecture achieves the best result (7.0%percent7.07.0\\\\% test error), outperforming a single GoogLeNet by 0.9%percent0.90.9\\\\%.\nNotably, we did not depart from the classical ConvNet architecture of LeCun et al. ( [1989])), but improved it by substantially increasing the depth.\n\nTable 7: Comparison with the state of the art in ILSVRC classification. Our method is denoted as ‚ÄúVGG‚Äù.\nOnly the results obtained without outside training data are reported.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Method | top-1 val. error (%) | top-5 val. error (%) | top-5 test error (%) |\n| VGG (2 nets, multi-crop & dense eval.) | 23.7 | 6.8 | 6.8 |\n| VGG (1 net, multi-crop & dense eval.) | 24.4 | 7.1 | 7.0 |\n| VGG (ILSVRC submission, 7 nets, dense eval.) | 24.7 | 7.5 | 7.3 |\n| GoogLeNet (Szegedy et al., [2014])) (1 net) | - | 7.9 |\n| GoogLeNet (Szegedy et al., [2014])) (7 nets) | - | 6.7 |\n| MSRA (He et al., [2014])) (11 nets) | - | - | 8.1 |\n| MSRA (He et al., [2014])) (1 net) | 27.9 | 9.1 | 9.1 |\n| Clarifai (Russakovsky et al., [2014])) (multiple nets) | - | - | 11.7 |\n| Clarifai (Russakovsky et al., [2014])) (1 net) | - | - | 12.5 |\n| Zeiler & Fergus (Zeiler & Fergus, [2013])) (6 nets) | 36.0 | 14.7 | 14.8 |\n| Zeiler & Fergus (Zeiler & Fergus, [2013])) (1 net) | 37.5 | 16.0 | 16.1 |\n| OverFeat (Sermanet et al., [2014])) (7 nets) | 34.0 | 13.2 | 13.6 |\n| OverFeat (Sermanet et al., [2014])) (1 net) | 35.7 | 14.2 | - |\n| Krizhevsky et al. (Krizhevsky et al., [2012])) (5 nets) | 38.1 | 16.4 | 16.4 |\n| Krizhevsky et al. (Krizhevsky et al., [2012])) (1 net) | 40.7 | 18.2 | - |",
            "citations": null
          },
          "5 Conclusion": {
            "content": "In this work we evaluated very deep convolutional networks (up to 19 weight layers) for large-scale image classification.\nIt was demonstrated that the representation depth is beneficial for the classification accuracy, and that\nstate-of-the-art performance on the ImageNet challenge dataset can be achieved using a conventional ConvNet architecture (LeCun et al., [1989]); Krizhevsky et al., [2012]))\nwith substantially increased depth.\nIn the appendix, we also show that our models generalise well to a wide range of tasks and datasets, matching or outperforming more complex recognition pipelines built around less deep image representations.\nOur results yet again confirm the importance of depth in visual representations.\n\n#### Acknowledgements\n\nThis work was supported by ERC grant VisRec no. 228180.\nWe gratefully acknowledge the support of NVIDIA Corporation with the donation of the GPUs used for this research.",
            "citations": null
          }
        },
        "abstract": "In this work we investigate the effect of the convolutional network depth on\nits accuracy in the large-scale image recognition setting. Our main\ncontribution is a thorough evaluation of networks of increasing depth using an\narchitecture with very small (3x3) convolution filters, which shows that a\nsignificant improvement on the prior-art configurations can be achieved by\npushing the depth to 16-19 weight layers. These findings were the basis of our\nImageNet Challenge 2014 submission, where our team secured the first and the\nsecond places in the localisation and classification tracks respectively. We\nalso show that our representations generalise well to other datasets, where\nthey achieve state-of-the-art results. We have made our two best-performing\nConvNet models publicly available to facilitate further research on the use of\ndeep visual representations in computer vision."
      }
    },
    "key_map": {
      "1711.08856": "bib.bib1",
      "2305.15659": "bib.bib3",
      "2401.12033": "bib.bib8",
      "2302.11836": "bib.bib9",
      "2302.09693": "bib.bib10",
      "1708.04552": "bib.bib16",
      "2306.13239": "bib.bib21",
      "1409.1556": "bib.bib49"
    }
  }
}