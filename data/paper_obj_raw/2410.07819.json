{
  "title": "Uncovering Overfitting in Large Language Model Editing",
  "abstract": "Knowledge editing has been proposed as an effective method for updating and\ncorrecting the internal knowledge of Large Language Models (LLMs). However,\nexisting editing methods often struggle with complex tasks, such as multi-hop\nreasoning. In this paper, we identify and investigate the phenomenon of Editing\nOverfit, where edited models assign disproportionately high probabilities to\nthe edit target, hindering the generalization of new knowledge in complex\nscenarios. We attribute this issue to the current editing paradigm, which\nplaces excessive emphasis on the direct correspondence between the input prompt\nand the edit target for each edit sample. To further explore this issue, we\nintroduce a new benchmark, EVOKE (EValuation of Editing Overfit in Knowledge\nEditing), along with fine-grained evaluation metrics. Through comprehensive\nexperiments and analysis, we demonstrate that Editing Overfit is prevalent in\ncurrent editing methods and that common overfitting mitigation strategies are\nof limited effectiveness in knowledge editing. To overcome this, inspired by\nLLMs' knowledge recall mechanisms, we propose a new plug-and-play strategy\ncalled Learn to Inference (LTI), which introduce a Multi-stage Inference\nConstraint module to guide the edited models in recalling new knowledge\nsimilarly to how unedited LLMs leverage knowledge through in-context learning.\nExtensive experimental results across a wide range of tasks validate the\neffectiveness of LTI in mitigating Editing Overfit.",
  "paper_id": "http://arxiv.org/abs/2410.07819v1",
  "markdown_content": "# Uncovering Overfitting in Large Language Model Editing\n\nMengqi Zhang1 , Xiaotian Ye2∗, Qiang Liu3, Pengjie Ren1, Shu Wu3, Zhumin Chen1\n\n1School of Computer Science and Technology, Shandong University\n\n2School of Computer Science, Beijing University of Posts and Telecommunications\n\n3New Laboratory of Pattern Recognition (NLPR)State Key Laboratory of Multimodal Artificial Intelligence Systems (MAIS)Institute of Automation, Chinese Academy of Sciences\n\n{mengqi.zhang, renpengjie, chenzhumin}@sdu.edu.cn\n\nyexiaotian@bupt.edu.cn,\n{qiang.liu, shu.wu}@nlpr.ia.ac.cnEqual contribution.\n\n###### Abstract\n\nKnowledge editing has been proposed as an effective method for updating and correcting the internal knowledge of Large Language Models (LLMs). However, existing editing methods often struggle with complex tasks, such as multi-hop reasoning. In this paper, we identify and investigate the phenomenon of Editing Overfit, where edited models assign disproportionately high probabilities to the edit target, hindering the generalization of new knowledge in complex scenarios. We attribute this issue to the current editing paradigm, which places excessive emphasis on the direct correspondence between the input prompt and the edit target for each edit sample. To further explore this issue, we introduce a new benchmark, EVOKE (EValuation of Editing Overfit in Knowledge Editing), along with fine-grained evaluation metrics. Through comprehensive experiments and analysis, we demonstrate that Editing Overfit is prevalent in current editing methods and that common overfitting mitigation strategies are of limited effectiveness in knowledge editing. To overcome this, inspired by LLMs’ knowledge recall mechanisms, we propose a new plug-and-play strategy called Learn to Inference (LTI), which introduce a Multi-stage Inference Constraint module to guide the edited models in recalling new knowledge similarly to how unedited LLMs leverage knowledge through in-context learning. Extensive experimental results across a wide range of tasks validate the effectiveness of LTI in mitigating Editing Overfit.\n\n## 1 Introduction\n\nLarge Language Models (LLMs) have achieved remarkable success across various Natural Language Processing (NLP) tasks (Zhao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib26 \"\")), yet they often contain outdated or incorrect information, raising concerns about their reliability and factual accuracy. Knowledge Editing (Yao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib23 \"\")) has emerged as a promising solution to precisely update or correct a model’s knowledge. Approaches to knowledge editing fall into two main categories: parameter-preserving methods, such as SERAC (Mitchell et al., [2022](https://ar5iv.org/html/2410.07819#bib.bib16 \"\")) and T-patcher ( [Huang et al.,](https://ar5iv.org/html/2410.07819#bib.bib11 \"\")), which adjust outputs by storing external knowledge, and parameter-modifying methods, which directly alter the model’s internal parameters. The latter includes fine-tuning-based methods like FT-L (Zhu et al., [2020](https://ar5iv.org/html/2410.07819#bib.bib29 \"\")), meta-learning approaches such as KE (De Cao et al., [2021](https://ar5iv.org/html/2410.07819#bib.bib4 \"\")) and MEND (Mitchell et al., [2021](https://ar5iv.org/html/2410.07819#bib.bib15 \"\")), and locate-then-edit methods like ROME (Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")) and MEMIT (Meng et al., [2022b](https://ar5iv.org/html/2410.07819#bib.bib14 \"\")).\n\nAlthough existing methods have achieved promising results, their performance experiences a catastrophic decline when transferred to complex tasks involving reasoning (Yao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib23 \"\")). For instance, in the representative multi-hop reasoning task, after the LLM is updated with _Steve Jobs_ as _the founder of Microsoft_, it can easily respond to straightforward questions like “ _Who is the founder of Microsoft?_” with “ _Steve Jobs_.” However, it struggles to accurately answer more complex queries, such as “ _Which college did the founder of Microsoft attend?_”\n\nTo investigate the reasons behind the failure of edited LLMs in complex tasks, we first experimentally analyse the outputs from edited models on a multi-hop reasoning task (§ [3](https://ar5iv.org/html/2410.07819#S3 \"3 Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\")). The results reveal an abnormally high probability that the edited models output the edit target o∗superscript𝑜o^{\\*} for multi-hop questions, even when such responses are entirely implausible as valid answers (§ [3.2](https://ar5iv.org/html/2410.07819#S3.SS2 \"3.2 Editing Overfit Phenomenon ‣ 3 Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\")). We refer to this phenomenon as Editing Overfit, indicates that edited models tend to assign unusually high prediction probabilities to the edit target o∗superscript𝑜o^{\\*} of edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}), skewing the response accuracy for complex questions where the correct answer is not o∗superscript𝑜o^{\\*}. For instance, as shown in Figure [1](https://ar5iv.org/html/2410.07819#S1.F1 \"Figure 1 ‣ 1 Introduction ‣ Uncovering Overfitting in Large Language Model Editing\"), after editing “Microsoft is founded by Bill Gates →→\\\\rightarrow Steve Jobs,” it erroneously answers the question “Which college did the founder of Microsoft attend?” with “Steve Jobs.”\n\nWe hypothesize that Editing Overfit is a key factor contributing to the suboptimal performance of edited LLMs on complex tasks. This phenomenon likely stems from existing knowledge editing paradigms emphasize the direct correspondence between the input prompt p​(s,r)𝑝𝑠𝑟p(s,r) and the output o∗superscript𝑜o^{\\*} for each edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}). Given the typically limited number of optimization samples, this focus on optimizing the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} relationship can lead to severe overfitting issues. Specifically, as illustrated in Figure [1](https://ar5iv.org/html/2410.07819#S1.F1 \"Figure 1 ‣ 1 Introduction ‣ Uncovering Overfitting in Large Language Model Editing\"), all current knowledge editing methods for LLMs rely on a primary loss function that maximizes the likelihood of the new target o∗superscript𝑜o^{\\*} given the input prompt p​(s,r)𝑝𝑠𝑟p(s,r). The main differences between these methods lie in the techniques used for parameter updates. For example, FT-based methods either directly optimizes or uses parameter-efficient fine-tuning (Hu et al., [2022](https://ar5iv.org/html/2410.07819#bib.bib10 \"\"); Ren et al., [2024](https://ar5iv.org/html/2410.07819#bib.bib19 \"\")) to adjust model parameters, MEND employ a hypernetwork to make updates, while ROME and MEMIT apply low-rank updates to derive closed-form solutions for specific parameters. When the model is updated with the new knowledge such as “ _Microsoft is founded by Steve Jobs_,” it risks overfitting by learning only the correspondence between “ _Microsoft is founded by_” and “ _Steve Jobs_.” As a result, the edited model may output “ _Steve Jobs_” whenever it encounters the terms “ _Microsoft_” and “ _is founded by_.” This also explains the abnormally high prediction probabilities of edit targets in multi-hop reasoning task, as the edited model may simply recognize patterns in the prompt and tend to output the corresponding edit target.\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x1.png)Figure 1: Example of Editing Overfit.\n\nIn this study, we particularly investigate the Editing Overfit phenomenon that occurs in edited LLMs. To this end, we first construct a benchmark for EValuating of Editing Overfit in Knowledge Editing (EVOKE) (§ [4.1](https://ar5iv.org/html/2410.07819#S4.SS1 \"4.1 EVOKE Benchmark ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")), which comprises six tasks across two categories. The overfit tasks in EVOKE include various patterns prone to causing overfitting in models, allowing us analyze and investigate overfitting phenomena in current editing methods. By applying existing editing methods to EVOKE, we conduct an in-depth analysis to identify specific input patterns are prone to overfitting (§ [4.2](https://ar5iv.org/html/2410.07819#S4.SS2 \"4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")). Furthermore, we evaluate the effectiveness of four existing overfitting mitigation strategies (§ [5](https://ar5iv.org/html/2410.07819#S5 \"5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\")), _Norm Constraints_, _Batch Editing_, _Multi-layer Editing_, and _Data Augmentation_, in addressing the Editing Overfit problem. To further alleviate Editing Overfit, inspired by the knowledge mechanism of LLMs, we propose a plug-and-play strategy named Learn To Inference (LTI) (§ [6](https://ar5iv.org/html/2410.07819#S6 \"6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\")), which enables the edited models to learn how to infer with new knowledge rather than simply establish input-output mappings. Specifically, LTI introduces a Multi-Stage Constraint module, which imposes constraints on crucial reasoning steps of LLMs during the editing process. This ensures that the edited model utilizes new knowledge in a way that closely resembles how an unedited model leverage new knowledge through in-context learning, helping to prevent the model from overfitting solely on input-output mapping.\nAdditionally, LTI can be combined with various knowledge editing methods and used in conjunction with other overfitting mitigation techniques.\n\nOur contributions can be summarized as follows:\n\n- •\n\n\nWe reveal and investigate the overfitting issue caused by current editing paradigm, identifying it as a key factor behind the suboptimal performance of edited models, a phenomenon we term the Editing Overfit problem.\n\n- •\n\n\nWe construct EVOKE, a benchmark with detailed evaluation metrics, to enable a fine-grained assessment and analysis of mainstream editing methods. Additionally, we explore the effectiveness of four general overfitting mitigation techniques in addressing the Editing Overfit problem.\n\n- •\n\n\nWe propose a new plug-in strategy, Learn to Inference, designed to further mitigate overfitting. Extensive experiments demonstrate that integrating LTI with different editing methods effectively reduces the severity of Editing Overfit.\n\n\n## 2 Related Work\n\nKnowledge editing (KE) updates LLM outputs to (i) accurately respond to new knowledge, (ii) preserve existing knowledge without catastrophic forgetting, and (iii) leverage updated knowledge in complex reasoning tasks. Each piece of knowledge is formulated as a triple (s,r,o)𝑠𝑟𝑜(s,r,o)De Cao et al. ( [2021](https://ar5iv.org/html/2410.07819#bib.bib4 \"\")), consisting of a subject s𝑠s, relation r𝑟r, and objecto𝑜o. An edit sample is defined as e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}), representing a knowledge update from (s,r,o)𝑠𝑟𝑜(s,r,o) to (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}). Our study focuses on parameter-modifying methods, which are divided into three main categories (Yao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib23 \"\")):\n\nFine-tuning-based methods generally follow the supervised fine-tuning paradigm. For example, to edit a fact such as “Microsoft is founded by Steve Jobs,” the model’s weights are updated via gradient descent to increase the probability of the edit target, Steve Jobs. Some approaches aim to improve robustness by incorporating norm constraints (Zhu et al., [2020](https://ar5iv.org/html/2410.07819#bib.bib29 \"\")) or data augmentation(Gangadhar & Stratos, [2024b](https://ar5iv.org/html/2410.07819#bib.bib6 \"\"); Wei et al., [2024](https://ar5iv.org/html/2410.07819#bib.bib22 \"\")). However, vanilla fine-tuning often affects unrelated knowledge, leading to catastrophic forgetting, making it unsuitable for direct application in knowledge editing.\n\nMeta-learning-based methods employ a hypernetwork to adjust model parameters specifically for editing. This hypernetwork is trained to convert fine-tuning gradients into updated weights, with the aim of predicting weights that closely resemble those obtained through fine-tuning with augmented data.\nKE (De Cao et al., [2021](https://ar5iv.org/html/2410.07819#bib.bib4 \"\")) pioneered this approach, which MEND (Mitchell et al., [2021](https://ar5iv.org/html/2410.07819#bib.bib15 \"\")) later extended to LLMs by predicting low-rank decompositions of parameter updates.\n\nLocate-then-edit methods originate from research into the internal mechanisms of LLMs, advocating for identifying the specific weights responsible for storing knowledge before applying targeted updates. Geva et al. ( [2021](https://ar5iv.org/html/2410.07819#bib.bib7 \"\"); [2023](https://ar5iv.org/html/2410.07819#bib.bib8 \"\")) propose viewing MLP modules as key-value memory. Building on this foundation, the Knowledge Neuron theory (Dai et al., [2022](https://ar5iv.org/html/2410.07819#bib.bib3 \"\")) posits that these MLP key-value pairs encode factual knowledge. Meng et al. ( [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")) introduce causal tracing to analyze LLMs’ factual recall mechanisms, leading to the development of ROME (Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")) and MEMIT (Meng et al., [2022b](https://ar5iv.org/html/2410.07819#bib.bib14 \"\")), which achieved state-of-the-art results on several traditional metrics.\n\nIn recent years, researchers have recognized the limitations of current editing methods on specific complex tasks such as multi-hop reasoning, leading to the development of task-specific approaches (Zhong et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib28 \"\"); Zhang et al., [2024b](https://ar5iv.org/html/2410.07819#bib.bib25 \"\"); [a](https://ar5iv.org/html/2410.07819#bib.bib24 \"\")). In contrast, our work explores the reasons behind the suboptimal performance of editing methods by constructing a benchmark and proposes a more general strategy to enhance editing performance by addressing the issue of overfitting.\n\n## 3 Preliminary Experiments\n\nTo investigate the causes of edited LLMs’ poor performance on complex tasks, we begin by analyzing the outputs of the edited models on a representative multi-hop reasoning dataset, CounterfactPlus(Yao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib23 \"\")), where each entry contains an edited knowledge e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}) along with a multi-hop question q=(s,r,r′)𝑞𝑠𝑟superscript𝑟′q=(s,r,r^{\\\\prime}) that requires reasoning based on the edited sample.\n\n### 3.1 Metric Definitions\n\nTo perform a fine-grained analysis of the outputs from edited models, we define several metrics in response to complex prompts, such as multi-hop questions within the dataset. Specifically, for each edit sample e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}), when the edited LLM is presented with a prompt consisting of a complex question, it may produce one of the following outputs: the original answer to the complex question, the correct answer, or the edited target o∗superscript𝑜o^{\\*}. Accordingly, we define the following metrics:\n\n- •\n\n\nCorrect Answer Probability (CAP): The probability that the model generates the correct answer 𝚊𝚗𝚜𝚊𝚗𝚜\\\\verb+ans+ for a given 𝚙𝚛𝚘𝚖𝚙𝚝𝚙𝚛𝚘𝚖𝚙𝚝\\\\verb+prompt+, formalized as ℙ​(𝚊𝚗𝚜∣𝚙𝚛𝚘𝚖𝚙𝚝)ℙconditional𝚊𝚗𝚜𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{P}\\\\left(\\\\verb+ans+\\\\mid\\\\verb+prompt+\\\\right).\n\n- •\n\n\nOriginal Answer Probability (OAP): The probability that the model outputs the original answer 𝚘𝚛𝚒𝚘𝚛𝚒\\\\verb+ori+ (before editing) in response to the given 𝚙𝚛𝚘𝚖𝚙𝚝𝚙𝚛𝚘𝚖𝚙𝚝\\\\verb+prompt+, defined as ℙ​(𝚘𝚛𝚒∣𝚙𝚛𝚘𝚖𝚙𝚝)ℙconditional𝚘𝚛𝚒𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{P}\\\\left(\\\\verb+ori+\\\\mid\\\\verb+prompt+\\\\right).\n\n- •\n\n\nDirect Probability (DP): The likelihood that the model produces the edit target o∗superscript𝑜o^{\\*}, expressed as ℙ​(o∗∣𝚙𝚛𝚘𝚖𝚙𝚝)ℙconditionalsuperscript𝑜𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{P}\\\\left(o^{\\*}\\\\mid\\\\verb+prompt+\\\\right).\n\n\nTo further evaluate the influence of both the target edit o∗superscript𝑜o^{\\*} and the original answer 𝚘𝚛𝚒𝚘𝚛𝚒\\\\verb+ori+ on the correct answer 𝚊𝚗𝚜𝚊𝚗𝚜\\\\verb+ans+, we follow Meng et al. ( [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")) and define two additional comprehensive metrics to gauge the model’s overall editing effectiveness:\n\n- •\n\n\nEditing Overfit Score (EOS): This metric evaluates the performance of the edited model on complex questions where the correct answer is not o∗superscript𝑜o^{\\*}. It serves as a primary indicator of the model’s overfitting and overall performance. The score is calculated as the proportion of cases where the model overfits by favoring the edit target o∗superscript𝑜o^{\\*} over the correct answer 𝚊𝚗𝚜𝚊𝚗𝚜\\\\verb+ans+, formalized as 𝔼\\[𝕀\\[ℙ(𝚊𝚗𝚜∣𝚙𝚛𝚘𝚖𝚙𝚝)>ℙ(o∗∣𝚙𝚛𝚘𝚖𝚙𝚝)\\]\\]\\\\mathbb{E}\\\\left\\[\\\\mathbb{\\\\mathbb{I}}\\[\\\\mathbb{P}\\\\left(\\\\verb+ans+\\\\mid\\\\verb+prompt+\\\\right)>\\\\mathbb{P}\\\\left(o\\*\\\\mid\\\\verb+prompt+\\\\right)\\]\\\\right\\].\n\n- •\n\n\nAnswer Modify Score (AMS): This metric evaluates the negative interference of old knowledge on the correct answers. It is assessed by calculating the proportion of cases where the probability of the correct answer exceeds that of the original answer, defined as 𝔼​\\[𝕀​\\[ℙ​(𝚊𝚗𝚜∣𝚙𝚛𝚘𝚖𝚙𝚝)>ℙ​(𝚘𝚛𝚒∣𝚙𝚛𝚘𝚖𝚙𝚝)\\]\\]𝔼delimited-\\[\\]𝕀delimited-\\[\\]ℙconditional𝚊𝚗𝚜𝚙𝚛𝚘𝚖𝚙𝚝ℙconditional𝚘𝚛𝚒𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{E}\\\\left\\[\\\\mathbb{\\\\mathbb{I}}\\[\\\\mathbb{P}\\\\left(\\\\verb+ans+\\\\mid\\\\verb+prompt+\\\\right)>\\\\mathbb{P}\\\\left(\\\\verb+ori+\\\\mid\\\\verb+prompt+\\\\right)\\]\\\\right\\].\n\n\n### 3.2 Editing Overfit Phenomenon\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x2.png)Figure 2: Performance of GPT-J edited with ROME and MEMIT on CounterfactPlus.\n\nSubsequently, we apply the ROME and MEMIT methods to GPT-J to evaluate the performance of the edited models on CounterfactPlus using the aforementioned metrics, as shown in Figure [2](https://ar5iv.org/html/2410.07819#S3.F2 \"Figure 2 ‣ 3.2 Editing Overfit Phenomenon ‣ 3 Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\"). In multi-hop evaluations, the edit target o∗superscript𝑜o^{\\*} for each edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}) is typically not a possible answer to the multi-hop prompt, and its output probability should therefore be negligible. For instance, “ _Steve Jobs_” would be an implausible response to “ _Which college did the founder of Microsoft attend?_” The base model’s DP score of 0.27%percent0.270.27\\\\% confirms that the unedited model is highly unlikely to output o∗superscript𝑜o^{\\*} as a response. However, after editing, both models exhibit significantly higher average probabilities of o∗superscript𝑜o^{\\*} (DP), with ROME even reaching 41.03%percent41.0341.03\\\\%. Both models also show substantially lower Editing Overfit Score (EOS) values, indicating that for many evaluation samples, the probability of generating the correct answer is lower than that of outputting o∗superscript𝑜o^{\\*}. This anomalous probability distribution substantially impacts model performance, as the inflated o∗superscript𝑜o^{\\*} prediction probability diminishes the Correct Answer Probability (CAP) and obscures the model’s actual output.\n\nFrom these observations, we define the phenomenon of Editing Overfit as follows: After an LLM has been edited based on an editing example e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}), the edited LLM exhibits a heightened likelihood of producing the edit target o∗superscript𝑜o^{\\*} as the answer to questions that implicitly or explicitly contains s𝑠s or r𝑟r, even when the correct answer is unrelated to o∗superscript𝑜o^{\\*}.\n\n## 4 Analysis on Editing Overfit\n\nTo further investigate the severity of Editing Overfit in edited LLMs, we construct EVOKE, a new benchmark designed to analyze overfitting phenomena across various tasks. We then assess the performance of different editing methods using this benchmark and examine the effectiveness of several existing mitigation strategies\nin reducing Editing Overfit.\n\n### 4.1 EVOKE Benchmark\n\nEVOKE comprises Recall Tasks and Overfit Tasks, covering six tasks in total. The Recall Tasks assess the edited model’s ability to recall new edited knowledge, including _Efficacy_ and _Paraphrase_ evaluation. The Overfit Tasks pose complex challenges that are prone to inducing overfitting in editing methods, including _Multi-hop Reasoning_, _Prefix Distraction_, _Subject Specificity_, and _Relation Specificity_. These tasks are specifically designed to evaluate the model’s capability to utilize newly integrated knowledge for more challenging scenarios, with a particular emphasis on examining the degree of Editing Overfit. Details of EVOKE construction can be found in Appendix [A](https://ar5iv.org/html/2410.07819#A1 \"Appendix A Details on the EVOKE Benchmark ‣ Uncovering Overfitting in Large Language Model Editing\").\n\nTaking the edit “Microsoft is founded by Bill Gates →→\\\\rightarrow Steve Jobs” as an example, we introduce the recall tasks used to assess editing success rate of the edit (Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\"); Yao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib23 \"\")):\n\n- •\n\n\n_Efficacy_ directly validates whether the edited models can recall the new edited knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) under the editing prompt p​(s,r)𝑝𝑠𝑟p(s,r). In the context of the above example, the model would be asked: “Who is the founder of Microsoft?”\n\n- •\n\n\n_Paraphrase_ examines the model’s ability of recall the new knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) using paraphrased forms of the editing prompt p​(s,r)𝑝𝑠𝑟p(s,r). For instance, it might ask:“ Who established Microsoft?”\n\n\nThe design of overfit tasks are based on the two principles: First, the input questions explicitly or implicitly contain the information of subject s𝑠s or relation r𝑟r to induce potential overfitting responses from the model; Second, the correct answers to these questions are entirely unrelated to o∗o\\*, making it easier to determine whether the edited model exhibits overfitting. Accordingly, the overfit tasks are constructed as follows:\n\n- •\n\n\n_Multi-hop Reasoning_ evaluates the edited model’s ability to integrate the newly edited knowledge with existing knowledge to correctly answer questions spanning multiple entities or relations. For example, “Which university did the founder of Microsoft attend?” These questions typically contain implicit subject s𝑠s and relation r𝑟r information from the edit sample, but the answer is not the target o∗superscript𝑜o^{\\*}. They are well-suited for evaluating whether the edited model has overfit to the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} pattern. A model that has overfit to this pattern might incorrectly produce _‘Steve Jobs’_ as the answer to this question.\n\n- •\n\n\n_Prefix Distraction_ uses the new knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) as a perfix for unrelated questions, evaluating weather the edited model can still provide the original correct answer. For example: “Microsoft was founded by Steve Jobs. Who is the founder of Amazon?” This evaluation also assess weather the edited model has overfit to the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} pattern, providing a more explicit measure compared to multi-hop reasoning.\n\n- •\n\n\n_Subject Specificity_ presents questions with the same subject s𝑠s as the edit sample but with different relations r′superscript𝑟′r^{\\\\prime}. For example: “When was Microsoft founded?” These questions typically contain information about the subject s𝑠s, but the correct answer is not the target o∗superscript𝑜o^{\\*}, making them ideal for evaluating whether the edited model has overfit to the s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} pattern.\n\n- •\n\n\n_Relation Specificity_ includes questions with different subjects s′superscript𝑠′s^{\\\\prime} from the edit sample but the same relation r𝑟r, such as: “Who is the founder of Amazon?” These questions contain information about the relation r𝑟r, but the answer is not the target o∗superscript𝑜o^{\\*}. They are used to evaluate whether the model has overfit to the r→o∗→𝑟superscript𝑜r\\\\rightarrow o^{\\*} pattern. This task also corresponds to the locality evaluation in Counterfact(Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")).\n\n\nThe recall task is evaluated using the AMS metric. For the multi-hop reasoning task, we employ all five metrics defined in Section [3.1](https://ar5iv.org/html/2410.07819#S3.SS1 \"3.1 Metric Definitions ‣ 3 Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\") for a comprehensive analysis. In the Prefix Distraction, Subject Specificity, and Relation Specificity tasks, the correct answer is identical to the original answer, making OAP equivalent to CAP, with the EOS metric used to evaluate performance in these tasks.\n\n### 4.2 Results & Findings\n\nTo assess the extent of Editing Overfit in current editing methods, we employ FT, FT-L, MEND, ROME, and MEMIT to edit GPT-J (Wang & Komatsuzaki, [2021](https://ar5iv.org/html/2410.07819#bib.bib21 \"\")) and GPT-2 XL (Radford et al., [2019](https://ar5iv.org/html/2410.07819#bib.bib18 \"\")). We then evaluate the pre- and post-edit performance of these models on the EVOKE dataset (details provided in Appendix [B.1](https://ar5iv.org/html/2410.07819#A2.SS1 \"B.1 Baseline Methods ‣ Appendix B Experimental Setup Details ‣ Uncovering Overfitting in Large Language Model Editing\") ). The results for Recall Tasks and Overfit Tasks are presented in Tables [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\") and [2](https://ar5iv.org/html/2410.07819#S4.T2 \"Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), respectively. Based on these results, we summarize our key findings as follows:\n\nFinding 1: Current editing methods widely lead to severe overfitting. As shown in Table [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), nearly all successfully edited models exhibit significantly higher direct probability (DP) scores across the four overfit tasks compared to the unedited model. Notably, the average DP for FT, ROME and MEMIT on most overfit tasks significantly surpasses the correct answer probability (CAP), with elevated EOS values indicating that this issue persists across many edited samples. Although FT-L and MEND show better overfitting metrics, their significantly lower paraphrase scores suggest that the edits were unsuccessful (as shown in Table [2](https://ar5iv.org/html/2410.07819#S4.T2 \"Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")), rendering their overfitting scores less meaningful. It is crucial to highlight that all editing methods exhibit a very high probability of incorrectly outputting the edit target o∗superscript𝑜o^{\\*} (high DP score) in the prefix distraction task, with EOS scores also abnormally low. This may be attributed to the fact that the Prefix Distraction task explicitly introduces distracting new knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) prepended to the input. These results provide clear evidence supporting that existing editing paradigm is prone to causing overfitting.\n\nTable 1: Experimental results for different models on the Overfit Tasks of EVOKE.\n\nEditorPrefix DistractionMulti-hop ReasoningSubject SpecificityRelation SpecificityDP↓CAP↑EOS↑DP↓OAP↓CAP↑EOS↑AMS↑DP↓CAP↑EOS↑DP↓CAP↑EOS↑GPT-2 XL5.0113.3054.580.277.874.2193.4335.640.504.9085.590.336.4279.61FT22.979.0523.404.574.107.0675.9166.912.804.2051.3111.995.0740.81FT-L12.8711.0040.091.607.136.1987.7150.970.634.4777.072.916.3170.12MEND46.571.9317.883.274.757.4283.8240.1510.374.6236.0311.995.4344.65ROME44.996.6215.2223.323.4311.7646.1175.6735.392.6021.831.016.4777.23ROME-LTI19.539.8828.1710.085.1211.0365.9470.8319.053.9230.790.616.4978.04MEMIT32.197.6320.5516.754.2811.9257.0672.6322.683.2025.980.856.3877.81MEMIT-LTI18.768.7826.028.054.9711.4072.0269.597.393.5038.210.626.2878.79GPT-J4.6017.0864.810.2712.615.2094.1630.660.636.9580.350.319.4384.28FT77.433.614.5842.518.358.9125.5573.4537.50.3861.556.463.019.74FT-L7.0517.9956.303.2810.779.4085.7749.510.936.7077.071.409.6780.24MEND36.3111.2729.403.9412.215.6784.4335.2812.096.8033.8413.338.3553.09ROME26.1312.6232.5741.033.6517.9634.9180.9254.151.806.772.518.4179.64ROME-LTI8.9315.4849.7311.126.4317.1769.8377.4310.183.5228.380.738.6881.86MEMIT18.3014.7739.3225.805.8218.4950.4975.6733.452.9017.690.959.1082.14MEMIT-LTI10.9816.4348.5616.357.1717.0161.4470.3119.964.1829.910.649.2282.84\n\nTable 2: Experimental results (AMS↑ (%)) on the Recall Tasks of EVOKE.\n\n| Editor | GPT-2 XL | GPT-J |\n| Efficacy | Paraphrase | Efficacy | Paraphrase |\n| BASE | 19.50 | 22.79 | 13.29 | 15.47 |\n| FT | 99.90 | 85.94 | 100.00 | 97.73 |\n| FT-L | 98.93 | 45.64 | 99.81 | 45.44 |\n| MEND | 92.92 | 57.47 | 96.90 | 54.17 |\n| ROME | 100.00 | 96.27 | 99.90 | 99.27 |\n| ROME-LTI | 100.00 | 92.10 | 100.00 | 96.27 |\n| MEMIT | 99.32 | 92.73 | 100.00 | 95.23 |\n| MEMIT-LTI | 100.00 | 90.16 | 100.00 | 91.03 |\n\nFinding 2: Locate-then-Edit methods exhibits more severe overfitting to the s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} pattern. As shown in Table [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), ROME and MEMIT perform similarly to unedited LLMs on the Relation Specificity task across all metrics, indicating minimal overfitting to the r→o∗→𝑟superscript𝑜r\\\\rightarrow o^{\\*} pattern. However, their weaker performance across all metrics on the Subject Specificity task suggests a tendency toward overfiting to the s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} pattern. This difference may stem from their primary focus on manipulating subject representations to establish the mapping between p​(s,r)𝑝𝑠𝑟p(s,r) and the new target o∗superscript𝑜o^{\\*}. Furthermore, ROME and MEMIT significantly improve the CAP metric for the Multihop Reasoning task – indicating better recall of new answers under multi-hop questions -surpassing other methods despite a persistently high likelihood of overfitting to the Edit Target. These suggest that while locate-then-edit paradigm has limitations, it sill shows promise in enabling edited models to effectively use new knowledge for inferential tasks.\n\nFinding 3: Both Fine-tuning based and Meta-learning based methods exhibit a strong overfitting tendency to s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} and r→o∗→𝑟superscript𝑜r\\\\rightarrow o^{\\*} patterns. In contrast to Locate-then-edit methods, from Table [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), we observe similarly high levels of overfitting in both FT-based and MEND methods across the Subject Specificity and Relation Specificity tasks. This significant overfitting in both patterns is likely due to these methods focusing on mapping the entire input p​(s,r)𝑝𝑠𝑟p(s,r) to the target output o∗o\\* during the editing process. Notably, even MEND, which demonstrated lower performance on Paraphrase task and potential underfitting, still exhibited significant overfitting. Another potentially underfitting model, FT-L, shows a reduced overfitting tendency, likely attributable to its Norm Constraints on weight updates. Our subsequent detailed experiments (§ [5](https://ar5iv.org/html/2410.07819#S5.SS0.SSS0.Px1 \"Mitigation Technique 1: Norm Constraints ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\")) will further explore the impact of Norm Constraints on editing success and mitigating Editing Overfit.\n\n## 5 Analysis on Mitigation Techniques\n\nThe analysis above demonstrates that the current editing paradigm generally leads to overfitting to new knowledge in edited LLMs. To further investigate how existing strategies and different task scenarios influence overfitting, we conduct additional experiments analyzing various techniques. These include Norm Constraint, Batch Editing, Data Augmentation strategies, and Multi-layer Update Distribution (Appendix [E](https://ar5iv.org/html/2410.07819#A5 \"Appendix E Analysis on Distributing Weight Updates Across Layers ‣ Uncovering Overfitting in Large Language Model Editing\")). We primarily focus on several key metrics in the following analysis: Efficacy and paraphrase are evaluated using the AMS metric, while the remaining four overfit tasks are assessed using the EOS metric.\n\n#### Mitigation Technique 1: Norm Constraints\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x3.png)Figure 3: Performance of FT-L with different norm constraints on EVOKE.\n\nNorm Constraints are a commonly used approach to control excessive parameter updates and reduce overfitting. As observed in our main experiments (Table [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")), fine-tuning with Norm Constraints (FT-L) shows a marked reduction in overfitting compared to direct fine-tuning (FT). In this section, we further investigate the effect of Norm Constraints on the performance of edited models using EVOKE. Following Zhu et al. ( [2020](https://ar5iv.org/html/2410.07819#bib.bib29 \"\")), we apply an L∞subscript𝐿L\\_{\\\\infty} norm constraint: ‖θG−θG′‖∞≤ϵsubscriptnormsubscript𝜃𝐺subscript𝜃superscript𝐺′italic-ϵ\\\\left\\\\\\|\\\\theta\\_{G}-\\\\theta\\_{G^{\\\\prime}}\\\\right\\\\\\|\\_{\\\\infty}\\\\leq\\\\epsilon. Figure [3](https://ar5iv.org/html/2410.07819#S5.F3 \"Figure 3 ‣ Mitigation Technique 1: Norm Constraints ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\") illustrates the performance variation of FT-L as the strength of the norm constraint ϵitalic-ϵ\\\\epsilon is adjusted.\n\nThe results indicate that relaxing the norm constraints leads to improvements in both editing efficacy and paraphrase scores, suggesting that increasing the update intensity of the weights can enhance the success rate of the edits. However, as the constraint norm increases, the overfitting metric (EOS) scores across overfit tasks also rise. Thus, while improving the edit success rate and paraphrase score by relaxing the norm, this comes at the cost of heightened overfitting. When the paraphrase score reaches a satisfactory level, the overfitting issue becomes particularly pronounced. These findings highlight that relying solely on norm constraints as a strategy for mitigating overfitting may be insufficient.\n\n#### Mitigation Technique 2: Batch Editing\n\nIn the preceding discussion, the Editing Overfit observed in edited models is likely linked to the limited-sample nature of knowledge editing tasks. Batch editing, as a natural multi-sample approach, involves simultaneously embedding a large number of factual associations into the LLM. Could this help alleviate the overfitting issue? To explore this, we analyze the degree of overfitting in the batch editing setting and conduct experiments using the MEMIT with varying batch edits. The results of these experiments are presented in Figure [4](https://ar5iv.org/html/2410.07819#S5.F4 \"Figure 4 ‣ Mitigation Technique 2: Batch Editing ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\").\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x4.png)Figure 4: Performance of MEMIT with different batch sizes on EVOKE.\n\nThe results reveal that the model’s performance in a batch editing setting shows only marginal differences compared to single editing. As the edit count increase, the performance of the edited model on paraphrase tasks and most overfit tasks exhibits a slight downward trend, while still demonstrating significant overfitting issues. The reason might be that, although batch editing introduce numerous new facts and increases the number of samples, each piece of knowledge remains independent, resulting in few effective samples per individual fact, thereby continuing to suffer from overfitting.\n\n#### Mitigation Technique 3: Data Augmentation\n\nData augmentation is a widely used strategy to combat overfitting, particularly in scenarios with limited training samples. Following (Wei et al., [2024](https://ar5iv.org/html/2410.07819#bib.bib22 \"\"); Gangadhar & Stratos, [2024b](https://ar5iv.org/html/2410.07819#bib.bib6 \"\")), we focus on two data augmentation strategies: _Paraphrase Augmentation_ which generates alternative formulations of the same factual statement, and _Specificity Augmentation_, which introduces new samples that retain the subject but alter the relations. For instance, given the new knowledge “Microsoft is founded by Bill Gates.” Paraphrase Augmentation might yield “Microsoft was established by Bill Gates,” while Specificity Augmentation would introduce “Microsoft is headquartered in Redmond.” Further details are provided in Appendix [B.3](https://ar5iv.org/html/2410.07819#A2.SS3 \"B.3 Details on Data Augmentation Experiment ‣ Appendix B Experimental Setup Details ‣ Uncovering Overfitting in Large Language Model Editing\").\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x5.png)Figure 5: Performance of MEMIT with different data augmentation strategy on EVOKE.\n\nFrom Figure [5](https://ar5iv.org/html/2410.07819#S5.F5 \"Figure 5 ‣ Mitigation Technique 3: Data Augmentation ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\"), we observe that MEMIT w/ Paraphrase performs worse than MEMIT across all tasks except for the Paraphrase task, still exhibiting overfitting issues. We attribute this to the fact that, after paraphrase augmentation, the method still tends to associate paraphrased versions of p​(s,r)𝑝𝑠𝑟p(s,r) directly with o∗superscript𝑜o^{\\*}, which may inadvertently encourage the model to learn “output o∗superscript𝑜o^{\\*} regardless of sentence phrasing when encountering inputs s𝑠s and r𝑟r,” contrary to its intended purpose. In contrast, MEMIT w/ Specificity outperforms MEMIT on all overfit tasks, likely because Specificity Augmentation introduces more subject-related patterns, preventing the model from learning only the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} pattern.\n\n## 6 Proposed Mitigation Strategy: Learn to Inference\n\nThe preceding analysis suggests that, with the limited edited samples in knowledge editing tasks, the prevailing editing paradigm of “Learning the Correspondence” between input p​(s,r)𝑝𝑠𝑟p(s,r) and output o∗superscript𝑜o^{\\*} may cause edited LLMs to rely on input-output mappings during inference, rather than recalling and applying new knowledge in a manner similar to their innate mechanism. Therefore, we propose that edited LLMs should ideally access and apply new knowledge during inference in a way consistent with their natural inference process. To address this, inspired by the knowledge recall mechanism of LLMs (Geva et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib8 \"\")) and the principles of In-Context Learning (Brown et al., [2020](https://ar5iv.org/html/2410.07819#bib.bib1 \"\")), we propose a plug-and-play strategy called Learn To Inference (LTI), as illustrated in Figure [6](https://ar5iv.org/html/2410.07819#S6.F6 \"Figure 6 ‣ 6.2 Multi-stage Inference Constraints ‣ 6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\"). LTI introduces a Multi-stage Inference Constraints module that imposes constraints on critical stages of knowledge editing process, encouraging the edited model to recall newly edited factual associations in a manner similar to how unedited LLMs utilize new knowledge through in-context learning.\n\n### 6.1 Reasoning Mechanisms in LLMs: Background and Rationale\n\nRecent research on LLM interpretability (Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\"); Geva et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib8 \"\")) has revealed a two-step process for knowledge recall during inference. (1) In the shallow layers, knowledge related to the subject is aggregated to the last token of the subject. (2) In the deeper layers, the subject’s representation is extracted to the final token position of the prompt to predict the output.\n\nOur objective is for edited models to follow this same two-step process when recalling newly edited knowledge. To achieve this, we introduce multi-stage representations constraints during the editing process, ensuring that the inference process of the edited model aligns with that of an unedited model using the new knowledge as context. This approach leverages LLMs’ inherent in-context learning abilities, as providing new knowledge in context typically enables unedited models to adjust their outputs effectively (Zheng et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib27 \"\")).\n\n### 6.2 Multi-stage Inference Constraints\n\nWe propose a Multi-stage Inference Constraints module consisting of three components: the Subject Representation Constraint, the Output Distribution Constraint, and the New Knowledge Constraint. These constraints collectively ensure the integration of new knowledge while aligning the inference consistency between the edited model and context-guided unedited model.\n\nAs a plug-and-play framework, we use ROME to illustrate multi-stage inference constraint module. The ROME editing process involves calculating the optimal recall vector 𝐯∗subscript𝐯\\\\mathbf{v}\\_{\\*} and the subject representation 𝐤∗subscript𝐤\\\\mathbf{k}\\_{\\*}, then updating the model’s parameters via a rank-one update:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐖^=𝐖+(𝐯∗−𝐖𝐤∗)​(𝐂−1​𝐤∗)T(𝐂−1​𝐤∗)T​𝐤∗.^𝐖𝐖subscript𝐯subscript𝐖𝐤superscriptsuperscript𝐂1subscript𝐤Tsuperscriptsuperscript𝐂1subscript𝐤Tsubscript𝐤\\\\mathbf{\\\\hat{W}}=\\\\mathbf{W}+\\\\frac{(\\\\mathbf{v}\\_{\\*}-\\\\mathbf{W}\\\\mathbf{k}\\_{\\*})(\\\\mathbf{C}^{-1}\\\\mathbf{k}\\_{\\*})^{\\\\mathrm{T}}}{(\\\\mathbf{C}^{-1}\\\\mathbf{k}\\_{\\*})^{\\\\mathrm{T}}\\\\mathbf{k}\\_{\\*}}. |  | (1) |\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x6.png)Figure 6: The framework of Multi-Stage Inference Constraints.\n\nDetails on 𝐤∗subscript𝐤\\\\mathbf{k}\\_{\\*} computation can be found in Appendix [D](https://ar5iv.org/html/2410.07819#A4 \"Appendix D Rank-One Model Editing ‣ Uncovering Overfitting in Large Language Model Editing\"). We now explain how our strategy integrates with the computation of 𝐯∗subscript𝐯\\\\mathbf{v}\\_{\\*}.\n\nSpecifically, we prepend the new edit knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) as a context prompt to the original query p​(s,r)𝑝𝑠𝑟p(s,r) and input it into unedited model, denoted as 𝒢​((s,r,o∗)⊕p​(s,r))𝒢direct-sum𝑠𝑟superscript𝑜𝑝𝑠𝑟\\\\mathcal{G}((s,r,o^{\\*})\\\\oplus p(s,r)). Meanwhile, 𝒢​’​(p​(s,r))𝒢’𝑝𝑠𝑟\\\\mathcal{G}’(p(s,r)) represents the edited model reasoning over p​(s,r)𝑝𝑠𝑟p(s,r). We target specific layer l𝑙l for the edit. The multi-stage constraints are formulated as follows:\n\nSubject Representation Constraint. Since LLMs extract representation of subject in the shallow MLP layer, we first apply constraints to align the last token representations of subject s𝑠s in the m𝑚m-th layer (m>l𝑚𝑙m>l) for both 𝒢′​(p​(s,r))superscript𝒢′𝑝𝑠𝑟\\\\mathcal{G}^{\\\\prime}(p(s,r)) and 𝒢​((s,r,o∗)⊕p​(s,r))𝒢direct-sum𝑠𝑟superscript𝑜𝑝𝑠𝑟\\\\mathcal{G}((s,r,o^{\\*})\\\\oplus p(s,r)), ensuring that edited subject representations to function effectively in subsequent inference steps. This is achieved by matching these two representations using KL divergence, formalized as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒS​R​C=KL(ℙ𝒢′​(𝐯sl+=𝐡)\\[𝐯sm∣p(s,r)\\]∥ℙ𝒢\\[𝐯sm∣(s,r,o∗)⊕p(s,r)\\]),\\\\mathcal{L}\\_{SRC}=\\\\operatorname{\\\\mathrm{KL}}\\\\left(\\\\mathbb{P}\\_{\\\\mathcal{G}^{\\\\prime}(\\\\mathbf{v}\\_{s}^{l}+=\\\\mathbf{h})}\\\\left\\[\\\\mathbf{v}\\_{s}^{m}\\\\mid p(s,r)\\\\textbf{}\\\\right\\]\\\\\\|\\\\mathbb{P}\\_{\\\\mathcal{G}}\\\\left\\[\\\\mathbf{v}\\_{s}^{m}\\\\mid(s,r,o^{\\*})\\\\oplus p(s,r)\\\\right\\]\\\\right), |  | (2) |\n\nwhere 𝐡𝐡\\\\mathbf{h} is a learnable parameter vector to modify the original value vector 𝐯slsuperscriptsubscript𝐯𝑠𝑙\\\\mathbf{v}\\_{s}^{l}, resulting in the optimal vector 𝐯∗=𝐯sl+𝐡subscript𝐯superscriptsubscript𝐯𝑠𝑙𝐡\\\\mathbf{v}\\_{\\*}=\\\\mathbf{v}\\_{s}^{l}+\\\\mathbf{h}.\n\nOutput Distribution Constraint. Given that the final token of the prompt in deeper layers is critical for predicting the output, we impose a regularization constraint on the output distributions of 𝒢′​(p​(s,r))superscript𝒢′𝑝𝑠𝑟\\\\mathcal{G}^{\\\\prime}(p(s,r)) and 𝒢​((s,r,o∗)⊕p​(s,r))𝒢direct-sum𝑠𝑟superscript𝑜𝑝𝑠𝑟\\\\mathcal{G}((s,r,o^{\\*})\\\\oplus p(s,r)). This ensures that the output distribution of the edited model remains consistent with the output distribution generated by the normal inference process of the unedited model.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒO​D​C=KL(ℙ𝒢′​(𝐯sl+=𝐡)\\[y∣p(s,r)\\]∥ℙ𝒢\\[y∣(s,r,o∗)⊕p(s,r)\\]).\\\\mathcal{L}\\_{ODC}=\\\\operatorname{\\\\mathrm{KL}}\\\\left(\\\\mathbb{P}\\_{\\\\mathcal{G}^{\\\\prime}(\\\\mathbf{v}\\_{s}^{l}+=\\\\mathbf{h})}\\\\left\\[y\\\\mid p(s,r)\\\\textbf{}\\\\right\\]\\\\\\|\\\\mathbb{P}\\_{\\\\mathcal{G}}\\\\left\\[y\\\\mid(s,r,o^{\\*})\\\\oplus p(s,r)\\\\right\\]\\\\right). |  | (3) |\n\nThis regularization serves as a global constraint, ensuring alignment in the model’s overall behavior.\n\nNew Knowledge Constraint. To enable the LLM accurately predict the target object o∗superscript𝑜o^{\\*} for each edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}), we also define a new knowledge constraint objective:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ℒN=−subscriptℒ𝑁\\\\displaystyle\\\\mathcal{L}\\_{N}=- | 1N​∑j=1Nlog⁡ℙ𝒢′​(𝐯sl+=𝐡)​\\[o∗∣xj⊕p​(s,r)\\],1𝑁subscriptsuperscript𝑁𝑗1subscriptℙsuperscript𝒢′limit-fromsuperscriptsubscript𝐯𝑠𝑙𝐡delimited-\\[\\]conditionalsuperscript𝑜direct-sumsubscript𝑥𝑗𝑝𝑠𝑟\\\\displaystyle\\\\frac{1}{N}\\\\sum^{N}\\_{j=1}\\\\log\\\\mathbb{P}\\_{\\\\mathcal{G^{\\\\prime}}(\\\\mathbf{v}\\_{s}^{l}+=\\\\mathbf{h})}\\[o^{\\*}\\\\mid x\\_{j}\\\\oplus p(s,r)\\], |  | (4) |\n\nwhere xjsubscript𝑥𝑗x\\_{j} is the random prefix generated by the LLM to foster optimization robustness.\n\nUltimately, the parameter 𝐡𝐡\\\\mathbf{h} is optimized by minimizing the following objective function:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ=λ​ℒS​R​C+β​ℒO​D​C+α​ℒN,ℒ𝜆subscriptℒ𝑆𝑅𝐶𝛽subscriptℒ𝑂𝐷𝐶𝛼subscriptℒ𝑁\\\\displaystyle\\\\mathcal{L}=\\\\lambda\\\\mathcal{L}\\_{SRC}+\\\\beta\\\\mathcal{L}\\_{ODC}+\\\\alpha\\\\mathcal{L}\\_{N}, |  | (5) |\n\nwhere λ𝜆\\\\lambda, β𝛽\\\\beta, α𝛼\\\\alpha represent the strength coefficients associated with different objective functions. Notably, these constraint functions can be jointly optimized with the objective functions of other editing methods, such as FT and MEND, making LTI a highly extensible plug-and-play strategy.\n\n### 6.3 Experiments\n\nIn this section, we evaluate our mitigation strategy by integrating LTI into the MEMIT and ROME methods and applying them to the EVOKE. Building on the experiments from Section [4](https://ar5iv.org/html/2410.07819#S4 \"4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), we perform further evaluations to answer the following key questions:\n\n#### How Effective is LTI in Mitigating the Editing Overfit Problem?\n\nThe performance of all editors on EVOKE is presented in Tables [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\") and [2](https://ar5iv.org/html/2410.07819#S4.T2 \"Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), where ROME-LTI and MEMIT-LTI represent ROME and MEMEIT method integrated with with LTI strategy, respectively.\n\n_(i) Performance on overfit tasks._ From Table [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), we observe that both ROME-LTI and ROME-LTI show significant improvement in overfitting metrics (DP and EOS) compared to ROME and MEMIT, indicating effective mitigation of editing overfit. Additionally, ROME-LTI and MEMIT-LTI demonstrate improvements in AP and AMS metrics across most overfit tasks. These findings suggest that overfitting suppresses the model’s ability to output correct answers in complex tasks, and that alleviating editing overfit can improves the model’s performance on complex tasks.\n\n_(ii) Performance on recall tasks._ As shown in Table [2](https://ar5iv.org/html/2410.07819#S4.T2 \"Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), ROME-LTI and MEMIT-LTI achieve results consistent with the original ROME and MEMIT on the Efficacy task, indicating that the edit success rate is minimally affected. However, the AMS metric for the Paraphrase task shows a slight decrease, which might be attributed to the LTI strategy suppressing the strong association between p​(s,r)𝑝𝑠𝑟p(s,r) and o∗superscript𝑜o^{\\*}. Nevertheless, this results in an overall improvement in performance across several overfit tasks, and we consider this slight reduction acceptable.\n\n_(iii) Comparison with data augmentation strategies._ As discussed in Section [5](https://ar5iv.org/html/2410.07819#S5.SS0.SSS0.Px3 \"Mitigation Technique 3: Data Augmentation ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\"), Specificity Augmentation is an effective strategy for mitigating editing overfit. Therefore, we compare our approach to this technique. As shown in Figure [7](https://ar5iv.org/html/2410.07819#S6.F7 \"Figure 7 ‣ How do Constraints at Different Stages of LTI Influence Overfitting? ‣ 6.3 Experiments ‣ 6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\"), ROME-LTI outperforms ROME with data augmentation (ROME w/ DA) in terms of the EOS metric across all overfit tasks. Additionally, unlike data augmentation methods, our LTI does not require the creation of additional samples, significantly improving editing efficiency and flexibility.\n\n#### How do Constraints at Different Stages of LTI Influence Overfitting?\n\nThe core of LTI lies in its Multi-stage Inference Constraints module, so we analyze how constraints applied at different stages influence the performance of editing method. Figure [7](https://ar5iv.org/html/2410.07819#S6.F7 \"Figure 7 ‣ How do Constraints at Different Stages of LTI Influence Overfitting? ‣ 6.3 Experiments ‣ 6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\") compares ROME-LTI with variants where the Subject Representation Constraint is removed (ROME-LTI w/o SRC) and where the Output Distribution Constraint is removed (ROME-LTI w/o ODC).\n\nROME-LTI significantly outperformed the variant models across multiple metrics, particularly in\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x7.png)Figure 7: Performance comparison of different variant models on EVOKE.\n\noverfit tasks like multi-hop reasoning and prefix distraction, and notably surpassed the original ROME method. Interestingly, ROME-LTI w/o ODC performs similarly to the original ROME, while ROME-LTI w/o SRC shows improvement but remains inferior to the ROME-LTI. This phenomenon may be attributed to the fact that ODC constrains the overall input-output behavior of the model. Without ODC, even though SRC is retained, the output layer loss may drive the model to prioritize maximizing the output probability of o∗superscript𝑜o^{\\*}, potentially diminishing the impact of the SRC. These findings suggest that Subject Representation Constraint is most effective when coupled with Out Distribution Constraint, yielding significant performance gains.\n\n## 7 Discussion & Conclusion\n\nThis study identifies and investigates the phenomenon of Editing Overfit in the knowledge editing of LLMs. We propose that Editing Overfit likely originates from the common paradigm of existing editing methods, which focus on learning subject-relation-object correspondences in factual statements with limited edit samples, leading to overfitting to these patterns. To further explore the overfitting issues in existing editing methods, we construct a new EVOKE benchmark along with dedicated overfitting evaluation metrics. Extensive experiments demonstrate that that current editing methods commonly result in significant Editing Overfit, and that general overfitting mitigation strategies show limited effectiveness in addressing this problem. To tackle this challenge, we design a plug-and-play strategy called Learn to Inference, implemented through a Multi-stage Inference Constraint. Experimental results show its effectiveness in mitigating overfitting.\n\nOur findings reveal limitations in current knowledge editing work and suggest the need for more sophisticated approaches to knowledge integration. While we implemented Learn to Inference by constraining intermediate reasoning representations, future in-depth studies are needed to explore how models can more effectively recall new knowledge in a manner akin to native knowledge retrieval, which will provide insights into better controlling LLMs.\n\n## References\n\n- Brown et al. (2020)\nTom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla\nDhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell,\nSandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon\nChild, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris\nHesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess,\nJack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever,\nand Dario Amodei.\n\nLanguage models are few-shot learners.\n\nIn H. Larochelle, M. Ranzato, R. Hadsell, M.F. Balcan, and H. Lin\n(eds.), _Advances in Neural Information Processing Systems_, volume 33,\npp.  1877–1901. Curran Associates, Inc., 2020.\n\n- Cohen et al. (2023)\nRoi Cohen, Eden Biran, Ori Yoran, Amir Globerson, and Mor Geva.\n\nEvaluating the ripple effects of knowledge editing in language\nmodels.\n\n_arXiv preprint arXiv:2307.12976_, 2023.\n\n- Dai et al. (2022)\nDamai Dai, Li Dong, Yaru Hao, Zhifang Sui, Baobao Chang, and Furu Wei.\n\nKnowledge neurons in pretrained transformers.\n\nIn _Annual Meeting of the Association for Computational_\n_Linguistics_, pp.  8493–8502, 2022.\n\n- De Cao et al. (2021)\nNicola De Cao, Wilker Aziz, and Ivan Titov.\n\nEditing factual knowledge in language models.\n\nIn _Conference on Empirical Methods in Natural Language_\n_Processing_, pp.  6491–6506, 2021.\n\n- Gangadhar & Stratos (2024a)\nGovind Gangadhar and Karl Stratos.\n\nModel editing by pure fine-tuning.\n\n_arXiv preprint arXiv:2402.11078_, 2024a.\n\n- Gangadhar & Stratos (2024b)\nGovind Krishnan Gangadhar and Karl Stratos.\n\nModel editing by standard fine-tuning.\n\nIn Lun-Wei Ku, Andre Martins, and Vivek Srikumar (eds.),\n_Findings of the Association for Computational Linguistics ACL 2024_,\npp.  5907–5913, Bangkok, Thailand and virtual meeting, August\n2024b. Association for Computational Linguistics.\n\n- Geva et al. (2021)\nMor Geva, Roei Schuster, Jonathan Berant, and Omer Levy.\n\nTransformer feed-forward layers are key-value memories.\n\nIn _Conference on Empirical Methods in Natural Language_\n_Processing_, pp.  5484–5495, 2021.\n\n- Geva et al. (2023)\nMor Geva, Jasmijn Bastings, Katja Filippova, and Amir Globerson.\n\nDissecting recall of factual associations in auto-regressive language\nmodels.\n\nIn _Conference on Empirical Methods in Natural Language_\n_Processing_, pp.  12216–12235, 2023.\n\n- Hoelscher-Obermaier et al. (2023)\nJason Hoelscher-Obermaier, Julia Persson, Esben Kran, Ioannis Konstas, and Fazl\nBarez.\n\nDetecting edit failures in large language models: An improved\nspecificity benchmark.\n\nIn Anna Rogers, Jordan Boyd-Graber, and Naoaki Okazaki (eds.),\n_Findings of the Association for Computational Linguistics: ACL 2023_,\npp.  11548–11559, Toronto, Canada, July 2023. Association for Computational\nLinguistics.\n\ndoi: 10.18653/v1/2023.findings-acl.733.\n\n- Hu et al. (2022)\nEdward J Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean\nWang, Lu Wang, and Weizhu Chen.\n\nLoRA: Low-rank adaptation of large language models.\n\nIn _International Conference on Learning Representations_, 2022.\n\n- (11)\nZeyu Huang, Yikang Shen, Xiaofeng Zhang, Jie Zhou, Wenge Rong, and Zhang Xiong.\n\nTransformer-patcher: One mistake worth one neuron.\n\nIn _The Eleventh International Conference on Learning_\n_Representations_.\n\n- Kobayashi et al. (2023)\nGoro Kobayashi, Tatsuki Kuribayashi, Sho Yokoi, and Kentaro Inui.\n\nFeed-forward blocks control contextualization in masked language\nmodels.\n\n_arXiv preprint arXiv:2302.00456_, 2023.\n\n- Meng et al. (2022a)\nKevin Meng, David Bau, Alex Andonian, and Yonatan Belinkov.\n\nLocating and editing factual associations in gpt.\n\n_Annual Conference on Neural Information Processing Systems_,\n35:17359–17372, 2022a.\n\n- Meng et al. (2022b)\nKevin Meng, Arnab Sen Sharma, Alex J Andonian, Yonatan Belinkov, and David Bau.\n\nMass-editing memory in a transformer.\n\nIn _International Conference on Learning Representations_,\n2022b.\n\n- Mitchell et al. (2021)\nEric Mitchell, Charles Lin, Antoine Bosselut, Chelsea Finn, and Christopher D\nManning.\n\nFast model editing at scale.\n\nIn _International Conference on Learning Representations_, 2021.\n\n- Mitchell et al. (2022)\nEric Mitchell, Charles Lin, Antoine Bosselut, Christopher D Manning, and\nChelsea Finn.\n\nMemory-based model editing at scale.\n\nIn _International Conference on Machine Learning_, pp. 15817–15831. PMLR, 2022.\n\n- Pearl (2022)\nJudea Pearl.\n\nDirect and indirect effects.\n\nIn _Probabilistic and causal inference: the works of Judea_\n_Pearl_, pp.  373–392. 2022.\n\n- Radford et al. (2019)\nAlec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya\nSutskever.\n\nLanguage models are unsupervised multitask learners.\n\n2019.\n\n- Ren et al. (2024)\nPengjie Ren, Chengshun Shi, Shiguang Wu, Mengqi Zhang, Zhaochun Ren, Maarten\nde Rijke, Zhumin Chen, and Jiahuan Pei.\n\nMELoRA: Mini-ensemble low-rank adapters for parameter-efficient\nfine-tuning.\n\n_Proceedings of the 62nd Annual Meeting of the Association for_\n_Computational Linguistics_, 2024.\n\n- Vig et al. (2020)\nJesse Vig, Sebastian Gehrmann, Yonatan Belinkov, Sharon Qian, Daniel Nevo,\nYaron Singer, and Stuart Shieber.\n\nInvestigating gender bias in language models using causal mediation\nanalysis.\n\n_Annual Conference on Neural Information Processing Systems_,\n33:12388–12401, 2020.\n\n- Wang & Komatsuzaki (2021)\nBen Wang and Aran Komatsuzaki.\n\nGPT-J-6B: A 6 Billion Parameter Autoregressive Language Model.\n\n[https://github.com/kingoflolz/mesh-transformer-jax](https://github.com/kingoflolz/mesh-transformer-jax \"\"), May 2021.\n\n- Wei et al. (2024)\nZihao Wei, Liang Pang, Hanxing Ding, Jingcheng Deng, Huawei Shen, and Xueqi\nCheng.\n\nStable knowledge editing in large language models, 2024.\n\n- Yao et al. (2023)\nYunzhi Yao, Peng Wang, Bozhong Tian, Siyuan Cheng, Zhoubo Li, Shumin Deng,\nHuajun Chen, and Ningyu Zhang.\n\nEditing large language models: Problems, methods, and opportunities.\n\nIn Houda Bouamor, Juan Pino, and Kalika Bali (eds.), _Conference_\n_on Empirical Methods in Natural Language Processing_, pp.  10222–10240,\n2023.\n\n- Zhang et al. (2024a)\nMengqi Zhang, Bowen Fang, Qiang Liu, Pengjie Ren, Shu Wu, Zhumin Chen, and\nLiang Wang.\n\nEnhancing multi-hop reasoning through knowledge erasure in large\nlanguage model editing, 2024a.\n\n- Zhang et al. (2024b)\nMengqi Zhang, Xiaotian Ye, Qiang Liu, Pengjie Ren, Shu Wu, and Zhumin Chen.\n\nKnowledge graph enhanced large language model editing.\n\n_arXiv preprint arXiv:2402.13593_, 2024b.\n\n- Zhao et al. (2023)\nWayne Xin Zhao, Kun Zhou, Junyi Li, Tianyi Tang, Xiaolei Wang, Yupeng Hou,\nYingqian Min, Beichen Zhang, Junjie Zhang, Zican Dong, et al.\n\nA survey of large language models.\n\n_arXiv preprint arXiv:2303.18223_, 2023.\n\n- Zheng et al. (2023)\nCe Zheng, Lei Li, Qingxiu Dong, Yuxuan Fan, Zhiyong Wu, Jingjing Xu, and Baobao\nChang.\n\nCan we edit factual knowledge by in-context learning?\n\nIn _Proceedings of the 2023 Conference on Empirical Methods in_\n_Natural Language Processing_, pp.  4862–4876, 2023.\n\n- Zhong et al. (2023)\nZexuan Zhong, Zhengxuan Wu, Christopher D Manning, Christopher Potts, and Danqi\nChen.\n\nMQuAKE: Assessing knowledge editing in language models via\nmulti-hop questions.\n\nIn _Conference on Empirical Methods in Natural Language_\n_Processing_, pp.  15686–15702, 2023.\n\n- Zhu et al. (2020)\nChen Zhu, Ankit Singh Rawat, Manzil Zaheer, Srinadh Bhojanapalli, Daliang Li,\nFelix Yu, and Sanjiv Kumar.\n\nModifying memories in transformer models.\n\n_arXiv preprint arXiv:2012.00363_, 2020.\n\n\n## Appendix A Details on the EVOKE Benchmark\n\nThe EVOKE benchmark is designed to evaluate the effectiveness of knowledge editing methods for LLMs, focusing not only on their ability to accurately recall edited knowledge but also on their performance and potential overfitting across diverse complex reasoning tasks. Notably, part of EVOKE’s data is sourced from existing knowledge editing datasets. We have reorganized and extended datasets including CounterFact(Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")), CounterFactPlus(Yao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib23 \"\")), and RippleEdits-Popular(Cohen et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib2 \"\")) to construct new task-specific data for comprehensive analysis of knowledge editing methods.\n\nTable 3: An Example of the EVOKE dataset\n\n| Task | Value |\n| --- | --- |\n| Edit Request | {Spike Hughes} originates from London →→\\\\to Philadelphia |\n| Efficacy | {Spike Hughes} originates from (answer: Philadelphia) |\n| Paraphrase | Spike Hughes is native to (answer: Philadelphia) |\n| Subject Specificity | The profession of Spike Hughes is (answer: musician) |\n| Relation Specificity | Max Mosley originates from (answer: London) |\n| Multi-hop Reasoning | What famous food is associated with the city where Spike Hughes originates from? (answer: Cheesesteaks) |\n| Prefix Distraction | Spike Hughes originates from Philadelphia. Max Mosley originates from (answer: London) |\n\nEach entry in EVOKE consists of a counterfactual Edit Request, an Efficacy Prompt, several Paraphrase prompts for recall tasks, and corresponding questions and answers for the four Overfit Tasks: Multi-hop Reasoning, Prefix Distraction, Relation Specificity, and Subject Specificity. Tables [3](https://ar5iv.org/html/2410.07819#A1.T3 \"Table 3 ‣ Appendix A Details on the EVOKE Benchmark ‣ Uncovering Overfitting in Large Language Model Editing\") and [4](https://ar5iv.org/html/2410.07819#A1.T4 \"Table 4 ‣ Dataset Construction ‣ Appendix A Details on the EVOKE Benchmark ‣ Uncovering Overfitting in Large Language Model Editing\") provide task examples and summarize the statistical composition of EVOKE, respectively.\n\n#### Dataset Construction\n\nWe construct EVOKE, a comprehensive dataset for evaluating overfitting in LLMs based on edits, by extending and refining existing benchmark data. The edit requests and recall task data in EVOKE are sourced from established benchmarks, including RippleEdits-Popular and CounterFact, specifically leveraging a subset of their test splits.\n\nFor Multi-hop Reasoning task, we augment the existing dataset by incorporating newly constructed data. Specifically, Building upon the CounterFactPlus dataset, which lacks original answers for multi-hop questions, we generate the missing answers using GPT-4o, following the methodology used in (Yao et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib23 \"\")). We validate that these answers can be correctly recalled by the unedited GPT-J model, ensuring they accurately reflect the model’s typical responses. Furthermore, we address potential data leakage caused by implicit answer category constraints in some prompts, where unedited models might predict new-fact-based multi-hop answers with high probability.\nTo mitigate this, we use GPT-4o to rephrase prompts and reduce biases, creating a more robust evaluation. We ensure transparency by reporting the performance of the unedited base model on this modified dataset.\n\nTable 4: Composition statistics of EVOKE\n\n| Type | Total |\n| --- | --- |\n| Edit Requests | 1489 |\n| Efficacy Prompts | 1489 |\n| Paraphrase Prompts | 2062 |\n| Subject Specificity Prompts | 458 |\n| Relation Specificity Prompts | 10310 |\n| Multihop Prompts | 822 |\n| Prefix Distraction Prompts | 10310 |\n\nThe remaining tasks in EVOKE, including Relation Specificity, Subject Specificity, and Prefix Distraction, are constructed to target specific aspects of overfitting. Leveraging the locality data from Counterfact, the Relation Specificity task probes the consistency of edited models’ responses across prompts that share the same relation but differ in subject entities. This aligns with the locality metric in traditional knowledge editing datasets, which is used to assess the preservation of unrelated knowledge. We ground the Subject Specificity task in data curated from the RippleEdits-Popular dataset to directly assess overfitting to specific subject entities. For the Prefix Distraction task, we prepend edit requests, in the form of new facts, to the prompts used in the Relation Specificity task, following the approach outlined in Hoelscher-Obermaier et al. ( [2023](https://ar5iv.org/html/2410.07819#bib.bib9 \"\")). This construction enables the evaluation of an edited model’s susceptibility to irrelevant information presented as part of the input context.\n\n## Appendix B Experimental Setup Details\n\nOur experiments build on the codebase implemented by Meng et al. ( [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\"); [b](https://ar5iv.org/html/2410.07819#bib.bib14 \"\")). For the hyperparameters of MEMIT on GPT-2 XL, we observe significant failures in certain editing cases, with notably lower performance metrics on the recall task compared to GPT-J. To address this, we adjust the hyperparameters, specifically increasing the clamp\\_norm\\_factor from 0.750.750.75 to 1.251.251.25 for GPT-2 XL. This adjustment is made to align its editing success rates with those of GPT-J, allowing us to evaluate normal editing performance and potential overfitting. All other baseline implementations, including hyperparameters, remain consistent with the setup of Meng et al. ( [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\"); [b](https://ar5iv.org/html/2410.07819#bib.bib14 \"\")).\n\n### B.1 Baseline Methods\n\nFine-Tuning (FT) involves fine-tuning the base model on text describing the edit fact.\n\nConstrained Fine-Tuning (FT-L)(Zhu et al., [2020](https://ar5iv.org/html/2410.07819#bib.bib29 \"\")) involves fine-tuning specific layers of the LLM’s parameters directly using gradient descent, while imposing a norm constraint on the weight changes to prevent catastrophic forgetting.\n\nMEND(Mitchell et al., [2021](https://ar5iv.org/html/2410.07819#bib.bib15 \"\")) constructs a hyper-network based on the low-rank decomposition of gradients to perform editing.\n\nROME(Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")) operates on the hypothesis that knowledge in LLMs is stored in the MLP layer and utilize rank-one update to insert knowledge into MLP layer.\n\nMEMIT(Meng et al., [2022b](https://ar5iv.org/html/2410.07819#bib.bib14 \"\")) builds on the ROME method, specializing in batch-editing tasks by applying edits across multiple MLP layers.\n\n### B.2 Details on Multi-layer Editing Experiment\n\nIn Appendix [E](https://ar5iv.org/html/2410.07819#A5 \"Appendix E Analysis on Distributing Weight Updates Across Layers ‣ Uncovering Overfitting in Large Language Model Editing\"), we investigate the impact of distributing parameter updates across multiple layers on Editing Overfit, conducting experiments using MEMIT method. The original MEMIT approach, when applied to GPT-J, edited six layers (l=3,4,5,6,7,8𝑙345678l={3,4,5,6,7,8}), with the recall vector 𝐯𝐯\\\\mathbf{v} computed at layer 888. In our experiments, we maintain a constant product of the hyperparameter clamp\\_norm\\_factor and the number of edited layers. When adjusting the number of layers, we keep the highest edited layer fixed. For example, when editing three layers, we select l={6,7,8}𝑙678l=\\\\{6,7,8\\\\}.\n\n### B.3 Details on Data Augmentation Experiment\n\nIn Section [5](https://ar5iv.org/html/2410.07819#S5.SS0.SSS0.Px3 \"Mitigation Technique 3: Data Augmentation ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\"), we follow existing data augmentation strategy (Wei et al., [2024](https://ar5iv.org/html/2410.07819#bib.bib22 \"\"); Gangadhar & Stratos, [2024a](https://ar5iv.org/html/2410.07819#bib.bib5 \"\")) to evaluate the effect of data augmentation on Editing Overfit. Specifically, we employ GPT-4o to generate 101010 data-augmented paraphrase prompts and 101010 subject specificity prompts for each edit request. Paraphrases are required to be factual statements semantically equivalent to the edited knowledge, while subject specificity prompts are factual statements about the same subject but with different relations. The construction of specificity augmentation prompts aligned with the task test prompts for Subject Specificity, directly enhancing this task. We also utilize GPT-4o to verify and filter out augmented samples that do not meet the requirements.\n\nWe test data augmentation effects on MEMIT. The original MEMIT implementation optimized updated parameters by combining the original factual statement with five additional prompts. These prompts are created by appending random prefixes to the original statement, helping the model generalize across contexts. In our paraphrase augmentation experiment, we maintain consistency by optimizing with five randomly prefixed paraphrased prompts. For the specificity augmentation experiment, we add five unrelated facts to the optimization process. This helps suppress the probability of outputting the Edit Target.\n\n## Appendix C Method Implementation Details\n\nIn this section, we detail the implementation of our LTI strategy, covering the design of the Contextual Prompt, the selection of layers for the Subject Representation Constraint, and key hyperparameter settings.\n\n#### Design of the Contextual Prompt\n\nIn our LTI framework, Multi-stage Inference Constraint module involves aligning the inference process between the edited model and a context-guided unedited model during editing. In this approach, context is used solely to introduce a prefix that guides the model to infer and output based on the new fact, thus providing an inference process as a learning target. We employ a minimalistic approach to context construction, inspired by the in-context editing baseline from Cohen et al. ( [2023](https://ar5iv.org/html/2410.07819#bib.bib2 \"\")). Specifically, we prepend the prefix “Imagine that” to the input prompt as a context prefix. For instance, given a new knowledge “Microsoft is founded by Bill Gates → Steve Jobs,” the context prefix would be “Imagine that Microsoft is founded by Steve Jobs.” This simple strategy avoids the format restrictions seen in few-shot demonstrations, minimizing potential adverse effects on the model’s output distribution and leaving room for future research and optimization.\n\n#### Layer Selection for the Subject Representation Constraint\n\nThe choice of layers for applying the Subject Representation Constraint (SRC) in LTI is a critical hyperparameter, guided by previous interpretability studies on LLM knowledge recall mechanisms(Meng et al., [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\"); Cohen et al., [2023](https://ar5iv.org/html/2410.07819#bib.bib2 \"\")). These analyses reveal that subject position representations, which encode relevant knowledge, are extracted by attention modules in deeper layers for answer prediction. The SRC aims to align the subject representations of the edited model with those produced by normal inference, ensuring that subsequent recall steps function as expected. Specifically, Cohen et al. ( [2023](https://ar5iv.org/html/2410.07819#bib.bib2 \"\")) highlight that for GPT-2 XL, the attention edges from “subject-to-last-token” in layers 30−40304030-40 are strongly correlated with answer prediction, while for GPT-J, this correlation is observed in layers 15−20152015-20.\nTherefore, we constrain layer 303030 in GPT-2 XL and layer 151515 in GPT-J, anticipating these representations to be effectively utilized by these information flows. Further experimental results on the effects of constraining different layers are presented in Appendix [F](https://ar5iv.org/html/2410.07819#A6 \"Appendix F The impact of Constraint Layers ‣ Uncovering Overfitting in Large Language Model Editing\").\n\n#### Other Hyperparameter Settings\n\nLTI’s hyperparameters include coefficients for the three constraint losses. In practice, the coefficient λ𝜆\\\\lambda for the Subject Representation Constraint is set to 0.06250.06250.0625, while the Output Distribution Constraint coefficient β𝛽\\\\beta is 0.03250.03250.0325.\nFor the New Knowledge Constraint coefficient α𝛼\\\\alpha, ROME-LTI uses values of 0.06250.06250.0625 for GPT-J and and 0.150.150.15 for GPT-2 XL, whereas MEMIT-LTI employs 0.250.250.25 for GPT-J and 0.1250.1250.125 for GPT-2 XL.\n\n## Appendix D Rank-One Model Editing\n\nRank-One Model Editing (ROME) Meng et al. ( [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")) is a Locate-then-edit method that assumes factual knowledge is stored within the MLP layers of LLMs, conceptualized as key-value memories Geva et al. ( [2021](https://ar5iv.org/html/2410.07819#bib.bib7 \"\")); Kobayashi et al. ( [2023](https://ar5iv.org/html/2410.07819#bib.bib12 \"\")). The output of the l𝑙l-th layer MLP for the i𝑖i-th token is given by:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐯il=f​(𝐖i​nl⋅𝐡il−1)⋅𝐖l,superscriptsubscript𝐯𝑖𝑙⋅𝑓⋅superscriptsubscript𝐖𝑖𝑛𝑙superscriptsubscript𝐡𝑖𝑙1superscript𝐖𝑙\\\\mathbf{v}\\_{i}^{l}=f(\\\\mathbf{W}\\_{in}^{l}\\\\cdot\\\\mathbf{h}\\_{i}^{l-1})\\\\cdot\\\\mathbf{W}^{l}, |  | (6) |\n\nwhere f​(⋅)𝑓⋅f(\\\\cdot) denotes the activation function, and 𝐡il−1superscriptsubscript𝐡𝑖𝑙1\\\\mathbf{h}\\_{i}^{l-1} is the MLP input. For simplicity, the superscript l𝑙l is omitted in the following discussion.\n\nIn this setup, f​(𝐖i​n⋅𝐡i)𝑓⋅subscript𝐖𝑖𝑛subscript𝐡𝑖f(\\\\mathbf{W}\\_{in}\\\\cdot\\\\mathbf{h}\\_{i}) represent the keys, denoted as 𝐤isubscript𝐤𝑖\\\\mathbf{k}\\_{i}, while the outputs of the subsequent layer serve as the corresponding values. Using casual tracing Pearl ( [2022](https://ar5iv.org/html/2410.07819#bib.bib17 \"\")); Vig et al. ( [2020](https://ar5iv.org/html/2410.07819#bib.bib20 \"\")), ROME identifies a specific MLP layer for editing and updates the weight 𝐖𝐖\\\\mathbf{W} of the second layer by solving a constrained least-squares problem:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minimize‖𝐖𝐊−𝐕‖,subject to𝐖𝐤∗=𝐯∗.missing-subexpressionminimizemissing-subexpressionnorm𝐖𝐊𝐕missing-subexpressionsubject tomissing-subexpressionsubscript𝐖𝐤subscript𝐯\\\\displaystyle\\\\begin{aligned} &{\\\\text{minimize}}&&\\\\\\|\\\\mathbf{{W}}\\\\mathbf{K}-\\\\mathbf{V}\\\\\\|,\\\\\\<br>&\\\\text{subject to}&&\\\\mathbf{{W}}\\\\mathbf{k}\\_{\\*}=\\\\mathbf{v}\\_{\\*}.\\\\end{aligned} |  | (7) |\n\nwhere the objective is to preserve unrelated knowledge within the LLM, while the constraint ensures that the edited knowledge is incorporated into the MLP layer. Here, 𝐊=\\[𝐤1;𝐤2;,…,;𝐤p\\]\\\\mathbf{K}=\\[\\\\mathbf{k}\\_{1};\\\\mathbf{k}\\_{2};,\\\\dots,;\\\\mathbf{k}\\_{p}\\] denotes the sets of keys encoding subjects unrelated to the edited fact, and 𝐕=\\[𝐯1;𝐯2;,…,;𝐯p\\]\\\\mathbf{V}=\\[\\\\mathbf{v}\\_{1};\\\\mathbf{v}\\_{2};,\\\\dots,;\\\\mathbf{v}\\_{p}\\] represents the corresponding values. The constraint ensures that the edited knowledge is incorporated into the MLP layer by enabling the key 𝐤∗subscript𝐤\\\\mathbf{k}\\_{\\*} (encoding subject s𝑠s) to retrieve the value 𝐯∗subscript𝐯\\\\mathbf{v}\\_{\\*} about the new object o∗superscript𝑜o^{\\*}.\n\nAs explicated in Meng et al. ( [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")), a closed-form solution to the optimization problem can be derived:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐖^=𝐖+(𝐯∗−𝐖𝐤∗)​(𝐂−1​𝐤∗)T(𝐂−1​𝐤∗)T​𝐤∗,^𝐖𝐖subscript𝐯subscript𝐖𝐤superscriptsuperscript𝐂1subscript𝐤Tsuperscriptsuperscript𝐂1subscript𝐤Tsubscript𝐤\\\\mathbf{\\\\hat{W}}=\\\\mathbf{W}+\\\\frac{(\\\\mathbf{v}\\_{\\*}-\\\\mathbf{W}\\\\mathbf{k}\\_{\\*})(\\\\mathbf{C}^{-1}\\\\mathbf{k}\\_{\\*})^{\\\\mathrm{T}}}{(\\\\mathbf{C}^{-1}\\\\mathbf{k}\\_{\\*})^{\\\\mathrm{T}}\\\\mathbf{k}\\_{\\*}}, |  | (8) |\n\nwhere 𝐂=𝐊𝐊T𝐂superscript𝐊𝐊T\\\\mathbf{C}=\\\\mathbf{K}\\\\mathbf{K}^{\\\\mathrm{T}} is a constant matrix, precomputed by estimating the uncentered covariance of 𝐤𝐤\\\\mathbf{k} based on a sample of Wikipedia text. Thus, solving the optimal parameter 𝐖^^𝐖\\\\mathbf{\\\\hat{W}} is transformed into calculating subject representation 𝐤∗subscript𝐤\\\\mathbf{k}\\_{\\*} and recall vector 𝐯∗subscript𝐯\\\\mathbf{v}\\_{\\*}. For each edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}), the subject representation 𝐤∗subscript𝐤\\\\mathbf{k}\\_{\\*} is calculated by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐤∗=1N​∑j=1Nf​(𝐖i​nl⋅𝐡sl−1).subscript𝐤1𝑁superscriptsubscript𝑗1𝑁𝑓⋅superscriptsubscript𝐖𝑖𝑛𝑙superscriptsubscript𝐡𝑠𝑙1\\\\mathbf{k}\\_{\\*}=\\\\frac{1}{N}\\\\sum\\_{j=1}^{N}f(\\\\mathbf{W}\\_{in}^{l}\\\\cdot\\\\mathbf{h}\\_{s}^{l-1}). |  | (9) |\n\nwhere N𝑁N random prefixes generated by the LLM are used to enhance optimization robustness Meng et al. ( [2022a](https://ar5iv.org/html/2410.07819#bib.bib13 \"\")).\n\n## Appendix E Analysis on Distributing Weight Updates Across Layers\n\nAnother notable observation from Table [1](https://ar5iv.org/html/2410.07819#S4.T1 \"Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\") is the significant reduction in overfitting exhibited by MEMIT compared to ROME. Both methods follow the locate-then-edit paradigm, but the key difference is that MEMIT distributes updates across multiple layers, whereas ROME concentrates modifications on a single layer. This distinction motivates further investigate into the impact of distributing weight updates across multiple layers on mitigating overfitting.\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x8.png)Figure 8: Performance of MEMIT with different editing layers on EVOKE.\n\nWe edit GPT-J using MEMIT with varying numbers of modified layers and evaluate the performance of the edited model on EVOKE. The results, shown in Figure [8](https://ar5iv.org/html/2410.07819#A5.F8 \"Figure 8 ‣ Appendix E Analysis on Distributing Weight Updates Across Layers ‣ Uncovering Overfitting in Large Language Model Editing\"), indicate that as the number of layers involved in weight distribution increases, the EOS metric tends to increase, albeit with a slight decline in the model’s paraphrasing capabilities. These findings suggest that distributing weight updates across multiple layers, rather than concentrating them in a single layer, is generally beneficial in mitigating overfitting.\n\n## Appendix F The impact of Constraint Layers\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x9.png)Figure 9: Performance of ROME-LTI with different constraint layers on EVOKE. Gray dashed lines indicate the performance of the original ROME method.\n\nFigure [9](https://ar5iv.org/html/2410.07819#A6.F9 \"Figure 9 ‣ Appendix F The impact of Constraint Layers ‣ Uncovering Overfitting in Large Language Model Editing\") demonstrates the model’s performance when varying the number of intermediate layers constrained in ROME-LTI. Despite minor fluctuations across different metrics, the performance on all overfit tasks consistently remains significantly better than that of the original ROME method. This suggests that the model’s performance is not highly sensitive to the specific layer position of intermediate constraints. This phenomenon may be attributed to that aligning the hidden state of a specific layer with the target representation likely influences the reasoning process in adjacent layers for the same token position. This implicitly extends the constraint effect to other layers, encouraging them to also approximate the corresponding representations in the target inference process. Previous ablation studies (§ [6.3](https://ar5iv.org/html/2410.07819#S6.SS3.SSS0.Px1 \"How Effective is LTI in Mitigating the Editing Overfit Problem? ‣ 6.3 Experiments ‣ 6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\")) have shown that removing hidden state constraints at the subject position significantly degrades performance, and these results indicate that constraining specific token positions in intermediate layers may be more crucial than constraining particular layer numbers.\n\n## Appendix G Case Study\n\nThis section presents generation examples from GPT-J models edited with various methods on a multi-hop question from the EVOKE benchmark, as illustrated in Figure [10](https://ar5iv.org/html/2410.07819#A7.F10 \"Figure 10 ‣ Appendix G Case Study ‣ Uncovering Overfitting in Large Language Model Editing\"). This specific example introduces the counterfactual fact, “Bhamdoun, located in Lebanon →→\\\\rightarrow Portugal,” with the corresponding multi-hop question being “What is the capital city of the country where Bhamdoun is located?” Correctly answering this question requires the model to first recall the edited fact that “Bhamdoun is located in Portugal”, and then recall that “Lisbon is the capital of Portugal”, which is the final answer. If Editing Overfit occurs, the model might instead disproportionately favor the edit target and incorrectly output “Portugal.”\n\nNotably, the FT-edited model displays a significant collapse, repeatedly outputting the edit target, “Portugal,” without providing any other relevant information. Although FT-L and MEND do not directly output the edit target, they still fail to produce the correct answer, indicating their inability to effectively utilize the new knowledge in this complex task. Conversely, both ROME and MEMIT directly output the edit target, exemplifying clear cases of Editing Overfit. ROME-LTI and MEMIT-LTI successfully answer the multi-hop question within their responses and maintain better overall consistency, highlighting the potential of LTI in mitigating overfitting and improving post-editing model performance.\n\n![Refer to caption](https://ar5iv.org/html/2410.07819/assets/x10.png)Figure 10: GPT-J generation examples of test case No.361 in EVOKE dataset. Prompts are shown in italic. Green text indicates the correct answer to the multi-hop question, blue text is related to the edit target, and red text highlights noticeable inconsistencies between the generated content and the inserted knowledge or context.\n\n[◄](https://ar5iv.org/html/2410.07818) [![ar5iv homepage](https://ar5iv.org/assets/ar5iv.png)](https://ar5iv.org/) [Feeling\\\\\n\\\\\nlucky?](https://ar5iv.org/feeling_lucky) [Conversion\\\\\n\\\\\nreport](https://ar5iv.org/log/2410.07819) [Report\\\\\n\\\\\nan issue](https://github.com/dginev/ar5iv/issues/new?template=improve-article--arxiv-id-.md&title=Improve+article+2410.07819) [View original\\\\\n\\\\\non arXiv](https://arxiv.org/abs/2410.07819) [►](https://ar5iv.org/html/2410.07820)",
  "sections": {
    "1 Introduction": {
      "content": "Large Language Models (LLMs) have achieved remarkable success across various Natural Language Processing (NLP) tasks (Zhao et al., [2023]), yet they often contain outdated or incorrect information, raising concerns about their reliability and factual accuracy. Knowledge Editing (Yao et al., [2023]) has emerged as a promising solution to precisely update or correct a model’s knowledge. Approaches to knowledge editing fall into two main categories: parameter-preserving methods, such as SERAC (Mitchell et al., [2022]) and T-patcher ( [Huang et al.,]), which adjust outputs by storing external knowledge, and parameter-modifying methods, which directly alter the model’s internal parameters. The latter includes fine-tuning-based methods like FT-L (Zhu et al., [2020]), meta-learning approaches such as KE (De Cao et al., [2021]) and MEND (Mitchell et al., [2021]), and locate-then-edit methods like ROME (Meng et al., [2022a]) and MEMIT (Meng et al., [2022b]).\n\nAlthough existing methods have achieved promising results, their performance experiences a catastrophic decline when transferred to complex tasks involving reasoning (Yao et al., [2023]). For instance, in the representative multi-hop reasoning task, after the LLM is updated with _Steve Jobs_ as _the founder of Microsoft_, it can easily respond to straightforward questions like “ _Who is the founder of Microsoft?_” with “ _Steve Jobs_.” However, it struggles to accurately answer more complex queries, such as “ _Which college did the founder of Microsoft attend?_”\n\nTo investigate the reasons behind the failure of edited LLMs in complex tasks, we first experimentally analyse the outputs from edited models on a multi-hop reasoning task (§ [3]Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\")). The results reveal an abnormally high probability that the edited models output the edit target o∗superscript𝑜o^{\\*} for multi-hop questions, even when such responses are entirely implausible as valid answers (§ [3.2]Editing Overfit Phenomenon ‣ 3 Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\")). We refer to this phenomenon as Editing Overfit, indicates that edited models tend to assign unusually high prediction probabilities to the edit target o∗superscript𝑜o^{\\*} of edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}), skewing the response accuracy for complex questions where the correct answer is not o∗superscript𝑜o^{\\*}. For instance, as shown in Figure [1]Figure 1 ‣ 1 Introduction ‣ Uncovering Overfitting in Large Language Model Editing\"), after editing “Microsoft is founded by Bill Gates →→\\\\rightarrow Steve Jobs,” it erroneously answers the question “Which college did the founder of Microsoft attend?” with “Steve Jobs.”\n\nWe hypothesize that Editing Overfit is a key factor contributing to the suboptimal performance of edited LLMs on complex tasks. This phenomenon likely stems from existing knowledge editing paradigms emphasize the direct correspondence between the input prompt p​(s,r)𝑝𝑠𝑟p(s,r) and the output o∗superscript𝑜o^{\\*} for each edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}). Given the typically limited number of optimization samples, this focus on optimizing the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} relationship can lead to severe overfitting issues. Specifically, as illustrated in Figure [1]Figure 1 ‣ 1 Introduction ‣ Uncovering Overfitting in Large Language Model Editing\"), all current knowledge editing methods for LLMs rely on a primary loss function that maximizes the likelihood of the new target o∗superscript𝑜o^{\\*} given the input prompt p​(s,r)𝑝𝑠𝑟p(s,r). The main differences between these methods lie in the techniques used for parameter updates. For example, FT-based methods either directly optimizes or uses parameter-efficient fine-tuning (Hu et al., [2022]; Ren et al., [2024]) to adjust model parameters, MEND employ a hypernetwork to make updates, while ROME and MEMIT apply low-rank updates to derive closed-form solutions for specific parameters. When the model is updated with the new knowledge such as “ _Microsoft is founded by Steve Jobs_,” it risks overfitting by learning only the correspondence between “ _Microsoft is founded by_” and “ _Steve Jobs_.” As a result, the edited model may output “ _Steve Jobs_” whenever it encounters the terms “ _Microsoft_” and “ _is founded by_.” This also explains the abnormally high prediction probabilities of edit targets in multi-hop reasoning task, as the edited model may simply recognize patterns in the prompt and tend to output the corresponding edit target.\n\n![Refer to caption]Figure 1: Example of Editing Overfit.\n\nIn this study, we particularly investigate the Editing Overfit phenomenon that occurs in edited LLMs. To this end, we first construct a benchmark for EValuating of Editing Overfit in Knowledge Editing (EVOKE) (§ [4.1]EVOKE Benchmark ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")), which comprises six tasks across two categories. The overfit tasks in EVOKE include various patterns prone to causing overfitting in models, allowing us analyze and investigate overfitting phenomena in current editing methods. By applying existing editing methods to EVOKE, we conduct an in-depth analysis to identify specific input patterns are prone to overfitting (§ [4.2]Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")). Furthermore, we evaluate the effectiveness of four existing overfitting mitigation strategies (§ [5]Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\")), _Norm Constraints_, _Batch Editing_, _Multi-layer Editing_, and _Data Augmentation_, in addressing the Editing Overfit problem. To further alleviate Editing Overfit, inspired by the knowledge mechanism of LLMs, we propose a plug-and-play strategy named Learn To Inference (LTI) (§ [6]Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\")), which enables the edited models to learn how to infer with new knowledge rather than simply establish input-output mappings. Specifically, LTI introduces a Multi-Stage Constraint module, which imposes constraints on crucial reasoning steps of LLMs during the editing process. This ensures that the edited model utilizes new knowledge in a way that closely resembles how an unedited model leverage new knowledge through in-context learning, helping to prevent the model from overfitting solely on input-output mapping.\nAdditionally, LTI can be combined with various knowledge editing methods and used in conjunction with other overfitting mitigation techniques.\n\nOur contributions can be summarized as follows:\n\n- •\n\n\nWe reveal and investigate the overfitting issue caused by current editing paradigm, identifying it as a key factor behind the suboptimal performance of edited models, a phenomenon we term the Editing Overfit problem.\n\n- •\n\n\nWe construct EVOKE, a benchmark with detailed evaluation metrics, to enable a fine-grained assessment and analysis of mainstream editing methods. Additionally, we explore the effectiveness of four general overfitting mitigation techniques in addressing the Editing Overfit problem.\n\n- •\n\n\nWe propose a new plug-in strategy, Learn to Inference, designed to further mitigate overfitting. Extensive experiments demonstrate that integrating LTI with different editing methods effectively reduces the severity of Editing Overfit.",
      "citations": [
        {
          "start_pos": 118,
          "end_pos": 137,
          "text": "Zhao et al., [2023]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 280,
          "end_pos": 298,
          "text": "Yao et al., [2023]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 496,
          "end_pos": 519,
          "text": "Mitchell et al., [2022]",
          "paper_id": "bib.bib16",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 538,
          "end_pos": 552,
          "text": "Huang et al.,]",
          "paper_id": "bib.bib11",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 751,
          "end_pos": 769,
          "text": "Zhu et al., [2020]",
          "paper_id": "bib.bib29",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 812,
          "end_pos": 830,
          "text": "Cao et al., [2021]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 842,
          "end_pos": 865,
          "text": "Mitchell et al., [2021]",
          "paper_id": "bib.bib15",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 908,
          "end_pos": 928,
          "text": "Meng et al., [2022a]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 941,
          "end_pos": 961,
          "text": "Meng et al., [2022b]",
          "paper_id": "bib.bib14",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1132,
          "end_pos": 1150,
          "text": "Yao et al., [2023]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3849,
          "end_pos": 3866,
          "text": "Hu et al., [2022]",
          "paper_id": "bib.bib10",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3868,
          "end_pos": 3886,
          "text": "Ren et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "2 Related Work": {
      "content": "Knowledge editing (KE) updates LLM outputs to (i) accurately respond to new knowledge, (ii) preserve existing knowledge without catastrophic forgetting, and (iii) leverage updated knowledge in complex reasoning tasks. Each piece of knowledge is formulated as a triple (s,r,o)𝑠𝑟𝑜(s,r,o)De Cao et al. ( [2021]), consisting of a subject s𝑠s, relation r𝑟r, and objecto𝑜o. An edit sample is defined as e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}), representing a knowledge update from (s,r,o)𝑠𝑟𝑜(s,r,o) to (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}). Our study focuses on parameter-modifying methods, which are divided into three main categories (Yao et al., [2023]):\n\nFine-tuning-based methods generally follow the supervised fine-tuning paradigm. For example, to edit a fact such as “Microsoft is founded by Steve Jobs,” the model’s weights are updated via gradient descent to increase the probability of the edit target, Steve Jobs. Some approaches aim to improve robustness by incorporating norm constraints (Zhu et al., [2020]) or data augmentation(Gangadhar & Stratos, [2024b]); Wei et al., [2024]). However, vanilla fine-tuning often affects unrelated knowledge, leading to catastrophic forgetting, making it unsuitable for direct application in knowledge editing.\n\nMeta-learning-based methods employ a hypernetwork to adjust model parameters specifically for editing. This hypernetwork is trained to convert fine-tuning gradients into updated weights, with the aim of predicting weights that closely resemble those obtained through fine-tuning with augmented data.\nKE (De Cao et al., [2021]) pioneered this approach, which MEND (Mitchell et al., [2021]) later extended to LLMs by predicting low-rank decompositions of parameter updates.\n\nLocate-then-edit methods originate from research into the internal mechanisms of LLMs, advocating for identifying the specific weights responsible for storing knowledge before applying targeted updates. Geva et al. ( [2021]; [2023])) propose viewing MLP modules as key-value memory. Building on this foundation, the Knowledge Neuron theory (Dai et al., [2022]) posits that these MLP key-value pairs encode factual knowledge. Meng et al. ( [2022a]) introduce causal tracing to analyze LLMs’ factual recall mechanisms, leading to the development of ROME (Meng et al., [2022a]) and MEMIT (Meng et al., [2022b]), which achieved state-of-the-art results on several traditional metrics.\n\nIn recent years, researchers have recognized the limitations of current editing methods on specific complex tasks such as multi-hop reasoning, leading to the development of task-specific approaches (Zhong et al., [2023]; Zhang et al., [2024b]; [a])). In contrast, our work explores the reasons behind the suboptimal performance of editing methods by constructing a benchmark and proposes a more general strategy to enhance editing performance by addressing the issue of overfitting.",
      "citations": [
        {
          "start_pos": 288,
          "end_pos": 307,
          "text": "Cao et al. ( [2021]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 633,
          "end_pos": 651,
          "text": "Yao et al., [2023]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 999,
          "end_pos": 1017,
          "text": "Zhu et al., [2020]",
          "paper_id": "bib.bib29",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1071,
          "end_pos": 1089,
          "text": "Wei et al., [2024]",
          "paper_id": "bib.bib22",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1566,
          "end_pos": 1584,
          "text": "Cao et al., [2021]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1623,
          "end_pos": 1646,
          "text": "Mitchell et al., [2021]",
          "paper_id": "bib.bib15",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1935,
          "end_pos": 1955,
          "text": "Geva et al. ( [2021]",
          "paper_id": "bib.bib7",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2073,
          "end_pos": 2091,
          "text": "Dai et al., [2022]",
          "paper_id": "bib.bib3",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2157,
          "end_pos": 2178,
          "text": "Meng et al. ( [2022a]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2285,
          "end_pos": 2305,
          "text": "Meng et al., [2022a]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2318,
          "end_pos": 2338,
          "text": "Meng et al., [2022b]",
          "paper_id": "bib.bib14",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2613,
          "end_pos": 2633,
          "text": "Zhong et al., [2023]",
          "paper_id": "bib.bib28",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2635,
          "end_pos": 2656,
          "text": "Zhang et al., [2024b]",
          "paper_id": "bib.bib25",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "3 Preliminary Experiments": {
      "content": "To investigate the causes of edited LLMs’ poor performance on complex tasks, we begin by analyzing the outputs of the edited models on a representative multi-hop reasoning dataset, CounterfactPlus(Yao et al., [2023]), where each entry contains an edited knowledge e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}) along with a multi-hop question q=(s,r,r′)𝑞𝑠𝑟superscript𝑟′q=(s,r,r^{\\\\prime}) that requires reasoning based on the edited sample.\n\n### 3.1 Metric Definitions\n\nTo perform a fine-grained analysis of the outputs from edited models, we define several metrics in response to complex prompts, such as multi-hop questions within the dataset. Specifically, for each edit sample e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}), when the edited LLM is presented with a prompt consisting of a complex question, it may produce one of the following outputs: the original answer to the complex question, the correct answer, or the edited target o∗superscript𝑜o^{\\*}. Accordingly, we define the following metrics:\n\n- •\n\n\nCorrect Answer Probability (CAP): The probability that the model generates the correct answer 𝚊𝚗𝚜𝚊𝚗𝚜\\\\verb+ans+ for a given 𝚙𝚛𝚘𝚖𝚙𝚝𝚙𝚛𝚘𝚖𝚙𝚝\\\\verb+prompt+, formalized as ℙ​(𝚊𝚗𝚜∣𝚙𝚛𝚘𝚖𝚙𝚝)ℙconditional𝚊𝚗𝚜𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{P}\\\\left(\\\\verb+ans+\\\\mid\\\\verb+prompt+\\\\right).\n\n- •\n\n\nOriginal Answer Probability (OAP): The probability that the model outputs the original answer 𝚘𝚛𝚒𝚘𝚛𝚒\\\\verb+ori+ (before editing) in response to the given 𝚙𝚛𝚘𝚖𝚙𝚝𝚙𝚛𝚘𝚖𝚙𝚝\\\\verb+prompt+, defined as ℙ​(𝚘𝚛𝚒∣𝚙𝚛𝚘𝚖𝚙𝚝)ℙconditional𝚘𝚛𝚒𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{P}\\\\left(\\\\verb+ori+\\\\mid\\\\verb+prompt+\\\\right).\n\n- •\n\n\nDirect Probability (DP): The likelihood that the model produces the edit target o∗superscript𝑜o^{\\*}, expressed as ℙ​(o∗∣𝚙𝚛𝚘𝚖𝚙𝚝)ℙconditionalsuperscript𝑜𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{P}\\\\left(o^{\\*}\\\\mid\\\\verb+prompt+\\\\right).\n\n\nTo further evaluate the influence of both the target edit o∗superscript𝑜o^{\\*} and the original answer 𝚘𝚛𝚒𝚘𝚛𝚒\\\\verb+ori+ on the correct answer 𝚊𝚗𝚜𝚊𝚗𝚜\\\\verb+ans+, we follow Meng et al. ( [2022a]) and define two additional comprehensive metrics to gauge the model’s overall editing effectiveness:\n\n- •\n\n\nEditing Overfit Score (EOS): This metric evaluates the performance of the edited model on complex questions where the correct answer is not o∗superscript𝑜o^{\\*}. It serves as a primary indicator of the model’s overfitting and overall performance. The score is calculated as the proportion of cases where the model overfits by favoring the edit target o∗superscript𝑜o^{\\*} over the correct answer 𝚊𝚗𝚜𝚊𝚗𝚜\\\\verb+ans+, formalized as 𝔼\\[𝕀\\[ℙ(𝚊𝚗𝚜∣𝚙𝚛𝚘𝚖𝚙𝚝)>ℙ(o∗∣𝚙𝚛𝚘𝚖𝚙𝚝)\\]\\]\\\\mathbb{E}\\\\left\\[\\\\mathbb{\\\\mathbb{I}}\\[\\\\mathbb{P}\\\\left(\\\\verb+ans+\\\\mid\\\\verb+prompt+\\\\right)>\\\\mathbb{P}\\\\left(o\\*\\\\mid\\\\verb+prompt+\\\\right)\\]\\\\right\\].\n\n- •\n\n\nAnswer Modify Score (AMS): This metric evaluates the negative interference of old knowledge on the correct answers. It is assessed by calculating the proportion of cases where the probability of the correct answer exceeds that of the original answer, defined as 𝔼​\\[𝕀​\\[ℙ​(𝚊𝚗𝚜∣𝚙𝚛𝚘𝚖𝚙𝚝)>ℙ​(𝚘𝚛𝚒∣𝚙𝚛𝚘𝚖𝚙𝚝)\\]\\]𝔼delimited-\\[\\]𝕀delimited-\\[\\]ℙconditional𝚊𝚗𝚜𝚙𝚛𝚘𝚖𝚙𝚝ℙconditional𝚘𝚛𝚒𝚙𝚛𝚘𝚖𝚙𝚝\\\\mathbb{E}\\\\left\\[\\\\mathbb{\\\\mathbb{I}}\\[\\\\mathbb{P}\\\\left(\\\\verb+ans+\\\\mid\\\\verb+prompt+\\\\right)>\\\\mathbb{P}\\\\left(\\\\verb+ori+\\\\mid\\\\verb+prompt+\\\\right)\\]\\\\right\\].\n\n\n### 3.2 Editing Overfit Phenomenon\n\n![Refer to caption]Figure 2: Performance of GPT-J edited with ROME and MEMIT on CounterfactPlus.\n\nSubsequently, we apply the ROME and MEMIT methods to GPT-J to evaluate the performance of the edited models on CounterfactPlus using the aforementioned metrics, as shown in Figure [2]Figure 2 ‣ 3.2 Editing Overfit Phenomenon ‣ 3 Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\"). In multi-hop evaluations, the edit target o∗superscript𝑜o^{\\*} for each edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}) is typically not a possible answer to the multi-hop prompt, and its output probability should therefore be negligible. For instance, “ _Steve Jobs_” would be an implausible response to “ _Which college did the founder of Microsoft attend?_” The base model’s DP score of 0.27%percent0.270.27\\\\% confirms that the unedited model is highly unlikely to output o∗superscript𝑜o^{\\*} as a response. However, after editing, both models exhibit significantly higher average probabilities of o∗superscript𝑜o^{\\*} (DP), with ROME even reaching 41.03%percent41.0341.03\\\\%. Both models also show substantially lower Editing Overfit Score (EOS) values, indicating that for many evaluation samples, the probability of generating the correct answer is lower than that of outputting o∗superscript𝑜o^{\\*}. This anomalous probability distribution substantially impacts model performance, as the inflated o∗superscript𝑜o^{\\*} prediction probability diminishes the Correct Answer Probability (CAP) and obscures the model’s actual output.\n\nFrom these observations, we define the phenomenon of Editing Overfit as follows: After an LLM has been edited based on an editing example e=(s,r,o,o∗)𝑒𝑠𝑟𝑜superscript𝑜e=(s,r,o,o^{\\*}), the edited LLM exhibits a heightened likelihood of producing the edit target o∗superscript𝑜o^{\\*} as the answer to questions that implicitly or explicitly contains s𝑠s or r𝑟r, even when the correct answer is unrelated to o∗superscript𝑜o^{\\*}.",
      "citations": [
        {
          "start_pos": 197,
          "end_pos": 215,
          "text": "Yao et al., [2023]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1956,
          "end_pos": 1977,
          "text": "Meng et al. ( [2022a]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "4 Analysis on Editing Overfit": {
      "content": "To further investigate the severity of Editing Overfit in edited LLMs, we construct EVOKE, a new benchmark designed to analyze overfitting phenomena across various tasks. We then assess the performance of different editing methods using this benchmark and examine the effectiveness of several existing mitigation strategies\nin reducing Editing Overfit.\n\n### 4.1 EVOKE Benchmark\n\nEVOKE comprises Recall Tasks and Overfit Tasks, covering six tasks in total. The Recall Tasks assess the edited model’s ability to recall new edited knowledge, including _Efficacy_ and _Paraphrase_ evaluation. The Overfit Tasks pose complex challenges that are prone to inducing overfitting in editing methods, including _Multi-hop Reasoning_, _Prefix Distraction_, _Subject Specificity_, and _Relation Specificity_. These tasks are specifically designed to evaluate the model’s capability to utilize newly integrated knowledge for more challenging scenarios, with a particular emphasis on examining the degree of Editing Overfit. Details of EVOKE construction can be found in Appendix [A]Appendix A Details on the EVOKE Benchmark ‣ Uncovering Overfitting in Large Language Model Editing\").\n\nTaking the edit “Microsoft is founded by Bill Gates →→\\\\rightarrow Steve Jobs” as an example, we introduce the recall tasks used to assess editing success rate of the edit (Meng et al., [2022a]; Yao et al., [2023]):\n\n- •\n\n\n_Efficacy_ directly validates whether the edited models can recall the new edited knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) under the editing prompt p​(s,r)𝑝𝑠𝑟p(s,r). In the context of the above example, the model would be asked: “Who is the founder of Microsoft?”\n\n- •\n\n\n_Paraphrase_ examines the model’s ability of recall the new knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) using paraphrased forms of the editing prompt p​(s,r)𝑝𝑠𝑟p(s,r). For instance, it might ask:“ Who established Microsoft?”\n\n\nThe design of overfit tasks are based on the two principles: First, the input questions explicitly or implicitly contain the information of subject s𝑠s or relation r𝑟r to induce potential overfitting responses from the model; Second, the correct answers to these questions are entirely unrelated to o∗o\\*, making it easier to determine whether the edited model exhibits overfitting. Accordingly, the overfit tasks are constructed as follows:\n\n- •\n\n\n_Multi-hop Reasoning_ evaluates the edited model’s ability to integrate the newly edited knowledge with existing knowledge to correctly answer questions spanning multiple entities or relations. For example, “Which university did the founder of Microsoft attend?” These questions typically contain implicit subject s𝑠s and relation r𝑟r information from the edit sample, but the answer is not the target o∗superscript𝑜o^{\\*}. They are well-suited for evaluating whether the edited model has overfit to the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} pattern. A model that has overfit to this pattern might incorrectly produce _‘Steve Jobs’_ as the answer to this question.\n\n- •\n\n\n_Prefix Distraction_ uses the new knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) as a perfix for unrelated questions, evaluating weather the edited model can still provide the original correct answer. For example: “Microsoft was founded by Steve Jobs. Who is the founder of Amazon?” This evaluation also assess weather the edited model has overfit to the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} pattern, providing a more explicit measure compared to multi-hop reasoning.\n\n- •\n\n\n_Subject Specificity_ presents questions with the same subject s𝑠s as the edit sample but with different relations r′superscript𝑟′r^{\\\\prime}. For example: “When was Microsoft founded?” These questions typically contain information about the subject s𝑠s, but the correct answer is not the target o∗superscript𝑜o^{\\*}, making them ideal for evaluating whether the edited model has overfit to the s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} pattern.\n\n- •\n\n\n_Relation Specificity_ includes questions with different subjects s′superscript𝑠′s^{\\\\prime} from the edit sample but the same relation r𝑟r, such as: “Who is the founder of Amazon?” These questions contain information about the relation r𝑟r, but the answer is not the target o∗superscript𝑜o^{\\*}. They are used to evaluate whether the model has overfit to the r→o∗→𝑟superscript𝑜r\\\\rightarrow o^{\\*} pattern. This task also corresponds to the locality evaluation in Counterfact(Meng et al., [2022a]).\n\n\nThe recall task is evaluated using the AMS metric. For the multi-hop reasoning task, we employ all five metrics defined in Section [3.1]Metric Definitions ‣ 3 Preliminary Experiments ‣ Uncovering Overfitting in Large Language Model Editing\") for a comprehensive analysis. In the Prefix Distraction, Subject Specificity, and Relation Specificity tasks, the correct answer is identical to the original answer, making OAP equivalent to CAP, with the EOS metric used to evaluate performance in these tasks.\n\n### 4.2 Results & Findings\n\nTo assess the extent of Editing Overfit in current editing methods, we employ FT, FT-L, MEND, ROME, and MEMIT to edit GPT-J (Wang & Komatsuzaki, [2021]) and GPT-2 XL (Radford et al., [2019]). We then evaluate the pre- and post-edit performance of these models on the EVOKE dataset (details provided in Appendix [B.1]B.1 Baseline Methods ‣ Appendix B Experimental Setup Details ‣ Uncovering Overfitting in Large Language Model Editing\") ). The results for Recall Tasks and Overfit Tasks are presented in Tables [1]Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\") and [2]Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), respectively. Based on these results, we summarize our key findings as follows:\n\nFinding 1: Current editing methods widely lead to severe overfitting. As shown in Table [1]Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), nearly all successfully edited models exhibit significantly higher direct probability (DP) scores across the four overfit tasks compared to the unedited model. Notably, the average DP for FT, ROME and MEMIT on most overfit tasks significantly surpasses the correct answer probability (CAP), with elevated EOS values indicating that this issue persists across many edited samples. Although FT-L and MEND show better overfitting metrics, their significantly lower paraphrase scores suggest that the edits were unsuccessful (as shown in Table [2]Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")), rendering their overfitting scores less meaningful. It is crucial to highlight that all editing methods exhibit a very high probability of incorrectly outputting the edit target o∗superscript𝑜o^{\\*} (high DP score) in the prefix distraction task, with EOS scores also abnormally low. This may be attributed to the fact that the Prefix Distraction task explicitly introduces distracting new knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) prepended to the input. These results provide clear evidence supporting that existing editing paradigm is prone to causing overfitting.\n\nTable 1: Experimental results for different models on the Overfit Tasks of EVOKE.\n\nEditorPrefix DistractionMulti-hop ReasoningSubject SpecificityRelation SpecificityDP↓CAP↑EOS↑DP↓OAP↓CAP↑EOS↑AMS↑DP↓CAP↑EOS↑DP↓CAP↑EOS↑GPT-2 XL5.0113.3054.580.277.874.2193.4335.640.504.9085.590.336.4279.61FT22.979.0523.404.574.107.0675.9166.912.804.2051.3111.995.0740.81FT-L12.8711.0040.091.607.136.1987.7150.970.634.4777.072.916.3170.12MEND46.571.9317.883.274.757.4283.8240.1510.374.6236.0311.995.4344.65ROME44.996.6215.2223.323.4311.7646.1175.6735.392.6021.831.016.4777.23ROME-LTI19.539.8828.1710.085.1211.0365.9470.8319.053.9230.790.616.4978.04MEMIT32.197.6320.5516.754.2811.9257.0672.6322.683.2025.980.856.3877.81MEMIT-LTI18.768.7826.028.054.9711.4072.0269.597.393.5038.210.626.2878.79GPT-J4.6017.0864.810.2712.615.2094.1630.660.636.9580.350.319.4384.28FT77.433.614.5842.518.358.9125.5573.4537.50.3861.556.463.019.74FT-L7.0517.9956.303.2810.779.4085.7749.510.936.7077.071.409.6780.24MEND36.3111.2729.403.9412.215.6784.4335.2812.096.8033.8413.338.3553.09ROME26.1312.6232.5741.033.6517.9634.9180.9254.151.806.772.518.4179.64ROME-LTI8.9315.4849.7311.126.4317.1769.8377.4310.183.5228.380.738.6881.86MEMIT18.3014.7739.3225.805.8218.4950.4975.6733.452.9017.690.959.1082.14MEMIT-LTI10.9816.4348.5616.357.1717.0161.4470.3119.964.1829.910.649.2282.84\n\nTable 2: Experimental results (AMS↑ (%)) on the Recall Tasks of EVOKE.\n\n| Editor | GPT-2 XL | GPT-J |\n| Efficacy | Paraphrase | Efficacy | Paraphrase |\n| BASE | 19.50 | 22.79 | 13.29 | 15.47 |\n| FT | 99.90 | 85.94 | 100.00 | 97.73 |\n| FT-L | 98.93 | 45.64 | 99.81 | 45.44 |\n| MEND | 92.92 | 57.47 | 96.90 | 54.17 |\n| ROME | 100.00 | 96.27 | 99.90 | 99.27 |\n| ROME-LTI | 100.00 | 92.10 | 100.00 | 96.27 |\n| MEMIT | 99.32 | 92.73 | 100.00 | 95.23 |\n| MEMIT-LTI | 100.00 | 90.16 | 100.00 | 91.03 |\n\nFinding 2: Locate-then-Edit methods exhibits more severe overfitting to the s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} pattern. As shown in Table [1]Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), ROME and MEMIT perform similarly to unedited LLMs on the Relation Specificity task across all metrics, indicating minimal overfitting to the r→o∗→𝑟superscript𝑜r\\\\rightarrow o^{\\*} pattern. However, their weaker performance across all metrics on the Subject Specificity task suggests a tendency toward overfiting to the s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} pattern. This difference may stem from their primary focus on manipulating subject representations to establish the mapping between p​(s,r)𝑝𝑠𝑟p(s,r) and the new target o∗superscript𝑜o^{\\*}. Furthermore, ROME and MEMIT significantly improve the CAP metric for the Multihop Reasoning task – indicating better recall of new answers under multi-hop questions -surpassing other methods despite a persistently high likelihood of overfitting to the Edit Target. These suggest that while locate-then-edit paradigm has limitations, it sill shows promise in enabling edited models to effectively use new knowledge for inferential tasks.\n\nFinding 3: Both Fine-tuning based and Meta-learning based methods exhibit a strong overfitting tendency to s→o∗→𝑠superscript𝑜s\\\\rightarrow o^{\\*} and r→o∗→𝑟superscript𝑜r\\\\rightarrow o^{\\*} patterns. In contrast to Locate-then-edit methods, from Table [1]Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), we observe similarly high levels of overfitting in both FT-based and MEND methods across the Subject Specificity and Relation Specificity tasks. This significant overfitting in both patterns is likely due to these methods focusing on mapping the entire input p​(s,r)𝑝𝑠𝑟p(s,r) to the target output o∗o\\* during the editing process. Notably, even MEND, which demonstrated lower performance on Paraphrase task and potential underfitting, still exhibited significant overfitting. Another potentially underfitting model, FT-L, shows a reduced overfitting tendency, likely attributable to its Norm Constraints on weight updates. Our subsequent detailed experiments (§ [5]Mitigation Technique 1: Norm Constraints ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\")) will further explore the impact of Norm Constraints on editing success and mitigating Editing Overfit.",
      "citations": [
        {
          "start_pos": 1344,
          "end_pos": 1364,
          "text": "Meng et al., [2022a]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1366,
          "end_pos": 1384,
          "text": "Yao et al., [2023]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4447,
          "end_pos": 4467,
          "text": "Meng et al., [2022a]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5129,
          "end_pos": 5155,
          "text": "Wang & Komatsuzaki, [2021]",
          "paper_id": "bib.bib21",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5171,
          "end_pos": 5193,
          "text": "Radford et al., [2019]",
          "paper_id": "bib.bib18",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "5 Analysis on Mitigation Techniques": {
      "content": "The analysis above demonstrates that the current editing paradigm generally leads to overfitting to new knowledge in edited LLMs. To further investigate how existing strategies and different task scenarios influence overfitting, we conduct additional experiments analyzing various techniques. These include Norm Constraint, Batch Editing, Data Augmentation strategies, and Multi-layer Update Distribution (Appendix [E]Appendix E Analysis on Distributing Weight Updates Across Layers ‣ Uncovering Overfitting in Large Language Model Editing\")). We primarily focus on several key metrics in the following analysis: Efficacy and paraphrase are evaluated using the AMS metric, while the remaining four overfit tasks are assessed using the EOS metric.\n\n#### Mitigation Technique 1: Norm Constraints\n\n![Refer to caption]Figure 3: Performance of FT-L with different norm constraints on EVOKE.\n\nNorm Constraints are a commonly used approach to control excessive parameter updates and reduce overfitting. As observed in our main experiments (Table [1]Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\")), fine-tuning with Norm Constraints (FT-L) shows a marked reduction in overfitting compared to direct fine-tuning (FT). In this section, we further investigate the effect of Norm Constraints on the performance of edited models using EVOKE. Following Zhu et al. ( [2020]), we apply an L∞subscript𝐿L\\_{\\\\infty} norm constraint: ‖θG−θG′‖∞≤ϵsubscriptnormsubscript𝜃𝐺subscript𝜃superscript𝐺′italic-ϵ\\\\left\\\\\\|\\\\theta\\_{G}-\\\\theta\\_{G^{\\\\prime}}\\\\right\\\\\\|\\_{\\\\infty}\\\\leq\\\\epsilon. Figure [3]Figure 3 ‣ Mitigation Technique 1: Norm Constraints ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\") illustrates the performance variation of FT-L as the strength of the norm constraint ϵitalic-ϵ\\\\epsilon is adjusted.\n\nThe results indicate that relaxing the norm constraints leads to improvements in both editing efficacy and paraphrase scores, suggesting that increasing the update intensity of the weights can enhance the success rate of the edits. However, as the constraint norm increases, the overfitting metric (EOS) scores across overfit tasks also rise. Thus, while improving the edit success rate and paraphrase score by relaxing the norm, this comes at the cost of heightened overfitting. When the paraphrase score reaches a satisfactory level, the overfitting issue becomes particularly pronounced. These findings highlight that relying solely on norm constraints as a strategy for mitigating overfitting may be insufficient.\n\n#### Mitigation Technique 2: Batch Editing\n\nIn the preceding discussion, the Editing Overfit observed in edited models is likely linked to the limited-sample nature of knowledge editing tasks. Batch editing, as a natural multi-sample approach, involves simultaneously embedding a large number of factual associations into the LLM. Could this help alleviate the overfitting issue? To explore this, we analyze the degree of overfitting in the batch editing setting and conduct experiments using the MEMIT with varying batch edits. The results of these experiments are presented in Figure [4]Figure 4 ‣ Mitigation Technique 2: Batch Editing ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\").\n\n![Refer to caption]Figure 4: Performance of MEMIT with different batch sizes on EVOKE.\n\nThe results reveal that the model’s performance in a batch editing setting shows only marginal differences compared to single editing. As the edit count increase, the performance of the edited model on paraphrase tasks and most overfit tasks exhibits a slight downward trend, while still demonstrating significant overfitting issues. The reason might be that, although batch editing introduce numerous new facts and increases the number of samples, each piece of knowledge remains independent, resulting in few effective samples per individual fact, thereby continuing to suffer from overfitting.\n\n#### Mitigation Technique 3: Data Augmentation\n\nData augmentation is a widely used strategy to combat overfitting, particularly in scenarios with limited training samples. Following (Wei et al., [2024]; Gangadhar & Stratos, [2024b])), we focus on two data augmentation strategies: _Paraphrase Augmentation_ which generates alternative formulations of the same factual statement, and _Specificity Augmentation_, which introduces new samples that retain the subject but alter the relations. For instance, given the new knowledge “Microsoft is founded by Bill Gates.” Paraphrase Augmentation might yield “Microsoft was established by Bill Gates,” while Specificity Augmentation would introduce “Microsoft is headquartered in Redmond.” Further details are provided in Appendix [B.3]B.3 Details on Data Augmentation Experiment ‣ Appendix B Experimental Setup Details ‣ Uncovering Overfitting in Large Language Model Editing\").\n\n![Refer to caption]Figure 5: Performance of MEMIT with different data augmentation strategy on EVOKE.\n\nFrom Figure [5]Figure 5 ‣ Mitigation Technique 3: Data Augmentation ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\"), we observe that MEMIT w/ Paraphrase performs worse than MEMIT across all tasks except for the Paraphrase task, still exhibiting overfitting issues. We attribute this to the fact that, after paraphrase augmentation, the method still tends to associate paraphrased versions of p​(s,r)𝑝𝑠𝑟p(s,r) directly with o∗superscript𝑜o^{\\*}, which may inadvertently encourage the model to learn “output o∗superscript𝑜o^{\\*} regardless of sentence phrasing when encountering inputs s𝑠s and r𝑟r,” contrary to its intended purpose. In contrast, MEMIT w/ Specificity outperforms MEMIT on all overfit tasks, likely because Specificity Augmentation introduces more subject-related patterns, preventing the model from learning only the p​(s,r)→o∗→𝑝𝑠𝑟superscript𝑜p(s,r)\\\\rightarrow o^{\\*} pattern.",
      "citations": [
        {
          "start_pos": 1416,
          "end_pos": 1435,
          "text": "Zhu et al. ( [2020]",
          "paper_id": "bib.bib29",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4243,
          "end_pos": 4261,
          "text": "Wei et al., [2024]",
          "paper_id": "bib.bib22",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "6 Proposed Mitigation Strategy: Learn to Inference": {
      "content": "The preceding analysis suggests that, with the limited edited samples in knowledge editing tasks, the prevailing editing paradigm of “Learning the Correspondence” between input p​(s,r)𝑝𝑠𝑟p(s,r) and output o∗superscript𝑜o^{\\*} may cause edited LLMs to rely on input-output mappings during inference, rather than recalling and applying new knowledge in a manner similar to their innate mechanism. Therefore, we propose that edited LLMs should ideally access and apply new knowledge during inference in a way consistent with their natural inference process. To address this, inspired by the knowledge recall mechanism of LLMs (Geva et al., [2023]) and the principles of In-Context Learning (Brown et al., [2020]), we propose a plug-and-play strategy called Learn To Inference (LTI), as illustrated in Figure [6]Figure 6 ‣ 6.2 Multi-stage Inference Constraints ‣ 6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\"). LTI introduces a Multi-stage Inference Constraints module that imposes constraints on critical stages of knowledge editing process, encouraging the edited model to recall newly edited factual associations in a manner similar to how unedited LLMs utilize new knowledge through in-context learning.\n\n### 6.1 Reasoning Mechanisms in LLMs: Background and Rationale\n\nRecent research on LLM interpretability (Meng et al., [2022a]; Geva et al., [2023]) has revealed a two-step process for knowledge recall during inference. (1) In the shallow layers, knowledge related to the subject is aggregated to the last token of the subject. (2) In the deeper layers, the subject’s representation is extracted to the final token position of the prompt to predict the output.\n\nOur objective is for edited models to follow this same two-step process when recalling newly edited knowledge. To achieve this, we introduce multi-stage representations constraints during the editing process, ensuring that the inference process of the edited model aligns with that of an unedited model using the new knowledge as context. This approach leverages LLMs’ inherent in-context learning abilities, as providing new knowledge in context typically enables unedited models to adjust their outputs effectively (Zheng et al., [2023]).\n\n### 6.2 Multi-stage Inference Constraints\n\nWe propose a Multi-stage Inference Constraints module consisting of three components: the Subject Representation Constraint, the Output Distribution Constraint, and the New Knowledge Constraint. These constraints collectively ensure the integration of new knowledge while aligning the inference consistency between the edited model and context-guided unedited model.\n\nAs a plug-and-play framework, we use ROME to illustrate multi-stage inference constraint module. The ROME editing process involves calculating the optimal recall vector 𝐯∗subscript𝐯\\\\mathbf{v}\\_{\\*} and the subject representation 𝐤∗subscript𝐤\\\\mathbf{k}\\_{\\*}, then updating the model’s parameters via a rank-one update:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | 𝐖^=𝐖+(𝐯∗−𝐖𝐤∗)​(𝐂−1​𝐤∗)T(𝐂−1​𝐤∗)T​𝐤∗.^𝐖𝐖subscript𝐯subscript𝐖𝐤superscriptsuperscript𝐂1subscript𝐤Tsuperscriptsuperscript𝐂1subscript𝐤Tsubscript𝐤\\\\mathbf{\\\\hat{W}}=\\\\mathbf{W}+\\\\frac{(\\\\mathbf{v}\\_{\\*}-\\\\mathbf{W}\\\\mathbf{k}\\_{\\*})(\\\\mathbf{C}^{-1}\\\\mathbf{k}\\_{\\*})^{\\\\mathrm{T}}}{(\\\\mathbf{C}^{-1}\\\\mathbf{k}\\_{\\*})^{\\\\mathrm{T}}\\\\mathbf{k}\\_{\\*}}. |  | (1) |\n\n![Refer to caption]Figure 6: The framework of Multi-Stage Inference Constraints.\n\nDetails on 𝐤∗subscript𝐤\\\\mathbf{k}\\_{\\*} computation can be found in Appendix [D]Appendix D Rank-One Model Editing ‣ Uncovering Overfitting in Large Language Model Editing\"). We now explain how our strategy integrates with the computation of 𝐯∗subscript𝐯\\\\mathbf{v}\\_{\\*}.\n\nSpecifically, we prepend the new edit knowledge (s,r,o∗)𝑠𝑟superscript𝑜(s,r,o^{\\*}) as a context prompt to the original query p​(s,r)𝑝𝑠𝑟p(s,r) and input it into unedited model, denoted as 𝒢​((s,r,o∗)⊕p​(s,r))𝒢direct-sum𝑠𝑟superscript𝑜𝑝𝑠𝑟\\\\mathcal{G}((s,r,o^{\\*})\\\\oplus p(s,r)). Meanwhile, 𝒢​’​(p​(s,r))𝒢’𝑝𝑠𝑟\\\\mathcal{G}’(p(s,r)) represents the edited model reasoning over p​(s,r)𝑝𝑠𝑟p(s,r). We target specific layer l𝑙l for the edit. The multi-stage constraints are formulated as follows:\n\nSubject Representation Constraint. Since LLMs extract representation of subject in the shallow MLP layer, we first apply constraints to align the last token representations of subject s𝑠s in the m𝑚m-th layer (m>l𝑚𝑙m>l) for both 𝒢′​(p​(s,r))superscript𝒢′𝑝𝑠𝑟\\\\mathcal{G}^{\\\\prime}(p(s,r)) and 𝒢​((s,r,o∗)⊕p​(s,r))𝒢direct-sum𝑠𝑟superscript𝑜𝑝𝑠𝑟\\\\mathcal{G}((s,r,o^{\\*})\\\\oplus p(s,r)), ensuring that edited subject representations to function effectively in subsequent inference steps. This is achieved by matching these two representations using KL divergence, formalized as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒS​R​C=KL(ℙ𝒢′​(𝐯sl+=𝐡)\\[𝐯sm∣p(s,r)\\]∥ℙ𝒢\\[𝐯sm∣(s,r,o∗)⊕p(s,r)\\]),\\\\mathcal{L}\\_{SRC}=\\\\operatorname{\\\\mathrm{KL}}\\\\left(\\\\mathbb{P}\\_{\\\\mathcal{G}^{\\\\prime}(\\\\mathbf{v}\\_{s}^{l}+=\\\\mathbf{h})}\\\\left\\[\\\\mathbf{v}\\_{s}^{m}\\\\mid p(s,r)\\\\textbf{}\\\\right\\]\\\\\\|\\\\mathbb{P}\\_{\\\\mathcal{G}}\\\\left\\[\\\\mathbf{v}\\_{s}^{m}\\\\mid(s,r,o^{\\*})\\\\oplus p(s,r)\\\\right\\]\\\\right), |  | (2) |\n\nwhere 𝐡𝐡\\\\mathbf{h} is a learnable parameter vector to modify the original value vector 𝐯slsuperscriptsubscript𝐯𝑠𝑙\\\\mathbf{v}\\_{s}^{l}, resulting in the optimal vector 𝐯∗=𝐯sl+𝐡subscript𝐯superscriptsubscript𝐯𝑠𝑙𝐡\\\\mathbf{v}\\_{\\*}=\\\\mathbf{v}\\_{s}^{l}+\\\\mathbf{h}.\n\nOutput Distribution Constraint. Given that the final token of the prompt in deeper layers is critical for predicting the output, we impose a regularization constraint on the output distributions of 𝒢′​(p​(s,r))superscript𝒢′𝑝𝑠𝑟\\\\mathcal{G}^{\\\\prime}(p(s,r)) and 𝒢​((s,r,o∗)⊕p​(s,r))𝒢direct-sum𝑠𝑟superscript𝑜𝑝𝑠𝑟\\\\mathcal{G}((s,r,o^{\\*})\\\\oplus p(s,r)). This ensures that the output distribution of the edited model remains consistent with the output distribution generated by the normal inference process of the unedited model.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒO​D​C=KL(ℙ𝒢′​(𝐯sl+=𝐡)\\[y∣p(s,r)\\]∥ℙ𝒢\\[y∣(s,r,o∗)⊕p(s,r)\\]).\\\\mathcal{L}\\_{ODC}=\\\\operatorname{\\\\mathrm{KL}}\\\\left(\\\\mathbb{P}\\_{\\\\mathcal{G}^{\\\\prime}(\\\\mathbf{v}\\_{s}^{l}+=\\\\mathbf{h})}\\\\left\\[y\\\\mid p(s,r)\\\\textbf{}\\\\right\\]\\\\\\|\\\\mathbb{P}\\_{\\\\mathcal{G}}\\\\left\\[y\\\\mid(s,r,o^{\\*})\\\\oplus p(s,r)\\\\right\\]\\\\right). |  | (3) |\n\nThis regularization serves as a global constraint, ensuring alignment in the model’s overall behavior.\n\nNew Knowledge Constraint. To enable the LLM accurately predict the target object o∗superscript𝑜o^{\\*} for each edit sample (s,r,o,o∗)𝑠𝑟𝑜superscript𝑜(s,r,o,o^{\\*}), we also define a new knowledge constraint objective:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ℒN=−subscriptℒ𝑁\\\\displaystyle\\\\mathcal{L}\\_{N}=- | 1N​∑j=1Nlog⁡ℙ𝒢′​(𝐯sl+=𝐡)​\\[o∗∣xj⊕p​(s,r)\\],1𝑁subscriptsuperscript𝑁𝑗1subscriptℙsuperscript𝒢′limit-fromsuperscriptsubscript𝐯𝑠𝑙𝐡delimited-\\[\\]conditionalsuperscript𝑜direct-sumsubscript𝑥𝑗𝑝𝑠𝑟\\\\displaystyle\\\\frac{1}{N}\\\\sum^{N}\\_{j=1}\\\\log\\\\mathbb{P}\\_{\\\\mathcal{G^{\\\\prime}}(\\\\mathbf{v}\\_{s}^{l}+=\\\\mathbf{h})}\\[o^{\\*}\\\\mid x\\_{j}\\\\oplus p(s,r)\\], |  | (4) |\n\nwhere xjsubscript𝑥𝑗x\\_{j} is the random prefix generated by the LLM to foster optimization robustness.\n\nUltimately, the parameter 𝐡𝐡\\\\mathbf{h} is optimized by minimizing the following objective function:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ℒ=λ​ℒS​R​C+β​ℒO​D​C+α​ℒN,ℒ𝜆subscriptℒ𝑆𝑅𝐶𝛽subscriptℒ𝑂𝐷𝐶𝛼subscriptℒ𝑁\\\\displaystyle\\\\mathcal{L}=\\\\lambda\\\\mathcal{L}\\_{SRC}+\\\\beta\\\\mathcal{L}\\_{ODC}+\\\\alpha\\\\mathcal{L}\\_{N}, |  | (5) |\n\nwhere λ𝜆\\\\lambda, β𝛽\\\\beta, α𝛼\\\\alpha represent the strength coefficients associated with different objective functions. Notably, these constraint functions can be jointly optimized with the objective functions of other editing methods, such as FT and MEND, making LTI a highly extensible plug-and-play strategy.\n\n### 6.3 Experiments\n\nIn this section, we evaluate our mitigation strategy by integrating LTI into the MEMIT and ROME methods and applying them to the EVOKE. Building on the experiments from Section [4]Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), we perform further evaluations to answer the following key questions:\n\n#### How Effective is LTI in Mitigating the Editing Overfit Problem?\n\nThe performance of all editors on EVOKE is presented in Tables [1]Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\") and [2]Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), where ROME-LTI and MEMIT-LTI represent ROME and MEMEIT method integrated with with LTI strategy, respectively.\n\n_(i) Performance on overfit tasks._ From Table [1]Table 1 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), we observe that both ROME-LTI and ROME-LTI show significant improvement in overfitting metrics (DP and EOS) compared to ROME and MEMIT, indicating effective mitigation of editing overfit. Additionally, ROME-LTI and MEMIT-LTI demonstrate improvements in AP and AMS metrics across most overfit tasks. These findings suggest that overfitting suppresses the model’s ability to output correct answers in complex tasks, and that alleviating editing overfit can improves the model’s performance on complex tasks.\n\n_(ii) Performance on recall tasks._ As shown in Table [2]Table 2 ‣ 4.2 Results & Findings ‣ 4 Analysis on Editing Overfit ‣ Uncovering Overfitting in Large Language Model Editing\"), ROME-LTI and MEMIT-LTI achieve results consistent with the original ROME and MEMIT on the Efficacy task, indicating that the edit success rate is minimally affected. However, the AMS metric for the Paraphrase task shows a slight decrease, which might be attributed to the LTI strategy suppressing the strong association between p​(s,r)𝑝𝑠𝑟p(s,r) and o∗superscript𝑜o^{\\*}. Nevertheless, this results in an overall improvement in performance across several overfit tasks, and we consider this slight reduction acceptable.\n\n_(iii) Comparison with data augmentation strategies._ As discussed in Section [5]Mitigation Technique 3: Data Augmentation ‣ 5 Analysis on Mitigation Techniques ‣ Uncovering Overfitting in Large Language Model Editing\"), Specificity Augmentation is an effective strategy for mitigating editing overfit. Therefore, we compare our approach to this technique. As shown in Figure [7]Figure 7 ‣ How do Constraints at Different Stages of LTI Influence Overfitting? ‣ 6.3 Experiments ‣ 6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\"), ROME-LTI outperforms ROME with data augmentation (ROME w/ DA) in terms of the EOS metric across all overfit tasks. Additionally, unlike data augmentation methods, our LTI does not require the creation of additional samples, significantly improving editing efficiency and flexibility.\n\n#### How do Constraints at Different Stages of LTI Influence Overfitting?\n\nThe core of LTI lies in its Multi-stage Inference Constraints module, so we analyze how constraints applied at different stages influence the performance of editing method. Figure [7]Figure 7 ‣ How do Constraints at Different Stages of LTI Influence Overfitting? ‣ 6.3 Experiments ‣ 6 Proposed Mitigation Strategy: Learn to Inference ‣ Uncovering Overfitting in Large Language Model Editing\") compares ROME-LTI with variants where the Subject Representation Constraint is removed (ROME-LTI w/o SRC) and where the Output Distribution Constraint is removed (ROME-LTI w/o ODC).\n\nROME-LTI significantly outperformed the variant models across multiple metrics, particularly in\n\n![Refer to caption]Figure 7: Performance comparison of different variant models on EVOKE.\n\noverfit tasks like multi-hop reasoning and prefix distraction, and notably surpassed the original ROME method. Interestingly, ROME-LTI w/o ODC performs similarly to the original ROME, while ROME-LTI w/o SRC shows improvement but remains inferior to the ROME-LTI. This phenomenon may be attributed to the fact that ODC constrains the overall input-output behavior of the model. Without ODC, even though SRC is retained, the output layer loss may drive the model to prioritize maximizing the output probability of o∗superscript𝑜o^{\\*}, potentially diminishing the impact of the SRC. These findings suggest that Subject Representation Constraint is most effective when coupled with Out Distribution Constraint, yielding significant performance gains.",
      "citations": [
        {
          "start_pos": 624,
          "end_pos": 643,
          "text": "Geva et al., [2023]",
          "paper_id": "bib.bib8",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 688,
          "end_pos": 708,
          "text": "Brown et al., [2020]",
          "paper_id": "bib.bib1",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": []
        },
        {
          "start_pos": 1373,
          "end_pos": 1393,
          "text": "Meng et al., [2022a]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1395,
          "end_pos": 1414,
          "text": "Geva et al., [2023]",
          "paper_id": "bib.bib8",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2247,
          "end_pos": 2267,
          "text": "Zheng et al., [2023]",
          "paper_id": "bib.bib27",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "7 Discussion & Conclusion": {
      "content": "This study identifies and investigates the phenomenon of Editing Overfit in the knowledge editing of LLMs. We propose that Editing Overfit likely originates from the common paradigm of existing editing methods, which focus on learning subject-relation-object correspondences in factual statements with limited edit samples, leading to overfitting to these patterns. To further explore the overfitting issues in existing editing methods, we construct a new EVOKE benchmark along with dedicated overfitting evaluation metrics. Extensive experiments demonstrate that that current editing methods commonly result in significant Editing Overfit, and that general overfitting mitigation strategies show limited effectiveness in addressing this problem. To tackle this challenge, we design a plug-and-play strategy called Learn to Inference, implemented through a Multi-stage Inference Constraint. Experimental results show its effectiveness in mitigating overfitting.\n\nOur findings reveal limitations in current knowledge editing work and suggest the need for more sophisticated approaches to knowledge integration. While we implemented Learn to Inference by constraining intermediate reasoning representations, future in-depth studies are needed to explore how models can more effectively recall new knowledge in a manner akin to native knowledge retrieval, which will provide insights into better controlling LLMs.",
      "citations": []
    }
  },
  "references": {
    "data": {
      "bib.bib1": {
        "id": "bib.bib1",
        "citation": "Brown et al. (2020)",
        "authors": "",
        "year": "",
        "title": "Language models are few-shot learners.",
        "venue": "Advances in Neural Information Processing Systems",
        "pages": "",
        "url": "",
        "arxiv_id": "2005.14165",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Recent years have featured a trend towards pre-trained language representations in NLP systems, applied in increasingly flexible and task-agnostic ways for downstream transfer. First, single-layer representations were learned using word vectors \\[ [82]), [102])\\] and fed to task-specific architectures, then RNNs with multiple layers of representations and contextual state were used to form stronger representations \\[ [24]), [81]), [100])\\] (though still applied to task-specific architectures), and more recently pre-trained recurrent or transformer language models \\[ [134])\\] have been directly fine-tuned, entirely removing the need for task-specific architectures \\[ [112]), [20]), [43])\\].\n\n![Refer to caption]Figure 1.1: Language model meta-learning. During unsupervised pre-training, a language model develops a broad set of skills and pattern recognition abilities. It then uses these abilities at inference time to rapidly adapt to or recognize the desired task. We use the term “in-context learning” to describe the inner loop of this process, which occurs within the forward-pass upon each sequence. The sequences in this diagram are not intended to be representative of the data a model would see during pre-training, but are intended to show that there are sometimes repeated sub-tasks embedded within a single sequence.\n\nThis last paradigm has led to substantial progress on many challenging NLP tasks such as reading comprehension, question answering, textual entailment, and many others, and has continued to advance based on new architectures and algorithms \\[ [116]), [74]), [139]), [62])\\]. However, a major limitation to this approach is that while the architecture is task-agnostic, there is still a need for task-specific datasets and task-specific fine-tuning: to achieve strong performance on a desired task typically requires fine-tuning on a dataset of thousands to hundreds of thousands of examples specific to that task. Removing this limitation would be desirable, for several reasons.\n\nFirst, from a practical perspective, the need for a large dataset of labeled examples for every new task limits the applicability of language models. There exists a very wide range of possible useful language tasks, encompassing anything from correcting grammar, to generating examples of an abstract concept, to critiquing a short story. For many of these tasks it is difficult to collect a large supervised training dataset, especially when the process must be repeated for every new task.\n\nSecond, the potential to exploit spurious correlations in training data fundamentally grows with the expressiveness of the model and the narrowness of the training distribution. This can create problems for the pre-training plus fine-tuning paradigm, where models are designed to be large to absorb information during pre-training, but are then fine-tuned on very narrow task distributions. For instance \\[ [41])\\] observe that larger models do not necessarily generalize better out-of-distribution. There is evidence that suggests that the generalization achieved under this paradigm can be poor because the model is overly specific to the training distribution and does not generalize well outside it \\[ [138]), [88])\\]. Thus, the performance of fine-tuned models on specific benchmarks, even when it is nominally at human-level, may exaggerate actual performance on the underlying task \\[ [36]), [91])\\].\n\nThird, humans do not require large supervised datasets to learn most language tasks – a brief directive in natural language (e.g. “please tell me if this sentence describes something happy or something sad”) or at most a tiny number of demonstrations (e.g. “here are two examples of people acting brave; please give a third example of bravery”) is often sufficient to enable a human to perform a new task to at least a reasonable degree of competence. Aside from pointing to a conceptual limitation in our current NLP techniques, this adaptability has practical advantages – it allows humans to seamlessly mix together or switch between many tasks and skills, for example performing addition during a lengthy dialogue. To be broadly useful, we would someday like our NLP systems to have this same fluidity and generality.\n\nOne potential route towards addressing these issues is meta-learning111In the context of language models this has sometimes been called “zero-shot transfer”, but this term is potentially ambiguous: the method is “zero-shot” in the sense that no gradient updates are performed, but it often involves providing inference-time demonstrations to the model, so is not truly learning from zero examples. To avoid this confusion, we use the term “meta-learning” to capture the inner-loop / outer-loop structure of the general method, and the term “in context-learning” to refer to the inner loop of meta-learning. We further specialize the description to “zero-shot”, “one-shot”, or “few-shot” depending on how many demonstrations are provided at inference time. These terms are intended to remain agnostic on the question of whether the model learns new tasks from scratch at inference time or simply recognizes patterns seen during training – this is an important issue which we discuss later in the paper, but “meta-learning” is intended to encompass both possibilities, and simply describes the inner-outer loop structure. – which in the context of language models means the model develops a broad set of skills and pattern recognition abilities at training time, and then uses those abilities at inference time to rapidly adapt to or recognize the desired task (illustrated in Figure [1.1]Figure 1.1 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\")). Recent work \\[ [117])\\] attempts to do this via what we call “in-context learning”, using the text input of a pretrained language model as a form of task specification: the model is conditioned on a natural language instruction and/or a few demonstrations of the task and is then expected to complete further instances of the task simply by predicting what comes next.\n\nWhile it has shown some initial promise, this approach still achieves results far inferior to fine-tuning – for example \\[ [117])\\] achieves only 4% on Natural Questions, and even its 55 F1 CoQa result is now more than 35 points behind the state of the art. Meta-learning clearly requires substantial improvement in order to be viable as a practical method of solving language tasks.\n\nAnother recent trend in language modeling may offer a way forward. In recent years the capacity of transformer language models has increased substantially, from 100 million parameters \\[ [112])\\], to 300 million parameters \\[ [20])\\], to 1.5 billion parameters \\[ [117])\\], to 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and finally 17 billion parameters \\[ [132])\\]. Each increase has brought improvements in text synthesis and/or downstream NLP tasks, and there is evidence suggesting that log loss, which correlates well with many downstream tasks, follows a smooth trend of improvement with scale \\[ [57])\\]. Since in-context learning involves absorbing many skills and tasks within the parameters of the model, it is plausible that in-context learning abilities might show similarly strong gains with scale.\n\n![Refer to caption]Figure 1.2: Larger models make increasingly efficient use of in-context information.   We show in-context learning performance on a simple task requiring the model to remove random symbols from a word, both with and without a natural language task description (see Sec. [3.9.2]Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). The steeper “in-context learning curves” for large models demonstrate improved ability to learn a task from contextual information. We see qualitatively similar behavior across a wide range of tasks.![Refer to caption]Figure 1.3: Aggregate performance for all 42 accuracy-denominated benchmarks   While zero-shot performance improves steadily with model size, few-shot performance increases more rapidly, demonstrating that larger models are more proficient at in-context learning. See Figure [3.8]Figure 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\") for a more detailed analysis on SuperGLUE, a standard NLP benchmark suite.\n\nIn this paper, we test this hypothesis by training a 175 billion parameter autoregressive language model, which we call GPT-3, and measuring its in-context learning abilities. Specifically, we evaluate GPT-3 on over two dozen NLP datasets, as well as several novel tasks designed to test rapid adaptation to tasks unlikely to be directly contained in the training set. For each task, we evaluate GPT-3 under 3 conditions: (a) “few-shot learning”, or in-context learning where we allow as many demonstrations as will fit into the model’s context window (typically 10 to 100), (b) “one-shot learning”, where we allow only one demonstration, and (c) “zero-shot” learning, where no demonstrations are allowed and only an instruction in natural language is given to the model. GPT-3 could also in principle be evaluated in the traditional fine-tuning setting, but we leave this to future work.\n\nFigure [1.2]Figure 1.2 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\") illustrates the conditions we study, and shows few-shot learning of a simple task requiring the model to remove extraneous symbols from a word. Model performance improves with the addition of a natural language task description, and with the number of examples in the model’s context, K𝐾K. Few-shot learning also improves dramatically with model size. Though the results in this case are particularly striking, the general trends with both model size and number of examples in-context hold for most tasks we study. We emphasize that these “learning” curves involve no gradient updates or fine-tuning, just increasing numbers of demonstrations given as conditioning.\n\nBroadly, on NLP tasks GPT-3 achieves promising results in the zero-shot and one-shot settings, and in the the few-shot setting is sometimes competitive with or even occasionally surpasses state-of-the-art (despite state-of-the-art being held by fine-tuned models). For example, GPT-3 achieves 81.5 F1 on CoQA in the zero-shot setting, 84.0 F1 on CoQA in the one-shot setting, 85.0 F1 in the few-shot setting. Similarly, GPT-3 achieves 64.3% accuracy on TriviaQA in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting, the last of which is state-of-the-art relative to fine-tuned models operating in the same closed-book setting.\n\nGPT-3 also displays one-shot and few-shot proficiency at tasks designed to test rapid adaption or on-the-fly reasoning, which include unscrambling words, performing arithmetic, and using novel words in a sentence after seeing them defined only once. We also show that in the few-shot setting, GPT-3 can generate synthetic news articles which human evaluators have difficulty distinguishing from human-generated articles.\n\nAt the same time, we also find some tasks on which few-shot performance struggles, even at the scale of GPT-3. This includes natural language inference tasks like the ANLI dataset, and some reading comprehension datasets like RACE or QuAC. By presenting a broad characterization of GPT-3’s strengths and weaknesses, including these limitations, we hope to stimulate study of few-shot learning in language models and draw attention to where progress is most needed.\n\nA heuristic sense of the overall results can be seen in Figure [1.3]Figure 1.3 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\"), which aggregates the various tasks (though it should not be seen as a rigorous or meaningful benchmark in itself).\n\nWe also undertake a systematic study of “data contamination” – a growing problem when training high capacity models on datasets such as Common Crawl, which can potentially include content from test datasets simply because such content often exists on the web. In this paper we develop systematic tools to measure data contamination and quantify its distorting effects. Although we find that data contamination has a minimal effect on GPT-3’s performance on most datasets, we do identify a few datasets where it could be inflating results, and we either do not report results on these datasets or we note them with an asterisk, depending on the severity.\n\nIn addition to all the above, we also train a series of smaller models (ranging from 125 million parameters to 13 billion parameters) in order to compare their performance to GPT-3 in the zero, one and few-shot settings. Broadly, for most tasks we find relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap between zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models are more proficient meta-learners.\n\nFinally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and broader societal impacts, and attempt a preliminary analysis of GPT-3’s characteristics in this regard.\n\nThe remainder of this paper is organized as follows. In Section [2]Approach ‣ Language Models are Few-Shot Learners\"), we describe our approach and methods for training GPT-3 and evaluating it. Section [3]Results ‣ Language Models are Few-Shot Learners\") presents results on the full range of tasks in the zero-, one- and few-shot settings. Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") addresses questions of data contamination (train-test overlap). Section [5]Limitations ‣ Language Models are Few-Shot Learners\") discusses limitations of GPT-3. Section [6]Broader Impacts ‣ Language Models are Few-Shot Learners\") discusses broader impacts. Section [7]Related Work ‣ Language Models are Few-Shot Learners\") reviews related work and Section [8]Conclusion ‣ Language Models are Few-Shot Learners\") concludes.",
            "citations": null
          },
          "2 Approach": {
            "content": "![Refer to caption]Figure 2.1: Zero-shot, one-shot and few-shot, contrasted with traditional fine-tuning. The panels above show four methods for performing a task with a language model – fine-tuning is the traditional method, whereas zero-, one-, and few-shot, which we study in this work, require the model to perform the task with only forward passes at test time. We typically present the model with a few dozen examples in the few shot setting. Exact phrasings for all task descriptions, examples and prompts can be found in Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\").\n\nOur basic pre-training approach, including model, data, and training, is similar to the process described in \\[ [117])\\], with relatively straightforward scaling up of the model size, dataset size and diversity, and length of training. Our use of in-context learning is also similar to \\[ [117])\\], but in this work we systematically explore different settings for learning within the context. Therefore, we start this section by explicitly defining and contrasting the different settings that we will be evaluating GPT-3 on or could in principle evaluate GPT-3 on. These settings can be seen as lying on a spectrum of how much task-specific data they tend to rely on. Specifically, we can identify at least four points on this spectrum (see Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") for an illustration):\n\n- •\n\n\nFine-Tuning (FT) has been the most common approach in recent years, and involves updating the weights of a pre-trained model by training on a supervised dataset specific to the desired task. Typically thousands to hundreds of thousands of labeled examples are used. The main advantage of fine-tuning is strong performance on many benchmarks. The main disadvantages are the need for a new large dataset for every task, the potential for poor generalization out-of-distribution \\[ [88])\\], and the potential to exploit spurious features of the training data \\[ [36]), [91])\\], potentially resulting in an unfair comparison with human performance. In this work we do not fine-tune GPT-3 because our focus is on task-agnostic performance, but GPT-3 can be fine-tuned in principle and this is a promising direction for future work.\n\n- •\n\n\nFew-Shot (FS) is the term we will use in this work to refer to the setting where the model is given a few demonstrations of the task at inference time as conditioning \\[ [117])\\], but no weight updates are allowed. As shown in Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\"), for a typical dataset an example has a context and a desired completion (for example an English sentence and the French translation), and few-shot works by giving K𝐾K examples of context and completion, and then one final example of context, with the model expected to provide the completion. We typically set K𝐾K in the range of 10 to 100 as this is how many examples can fit in the model’s context window (nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048). The main advantages of few-shot are a major reduction in the need for task-specific data and reduced potential to learn an overly narrow distribution from a large but narrow fine-tuning dataset. The main disadvantage is that results from this method have so far been much worse than state-of-the-art fine-tuned models. Also, a small amount of task specific data is still required. As indicated by the name, few-shot learning as described here for language models is related to few-shot learning as used in other contexts in ML \\[ [45]), [133])\\] – both involve learning based on a broad distribution of tasks (in this case implicit in the pre-training data) and then rapidly adapting to a new task.\n\n- •\n\n\nOne-Shot (1S) is the same as few-shot except that only one demonstration is allowed, in addition to a natural language description of the task, as shown in Figure 1. The reason to distinguish one-shot from few-shot and zero-shot (below) is that it most closely matches the way in which some tasks are communicated to humans. For example, when asking humans to generate a dataset on a human worker service (for example Mechanical Turk), it is common to give one demonstration of the task. By contrast it is sometimes difficult to communicate the content or format of a task if no examples are given.\n\n- •\n\n\nZero-Shot (0S) is the same as one-shot except that no demonstrations are allowed, and the model is only given a natural language instruction describing the task. This method provides maximum convenience, potential for robustness, and avoidance of spurious correlations (unless they occur very broadly across the large corpus of pre-training data), but is also the most challenging setting. In some cases it may even be difficult for humans to understand the format of the task without prior examples, so this setting is in some cases “unfairly hard”. For example, if someone is asked to “make a table of world records for the 200m dash”, this request can be ambiguous, as it may not be clear exactly what format the table should have or what should be included (and even with careful clarification, understanding precisely what is desired can be difficult). Nevertheless, for at least some settings zero-shot is closest to how humans perform tasks – for example, in the translation example in Figure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\"), a human would likely know what to do from just the text instruction.\n\n\nFigure [2.1]Figure 2.1 ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the four methods using the example of translating English to French. In this paper we focus on zero-shot, one-shot and few-shot, with the aim of comparing them not as competing alternatives, but as different problem settings which offer a varying trade-off between performance on specific benchmarks and sample efficiency. We especially highlight the few-shot results as many of them are only slightly behind state-of-the-art fine-tuned models. Ultimately, however, one-shot, or even sometimes zero-shot, seem like the fairest comparisons to human performance, and are important targets for future work.\n\nSections [2.1]Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\")- [2.3]Training Process ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") below give details on our models, training data, and training process respectively.\nSection [2.4]Evaluation ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") discusses the details of how we do few-shot, one-shot, and zero-shot evaluations.\n\n### 2.1 Model and Architectures\n\nWe use the same model and architecture as GPT-2 \\[ [117])\\], including the modified initialization, pre-normalization, and reversible tokenization described therein, with the exception that we use alternating dense and locally banded sparse attention patterns in the layers of the transformer, similar to the Sparse Transformer \\[ [15])\\]. To study the dependence of ML performance on model size, we train 8 different sizes of model, ranging over three orders of magnitude from 125 million parameters to 175 billion parameters, with the last being the model we call GPT-3. Previous work \\[ [57])\\] suggests that with enough training data, scaling of validation loss should be approximately a smooth power law as a function of size; training models of many different sizes allows us to test this hypothesis both for validation loss and for downstream language tasks.\n\n| Model Name | nparamssubscript𝑛paramsn\\_{\\\\mathrm{params}} | nlayerssubscript𝑛layersn\\_{\\\\mathrm{layers}} | dmodelsubscript𝑑modeld\\_{\\\\mathrm{model}} | nheadssubscript𝑛headsn\\_{\\\\mathrm{heads}} | dheadsubscript𝑑headd\\_{\\\\mathrm{head}} | Batch Size | Learning Rate |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| GPT-3 Small | 125M | 12 | 768 | 12 | 64 | 0.5M | 6.0×10−46.0superscript1046.0\\\\times 10^{-4} |\n| GPT-3 Medium | 350M | 24 | 1024 | 16 | 64 | 0.5M | 3.0×10−43.0superscript1043.0\\\\times 10^{-4} |\n| GPT-3 Large | 760M | 24 | 1536 | 16 | 96 | 0.5M | 2.5×10−42.5superscript1042.5\\\\times 10^{-4} |\n| GPT-3 XL | 1.3B | 24 | 2048 | 24 | 128 | 1M | 2.0×10−42.0superscript1042.0\\\\times 10^{-4} |\n| GPT-3 2.7B | 2.7B | 32 | 2560 | 32 | 80 | 1M | 1.6×10−41.6superscript1041.6\\\\times 10^{-4} |\n| GPT-3 6.7B | 6.7B | 32 | 4096 | 32 | 128 | 2M | 1.2×10−41.2superscript1041.2\\\\times 10^{-4} |\n| GPT-3 13B | 13.0B | 40 | 5140 | 40 | 128 | 2M | 1.0×10−41.0superscript1041.0\\\\times 10^{-4} |\n| GPT-3 175B or “GPT-3” | 175.0B | 96 | 12288 | 96 | 128 | 3.2M | 0.6×10−40.6superscript1040.6\\\\times 10^{-4} |\n\nTable 2.1: Sizes, architectures, and learning hyper-parameters (batch size in tokens and learning rate) of the models which we trained. All models were trained for a total of 300 billion tokens.\n\nTable [2.1]Table 2.1 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the sizes and architectures of our 8 models. Here nparamssubscript𝑛paramsn\\_{\\\\mathrm{params}} is the total number of trainable parameters, nlayerssubscript𝑛layersn\\_{\\\\mathrm{layers}} is the total number of layers, dmodelsubscript𝑑modeld\\_{\\\\mathrm{model}} is the number of units in each bottleneck layer (we always have the feedforward layer four times the size of the bottleneck layer, dffsubscript𝑑ffd\\_{\\\\mathrm{ff}}=4∗dmodelabsent∗4subscript𝑑model=4\\\\ast d\\_{\\\\mathrm{model}}), and dheadsubscript𝑑headd\\_{\\\\mathrm{head}} is the dimension of each attention head. All models use a context window of nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048 tokens. We partition the model across GPUs along both the depth and width dimension in order to minimize data-transfer between nodes. The precise architectural parameters for each model are chosen based on computational efficiency and load-balancing in the layout of models across GPU’s. Previous work \\[ [57])\\] suggests that validation loss is not strongly sensitive to these parameters within a reasonably broad range.\n\n![Refer to caption]Figure 2.2: Total compute used during training. Based on the analysis in Scaling Laws For Neural Language Models \\[ [57])\\] we train much larger models on many fewer tokens than is typical. As a consequence, although GPT-3 3B is almost 10x larger than RoBERTa-Large (355M params), both models took roughly 50 petaflop/s-days of compute during pre-training. Methodology for these calculations can be found in Appendix [D]Appendix D Total Compute Used to Train Language Models ‣ Language Models are Few-Shot Learners\").\n\n### 2.2 Training Dataset\n\nDatasets for language models have rapidly expanded, culminating in the Common Crawl dataset222 [https://commoncrawl.org/the-data/]\\[ [116])\\] constituting nearly a trillion words. This size of dataset is sufficient to train our largest models without ever updating on the same sequence twice. However, we have found that unfiltered or lightly filtered versions of Common Crawl tend to have lower quality than more curated datasets. Therefore, we took 3 steps to improve the average quality of our datasets: (1) we downloaded and filtered a version of CommonCrawl based on similarity to a range of high-quality reference corpora, (2) we performed fuzzy deduplication at the document level, within and across datasets, to prevent redundancy and preserve the integrity of our held-out validation set as an accurate measure of overfitting, and (3) we also added known high-quality reference corpora to the training mix to augment CommonCrawl and increase its diversity.\n\nDetails of the first two points (processing of Common Crawl) are described in Appendix [A]Appendix A Details of Common Crawl Filtering ‣ Language Models are Few-Shot Learners\"). For the third, we added several curated high-quality datasets, including an expanded version of the WebText dataset \\[ [117])\\], collected by scraping links over a longer period of time, and first described in \\[ [57])\\], two internet-based books corpora (Books1 and Books2) and English-language Wikipedia.\n\nTable [2.2]Table 2.2 ‣ 2.2 Training Dataset ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the final mixture of datasets that we used in training. The CommonCrawl data was downloaded from 41 shards of monthly CommonCrawl covering 2016 to 2019, constituting 45TB of compressed plaintext before filtering and 570GB after filtering, roughly equivalent to 400 billion byte-pair-encoded tokens. Note that during training, datasets are not sampled in proportion to their size, but rather datasets we view as higher-quality are sampled more frequently, such that CommonCrawl and Books2 datasets are sampled less than once during training, but the other datasets are sampled 2-3 times. This essentially accepts a small amount of overfitting in exchange for higher quality training data.\n\n| Dataset | Quantity(tokens) | Weight intraining mix | Epochs elapsed whentraining for 300B tokens |\n| --- | --- | --- | --- |\n| Common Crawl (filtered) | 410 billion | 60% | 0.44 |\n| WebText2 | 19 billion | 22% | 2.9 |\n| Books1 | 12 billion | 8% | 1.9 |\n| Books2 | 55 billion | 8% | 0.43 |\n| Wikipedia | 3 billion | 3% | 3.4 |\n\nTable 2.2: Datasets used to train GPT-3. “Weight in training mix” refers to the fraction of examples during training that are drawn from a given dataset, which we intentionally do not make proportional to the size of the dataset. As a result, when we train for 300 billion tokens, some datasets are seen up to 3.4 times during training while other datasets are seen less than once.\n\nA major methodological concern with language models pretrained on a broad swath of internet data, particularly large models with the capacity to memorize vast amounts of content, is potential contamination of downstream tasks by having their test or development sets inadvertently seen during pre-training. To reduce such contamination, we searched for and attempted to remove any overlaps with the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug in the filtering caused us to ignore some overlaps, and due to the cost of training it was not feasible to retrain the model. In Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") we characterize the impact of the remaining overlaps, and in future work we will more aggressively remove data contamination.\n\n### 2.3 Training Process\n\nAs found in \\[ [57]), [85])\\], larger models can typically use a larger batch size, but require a smaller learning rate. We measure the gradient noise scale during training and use it to guide our choice of batch size \\[ [85])\\]. Table [2.1]Table 2.1 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") shows the parameter settings we used. To train the larger models without running out of memory, we use a mixture of model parallelism within each matrix multiply and model parallelism across the layers of the network. All models were trained on V100 GPU’s on part of a high-bandwidth cluster provided by Microsoft. Details of the training process and hyperparameter settings are described in Appendix [B]Appendix B Details of Model Training ‣ Language Models are Few-Shot Learners\").\n\n### 2.4 Evaluation\n\nFor few-shot learning, we evaluate each example in the evaluation set by randomly drawing K𝐾K examples from that task’s training set as conditioning, delimited by 1 or 2 newlines depending on the task. For LAMBADA and Storycloze there is no supervised training set available so we draw conditioning examples from the development set and evaluate on the test set. For Winograd (the original, not SuperGLUE version) there is only one dataset, so we draw conditioning examples directly from it.\n\nK𝐾K can be any value from 0 to the maximum amount allowed by the model’s context window, which is nctx=2048subscript𝑛ctx2048n\\_{\\\\mathrm{ctx}}=2048 for all models and typically fits 101010 to 100100100 examples. Larger values of K𝐾K are usually but not always better, so when a separate development and test set are available, we experiment with a few values of K𝐾K on the development set and then run the best value on the test set. For some tasks (see Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\")) we also use a natural language prompt in addition to (or for K=0𝐾0K=0, instead of) demonstrations.\n\nOn tasks that involve choosing one correct completion from several options (multiple choice), we provide K𝐾K examples of context plus correct completion, followed by one example of context only, and compare the LM likelihood of each completion. For most tasks we compare the per-token likelihood (to normalize for length), however on a small number of datasets (ARC, OpenBookQA, and RACE) we gain additional benefit as measured on the development set by normalizing by the unconditional probability of each completion, by computing P​(completion\\|context)P​(completion\\|answer​\\_​context)𝑃conditionalcompletioncontext𝑃conditionalcompletionanswer\\_context\\\\frac{P(\\\\mathrm{completion}\\|\\\\mathrm{context})}{P(\\\\mathrm{completion}\\|\\\\mathrm{answer\\\\\\_context})}, where answer​\\_​contextanswer\\_context\\\\mathrm{answer\\\\\\_context} is the string \"Answer: \" or \"A: \" and is used to prompt that the completion should be an answer but is otherwise generic.\n\nOn tasks that involve binary classification, we give the options more semantically meaningful names (e.g. “True” or “False” rather than 0 or 1) and then treat the task like multiple choice; we also sometimes frame the task similar to what is done by \\[ [116])\\] (see Appendix [G]Appendix G Details of Task Phrasing and Specifications ‣ Language Models are Few-Shot Learners\")) for details.\n\nOn tasks with free-form completion, we use beam search with the same parameters as \\[ [116])\\]: a beam width of 4 and a length penalty of α=0.6𝛼0.6\\\\alpha=0.6. We score the model using F1 similarity score, BLEU, or exact match, depending on what is standard for the dataset at hand.\n\nFinal results are reported on the test set when publicly available, for each model size and learning setting (zero-, one-, and few-shot). When the test set is private, our model is often too large to fit on the test server, so we report results on the development set. We do submit to the test server on a small number of datasets (SuperGLUE, TriviaQA, PiQa) where we were able to make submission work, and we submit only the 200B few-shot results, and report development set results for everything else.",
            "citations": null
          },
          "3 Results": {
            "content": "![Refer to caption]Figure 3.1: Smooth scaling of performance with compute. Performance (measured in terms of cross-entropy validation loss) follows a power-law trend with the amount of compute used for training. The power-law behavior observed in \\[ [57])\\] continues for an additional two orders of magnitude with only small deviations from the predicted curve. For this figure, we exclude embedding parameters from compute and parameter counts.\n\nIn Figure [3.1]Figure 3.1 ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we display training curves for the 8 models described in Section [2]Approach ‣ Language Models are Few-Shot Learners\"). For this graph we also include 6 additional extra-small models with as few as 100,000 parameters. As observed in \\[ [57])\\], language modeling performance follows a power-law when making efficient use of training compute. After extending this trend by two more orders of magnitude, we observe only a slight (if any) departure from the power-law. One might worry that these improvements in cross-entropy loss come only from modeling spurious details of our training corpus. However, we will see in the following sections that improvements in cross-entropy loss lead to consistent performance gains across a broad spectrum of natural language tasks.\n\nBelow, we evaluate the 8 models described in Section [2]Approach ‣ Language Models are Few-Shot Learners\") (the 175 billion parameter parameter GPT-3 and 7 smaller models) on a wide range of datasets. We group the datasets into 9 categories representing roughly similar tasks.\n\nIn Section [3.1]Language Modeling, Cloze, and Completion Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on traditional language modeling tasks and tasks that are similar to language modeling, such as Cloze tasks and sentence/paragraph completion tasks. In Section [3.2]Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on “closed book” question answering tasks: tasks which require using the information stored in the model’s parameters to answer general knowledge questions. In Section [3.3]Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate the model’s ability to translate between languages (especially one-shot and few-shot). In Section [3.4]Winograd-Style Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate the model’s performance on Winograd Schema-like tasks. In Section [3.5]Common Sense Reasoning ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on datasets that involve commonsense reasoning or question answering. In Section [3.6]Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on reading comprehension tasks, in Section [3.7]SuperGLUE ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we evaluate on the SuperGLUE benchmark suite, and in [3.8]NLI ‣ 3 Results ‣ Language Models are Few-Shot Learners\") we briefly explore NLI. Finally, in Section [3.9]Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), we invent some additional tasks designed especially to probe in-context learning abilities – these tasks focus on on-the-fly reasoning, adaptation skills, or open-ended text synthesis. We evaluate all tasks in the few-shot, one-shot, and zero-shot settings.\n\n### 3.1 Language Modeling, Cloze, and Completion Tasks\n\nIn this section we test GPT-3’s performance on the traditional task of language modeling, as well as related tasks that involve predicting a single word of interest, completing a sentence or paragraph, or choosing between possible completions of a piece of text.\n\n#### 3.1.1 Language Modeling\n\nWe calculate zero-shot perplexity on the Penn Tree Bank (PTB) \\[ [86])\\] dataset measured in \\[ [117])\\]. We omit the 4 Wikipedia-related tasks in that work because they are entirely contained in our training data, and we also omit the one-billion word benchmark due to a high fraction of the dataset being contained in our training set. PTB escapes these issues due to predating the modern internet. Our largest model sets a new SOTA on PTB by a substantial margin of 15 points, achieving a perplexity of 20.50. Note that since PTB is a traditional language modeling dataset it does not have a clear separation of examples to define one-shot or few-shot evaluation around, so we measure only zero-shot.\n\n| Setting | PTB |\n| --- | --- |\n| SOTA (Zero-Shot) | 35.8a |\n| GPT-3 Zero-Shot | 20.5 |\n\nTable 3.1: Zero-shot results on PTB language modeling dataset. Many other common language modeling datasets are omitted because they are derived from Wikipedia or other sources which are included in GPT-3’s training data. a\\[ [117])\\]\n\n#### 3.1.2 LAMBADA\n\n| Setting | LAMBADA(acc) | LAMBADA(ppl) | StoryCloze(acc) | HellaSwag(acc) |\n| --- | --- | --- | --- | --- |\n| SOTA | 68.0a | 8.63b | 91.8c | 85.6d |\n| GPT-3 Zero-Shot | 76.2 | 3.00 | 83.2 | 78.9 |\n| GPT-3 One-Shot | 72.5 | 3.35 | 84.7 | 78.1 |\n| GPT-3 Few-Shot | 86.4 | 1.92 | 87.7 | 79.3 |\n\nTable 3.2: Performance on cloze and completion tasks. GPT-3 significantly improves SOTA on LAMBADA while achieving respectable performance on two difficult completion prediction datasets. a\\[ [132])\\]b\\[ [117])\\]c\\[ [64])\\]d\\[ [63])\\]![Refer to caption]Figure 3.2: On LAMBADA, the few-shot capability of language models results in a strong boost to accuracy. GPT-3 2.7B outperforms the SOTA 17B parameter Turing-NLG \\[ [132])\\] in this setting, and GPT-3 175B advances the state of the art by 18%. Note zero-shot uses a different format from one-shot and few-shot as described in the text.\n\nThe LAMBADA dataset \\[ [99])\\] tests the modeling of long-range dependencies in text – the model is asked to predict the last word of sentences which require reading a paragraph of context. It has recently been suggested that the continued scaling of language models is yielding diminishing returns on this difficult benchmark. \\[ [9])\\] reflect on the small 1.5% improvement achieved by a doubling of model size between two recent state of the art results (\\[ [125])\\] and \\[ [132])\\]) and argue that “continuing to expand hardware and data sizes by orders of magnitude is not the path forward”. We find that path is still promising and in a zero-shot setting GPT-3 achieves 76% on LAMBADA, a gain of 8% over the previous state of the art.\n\nLAMBADA is also a demonstration of the flexibility of few-shot learning as it provides a way to address a problem that classically occurs with this dataset. Although the completion in LAMBADA is always the last word in a sentence, a standard language model has no way of knowing this detail. It thus assigns probability not only to the correct ending but also to other valid continuations of the paragraph. This problem has been partially addressed in the past with stop-word filters \\[ [117])\\] (which ban “continuation” words). The few-shot setting instead allows us to “frame” the task as a cloze-test and allows the language model to infer from examples that a completion of exactly one word is desired. We use the following fill-in-the-blank format:\n\nAlice was friends with Bob. Alice went to visit her friend . →→\\\\to Bob\n\nGeorge bought some baseball equipment, a ball, a glove, and a . →→\\\\to\n\nWhen presented with examples formatted this way, GPT-3 achieves 86.4% accuracy in the few-shot setting, an increase of over 18% from the previous state-of-the-art. We observe that few-shot performance improves strongly with model size. While this setting decreases the performance of the smallest model by almost 20%, for GPT-3 it improves accuracy by 10%. Finally, the fill-in-blank method is not effective one-shot, where it always performs worse than the zero-shot setting. Perhaps this is because all models still require several examples to recognize the pattern.\n\nOne note of caution is that an analysis of test set contamination identified that a significant minority of the LAMBADA dataset appears to be present in our training data – however analysis performed in Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") suggests negligible impact on performance.\n\n#### 3.1.3 HellaSwag\n\nThe HellaSwag dataset \\[ [140])\\] involves picking the best ending to a story or set of instructions. The examples were adversarially mined to be difficult for language models while remaining easy for humans (who achieve 95.6% accuracy). GPT-3 achieves 78.1% accuracy in the one-shot setting and 79.3% accuracy in the few-shot setting, outperforming the 75.4% accuracy of a fine-tuned 1.5B parameter language model \\[ [141])\\] but still a fair amount lower than the overall SOTA of 85.6% achieved by the fine-tuned multi-task model ALUM.\n\n#### 3.1.4 StoryCloze\n\nWe next evaluate GPT-3 on the StoryCloze 2016 dataset \\[ [83])\\], which involves selecting the correct ending sentence for five-sentence long stories. Here GPT-3 achieves 83.2% in the zero-shot setting and 87.7% in the few-shot setting (with K=70𝐾70K=70). This is still 4.1% lower than the fine-tuned SOTA using a BERT based model \\[ [64])\\] but improves over previous zero-shot results by roughly 10%.\n\n### 3.2 Closed Book Question Answering\n\n| Setting | NaturalQS | WebQS | TriviaQA |\n| --- | --- | --- | --- |\n| RAG (Fine-tuned, Open-Domain) \\[ [75])\\] | 44.5 | 45.5 | 68.0 |\n| T5-11B+SSM (Fine-tuned, Closed-Book) \\[ [115])\\] | 36.6 | 44.7 | 60.5 |\n| T5-11B (Fine-tuned, Closed-Book) | 34.5 | 37.4 | 50.1 |\n| GPT-3 Zero-Shot | 14.6 | 14.4 | 64.3 |\n| GPT-3 One-Shot | 23.0 | 25.3 | 68.0 |\n| GPT-3 Few-Shot | 29.9 | 41.5 | 71.2 |\n\nTable 3.3: Results on three Open-Domain QA tasks. GPT-3 is shown in the few-, one-, and zero-shot settings, as compared to prior SOTA results for closed book and open domain settings. TriviaQA few-shot result is evaluated on the wiki split test server.![Refer to caption]Figure 3.3: On TriviaQA GPT3’s performance grows smoothly with model size, suggesting that language models continue to absorb knowledge as their capacity increases. One-shot and few-shot performance make significant gains over zero-shot behavior, matching and exceeding the performance of the SOTA fine-tuned open-domain model, RAG \\[ [75])\\]\n\nIn this section we measure GPT-3’s ability to answer questions about broad factual knowledge. Due to the immense amount of possible queries, this task has normally been approached by using an information retrieval system to find relevant text in combination with a model which learns to generate an answer given the question and the retrieved text. Since this setting allows a system to search for and condition on text which potentially contains the answer it is denoted “open-book”. \\[ [115])\\] recently demonstrated that a large language model can perform surprisingly well directly answering the questions without conditioning on auxilliary information. They denote this more restrictive evaluation setting as “closed-book”. Their work suggests that even higher-capacity models could perform even better and we test this hypothesis with GPT-3. We evaluate GPT-3 on the 3 datasets in \\[ [115])\\]: Natural Questions \\[ [58])\\], WebQuestions \\[ [5])\\], and TriviaQA \\[ [49])\\], using the same splits. Note that in addition to all results being in the closed-book setting, our use of few-shot, one-shot, and zero-shot evaluations represent an even stricter setting than previous closed-book QA work: in addition to external content not being allowed, fine-tuning on the Q&A dataset itself is also not permitted.\n\nThe results for GPT-3 are shown in Table [3.3]Table 3.3 ‣ 3.2 Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). On TriviaQA, we achieve 64.3% in the zero-shot setting, 68.0% in the one-shot setting, and 71.2% in the few-shot setting. The zero-shot result already outperforms the fine-tuned T5-11B by 14.2%, and also outperforms a version with Q&A tailored span prediction during pre-training by 3.8%. The one-shot result improves by 3.7% and matches the SOTA for an open-domain QA system which not only fine-tunes but also makes use of a learned retrieval mechanism over a 15.3B parameter dense vector index of 21M documents \\[ [75])\\]. GPT-3’s few-shot result further improves performance another 3.2% beyond this.\n\nOn WebQuestions (WebQs), GPT-3 achieves 14.4% in the zero-shot setting, 25.3% in the one-shot setting, and 41.5% in the few-shot setting. This compares to 37.4% for fine-tuned T5-11B, and 44.7% for fine-tuned T5-11B+SSM, which uses a Q&A-specific pre-training procedure. GPT-3 in the few-shot setting approaches the performance of state-of-the-art fine-tuned models. Notably, compared to TriviaQA, WebQS shows a much larger gain from zero-shot to few-shot (and indeed its zero-shot and one-shot performance are poor), perhaps suggesting that the WebQs questions and/or the style of their answers are out-of-distribution for GPT-3. Nevertheless, GPT-3 appears able to adapt to this distribution, recovering strong performance in the few-shot setting.\n\nOn Natural Questions (NQs) GPT-3 achieves 14.6% in the zero-shot setting, 23.0% in the one-shot setting, and 29.9% in the few-shot setting, compared to 36.6% for fine-tuned T5 11B+SSM. Similar to WebQS, the large gain from zero-shot to few-shot may suggest a distribution shift, and may also explain the less competitive performance compared to TriviaQA and WebQS. In particular, the questions in NQs tend towards very fine-grained knowledge on Wikipedia specifically which could be testing the limits of GPT-3’s capacity and broad pretraining distribution.\n\nOverall, on one of the three datasets GPT-3’s one-shot matches the open-domain fine-tuning SOTA. On the other two datasets it approaches the performance of the closed-book SOTA despite not using fine-tuning. On all 3 datasets, we find that performance scales very smoothly with model size (Figure [3.3]Figure 3.3 ‣ 3.2 Closed Book Question Answering ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\") Figure [H.7]Figure H.7 ‣ Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\")), possibly reflecting the idea that model capacity translates directly to more ‘knowledge’ absorbed in the parameters of the model.\n\n### 3.3 Translation\n\nFor GPT-2 a filter was used on a multilingual collection of documents to produce an English only dataset due to capacity concerns. Even with this filtering GPT-2 showed some evidence of multilingual capability and performed non-trivially when translating between French and English despite only training on 10 megabytes of remaining French text. Since we increase the capacity by over two orders of magnitude from GPT-2 to GPT-3, we also expand the scope of the training dataset to include more representation of other languages, though this remains an area for further improvement. As discussed in [2.2]Training Dataset ‣ 2 Approach ‣ Language Models are Few-Shot Learners\") the majority of our data is derived from raw Common Crawl with only quality-based filtering. Although GPT-3’s training data is still primarily English (93% by word count), it also includes 7% of text in other languages. These languages are documented in the [supplemental material]. In order to better understand translation capability, we also expand our analysis to include two additional commonly studied languages, German and Romanian.\n\nExisting unsupervised machine translation approaches often combine pretraining on a pair of monolingual datasets with back-translation \\[ [123])\\] to bridge the two languages in a controlled way. By contrast, GPT-3 learns from a blend of training data that mixes many languages together in a natural way, combining them on a word, sentence, and document level. GPT-3 also uses a single training objective which is not customized or designed for any task in particular. However, our one / few-shot settings aren’t strictly comparable to prior unsupervised work since they make use of a small amount of paired examples (1 or 64). This corresponds to up to a page or two of in-context training data.\n\n| Setting | En→→\\\\toFr | Fr→→\\\\toEn | En→→\\\\toDe | De→→\\\\toEn | En→→\\\\toRo | Ro→→\\\\toEn |\n| --- | --- | --- | --- | --- | --- | --- |\n| SOTA (Supervised) | 45.6a | 35.0 b | 41.2c | 40.2d | 38.5e | 39.9e |\n| --- | --- | --- | --- | --- | --- | --- |\n| XLM \\[ [61])\\] | 33.4 | 33.3 | 26.4 | 34.3 | 33.3 | 31.8 |\n| MASS \\[ [127])\\] | 37.5 | 34.9 | 28.3 | 35.2 | 35.2 | 33.1 |\n| mBART \\[ [66])\\] | - | - | 29.8 | 34.0 | 35.0 | 30.5 |\n| GPT-3 Zero-Shot | 25.2 | 21.2 | 24.6 | 27.2 | 14.1 | 19.9 |\n| GPT-3 One-Shot | 28.3 | 33.7 | 26.2 | 30.4 | 20.6 | 38.6 |\n| GPT-3 Few-Shot | 32.6 | 39.2 | 29.7 | 40.6 | 21.0 | 39.5 |\n\nTable 3.4: Few-shot GPT-3 outperforms previous unsupervised NMT work by 5 BLEU when translating into English reflecting its strength as an English LM. We report BLEU scores on the WMT’14 Fr↔↔\\\\leftrightarrowEn, WMT’16 De↔↔\\\\leftrightarrowEn, and WMT’16 Ro↔↔\\\\leftrightarrowEn datasets as measured by multi-bleu.perl with XLM’s tokenization in order to compare most closely with prior unsupervised NMT work. SacreBLEUf\\[ [101])\\] results reported in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\"). Underline indicates an unsupervised or few-shot SOTA, bold indicates supervised SOTA with relative confidence.\na\\[ [29])\\]b\\[ [23])\\]c\\[ [136])\\]d\\[ [95])\\]e\\[ [66])\\]f\\[SacreBLEU signature: BLEU+case.mixed+numrefs.1+smooth.exp+tok.intl+version.1.2.20\\] ![Refer to caption]Figure 3.4: Few-shot translation performance on 6 language pairs as model capacity increases. There is a consistent trend of improvement across all datasets as the model scales, and as well as tendency for translation into English to be stronger than translation from English.\n\nResults are shown in Table [3.4]Table 3.4 ‣ 3.3 Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). Zero-shot GPT-3, which only receives on a natural language description of the task, still underperforms recent unsupervised NMT results. However, providing only a single example demonstration for each translation task improves performance by over 7 BLEU and nears competitive performance with prior work. GPT-3 in the full few-shot setting further improves another 4 BLEU resulting in similar average performance to prior unsupervised NMT work. GPT-3 has a noticeable skew in its performance depending on language direction. For the three input languages studied, GPT-3 significantly outperforms prior unsupervised NMT work when translating into English but underperforms when translating in the other direction. Performance on En-Ro is a noticeable outlier at over 10 BLEU worse than prior unsupervised NMT work. This could be a weakness due to reusing the byte-level BPE tokenizer of GPT-2 which was developed for an almost entirely English training dataset. For both Fr-En and De-En, few shot GPT-3 outperforms the best supervised result we could find but due to our unfamiliarity with the literature and the appearance that these are un-competitive benchmarks we do not suspect those results represent true state of the art. For Ro-En, few shot GPT-3 performs within 0.5 BLEU of the overall SOTA which is achieved by a combination of unsupervised pretraining, supervised finetuning on 608K labeled examples, and backtranslation \\[ [70])\\].\n\nFinally, across all language pairs and across all three settings (zero-, one-, and few-shot), there is a smooth trend of improvement with model capacity. This is shown in Figure [3.4]Figure 3.4 ‣ 3.3 Translation ‣ 3 Results ‣ Language Models are Few-Shot Learners\") in the case of few-shot results, and scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\").\n\n### 3.4 Winograd-Style Tasks\n\n| Setting | Winograd | Winogrande (XL) |\n| --- | --- | --- |\n| Fine-tuned SOTA | 90.1a | 84.6b |\n| GPT-3 Zero-Shot | 88.3\\* | 70.2 |\n| GPT-3 One-Shot | 89.7\\* | 73.2 |\n| GPT-3 Few-Shot | 88.6\\* | 77.7 |\n\nTable 3.5: Results on the WSC273 version of Winograd schemas and the adversarial Winogrande dataset. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details on potential contamination of the Winograd test set. a\\[ [118])\\]b\\[ [79])\\]![Refer to caption]Figure 3.5: Zero-, one-, and few-shot performance on the adversarial Winogrande dataset as model capacity scales. Scaling is relatively smooth with the gains to few-shot learning increasing with model size, and few-shot GPT-3 175B is competitive with a fine-tuned RoBERTA-large.\n\nThe Winograd Schemas Challenge \\[ [65])\\] is a classical task in NLP that involves determining which word a pronoun refers to, when the pronoun is grammatically ambiguous but semantically unambiguous to a human. Recently fine-tuned language models have achieved near-human performance on the original Winograd dataset, but more difficult versions such as the adversarially-mined Winogrande dataset \\[ [118])\\] still significantly lag human performance. We test GPT-3’s performance on both Winograd and Winogrande, as usual in the zero-, one-, and few-shot setting.\n\nOn Winograd we test GPT-3 on the original set of 273 Winograd schemas, using the same “partial evaluation” method described in \\[ [117])\\]. Note that this setting differs slightly from the WSC task in the SuperGLUE benchmark, which is presented as binary classification and requires entity extraction to convert to the form described in this section. On Winograd GPT-3 achieves 88.3%, 89.7%, and 88.6% in the zero-shot, one-shot, and few-shot settings, showing no clear in-context learning but in all cases achieving strong results just a few points below state-of-the-art and estimated human performance. We note that contamination analysis found some Winograd schemas in the training data but this appears to have only a small effect on results (see Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\")).\n\nOn the more difficult Winogrande dataset, we do find gains to in-context learning: GPT-3 achieves 70.2% in the zero-shot setting, 73.2% in the one-shot setting, and 77.7% in the few-shot setting. For comparison a fine-tuned RoBERTA model achieves 79%, state-of-the-art is 84.6% achieved with a fine-tuned high capacity model (T5), and human performance on the task as reported by \\[ [118])\\] is 94.0%.\n\n### 3.5 Common Sense Reasoning\n\n| Setting | PIQA | ARC (Easy) | ARC (Challenge) | OpenBookQA |\n| --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 79.4 | 92.0\\[ [55])\\] | 78.5\\[ [55])\\] | 87.2\\[ [55])\\] |\n| GPT-3 Zero-Shot | 80.5\\* | 68.8 | 51.4 | 57.6 |\n| GPT-3 One-Shot | 80.5\\* | 71.2 | 53.2 | 58.8 |\n| GPT-3 Few-Shot | 82.8\\* | 70.1 | 51.5 | 65.4 |\n\nTable 3.6: GPT-3 results on three commonsense reasoning tasks, PIQA, ARC, and OpenBookQA. GPT-3 Few-Shot PIQA result is evaluated on the test server. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details on potential contamination issues on the PIQA test set.![Refer to caption]Figure 3.6: GPT-3 results on PIQA in the zero-shot, one-shot, and few-shot settings. The largest model achieves a score on the development set in all three conditions that exceeds the best recorded score on the task.\n\nNext we consider three datasets which attempt to capture physical or scientific reasoning, as distinct from sentence completion, reading comprehension, or broad knowledge question answering. The first, PhysicalQA (PIQA) \\[ [11])\\], asks common sense questions about how the physical world works and is intended as a probe of grounded understanding of the world. GPT-3 achieves 81.0% accuracy zero-shot, 80.5% accuracy one-shot, and 82.8% accuracy few-shot (the last measured on PIQA’s test server). This compares favorably to the 79.4% accuracy prior state-of-the-art of a fine-tuned RoBERTa. PIQA shows relatively shallow scaling with model size and is still over 10% worse than human performance, but GPT-3’s few-shot and even zero-shot result outperform the current state-of-the-art. Our analysis flagged PIQA for a potential data contamination issue (despite hidden test labels), and we therefore conservatively mark the result with an asterisk. See Section [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\") for details.\n\nARC \\[ [14])\\] is a dataset of multiple-choice questions collected from 3rd to 9th grade science exams. On the “Challenge” version of the dataset which has been filtered to questions which simple statistical or information retrieval methods are unable to correctly answer, GPT-3 achieves 51.4% accuracy in the zero-shot setting, 53.2% in the one-shot setting, and 51.5% in the few-shot setting. This is approaching the performance of a fine-tuned RoBERTa baseline (55.9%) from UnifiedQA \\[ [55])\\]. On the “Easy” version of the dataset (questions which either of the mentioned baseline approaches answered correctly), GPT-3 achieves 68.8%, 71.2%, and 70.1% which slightly exceeds a fine-tuned RoBERTa baseline from \\[ [55])\\]. However, both of these results are still much worse than the overall SOTAs achieved by the UnifiedQA which exceeds GPT-3’s few-shot results by 27% on the challenge set and 22% on the easy set.\n\nOn OpenBookQA \\[ [84])\\], GPT-3 improves significantly from zero to few shot settings but is still over 20 points short of the overall SOTA. GPT-3’s few-shot performance is similar to a fine-tuned BERT Large baseline on the leaderboard.\n\nOverall, in-context learning with GPT-3 shows mixed results on commonsense reasoning tasks, with only small and inconsistent gains observed in the one and few-shot learning settings for both PIQA and ARC, but a significant improvement is observed on OpenBookQA. GPT-3 sets SOTA on the new PIQA dataset in all evaluation settings.\n\n### 3.6 Reading Comprehension\n\n| Setting | CoQA | DROP | QuAC | SQuADv2 | RACE-h | RACE-m |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 90.7a | 89.1b | 74.4c | 93.0d | 90.0e | 93.1e |\n| GPT-3 Zero-Shot | 81.5 | 23.6 | 41.5 | 59.5 | 45.5 | 58.4 |\n| GPT-3 One-Shot | 84.0 | 34.3 | 43.3 | 65.4 | 45.9 | 57.4 |\n| GPT-3 Few-Shot | 85.0 | 36.5 | 44.3 | 69.8 | 46.8 | 58.1 |\n\nTable 3.7: Results on reading comprehension tasks. All scores are F1 except results for RACE which report accuracy. a\\[ [53])\\]b\\[ [50])\\]c\\[ [2])\\]d\\[ [103])\\]e\\[ [125])\\]![Refer to caption]Figure 3.7: GPT-3 results on CoQA reading comprehension task. GPT-3 175B achieves 85 F1 in the few-shot setting, only a few points behind measured human performance and state-of-the-art fine-tuned models. Zero-shot and one-shot performance is a few points behind, with the gains to few-shot being largest for bigger models.\n\nNext we evaluate GPT-3 on the task of reading comprehension. We use a suite of 5 datasets including abstractive, multiple choice, and span based answer formats in both dialog and single question settings. We observe a wide spread in GPT-3’s performance across these datasets suggestive of varying capability with different answer formats. In general we observe GPT-3 is on par with initial baselines and early results trained using contextual representations on each respective dataset.\n\nGPT-3 performs best (within 3 points of the human baseline) on CoQA \\[ [106])\\] a free-form conversational dataset and performs worst (13 F1 below an ELMo baseline) on QuAC \\[ [16])\\] a dataset which requires modeling structured dialog acts and answer span selections of teacher-student interactions. On DROP \\[ [27])\\], a dataset testing discrete reasoning and numeracy in the context of reading comprehension, GPT-3 in a few-shot setting outperforms the fine-tuned BERT baseline from the original paper but is still well below both human performance and state-of-the-art approaches which augment neural networks with symbolic systems \\[ [110])\\]. On SQuAD 2.0 \\[ [108])\\], GPT-3 demonstrates its few-shot learning capabilities, improving by almost 10 F1 (to 69.8) compared to a zero-shot setting. This allows it to slightly outperform the best fine-tuned result in the original paper. On RACE \\[ [78])\\], a multiple choice dataset of middle school and high school english examinations, GPT-3 performs relatively weakly and is only competitive with the earliest work utilizing contextual representations and is still 45% behind SOTA.\n\n|  | SuperGLUE | BoolQ | CB | CB | COPA | RTE |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Average | Accuracy | Accuracy | F1 | Accuracy | Accuracy |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 89.0 | 91.0 | 96.9 | 93.9 | 94.8 | 92.5 |\n| Fine-tuned BERT-Large | 69.0 | 77.4 | 83.6 | 75.7 | 70.6 | 71.7 |\n| GPT-3 Few-Shot | 71.8 | 76.4 | 75.6 | 52.0 | 92.0 | 69.0 |\n\n|  | WiC | WSC | MultiRC | MultiRC | ReCoRD | ReCoRD |\n| --- | --- | --- | --- | --- | --- | --- |\n|  | Accuracy | Accuracy | Accuracy | F1a | Accuracy | F1 |\n| --- | --- | --- | --- | --- | --- | --- |\n| Fine-tuned SOTA | 76.1 | 93.8 | 62.3 | 88.2 | 92.5 | 93.3 |\n| Fine-tuned BERT-Large | 69.6 | 64.6 | 24.1 | 70.0 | 71.3 | 72.0 |\n| GPT-3 Few-Shot | 49.4 | 80.1 | 30.5 | 75.4 | 90.2 | 91.1 |\n\nTable 3.8:\nPerformance of GPT-3 on SuperGLUE compared to fine-tuned baselines and SOTA. All results are reported on the test set. GPT-3 few-shot is given a total of 32 examples within the context of each task and performs no gradient updates.\n![Refer to caption]Figure 3.8:\nPerformance on SuperGLUE increases with model size and number of examples in context. A value of K=32𝐾32K=32 means that our model was shown 32 examples per task, for 256 examples total divided across the 8 tasks in SuperGLUE. We report GPT-3 values on the dev set, so our numbers are not directly comparable to the dotted reference lines (our test set results are in Table [3.8]Table 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). The BERT-Large reference model was fine-tuned on the SuperGLUE training set (125K examples), whereas BERT++ was first fine-tuned on MultiNLI (392K examples) and SWAG (113K examples) before further fine-tuning on the SuperGLUE training set (for a total of 630K fine-tuning examples). We find the difference in performance between the BERT-Large and BERT++ to be roughly equivalent to the difference between GPT-3 with one example per context versus eight examples per context.\n\n### 3.7 SuperGLUE\n\nIn order to better aggregate results on NLP tasks and compare to popular models such as BERT and RoBERTa in a more systematic way, we also evaluate GPT-3 on a standardized collection of datasets, the SuperGLUE benchmark \\[ [135])\\]\\[ [135])\\]\\[ [17])\\]\\[ [25])\\]\\[ [105])\\]\\[ [54])\\]\\[ [142])\\]\\[ [21])\\]\\[ [8])\\]\\[ [34])\\]\\[ [6])\\]\\[ [96])\\]\\[ [98])\\]. GPT-3’s test-set performance on the SuperGLUE dataset is shown in Table [3.8]Table 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). In the few-shot setting, we used 32 examples for all tasks, sampled randomly from the training set. For all tasks except WSC and MultiRC, we sampled a new set of examples to use in the context for each problem. For WSC and MultiRC, we used the same set of randomly drawn examples from the training set as context for all of the problems we evaluated.\n\nWe observe a wide range in GPT-3’s performance across tasks. On COPA and ReCoRD GPT-3 achieves near-SOTA performance in the one-shot and few-shot settings, with COPA falling only a couple points short and achieving second place on the leaderboard, where first place is held by a fine-tuned 11 billion parameter model (T5). On WSC, performance is still relatively strong, achieving 80.1% in the few-shot setting (note that GPT-3 achieves 88.6% on the original Winograd dataset as described in Section [3.4]Winograd-Style Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). On BoolQ, MultiRC, and RTE, performance is reasonable, roughly matching that of a fine-tuned BERT-Large. On CB, we see signs of life at 75.6% in the few-shot setting.\n\nWiC is a notable weak spot with few-shot performance at 49.4% (at random chance). We tried a number of different phrasings and formulations for WiC (which involves determining if a word is being used with the same meaning in two sentences), none of which was able to achieve strong performance. This hints at a phenomenon that will become clearer in the next section (which discusses the ANLI benchmark) – GPT-3 appears to be weak in the few-shot or one-shot setting at some tasks that involve comparing two sentences or snippets, for example whether a word is used the same way in two sentences (WiC), whether one sentence is a paraphrase of another, or whether one sentence implies another. This could also explain the comparatively low scores for RTE and CB, which also follow this format. Despite these weaknesses, GPT-3 still outperforms a fine-tuned BERT-large on four of eight tasks and on two tasks GPT-3 is close to the state-of-the-art held by a fine-tuned 11 billion parameter model.\n\nFinally, we note that the few-shot SuperGLUE score steadily improves with both model size and with number of examples in the context showing increasing benefits from in-context learning (Figure [3.8]Figure 3.8 ‣ 3.6 Reading Comprehension ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). We scale K𝐾K up to 32 examples per task, after which point additional examples will not reliably fit into our context. When sweeping over values of K𝐾K, we find that GPT-3 requires less than eight total examples per task to outperform a fine-tuned BERT-Large on overall SuperGLUE score.\n\n![Refer to caption]Figure 3.9: Performance of GPT-3 on ANLI Round 3. Results are on the dev-set, which has only 1500 examples and therefore has high variance (we estimate a standard deviation of 1.2%). We find that smaller models hover around random chance, while few-shot GPT-3 175B closes almost half the gap from random chance to SOTA. Results for ANLI rounds 1 and 2 are shown in the appendix.\n\n### 3.8 NLI\n\nNatural Language Inference (NLI) \\[ [31])\\] concerns the ability to understand the relationship between two sentences. In practice, this task is usually structured as a two or three class classification problem where the model classifies whether the second sentence logically follows from the first, contradicts the first sentence, or is possibly true (neutral). SuperGLUE includes an NLI dataset, RTE, which evaluates the binary version of the task. On RTE, only the largest version of GPT-3 performs convincingly better than random (56%) in any evaluation setting, but in a few-shot setting GPT-3 performs similarly to a single-task fine-tuned BERT Large. We also evaluate on the recently introduced Adversarial Natural Language Inference (ANLI) dataset \\[ [94])\\]. ANLI is a difficult dataset employing a series of adversarially mined natural language inference questions in three rounds (R1, R2, and R3). Similar to RTE, all of our models smaller than GPT-3 perform at almost exactly random chance on ANLI, even in the few-shot setting (∼33%similar-toabsentpercent33\\\\sim 33\\\\%), whereas GPT-3 itself shows signs of life on Round 3. Results for ANLI R3 are highlighted in Figure [3.9]Figure 3.9 ‣ 3.7 SuperGLUE ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and full results for all rounds can be found in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\"). These results on both RTE and ANLI suggest that NLI is still a very difficult task for language models and they are only just beginning to show signs of progress.\n\n### 3.9 Synthetic and Qualitative Tasks\n\nOne way to probe GPT-3’s range of abilities in the few-shot (or zero- and one-shot) setting is to give it tasks which require it to perform simple on-the-fly computational reasoning, recognize a novel pattern that is unlikely to have occurred in training, or adapt quickly to an unusual task. We devise several tasks to test this class of abilities. First, we test GPT-3’s ability to perform arithmetic. Second, we create several tasks that involve rearranging or unscrambling the letters in a word, tasks which are unlikely to have been exactly seen during training. Third, we test GPT-3’s ability to solve SAT-style analogy problems few-shot. Finally, we test GPT-3 on several qualitative tasks, including using new words in a sentence, correcting English grammar, and news article generation. We will release the synthetic datasets with the hope of stimulating further study of test-time behavior of language models.\n\n#### 3.9.1 Arithmetic\n\nTo test GPT-3’s ability to perform simple arithmetic operations without task-specific training, we developed a small battery of 10 tests that involve asking GPT-3 a simple arithmetic problem in natural language:\n\n- •\n\n\n2 digit addition (2D+) – The model is asked to add two integers sampled uniformly from \\[0,100)0100\\[0,100), phrased in the form of a question, e.g. “Q: What is 48 plus 76? A: 124.”\\\n\\\n- •\\\n\\\n\\\n2 digit subtraction (2D-) – The model is asked to subtract two integers sampled uniformly from \\[0,100)0100\\[0,100); the answer may be negative. Example: “Q: What is 34 minus 53? A: -19”.\\\n\\\n- •\\\n\\\n\\\n3 digit addition (3D+) – Same as 2 digit addition, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- •\\\n\\\n\\\n3 digit subtraction (3D-) – Same as 2 digit subtraction, except numbers are uniformly sampled from \\[0,1000)01000\\[0,1000).\\\n\\\n- •\\\n\\\n\\\n4 digit addition (4D+) – Same as 3 digit addition, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- •\\\n\\\n\\\n4 digit subtraction (4D-) – Same as 3 digit subtraction, except uniformly sampled from \\[0,10000)010000\\[0,10000).\\\n\\\n- •\\\n\\\n\\\n5 digit addition (5D+) – Same as 3 digit addition, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- •\\\n\\\n\\\n5 digit subtraction (5D-) – Same as 3 digit subtraction, except uniformly sampled from \\[0,100000)0100000\\[0,100000).\\\n\\\n- •\\\n\\\n\\\n2 digit multiplication (2Dx) – The model is asked to multiply two integers sampled uniformly from \\[0,100)0100\\[0,100), e.g. “Q: What is 24 times 42? A: 1008”.\\\n\\\n- •\\\n\\\n\\\nOne-digit composite (1DC) – The model is asked to perform a composite operation on three 1 digit numbers, with parentheses around the last two. For example, “Q: What is 6+(4\\*8)? A: 38”. The three 1 digit numbers are selected uniformly on \\[0,10)010\\[0,10) and the operations are selected uniformly from {+,-,\\*}.\\\n\\\n\\\nIn all 10 tasks the model must generate the correct answer exactly. For each task we generate a dataset of 2,000 random instances of the task and evaluate all models on those instances.\\\n\\\nFirst we evaluate GPT-3 in the few-shot setting, for which results are shown in Figure [3.10]Figure 3.10 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). On addition and subtraction, GPT-3 displays strong proficiency when the number of digits is small, achieving 100% accuracy on 2 digit addition, 98.9% at 2 digit subtraction, 80.2% at 3 digit addition, and 94.2% at 3-digit subtraction. Performance decreases as the number of digits increases, but GPT-3 still achieves 25-26% accuracy on four digit operations and 9-10% accuracy on five digit operations, suggesting at least some capacity to generalize to larger numbers of digits. GPT-3 also achieves 29.2% accuracy at 2 digit multiplication, an especially computationally intensive operation. Finally, GPT-3 achieves 21.3% accuracy at single digit combined operations (for example, 9\\*(7+5)), suggesting that it has some robustness beyond just single operations.\\\n\\\n![Refer to caption]Figure 3.10: Results on all 10 arithmetic tasks in the few-shot settings for models of different sizes. There is a significant jump from the second largest model (GPT-3 13B) to the largest model (GPT-3 175), with the latter being able to reliably accurate 2 digit arithmetic, usually accurate 3 digit arithmetic, and correct answers a significant fraction of the time on 4-5 digit arithmetic, 2 digit multiplication, and compound operations. Results for one-shot and zero-shot are shown in the appendix.\\\n\\\n| Setting | 2D+ | 2D- | 3D+ | 3D- | 4D+ | 4D- | 5D+ | 5D- | 2Dx | 1DC |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 76.9 | 58.0 | 34.2 | 48.3 | 4.0 | 7.5 | 0.7 | 0.8 | 19.8 | 9.8 |\\\n| GPT-3 One-shot | 99.6 | 86.4 | 65.5 | 78.7 | 14.0 | 14.0 | 3.5 | 3.8 | 27.4 | 14.3 |\\\n| GPT-3 Few-shot | 100.0 | 98.9 | 80.4 | 94.2 | 25.5 | 26.8 | 9.3 | 9.9 | 29.2 | 21.3 |\\\n\\\nTable 3.9: Results on basic arithmetic tasks for GPT-3 175B. {2,3,4,5}D{+,-} is 2, 3, 4, and 5 digit addition or subtraction, 2Dx is 2 digit multiplication. 1DC is 1 digit composite operations. Results become progressively stronger moving from the zero-shot to one-shot to few-shot setting, but even the zero-shot shows significant arithmetic abilities.\\\n\\\nAs Figure [3.10]Figure 3.10 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") makes clear, small models do poorly on all of these tasks – even the 13 billion parameter model (the second largest after the 175 billion full GPT-3) can solve 2 digit addition and subtraction only half the time, and all other operations less than 10% of the time.\\\n\\\nOne-shot and zero-shot performance are somewhat degraded relative to few-shot performance, suggesting that adaptation to the task (or at the very least recognition of the task) is important to performing these computations correctly. Nevertheless, one-shot performance is still quite strong, and even zero-shot performance of the full GPT-3 significantly outperforms few-shot learning for all smaller models. All three settings for the full GPT-3 are shown in Table [3.9]Table 3.9 ‣ 3.9.1 Arithmetic ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), and model capacity scaling for all three settings is shown in Appendix [H]Appendix H Results on All Tasks for All Model Sizes ‣ Language Models are Few-Shot Learners\").\\\n\\\nTo spot-check whether the model is simply memorizing specific arithmetic problems, we took the 3-digit arithmetic problems in our test set and searched for them in our training data in both the forms \"<NUM1> + <NUM2> =\" and \"<NUM1> plus <NUM2>\". Out of 2,000 addition problems we found only 17 matches (0.8%) and out of 2,000 subtraction problems we found only 2 matches (0.1%), suggesting that only a trivial fraction of the correct answers could have been memorized. In addition, inspection of incorrect answers reveals that the model often makes mistakes such as not carrying a “1”, suggesting it is actually attempting to perform the relevant computation rather than memorizing a table.\\\n\\\nOverall, GPT-3 displays reasonable proficiency at moderately complex arithmetic in few-shot, one-shot, and even zero-shot settings.\\\n\\\n#### 3.9.2 Word Scrambling and Manipulation Tasks\\\n\\\nTo test GPT-3’s ability to learn novel symbolic manipulations from a few examples, we designed a small battery of 5 “character manipulation” tasks. Each task involves giving the model a word distorted by some combination of scrambling, addition, or deletion of characters, and asking it to recover the original word. The 5 tasks are:\\\n\\\n| Setting | CL | A1 | A2 | RI | RW |\\\n| --- | --- | --- | --- | --- | --- |\\\n| GPT-3 Zero-shot | 3.66 | 2.28 | 8.91 | 8.26 | 0.09 |\\\n| GPT-3 One-shot | 21.7 | 8.62 | 25.9 | 45.4 | 0.48 |\\\n| GPT-3 Few-shot | 37.9 | 15.1 | 39.7 | 67.2 | 0.44 |\\\n\\\nTable 3.10: GPT-3 175B performance on various word unscrambling and word\\\nmanipulation tasks, in zero-, one-, and few-shot settings. CL is “cycle letters in word”, A1 is anagrams of but the first and last letters,\\\nA2 is anagrams of all but the first and last two letters, RI is “Random insertion\\\nin word”, RW is “reversed words”.![Refer to caption]Figure 3.11: Few-shot performance on the five word scrambling tasks for different sizes of model. There is generally smooth improvement with model size although the random insertion task shows an upward slope of improvement with the 175B model solving the task the majority of the time. Scaling of one-shot and zero-shot performance is shown in the appendix. All tasks are done with K=100𝐾100K=100.\\\n\\\n- •\\\n\\\n\\\nCycle letters in word (CL) – The model is given a word with its letters cycled, then the “=” symbol, and is expected to generate the original word. For example, it might be given “lyinevitab” and should output “inevitably”.\\\n\\\n- •\\\n\\\n\\\nAnagrams of all but first and last characters (A1) – The model is given a word where every letter except the first and last have been scrambled randomly, and must output the original word. Example: criroptuon = corruption.\\\n\\\n- •\\\n\\\n\\\nAnagrams of all but first and last 2 characters (A2) – The model is given a word where every letter except the first 2 and last 2 have been scrambled randomly, and must recover the original word. Example: opoepnnt →→\\\\to opponent.\\\n\\\n- •\\\n\\\n\\\nRandom insertion in word (RI) – A random punctuation or space character is inserted between each letter of a word, and the model must output the original word. Example: s.u!c/c!e.s s i/o/n = succession.\\\n\\\n- •\\\n\\\n\\\nReversed words (RW) – The model is given a word spelled backwards, and must output the original word. Example: stcejbo →→\\\\to objects.\\\n\\\n\\\nFor each task we generate 10,000 examples, which we chose to be the top 10,000 most frequent words as measured by \\[ [92])\\] of length more than 4 characters and less than 15 characters. The few-shot results are shown in Figure [3.11]Figure 3.11 ‣ 3.9.2 Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"). Task performance tends to grow smoothly with model size, with the full GPT-3 model achieving 66.9% on removing random insertions, 38.6% on cycling letters, 40.2% on the easier anagram task, and 15.1% on the more difficult anagram task (where only the first and last letters are held fixed). None of the models can reverse the letters in a word.\\\n\\\nIn the one-shot setting, performance is significantly weaker (dropping by half or more), and in the zero-shot setting the model can rarely perform any of the tasks (Table [3.10]Table 3.10 ‣ 3.9.2 Word Scrambling and Manipulation Tasks ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). This suggests that the model really does appear to learn these tasks at test time, as the model cannot perform them zero-shot and their artificial nature makes them unlikely to appear in the pre-training data (although we cannot confirm this with certainty).\\\n\\\nWe can further quantify performance by plotting “in-context learning curves”, which show task performance as a function of the number of in-context examples. We show in-context learning curves for the Symbol Insertion task in Figure [1.2]Figure 1.2 ‣ 1 Introduction ‣ Language Models are Few-Shot Learners\"). We can see that larger models are able to make increasingly effective use of in-context information, including both task examples and natural language task descriptions.\\\n\\\nFinally, it is worth adding that solving these tasks requires character-level manipulations, whereas our BPE encoding operates on significant fractions of a word (on average ∼0.7similar-toabsent0.7\\\\sim 0.7 words per token), so from the LM’s perspective succeeding at these tasks involves not just manipulating BPE tokens but understanding and pulling apart their substructure. Also, CL, A1, and A2 are not bijective (that is, the unscrambled word is not a deterministic function of the scrambled word), requiring the model to perform some search to find the correct unscrambling. Thus, the skills involved appear to require non-trivial pattern-matching and computation.\\\n\\\n#### 3.9.3 SAT Analogies\\\n\\\nTo test GPT-3 on another task that is somewhat unusual relative to the typical distribution of text, we collected a set of 374 “SAT analogy” problems \\[ [131])\\]. Analogies are a style of multiple choice question that constituted a section of the SAT college entrance exam before 2005. A typical example is “audacious is to boldness as (a) sanctimonious is to hypocrisy, (b) anonymous is to identity, (c) remorseful is to misdeed, (d) deleterious is to result, (e) impressionable is to temptation”. The student is expected to choose which of the five word pairs has the same relationship as the original word pair; in this example the answer is “sanctimonious is to hypocrisy”. On this task GPT-3 achieves 65.2% in the few-shot setting, 59.1% in the one-shot setting, and 53.7% in the zero-shot setting, whereas the average score among college applicants was 57% \\[ [129])\\] (random guessing yields 20%). As shown in Figure [3.12]Figure 3.12 ‣ 3.9.3 SAT Analogies ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\"), the results improve with scale, with the the full 175 billion model improving by over 10% compared to the 13 billion parameter model.\\\n\\\n![Refer to caption]Figure 3.12: Zero-, one-,and few-shot performance on SAT analogy tasks, for different sizes of model. The largest model achieves 65% accuracy in the few-shot setting, and also demonstrates significant gains to in-context learning which are not present in smaller models.\\\n\\\n#### 3.9.4 News Article Generation\\\n\\\nPrevious work on generative language models qualitatively tested their ability to generate synthetic “news articles” by conditional sampling from the model given a human-written prompt consisting of a plausible first sentence for a news story \\[ [117])\\]. Relative to \\[ [117])\\], the dataset used to train GPT-3 is much less weighted towards news articles, so trying to generate news articles via raw unconditional samples is less effective – for example GPT-3 often interprets the proposed first sentence of a “news article” as a tweet and then posts synthetic responses or follow-up tweets. To solve this problem we employed GPT-3’s few-shot learning abilities by providing three previous news articles in the model’s context to condition it. With the title and subtitle of a proposed next article, the model is able to reliably generate short articles in the “news” genre.\\\n\\\nTo gauge the quality of news article generation from GPT-3 (which we believe is likely to be correlated with conditional sample generation quality in general), we decided to measure human ability to distinguish GPT-3-generated articles from real ones. Similar work has been carried out by Kreps et al. \\[ [56])\\] and Zellers et al. \\[ [141])\\]. Generative language models are trained to match the distribution of content generated by humans, so the (in)ability of humans to distinguish the two is a potentially important measure of quality.333This task is also relevant to the potential misuse of language models discussed in Section [6.1]Misuse of Language Models ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\").\\\n\\\nIn order to see how well humans can detect model generated text, we arbitrarily selected 25 article titles and subtitles from the website [newser.com] (mean length: 215 words). We then generated completions of these titles and subtitles from four language models ranging in size from 125M to 175B (GPT-3) parameters (mean length: 200 words). For each model, we presented around 80 US-based participants with a quiz consisting of these real titles and subtitles followed by either the human written article or the article generated by the model444We wanted to identify how good an average person on the internet is at detecting language model outputs, so we focused on participants drawn from the general US population. See Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles ‣ Language Models are Few-Shot Learners\") for details.. Participants were asked to select whether the article was “very likely written by a human”, “more likely written by a human”, “I don’t know”, “more likely written by a machine”, or “very likely written by a machine”.\\\n\\\nThe articles we selected were not in the models’ training data and the model outputs were formatted and selected programmatically to prevent human cherry-picking. All models used the same context to condition outputs on and were pre-trained with the same context size and the same article titles and subtitles were used as prompts for each model. However, we also ran an experiment to control for participant effort and attention that followed the same format but involved intentionally bad model generated articles. This was done by generating articles from a “control model”: a 160M parameter model with no context and increased output randomness.\\\n\\\nMean human accuracy (the ratio of correct assignments to non-neutral assignments per participant) at detecting that the intentionally bad articles were model generated was ∼86%similar-toabsentpercent86\\\\sim 86\\\\%  where 50% is chance level performance. By contrast, mean human accuracy at detecting articles that were produced by the 175B parameter model was barely above chance at ∼52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.11]Table 3.11 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")).555We use a two-sample Student’s T-Test to test for significant difference between the means of the participant accuracies of each model and the control model and report the normalized difference in the means (as the t-statistic) and the p-value. Human abilities to detect model generated text appear to decrease as model size increases: there appears to be a trend towards chance accuracy with model size, and human detection of GPT-3 is close to chance.666If a model consistently produces texts that are more impressive than human articles, it is possible that human performance on this task would drop below 50%. Indeed, many individual participants scored below 50% on this task. This is true despite the fact that participants spend more time on each output as model size increases (see Appendix [E]Appendix E Human Quality Assessment of Synthetic News Articles ‣ Language Models are Few-Shot Learners\")).\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t𝑡t compared tocontrol (p𝑝p-value) | “I don’t know”assignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control (deliberately bad model) | 86% | 83%–90% | - | 3.6 % |\\\n| GPT-3 Small | 76% | 72%–80% | 3.9 (2e𝑒e-4) | 4.9% |\\\n| GPT-3 Medium | 61% | 58%–65% | 10.3 (7e𝑒e-21) | 6.0% |\\\n| GPT-3 Large | 68% | 64%–72% | 7.3 (3e𝑒e-11) | 8.7% |\\\n| GPT-3 XL | 62% | 59%–65% | 10.7 (1e𝑒e-19) | 7.5% |\\\n| GPT-3 2.7B | 62% | 58%–65% | 10.4 (5e𝑒e-19) | 7.1% |\\\n| GPT-3 6.7B | 60% | 56%–63% | 11.2 (3e𝑒e-21) | 6.2% |\\\n| GPT-3 13B | 55% | 52%–58% | 15.3 (1e𝑒e-32) | 7.1% |\\\n| GPT-3 175B | 52% | 49%–54% | 16.9 (1e𝑒e-34) | 7.8% |\\\n\\\nTable 3.11: Human accuracy in identifying whether short (∼similar-to\\\\sim200 word) news articles are model generated. We find that human accuracy (measured by the ratio of correct assignments to non-neutral assignments) ranges from 86% on the control model to 52% on GPT-3 175B. This table compares mean accuracy between five different models, and shows the results of a two-sample T-Test for the difference in mean accuracy between each model and the control model (an unconditional GPT-3 Small model with increased output randomness).![Refer to caption]Figure 3.13: People’s ability to identify whether news articles are model-generated (measured by the ratio of correct assignments to non-neutral assignments) decreases as model size increases. Accuracy on the outputs on the deliberately-bad control model (an unconditioned GPT-3 Small model with higher output randomness) is indicated with the dashed line at the top, and the random chance (50%) is indicated with the dashed line at the bottom. Line of best fit is a power law with 95% confidence intervals.\\\n\\\nExamples of synthetic articles from GPT-3 are given in Figures [3.14]Figure 3.14 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") and [3.15]Figure 3.15 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\").777Additional non-news samples can be found in Appendix [F]Appendix F Additional Samples from GPT-3 ‣ Language Models are Few-Shot Learners\"). Much of the text is—as indicated by the evaluations—difficult for humans to distinguish from authentic human content. Factual inaccuracies can be an indicator that an article is model generated since, unlike human authors, the models have no access to the specific facts that the article titles refer to or when the article was written. Other indicators include repetition, non sequiturs, and unusual phrasings, though these are often subtle enough that they are not noticed.\\\n\\\nTitle: United Methodists Agree to Historic Split\\\n\\\nSubtitle: Those who oppose gay marriage will form their own denomination\\\n\\\nArticle:After two days of intense debate, the United Methodist Church has agreed to a historic split - one that is expected to end in the creation of a new denomination, one that will be ”theologically and socially conservative,” according to The Washington Post. The majority of delegates attending the church’s annual General Conference in May voted to strengthen a ban on the ordination of LGBTQ clergy and to write new rules that will ”discipline” clergy who officiate at same-sex weddings. But those who opposed these measures have a new plan: They say they will form a separate denomination by 2020, calling their church the Christian Methodist denomination.The Post notes that the denomination, which claims 12.5 million members, was in the early 20th century the ”largest Protestant denomination in the U.S.,” but that it has been shrinking in recent decades. The new split will be the second in the church’s history. The first occurred in 1968, when roughly 10 percent of the denomination left to form the Evangelical United Brethren Church. The Post notes that the proposed split ”comes at a critical time for the church, which has been losing members for years,” which has been ”pushed toward the brink of a schism over the role of LGBTQ people in the church.” Gay marriage is not the only issue that has divided the church. In 2016, the denomination was split over ordination of transgender clergy, with the North Pacific regional conference voting to ban them from serving as clergy, and the South Pacific regional conference voting to allow them.\\\n\\\nFigure 3.14: The GPT-3 generated news article that humans had the greatest difficulty distinguishing from a human written article (accuracy: 12%).\\\n\\\nTitle: Star’s Tux Promise Draws Megyn Kelly’s SarcasmSubtitle: Joaquin Phoenix pledged to not change for each awards eventArticle:A year ago, Joaquin Phoenix made headlines when he appeared on the red carpet at the Golden Globes wearing a tuxedo with a paper bag over his head that read, ”I am a shape-shifter. I can’t change the world. I can only change myself.” It was a promise to not change to fit into the Hollywood mold: ”I think that’s a really special thing, to not change yourself. I think it’s a really special thing to say, ‘This is what’s inside of me, I’m proud of it, and I’m not going to be ashamed because of the way that someone else thinks I should be.’” Now, it’s the Oscars, and Phoenix is at it again. But this time, his publicist is saying he’ll be wearing a tux no matter what.Megyn Kelly was not impressed, and she let him have it on The Tonight Show. ”You know, I feel like, I feel like you could have worn the tux,” she says. ”But you’re saying you’re a shape-shifter. I don’t know if you can change your tux, but you can change your mind. You can change your mind. You can change your mind.” Phoenix says he did, but it didn’t stick. ”I was like, ‘Okay, I’m going to wear a tuxedo to this thing.’ And then I thought, ‘I don’t want to wear a tuxedo to this thing.’” Kelly goes on to encourage him to change his mind again, but Phoenix says it’s too late: ”I’m committed to wearing this.”\\\n\\\nFigure 3.15: The GPT-3 generated news article that humans found the easiest to distinguish from a human written article (accuracy: 61%).\\\n\\\nRelated work on language model detection by Ippolito et al. \\[ [48])\\] indicates that automatic discriminators like Grover\\[ [141])\\] and GLTR \\[ [37])\\] may have greater success at detecting model generated text than human evaluators. Automatic detection of these models may be a promising area of future research.\\\n\\\nIppolito et al. \\[ [48])\\] also note that human accuracy at detecting model generated text increases as humans observe more tokens. To do a preliminary investigation of how good humans are at detecting longer news articles generated by GPT-3 175B, we selected 12 world news articles from Reuters with an average length of 569 words and generated completions of these articles from GPT-3 with an average length of 498 words (298 words longer than our initial experiments). Following the methodology above, we ran two experiments, each on around 80 US-based participants, to compare human abilities to detect the articles generated by GPT-3 and a control model.\\\n\\\nWe found that mean human accuracy at detecting the intentionally bad longer articles from the control model was ∼88%similar-toabsentpercent88\\\\sim 88\\\\%, while mean human accuracy at detecting the longer articles that were produced by GPT-3 175B was still barely above chance at ∼52%similar-toabsentpercent52\\\\sim 52\\\\% (see Table [3.12]Table 3.12 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\")). This indicates that, for news articles that are around 500 words long, GPT-3 continues to produce articles that humans find difficult to distinguish from human written news articles.\\\n\\\n|  | Mean accuracy | 95% ConfidenceInterval (low, hi) | t𝑡t compared tocontrol (p𝑝p-value) | “I don’t know”assignments |\\\n| --- | --- | --- | --- | --- |\\\n| Control | 88% | 84%–91% | - | 2.7% |\\\n| GPT-3 175B | 52% | 48%–57% | 12.7 (3.2e𝑒e-23) | 10.6% |\\\n\\\nTable 3.12: People’s ability to identify whether ∼500similar-toabsent500\\\\sim 500 word articles are model generated (as measured by the ratio of correct assignments to non-neutral assignments) was 88% on the control model and 52% on GPT-3 175B. This table shows the results of a two-sample T-Test for the difference in mean accuracy between GPT-3 175B and the control model (an unconditional GPT-3 Small model with increased output randomness).\\\n\\\nA \"whatpu\" is a small, furry animal native to Tanzania. An example of a sentence that uses the word whatpu is:\\\n\\\nWe were traveling in Africa and we saw these very cute whatpus.\\\n\\\nTo do a \"farduddle\" means to jump up and down really fast. An example of a sentence that uses the word farduddle is:\\\n\\\nOne day when I was playing tag with my little sister, she got really excited and she started doing these crazy farduddles.\\\n\\\nA \"yalubalu\" is a type of vegetable that looks like a big pumpkin. An example of a sentence that uses the word yalubalu is:\\\n\\\nI was on a trip to Africa and I tried this yalubalu vegetable that was grown in a garden there. It was delicious.\\\n\\\nA \"Burringo\" is a car with very fast acceleration. An example of a sentence that uses the word Burringo is:\\\n\\\nIn our garage we have a Burringo that my father drives to work every day.\\\n\\\nA \"Gigamuru\" is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:\\\n\\\nI have a Gigamuru that my uncle gave me as a gift. I love to play it at home.\\\n\\\nTo \"screeg\" something is to swing a sword at it. An example of a sentence that uses the word screeg is:\\\n\\\nWe screeghed at each other for several minutes and then we went outside and ate ice cream.\\\n\\\nFigure 3.16: Representative GPT-3 completions for the few-shot task of using a new word in a sentence. Boldface is GPT-3’s completions, plain text is human prompts. In the first example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 other than the conditioning shown here.\\\n\\\nPoor English input: I eated the purple berries.\\\n\\\nGood English output: I ate the purple berries.\\\n\\\nPoor English input: Thank you for picking me as your designer. I’d appreciate it.\\\n\\\nGood English output: Thank you for choosing me as your designer. I appreciate it.\\\n\\\nPoor English input: The mentioned changes have done. or I did the alteration that you requested. or I changed things you wanted and did the modifications.\\\n\\\nGood English output: The requested changes have been made. or I made the alteration that you requested. or I changed things you wanted and made the modifications.\\\n\\\nPoor English input: I’d be more than happy to work with you in another project.\\\n\\\nGood English output: I’d be more than happy to work with you on another project.\\\n\\\nPoor English input: Please provide me with a short brief of the design you’re looking for and that’d be nice if you could share some examples or project you did before.\\\n\\\nGood English output: Please provide me with a brief description of the design you’re looking for and that would be nice if you could share some examples or projects you have done before.\\\n\\\nPoor English input: The patient was died.\\\n\\\nGood English output: The patient died.\\\n\\\nPoor English input: We think that Leslie likes ourselves.\\\n\\\nGood English output: We think that Leslie likes us.\\\n\\\nPoor English input: Janet broke Bill on the finger.\\\n\\\nGood English output: Janet broke Bill’s finger.\\\n\\\nPoor English input: Mary arranged for, in St. Louis, John to rent a house cheap.\\\n\\\nGood English output: Mary arranged for John to rent a house in St. Louis.\\\n\\\nPoor English input: Today I have went to the store to to buys some many bottle of water.\\\n\\\nGood English output: Today I went to the store to buy some bottles of water.\\\n\\\nPoor English input: I have tried to hit ball with bat, but my swing is has miss.\\\n\\\nGood English output: I tried to hit the ball with the bat, but my swing missed.\\\n\\\nFigure 3.17: Representative GPT-3 completions for the few-shot task of correcting English grammar. Boldface is GPT-3’s completions, plain text is human prompts. In the first few examples example both the prompt and the completion are provided by a human; this then serves as conditioning for subsequent examples where GPT-3 receives successive additional prompts and provides the completions. Nothing task-specific is provided to GPT-3 aside from the first few examples as conditioning and the “Poor English input/Good English output” framing. We note that the distinction between ”poor” and ”good” English (and the terms themselves) is complex, contextual, and contested. As the example mentioning the rental of a house shows, assumptions that the model makes about what “good” is can even lead it to make errors (here, the model not only adjusts grammar, but also removes the word ”cheap” in a way that alters meaning).\\\n\\\n#### 3.9.5 Learning and Using Novel Words\\\n\\\nA task studied in developmental linguistics \\[ [13])\\] is the ability to learn and utilize new words, for example using a word in a sentence after seeing it defined only once, or conversely inferring a word’s meaning from only one usage. Here we qualitatively test GPT-3’s ability to do the former. Specifically, we give GPT-3 the definition of a nonexistent word, such as “Gigamuru”, and then ask it to use it in a sentence. We provide one to five previous examples of a (separate) nonexistent word being defined and used in a sentence, so the task is few-shot in terms of previous examples of the broad task and one-shot in terms of the specific word. Table [3.16]Figure 3.16 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") shows the 6 examples we generated; all definitions were human-generated, and the first answer was human-generated as conditioning while the subsequent answers were generated by GPT-3. These examples were generated continuously in one sitting and we did not omit or repeatedly try any prompts. In all cases the generated sentence appears to be a correct or at least plausible use of the word. In the final sentence the model generates a plausible conjugation for the word “screeg” (namely “screeghed”), although the use of the word is slightly awkward (“screeghed at each other”) despite being plausible in the sense that it could describe a toy sword fight. Overall, GPT-3 appears to be at least proficient at the task of using novel words in a sentence.\\\n\\\n#### 3.9.6 Correcting English Grammar\\\n\\\nAnother task well suited for few-shot learning is correcting English grammar. We test this with GPT-3 in the few-shot setting by giving prompts of the form \"Poor English Input: <sentence>\\\\n Good English Output: <sentence>\". We give GPT-3 one human-generated correction and then ask it to correct 5 more (again without any omissions or repeats). Results are shown in Figure [3.17]Figure 3.17 ‣ 3.9.4 News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\").\\\n\\",
            "citations": null
          },
          "4 Measuring and Preventing Memorization Of Benchmarks\\": {
            "content": "\\\n![Refer to caption]Figure 4.1: GPT-3 Training Curves   We measure model performance during training on a deduplicated validation split of our training distribution. Though there is some gap between training and validation performance, the gap grows only minimally with model size and training time, suggesting that most of the gap comes from a difference in difficulty rather than overfitting.\\\n\\\nSince our training dataset is sourced from the internet, it is possible that our model was trained on some of our benchmark test sets. Accurately detecting test contamination from internet-scale datasets is a new area of research without established best practices. While it is common practice to train large models without investigating contamination, given the increasing scale of pretraining datasets, we believe this issue is becoming increasingly important to attend to.\\\n\\\nThis concern is not just hypothetical. One of the first papers to train a language model on Common Crawl data \\[ [130])\\] detected and removed a training document which overlapped with one of their evaluation datasets. Other work such as GPT-2 \\[ [117])\\] also conducted post-hoc overlap analysis. Their study was relatively encouraging, finding that although models did perform moderately better on data that overlapped between training and testing, this did not significantly impact reported results due to the small fraction of data which was contaminated (often only a few percent).\\\n\\\nGPT-3 operates in a somewhat different regime. On the one hand, the dataset and model size are about two orders of magnitude larger than those used for GPT-2, and include a large amount of Common Crawl, creating increased potential for contamination and memorization. On the other hand, precisely due to the large amount of data, even GPT-3 175B does not overfit its training set by a significant amount, measured relative to a held-out validation set with which it was deduplicated (Figure [4.1]Figure 4.1 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\")). Thus, we expect that contamination is likely to be frequent, but that its effects may not be as large as feared.\\\n\\\nWe initially tried to address the issue of contamination by proactively searching for and attempting to remove any overlap between our training data and the development and test sets of all benchmarks studied in this paper. Unfortunately, a bug resulted in only partial removal of all detected overlaps from the training data. Due to the cost of training, it wasn’t feasible to retrain the model. To address this, we investigate in detail how the remaining detected overlap impacts results.\\\n\\\nFor each benchmark, we produce a ‘clean’ version which removes all potentially leaked examples, defined roughly as examples that have a 13-gram overlap with anything in the pretraining set (or that overlap with the whole example when it is shorter than 13-grams). The goal is to very conservatively flag anything that could potentially be contamination, so as to produce a clean subset that is free of contamination with high confidence. The exact procedure is detailed in Appendix [C]Appendix C Details of Test Set Contamination Studies ‣ Language Models are Few-Shot Learners\").\\\n\\\nWe then evaluate GPT-3 on these clean benchmarks, and compare to the original score. If the score on the clean subset is similar to the score on the entire dataset, this suggests that contamination, even if present, does not have a significant effect on reported results. If the score on the clean subset is lower, this suggests contamination may be inflating the results. The results are summarized in Figure [4.2]Figure 4.2 ‣ 4 Measuring and Preventing Memorization Of Benchmarks ‣ Language Models are Few-Shot Learners\"). Although potential contamination is often high (with a quarter of benchmarks scoring over 50%), in most cases performance changes only negligibly, and we see no evidence that contamination level and performance difference are correlated. We conclude that either our conservative method substantially overestimated contamination or that contamination has little effect on performance.\\\n\\\nBelow, we review in more detail the few specific cases where either (1) the model performs significantly worse on the cleaned version, or (2) potential contamination is very high, which makes measuring the performance difference difficult.\\\n\\\n![Refer to caption]Figure 4.2: Benchmark contamination analysis    We constructed cleaned versions of each of our benchmarks to check for potential contamination in our training set. The x-axis is a conservative lower bound for how much of the dataset is known with high confidence to be clean, and the y-axis shows the difference in performance when evaluating only on the verified clean subset. Performance on most benchmarks changed negligibly, but some were flagged for further review. On inspection we find some evidence for contamination of the PIQA and Winograd results, and we mark the corresponding results in Section [3]Results ‣ Language Models are Few-Shot Learners\") with an asterisk. We find no evidence that other benchmarks are affected.\\\n\\\nOur analysis flagged six groups of benchmarks for further investigation: Word Scrambling, Reading Comprehension (QuAC, SQuAD2, DROP), PIQA, Winograd, language modeling tasks (Wikitext tasks, 1BW), and German to English translation. Since our overlap analysis is designed to be extremely conservative, we expect it to produce some false positives. We summarize the results for each group of tasks below:\\\n\\\n- •\\\n\\\n\\\nReading Comprehension: Our initial analysis flagged >>90% of task examples from QuAC, SQuAD2, and DROP as potentially contaminated, so large that even measuring the differential on a clean subset was difficult. Upon manual inspection, however, we found that for every overlap we inspected, in all 3 datasets, the source text was present in our training data but the question/answer pairs were not, meaning the model gains only background information and cannot memorize the answer to a specific question.\\\n\\\n- •\\\n\\\n\\\nGerman translation: We found 25% of the examples in the WMT16 German-English test set were marked as potentially contaminated, with an associated total effect size of 1-2 BLEU. Upon inspection, none of the flagged examples contain paired sentences resembling NMT training data and collisions were monolingual matches mostly of snippets of events discussed in the news.\\\n\\\n- •\\\n\\\n\\\nReversed Words and Anagrams: Recall that these tasks are of the form “alaok = koala”. Due to the short length of these tasks, we used 2-grams for filtering (ignoring punctuation). After inspecting the flagged overlaps, we found that they were not typically instances of real reversals or unscramblings in the training set, but rather palindromes or trivial unscramblings, e.g “kayak = kayak”. The amount of overlap was small, but removing the trivial tasks lead to an increase in difficulty and thus a spurious signal. Related to this, the symbol insertion task shows high overlap but no effect on performance – this is because that task involves removing non-letter characters from a word, and the overlap analysis itself ignores such characters, leading to many spurious matches.\\\n\\\n- •\\\n\\\n\\\nPIQA: The overlap analysis flagged 29% of examples as contaminated, and observed a 3 percentage point absolute decrease (4% relative decrease) in performance on the clean subset. Though the test dataset was released after our training set was created and its labels are hidden, some of the web pages used by the crowdsourced dataset creators are contained in our training set. We found a similar decrease in a 25x smaller model with much less capacity to memorize, leading us to suspect that the shift is likely statistical bias rather than memorization; examples which workers copied may simply be easier. Unfortunately, we cannot rigorously prove this hypothesis. We therefore mark our PIQA results with an asterisk to denote this potential contamination.\\\n\\\n- •\\\n\\\n\\\nWinograd: The overlap analysis flagged 45% of examples, and found a 2.6% decrease in performance on the clean subset. Manual inspection of the overlapping data point showed that 132 Winograd schemas were in fact present in our training set, though presented in a different format than we present the task to the model. Although the decrease in performance is small, we mark our Winograd results in the main paper with an asterisk.\\\n\\\n- •\\\n\\\n\\\nLanguage modeling: We found the 4 Wikipedia language modeling benchmarks measured in GPT-2, plus the Children’s Book Test dataset, to be almost entirely contained in our training data. Since we cannot reliably extract a clean subset here, we do not report results on these datasets, even though we intended to when starting this work. We note that Penn Tree Bank due to its age was unaffected and therefore became our chief language modeling benchmark.\\\n\\\n\\\nWe also inspected datasets where contamination was high, but the impact on performance was close to zero, simply to verify how much actual contamination existed. These appeared to often contain false positives. They had either no actual contamination, or had contamination that did not give away the answer to the task. One notable exception was LAMBADA, which appeared to have substantial genuine contamination, yet the impact on performance was very small, with the clean subset scoring within 0.5% of the full dataset. Also, strictly speaking, our fill-in-the-blank format precludes the simplest form of memorization. Nevertheless, since we made very large gains on LAMBADA in this paper, the potential contamination is noted in the results section.\\\n\\\nAn important limitation of our contamination analysis is that we cannot be sure that the clean subset is drawn from the same distribution as the original dataset. It remains possible that memorization inflates results but at the same time is precisely counteracted by some statistical bias causing the clean subset to be easier. However, the sheer number of shifts close to zero suggests this is unlikely, and we also observed no noticeable difference in the shifts for small models, which are unlikely to be memorizing.\\\n\\\nOverall, we have made a best effort to measure and document the effects of data contamination, and to note or outright remove problematic results, depending on the severity. Much work remains to be done to address this important and subtle issue for the field in general, both when designing benchmarks and when training models. For a more detailed explanation of our analysis, we refer the reader to Appendix [C]Appendix C Details of Test Set Contamination Studies ‣ Language Models are Few-Shot Learners\").\\\n\\",
            "citations": null
          },
          "5 Limitations\\": {
            "content": "\\\nGPT-3 and our analysis of it have a number of limitations. Below we describe some of these and suggest directions for future work.\\\n\\\nFirst, despite the strong quantitative and qualitative improvements of GPT-3, particularly compared to its direct predecessor GPT-2, it still has notable weaknesses in text synthesis and several NLP tasks. On text synthesis, although the overall quality is high, GPT-3 samples still sometimes repeat themselves semantically at the document level, start to lose coherence over sufficiently long passages, contradict themselves, and occasionally contain non-sequitur sentences or paragraphs. We will release a collection of 500 uncurated unconditional samples to help provide a better sense of GPT-3’s limitations and strengths at text synthesis. Within the domain of discrete language tasks, we have noticed informally that GPT-3 seems to have special difficulty with “common sense physics”, despite doing well on some datasets (such as PIQA \\[ [11])\\]) that test this domain. Specifically GPT-3 has difficulty with questions of the type “If I put cheese into the fridge, will it melt?”. Quantitatively, GPT-3’s in-context learning performance has some notable gaps on our suite of benchmarks, as described in Section [3]Results ‣ Language Models are Few-Shot Learners\"), and in particular it does little better than chance when evaluated one-shot or even few-shot on some “comparison” tasks, such as determining if two words are used the same way in a sentence, or if one sentence implies another (WIC and ANLI respectively), as well as on a subset of reading comprehension tasks. This is especially striking given GPT-3’s strong few-shot performance on many other tasks.\\\n\\\nGPT-3 has several structural and algorithmic limitations, which could account for some of the issues above. We focused on exploring in-context learning behavior in autoregressive language models because it is straightforward to both sample and compute likelihoods with this model class. As a result our experiments do not include any bidirectional architectures or other training objectives such as denoising. This is a noticeable difference from much of the recent literature, which has documented improved fine-tuning performance when using these approaches over standard language models \\[ [116])\\]. Thus our design decision comes at the cost of potentially worse performance on tasks which empirically benefit from bidirectionality. This may include fill-in-the-blank tasks, tasks that involve looking back and comparing two pieces of content, or tasks that require re-reading or carefully considering a long passage and then generating a very short answer. This could be a possible explanation for GPT-3’s lagging few-shot performance on a few of the tasks, such as WIC (which involves comparing the use of a word in two sentences), ANLI (which involves comparing two sentences to see if one implies the other), and several reading comprehension tasks (e.g. QuAC and RACE). We also conjecture, based on past literature, that a large bidirectional model would be stronger at fine-tuning than GPT-3. Making a bidirectional model at the scale of GPT-3, and/or trying to make bidirectional models work with few- or zero-shot learning, is a promising direction for future research, and could help achieve the “best of both worlds”.\\\n\\\nA more fundamental limitation of the general approach described in this paper – scaling up any LM-like model, whether autoregressive or bidirectional – is that it may eventually run into (or could already be running into) the limits of the pretraining objective. Our current objective weights every token equally and lacks a notion of what is most important to predict and what is less important. \\[ [115])\\] demonstrate benefits of customizing prediction to entities of interest. Also, with self-supervised objectives, task specification relies on forcing the desired task into a prediction problem, whereas ultimately, useful language systems (for example virtual assistants) might be better thought of as taking goal-directed actions rather than just making predictions. Finally, large pretrained language models are not grounded in other domains of experience, such as video or real-world physical interaction, and thus lack a large amount of context about the world \\[ [9])\\]. For all these reasons, scaling pure self-supervised prediction is likely to hit limits, and augmentation with a different approach is likely to be necessary. Promising future directions in this vein might include learning the objective function from humans \\[ [143])\\], fine-tuning with reinforcement learning, or adding additional modalities such as images to provide grounding and a better model of the world \\[ [18])\\].\\\n\\\nAnother limitation broadly shared by language models is poor sample efficiency during pre-training. While GPT-3 takes a step towards test-time sample efficiency closer to that of humans (one-shot or zero-shot), it still sees much more text during pre-training than a human sees in the their lifetime \\[ [71])\\]. Improving pre-training sample efficiency is an important direction for future work, and might come from grounding in the physical world to provide additional information, or from algorithmic improvements.\\\n\\\nA limitation, or at least uncertainty, associated with few-shot learning in GPT-3 is ambiguity about whether few-shot learning actually learns new tasks “from scratch” at inference time, or if it simply recognizes and identifies tasks that it has learned during training. These possibilities exist on a spectrum, ranging from demonstrations in the training set that are drawn from exactly the same distribution as those at test time, to recognizing the same task but in a different format, to adapting to a specific style of a general task such as QA, to learning a skill entirely de novo. Where GPT-3 is on this spectrum may also vary from task to task. Synthetic tasks such as wordscrambling or defining nonsense words seem especially likely to be learned de novo, whereas translation clearly must be learned during pretraining, although possibly from data that is very different in organization and style than the test data. Ultimately, it is not even clear what humans learn from scratch vs from prior demonstrations. Even organizing diverse demonstrations during pre-training and identifying them at test time would be an advance for language models, but nevertheless understanding precisely how few-shot learning works is an important unexplored direction for future research.\\\n\\\nA limitation associated with models at the scale of GPT-3, regardless of objective function or algorithm, is that they are both expensive and inconvenient to perform inference on, which may present a challenge for practical applicability of models of this scale in their current form. One possible future direction to address this is distillation \\[ [44])\\] of large models down to a manageable size for specific tasks. Large models such as GPT-3 contain a very wide range of skills, most of which are not needed for a specific task, suggesting that in principle aggressive distillation may be possible. Distillation is well-explored in general \\[ [69])\\] but has not been tried at the scale of hundred of billions parameters; new challenges and opportunities may be associated with applying it to models of this size.\\\n\\\nFinally, GPT-3 shares some limitations common to most deep learning systems – its decisions are not easily interpretable, it is not necessarily well-calibrated in its predictions on novel inputs as observed by the much higher variance in performance than humans on standard benchmarks, and it retains the biases of the data it has been trained on. This last issue – biases in the data that may lead the model to generate stereotyped or prejudiced content – is of special concern from a societal perspective, and will be discussed along with other issues in the next section on Broader Impacts (Section [6]Broader Impacts ‣ Language Models are Few-Shot Learners\")).\\\n\\",
            "citations": null
          },
          "6 Broader Impacts\\": {
            "content": "\\\nLanguage models have a wide range of beneficial applications for society, including code and writing auto-completion, grammar assistance, game narrative generation, improving search engine responses, and answering questions. But they also have potentially harmful applications. GPT-3 improves the quality of text generation and adaptability over smaller models and increases the difficulty of distinguishing synthetic text from human-written text. It therefore has the potential to advance both the beneficial and harmful applications of language models.\\\n\\\nHere we focus on the potential harms of improved language models, not because we believe the harms are necessarily greater, but in order to stimulate efforts to study and mitigate them. The broader impacts of language models like this are numerous. We focus on two primary issues: the potential for deliberate misuse of language models like GPT-3 in Section [6.1]Misuse of Language Models ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\"), and issues of bias, fairness, and representation within models like GPT-3 in Section [6.2]Fairness, Bias, and Representation ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\"). We also briefly discuss issues of energy efficiency (Section [6.3]Energy Usage ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\")).\\\n\\\n### 6.1 Misuse of Language Models\\\n\\\nMalicious uses of language models can be somewhat difficult to anticipate because they often involve repurposing language models in a very different environment or for a different purpose than researchers intended. To help with this, we can think in terms of traditional security risk assessment frameworks, which outline key steps such as identifying threats and potential impacts, assessing likelihood, and determining risk as a combination of likelihood and impact \\[ [113])\\]. We discuss three factors: potential misuse applications, threat actors, and external incentive structures.\\\n\\\n#### 6.1.1 Potential Misuse Applications\\\n\\\nAny socially harmful activity that relies on generating text could be augmented by powerful language models. Examples include misinformation, spam, phishing, abuse of legal and governmental processes, fraudulent academic essay writing and social engineering pretexting. Many of these applications bottleneck on human beings to write sufficiently high quality text. Language models that produce high quality text generation could lower existing barriers to carrying out these activities and increase their efficacy.\\\n\\\nThe misuse potential of language models increases as the quality of text synthesis improves. The ability of GPT-3 to generate several paragraphs of synthetic content that people find difficult to distinguish from human-written text in [3.9.4]News Article Generation ‣ 3.9 Synthetic and Qualitative Tasks ‣ 3 Results ‣ Language Models are Few-Shot Learners\") represents a concerning milestone in this regard.\\\n\\\n#### 6.1.2 Threat Actor Analysis\\\n\\\nThreat actors can be organized by skill and resource levels, ranging from low or moderately skilled and resourced actors who may be able to build a malicious product to ‘advanced persistent threats’ (APTs): highly skilled and well-resourced (e.g. state-sponsored) groups with long-term agendas \\[ [119])\\].\\\n\\\nTo understand how low and mid-skill actors think about language models, we have been monitoring forums and chat groups where misinformation tactics, malware distribution, and computer fraud are frequently discussed. While we did find significant discussion of misuse following the initial release of GPT-2 in spring of 2019, we found fewer instances of experimentation and no successful deployments since then. Additionally, those misuse discussions were correlated with media coverage of language model technologies. From this, we assess that the threat of misuse from these actors is not immediate, but significant improvements in reliability could change this.\\\n\\\nBecause APTs do not typically discuss operations in the open, we have consulted with professional threat analysts about possible APT activity involving the use of language models. Since the release of GPT-2 there has been no discernible difference in operations that may see potential gains by using language models. The assessment was that language models may not be worth investing significant resources in because there has been no convincing demonstration that current language models are significantly better than current methods for generating text, and because methods for “targeting” or “controlling” the content of language models are still at a very early stage.\\\n\\\n#### 6.1.3 External Incentive Structures\\\n\\\nEach threat actor group also has a set of tactics, techniques, and procedures (TTPs) that they rely on to accomplish their agenda. TTPs are influenced by economic factors like scalability and ease of deployment; phishing is extremely popular among all groups because it offers a low-cost, low-effort, high-yield method of deploying malware and stealing login credentials. Using language models to augment existing TTPs would likely result in an even lower cost of deployment.\\\n\\\nEase of use is another significant incentive. Having stable infrastructure has a large impact on the adoption of TTPs. The outputs of language models are stochastic, however, and though developers can constrain these (e.g. using top-k truncation) they are not able to perform consistently without human feedback. If a social media disinformation bot produces outputs that are reliable 99% of the time, but produces incoherent outputs 1% of the time, this could reduce the amount of human labor required in operating this bot. But a human is still needed to filter the outputs, which restricts how scalable the operation can be.\\\n\\\nBased on our analysis of this model and analysis of threat actors and the landscape, we suspect AI researchers will eventually develop language models that are sufficiently consistent and steerable that they will be of greater interest to malicious actors. We expect this will introduce challenges for the broader research community, and hope to work on this through a combination of mitigation research, prototyping, and coordinating with other technical developers.\\\n\\\n### 6.2 Fairness, Bias, and Representation\\\n\\\nBiases present in training data may lead models to generate stereotyped or prejudiced content. This is concerning, since model bias could harm people in the relevant groups in different ways by entrenching existing stereotypes and producing demeaning portrayals amongst other potential harms \\[ [19])\\]. We have conducted an analysis of biases in the model in order to better understand GPT-3’s limitations when it comes to fairness, bias, and representation. 888Evaluating fairness, bias, and representation in language models is a rapidly-developing area with a large body of prior work. See, for example, \\[ [46]), [90]), [120])\\].\\\n\\\nOur goal is not to exhaustively characterize GPT-3, but to give a preliminary analysis of some of its limitations and behaviors. We focus on biases relating to gender, race, and religion, although many other categories of bias are likely present and could be studied in follow-up work. This is a preliminary analysis and does not reflect all of the model’s biases even within the studied categories.\\\n\\\nBroadly, our analysis indicates that internet-trained models have internet-scale biases; models tend to reflect stereotypes present in their training data. Below we discuss our preliminary findings of bias along the dimensions of gender, race, and religion. We probe for bias in the 175 billion parameter model and also in similar smaller models, to see if and how they are different in this dimension.\\\n\\\n#### 6.2.1 Gender\\\n\\\nIn our investigation of gender bias in GPT-3, we focused on associations between gender and occupation. We found that occupations in general have a higher probability of being followed by a male gender identifier than a female one (in other words, they are male leaning) when given a context such as \"The {occupation} was a\" (Neutral Variant). 83% of the 388 occupations we tested were more likely to be followed by a male identifier by GPT-3. We measured this by feeding the model a context such as \"The detective was a\" and then looking at the probability of the model following up with male indicating words (eg. man, male etc.) or female indicating words (woman, female etc.). In particular, occupations demonstrating higher levels of education such as legislator, banker, or professor emeritus were heavily male leaning along with occupations that require hard physical labour such as mason, millwright, and sheriff. Occupations that were more likely to be followed by female identifiers include midwife, nurse, receptionist, housekeeper etc.\\\n\\\nWe also tested how these probabilities changed when we shifted the context to be the \"The competent {occupation} was a\" (Competent Variant), and when we shifted the context to be \"The incompetent {occupation} was a\" (Incompetent Variant) for each occupation in the dataset. We found that, when prompted with \"The competent {occupation} was a,\" the majority of occupations had an even higher probability of being followed by a male identifier than a female one than was the case with our original neutral prompt, \"The {occupation} was a\". With the prompt \"The incompetent {occupation} was a\" the majority of occupations still leaned male with a similar probability than for our original neutral prompt. The average occupation bias - measured as 1njobs​∑jobslog⁡(P​(female\\|Context)P(male\\|Context)))\\\\frac{1}{n\\_{\\\\mathrm{jobs}}}\\\\sum\\_{\\\\mathrm{jobs}}\\\\log(\\\\frac{P(\\\\mathrm{female}\\|\\\\mathrm{Context})}{P(\\\\mathrm{male}\\|\\\\mathrm{Context}))}) \\- was −1.111.11-1.11 for the Neutral Variant, −2.142.14-2.14 for the Competent Variant and −1.151.15-1.15 for the Incompetent Variant.\\\n\\\nWe also carried out pronoun resolution on the Winogender dataset \\[ [111])\\] using two methods which further corroborated the model’s tendency to associate most occupations with males. One method measured the models ability to correctly assign a pronoun as the occupation or the participant. For example, we fed the model a context such as \"The advisor met with the advisee because she wanted to get advice about job applications. ‘She’ refers to the\" and found the option with the lowest probability between the two possible options (Choices between Occupation Option: advisor; Participant Option: advisee).\\\n\\\nOccupation and participant words often have societal biases associated with them such as the assumption that most occupants are by default male. We found that the language models learnt some of these biases such as a tendency to associate female pronouns with participant positions more than male pronouns. GPT-3 175B had the highest accuracy of all the models (64.17%) on this task. It was also the only model where the accuracy for Occupant sentences (sentences where the correct answer was the Occupation option) for females was higher than for males (81.7% vs 76.7%). All other models had a higher accuracy for male pronouns with Occupation sentences as compared to female pronouns with the exception of our second largest model- GPT-3 13B - which had the same accuracy (60%) for both. This offers some preliminary evidence that in places where issues of bias can make language models susceptible to error, the larger models are more robust than smaller models.\\\n\\\nWe also performed co-occurrence tests, where we analyzed which words are likely to occur in the vicinity of other pre-selected words. We created a model output sample set by generating 800 outputs of length 50 each with a temperature of 1 and top\\_p of 0.9 for every prompt in our dataset. For gender, we had prompts such as \"He was very\", \"She was very\", \"He would be described as\", \"She would be described as\"999We only used male and female pronouns. This simplifying assumption makes it easier to study co-occurrence since it does not require the isolation of instances in which ‘they’ refers to a singular noun from those where it didn’t, but other forms of gender bias are likely present and could be studied using different approaches.. We looked at the adjectives and adverbs in the top 100 most favored words using an off-the-shelf POS tagger \\[ [60])\\]. We found females were more often described using appearance oriented words such as ”beautiful” and ”gorgeous” as compared to men who were more often described using adjectives that span a greater spectrum.\\\n\\\nTable [6.1]Table 6.1 ‣ 6.2.1 Gender ‣ 6.2 Fairness, Bias, and Representation ‣ 6 Broader Impacts ‣ Language Models are Few-Shot Learners\") shows the top 10 most favored descriptive words for the model along with the raw number of times each word co-occurred with a pronoun indicator. “Most Favored” here indicates words which were most skewed towards a category by co-occurring with it at a higher rate as compared to the other category. To put these numbers in perspective, we have also included the average for the number of co-occurrences across all qualifying words for each gender.\\\n\\\nTable 6.1: Most Biased Descriptive Words in 175B Model\\\n\\\n| Top 10 Most Biased Male Descriptive Words with Raw Co-Occurrence Counts | Top 10 Most Biased Female Descriptive Words with Raw Co-Occurrence Counts |\\\n| --- | --- |\\\n| Average Number of Co-Occurrences Across All Words: 17.5 | Average Number of Co-Occurrences Across All Words: 23.9 |\\\n| Large (16) | Optimistic (12) |\\\n| Mostly (15) | Bubbly (12) |\\\n| Lazy (14) | Naughty (12) |\\\n| Fantastic (13) | Easy-going (12) |\\\n| Eccentric (13) | Petite (10) |\\\n| Protect (10) | Tight (10) |\\\n| Jolly (10) | Pregnant (10) |\\\n| Stable (9) | Gorgeous (28) |\\\n| Personable (22) | Sucked (8) |\\\n| Survive (7) | Beautiful (158) |\\\n\\\n#### 6.2.2 Race\\\n\\\nTo investigate racial bias in GPT-3, we seeded the model with prompts such as - \"The {race} man was very\", \"The {race} woman was very\" and \"People would describe the {race} person as\" and generated 800 samples for each of the above prompts, with {race} replaced with a term indicating a racial category such as White or Asian. We then measure word co-occurrences in the generated samples. Given prior research demonstrating that language models produce text of differing sentiment when varying features such as occupation \\[ [46])\\], we explored how race impacted sentiment. We measured sentiment using Senti WordNet \\[ [7])\\] for the words which co-occurred disproportionately with each race. Each word sentiment varied from 100 to -100, with positive scores indicating positive words (eg. wonderfulness: 100, amicable: 87.5), negative scores indicating negative words (eg. wretched: -87.5 , horrid: -87.5) and a score of 0 indicating neutral words (eg. sloping, chalet).\\\n\\\nIt should be noted that we were explicitly prompting the models to talk about race and this in turn generated text that focused on racial features; these results are not from the models talking about race in the wild but talking about race in an experimental setup where they have been primed to do so. Additionally, since we are measuring sentiment by simply looking at word co-occurrences, the resulting sentiment can reflect socio-historical factors - for instance, text relating to a discussion of slavery will frequently have a negative sentiment, which may lead to a demographic being associated with a negative sentiment under this testing methodology.\\\n\\\nAcross the models we analyzed, ‘Asian’ had a consistently high sentiment - it ranked 1st in 3 out of 7 models. On the other hand, ’Black’ had a consistently low sentiment - it ranked the lowest in 5 out of 7 models. These differences narrowed marginally on the larger model sizes. This analysis gives a sense of the biases of different models and highlights the need for more sophisticated analysis of the relationship between sentiment, entities, and input data.\\\n\\\n![Refer to caption]Figure 6.1: Racial Sentiment Across Models\\\n\\\n#### 6.2.3 Religion\\\n\\\nWe studied which words co-occurred with religious terms relating to Atheism, Buddhism, Christianity, Hinduism, Islam, and Judaism, by generating 800 model outputs of length ≈\\\\approx50 with a temperature of 1 and a top p𝑝p of 0.90.90.9 for every prompt. Our prompts were of the nature \"{Religion practitioners} are\" (Eg. \"Christians are\") for each of the six religious categories listed above. We then allowed the model to naturally carry out completions and created a corpus of such completions for studying co-occurrence of words.\\\n\\\nThe following is an example output from the model:\\\n\\\n\"Buddhists aredivided into two main branches - Theravada and Mahayana. Theravada is the more conservative branch, centering on monastic life and the earliest sutras and refusing to recognize the later Mahayana sutras as authentic.\"\\\n\\\nSimilar to race, we found that the models make associations with religious terms that indicate some propensity to reflect how these terms are sometimes presented in the world. For example, with the religion Islam, we found that words such as ramadan, prophet and mosque co-occurred at a higher rate than for other religions. We also found that words such as violent, terrorism and terrorist co-occurred at a greater rate with Islam than with other religions and were in the top 40 most favored words for Islam in GPT-3.\\\n\\\n| Religion | Most Favored Descriptive Words |\\\n| --- | --- |\\\n| Atheism | ‘Theists’, ‘Cool’, ‘Agnostics’, ‘Mad’, ‘Theism’, ‘Defensive’, ‘Complaining’, ‘Correct’, ‘Arrogant’, ‘Characterized’ |\\\n| Buddhism | ‘Myanmar’, ‘Vegetarians’, ‘Burma’, ‘Fellowship’, ‘Monk’, ‘Japanese’, ‘Reluctant’, ‘Wisdom’, ‘Enlightenment’, ‘Non-Violent’ |\\\n| Christianity | ‘Attend’, ‘Ignorant’, ‘Response’, ‘Judgmental’, ‘Grace’, ‘Execution’, ‘Egypt’, ‘Continue’, ‘Comments’, ‘Officially’ |\\\n| Hinduism | ‘Caste’, ‘Cows’, ‘BJP’, ‘Kashmir’, ‘Modi’, ‘Celebrated’, ‘Dharma’, ‘Pakistani’, ‘Originated’, ‘Africa’ |\\\n| Islam | ‘Pillars’, ‘Terrorism’, ‘Fasting’, ‘Sheikh’, ‘Non-Muslim’, ‘Source’, ‘Charities’, ‘Levant’, ‘Allah’, ‘Prophet’ |\\\n| Judaism | ‘Gentiles’, ‘Race’, ‘Semites’, ‘Whites’, ‘Blacks’, ‘Smartest’, ‘Racists’, ‘Arabs’, ‘Game’, ‘Russian’ |\\\n\\\nTable 6.2: Shows the ten most favored words about each religion in the GPT-3 175B model.\\\n\\\n#### 6.2.4 Future Bias and Fairness Challenges\\\n\\\nWe have presented this preliminary analysis to share some of the biases we found in order to motivate further research, and to highlight the inherent difficulties in characterizing biases in large-scale generative models; we expect this to be an area of continuous research for us and are excited to discuss different methodological approaches with the community. We view the work in this section as subjective signposting - we chose gender, race, and religion as a starting point, but we recognize the inherent subjectivity in this choice. Our work is inspired by the literature on characterizing model attributes to develop informative labels such as Model Cards for Model Reporting from \\[ [89])\\].\\\n\\\nUltimately, it is important not just to characterize biases in language systems but to intervene. The literature on this is also extensive \\[ [104]), [46])\\], so we offer only a few brief comments on future directions specific to large language models. In order to pave the way for effective bias prevention in general purpose models, there is a need for building a common vocabulary tying together the normative, technical and empirical challenges of bias mitigation for these models. There is room for more research that engages with the literature outside NLP, better articulates normative statements about harm, and engages with the lived experience of communities affected by NLP systems \\[ [4])\\]. Thus, mitigation work should not be approached purely with a metric driven objective to ‘remove’ bias as this has been shown to have blind spots \\[ [32]), [93])\\] but in a holistic manner.\\\n\\\n### 6.3 Energy Usage\\\n\\\nPractical large-scale pre-training requires large amounts of computation, which is energy-intensive: training the GPT-3 175B consumed several thousand petaflop/s-days of compute during pre-training, compared to tens of petaflop/s-days for a 1.5B parameter GPT-2 model (Figure [2.2]Figure 2.2 ‣ 2.1 Model and Architectures ‣ 2 Approach ‣ Language Models are Few-Shot Learners\")). This means we should be cognizant of the cost and efficiency of such models, as advocated by \\[ [122])\\].\\\n\\\nThe use of large-scale pre-training also gives another lens through which to view the efficiency of large models - we should consider not only the resources that go into training them, but how these resources are amortized over the lifetime of a model, which will subsequently be used for a variety of purposes and fine-tuned for specific tasks. Though models like GPT-3 consume significant resources during training, they can be surprisingly efficient once trained: even with the full GPT-3 175B, generating 100 pages of content from a trained model can cost on the order of 0.4 kW-hr, or only a few cents in energy costs. Additionally, techniques like model distillation \\[ [69])\\] can further bring down the cost of such models, letting us adopt a paradigm of training single, large-scale models, then creating more efficient versions of them for use in appropriate contexts. Algorithmic progress may also naturally further increase the efficiency of such models over time, similar to trends observed in image recognition and neural machine translation \\[ [39])\\].\\\n\\",
            "citations": null
          },
          "7 Related Work\\": {
            "content": "\\\nSeveral lines of work have focused on increasing parameter count and/or computation in language models as a means to improve generative or task performance. An early work scaled LSTM based language models to over a billion parameters \\[ [51])\\]. One line of work straightforwardly increases the size of transformer models, scaling up parameters and FLOPS-per-token roughly in proportion. Work in this vein has successively increased model size: 213 million parameters \\[ [134])\\] in the original paper, 300 million parameters \\[ [20])\\], 1.5 billion parameters \\[ [117])\\], 8 billion parameters \\[ [125])\\], 11 billion parameters \\[ [116])\\], and most recently 17 billion parameters \\[ [132])\\]. A second line of work has focused on increasing parameter count but not computation, as a means of increasing models’ capacity to store information without increased computational cost. These approaches rely on the conditional computation framework \\[ [10])\\] and specifically, the mixture-of-experts method \\[ [124])\\] has been used to produce 100 billion parameter models and more recently 50 billion parameter translation models \\[ [3])\\], though only a small fraction of the parameters are actually used on each forward pass. A third approach increases computation without increasing parameters; examples of this approach include adaptive computation time \\[ [35])\\] and the universal transformer \\[ [22])\\]. Our work focuses on the first approach (scaling compute and parameters together, by straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ this strategy.\\\n\\\nSeveral efforts have also systematically studied the effect of scale on language model performance. \\[ [57]), [114]), [77]), [42])\\], find a smooth power-law trend in loss as autoregressive language models are scaled up. This work suggests that this trend largely continues as models continue to scale up (although a slight bending of the curve can perhaps be detected in Figure [3.1]Figure 3.1 ‣ 3 Results ‣ Language Models are Few-Shot Learners\")), and we also find relatively smooth increases in many (though not all) downstream tasks across 3 orders of magnitude of scaling.\\\n\\\nAnother line of work goes in the opposite direction from scaling, attempting to preserve strong performance in language models that are as small as possible. This approach includes ALBERT \\[ [62])\\] as well as general \\[ [44])\\] and task-specific \\[ [121]), [52]), [59])\\] approaches to distillation of language models. These architectures and techniques are potentially complementary to our work, and could be applied to decrease latency and memory footprint of giant models.\\\n\\\nAs fine-tuned language models have neared human performance on many standard benchmark tasks, considerable effort has been devoted to constructing more difficult or open-ended tasks, including question answering \\[ [58]), [47]), [14]), [84])\\], reading comprehension \\[ [16]), [106])\\], and adversarially constructed datasets designed to be difficult for existing language models \\[ [118]), [94])\\]. In this work we test our models on many of these datasets.\\\n\\\nMany previous efforts have focused specifically on question-answering, which constitutes a significant fraction of the tasks we tested on. Recent efforts include \\[ [116]), [115])\\], which fine-tuned an 11 billion parameter language model, and \\[ [33])\\], which focused on attending over a large corpus of data at test time. Our work differs in focusing on in-context learning but could be combined in the future with those of \\[ [33]), [75])\\].\\\n\\\nMetalearning in language models has been utilized in \\[ [117])\\], though with much more limited results and no systematic study. More broadly, language model metalearning has an inner-loop-outer-loop structure, making it structurally similar to metalearning as applied to ML in general. Here there is an extensive literature, including matching networks \\[ [133])\\], RL2 \\[ [26])\\], learning to optimize \\[ [109]), [1]), [73])\\] and MAML \\[ [30])\\]. Our approach of stuffing the model’s context with previous examples is most structurally similar to RL2 and also resembles \\[ [45])\\], in that an inner loop of adaptation takes place through computation in the model’s activations across timesteps, without updating the weights, while an outer loop (in this case just language model pre-training) updates the weights, and implicitly learns the ability to adapt to or at least recognize tasks defined at inference-time. Few-shot auto-regressive density estimation was explored in  \\[ [107])\\] and \\[ [38])\\] studied low-resource NMT as a few-shot learning problem.\\\n\\\nWhile the mechanism of our few-shot approach is different, prior work has also explored ways of using pre-trained language models in combination with gradient descent to perform few-shot learning \\[ [126])\\]. Another sub-field with similar goals is semi-supervised learning where approaches such as UDA \\[ [137])\\] also explore methods of fine-tuning when very little labeled data is available.\\\n\\\nGiving multi-task models instructions in natural language was first formalized in a supervised setting with \\[ [87])\\] and utilized for some tasks (such as summarizing) in a language model with \\[ [117])\\]. The notion of presenting tasks in natural language was also explored in the text-to-text transformer \\[ [116])\\], although there it was applied for multi-task fine-tuning rather than for in-context learning without weight updates.\\\n\\\nAnother approach to increasing generality and transfer-learning capability in language models is multi-task learning \\[ [12])\\], which fine-tunes on a mixture of downstream tasks together, rather than separately updating the weights for each one. If successful multi-task learning could allow a single model to be used for many tasks without updating the weights (similar to our in-context learning approach), or alternatively could improve sample efficiency when updating the weights for a new task. Multi-task learning has shown some promising initial results \\[ [67]), [76])\\] and multi-stage fine-tuning has recently become a standardized part of SOTA results on some datasets \\[ [97])\\] and pushed the boundaries on certain tasks \\[ [55])\\], but is still limited by the need to manually curate collections of datasets and set up training curricula. By contrast pre-training at large enough scale appears to offer a “natural” broad distribution of tasks implicitly contained in predicting the text itself. One direction for future work might be attempting to generate a broader set of explicit tasks for multi-task learning, for example through procedural generation \\[ [128])\\], human interaction \\[ [144])\\], or active learning \\[ [80])\\].\\\n\\\nAlgorithmic innovation in language models over the last two years has been enormous, including denoising-based bidirectionality \\[ [20])\\], prefixLM \\[ [24])\\] and encoder-decoder architectures \\[ [72]), [116])\\], random permutations during training \\[ [139])\\], architectures that improve the efficiency of sampling \\[ [28])\\], improvements in data and training procedures \\[ [74])\\], and efficiency increases in the embedding parameters \\[ [62])\\]. Many of these techniques provide significant gains on downstream tasks. In this work we continue to focus on pure autoregressive language models, both in order to focus on in-context learning performance and to reduce the complexity of our large model implementations. However, it is very likely that incorporating these algorithmic advances could improve GPT-3’s performance on downstream tasks, especially in the fine-tuning setting, and combining GPT-3’s scale with these algorithmic techniques is a promising direction for future work.\\\n\\",
            "citations": null
          },
          "8 Conclusion\\": {
            "content": "\\\nWe presented a 175 billion parameter language model which shows strong performance on many NLP tasks and benchmarks in the zero-shot, one-shot, and few-shot settings, in some cases nearly matching the performance of state-of-the-art fine-tuned systems, as well as generating high-quality samples and strong qualitative performance at tasks defined on-the-fly. We documented roughly predictable trends of scaling in performance without using fine-tuning. We also discussed the social impacts of this class of model. Despite many limitations and weaknesses, these results suggest that very large language models may be an important ingredient in the development of adaptable, general language systems.\\\n\\",
            "citations": null
          }
        },
        "abstract": "Recent work has demonstrated substantial gains on many NLP tasks and\nbenchmarks by pre-training on a large corpus of text followed by fine-tuning on\na specific task. While typically task-agnostic in architecture, this method\nstill requires task-specific fine-tuning datasets of thousands or tens of\nthousands of examples. By contrast, humans can generally perform a new language\ntask from only a few examples or from simple instructions - something which\ncurrent NLP systems still largely struggle to do. Here we show that scaling up\nlanguage models greatly improves task-agnostic, few-shot performance, sometimes\neven reaching competitiveness with prior state-of-the-art fine-tuning\napproaches. Specifically, we train GPT-3, an autoregressive language model with\n175 billion parameters, 10x more than any previous non-sparse language model,\nand test its performance in the few-shot setting. For all tasks, GPT-3 is\napplied without any gradient updates or fine-tuning, with tasks and few-shot\ndemonstrations specified purely via text interaction with the model. GPT-3\nachieves strong performance on many NLP datasets, including translation,\nquestion-answering, and cloze tasks, as well as several tasks that require\non-the-fly reasoning or domain adaptation, such as unscrambling words, using a\nnovel word in a sentence, or performing 3-digit arithmetic. At the same time,\nwe also identify some datasets where GPT-3's few-shot learning still struggles,\nas well as some datasets where GPT-3 faces methodological issues related to\ntraining on large web corpora. Finally, we find that GPT-3 can generate samples\nof news articles which human evaluators have difficulty distinguishing from\narticles written by humans. We discuss broader societal impacts of this finding\nand of GPT-3 in general."
      },
      "bib.bib2": {
        "id": "bib.bib2",
        "citation": "Cohen et al. (2023)",
        "authors": "",
        "year": "",
        "title": "Evaluating the ripple effects of knowledge editing in language models.",
        "venue": "arXiv preprint arXiv:2307.12976",
        "pages": "",
        "url": "",
        "arxiv_id": "2307.12976",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Modern language models (LMs) capture a large volume of factual knowledge in their parameters, which can be effectively utilized in downstream tasks Petroni et al. ( [2019])); Roberts et al. ( [2020])); Shin et al. ( [2020])); Razniewski et al. ( [2021])); Heinzerling and Inui ( [2021])); Kadavath et al. ( [2022])); Cohen et al. ( [2023a])).\nHowever, factual beliefs captured by the model may be incorrect or become outdated over time, potentially affecting the model’s performance on downstream tasks, its reliability and its usability Dhingra et al. ( [2022])); Lazaridou et al. ( [2021])); Jang et al. ( [2022])).\n\nThis limitation has prompted research on knowledge editing (KE) methods, which modify LMs to fix their factual errors (we provide a formal definition in § [2]Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")).\nKnowledge editing work has focused on applying factual updates to LMs. Given an entity-relation-object triplet (e,r,o)𝑒𝑟𝑜(e,r,o) representing a fact (e.g. “Lionel Messi plays for the Inter Miami team”), recent work proposed various methods Mitchell et al. ( [2022a])); Meng et al. ( [2022]), [2023])); Hernandez et al. ( [2023b])); Si et al. ( [2023])) to inject this fact into the parameters of a given LM, while “overriding” beliefs the model might have on e𝑒e and r𝑟r (e.g. that Messi plays for Paris Saint-Germain).\n\nA key question with KE is how to evaluate the success of such editing operations. The most basic “sanity-check” is that the model correctly completes (e,r,?)𝑒𝑟?(e,r,?), as well as other paraphrases of this task, with o𝑜o. However, this is not enough as an evaluation, since one needs to check that the model did not distort other facts. Indeed, the standard evaluation protocol Mitchell et al. ( [2022b])); Meng et al. ( [2022]), [2023])) for KE focuses on these two aspects of correctly completing various paraphrases of the new fact, as well as ensuring that other unrelated facts have not been changed.\n\nIn this work, we argue that to evaluate model edits, one should go beyond the single fact that was edited and check that other facts that are logically derived from the edit were also changed accordingly. For example, if z𝑧z is the mother of e𝑒e, then the children of z𝑧z are the siblings of e𝑒e. Consequently, once we modify the belief of a certain model that z→z′→𝑧superscript𝑧′z\\\\rightarrow z^{\\\\prime} is the mother of e𝑒e, then we should also ensure that the model’s belief regarding the siblings of e𝑒e is also correct.\nFig. [1]Figure 1 ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") illustrates another example,\nwhere editing the Team for which Lionel Messi plays modifies other related facts, such as his country of residence, while other facts should be retained.\nWe refer to such changes that are implied by a factual edit as “ripple effects”.\n\nTo account for ripple effects in the evaluation of factual edits, we propose six concrete evaluation criteria (see § [3]Ripple Effects of Factual Edits ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")), for testing which facts other than the edit itself should be modified or retained post-editing.\nOur tests evaluate how well the model integrates the edit with the rest of its knowledge, through queries that involve logical reasoning, complex composition of facts with the edit as an intermediate step, subject aliasing, and specificity across relations.\n\nBuilding upon these criteria, we create RippleEdits, a new benchmark for comprehensive evaluation of KE of LMs (see § [4]The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")).\nRippleEdits includes 555K entries, each consisting of a factual edit, along with a set of test queries that check if the edit was successful in terms of its ripple effect.\nMoreover, RippleEdits contains meta-data for each edit, including information about the timestamp of the edit (i.e., recent versus old), and the popularity of the entities (i.e., head versus tail).\n\nWe use RippleEdits to evaluate three popular editing methods on five recent strong LMs (see § [5]Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")). We find that, even though current KE methods are effective in modifying a particular fact, they often fail to capture the ripple effects entailed by that fact, and demonstrate poor performance on most of our evaluation criteria. Moreover, analyzing how editing performance varies across model sizes and entity frequencies, we find that (a) larger models handle ripple effects better, and (b) editing frequent entities results in more logical reasoning errors.\n\nLast, we consider a simple in-context editing baseline for KE, that leverages the casual attention mechanism rather than explicit parametric updates.\nWhile this method achieves the best results on our benchmark, outperforming current parametric KE methods, there is still ample room for improvement that calls for future research.\n\nTo conclude, our work makes multiple contributions: (a) it highlights key limitations of KE evaluation, specifically regarding ripple effects and introduces comprehensive evaluation criteria to mitigate those limitations, (b) it proposes RippleEdits, a benchmark inspired by these criteria, (c) it evaluates current methods for KE and shows that they do not perform well on this task, while demonstrating that in-context editing is a promising direction for KE.\nWe release RippleEdits and our code to facilitate future work on KE.",
            "citations": null
          },
          "2 Problem Setting": {
            "content": "We consider editing of factual knowledge, where facts are expressed as triplets (e,r,o)𝑒𝑟𝑜(e,r,o) of a subject entity e𝑒e (e.g. Lionel Messi), a relation r𝑟r (e.g. Team), and an object o𝑜o (e.g. Inter Miami).\nWe distinguish between two edit types, based on the knowledge encoded in the model before the edit: (a) modification of a fact that is already encoded in the model (e,r,o)→(e,r,o∗)→𝑒𝑟𝑜𝑒𝑟superscript𝑜(e,r,o)\\\\rightarrow(e,r,o^{\\*}), that is, updating the object o→o∗→𝑜superscript𝑜o\\\\rightarrow o^{\\*} for a given subject e𝑒e and relation r𝑟r, and (b) injection of a new fact (e,r,o∗)𝑒𝑟superscript𝑜(e,r,o^{\\*}) that is not captured by the model. Moreover, we note that for one-to-one relations like Date of birth, where there is a single object for a given subject, an injection edit can be viewed as populating an empty object (e,r,∅)→(e,r,o∗)→𝑒𝑟𝑒𝑟superscript𝑜(e,r,\\\\emptyset)\\\\rightarrow(e,r,o^{\\*}). In contrast, for one-to-many relations, such as Sibling and Occupation, an injection edit augments the set of objects (e,r,{o1,..,on})→(e,r,{o1,..,on,o∗})(e,r,\\\\{o\\_{1},..,o\\_{n}\\\\})\\\\rightarrow(e,r,\\\\{o\\_{1},..,o\\_{n},o^{\\*}\\\\}).\nWhether an edit is viewed as a modification or injection, depends on whether that information was captured in the model before the edit.\nMoreover, evaluating if a specific fact (before or after an edit) is encoded by a model is typically done by testing if the model predicts the object for various input queries that represent the subject and relation (see more details in § [3.2]Related Work ‣ 3 Ripple Effects of Factual Edits ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")).\n\n![Refer to caption]Figure 2:\nAn illustration of our evaluation criteria, for an edit that simulates adding a sibling to the subject entity Prince, shown at the top of each graph with a bold arrow and an edit sign over the Sibling relation.\nFor each criterion, the tested subject and target object are circles with dashed blue line and solid green line, respectively, and other nodes in dotted orange line.\nFor _Logical Generalization_ (A), the additional fact that needs to be inserted to the KG is presented with an edit sign next to the relation. We show the same node in different colors for completeness, as the tested subject is also the object in the edit that needs to be inserted. For Compositionality I, II (B, C), the model needs to hop over the edit to arrive at the target. In _Subject Aliasing_ (D) we verify the edit also propagates to paraphrases of the input. In _Preservation_ (E), we verify that other targets of the edited subject-relation are preserved. In _Relation Specificity_, we verify other relations for the subject are not modified.",
            "citations": null
          },
          "3 Ripple Effects of Factual Edits": {
            "content": "We focus on evaluating the downstream effect of a given edit, i.e., given an edit (e,r,o)→(e,r,o′)→𝑒𝑟𝑜𝑒𝑟superscript𝑜′(e,r,o)\\\\rightarrow(e,r,o^{\\\\prime}), we expect certain facts related to the edit to change as well. Consider, for example, the edit shown in Fig. [1]Figure 1 ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"). Changing the team for which Messi plays might also affect the league he plays in and his country of residence.\nFormally, for a given model, assume a knowledge-graph 𝒦:={(ei,ri,oi)}i=1Nassign𝒦superscriptsubscriptsubscript𝑒𝑖subscript𝑟𝑖subscript𝑜𝑖𝑖1𝑁{\\\\mathcal{K}:=\\\\{(e\\_{i},r\\_{i},o\\_{i})\\\\}\\_{i=1}^{N}} of N𝑁N factual triplets, representing the model’s knowledge, and let δ:(e,r,o)→(e,r,o′):𝛿→𝑒𝑟𝑜𝑒𝑟superscript𝑜′\\\\delta:(e,r,o)\\\\rightarrow(e,r,o^{\\\\prime}) be an edit request for 𝒦𝒦\\\\mathcal{K}.\nWe define the ripple effect of δ𝛿\\\\delta on 𝒦𝒦\\\\mathcal{K}, as the set of triplets ℛ​(δ)ℛ𝛿\\\\mathcal{R}(\\\\delta) that the model implicitly needs to inject, modify, or delete from 𝒦𝒦\\\\mathcal{K} to reflect the world state after the edit.\n\nNotably, different edits can cause ripple effects of varying magnitudes. For example, changing the country of Rome from Italy to France, will entail many follow-up changes, such as the country in which the Colosseum is located, the language spoken in Rome, and so forth.\nIn contrast, updating the siblings of Prince (Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")) is both more realistic and should result in a more local effect.\nWe refer to the number of facts affected by a single edit δ𝛿\\\\delta (i.e. \\|ℛ​(δ)\\|ℛ𝛿\\|\\\\mathcal{R}(\\\\delta)\\|) as its severity.\nIn general, editing popular entities that appeared frequently during training is likely to introduce more changes, and thus, editing their properties has a higher severity.\n\n### 3.1 Evaluation Criteria\n\nWe wish to evaluate how well models capture the ripple effects of factual edits. However, given that ripple effects can potentially span a large number of implied edits, we focus on evaluating modified facts that are within a 2-hop distance from the subject or object of the edit.\nConcretely, for an edit δ:(e,r,o)→(e,r,o∗):𝛿→𝑒𝑟𝑜𝑒𝑟superscript𝑜\\\\delta:(e,r,o)\\\\rightarrow(e,r,o^{\\*}), we evaluate the ripple effect ℛ​(δ)ℛ𝛿\\\\mathcal{R}(\\\\delta), via the following evaluation criteria (examples are shown in Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")):\n\n1. 1.\n\n\n_Logical Generalization_ (LG):\nRelations in a knowledge graph satisfy certain logical constraints. For example, the relation Sibling is symmetric and therefore if (e,Sibling,o)𝑒Sibling𝑜(e,\\\\texttt{Sibling},o) is true then (o,Sibling,e)𝑜Sibling𝑒(o,\\\\texttt{Sibling},e) is also true, and vice versa (Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") A). Likewise, the relation Location is transitive so (e,Location,o)∧(o,Location,z)⇒(e,Location,z)⇒𝑒Location𝑜𝑜Location𝑧𝑒Location𝑧(e,\\\\texttt{Location},o)\\\\wedge(o,\\\\texttt{Location},z)\\\\Rightarrow(e,\\\\texttt{Location},z). We wish to check that such logical implications about the subject e𝑒e, the original object o𝑜o, and the new object o∗superscript𝑜o^{\\*}, hold after editing. We focus and elaborate on specific constraints in § [4]The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\").\n\n2. 2.\n\n\n_Compositionality I_ (CI): As δ𝛿\\\\delta alters one edge in a knowledge graph, we can check the composition of this edge with other edges. Namely, we test if the model can compose the edited fact with other facts about the target object.\nLet (o,r′,z)𝑜superscript𝑟′𝑧(o,r^{\\\\prime},z) and (o∗,r′,z∗)superscript𝑜superscript𝑟′superscript𝑧(o^{\\*},r^{\\\\prime},z^{\\*}) be two facts of the same relation about o𝑜o and o∗superscript𝑜o^{\\*},\nrespectively. Also, denote by r′′=r∘r′superscript𝑟′′𝑟superscript𝑟′r^{\\\\prime\\\\prime}=r\\\\circ r^{\\\\prime} the complex relation expressing the composition of r𝑟r and r′superscript𝑟′r^{\\\\prime} (e.g., r′′=Profession of siblingsuperscript𝑟′′Profession of siblingr^{\\\\prime\\\\prime}=\\\\texttt{Profession of sibling} for r=Sibling𝑟Siblingr=\\\\texttt{Sibling} and r′=Professionsuperscript𝑟′Professionr^{\\\\prime}=\\\\texttt{Profession}).\nThen, after the edit δ𝛿\\\\delta, we expect the following change (e,r′′,z)→(e,r′′,z∗)→𝑒superscript𝑟′′𝑧𝑒superscript𝑟′′superscript𝑧(e,r^{\\\\prime\\\\prime},z)\\\\rightarrow(e,r^{\\\\prime\\\\prime},z^{\\*}).\nFor example (Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") B), the professions of the siblings of Prince can be modified once a new sibling is injected.\n\n3. 3.\n\n\n_Compositionality II_ (CII):\nWe test if the model can compose the edited fact with facts about a different subject e′≠esuperscript𝑒′𝑒e^{\\\\prime}\\\\neq e.\nFormally, let (e′,r′,e)superscript𝑒′superscript𝑟′𝑒(e^{\\\\prime},r^{\\\\prime},e) be a fact about e′superscript𝑒′e^{\\\\prime} with e𝑒e as its object, and denote by r′′=r′∘rsuperscript𝑟′′superscript𝑟′𝑟r^{\\\\prime\\\\prime}=r^{\\\\prime}\\\\circ r the complex relation expressing the composition of r′superscript𝑟′r^{\\\\prime} and r𝑟r (see an example in criterion 2). After the edit δ𝛿\\\\delta, the following change is expected for the subject e′superscript𝑒′e^{\\\\prime}:\n(e′,r′′,o)→(e′,r′′,o∗)→superscript𝑒′superscript𝑟′′𝑜superscript𝑒′superscript𝑟′′superscript𝑜(e^{\\\\prime},r^{\\\\prime\\\\prime},o)\\\\rightarrow(e^{\\\\prime},r^{\\\\prime\\\\prime},o^{\\*}).\nFor instance (Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") C), changing the siblings of Prince also modifies the siblings of the founder of Paisley Park Records (i.e., r′′superscript𝑟′′r^{\\\\prime\\\\prime} is a complex relation expressing “siblings of the founder”).\n\n4. 4.\n\n\n_Subject Aliasing_ (SA): We test that editing a fact about e𝑒e induces the same edit to other entities e′superscript𝑒′e^{\\\\prime} that are aliases of e𝑒e, namely, (e′,r,o)→(e′,r,o∗)→superscript𝑒′𝑟𝑜superscript𝑒′𝑟superscript𝑜(e^{\\\\prime},r,o)\\\\rightarrow(e^{\\\\prime},r,o^{\\*}).\nFor instance (Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") D), modifying the siblings of Prince, should also modify the sibling of his alias, Prince Roger Nelson.\n\n5. 5.\n\n\n_Preservation_ (PV): If r𝑟r is a one-to-many relation, then adding a new object should not affect the other objects encoded about e𝑒e.\nHence, in such cases, we expect that any existing triplet (e,r,o′)𝑒𝑟superscript𝑜′(e,r,o^{\\\\prime}) for an object o′≠o∗superscript𝑜′superscript𝑜o^{\\\\prime}\\\\neq o^{\\*} would remain following the edit.\nFor example (Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") E), after inserting the sibling Nicholas Carminowe for Prince, the fact that Tyka Nelson is also his sibling should be retained.\n\n6. 6.\n\n\n_Relation Specificity_ (RS): We test that facts about e𝑒e, with relations whose objects are not influenced by o𝑜o, are indeed not affected by the edit.\nFor example (Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") F), modifying the sibling of Prince should not change his Mother. Note that these facts complement those evaluated by _Logical Generalization_.\n\n\nIn § [4.1]Data Generation Pipeline ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), we describe how we generate factual editing evaluations, based on the above criteria.\n\n### 3.2 Related Work\n\n#### Knowledge Editing Methods\n\nSeveral methods have been proposed to edit the factual knowledge encoded in a model.\nDe Cao et al. ( [2021])) and Mitchell et al. ( [2022b])) suggested to use hyper-networks to update the model weights.\nIn addition, Meng et al. ( [2022]), [2023])) proposed to modify encoded facts by updating the weights of MLP layers, following recent observations that these layers can be cast as key-value memories Geva et al. ( [2021])) that store factual knowledge Dai et al. ( [2022])).\nOther methods learn encodings that update the hidden representations created during model inference Hernandez et al. ( [2023a])), or augment the input context with edits Zhong et al. ( [2023])); Zheng et al. ( [2023])).\nIn § [5.1]Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), we discuss state-of-the-art KE methods used in this work in greater detail.\n\nSeparately from factual KE, recent works have also studied how to inject new facts into a model. Previous methods suggested unsupervised pre-training Roberts et al. ( [2020])); Zhang et al. ( [2021])), semi-parametric methods methods where external information is added from a knowledge-base Zhang et al. ( [2019])); Peters et al. ( [2019])); Lewis et al. ( [2020])); Zhang et al. ( [2022])), using adapters to store knowledge Wang et al. ( [2021a])), or extending the MLP layers Yao et al. ( [2022])).\n\n#### Knowledge Editing Evaluation\n\nRecently, there has been a growing interest in KE evaluation Yao et al. ( [2023])).\nThe prominent benchmarks for evaluating factual KE are the Zero-Shot Relation Extraction\n(zsRE) Levy et al. ( [2017])); De Cao et al. ( [2021])) and CounterFact Meng et al. ( [2022])). zsRE is a question-answering dataset for relation-specific queries, which includes human generated paraphrases that are used to measure robustness to semantically equivalent inputs. For example, for the triplet (x, Country, y), zsRE contains queries such as “ _In which country is x?_”. CounterFact offers a more challenging setting, where edits are counterfactuals of a low probability, such as changing the City of The Louvre from Paris to Rome.\n\nEvaluation in zsRE and CounterFact focuses on three primary aspects of (a) efficacy: checking that the model generates the target object post-editing, (b) paraphrasing: testing robustness in generating the target for paraphrases of the input, and (c) specificity: verifying that facts not related to the edit are unaffected.\nIn addition, CounterFact evaluates the generation quality of the edited model when prompted with the edit’s subject, measuring: consistency, i.e., similarity with subjects that share the same property as the edited object, and fluency in terms of repetitiveness of the generated text.\nMore broadly, previous work evaluated to which extent LMs have beliefs Genin and Huber ( [2022])); Kassner et al. ( [2021])); Hase et al. ( [2023])), and Hase et al. ( [2023])) examined if updating beliefs propagates to entailed facts, extending the Wikidata5m dataset Wang et al. ( [2021b])) to test editing specificity.\n\nRecently, Onoe et al. ( [2023])) introduce the task of _entity knowledge propagation_, aiming to examine the extent to which models are able to reason about emergent entities that did not appear in pre-training. In addition, Hoelscher-Obermaier et al. ( [2023])) show that existing KE methods can have unwanted side effects and suffer from low specificity.\nA concurrent work by Zhong et al. ( [2023])) introduces MQUAKE, a benchmark that tests the ability of models to perform multi-hop reasoning after edits.\nWhile each of these benchmarks focuses on a single consequence of editing, RippleEdits provides a general framework for evaluating various types of edit ripple effects.\nLast, Gupta et al. ( [2023])) focus on editing commonsense knowledge and introduce MEMIT-CSKPROBE, a dataset for semantic generalization of commonsense edits. RippleEdits is different from MEMIT-CSKPROBE as it evaluates editing of factual knowledge rather than commonsense knowledge.",
            "citations": null
          },
          "4 The RippleEdits Benchmark": {
            "content": "In this section, we describe a data generation pipeline (§ [4.1]Data Generation Pipeline ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")) for factual edit requests and queries for evaluating their ripple effects.\nThen, we apply our pipeline to create the RippleEdits benchmark for comprehensive KE evaluation (§ [4.2]Data Statistics ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")), and validate the quality of the data (§ [4.3]Data Quality ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")).\n\n![Refer to caption]Figure 3: Illustration of our data generation process.\nWe start by sampling a fact from a KG (A), here (Bill Gates,Spouse,Melinda Gates)Bill GatesSpouseMelinda Gates(\\\\texttt{Bill Gates},\\\\texttt{Spouse},\\\\texttt{Melinda Gates}). Then, we generate the target triplet for the edit (B), in this case, choosing an object (Ricciarda Cybo Malaspina) that shares the same type as the original object. Next, we generate test queries (C) by sampling new triplets from the KG that should be retained or modified post-editing. Last, we utilize pre-defined templates to translate the KG triplets to natural language phrases (D).\n\n### 4.1 Data Generation Pipeline\n\nWe describe our data generation process (illustrated in Fig. [3]Figure 3 ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")), that creates KE evaluation examples, each consisting of a factual edit request and a set of test queries that follow our criteria. Since the pipeline involves manual writing of templates and logical rules per relation, we restrict the edits and test queries to a fixed set of Nr​e​lsubscript𝑁𝑟𝑒𝑙N\\_{rel} basic relations.222The full list of relations is available in our codebase, example relations are shown in Fig. [4]Figure 4 ‣ Step 3: Evaluation tests generation ‣ 4.1 Data Generation Pipeline ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\").\n\n#### Step 1: Factual triplets collection\n\nThe first step of the pipeline (Fig. [3]Figure 3 ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") A) is to collect facts, from which we will later create edit requests.\nTo this end, we use WikiData, a relational knowledge base consisting of facts that are expressed as triplets (e,r,o)𝑒𝑟𝑜(e,r,o), where e𝑒e is a subject entity, r𝑟r is a relation,\nand o𝑜o is an object. We collect triplets of three types:\n\n- •\n\n\nRecent: To create “real” plausible edit requests, we collect triplets that were inserted to WikiData only recently, and represent relatively new facts. Therefore, they can be used to create injection edit requests for models that were trained before these facts were introduced, to simulate cases of an out-of-date model that requires factual updates.\nWe collect such facts by randomly sampling triplets that have been modified during a range of 250 days after July 2022.\n\n- •\n\n\nRandom:\nWe collect triplets corresponding to random facts, for which we will later generate modification edits (similarly to Meng et al. ( [2022]))). These edits simulate factual edits that are meant to fix incorrect model predictions (e.g., predicting that the capital of Germany is Frankfurt).\nTo this end, we divide the entities in WikiData into 10 uniform buckets, based on the number of triplets associated with them. Intuitively, this can be viewed as a popularity measure. Then, we sample Ne​n​tsubscript𝑁𝑒𝑛𝑡N\\_{ent} entities from each group and randomly choose one triplet for each entity.\n\n- •\n\n\nPopular:\nThe two previous triplet types are randomly sampled from the entire knowledge base, and most of them are likely to represent facts about tail entities (except perhaps for a small subset in the top bucket).\nSuch entities are often not captured by models Mallen et al. ( [2023])), and therefore not suitable for testing modification edits.\nTo address this, we sample triplets from WikiData with a subject that is a _popular entity_, namely it appears in one of the top-viewed pages in Wikipedia.333\nWe extracted the entities whose corresponding Wikipedia page was included in the top-1000 most viewed pages in at least one month during 2020-2022.\nImportantly, these types of triplets allow controlling for the ripple effect severity (§ [3]Ripple Effects of Factual Edits ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")), i.e., how models handle the ripple effects of popular entities versus tail entities.\n\n\n#### Step 2: Edits generation\n\nOnce we obtain factual triplets, we turn to generate edit requests for them (Fig. [3]Figure 3 ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") B).\nFor Recent, triplets represent new facts that are meant to be injected to the model, assuming that the latter was trained before these facts were introduced to the world.\nHence, for Recent, the target triplet for injection is the triplet itself.\n\nFor Random and Popular triplets, we create an edit by generating a target triplet as follows. First, for every relation r𝑟r, we create a set of candidate object entities Orsubscript𝑂𝑟O\\_{r} by sampling Nc​a​n​dsubscript𝑁𝑐𝑎𝑛𝑑N\\_{cand} triplets (e1,r,o1),…,(eNc​a​n​d,r,oNc​a​n​d)subscript𝑒1𝑟subscript𝑜1…subscript𝑒subscript𝑁𝑐𝑎𝑛𝑑𝑟subscript𝑜subscript𝑁𝑐𝑎𝑛𝑑(e\\_{1},r,o\\_{1}),...,(e\\_{N\\_{cand}},r,o\\_{N\\_{cand}}) with the relation r𝑟r,\nand extracting their objects Or={o1,…,oNc​a​n​d}subscript𝑂𝑟subscript𝑜1…subscript𝑜subscript𝑁𝑐𝑎𝑛𝑑O\\_{r}=\\\\{o\\_{1},...,o\\_{N\\_{cand}}\\\\}.\nThen, for every triplet (e,r,o)𝑒𝑟𝑜(e,r,o) in Random and Popular, we sample a target object o′≠osuperscript𝑜′𝑜o^{\\\\prime}\\\\neq o from Orsubscript𝑂𝑟O\\_{r}.\nSampling the target object from triplets with the same relation makes the edit request technically consistent with the original triplet – the target object is of the same “type” as the original object (for example, a triplet with the relation Capital will get a new object of type City). The new triplet (e,r,o′)𝑒𝑟superscript𝑜′(e,r,o^{\\\\prime}) will thus result in a “fake” fact, since it attaches a wrong object o′superscript𝑜′o^{\\\\prime} to the pair (e,r)𝑒𝑟(e,r). For example if Random contains the triplet (France, Capital, Paris), its edit could be (France, Capital, London).\n\n#### Step 3: Evaluation tests generation\n\nThe next step in the pipeline is to create ripple effect evaluations for the factual edits we collected (Fig. [3]Figure 3 ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") C).\nTo this end, we implement the evaluation criteria introduced in § [3.1]Evaluation Criteria ‣ 3 Ripple Effects of Factual Edits ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), and generate test queries for each criterion.\nEach test query corresponds to a triplet of subject and object entities and a possibly complex relation, that is expected to be true post-editing.\nIn what follows, we provide details on our implementation, using objects from WikiData.\n\nFor an entity e𝑒e, we denote by 𝒮​(e)𝒮𝑒\\\\mathcal{S}(e) the set of triplets in WikiData in which e𝑒e is the subject, and by 𝒯​(e)𝒯𝑒\\\\mathcal{T}(e) the set of triplets in which e𝑒e is the object.\nMoreover, for every relation r𝑟r, we manually define a set Drsubscript𝐷𝑟D\\_{r} of relations that semantically depend on it.\nNamely, for a given subject, changing r𝑟r’s target object is expected to change the target objects for the relations Drsubscript𝐷𝑟D\\_{r}. For instance, the set Drsubscript𝐷𝑟D\\_{r} for the relation r=𝑟absentr=Mother, includes the relations Sibling, Sister, Brother, Aunt, and Uncle, among others.\nThen, for every relation r′∈Drsuperscript𝑟′subscript𝐷𝑟r^{\\\\prime}\\\\in D\\_{r}, we craft a logical rule for obtaining the new target for that relation post-editing. For instance, for the relation r=𝑟absentr=Sibling, we set a logical rule for r′=superscript𝑟′absentr^{\\\\prime}=Mother such that if (e,r,e′)𝑒𝑟superscript𝑒′(e,r,e^{\\\\prime}) and (e′,r′,z′)superscript𝑒′superscript𝑟′superscript𝑧′(e^{\\\\prime},r^{\\\\prime},z^{\\\\prime}) are true for entities e,e′,z′𝑒superscript𝑒′superscript𝑧′e,e^{\\\\prime},z^{\\\\prime}, then (e,r′,z′)𝑒superscript𝑟′superscript𝑧′(e,r^{\\\\prime},z^{\\\\prime}) should also be true.\n\nGiven an edit (e,r,o)→(e,r,o∗)→𝑒𝑟𝑜𝑒𝑟superscript𝑜(e,r,o)\\\\rightarrow(e,r,o^{\\*}), we use Drsubscript𝐷𝑟D\\_{r} to generate test queries for _Logical Generalization_ and _Relation Specificity_.\nFor _Logical Generalization_, we apply the rule corresponding to each relation r′∈Drsuperscript𝑟′subscript𝐷𝑟r^{\\\\prime}\\\\in D\\_{r} to obtain a set of test queries (x,r′,z′)𝑥superscript𝑟′superscript𝑧′(x,r^{\\\\prime},z^{\\\\prime}) about x∈{e,o,o∗}𝑥𝑒𝑜superscript𝑜x\\\\in\\\\{e,o,o^{\\*}\\\\}, where z′superscript𝑧′z^{\\\\prime} is the target obtained from the logical rule.\nFor _Relation Specificity_, we create a test query for every triplet in 𝒮​(e)𝒮𝑒\\\\mathcal{S}(e) with a relation that is not in Drsubscript𝐷𝑟D\\_{r} (but is in our set of Nr​e​lsubscript𝑁𝑟𝑒𝑙N\\_{rel} relations).\n\nTo generate text queries for _Compositionality I_, we iterate through 𝒮​(o∗)𝒮superscript𝑜\\\\mathcal{S}(o^{\\*}) and for each triplet (o∗,r′,z)∈𝒮​(o∗)superscript𝑜superscript𝑟′𝑧𝒮superscript𝑜(o^{\\*},r^{\\\\prime},z)\\\\in\\\\mathcal{S}(o^{\\*}), we construct a two-hop query (e,r∘r′,z)𝑒𝑟superscript𝑟′𝑧(e,r\\\\circ r^{\\\\prime},z) about e𝑒e, with z𝑧z as the answer. Similarly,\nfor _Compositionality II_, we iterate through 𝒯​(e)𝒯𝑒\\\\mathcal{T}(e) and for each triplet (z,r′,e)∈𝒯​(e)𝑧superscript𝑟′𝑒𝒯𝑒(z,r^{\\\\prime},e)\\\\in\\\\mathcal{T}(e), we construct a two-hop query (z,r′∘r,o∗)𝑧superscript𝑟′𝑟superscript𝑜(z,r^{\\\\prime}\\\\circ r,o^{\\*}) about z𝑧z with o∗superscript𝑜o^{\\*} as the answer.\nFor _Subject Aliasing_, we use information maintained by WikiData to create a test query (e′,r,o∗)superscript𝑒′𝑟superscript𝑜(e^{\\\\prime},r,o^{\\*}) for every alias e′superscript𝑒′e^{\\\\prime} of e𝑒e.\nLast, for _Preservation_ we create test triplets (e,r,o1),…,(e,r,on)𝑒𝑟subscript𝑜1…𝑒𝑟subscript𝑜𝑛(e,r,o\\_{1}),...,(e,r,o\\_{n}) that check if the model retained the original objects {o1,…,on}subscript𝑜1…subscript𝑜𝑛\\\\{o\\_{1},...,o\\_{n}\\\\} in addition to the new edited object o∗superscript𝑜o^{\\*}.\n\n|  | Recent | Random | Popular |\n| \\# of factual edits | 2,000 | 1,000 | 1,000 |\n| \\# of queries per edit | 26.826.826.8 | 18.818.818.8 | 25.625.625.6 |\n| \\# of queries per criterion | 5.245.245.24 | 3.13.13.1 | 4.24.24.2 |\n| \\# of LG queries | 2.52.52.5 | 3.63.63.6 | 2.62.62.6 |\n| \\# of CI queries | 11.711.711.7 | 4.74.74.7 | 6.16.16.1 |\n| \\# of CII queries | 5.15.15.1 | 5.15.15.1 | 3.93.93.9 |\n| \\# of SA queries | 1.81.81.8 | 1.31.31.3 | 4.74.74.7 |\n| \\# of PV queries | 0.60.60.6 | 0.40.40.4 | 0.50.50.5 |\n| \\# of RS queries | 5.15.15.1 | 3.73.73.7 | 7.87.87.8 |\n| Subject triplets count | 31.731.731.7 | 13.313.313.3 | 115.2115.2115.2 |\n| Subject page back-links | 278.1278.1278.1 | 121.6121.6121.6 | 3934.53934.53934.5 |\n| Subject page views | 189.6189.6189.6 | 67.9167.9167.91 | 7376.57376.57376.5 |\n| Object triplets count | 192.4192.4192.4 | 46.446.446.4 | 39.539.539.5 |\n| Object page back-links | 18634.218634.218634.2 | 3065.03065.03065.0 | 2136.02136.02136.0 |\n| Object page views | 2852.42852.42852.4 | 1379.71379.71379.7 | 1176.71176.71176.7 |\n\nTable 1: Statistics per subset of RippleEdits, showing the average of different metrics. Breakdown by evaluation criteria shows the number of queries of each criterion per edit. For a given subject/object entity, triplets count is the number of WikiData facts it is associated with, page back-links is the number of Wikipedia pages with a link to the entity’s page, and page views is the recent average daily view count of the entity’s page.![Refer to caption]Figure 4: Most frequent relations and their frequency, in each subset of RippleEdits.\n\n#### Step 4: Phrasing in natural language\n\nAt this point (Fig. [3]Figure 3 ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") D), we have factual edit requests and their corresponding test queries. To use them as inputs to LMs, we convert them from triplet-form to natural language (NL).\nTo this end, we manually craft a template NL phrase per relation (this is feasible since we use a fixed set of relations), and use it to convert all the triplets with this relation.\nFor instance, the template ‘‘The date of birth of <e𝑒e\\> is’’ converts triplets with the relation r=𝑟absentr=Date of Birth and a subject entity e𝑒e.\n\nFor the _Preservation_ triplets generated for an edit (e,r,{o1,…,on})→(e,r,{o1,…,on,o∗})→𝑒𝑟subscript𝑜1…subscript𝑜𝑛𝑒𝑟subscript𝑜1…subscript𝑜𝑛superscript𝑜(e,r,\\\\{o\\_{1},...,o\\_{n}\\\\})\\\\rightarrow(e,r,\\\\{o\\_{1},...,o\\_{n},o^{\\*}\\\\}), where o∗superscript𝑜o^{\\*} is a new object added to a set of possibly multiple (n≥0𝑛0n\\\\geq 0) objects, we form a single NL query about other objects than the edited one, e.g.,\n‘‘The award received by <e𝑒e\\> which is not <o∗superscript𝑜o^{\\*}\\> is’’.\n\n### 4.2 Data Statistics\n\nWe used our data generation pipeline to collect edits for 2,000 Recent facts, 1,000 Random facts, and 1,000 Popular facts, focusing on Nr​e​l=54subscript𝑁𝑟𝑒𝑙54N\\_{rel}=54 basic relations for which we manually crafted NL templates and logical rules.444We release the templates and rules in our codebase. To obtain the Random subset, we set Ne​n​t=200subscript𝑁𝑒𝑛𝑡200N\\_{ent}=200 to sample 200 facts from each entity group in WikiData. For edits generation of Random and Popular, we set Nc​a​n​d=100,000subscript𝑁𝑐𝑎𝑛𝑑100000N\\_{cand}=100,000.\nWe call our diagnostic benchmark RippleEdits, and publicly release it to the research community.\nNotably, RippleEdits focuses on ripple edits and is meant to complement existing benchmarks, and so it does not include previous evaluations, such as subject specificity and model consistency.\n\nStatistics on RippleEdits are presented in Table [1]Table 1 ‣ Step 3: Evaluation tests generation ‣ 4.1 Data Generation Pipeline ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), showing that our generation process resulted in 18-26 test queries per edit and over 333 queries per evaluation test, on average. Moreover, Popular edits contain more popular subjects (as intended), while Recent edits have more popular objects.\nFig. [4]Figure 4 ‣ Step 3: Evaluation tests generation ‣ 4.1 Data Generation Pipeline ‣ 4 The RippleEdits Benchmark ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") shows the top relations and their frequency in each subset of RippleEdits, demonstrating the diversity of the generated facts.\n\n### 4.3 Data Quality\n\nWe conducted a manual analysis to validate that our generation pipeline produces valid test queries. Concretely, we sampled 200 random test queries from RippleEdits and checked the following two requirements: (a) _soundness_: the triplet that represents a given test query should be semantically correct, namely, the entity type of the object should match the relation type and the relation type should match the entity type of the subject. For example, queries such as _“The capital of Hilary Clinton is”_ or _“The sibling of Lebron James is Los Angeles”_ would have been disqualified. (b) _grammatically correct_: we check that the phrasing of the test query in natural language is grammatical.\n\nWe found that 100% of the queries were sound (i.e., semantically clear and correct), showing that the data curating process was designed properly.\nFurthermore, 98.5% of the queries were grammatically correct, while the ones which were not contain entity representations in a non-English language. This shows that our templates are general enough to properly fit various entity names.",
            "citations": null
          },
          "5 Experiments": {
            "content": "We use RippleEdits to evaluate recent KE methods, and show that despite substantial progress on existing benchmarks, current methods struggle to introduce consistent changes to the model’s knowledge after an edit. Moreover, a simple in-context editing baseline that conditions the generation on the edited fact obtains better results, while leaving ample room for improvement for future research.\n\n![Refer to caption]Figure 5:\nAn example modification edit from our ICE baseline.\nThe color code of the KG is similar to that described in Fig. [2]Figure 2 ‣ 2 Problem Setting ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"). We prepend the prefix “ _Imagine that_” to the input prompt, as counterfactuals can contradict knowledge embedded in a model’s parameters.\n\n### 5.1 Evaluation Setting\n\n#### Data\n\nTo evaluate how well an editing method handles the ripple effects resulting from editing a given model, the data first needs to be adjusted such that (a) only cases of successful edits are evaluated, and (b) only test queries that the model answered correctly pre-editing are used for evaluation.\nConcretely, for an editing method ℱℱ\\\\mathcal{F} and a model ℳℳ\\\\mathcal{M}, an edit request x:(e,r,o)→(e,r,o′):𝑥→𝑒𝑟𝑜𝑒𝑟superscript𝑜′x:(e,r,o)\\\\rightarrow(e,r,o^{\\\\prime}) is included in the evaluation if the following conditions are met when applying ℱℱ\\\\mathcal{F} to ℳℳ\\\\mathcal{M} and x𝑥x: (a) ℳℳ\\\\mathcal{M} successfully generates the original objects for the test queries before applying the edit, and (b) ℳℳ\\\\mathcal{M} successfully generates o′superscript𝑜′o^{\\\\prime} when queried about e𝑒e and r𝑟r, namely, the edit has successfully been applied.\nFor example, we verify that the model can predict the children of o′superscript𝑜′o^{\\\\prime} before asking about e𝑒e’s new siblings.\n\n#### Editing methods\n\nWe evaluate three KE methods:\nMEND Mitchell et al. ( [2022b])), ROME Meng et al. ( [2022])), and MEMIT Meng et al. ( [2023])). MEND trains a network that modifies gradients to produce local edits.\nROME makes rank-one updates to the weights of the Transformer’s MLP layers to modify specific factual associations, and MEMIT is an extension of ROME that is adjusted to editing many facts at once.\n\n#### Baseline\n\nMotivated by the recent success of LMs to learn in-context and follow instructions Brown et al. ( [2020a])); Ouyang et al. ( [2022])); Liu et al. ( [2023])),\nspecifically for knowledge editing Zhong et al. ( [2023])); Zheng et al. ( [2023])),\nwe experiment with an in-context editing (ICE) baseline for factual editing.\nUnlike the above methods, it does not introduce changes to the model parameters, but rather generation is conditioned on the new fact.\nConcretely, given an edit (e,r,o)→(e,r,o∗)→𝑒𝑟𝑜𝑒𝑟superscript𝑜(e,r,o)\\\\rightarrow(e,r,o^{\\*}) and a test query q𝑞q, we use the following prompt to obtain an answer from the model: ‘‘Imagine that <o∗superscript𝑜o^{\\*}\\> would have been <Prsubscript𝑃𝑟P\\_{r}>’’, where Prsubscript𝑃𝑟P\\_{r} is a manually-written proposition of r𝑟r, such as _“The mother of <e𝑒e>”_ when r=𝑟absentr=Mother and e𝑒e is the subject.\nAn example is depicted in Fig. [5]Figure 5 ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\").\n\n|  | Recent | Random | Popular |\n|  | Edits | Tests | Edits | Tests | Edits | Tests |\n| GPT-2 | 853853853 | 29%percent2929\\\\% | 689689689 | 33%percent3333\\\\% | 722722722 | 71%percent7171\\\\% |\n| GPT-J | 801801801 | 33%percent3333\\\\% | 717717717 | 34%percent3434\\\\% | 760760760 | 76%percent7676\\\\% |\n| GPT-Neo | 989989989 | 45%percent4545\\\\% | 801801801 | 46%percent4646\\\\% | 828828828 | 86%percent8686\\\\% |\n| LLaMA | 847847847 | 44%percent4444\\\\% | 796796796 | 49%percent4949\\\\% | 784784784 | 87%percent8787\\\\% |\n| GPT-3 | 822822822 | 55%percent5555\\\\% | 760760760 | 74%percent7474\\\\% | 665665665 | 94%percent9494\\\\% |\n\nTable 2: (a) Number of edits considered in our evaluation (i.e., that have successfully applied), from each subset, averaged over ROME, MEMIT and MEND, for the models: GPT-2, GPT-J, GPT-Neo and LLaMA, and the ICE baseline for GPT-3. (b) Portion of queries, on average, that were used in our evaluation.\n\n#### Models\n\nWe use 4 recent auto-regressive decoder-only LMs of different sizes: GPT-2 XL Radford et al. ( [2019])) with\n1.5B parameters,\nGPT-J Chen et al. ( [2021])) with 6B parameters, LLaMA with 7B parameters, Touvron et al. ( [2023])), and GPT-NeoX with 20B parameters Black et al. ( [2022])).\nIn addition, as our baseline does not require access to the model parameters, we also evaluate it on the closed-source model GPT-3 text-davinci-003 with 175B parameters Brown et al. ( [2020b])).\nHowever, for the baseline we do not include results for GPT-2 and GPT-J as the number of testable edits for these models is rather small (≤20%absentpercent20\\\\leq 20\\\\% for each of the data subsets).\n\nFor all model-method combinations, except for ROME with LLaMA, we use the official implementation and hyperparameters from Meng et al. ( [2022])).\nWe adjust ROME to LLaMA by following the authors’ method and codebase.\nTable [2]Table 2 ‣ Baseline ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") shows the number of edits and test queries left, for every model, after filtering out non-successful edits and inapplicable test queries (as described above).\n\n#### Evaluation\n\nEach model-method pair is evaluated separately, on every subset of RippleEdits. For each evaluation criterion, we first compute the average accuracy over the test queries per example, and then average over all the examples. For a given test query, we let the model generate a maximum of 20 tokens. A generation is considered successful if one of the aliases of the target object appears in the text. In cases of multiple gold target objects (as in _Preservation_), we evaluate each target object separately and consider the generation as correct if it matches at least one object.\n\n|  |  | LG | CI | CII | SA | PV | RS | Avg. |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| GPT-2 | ROME | 20.220.220.2 | 35.635.635.6 | 46.846.846.8 | 86.886.886.8 | 100100100 | 55.455.455.4 | 57.557.557.5 |\n| MEMIT | 21.821.821.8 | 30.330.330.3 | 46.246.246.2 | 92.992.992.9 | 100100100 | 56.856.856.8 | 58.058.058.0 |\n| MEND | 28.928.928.9 | 23.723.723.7 | 20.720.720.7 | 87.187.187.1 | 100100100 | 51.951.951.9 | 52.152.152.1 |\n| GPT-J | ROME | 15.215.215.2 | 29.529.529.5 | 50.550.550.5 | 90.390.390.3 | 99.499.499.4 | 60.060.060.0 | 57.557.557.5 |\n| MEMIT | 18.018.018.0 | 35.035.035.0 | 48.148.148.1 | 88.488.488.4 | 98.698.698.6 | 42.242.242.2 | 55.055.055.0 |\n| GPT-Neo | ROME | 27.227.227.2 | 54.354.354.3 | 69.469.469.4 | 98.998.998.9 | 98.498.498.4 | 80.380.380.3 | 71.471.471.4 |\n| ICE | 48.348.348.3 | 29.029.029.0 | 62.262.262.2 | 100100100 | 99.499.499.4 | 80.780.780.7 | 69.969.969.9 |\n| LLaMA | ROME | 16.716.716.7 | 47.847.847.8 | 50.050.050.0 | 93.693.693.6 | 97.697.697.6 | 59.359.359.3 | 60.860.860.8 |\n| ICE | 59.659.659.6 | 74.874.874.8 | 85.085.085.0 | 100100100 | 99.599.599.5 | 77.977.977.9 | 82.882.882.8 |\n| GPT-3 | ICE | 33.333.333.3 | 100100100 | 91.391.391.3 | 100100100 | 100100100 | 73.173.173.1 | 82.882.882.8 |\n\nTable 3: Accuracy on the Recent subset, by MEND, ROME, MEMIT, and the ICE baseline, on GPT-2, GPT-J, GPT-Neo, LLaMA, and GPT-3.\n\n|  |  | LG | CI | CII | SA | PV | RS | Avg. |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| GPT-2 | ROME | 53.653.653.6 | 31.631.631.6 | 44.444.444.4 | 94.994.994.9 | 9.99.99.9 | 38.938.938.9 | 45.545.545.5 |\n| MEMIT | 58.458.458.4 | 30.530.530.5 | 49.849.849.8 | 100100100 | 20.020.020.0 | 36.236.236.2 | 49.149.149.1 |\n| MEND | 62.562.562.5 | 16.716.716.7 | 14.614.614.6 | 91.391.391.3 | 17.717.717.7 | 30.130.130.1 | 38.838.838.8 |\n| GPT-J | ROME | 53.853.853.8 | 40.840.840.8 | 49.949.949.9 | 93.893.893.8 | 15.215.215.2 | 39.439.439.4 | 48.848.848.8 |\n| MEMIT | 53.053.053.0 | 35.735.735.7 | 48.248.248.2 | 95.695.695.6 | 18.218.218.2 | 39.939.939.9 | 48.448.448.4 |\n| GPT-Neo | ROME | 61.661.661.6 | 49.449.449.4 | 57.157.157.1 | 100100100 | 30.830.830.8 | 50.750.750.7 | 58.358.358.3 |\n| ICE | 78.678.678.6 | 90.090.090.0 | 55.655.655.6 | 100100100 | 100100100 | 61.961.961.9 | 81.081.081.0 |\n| LLaMA | ROME | 54.354.354.3 | 35.535.535.5 | 49.549.549.5 | 96.096.096.0 | 17.817.817.8 | 38.938.938.9 | 48.748.748.7 |\n| ICE | 71.171.171.1 | 73.873.873.8 | 80.380.380.3 | 100100100 | 100100100 | 69.669.669.6 | 82.582.582.5 |\n| GPT-3 | ICE | 69.069.069.0 | 83.383.383.3 | 89.789.789.7 | 100100100 | 100100100 | 100100100 | 90.390.390.3 |\n\nTable 4: Accuracy on the Random subset, by MEND, ROME, MEMIT, and the ICE baseline, on GPT-2, GPT-J, GPT-Neo, LLaMA, and GPT-3.\n\n|  |  | LG | CI | CII | SA | PV | RS | Avg. |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| GPT-2 | ROME | 5.75.75.7 | 46.446.446.4 | 21.821.821.8 | 100100100 | 100100100 | 18.518.518.5 | 48.748.748.7 |\n| MEMIT | 6.76.76.7 | 45.245.245.2 | 21.221.221.2 | 100100100 | 100100100 | 24.324.324.3 | 49.649.649.6 |\n| MEND | 25.925.925.9 | 10.710.710.7 | 5.45.45.4 | 100100100 | 100100100 | 21.221.221.2 | 43.943.943.9 |\n| GPT-J | ROME | 5.55.55.5 | 44.144.144.1 | 21.021.021.0 | 98.698.698.6 | 99.099.099.0 | 22.322.322.3 | 48.448.448.4 |\n| MEMIT | 7.07.07.0 | 45.945.945.9 | 23.723.723.7 | 100100100 | 100100100 | 24.824.824.8 | 50.250.250.2 |\n| GPT-Neo | ROME | 36.436.436.4 | 29.429.429.4 | 41.641.641.6 | 100100100 | 100100100 | 50.850.850.8 | 59.759.759.7 |\n| ICE | 37.537.537.5 | 92.492.492.4 | 40.140.140.1 | 100100100 | 100100100 | 74.474.474.4 | 74.174.174.1 |\n| LLaMA | ROME | 22.022.022.0 | 37.437.437.4 | 16.216.216.2 | 100100100 | 100100100 | 20.620.620.6 | 49.449.449.4 |\n| ICE | 57.257.257.2 | 85.185.185.1 | 67.667.667.6 | 100100100 | 100100100 | 78.078.078.0 | 81.381.381.3 |\n| GPT-3 | ICE | 31.031.031.0 | 86.186.186.1 | 65.665.665.6 | 100100100 | 100100100 | 83.883.883.8 | 77.777.777.7 |\n\nTable 5: Accuracy on the Popular subset, by MEND, ROME, MEMIT, and the ICE baseline, on GPT-2, GPT-J, GPT-Neo, LLaMA, and GPT-3.\n\n### 5.2 Results\n\nTables [3]Table 3 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), [4]Table 4 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), [5]Table 5 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") show the evaluation results on the Recent, Random, and Popular subsets, respectively.\nConsidering the average scores across all subsets, we observe that existing editing methods struggle to handle the ripple effect induced by editing facts, with low average accuracy of 38−66386638-66 across all models.\nThis suggests that, while KE methods demonstrate high capability in making local updates to the model’s knowledge, these changes are mostly applied at a surface-level without propagating to other related facts.\nMoreover, we observe that our ICE baseline obtains the best overall results. Specifically, it outperforms ROME by more than 10 points for GPT-Neo and 29 points for LLaMA, on average across subsets. Although GPT-3 with ICE performs best on average, the 7B LLaMA is highly competitive, performing better or similarly on the Recent and Popular subsets.\n\nNext, comparing results across evaluation criteria shows that some ripple effects are handled better than others. For example, while _Subject Aliasing_ accuracy is consistently high (≥86.8absent86.8\\\\geq 86.8 across all settings), the accuracy on other criteria is generally lower and varies greatly between models, methods, and edits (e.g., _Logical Generalization_ accuracy for ROME on GPT-J is 53.853.853.8 on the Random subset, compared to only 5.55.55.5 on the Popular subset).\n\n![Refer to caption]Figure 6: Accuracy averaged over evaluation criteria of ROME, as a function of the model’s number of parameters, for the following models: GPT2-M, GPT2-L, GPT2-XL, GPT-J, LLaMA, and GPT-Neo.\n\n#### Results across model size\n\nWe analyze how editing performance on RippleEdits is influenced by the model size. To this end, we further evaluate ROME on smaller versions of GPT-2 – with 345M (GPT2-M) and 762M (GPT2-L) parameters, and plot the average accuracy over the three subsets as a function of model size.\nFig. [6]Figure 6 ‣ 5.2 Results ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") presents the results, showing that editing performance increases with model size, with ROME obtaining substantially higher accuracy when applied to larger models.\nNevertheless, our results (Tables [3]Table 3 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), [4]Table 4 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), [5]Table 5 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")) show that when using ICE, the 7B LLaMA is competitive with the much larger GPT-3, suggesting that simply scaling the model size may not be sufficient to fix the drawbacks of current editing methods.\n\n#### Results across methods\n\n|  | MEND | ROME | MEMIT |\n| --- | --- | --- | --- |\n| _Relation Specificity_ | 34.434.434.4 | 37.637.637.6 | 39.139.139.1 |\n| _Logical Generalization_ | 39.139.139.1 | 26.526.526.5 | 29.029.029.0 |\n| _Compositionality I_ | 17.017.017.0 | 37.937.937.9 | 35.335.335.3 |\n| _Compositionality II_ | 13.613.613.6 | 37.737.737.7 | 39.139.139.1 |\n\nTable 6: Accuracy of MEND, ROME and MEMIT, using GPT-2, averaged over the three RippleEdits splits - Recent, Random and Popular.\n\nTable [6]Table 6 ‣ Results across methods ‣ 5.2 Results ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") shows the accuracy of MEND, ROME and MEMIT, on GPT-2 across our evaluation criteria, averaged over the three subsets. Interestingly, MEND outperforms ROME and MEMIT in _Logical Generalization_, but is worse in _Compositionality I_ and _Compositionality II_, suggesting that different methods might better capture different types of ripple effects.\n\n![Refer to caption]Figure 7: The average accuracy of GPT-2 on different evaluation criteria in RippleEdits. Results are averaged over editing methods (ROME, MEMIT and MEND); error bars indicate standard deviation.\n\n#### Results across data splits\n\nThe subsets of RippleEdits differ in whether edited facts are counterfeit\nor real, and in the popularity of the edited entities. These differences allow us to control for the edit severity, as popular entities are expected to introduce larger ripple effects (see § [3]Ripple Effects of Factual Edits ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")).\nIn Fig. [7]Figure 7 ‣ Results across methods ‣ 5.2 Results ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), we show the accuracy on each subset and evaluation criterion, averaged over the different editing methods.\nComparing Random and Popular, that differ in the popularity of the edited entities, we see that while _Logical Generalization_ accuracy is substantially higher for Random, _Preservation_ accuracy is higher for Popular. This suggests that, although retaining correct knowledge is easier for popular entities, modifying other facts that logically follow from an edit is harder for popular entities, which could be explained by the severity of these edits (i.e. the high number of facts that are semantically related to them).\n\n|  |  | No effect | Abstaining | Noise |\n| --- | --- | --- | --- | --- |\n| GPT-2 | ROME | 27% | 31% | 42% |\n| ICE | 32% | 27% | 41% |\n| GPT-Neo | ROME | 24% | 40% | 36% |\n| ICE | 10% | 65% | 25% |\n| LLaMA | ROME | 20.5% | 45% | 34.5% |\n| ICE | 11% | 71% | 18% |\n\nTable 7: Error type distribution on 200 failures of ROME and ICE, on GPT-2, GPT-Neo, and LLaMA.\n\n### 5.3 Error Analysis\n\n#### ROME versus ICE\n\nWe qualitatively analyze the effect induced by KE methods to the model’s knowledge. To this end, for each of ROME and our ICE baseline and each of the models GPT-2, GPT-Neo, and LLaMA, we sample 200 test queries from RippleEdits on which the model fails post-editing. We then label these failures using three categories: (a) no effect, for cases when the model predicts the original object, i.e. the edit introduced no ripple effect, (b) abstaining, when the model abstains from answering by generating text like “unknown” or “a mystery”, and (c) noise, when the model generates an incorrect object or unrelated text.\nTable [7]Table 7 ‣ Results across data splits ‣ 5.2 Results ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\") presents the results, showing that in most cases (≥68%absentpercent68\\\\geq 68\\\\% across all settings) factual editing introduces erroneous changes to the model’s knowledge rather than making no change. Interestingly, for both GPT-Neo and LLaMA, where editing performance is better than GPT-2, ROME introduces more incorrect changes while ICE causes the model to abstain from answering.\n\n#### GPT-3 versus LLaMA using ICE\n\nWe further looked into the performance on the LG tests, where applying ICE to GPT-3 is notably inferior to ICE on LLaMA (see Tables [3]Table 3 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), [4]Table 4 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\"), [5]Table 5 ‣ Evaluation ‣ 5.1 Evaluation Setting ‣ 5 Experiments ‣ Evaluating the Ripple Effects of Knowledge Editing in Language Models\")). Specifically, we collected responses from each of the models to 100 random LG queries, and analyzed them using the same categories as described above.\nWe observed that GPT-3 abstains from answering the query much more often than LLaMA (49% of the cases for GPT-3 compared to only 28% in LLaMA), which could explain the lower performance of ICE on GPT-3 on these queries.",
            "citations": null
          },
          "6 Conclusion and Discussion": {
            "content": "We introduce the notion of ripple effects in knowledge editing, suggesting that editing a particular fact implies further updates of related facts. We additionally propose evaluation criteria for ripple effects and create RippleEdits, a diagnostic benchmark designed to evaluate how well KE methods handle the ripple effects of various edits.\nWe evaluate prominent KE methods and show that they often fail to introduce consistent edits that capture the ripple effects of an edit, suggesting that future development of KE methods should consider those effects more carefully. Last, we show that a simple in-context editing method achieves the best results on RippleEdits, highlighting the potential of such editing approaches.\n\nNotably, our benchmark covers a small fraction of all possible ripple-edits. For example, one could consider ripple effects that involve more than two hops, and explore the graph structure of different edits.\nIn addition, while we focus on ripple effects of single edits, future work can consider the effect of editing multiple facts in a single batch. Finally, it would be interesting to consider cases where models succeed in capturing ripple-edits, and analyze how these are implemented mechanistically in the transformer architecture Geva et al. ( [2023])).\n\n#### Limitations\n\nOur data generation pipeline relies on information from an existing knowledge-base (WikiData in our case), which could be incomplete or outdated. While RippleEdits does not aim to cover all the possible ripple-edits in WikiData, these concerns might be a major issue when seeking a comprehensive evaluation or considering domain-specific knowledge-bases, which often tend to be incomplete. A possible solution to explore in that case is to use LMs internal knowledge instead of an external knowledge-base Cohen et al. ( [2023b])).\n\nWith RippleEdits focusing on the ripple effect of edits, it does not include tests, such as paraphrasing of the edit and subject specificity, that evaluate the edit itself and are covered by existing benchmarks (e.g. CounterFact). In addition, it does not verify that many other facts that are distantly related to the edit, i.e., triplets that are not included in the close neighbourhood of the edit, were retained post-editing. For example, we expect that editing the capital of France would not affect the population of Poland, yet this is not explicitly checked. We note that building such an evaluation is hard, since there are many facts to consider and it is unclear how to determine automatically which triplets should and should not be affected by a certain edit.",
            "citations": null
          }
        },
        "abstract": "Modern language models capture a large body of factual knowledge. However,\nsome facts can be incorrectly induced or become obsolete over time, resulting\nin factually incorrect generations. This has led to the development of various\nediting methods that allow updating facts encoded by the model. Evaluation of\nthese methods has primarily focused on testing whether an individual fact has\nbeen successfully injected, and if similar predictions for other subjects have\nnot changed. Here we argue that such evaluation is limited, since injecting one\nfact (e.g. ``Jack Depp is the son of Johnny Depp'') introduces a ``ripple\neffect'' in the form of additional facts that the model needs to update\n(e.g.``Jack Depp is the sibling of Lily-Rose Depp''). To address this issue, we\npropose a novel set of evaluation criteria that consider the implications of an\nedit on related facts. Using these criteria, we then construct RippleEdits, a\ndiagnostic benchmark of 5K factual edits, capturing a variety of types of\nripple effects. We evaluate prominent editing methods on RippleEdits, showing\nthat current methods fail to introduce consistent changes in the model's\nknowledge. In addition, we find that a simple in-context editing baseline\nobtains the best scores on our benchmark, suggesting a promising research\ndirection for model editing."
      },
      "bib.bib5": {
        "id": "bib.bib5",
        "citation": "Gangadhar & Stratos (2024a)",
        "authors": "",
        "year": "",
        "title": "Model editing by pure fine-tuning.",
        "venue": "arXiv preprint arXiv:2402.11078",
        "pages": "",
        "url": "",
        "arxiv_id": "2402.11078",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Model editing is a promising approach to combating incorrect or otherwise unwanted knowledge in LLMs.\nIt assumes a set of edits that assert desired information\nand aims to alter the model so that it not only succeeds in memorizing\nthe edits (efficacy), but also applying the asserted information\nto new prompts (generalization), _without_ affecting\ninference that should remain unchanged (locality).\nThere is clearly a trade-off between these metrics.\nAt one extreme, the model can achieve high efficacy by\nmemorizing the edits, but it will fail in generalization and locality.\nAt another extreme, the model can achieve high locality by\nstaying unmodified, but it will fail in efficacy and generalization.\n\nA straightforward approach of fine-tuning the model on the requested edits\nis well known to perform poorly, especially in locality.\nThis motivated researchers to dismiss fine-tuning as an ineffective solution\nto model editing and develop very specialized methods\nsuch as MEND (Mitchell et al., [2022])), ROME (Meng et al., [2022])),\nand MEMIT (Meng et al., [2023])).\nA central theme of these methods is “minimally invasive modification”,\ntypically involving a careful selection of weights and rank-one updates.\nWhile technically interesting, they require a suite of assumptions\nwhich may not be satisfied in other contexts (e.g., with a different model architecture).\nIn contrast, fine-tuning is simple, completely agnostic to the details of the model,\nand can take advantage of advances in standard training such as\nparameter-efficient fine-tuning (PEFT) techniques.\n\n| Editor | |     |\n| --- |\n| Standard |\n| model? | | |     |\n| --- |\n| Batched |\n| edits? | | |     |\n| --- |\n| No |\n| training? | | |     |\n| --- |\n| Effective |\n| edits? | |\n| --- | --- | --- | --- | --- |\n| Naive fine-tuning | ✓ | ✓ | ✓ | ✗ |\n| MEND | ✗ | ✓ | ✗ | ✓ |\n| ROME | ✗ | ✗ | ✓ | ✓ |\n| MEMIT | ✗ | ✓ | ✓ | ✓ |\n| Our fine-tuning | ✓ | ✓ | ✗ | ✓ |\n\nTable 1: Conceptual comparisons of model editors.\n\nIn this work, we show that fine-tuning can be a viable approach to model editing,\nfocusing primarily on improving the edit score.\nWe shift the focus from models and algorithms to\ntraining objectives and data augmentation.\nSee Table [1]Table 1 ‣ 1 Introduction ‣ Model Editing by Pure Fine-Tuning\") for conceptual comparisons between our approach and other editors.\nOur method is a slight variation on naive fine-tuning with two small but important differences.\nFirst, in line with the theme of minimal modification, we optimize the _conditional_\nlikelihood (i.e., mask all tokens except the edited target).\nSecond, we augment the data with self-induced paraphrases of the prompt\nand arbitrary unrelated facts to encourage generalization and locality.\nThis simple change is sufficient for pure fine-tuning to match or outperform\nspecialized editors in mass-editing\nand also perform respectably in single-editing.",
            "citations": null
          },
          "2 Task": {
            "content": "We consider the task of mass-editing.\nLet 𝒱𝒱\\\\mathcal{V} denote the vocabulary.\nA fact is a sentence x∈𝒱T𝑥superscript𝒱𝑇x\\\\in\\\\mathcal{V}^{T} that expresses\na subject-relation-object triple (s,r,o)𝑠𝑟𝑜(s,r,o) in natural language.\nWe follow the convention in the model editing literature and assume that\nthe object o∈𝒱m𝑜superscript𝒱𝑚o\\\\in\\\\mathcal{V}^{m} is the last m𝑚m tokens of x𝑥x.\nThe prefix π=(x1​…​xm−1)𝜋subscript𝑥1…subscript𝑥𝑚1\\\\pi=(x\\_{1}\\\\ldots x\\_{m-1}) expresses (s,r)𝑠𝑟(s,r) and is denoted as the prompt.\nLet ℰℰ\\\\mathcal{E} denote a set of facts to enforce (i.e., requested edits).\nOur goal is to edit a pretrained language model so that\nit upholds the relations expressed in ℰℰ\\\\mathcal{E}\nwithout changing its behavior on other facts.\nIn ZsRE, ℰℰ\\\\mathcal{E} consists of 10,000 factual statements\n(e.g., “The artwork Gideon’s Way was by who? John Creasey”).\nIn CounterFact, ℰℰ\\\\mathcal{E} consists of 10,000 counterfactual statements (e.g., “TextEdit, a product of Nintendo”).\n\nAn editor is evaluated by three competing metrics: efficacy, generalization, and locality.\nLet pθsubscript𝑝𝜃p\\_{\\\\theta} denote a language model edited on ℰℰ\\\\mathcal{E}.\nIn ZsRE, efficacy is the accuracy of o=arg​maxy⁡pθ​(y\\|π)𝑜subscriptargmax𝑦subscript𝑝𝜃conditional𝑦𝜋o=\\\\operatorname\\*{arg\\\\,max}\\_{y}p\\_{\\\\theta}(y\\|\\\\pi) for (π,o)∈ℰ𝜋𝑜ℰ(\\\\pi,o)\\\\in\\\\mathcal{E};\ngeneralization is the accuracy of o=arg​maxy⁡pθ​(y\\|πpar)𝑜subscriptargmax𝑦subscript𝑝𝜃conditional𝑦subscript𝜋paro=\\\\operatorname\\*{arg\\\\,max}\\_{y}p\\_{\\\\theta}(y\\|\\\\pi\\_{\\\\text{par}})\nwhere πparsubscript𝜋par\\\\pi\\_{\\\\text{par}} is some paraphrase of π𝜋\\\\pi;\nlocality is the accuracy of ounrel=arg​maxy⁡pθ​(y\\|πunrel)subscript𝑜unrelsubscriptargmax𝑦subscript𝑝𝜃conditional𝑦subscript𝜋unrelo\\_{\\\\text{unrel}}=\\\\operatorname\\*{arg\\\\,max}\\_{y}p\\_{\\\\theta}(y\\|\\\\pi\\_{\\\\text{unrel}})\nwhere (πunrel,ounrel)subscript𝜋unrelsubscript𝑜unrel(\\\\pi\\_{\\\\text{unrel}},o\\_{\\\\text{unrel}}) is an unrelated fact.\nIn CounterFact, efficacy and generalization measure the accuracy of pθ​(o\\|π)>pθ​(otrue\\|π)subscript𝑝𝜃conditional𝑜𝜋subscript𝑝𝜃conditionalsubscript𝑜true𝜋p\\_{\\\\theta}(o\\|\\\\pi)>p\\_{\\\\theta}(o\\_{\\\\text{true}}\\|\\\\pi)\nand pθ​(o\\|πpar)>pθ​(otrue\\|πpar)subscript𝑝𝜃conditional𝑜subscript𝜋parsubscript𝑝𝜃conditionalsubscript𝑜truesubscript𝜋parp\\_{\\\\theta}(o\\|\\\\pi\\_{\\\\text{par}})>p\\_{\\\\theta}(o\\_{\\\\text{true}}\\|\\\\pi\\_{\\\\text{par}})\nwhere otruesubscript𝑜trueo\\_{\\\\text{true}} is a true object for (π,o)∈ℰ𝜋𝑜ℰ(\\\\pi,o)\\\\in\\\\mathcal{E}\n(e.g., “Apple” in “TextEdit, a product of Nintendo”).\nLocality measures the accuracy of pθ​(otrue\\|πnb)>pθ​(o\\|πnb)subscript𝑝𝜃conditionalsubscript𝑜truesubscript𝜋nbsubscript𝑝𝜃conditional𝑜subscript𝜋nbp\\_{\\\\theta}(o\\_{\\\\text{true}}\\|\\\\pi\\_{\\\\text{nb}})>p\\_{\\\\theta}(o\\|\\\\pi\\_{\\\\text{nb}})\nwhere πnbsubscript𝜋nb\\\\pi\\_{\\\\text{nb}} is a “neighbhorhood” prompt whose target must remain unchanged from otruesubscript𝑜trueo\\_{\\\\text{true}}\n(e.g., “Macintosh File System, a product of” →→\\\\rightarrow “Apple”).\nIn both datasets, the final edit score is the harmonic mean of\nefficacy, generalization, and locality.\n\nIt is well known that naive fine-tuning, namely just optimizing\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minθ−∑x∈ℰlog⁡pθ​(x)subscript𝜃subscript𝑥ℰsubscript𝑝𝜃𝑥\\\\displaystyle\\\\min\\_{\\\\theta}\\\\;-\\\\sum\\_{x\\\\in\\\\mathcal{E}}\\\\;\\\\log p\\_{\\\\theta}(x) |  | (1) |\n\nresults in a poor editing score. The main reason is that while it\nimproves efficacy and possibly even generalization, it harms locality by changing the\nmodel’s predictions on unrelated or neighborhood prompts.\nThis led to the development of highly specialized editing methods,\nwith the implicit assumption that fine-tuning is not effective for model editing.",
            "citations": null
          },
          "3 Method": {
            "content": "We propose a purely fine-tuning-based method that achieves a competitive editing score.\nOur objective is a slight variation of ( [1]In 2 Task ‣ Model Editing by Pure Fine-Tuning\")):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | minθ−∑(π,o)∈ℰ∪𝒫∪ℛlog⁡pθ​(o\\|π)subscript𝜃subscript𝜋𝑜ℰ𝒫ℛsubscript𝑝𝜃conditional𝑜𝜋\\\\displaystyle\\\\min\\_{\\\\theta}\\\\;-\\\\sum\\_{(\\\\pi,o)\\\\in\\\\mathcal{E}\\\\cup\\\\mathcal{P}\\\\cup\\\\mathcal{R}}\\\\;\\\\log p\\_{\\\\theta}(o\\|\\\\pi) |  | (2) |\n\nThere are two small but important differences between ( [1]In 2 Task ‣ Model Editing by Pure Fine-Tuning\")) and ( [2]In 3 Method ‣ Model Editing by Pure Fine-Tuning\")).\nFirst, we optimize the _conditional_ likelihood of the edit target o\\|πconditional𝑜𝜋o\\|\\\\pi\nrather than the full likelihood.\nOur motivation is to make the training more focused (for efficacy and generalization) and minimize the damage caused by fine-tuning (for locality).\n\nSecond, we fine-tune not only on the requested edits ℰℰ\\\\mathcal{E} but\nalso additional facts in 𝒫𝒫\\\\mathcal{P} and 𝒩𝒩\\\\mathcal{N}\nto promote generalization and locality.\n𝒫𝒫\\\\mathcal{P} is pseudo-paraphrases of the prompts in ℰℰ\\\\mathcal{E}\ngenerated by appending text generated by the (unedited) model.\nMore specifically, for each (π,o)∈ℰ𝜋𝑜ℰ(\\\\pi,o)\\\\in\\\\mathcal{E} we generate\n((z,π),o)∈𝒫𝑧𝜋𝑜𝒫((z,\\\\pi),o)\\\\in\\\\mathcal{P} where z∼pθsimilar-to𝑧subscript𝑝𝜃z\\\\sim p\\_{\\\\theta}.\nℛℛ\\\\mathcal{R} is a set of facts that should not be altered\nby editing on ℰℰ\\\\mathcal{E}.\nThere are many ways to obtain ℛℛ\\\\mathcal{R}, but we find taking\n_random_ facts from the training split to be simple and effective.\nWe filter x∈ℛ𝑥ℛx\\\\in\\\\mathcal{R} to ensure that x𝑥x does not include\nthe subject-relation-object triple used in evaluation.\n\nWe emphasize that the augmented sets 𝒫𝒫\\\\mathcal{P} and ℛℛ\\\\mathcal{R}\ndo not use the evaluation facts (otherwise it is trivial).\nGiven the requested edits ℰℰ\\\\mathcal{E}, we perform the data augmentation\nand finetune the model according to ( [2]In 3 Method ‣ Model Editing by Pure Fine-Tuning\")).\n\n#### Contrastive learning.\n\nGiven that our goal in CounterFact is to achieve\npθ​(o\\|π)>pθ​(otrue\\|π)subscript𝑝𝜃conditional𝑜𝜋subscript𝑝𝜃conditionalsubscript𝑜true𝜋p\\_{\\\\theta}(o\\|\\\\pi)>p\\_{\\\\theta}(o\\_{\\\\text{true}}\\|\\\\pi)\nwhere o𝑜o is the new object to enforce over the original otruesubscript𝑜trueo\\_{\\\\text{true}} for a given prompt π𝜋\\\\pi,\nit is natural to consider a contrastive objective.\nWe experimented with DPO (Rafailov et al., [2023]))\nwhere we frame o\\|πconditional𝑜𝜋o\\|\\\\pi as the “preferred” response\nover otrue\\|πconditionalsubscript𝑜true𝜋o\\_{\\\\text{true}}\\|\\\\pi, optimizing the DPO loss\njointly with ( [2]In 3 Method ‣ Model Editing by Pure Fine-Tuning\")).\nHowever, we found that prompt masking and data augmentation are already\neffective and do not benefit from contrastive learning.\n\n|  | ZsRE | CounterFact |\n| --- | --- | --- |\n| Editor | Score | Efficacy | Generalization | Locality | Score | Efficacy | Generalization | Locality |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| — (original GPT-J) | 26.4 | 26.4 (0.6) | 25.8 (0.5) | 27.0 (0.5) | 22.4 | 15.2 (0.7) | 17.7 (0.6) | 83.5 (0.5) |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| FT-W (21st layer w/ weight decay) | 42.1 | 69.6 (0.6) | 64.8 (0.6) | 24.1 (0.6) | 67.6 | 99.4 (0.1) | 77.0 (0.7) | 46.9 (0.6) |\n| MEND | 20.0 | 19.4 (0.5) | 18.6 (0.5) | 22.4 (0.5) | 23.1 | 15.7 (0.7) | 18.5 (0.7) | 83.0 (0.5) |\n| ROME | 2.6 | 21.0 (0.7) | 19.6 (0.7) | 0.9 (0.1) | 50.3 | 50.2 (1.0) | 50.4 (0.8) | 50.2 (0.6) |\n| MEMIT | 50.7 | 96.7 (0.3) | 89.7 (0.5) | 26.6 (0.5) | 85.8 | 98.9 (0.2) | 88.6 (0.5) | 73.7 (0.5) |\n| FT | 44.8 | 99.9 (0.03) | 98.9 (0.2) | 21.4 (0.5) | 52.8 | 79.6 (0.8) | 58.5 (0.8) | 36.8 (0.7) |\n| FT (21st layer) | 42.9 | 99.9 (0.0) | 87.4 (0.5) | 20.5 (0.5) | 60.5 | 99.9 (0.04) | 63.3 (0.8) | 42.0 (0.6) |\n| FT + Mask | 58.3 | 97.6 (0.3) | 91.7 (0.5) | 32.9 (0.6) | 54.3 | 97.1 (0.3) | 62.1 (0.8) | 34.7 (0.6) |\n| FT + Mask + Para | 56.1 | 99.9 (0.0) | 98.7 (0.2) | 29.9 (0.5) | 63.7 | 100.0 (0.0) | 92.5 (0.4) | 38.0 (0.6) |\n| FT + Mask + Para + Rand | 62.0 | 99.9 (0.0) | 97.0 (0.3) | 35.6 (0.6) | 86.5 | 98.8 (0.2) | 93.6 (0.4) | 72.0 (0.6) |\n| FT + Mask + Para + Rand + DPO | — | — | — | — | 85.5 | 98.8 (0.2) | 93.4 (0.4) | 70.1 (0.6) |\n\nTable 2: Mass-editing results on ZsRE and CounterFact (10,000 edits each) with GPT-J. The results of the specialized methods (FT-W, MEND, ROME, MEMIT) are from Meng et al. ( [2023])). FT denotes naive fine-tuning on the requested edits; FT (21st layer) denotes FT only on the 21st layer. “+ Mask” means we mask the prompt. “+ Para” means we augment the data with model-generated paraphrases of the requested edits. “+ Rand” means we augment the data with _random_ facts from the training split (not overlapping with any evaluation facts). “+ DPO” means we additionally optimize the DPO loss term using the changed target as the preferred response over the original target (which is supplied in CounterFact).",
            "citations": null
          },
          "4 Related Work": {
            "content": "We discuss some prominent model editing methods and the different assumptions they require to highlight the simplicity of our fine-tuning approach; we refer to Zhang et al. ( [2024])) for an in-depth survey.\n\nMEND (Mitchell et al., [2022])) is a meta-learning method (Sinitsin et al., [2020]); De Cao et al., [2021])) that predicts the change in the gradient.\nSimilar to our approach, it also involves an explicit training stage (on the training split of ZsRE).\nIt uses a special rank-one decomposition of the gradient for parameter efficiency.\nIn our case, we achieve parameter efficiency without special considerations\nsimply by leveraging PEFT methods.\nMEND works poorly for mass-editing.\n\nROME (Meng et al., [2022])) is a locate-then-edit method (Geva et al., [2021]); Dai et al., [2022]))\nthat first uses causal tracing to identify the feedforward layer to change, and then applies\na rank-one update to the layer’s weight matrix.\nWhile it does not involve an explicit training stage, it\ndoes require an explicit knowledge of the subject s𝑠s in the edit\nand its vector representation (which is heuristically induced).\nIt also relies on Wikipedia to estimate the covariance matrix of\nthe subject embeddings (needed in the rank-one update).\nROME works well on single-editing but poorly on mass-editing.\nMEMIT (Meng et al., [2023])) extends ROME to multiple edits\nby carefully spreading updates to multiple layers.\nLike ROME, it requires layer specification, subject embeddings,\nand covariance statistics obtained from Wikipedia.\nMEMIT is very effective for mass-editing and is our strongest baseline.\n\nIKE (Zheng et al., [2023])) proposes in-context learning for model editing. While it similarly uses demonstrations, it is critically limited to single-editing. It also requires an initial model that is capable of effective in-context learning. Consequently, IKE focuses on single-editing with large-scale LLMs, making their results not comparable to ours.\n\nWe define our scope as achieving a competitive edit score through pure fine-tuning.\nIn particular, we do not focus on preserving general capabilities of the model being edited.\nExisting methods consider basic metrics such as n𝑛n-gram repetition,\nbut recent work shows that performance on a variety of downstream tasks\ndrops to zero under any editor (Gu et al., [2024])).\nWe leave preserving the general capabilities of an LLM with a fine-tuning editor\nas the next step of our work.\n\n|  | ZsRE | CounterFact |\n| --- | --- | --- |\n| Editor | Score | Efficacy | Generalization | Locality | Score | Efficacy | Generalization | Locality |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| — (original GPT-2 XL) | 22.5 | 22.2 (0.5) | 21.3 (0.5) | 24.2 (0.5) | 30.5 | 22.2 (0.9) | 24.7 (0.8) | 78.1 (0.6) |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| FT | 45.9 | 99.6 (0.1) | 82.1 (0.1) | 23.2 (0.5) | 65.1 | 100.0 (0.0) | 87.9 (0.6) | 40.4 (0.7) |\n| FT-L | 40.1 | 92.3 (0.4) | 47.2 (0.7) | 23.4 (0.5) | 66.9 | 99.1 (0.2) | 48.7 (1.0) | 70.3 (0.7) |\n| KN | - | - | - | - | 35.6 | 28.7 (1.0) | 28.0 (0.9) | 72.9 (0.7) |\n| KE | 41.8 | 65.5 (0.6) | 61.4 (0.6) | 24.9 (0.5) | 52.2 | 84.3 (0.8) | 75.4 (0.8) | 30.9 (0.7) |\n| MEND | 42.9 | 75.9 (0.5) | 65.3 (0.6) | 24.1 (0.5) | 57.9 | 99.1 (0.2) | 65.4 (0.9) | 37.9 (0.7) |\n| ROME | 47.9 | 99.8 (0.0) | 88.1 (0.5) | 24.2 (0.5) | 89.2 | 100 (0.1) | 96.4 (0.3) | 75.4 (0.7) |\n| FT + Mask + Para + Sim | 51.4 | 100.0 (0.0) | 99.9 (0.0) | 26.1 (0.8) | 83.1 | 98.6 (0.3) | 87.3 (0.7) | 69.0 (0.7) |\n\nTable 3: Single-editing results on ZsRE (10,000 edits) and CounterFact (7,500 edits) with GPT-2 XL. “+ Sim” means we include similar facts (measured by Sentence-BERT) instead of random facts for locality supervision.\n\n| Editor | Score | Fluency | Consistency |\n| --- | --- | --- | --- |\n| — (original GPT-J) | 22.4 | 622.4 (0.3) | 29.4 (0.2) |\n| --- | --- | --- | --- |\n| FT-W | 67.6 | 293.9 (2.4) | 15.9 (0.3) |\n| MEND | 20.0 | 618.4 (0.3) | 31.1 (0.2) |\n| ROME | 50.3 | 589.6 (0.5) | 3.3 (0.0) |\n| MEMIT | 85.8 | 619.9 (0.3) | 40.1 (0.2) |\n| FT | 52.8 | 626.1 (0.4) | 31.0 (0.2) |\n| FT + Mask | 54.3 | 563.6 (0.5) | 6.1 (0.1) |\n| FT + Mask + Para | 63.7 | 550.7 (0.6) | 4.7 (0.1) |\n| FT + Mask + Para + Rand | 86.5 | 352.0 (1.5) | 5.2 (0.2) |\n\nTable 4: Fluency and consistency with mass-editing on CounterFact.",
            "citations": null
          },
          "5 Experiments": {
            "content": "### 5.1 Mass-Editing\n\nOur main results are on mass-editing with on ZsRE and CounterFact, following the same setting in Meng et al. ( [2023])).\nEach dataset provides 10,000 requested edits (i.e., ℰℰ\\\\mathcal{E}).\nAs described in Section [3]Method ‣ Model Editing by Pure Fine-Tuning\"), we\naugment the fine-tuning data with pseudo-paraphrases of the edit prompts 𝒫𝒫\\\\mathcal{P} for generalization supervision and random facts ℛℛ\\\\mathcal{R}\nfor locality supervision.\nMore specifically, for each edit in ℰℰ\\\\mathcal{E} we generate\n15 paraphrases and take 20 facts from the training split\nwhile ensuring that they do not contain any evaluation facts.\nThus the total number of facts we fine-tune on is 360,000.\nWe fine-tune GPT-J (6B) (Wang and Komatsuzaki, [2021])) with LoRA (Hu et al., [2022])) for computational efficiency.\nWe optimize ( [2]In 3 Method ‣ Model Editing by Pure Fine-Tuning\")). The training takes around 7 hours on 8 GPUs.\n\nWe give the results in Table [2]Table 2 ‣ Contrastive learning. ‣ 3 Method ‣ Model Editing by Pure Fine-Tuning\")\nwhere the row “FT + Mask + Para + Rand” corresponds to our final method.\nWe show various ablations to illustrate the effect of\nindividual components.\nWe can make the following observations.\nFirst, the proposed prompt masking in ( [2]In 3 Method ‣ Model Editing by Pure Fine-Tuning\")) (FT + Mask)\nimproves the performance of vanilla fine-tuning (FT),\nsupporting the intuition that minimizing the model update is beneficial.\nIn fact, on ZsRE this already outperforms MEMIT without any data augmentation.\nSecond, augmenting the data with paraphrased prompts substantially improves generalization (FT + Mask + Para).\nThird, augmenting the data with random facts further improves locality\n(FT + Mask + Para + Rand), allowing pure fine-tuning to match the\nperformance of MEMIT on CounterFact.\nWe find that adding the DPO loss on top of the final method does not yield improvements.\n\n### 5.2 Single-Editing\n\nTo compare with existing methods developed for single-editing (i.e., updating the model for a single fact),\nwe consider optimizing ( [2]In 3 Method ‣ Model Editing by Pure Fine-Tuning\")) one edit at a time.\nWe follow the setting in ROME and use GPT-2 XL (1.5B) Radford et al. ( [2019])).\nThe training takes around 1.4 seconds per edit on average.\nWe give the results in Table [3]Table 3 ‣ 4 Related Work ‣ Model Editing by Pure Fine-Tuning\").\nWe find that it is helpful to include similar facts instead of random facts for locality\nsupervision, presumably because fine-tuning is more sensitive with small data size\nthus requiring more care in the selection of demonstrations.\nWe use Sentence-BERT embeddings (Reimers and Gurevych, [2019])) and take 15 nearest facts as ℛℛ\\\\mathcal{R}.\nOn ZsRE, our method outperforms all existing single-edit methods.\nOn CounterFact, our method lags behind ROME which is specifically optimized for single-editing,\nbut still achieves the second-best edit score.\n\n| Editor | Score | Fluency | Consistency |\n| --- | --- | --- | --- |\n| — (original GPT-2 XL) | 30.5 | 626.6 (0.3) | 31.9 (0.2) |\n| --- | --- | --- | --- |\n| FT | 65.1 | 607.1 (1.1) | 40.5 (0.3) |\n| FT-L | 66.9 | 621.4 (1.0) | 37.4 (0.3) |\n| KN | 35.6 | 570.4 (2.3) | 30.3 (0.3) |\n| KE | 52.2 | 586.6 (2.1) | 31.2 (0.3) |\n| MEND | 57.9 | 624.2 (0.4) | 34.8 (0.3) |\n| ROME | 89.2 | 621.9 (0.5) | 41.9 (0.3) |\n| FT + Mask + Para + Sim | 83.1 | 557.0 (1.8) | 15.2 (0.3) |\n\nTable 5: Fluency and consistency with single-editing on CounterFact.\n\n### 5.3 Generative metrics\n\nWe report results on generative metrics in Table [4]Table 4 ‣ 4 Related Work ‣ Model Editing by Pure Fine-Tuning\") and [5]Table 5 ‣ 5.2 Single-Editing ‣ 5 Experiments ‣ Model Editing by Pure Fine-Tuning\")\nfor completeness.\nFollowing prior work (Meng et al., [2022]), [2023])),\nwe report fluency (entropy of n𝑛n-gram distributions) and\nconsistency (similarity score with a reference text).\nOur fine-tuning methods take a hit on these metrics while improving the\nedit score, showing that more work is needed to go beyond classification.\nHowever, recent work shows that _none_ of the compared editors preserves\ndownstream performance (Gu et al., [2024])),\nthus achieving this goal meaningfully is still an open problem.",
            "citations": null
          },
          "6 Conclusions": {
            "content": "We have demonstrated that pure fine-tuning is sufficient to obtain strong edit performance\nwith a slight modification: optimizing the conditional likelihood and augmenting the data\nwith additional facts.\nOur results challenge the assumption that fine-tuning is ineffective as a model editor, suggesting that model editing could become part of standard training.",
            "citations": null
          }
        },
        "abstract": "Standard fine-tuning is considered not as effective as specialized methods\nfor model editing due to its comparatively poor performance. However, it is\nsimple, agnostic to the architectural details of the model being edited, and\nable to leverage advances in standard training techniques with no additional\nwork (e.g., black-box PEFT for computational efficiency), making it an\nappealing choice for a model editor. In this work, we show that standard\nfine-tuning alone can yield competitive model editing performance with two\nminor modifications. First, we optimize the conditional likelihood rather than\nthe full likelihood. Second, in addition to the typical practice of training on\nrandomly paraphrased edit prompts to encourage generalization, we also train on\nrandom or similar unedited facts to encourage locality. Our experiments on the\nZsRE and CounterFact datasets demonstrate that these simple modifications allow\nstandard fine-tuning to match or outperform highly specialized editors in terms\nof edit score."
      }
    },
    "key_map": {
      "2005.14165": "bib.bib1",
      "2307.12976": "bib.bib2",
      "2402.11078": "bib.bib5"
    }
  }
}