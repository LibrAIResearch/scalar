{
  "title": "Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective",
  "abstract": "The design space of discrete-space diffusion or flow generative models are\nsignificantly less well-understood than their continuous-space counterparts,\nwith many works focusing only on a simple masked construction. In this work, we\naim to take a holistic approach to the construction of discrete generative\nmodels based on continuous-time Markov chains, and for the first time, allow\nthe use of arbitrary discrete probability paths, or colloquially, corruption\nprocesses. Through the lens of optimizing the symmetric kinetic energy, we\npropose velocity formulas that can be applied to any given probability path,\ncompletely decoupling the probability and velocity, and giving the user the\nfreedom to specify any desirable probability path based on expert knowledge\nspecific to the data domain. Furthermore, we find that a special construction\nof mixture probability paths optimizes the symmetric kinetic energy for the\ndiscrete case. We empirically validate the usefulness of this new design space\nacross multiple modalities: text generation, inorganic material generation, and\nimage generation. We find that we can outperform the mask construction even in\ntext with kinetic-optimal mixture paths, while we can make use of\ndomain-specific constructions of the probability path over the visual domain.",
  "paper_id": "http://arxiv.org/abs/2412.03487v1",
  "markdown_content": "# Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\n\nNeta Shaul1,‚Ä†,\nItai Gat2,\nMarton Havasi2,\nDaniel Severo2,\nAnuroop Sriram2,\n\nPeter Holderrieth3,‚Ä†,\nBrian Karrer2,\nYaron Lipman2,\nRicky T. Q. Chen2\n\n1Weizmann Institute of Science,\n2Meta FAIR, 3MIT CSAIL\n\n‚Ä†Work done during internship at Meta FAIR\n\n###### Abstract\n\nThe design space of discrete-space diffusion or flow generative models are significantly less well-understood than their continuous-space counterparts, with many works focusing only on a simple masked construction.\nIn this work, we aim to take a holistic approach to the construction of discrete generative models based on continuous-time Markov chains, and for the first time, allow the use of arbitrary discrete probability paths, or colloquially, corruption processes.\nThrough the lens of optimizing the symmetric kinetic energy, we propose velocity formulas that can be applied to any given probability path, completely decoupling the probability and velocity, and giving the user the freedom to specify any desirable probability path based on expert knowledge specific to the data domain.\nFurthermore, we find that a special construction of mixture probability paths optimizes the symmetric kinetic energy for the discrete case.\nWe empirically validate the usefulness of this new design space across multiple modalities: text generation, inorganic material generation, and image generation. We find that we can outperform the mask construction even in text with kinetic-optimal mixture paths, while we can make use of domain-specific constructions of the probability path over the visual domain.\n\n## 1 Introduction\n\nGenerative models over discrete spaces have not seen as much progress on the methodology side compared to continuous-space counterparts.\nFor the most part, applications such as large language modeling rely solely on autoregressive models\n(Radford et al., [2019](https://ar5iv.org/html/2412.03487#bib.bib44 \"\"); Bommasani et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib3 \"\")). The simplicity of autoregressive modeling has also motivated people to use them for multimodal generation, where other modalities, such as images and videos, are tokenized and modeled within an autoregressive framework (Van den Oord et al., [2016](https://ar5iv.org/html/2412.03487#bib.bib57 \"\"); Team, [2024](https://ar5iv.org/html/2412.03487#bib.bib55 \"\"); Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")).\nWhile obtaining reasonable results, they have not yet reached the performance of continuous-space generative models such as denoising diffusion (Ho et al., [2020](https://ar5iv.org/html/2412.03487#bib.bib23 \"\"); Song et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib52 \"\")) and Flow Matching models (Lipman et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib30 \"\"); Albergo et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib1 \"\")) for the visual-audio domains (Rombach et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib45 \"\"); Dai et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib9 \"\"); Esser et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib17 \"\"); Zhou et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib66 \"\")), where it is believed that the ability to perform iterative refinement brings significant gains (Saharia et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib46 \"\"); Zhang et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib64 \"\")).\n\nA promising framework that brings iterative refinement to the discrete case is to consider the use of Markov chains within a dynamical generative framework. Many discrete-space generative flow and diffusion models have seen success in the generation of text (Austin et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib2 \"\"); Lou et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib32 \"\"); Shi et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\"); Sahoo et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib47 \"\"); Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")), proteins (Campbell et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\")), images (Austin et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib2 \"\"); Shi et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\")),\nand even executable code (Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")).\nHowever, the design space of these models is currently rather limited, with many recent works instead focusing solely on the case of masking as a corruption process (Shi et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\"); Sahoo et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib47 \"\")).\nThe masked construction is an extension of masked pretraining (Devlin, [2018](https://ar5iv.org/html/2412.03487#bib.bib13 \"\"); Yang, [2019](https://ar5iv.org/html/2412.03487#bib.bib63 \"\")), but it does not fully embody the concept of iterative refinement as it is equivalent to learning autoregressive models for every ordering (Hoogeboom et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib24 \"\"); Chang et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib6 \"\")), and it has been noticed that some of the recent reported progress was actually misleading due to low-precision sampling (Zheng et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib65 \"\")) rather than the explicit design choice of masking as a corruption process.\nIn spite of this, the masked construction has often been found to be the best performing choice out of the limited family of corruption processes previously considered tractable (Austin et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib2 \"\"); Campbell et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\"); Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")).\n\nWe instead take a holistic view on constructing discrete Flow Matching models, massively expanding the design space to enable arbitrary probability paths, or colloquially, corruption processes, grounded in the framework of continuous-time Markov chains (CTMC). We list our contributions:\n\n1. 1.\n\n\nAnalogous to the continuous setting, we find that an infinite number of velocities can generate any given probability path. In order to reduce this search space, we consider a decomposition into a _probability-advancing_ velocity and a _probability-preserving_ velocity.\n\n2. 2.\n\n\nTo explore the space of probability-advancing velocities, we motivate a family of closed-form velocities that be formulated as optimizing kinetic energy. In particular, we are the first to formulate velocities that can work with any choice of probability path, completely opening up the design space of probability paths, e.g., domain-specific constructions, while recovering the velocities used by prior works for existing paths in the literature.\n\n3. 3.\n\n\nWe also find that the probability path itself can also be optimized with the same kinetic energy criterion. A closed-form solution surprisingly recovers the mixture paths considered by Gat et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")) but with novel source-dependent schedulers.\n\n4. 4.\n\n\nWe derive the ELBO for discrete Flow Matching models in full generality. This leads to an improved ELBO for training mixture probability paths that has not been used before, and recovers the ELBO derived by Shi et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\")) for the masked construction. We find that with this ELBO, our kinetic-optimal mixture paths outperform the masked construction.\n\n\n## 2 Background: Discrete Flow Matching\n\nWe are interested in learning a generative model that approximates a data distribution q‚Äã(x)ùëûùë•q(x), where x=(x1,x2,‚Ä¶,xD)‚ààùíÆ=ùíØDùë•superscriptùë•1superscriptùë•2‚Ä¶superscriptùë•ùê∑ùíÆsuperscriptùíØùê∑x=(x^{1},x^{2},\\\\ldots,x^{D})\\\\in{\\\\mathcal{S}}={\\\\mathcal{T}}^{D} with ùíØ=\\[K\\]‚âú{1,2,‚Ä¶,K}ùíØdelimited-\\[\\]ùêæ‚âú12‚Ä¶ùêæ{\\\\mathcal{T}}=\\[K\\]\\\\triangleq\\\\left\\\\{1,2,\\\\ldots,K\\\\right\\\\} being a discrete set of possible token values, and D‚àà‚Ñïùê∑‚ÑïD\\\\in\\\\mathbb{N} is number of discrete variables.\nFor brevity and without loss of generality, we consider all dimensions to have the same number of discrete values.\n\nProbability paths.\nWe denote by p‚Äã(x)ùëùùë•p(x) and q‚Äã(x)ùëûùë•q(x) the source and target, respectively, probability mass functions (PMFs) over the state space ùíÆùíÆ{\\\\mathcal{S}}.\nWe consider _probability paths_ pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x), t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], to be time-dependent PMFs taking the form\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pt‚Äã(x)‚âú‚àëx1‚ààùíÆpt‚Äã(x\\|x1)‚Äãq‚Äã(x1), where ‚Äãpt‚Äã(x\\|x1)‚âú‚àèi=1Dpt‚Äã(xi\\|x1i),formulae-sequence‚âúsubscriptùëùùë°ùë•subscriptsubscriptùë•1ùíÆsubscriptùëùùë°conditionalùë•subscriptùë•1ùëûsubscriptùë•1‚âú where subscriptùëùùë°conditionalùë•subscriptùë•1superscriptsubscriptproductùëñ1ùê∑subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñ\\\\textstyle p\\_{t}(x)\\\\triangleq\\\\sum\\_{x\\_{1}\\\\in{\\\\mathcal{S}}}p\\_{t}(x\\|x\\_{1})q(x\\_{1}),\\\\text{ where }p\\_{t}(x\\|x\\_{1})\\\\triangleq\\\\prod\\_{i=1}^{D}p\\_{t}(x^{i}\\|x\\_{1}^{i}), |  | (1) |\n\nand pt‚Äã(xi\\|x1i)subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i}) is a _conditional probability path_ which interpolates between a simple PMF at time t=0ùë°0t=0 and a delta PMF centered around x1isubscriptsuperscriptùë•ùëñ1x^{i}\\_{1} at t=1ùë°1t=1. That is, we assume the boundary conditions\np0‚Äã(xi\\|x1i)=p‚Äã(xi)subscriptùëù0conditionalsuperscriptùë•ùëñsubscriptsuperscriptùë•ùëñ1ùëùsuperscriptùë•ùëñp\\_{0}(x^{i}\\|x^{i}\\_{1})=p(x^{i}) and p1‚Äã(xi\\|x1i)=Œ¥x1i‚Äã(xi)subscriptùëù1conditionalsuperscriptùë•ùëñsubscriptsuperscriptùë•ùëñ1subscriptùõøsubscriptsuperscriptùë•ùëñ1superscriptùë•ùëñp\\_{1}(x^{i}\\|x^{i}\\_{1})=\\\\delta\\_{x^{i}\\_{1}}(x^{i}).\nHence we can interpret these probability paths pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) in equation [1](https://ar5iv.org/html/2412.03487#S2.E1 \"Equation 1 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") as interpolating between a factorized source distribution p‚Äã(x)‚âú‚àèi=1Dp‚Äã(xi)‚âúùëùùë•superscriptsubscriptproductùëñ1ùê∑ùëùsuperscriptùë•ùëñp(x)\\\\triangleq\\\\prod\\_{i=1}^{D}p(x^{i}) and the data distribution q‚Äã(x)ùëûùë•q(x).\nA common family of probability paths used in previous works is the collection of _mixture paths_(Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")), with x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-dependent schedulers similar to Shi et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\")):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pt‚Äã(xi\\|x1i)=(1‚àíŒ∫t‚Äã(x1i))‚Äãp‚Äã(xi)+Œ∫t‚Äã(x1i)‚ÄãŒ¥x1i‚Äã(xi),subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñ1subscriptùúÖùë°superscriptsubscriptùë•1ùëñùëùsuperscriptùë•ùëñsubscriptùúÖùë°superscriptsubscriptùë•1ùëñsubscriptùõøsuperscriptsubscriptùë•1ùëñsuperscriptùë•ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i})=(1-\\\\kappa\\_{t}(x\\_{1}^{i}))p(x^{i})+\\\\kappa\\_{t}(x\\_{1}^{i})\\\\delta\\_{x\\_{1}^{i}}(x^{i}), |  | (2) |\n\nwhere Œ∫0‚Äã(‚ãÖ)=0subscriptùúÖ0‚ãÖ0\\\\kappa\\_{0}(\\\\cdot)=0 and Œ∫1‚Äã(‚ãÖ)=1subscriptùúÖ1‚ãÖ1\\\\kappa\\_{1}(\\\\cdot)=1 to satisfy the boundary conditions. Specifically, with p‚Äã(xi)=Œ¥ùïû‚Äã(xi)ùëùsuperscriptùë•ùëñsubscriptùõøùïûsuperscriptùë•ùëñp(x^{i})=\\\\delta\\_{\\\\mathbbm{m}}(x^{i}) we recover the masked construction (Shi et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\"); Sahoo et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib47 \"\")).\n\nProbability velocities.\nAs our generative process, we simulate a Continuous Time Markov Chain (CTMC) (Xt)t‚àà\\[0,1\\]subscriptsubscriptùëãùë°ùë°01(X\\_{t})\\_{t\\\\in\\[0,1\\]} in ùíÆùíÆ{\\\\mathcal{S}} such that its time marginals follow a prescribed probability path,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Xt‚àºpt.similar-tosubscriptùëãùë°subscriptùëùùë°X\\_{t}\\\\sim p\\_{t}. |  | (3) |\n\nIn order to do so, we define the concept of a _probability velocity_, also known as a rate matrix.\nWe say that a probability velocity utsubscriptùë¢ùë°u\\_{t}generatesptsubscriptùëùùë°p\\_{t} if utsubscriptùë¢ùë°u\\_{t} characterizes a Markov process Xtsubscriptùëãùë°X\\_{t} with marginal ptsubscriptùëùùë°p\\_{t} (equation [3](https://ar5iv.org/html/2412.03487#S2.E3 \"Equation 3 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1) in the following sense:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñô‚Äã(Xt+h=x\\|Xt=z)=Œ¥z‚Äã(x)+h‚Äãut‚Äã(x,z)+o‚Äã(h),‚Ñôsubscriptùëãùë°‚Ñéconditionalùë•subscriptùëãùë°ùëßsubscriptùõøùëßùë•‚Ñésubscriptùë¢ùë°ùë•ùëßùëú‚Ñé\\\\textstyle\\\\mathbb{P}(X\\_{t+h}=x\\ \\|\\ X\\_{t}=z)=\\\\delta\\_{z}(x)+hu\\_{t}(x,z)+o(h), |  | (4) |\\\n\\\nwhere o‚Äã(h)ùëú‚Ñéo(h) denotes a function which is asymptotically smaller than h‚Ñéh, i.e., limh‚Üí0o‚Äã(h)/h=0subscript‚Üí‚Ñé0ùëú‚Ñé‚Ñé0\\\\lim\\_{h\\\\rightarrow 0}\\\\nicefrac{{o(h)}}{{h}}=0. Intuitively, utsubscriptùë¢ùë°u\\_{t} describes the Markov transition of Xtsubscriptùëãùë°X\\_{t} for small step sizes h>0‚Ñé0h>0. We note that for equation [4](https://ar5iv.org/html/2412.03487#S2.E4 \"Equation 4 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") to be a valid PMF, utsubscriptùë¢ùë°u\\_{t} must at least satisfy the _Rate Conditions_:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x,z)‚â•0‚Äã for all ‚Äãx‚â†z‚Äã and ‚Äã‚àëxut‚Äã(x,z)=0‚ñ∂ Rate Conditions\\\\begin{matrix}\\[l\\]u\\_{t}(x,z)\\\\geq 0\\\\text{ for all }x\\\\neq z\\\\text{ and }\\\\sum\\_{x}u\\_{t}(x,z)=0\\\\end{matrix}\\\\qquad\\\\blacktriangleright\\\\text{ Rate Conditions} |  | (5) |\\\n\\\nSingle-variable-change probability velocities.\\\nIt is natural to consider modeling a CTMC process Xtsubscriptùëãùë°X\\_{t} over ùíÆùíÆ{\\\\mathcal{S}} by defining a ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) for all pairs x,z‚ààùíÆùë•ùëßùíÆx,z\\\\in{\\\\mathcal{S}}.\\\nHowever, the state space is of size \\|ùíØ\\|DsuperscriptùíØùê∑\\|{\\\\mathcal{T}}\\|^{D} so this is generally prohibitive for high dimensions.\\\nA remedy is to consider rates that only allow a state to change in a single variable (Campbell et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib4 \"\")), e.g., in the following example we only change the variable at the iùëñi-th coordinate:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | (z1,‚Ä¶,zi‚àí1,ùíõùíä,zi+1,‚Ä¶,zD)‚Üí(z1,‚Ä¶,zi‚àí1,ùíôùíä,zi+1,‚Ä¶,zD).‚Üísuperscriptùëß1‚Ä¶superscriptùëßùëñ1superscriptùíõùíäsuperscriptùëßùëñ1‚Ä¶superscriptùëßùê∑superscriptùëß1‚Ä¶superscriptùëßùëñ1superscriptùíôùíäsuperscriptùëßùëñ1‚Ä¶superscriptùëßùê∑(z^{1},\\\\ldots,z^{i-1},\\\\bm{z^{i}},z^{i+1},\\\\ldots,z^{D})\\\\rightarrow(z^{1},\\\\ldots,z^{i-1},\\\\bm{x^{i}},z^{i+1},\\\\ldots,z^{D}). |  | (6) |\\\n\\\nTo model only such changes we restrict our attention to velocities of the form uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) that describe the probability rate between the state zùëßz and the state with the iùëñi-th coordinate replaced, i.e., as described in the r.h.s. in equation [6](https://ar5iv.org/html/2412.03487#S2.E6 \"Equation 6 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We can express the full velocity ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) via uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x,z)=‚àëi=1Duti‚Äã(xi,z)‚Äã‚àèj‚â†iŒ¥zj‚Äã(xj),subscriptùë¢ùë°ùë•ùëßsuperscriptsubscriptùëñ1ùê∑superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptproductùëóùëñsubscriptùõøsuperscriptùëßùëósuperscriptùë•ùëóu\\_{t}(x,z)=\\\\sum\\_{i=1}^{D}u\\_{t}^{i}(x^{i},z){\\\\color\\[rgb\\]{0,0,0}{\\\\prod\\_{j\\\\neq i}\\\\delta\\_{z^{j}}(x^{j})}}, |  | (7) |\\\n\\\nwhich states the probability velocity between two states z‚Üíx‚Üíùëßùë•z\\\\rightarrow x is zero if they differ by more than one variable and equal uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) if they differ by exactly one variable.\\\nPlugging this velocity into equation [4](https://ar5iv.org/html/2412.03487#S2.E4 \"Equation 4 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), it can be shown that (Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")):\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñô‚Äã(Xt+h=x\\|Xt=z)=‚àèi=1D\\[Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)\\]+o‚Äã(h)‚Ñôsubscriptùëãùë°‚Ñéconditionalùë•subscriptùëãùë°ùëßsuperscriptsubscriptproductùëñ1ùê∑delimited-\\[\\]subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßùëú‚Ñé\\\\textstyle\\\\mathbb{P}(X\\_{t+h}=x\\ \\|\\ X\\_{t}=z)=\\\\prod\\_{i=1}^{D}\\\\left\\[\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z)\\\\right\\]+o(h) |  | (8) |\\\n\\\nThis implies we can sample each variable Xt+hisuperscriptsubscriptùëãùë°‚ÑéùëñX\\_{t+h}^{i} _independently_ from the distribution Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z), and only incur an error of o‚Äã(h)ùëú‚Ñéo(h).\\\n\\\nThe marginal velocity.\\\nPrevious works (Campbell et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\"); Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")) have shown that constructing a generating velocity for pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) can be achieved by considering only the conditional probability paths in equation [1](https://ar5iv.org/html/2412.03487#S2.E1 \"Equation 1 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). That is, assume we have conditional velocities uti‚Äã(xi,zi\\|x1i)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñu^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i}), which are velocities in the state space ùíØùíØ{\\\\mathcal{T}}, that generate the conditional paths pt‚Äã(xi\\|x1i)subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i}) in equation [1](https://ar5iv.org/html/2412.03487#S2.E1 \"Equation 1 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\nThen a _marginal velocity_ uti‚Äã(xi,z)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßu^{i}\\_{t}(x^{i},z) that generates pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) takes the form:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)=‚àëx1i‚ààùíØuti‚Äã(xi,zi\\|x1i)‚Äãp1\\|ti‚Äã(x1i\\|z)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßsubscriptsuperscriptsubscriptùë•1ùëñùíØsubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptsubscriptùë•1ùëñùëß\\\\textstyle u^{i}\\_{t}(x^{i},z)=\\\\sum\\_{x\\_{1}^{i}\\\\in{\\\\mathcal{T}}}u^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})p^{i}\\_{1\\|t}(x\\_{1}^{i}\\|z) |  | (9) |\\\n\\\nwhere p1\\|ti‚Äã(x1i\\|z)subscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptsubscriptùë•1ùëñùëßp^{i}\\_{1\\|t}(x\\_{1}^{i}\\|z) is the posterior probability of the iùëñi-th token taking the value x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}, i.e.,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p1\\|ti‚Äã(xi\\|z)=‚àëx1‚ààùíÆŒ¥x1i‚Äã(xi)‚Äãpt‚Äã(z\\|x1)‚Äãq‚Äã(x1)pt‚Äã(z).subscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptùë•ùëñùëßsubscriptsubscriptùë•1ùíÆsubscriptùõøsuperscriptsubscriptùë•1ùëñsuperscriptùë•ùëñsubscriptùëùùë°conditionalùëßsubscriptùë•1ùëûsubscriptùë•1subscriptùëùùë°ùëß\\\\textstyle p^{i}\\_{1\\|t}(x^{i}\\|z)=\\\\sum\\_{x\\_{1}\\\\in\\\\mathcal{S}}\\\\delta\\_{x\\_{1}^{i}}(x^{i})\\\\frac{p\\_{t}(z\\|x\\_{1})q(x\\_{1})}{p\\_{t}(z)}. |  | (10) |\\\n\\\nParameterizing the _factorized posterior_ ‚àèi=1Dp1\\|tisuperscriptsubscriptproductùëñ1ùê∑subscriptsuperscriptùëùùëñconditional1ùë°\\\\prod\\_{i=1}^{D}p^{i}\\_{1\\|t} is an approach taken by prior works (Austin et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib2 \"\"); Campbell et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib4 \"\")). To train, a simple option is the cross-entropy objective:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚ÑíCE‚Äã(Œ∏)=ùîºt‚àºU\\[0,1\\],x1‚àºq(‚ãÖ),x‚àºpt(‚ãÖ\\|x1)‚Äã\\[‚àí‚àëi=1Dlog‚Å°p1\\|tŒ∏,i‚Äã(x1i\\|x)\\].\\\\textstyle\\\\mathcal{L}\\_{\\\\text{CE}}(\\\\theta)=\\\\mathbb{E}\\_{t\\\\sim U\\[0,1\\],x\\_{1}\\\\sim q(\\\\cdot),x\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\left\\[-\\\\sum\\_{i=1}^{D}\\\\log p\\_{1\\|t}^{\\\\theta,i}(x\\_{1}^{i}\\|x)\\\\right\\]. |  | (11) |\\\n\\\nWe use this training loss for general probability paths as it is generally applicable.\\\nHowever, for the case of mixture paths (equation [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) it is possible to derive a tractable ELBO as the marginal utsubscriptùë¢ùë°u\\_{t} can be written in closed form without a summation as in equation [9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We cover this later in [Section6](https://ar5iv.org/html/2412.03487#S6 \"6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n## 3 Sample generation through the factorized posterior\\\n\\\nThe most direct approach to sample from this model is to use the marginal velocity ut‚Äã(xi,z)subscriptùë¢ùë°superscriptùë•ùëñùëßu\\_{t}(x^{i},z), e.g., with a first-order sampling scheme defined by removing the o‚Äã(h)ùëú‚Ñéo(h) term in equation [8](https://ar5iv.org/html/2412.03487#S2.E8 \"Equation 8 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), i.e., given Xtsubscriptùëãùë°X\\_{t}, we advance time with step size h‚Ñéh by sampling Xt+hisuperscriptsubscriptùëãùë°‚ÑéùëñX\\_{t+h}^{i} according to\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Xt+hi‚àºŒ¥Xti‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,Xt),similar-tosuperscriptsubscriptùëãùë°‚Ñéùëñsubscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésubscriptsuperscriptùë¢ùëñùë°‚ãÖsubscriptùëãùë°X\\_{t+h}^{i}\\\\sim\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)+hu^{i}\\_{t}(\\\\cdot,X\\_{t}), |  | (12) |\\\n\\\nfor each i‚àà\\[D\\]ùëñdelimited-\\[\\]ùê∑i\\\\in\\[D\\], where utisuperscriptsubscriptùë¢ùë°ùëñu\\_{t}^{i} is computed with equation [9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\nHowever, for general discrete paths this sampling procedure is intractable for large discrete spaces ùíØùíØ{\\\\mathcal{T}} as computing uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) with equation [9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for all xi‚ààùíØsuperscriptùë•ùëñùíØx^{i}\\\\in{\\\\mathcal{T}} has a computational complexity of \\|ùíØ\\|2superscriptùíØ2\\|{\\\\mathcal{T}}\\|^{2}.\\\n\\\nAlternatively, we propose a more efficient sampling scheme by noticing that\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëß\\\\textstyle\\\\delta\\_{z^{i}}(x^{i})+hu^{i}\\_{t}(x^{i},z) | =([9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))‚Äã‚àëx1i‚ààùíØ\\[Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,zi\\|x1i)\\]‚Äãp1\\|ti‚Äã(x1i,z),[9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")subscriptsuperscriptsubscriptùë•1ùëñùíØdelimited-\\[\\]subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptsuperscriptùëùùëñconditional1ùë°superscriptsubscriptùë•1ùëñùëß\\\\textstyle\\\\overset{(\\\\ref{e:u\\_t\\_marginalization})}{=}\\\\sum\\_{x\\_{1}^{i}\\\\in{\\\\mathcal{T}}}\\\\left\\[\\\\delta\\_{z^{i}}(x^{i})+hu^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\]p^{i}\\_{1\\|t}(x\\_{1}^{i},z), |  | (13) |\\\n\\\nwhich leads to a sampling process that avoids computing the full marginal velocity:\\\ngiven the current state Xtsubscriptùëãùë°X\\_{t}, sample X1subscriptùëã1X\\_{1} from the factorized posterior, then sample Xt+hsubscriptùëãùë°‚ÑéX\\_{t+h}. That is, for each i‚àà\\[D\\]ùëñdelimited-\\[\\]ùê∑i\\\\in\\[D\\],\\\n\\\n1)Sample X1i‚àºp1\\|ti(‚ãÖ\\|Xt)X^{i}\\_{1}\\\\sim p^{i}\\_{1\\|t}(\\\\cdot\\|X\\_{t}); and2)Sample Xt+hi‚àºŒ¥Xti‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,Xti\\|X1i)similar-tosuperscriptsubscriptùëãùë°‚Ñéùëñsubscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésubscriptsuperscriptùë¢ùëñùë°‚ãÖconditionalsuperscriptsubscriptùëãùë°ùëñsubscriptsuperscriptùëãùëñ1X\\_{t+h}^{i}\\\\sim\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)+hu^{i}\\_{t}(\\\\cdot,X\\_{t}^{i}\\|X^{i}\\_{1}).\\\n\\\nThis sampling procedure still results in Xtsubscriptùëãùë°X\\_{t} with the same time marginals while avoiding the computational cost of the summation in equation [9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\nTo enable the use of any step size h‚Ñéh, we use a slightly modified step 2; see [AppendixA](https://ar5iv.org/html/2412.03487#A1 \"Appendix A Always-valid sampling scheme ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for more details and pseudocode in [Algorithm1](https://ar5iv.org/html/2412.03487#alg1 \"In Appendix A Always-valid sampling scheme ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n## 4 Kinetic optimal velocities and probability paths\\\n\\\nWe first decouple the design space of probability paths and their generating velocities, providing the means to effectively explore this large design space.\\\nThis section covers two contributions: (i) we propose a family of kinetic optimal (KO) velocities that generates any given probability path, and (ii) we solve for kinetic optimal probability paths, recovering a special case of mixture paths.\\\nThe first contribution enables us to work with general discrete probability paths.\\\nThe second contribution justifies the choice of mixture probability paths used by Gat et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")) but offers novel x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-dependent schedulers.\\\nFor both, we center our designs based on optimizing a discrete notion of kinetic energy (Peyr√© et al., [2019](https://ar5iv.org/html/2412.03487#bib.bib43 \"\")).\\\n\\\nNotation. As the discussion in this section applies to arbitrary probability paths and discrete state spaces, we will use a simplified notation, where our state space is now ùíØùíØ{\\\\mathcal{T}} and for states we use x,z‚ààùíØùë•ùëßùíØx,z\\\\in{\\\\mathcal{T}}, abusing a bit the previous notation (where xi,zi‚ààùíØsuperscriptùë•ùëñsuperscriptùëßùëñùíØx^{i},z^{i}\\\\in{\\\\mathcal{T}}). Furthermore, we will denote by pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) and ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) an arbitrary probability path and velocity field in ùíØùíØ{\\\\mathcal{T}}, respectively.\\\n\\\nContinuity Equation.\\\nGiven a probability path pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x), the entire collection of velocities ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) generating pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) are the solutions to the Continuity Equation (a.k.a. the Kolmogorov forward equation) that also satisfy the Rate Conditions. It is useful to formulate the Continuity Equation through the _flux_ jtsubscriptùëóùë°j\\_{t}, that is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pÀôt‚Äã(x)+divx‚Äã(jt)=0,‚àÄx‚ààùíØ, with ‚Äãjt‚Äã(x,z)=ut‚Äã(x,z)‚Äãpt‚Äã(z).formulae-sequencesubscriptÀôùëùùë°ùë•subscriptdivùë•subscriptùëóùë°0formulae-sequencefor-allùë•ùíØ with subscriptùëóùë°ùë•ùëßsubscriptùë¢ùë°ùë•ùëßsubscriptùëùùë°ùëß\\\\textstyle\\\\dot{p}\\_{t}(x)+\\\\mathrm{div}\\_{x}(j\\_{t})=0,\\\\qquad\\\\forall x\\\\in{\\\\mathcal{T}},\\\\qquad\\\\text{ with }j\\_{t}(x,z)=u\\_{t}(x,z)p\\_{t}(z). |  | (14) |\\\n\\\nIntuitively, the flux jt‚Äã(x,z)subscriptùëóùë°ùë•ùëßj\\_{t}(x,z) quantifies the amount of probability mass per unit of time moving from state zùëßz to state xùë•x.\\\nThe _divergence operator_ then measures the total outgoing flux minus the total incoming flux, which in the discrete case takes the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | divx‚Äã(jt)=‚àëz‚â†xjt‚Äã(z,x)‚àí‚àëz‚â†xjt‚Äã(x,z).subscriptdivùë•subscriptùëóùë°subscriptùëßùë•subscriptùëóùë°ùëßùë•subscriptùëßùë•subscriptùëóùë°ùë•ùëß\\\\textstyle\\\\text{div}\\_{x}(j\\_{t})=\\\\sum\\_{z\\\\neq x}j\\_{t}(z,x)-\\\\sum\\_{z\\\\neq x}j\\_{t}(x,z). |  | (15) |\\\n\\\nVelocity from flux. Given a flux jtsubscriptùëóùë°j\\_{t} satisfying the Continuity Equation (equation [14](https://ar5iv.org/html/2412.03487#S4.E14 \"Equation 14 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we can get a velocity from the flux by defining for x‚â†zùë•ùëßx\\\\neq z,\\\n\\\nut‚Äã(x,z)=jt‚Äã(x,z)/pt‚Äã(z)‚Äã if ‚Äãpt‚Äã(z)>0, else ‚Äãut‚Äã(x,z)=0,formulae-sequencesubscriptùë¢ùë°ùë•ùëßsubscriptùëóùë°ùë•ùëßsubscriptùëùùë°ùëß if subscriptùëùùë°ùëß0 else subscriptùë¢ùë°ùë•ùëß0\\\\textstyle u\\_{t}(x,z)=j\\_{t}(x,z)/p\\_{t}(z)\\\\;\\\\;\\\\text{ if }p\\_{t}(z)>0,\\\\qquad\\\\text{ else }\\\\;u\\_{t}(x,z)=0,(16)\\\n\\\nand the case x=zùë•ùëßx=z is uniquely set by the Rate Conditions ( [5](https://ar5iv.org/html/2412.03487#S2.E5 \"Equation 5 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), ut‚Äã(z,z)=‚àí‚àëx‚â†zut‚Äã(x,z)subscriptùë¢ùë°ùëßùëßsubscriptùë•ùëßsubscriptùë¢ùë°ùë•ùëßu\\_{t}(z,z)=-\\\\sum\\_{x\\\\neq z}u\\_{t}(x,z). The velocity defined in this way will satisfy the Continuity Equation and the Rate Conditions if the flux satisfies the following conditions:\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  |  | jt‚Äã(x,z)‚â•0, for ‚Äãx‚â†zformulae-sequencesubscriptùëóùë°ùë•ùëß0 for ùë•ùëß\\\\displaystyle j\\_{t}(x,z)\\\\geq 0,\\\\text{ for }x\\\\neq z\\\\qquad | ‚ñ∂Non-negativity‚ñ∂absentNon-negativity\\\\displaystyle\\\\blacktriangleright\\\\text{Non-negativity} |  | (17) |\\\n|  |  | pt‚Äã(z)=0‚áíjt‚Äã(x,z)=0subscriptùëùùë°ùëß0‚áísubscriptùëóùë°ùë•ùëß0\\\\displaystyle p\\_{t}(z)=0\\ \\\\Rightarrow\\ j\\_{t}(x,z)=0\\\\qquad | ‚ñ∂Safe Flux Condition‚ñ∂absentSafe Flux Condition\\\\displaystyle\\\\blacktriangleright\\\\text{Safe Flux Condition} |  | (18) |\\\n\\\nIntuitively, the Safe Flux Condition ensures no flux is leaving a zero probability state zùëßz.\\\n\\\n###### Proposition 4.1.\\\n\\\nGiven a non-negative safe flux jtsubscriptùëóùë°j\\_{t} that satisfies the Continuity Equation, the velocity defined in equation [16](https://ar5iv.org/html/2412.03487#S4.E16 \"Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") satisfies the Rate Conditions and generates the ptsubscriptùëùùë°p\\_{t} probability path.\\\n\\\nKinetic optimality. Motivated by the approach employed in the continuous case of minimizing the kinetic energy for the conditional velocities (Lipman et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib30 \"\"); Shaul et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib48 \"\")), we take a similar approach for finding velocities for the discrete case.\\\nThe standard convex formulation of the kinetic energy adapted to the discrete case is (Peyr√© et al., [2019](https://ar5iv.org/html/2412.03487#bib.bib43 \"\")):\\\n\\\nminpt,jtsubscriptsubscriptùëùùë°subscriptùëóùë°\\\\textstyle\\\\min\\_{p\\_{t},j\\_{t}}‚à´01‚àëx‚â†zwt‚Äã(x,z)pt‚Äã(z)‚Äãjt‚Äã(x,z)2‚Äãd‚Äãtsuperscriptsubscript01subscriptùë•ùëßsubscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùëóùë°superscriptùë•ùëß2ùëëùë°\\\\textstyle\\\\quad\\\\int\\_{0}^{1}\\\\sum\\_{x\\\\neq z}\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}j\\_{t}(x,z)^{2}dt‚ñ∂ Kinetic Energy‚ñ∂absent Kinetic Energy\\\\textstyle\\\\blacktriangleright\\\\text{ Kinetic Energy }(19a)s.t.divx‚Äã(jt)=‚àípÀôt‚Äã(x),‚àÄx‚ààùíØformulae-sequencesubscriptdivùë•subscriptùëóùë°subscriptÀôùëùùë°ùë•for-allùë•ùíØ\\\\textstyle\\\\quad\\\\mathrm{div}\\_{x}(j\\_{t})=-\\\\dot{p}\\_{t}(x),\\\\qquad\\ \\ \\\\forall x\\\\in{\\\\mathcal{T}}‚ñ∂ Continuity Equation‚ñ∂absent Continuity Equation\\\\textstyle\\\\blacktriangleright\\\\text{ Continuity Equation }(19b)jt‚Äã(x,z)‚â•0,‚àÄx‚â†z‚ààùíØformulae-sequencesubscriptùëóùë°ùë•ùëß0for-allùë•ùëßùíØ\\\\textstyle\\\\quad j\\_{t}(x,z)\\\\geq 0,\\\\qquad\\\\qquad\\\\forall x\\\\neq z\\\\in{\\\\mathcal{T}}‚ñ∂ Non-negative flux‚ñ∂absent Non-negative flux\\\\textstyle\\\\blacktriangleright\\\\text{ Non-negative flux }(19c)p0=p,p1=qformulae-sequencesubscriptùëù0ùëùsubscriptùëù1ùëû\\\\textstyle\\\\quad p\\_{0}=p,\\\\quad p\\_{1}=q‚ñ∂ Boundary conditions‚ñ∂absent Boundary conditions\\\\textstyle\\\\blacktriangleright\\\\text{ Boundary conditions}(19d)\\\n\\\nwhere wt‚Äã(x,z)>0subscriptùë§ùë°ùë•ùëß0w\\_{t}(x,z)>0 is some problem-dependent weighting; a higher weight implies a smaller flux from z‚Üíx‚Üíùëßùë•z\\\\rightarrow x, i.e., the higher this value the smaller the velocity ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z).\\\nThe optimality criterion (equation [19a](https://ar5iv.org/html/2412.03487#S4.E19.1 \"Equation 19a ‚Ä£ Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is the kinetic energy, equivalently jt‚Äã(x,z)2pt‚Äã(z)=ut‚Äã(x,z)2‚Äãpt‚Äã(z)subscriptùëóùë°superscriptùë•ùëß2subscriptùëùùë°ùëßsubscriptùë¢ùë°superscriptùë•ùëß2subscriptùëùùë°ùëß\\\\frac{j\\_{t}(x,z)^{2}}{p\\_{t}(z)}=u\\_{t}(x,z)^{2}p\\_{t}(z).\\\nThe benefit of formulating in terms of the flux (instead of the velocity) is that the problem becomes convex in its unknowns (pt,jt)subscriptùëùùë°subscriptùëóùë°(p\\_{t},j\\_{t}), and in particular the Continuity Equation constraint in ( [19b](https://ar5iv.org/html/2412.03487#S4.E19.2 \"Equation 19b ‚Ä£ Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is linear. Lastly, in case of wt‚Äã(x,z)pt‚Äã(z)=‚àûsubscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëß\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}=\\\\infty the energy in equation [19a](https://ar5iv.org/html/2412.03487#S4.E19.1 \"Equation 19a ‚Ä£ Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is _defined_ to be 00 if jt‚Äã(x,z)=0subscriptùëóùë°ùë•ùëß0j\\_{t}(x,z)=0, and ‚àû\\\\infty if jt‚Äã(x,z)>0subscriptùëóùë°ùë•ùëß0j\\_{t}(x,z)>0. Therefore, to ensures the solution jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star} is safe (equation [18](https://ar5iv.org/html/2412.03487#S4.E18 \"Equation 18 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we ask that wtsubscriptùë§ùë°w\\_{t} satisfies:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt(z)=0‚áíwt‚Äã(x,z)pt‚Äã(z)=‚àû‚ñ∂ Safe Weight Condition\\\\textstyle p\\_{t}(z)=0\\\\Rightarrow\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}=\\\\infty\\\\quad\\\\blacktriangleright\\\\text{ Safe Weight Condition} |  | (20) |\\\n\\\nand that problem [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is _feasible_, i.e., it has a finite energy solution.\\\nAlthough problem [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is convex, solving it for a general wtsubscriptùë§ùë°w\\_{t} requires numerical approximation. Since we want to solve it for conditional probability paths with different x1‚ààùíØsubscriptùë•1ùíØx\\_{1}\\\\in{\\\\mathcal{T}}, i.e., q‚Äã(x)=Œ¥x1‚Äã(x)ùëûùë•subscriptùõøsubscriptùë•1ùë•q(x)=\\\\delta\\_{x\\_{1}}(x), this can be computationally challenging. Instead, we will explore cases of wtsubscriptùë§ùë°w\\_{t} where problem ( [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is solvable in _closed-form_.\\\nWe start with assuming ptsubscriptùëùùë°p\\_{t} is known/given, and find the kinetic optimal velocity ut‚ãÜsubscriptsuperscriptùë¢‚ãÜùë°u^{\\\\star}\\_{t}, then afterwards we discuss optimizing the ptsubscriptùëùùë°p\\_{t} as well.\\\n\\\n### 4.1 Kinetic optimal velocity\\\n\\\nAssuming pt>0subscriptùëùùë°0p\\_{t}>0 is fixed in ( [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), our goal is to find the kinetic optimal solution jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star}, and consequently obtaining a velocity ut‚ãÜsuperscriptsubscriptùë¢ùë°‚ãÜu\\_{t}^{\\\\star} via ( [16](https://ar5iv.org/html/2412.03487#S4.E16 \"Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nOne observation we make is that ( [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be efficiently solved when _symmetric_, i.e., when wt‚Äã(x,z)pt‚Äã(z)=wt‚Äã(z,x)pt‚Äã(x)subscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùëßùë•subscriptùëùùë°ùë•\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}=\\\\frac{w\\_{t}(z,x)}{p\\_{t}(x)}.\\\nAs we prove in [AppendixB](https://ar5iv.org/html/2412.03487#A2 \"Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"),\\\n( [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be efficiently solved via the following linear relaxation:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àëzpt‚Äã(z)wt‚Äã(x,z)‚Äã\\[ft‚Äã(x)‚àíft‚Äã(z)\\]=pÀôt‚Äã(x),‚àÄx‚ààùíØformulae-sequencesubscriptùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëßdelimited-\\[\\]subscriptùëìùë°ùë•subscriptùëìùë°ùëßsubscriptÀôùëùùë°ùë•for-allùë•ùíØ\\\\textstyle\\\\sum\\_{z}\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}\\\\left\\[f\\_{t}(x)-f\\_{t}(z)\\\\right\\]=\\\\dot{p}\\_{t}(x),\\\\qquad\\\\forall x\\\\in{\\\\mathcal{T}} |  | (21) |\\\n\\\nwhere ft:ùíØ‚Üí‚Ñù:subscriptùëìùë°‚ÜíùíØ‚Ñùf\\_{t}:{\\\\mathcal{T}}\\\\rightarrow\\\\mathbb{R} is the unknown function over the state space. The linear equation in ( [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is of _Laplacian form_, and many properties (including closed-form solutions) are known in many cases (Vishnoi, [2012](https://ar5iv.org/html/2412.03487#bib.bib59 \"\")). The solution ftsubscriptùëìùë°f\\_{t} to ( [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is unique up to a global constant and using ftsubscriptùëìùë°f\\_{t} we construct the kinetic optimal flux,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)‚âúpt‚Äã(z)wt‚Äã(x,z)‚Äã\\[ft‚Äã(x)‚àíft‚Äã(z)\\]+,‚âúsubscriptsuperscriptùëó‚ãÜùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëßsubscriptdelimited-\\[\\]subscriptùëìùë°ùë•subscriptùëìùë°ùëß\\\\textstyle j^{\\\\star}\\_{t}(x,z)\\\\triangleq\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}\\\\left\\[f\\_{t}(x)-f\\_{t}(z)\\\\right\\]\\_{+}, |  | (22) |\\\n\\\nwhere \\[s\\]+=max‚Å°{s,0}subscriptdelimited-\\[\\]ùë†ùë†0\\\\left\\[s\\\\right\\]\\_{+}=\\\\max\\\\left\\\\{s,0\\\\right\\\\} is the ReLU operator. This provides a solution to ( [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with a fixed and positive ptsubscriptùëùùë°p\\_{t}. Consequently, using ( [16](https://ar5iv.org/html/2412.03487#S4.E16 \"Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we get the kinetic optimal velocity. We have shown that a certain family of kinetic optimal velocities can be computed by solving a linear system ( [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for arbitrary probability paths pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) over state-space ùíØùíØ{\\\\mathcal{T}}. Next we will further instantiate this family and provide some closed form solution for jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star} and ut‚ãÜsuperscriptsubscriptùë¢ùë°‚ãÜu\\_{t}^{\\\\star}.\\\n\\\nClosed-form utsubscriptùë¢ùë°u\\_{t}.\\\nWe will consider the case where wt‚Äã(x,z)=pt‚Äã(z)œÑt‚Äã(x)‚ÄãœÑt‚Äã(z)subscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùúèùë°ùë•subscriptùúèùë°ùëßw\\_{t}(x,z)=\\\\frac{p\\_{t}(z)}{\\\\tau\\_{t}(x)\\\\tau\\_{t}(z)}, and œÑt:ùíØ‚Üí‚Ñù‚â•0:subscriptùúèùë°‚ÜíùíØsubscript‚Ñùabsent0\\\\tau\\_{t}:{\\\\mathcal{T}}\\\\rightarrow\\\\mathbb{R}\\_{\\\\geq 0} is a design choice of our method. To ensure wtsubscriptùë§ùë°w\\_{t} is safe ( [20](https://ar5iv.org/html/2412.03487#S4.E20 \"Equation 20 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we require that pt‚Äã(z)=0subscriptùëùùë°ùëß0p\\_{t}(z)=0 implies œÑt‚Äã(z)=0subscriptùúèùë°ùëß0\\\\tau\\_{t}(z)=0. The solution ftsubscriptùëìùë°f\\_{t} to ( [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))‚Äîwhich can be checked with substitution‚Äîis:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ft‚Äã(x)=1‚àës‚ààùíØœÑt‚Äã(s)‚ÄãpÀôt‚Äã(x)œÑt‚Äã(x).subscriptùëìùë°ùë•1subscriptùë†ùíØsubscriptùúèùë°ùë†subscriptÀôùëùùë°ùë•subscriptùúèùë°ùë•\\\\textstyle f\\_{t}(x)=\\\\frac{1}{\\\\sum\\_{s\\\\in{\\\\mathcal{T}}}\\\\tau\\_{t}(s)}\\\\frac{\\\\dot{p}\\_{t}(x)}{\\\\tau\\_{t}(x)}. |  | (23) |\\\n\\\nOne choice is œÑt‚Äã(x)=ùüô\\[pt‚Äã(x)>0\\]subscriptùúèùë°ùë•subscript1delimited-\\[\\]subscriptùëùùë°ùë•0\\\\tau\\_{t}(x)=\\\\mathbbm{1}\\_{\\[p\\_{t}(x)>0\\]}, that leads to the Kinetic Optimal flux\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)=1\\|ùíØ\\|‚Äã\\[‚àÇtpt‚Äã(x)‚àí‚àÇtpt‚Äã(z)\\]+, for ‚Äãx‚â†zformulae-sequencesubscriptsuperscriptùëó‚ãÜùë°ùë•ùëß1ùíØsubscriptdelimited-\\[\\]subscriptùë°subscriptùëùùë°ùë•subscriptùë°subscriptùëùùë°ùëß for ùë•ùëß\\\\textstyle j^{\\\\star}\\_{t}(x,z)=\\\\frac{1}{\\|{\\\\mathcal{T}}\\|}\\\\left\\[\\\\partial\\_{t}p\\_{t}(x)-\\\\partial\\_{t}p\\_{t}(z)\\\\right\\]\\_{+},\\\\qquad\\\\text{ for }x\\\\neq z |  | (24) |\\\n\\\nwhich upon converting to velocity via ( [16](https://ar5iv.org/html/2412.03487#S4.E16 \"Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) recovers the velocity proposed in Campbell et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\")) for positive paths, pt>0subscriptùëùùë°0p\\_{t}>0. Note however, that the above flux is not safe (does not satisfy equation [18](https://ar5iv.org/html/2412.03487#S4.E18 \"Equation 18 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and if pt‚Äã(z)=œµsubscriptùëùùë°ùëßitalic-œµp\\_{t}(z)={\\\\epsilon} the flux jt‚ãÜ‚Äã(x,z)subscriptsuperscriptùëó‚ãÜùë°ùë•ùëßj^{\\\\star}\\_{t}(x,z) for some general xùë•x is not necessarily small, showing a potential numerical issue. Campbell et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\")) formulate a limit case for general ptsubscriptùëùùë°p\\_{t} that also requires adding an extra assumption on ptsubscriptùëùùë°p\\_{t} (that pt‚Äã(x)=0‚áípÀôt‚Äã(x)=0subscriptùëùùë°ùë•0‚áísubscriptÀôùëùùë°ùë•0p\\_{t}(x)=0\\\\Rightarrow\\\\dot{p}\\_{t}(x)=0), which does not hold even for common probability paths that are typically used, such as the masked mixture path with linear schedulers.\\\n\\\nAlternatively, we propose a more numerically stable choice. Consider œÑt‚Äã(x)=pt‚Äã(x)subscriptùúèùë°ùë•subscriptùëùùë°ùë•\\\\tau\\_{t}(x)=p\\_{t}(x), i.e.,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | wt‚Äã(x,z)=1/pt‚Äã(x).subscriptùë§ùë°ùë•ùëß1subscriptùëùùë°ùë•\\\\textstyle w\\_{t}(x,z)=1/p\\_{t}(x). |  | (25) |\\\n\\\nThis results in ft‚Äã(x)=pÀôt‚Äã(x)/pt‚Äã(x)subscriptùëìùë°ùë•subscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•f\\_{t}(x)=\\\\dot{p}\\_{t}(x)/p\\_{t}(x), and the kinetic optimal flux in this case is:\\\n\\\njt‚ãÜ‚Äã(x,z)=\\[pt‚Äã(z)‚ÄãpÀôt‚Äã(x)‚àípÀôt‚Äã(z)‚Äãpt‚Äã(x)\\]+, for ‚Äãx‚â†zformulae-sequencesubscriptsuperscriptùëó‚ãÜùë°ùë•ùëßsubscriptdelimited-\\[\\]subscriptùëùùë°ùëßsubscriptÀôùëùùë°ùë•subscriptÀôùëùùë°ùëßsubscriptùëùùë°ùë• for ùë•ùëß\\\\displaystyle j^{\\\\star}\\_{t}(x,z)=\\\\left\\[p\\_{t}(z)\\\\dot{p}\\_{t}(x)-\\\\dot{p}\\_{t}(z)p\\_{t}(x)\\\\right\\]\\_{+},\\\\qquad\\\\text{ for }x\\\\neq z(26)\\\n\\\nNote that in contrast to before, this flux is safe (satisfies equation [18](https://ar5iv.org/html/2412.03487#S4.E18 \"Equation 18 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and therefore works for general ptsubscriptùëùùë°p\\_{t}. Furthermore, ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) exhibits stable limiting behavior for continuously differentiable ptsubscriptùëùùë°p\\_{t}: when pt‚Äã(z)‚Üí0‚Üísubscriptùëùùë°ùëß0p\\_{t}(z)\\\\rightarrow 0, so too will j‚ãÜ‚Äã(x,z)‚Üí0‚Üísuperscriptùëó‚ãÜùë•ùëß0j^{\\\\star}(x,z)\\\\rightarrow 0.\\\n\\\nWe note that for uniform and mask source distributions with the mixture path ( [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), the velocity considered by Campbell et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\")) and our velocity resulting from ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) coincide.\\\nHowever, for mixture paths ( [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and general discrete paths, they generally do not coincide.\\\nAdditionally, the choice of velocity in ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) also recovers the velocities used by Gat et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")) for mixture probability paths.\\\nSee [SectionC.1](https://ar5iv.org/html/2412.03487#A3.SS1 \"C.1 Kinetic optimal velocities for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for detailed derivations.\\\nFinally, we discuss a broader family of closed-form velocities involving different choices of œÑtsubscriptùúèùë°\\\\tau\\_{t} in [SectionC.3](https://ar5iv.org/html/2412.03487#A3.SS3 \"C.3 Power ‚àû velocity for general paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), which we find can significantly boost performance at low-cost sampling regimes.\\\n\\\nMetric-induced pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x). The velocity resulting from ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be applied to any user-defined ptsubscriptùëùùë°p\\_{t}. We propose metric-induced conditional probability paths of the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(x\\|x1)=softmax‚Äã(‚àíŒ≤t‚Äãd‚Äã(x,x1)),subscriptùëùùë°conditionalùë•subscriptùë•1softmaxsubscriptùõΩùë°dùë•subscriptùë•1\\\\textstyle p\\_{t}(x\\|x\\_{1})=\\\\text{softmax}\\\\left(-\\\\beta\\_{t}\\\\textrm{d}(x,x\\_{1})\\\\right), |  | (27) |\\\n\\\nwhere Œ≤:\\[0,1\\]‚Üí‚Ñù‚â•0:ùõΩ‚Üí01subscript‚Ñùabsent0\\\\beta:\\[0,1\\]\\\\rightarrow\\\\mathbb{R}\\_{\\\\geq 0} is a monotonic scheduler with Œ≤0=0subscriptùõΩ00\\\\beta\\_{0}=0, Œ≤1=‚àûsubscriptùõΩ1\\\\beta\\_{1}=\\\\infty, and d:ùíØ√óùíØ‚Üí‚Ñù‚â•0:d‚ÜíùíØùíØsubscript‚Ñùabsent0\\\\textrm{d}:{\\\\mathcal{T}}\\\\times{\\\\mathcal{T}}\\\\rightarrow\\\\mathbb{R}\\_{\\\\geq 0} such that d‚Äã(x,x1)=0‚áîx=x1‚áîdùë•subscriptùë•10ùë•subscriptùë•1\\\\textrm{d}(x,x\\_{1})=0\\\\Leftrightarrow x=x\\_{1}\\\n,interpreted loosely as a metric over discrete values. If we apply the flux in ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for the paths in ( [27](https://ar5iv.org/html/2412.03487#S4.E27 \"Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and simplify, we obtain the velocity:\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x,z\\|x1)superscriptsubscriptùë¢ùë°‚ãÜùë•conditionalùëßsubscriptùë•1\\\\textstyle u\\_{t}^{\\\\star}(x,z\\|x\\_{1}) | =pt‚Äã(x\\|x1)‚Äã\\[‚àÇtlog‚Å°pt‚Äã(x\\|x1)‚àí‚àÇtlog‚Å°pt‚Äã(z\\|x1)\\]+absentsubscriptùëùùë°conditionalùë•subscriptùë•1subscriptdelimited-\\[\\]subscriptùë°subscriptùëùùë°conditionalùë•subscriptùë•1subscriptùë°subscriptùëùùë°conditionalùëßsubscriptùë•1\\\\textstyle=p\\_{t}(x\\|x\\_{1})\\[\\\\partial\\_{t}\\\\log p\\_{t}(x\\|x\\_{1})-\\\\partial\\_{t}\\\\log p\\_{t}(z\\|x\\_{1})\\]\\_{+} |  | (28) |\\\n|  |  | =pt‚Äã(x\\|x1)‚ÄãŒ≤Àôt‚Äã\\[d‚Äã(z,x1)‚àíd‚Äã(x,x1)\\]+.absentsubscriptùëùùë°conditionalùë•subscriptùë•1subscriptÀôùõΩùë°subscriptdelimited-\\[\\]dùëßsubscriptùë•1dùë•subscriptùë•1\\\\textstyle=p\\_{t}(x\\|x\\_{1})\\\\dot{\\\\beta}\\_{t}\\[\\\\textrm{d}(z,x\\_{1})-\\\\textrm{d}(x,x\\_{1})\\]\\_{+}. |  | (29) |\\\n\\\nThis velocity has the property that we only move from state zùëßz to state xùë•x if xùë•x is closer than zùëßz to x1subscriptùë•1x\\_{1}, i.e., d‚Äã(x,x1)<d‚Äã(z,x1)dùë•subscriptùë•1dùëßsubscriptùë•1\\\\textrm{d}(x,x\\_{1})<\\\\textrm{d}(z,x\\_{1}), hence resulting in a flow that only moves closer to x1subscriptùë•1x\\_{1}.\\\n\\\n### 4.2 Kinetic Optimal probability paths\\\n\\\nInterestingly, for the weighting choice that we have motivated for the numerically stable velocity ( [25](https://ar5iv.org/html/2412.03487#S4.E25 \"Equation 25 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), it is also possible to solve for the kinetic optimal probability path pt‚ãÜsuperscriptsubscriptùëùùë°‚ãÜp\\_{t}^{\\\\star}.\\\nAs we show in [AppendixB](https://ar5iv.org/html/2412.03487#A2 \"Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), in this case, the problem ( [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be formulated equivalently as\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  |\\\n|  | minatsubscriptsubscriptùëéùë°\\\\displaystyle\\\\textstyle\\\\min\\_{a\\_{t}} | ‚à´01‚àëxaÀôt‚Äã(x)2‚Äãd‚Äãtsuperscriptsubscript01subscriptùë•subscriptÀôùëéùë°superscriptùë•2ùëëùë°\\\\displaystyle\\\\quad\\\\int\\_{0}^{1}\\\\sum\\_{x}\\\\dot{a}\\_{t}(x)^{2}\\\\,dt | ‚ñ∂ Kinetic Energy‚ñ∂absent Kinetic Energy\\\\displaystyle\\\\blacktriangleright\\\\text{ Kinetic Energy } |  | (30a) |\\\n|  | s.t. | ‚àëxat‚Äã(x)2=1,‚àÄt‚àà\\[0,1\\]formulae-sequencesubscriptùë•subscriptùëéùë°superscriptùë•21for-allùë°01\\\\displaystyle\\\\textstyle\\\\quad\\\\sum\\_{x}a\\_{t}(x)^{2}=1,\\\\qquad\\\\qquad\\\\forall t\\\\in\\[0,1\\] | ‚ñ∂ Hypersphere constraints‚ñ∂absent Hypersphere constraints\\\\displaystyle\\\\blacktriangleright\\\\text{ Hypersphere constraints} |  | (30b) |\\\n|  |  | a0‚Äã(x)=p‚Äã(x),a1‚Äã(x)=q‚Äã(x)formulae-sequencesubscriptùëé0ùë•ùëùùë•subscriptùëé1ùë•ùëûùë•\\\\displaystyle\\\\textstyle\\\\quad a\\_{0}(x)=\\\\sqrt{p(x)},\\\\quad a\\_{1}(x)=\\\\sqrt{q(x)}\\\\qquad\\\\qquad | ‚ñ∂ Boundary conditions‚ñ∂absent Boundary conditions\\\\displaystyle\\\\blacktriangleright\\\\text{ Boundary conditions } |  | (30c) |\\\n\\\nwhere at‚Äã(x)=pt‚Äã(x)subscriptùëéùë°ùë•subscriptùëùùë°ùë•a\\_{t}(x)=\\\\sqrt{p\\_{t}(x)}. Problem ( [30](https://ar5iv.org/html/2412.03487#S4.E30 \"Equation 30 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is the kinetic energy of a curve over the hypersphere connecting pùëù\\\\sqrt{p} and qùëû\\\\sqrt{q}. The optimal solution thus corresponds to the geodesic curve on the hypersphere,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | at‚Äã(x)=sin‚Å°(1‚àít)‚ÄãŒ©sin‚Å°Œ©‚Äãp‚Äã(x)+sin‚Å°t‚ÄãŒ©sin‚Å°Œ©‚Äãq‚Äã(x),where ‚ÄãŒ©=arccos‚Å°(‚àëzp‚Äã(z)‚Äãq‚Äã(z)),formulae-sequencesubscriptùëéùë°ùë•1ùë°Œ©Œ©ùëùùë•ùë°Œ©Œ©ùëûùë•where Œ©subscriptùëßùëùùëßùëûùëß\\\\textstyle a\\_{t}(x)=\\\\frac{\\\\sin(1-t)\\\\Omega}{\\\\sin\\\\Omega}\\\\sqrt{p(x)}+\\\\frac{\\\\sin t\\\\Omega}{\\\\sin\\\\Omega}\\\\sqrt{q(x)},\\ \\ \\\\text{where }\\\\Omega=\\\\arccos\\\\left(\\\\sum\\_{z}\\\\sqrt{p(z)q(z)}\\\\right), |  | (31) |\\\n\\\nand consequently the optimal probability path and velocity for ( [30](https://ar5iv.org/html/2412.03487#S4.E30 \"Equation 30 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) are\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚ãÜ‚Äã(x)=at2‚Äã(x),ut‚ãÜ‚Äã(x,z)=at2‚Äã(x)‚Äã\\[‚àÇtlog‚Å°at2‚Äã(x)‚àí‚àÇtlog‚Å°at2‚Äã(z)\\]+formulae-sequencesuperscriptsubscriptùëùùë°‚ãÜùë•superscriptsubscriptùëéùë°2ùë•superscriptsubscriptùë¢ùë°‚ãÜùë•ùëßsuperscriptsubscriptùëéùë°2ùë•subscriptdelimited-\\[\\]subscriptùë°superscriptsubscriptùëéùë°2ùë•subscriptùë°superscriptsubscriptùëéùë°2ùëß\\\\textstyle p\\_{t}^{\\\\star}(x)=a\\_{t}^{2}(x),\\\\qquad{u\\_{t}^{\\\\star}(x,z)=a\\_{t}^{2}(x)\\\\left\\[\\\\partial\\_{t}\\\\log a\\_{t}^{2}(x)-\\\\partial\\_{t}\\\\log a\\_{t}^{2}(z)\\\\right\\]\\_{+}} |  | (32) |\\\n\\\nIn the particular case of conditional probability paths q‚Äã(x)=Œ¥x1‚Äã(x)ùëûùë•subscriptùõøsubscriptùë•1ùë•q(x)=\\\\delta\\_{x\\_{1}}(x), we get that the optimal solution recovers the _mixture path_ (equation [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with a specific x1subscriptùë•1x\\_{1}-dependent scheduler:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∫t‚Äã(x1)=1‚àísin2‚Å°(1‚àít)‚ÄãŒ©‚Äã(x1)sin2‚Å°Œ©‚Äã(x1), where ‚ÄãŒ©‚Äã(x1)=arccos‚Å°p‚Äã(x1).formulae-sequencesubscriptùúÖùë°subscriptùë•11superscript21ùë°Œ©subscriptùë•1superscript2Œ©subscriptùë•1 where Œ©subscriptùë•1ùëùsubscriptùë•1\\\\textstyle\\\\kappa\\_{t}(x\\_{1})=1-\\\\frac{\\\\sin^{2}(1-t)\\\\Omega(x\\_{1})}{\\\\sin^{2}\\\\Omega(x\\_{1})},\\\\qquad\\\\text{ where }\\\\Omega(x\\_{1})=\\\\arccos\\\\sqrt{p(x\\_{1})}. |  | (33) |\\\n\\\nThis justifies the mixture paths ( [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) as kinetic optimal, and furthermore, it naturally utilizes an x1subscriptùë•1x\\_{1}-dependent scheduler for general source distributions pùëùp when p‚Äã(x1)>0ùëùsubscriptùë•10p(x\\_{1})>0.\\\n\\\n## 5 Probability-preserving velocities\\\n\\\nWhile we have found a particular flux jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star}, the space of fluxes for a given ptsubscriptùëùùë°p\\_{t} is much larger, and in this section we show how to explore it further.\\\nWe first observe that since the Continuity Equation ( [14](https://ar5iv.org/html/2412.03487#S4.E14 \"Equation 14 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is a linear equation, any flux jtsubscriptùëóùë°j\\_{t} satisfying this equation can be written as a sum of two fluxes:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt=jt‚ãÜ+jt‚üÇ, where ‚Äãdivx‚Äã(jt‚üÇ)=0,formulae-sequencesubscriptùëóùë°superscriptsubscriptùëóùë°‚ãÜsuperscriptsubscriptùëóùë°perpendicular-to where subscriptdivùë•superscriptsubscriptùëóùë°perpendicular-to0j\\_{t}=j\\_{t}^{\\\\star}+j\\_{t}^{\\\\perp},\\\\qquad\\\\text{ where }\\\\mathrm{div}\\_{x}(j\\_{t}^{\\\\perp})=0, |  | (34) |\\\n\\\nwhere jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star} is a particular solution to the Continuity Equation and jt‚üÇsuperscriptsubscriptùëóùë°perpendicular-toj\\_{t}^{\\\\perp} is a solution to the homogenous version of the equation, i.e., divergence-free.\\\nWe call the velocity resulting from jt‚üÇsuperscriptsubscriptùëóùë°perpendicular-toj\\_{t}^{\\\\perp} a _probability-preserving_, or corrector, velocity as sampling with this velocity has ptsubscriptùëùùë°p\\_{t} as a steady-state.\\\nFor simplicity, we mainly consider the special case of symmetric flux.\\\nSymmetry is a sufficient condition for being divergence-free as is evident from ( [15](https://ar5iv.org/html/2412.03487#S4.E15 \"Equation 15 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nA natural choice for a symmetric flux is to consider a symmetrization of ( [22](https://ar5iv.org/html/2412.03487#S4.E22 \"Equation 22 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) taking the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚üÇ‚Äã(x,z)=pt‚Äã(z)wt‚Äã(x,z)‚Äã\\|ft‚Äã(x)‚àíft‚Äã(z)\\|, and ‚Äãut‚üÇ‚Äã(x,z)=jt‚üÇ‚Äã(x,z)/pt‚Äã(z),formulae-sequencesuperscriptsubscriptùëóùë°perpendicular-toùë•ùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëßsubscriptùëìùë°ùë•subscriptùëìùë°ùëß and superscriptsubscriptùë¢ùë°perpendicular-toùë•ùëßsuperscriptsubscriptùëóùë°perpendicular-toùë•ùëßsubscriptùëùùë°ùëß\\\\textstyle j\\_{t}^{\\\\perp}(x,z)=\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}\\\\left\\|f\\_{t}(x)-f\\_{t}(z)\\\\right\\|,\\\\qquad\\\\text{ and }u\\_{t}^{\\\\perp}(x,z)=j\\_{t}^{\\\\perp}(x,z)/p\\_{t}(z), |  | (35) |\\\n\\\nfor any function ftsubscriptùëìùë°f\\_{t}. For convenience, we will simply re-use the same ftsubscriptùëìùë°f\\_{t} that comes from optimizing the kinetic energy ( [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), e.g. the same as in ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nIn contrast to the kinetic optimal velocity, which results in a unidirectional flow in the sense that samples will only move from lower ft‚Äã(‚ãÖ)subscriptùëìùë°‚ãÖf\\_{t}(\\\\cdot) to higher ft‚Äã(‚ãÖ)subscriptùëìùë°‚ãÖf\\_{t}(\\\\cdot), the symmetric flux in ( [35](https://ar5iv.org/html/2412.03487#S5.E35 \"Equation 35 ‚Ä£ 5 Probability-preserving velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) results in a bidirectional flow that allows equal movement between any two states with non-equal ft‚Äã(‚ãÖ)subscriptùëìùë°‚ãÖf\\_{t}(\\\\cdot).\\\nHence jt‚üÇsuperscriptsubscriptùëóùë°perpendicular-toj\\_{t}^{\\\\perp} acts as a corrector to redirect samples back to previous states in a way that leaves ptsubscriptùëùùë°p\\_{t} invariant.\\\n\\\n## 6 ELBO for Discrete Flow Matching\\\n\\\nWe show in [AppendixD](https://ar5iv.org/html/2412.03487#A4 \"Appendix D Evidence lower bound (ELBO) for CTMC ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") that we can produce a continuous-time ELBO bound on the likelihood log‚Å°p1Œ∏‚Äã(x1)subscriptsuperscriptùëùùúÉ1subscriptùë•1\\\\log p^{\\\\theta}\\_{1}(x\\_{1}) for any conditional probability path and conditional probability velocity in terms of the marginal uti‚Äã(xi,z)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßu^{i}\\_{t}(x^{i},z) and conditional uti‚Äã(xi,zi\\|x1i)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñu^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i}) as follows\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | logp1(x1)‚â•‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1D\\[uti‚Äã(xti,xt)‚àíuti‚Äã(xti,xti\\|x1i)+‚àëyi‚â†xtiuti(yi,xti\\|x1i)log(uti‚Äã(yi,xt)uti‚Äã(yi,xti\\|x1i))\\]dt\\\\begin{split}\\\\textstyle\\\\log p\\_{1}(x\\_{1})\\\\geq\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\biggr{\\[}&u\\_{t}^{i}(x\\_{t}^{i},x\\_{t})-u^{i}\\_{t}(x\\_{t}^{i},x\\_{t}^{i}\\|x^{i}\\_{1})\\\\\\<br>\\\\vspace{-0.5em}&\\\\textstyle+\\\\sum\\_{y^{i}\\\\neq x\\_{t}^{i}}u^{i}\\_{t}(y^{i},x\\_{t}^{i}\\|x^{i}\\_{1})\\\\log\\\\left(\\\\frac{u\\_{t}^{i}(y^{i},x\\_{t})}{u^{i}\\_{t}(y^{i},x\\_{t}^{i}\\|x^{i}\\_{1})}\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t\\\\end{split} |  | (36) |\\\n\\\nEvaluating this ELBO is difficult for the same reason as sampling in [Section3](https://ar5iv.org/html/2412.03487#S3 \"3 Sample generation through the factorized posterior ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), for large discrete spaces ùíØùíØ{\\\\mathcal{T}} computing\\\n( [9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for all xi‚ààùíØsuperscriptùë•ùëñùíØx^{i}\\\\in{\\\\mathcal{T}} has a computational complexity of \\|ùíØ\\|2superscriptùíØ2\\|{\\\\mathcal{T}}\\|^{2}. However, for mixture paths ( [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), our conditional velocity resulting from ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is used to obtain a closed-form expression for the marginal velocity (see [SectionC.2](https://ar5iv.org/html/2412.03487#A3.SS2 \"C.2 Marginal velocity in closed-form for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")),\\\nyielding a tractable ELBO for mixture paths:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | logp1Œ∏(x1)‚â•‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1D\\[Œª‚Äã(xti)‚Äãp1\\|tŒ∏‚Äã(xti\\|xt)‚àí‚àëyiŒª‚Äã(yi)‚Äãp1\\|tŒ∏‚Äã(yi\\|xt)++(1‚àíŒ¥x1i(xti))Œª(x1i)(1+logp1\\|tŒ∏(x1i\\|xt))\\]dt,\\\\begin{split}\\\\textstyle\\\\log p\\_{1}^{\\\\theta}(x\\_{1})\\\\geq\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\biggr{\\[}&\\\\lambda(x\\_{t}^{i})p^{\\\\theta}\\_{1\\|t}(x\\_{t}^{i}\\|x\\_{t})-\\\\sum\\_{y^{i}}\\\\lambda(y^{i})p^{\\\\theta}\\_{1\\|t}(y^{i}\\|x\\_{t})+\\\\\\<br>&\\\\textstyle+(1-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}))\\\\lambda(x\\_{1}^{i})\\\\left(1+\\\\log p^{\\\\theta}\\_{1\\|t}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t,\\\\end{split} |  | (37) |\\\n\\\nwhere Œª‚Äã(x)=Œ∫Àôt‚Äã(x)1‚àíŒ∫t‚Äã(x)ùúÜùë•subscriptÀôùúÖùë°ùë•1subscriptùúÖùë°ùë•\\\\lambda(x)=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x)}{1-\\\\kappa\\_{t}(x)}.\\\nThis ELBO has not been used previously, e.g., Campbell et al. ( [2022](https://ar5iv.org/html/2412.03487#bib.bib4 \"\")) had to resort to a doubly stochastic estimator.\\\nSpecifically for the masked construction, we recover the ELBO used by Zheng et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib65 \"\")) for x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-independent schedulers and used by Shi et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\")) for x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-dependent schedulers; see [SectionD.1](https://ar5iv.org/html/2412.03487#A4.SS1 \"D.1 ELBO for masked models ‚Ä£ Appendix D Evidence lower bound (ELBO) for CTMC ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n## 7 Related Work\\\n\\\nGenerative modeling through marginalization.\\\nDenoising diffusion models (Sohl-Dickstein et al., [2015](https://ar5iv.org/html/2412.03487#bib.bib51 \"\"); Ho et al., [2020](https://ar5iv.org/html/2412.03487#bib.bib23 \"\"); Song et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib52 \"\")) construct generative models by reversing a noising process. The Flow Matching framework (Lipman et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib30 \"\"); Albergo et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib1 \"\"); Liu et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib31 \"\")) shares similar traits but instead constructs generative models through a marginalization of conditional Markov processes, allowing a larger design space of probability paths. These types of models can be trained at scale both efficiently and stably relative to other frameworks, and thus have seen massive success in the large-scale generation of images (Rombach et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib45 \"\"); Esser et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib17 \"\")), videos (Singer et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib50 \"\")), and audio (Le et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib29 \"\"); Vyas et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib60 \"\")).\\\n\\\nContinuous-time Markov Chains. These aforementioned frameworks have been adapted to the discrete domain by making use of Continuous-time Markov Chains (CTMC) as the choice of generative process (Campbell et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib4 \"\"); [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\"); Lou et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib32 \"\"); Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")). Many works discuss both a uniform noise and mask construction (Campbell et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\"); Lou et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib32 \"\")); however,\\\nmore recent works have focused more and more on the simple masked construction where each discrete variable is randomly replaced with a dummy or mask token (Sahoo et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib47 \"\"); Shi et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\")) as it often performs favorably compared to uniform noise. However, the simple masked construction leads to a generative model that is equivalent to any-order autoregressive modeling under mild assumptions (Hoogeboom et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib24 \"\"); Zheng et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib65 \"\")).\\\n\\\nAny-order autoregressive modeling. While autoregressive models prespecify a fixed ordering, any-order autoregressive models learn conditional probabilities for every ordering.\\\nTraining is often carried out by randomly masking out parts of the data sample (Devlin, [2018](https://ar5iv.org/html/2412.03487#bib.bib13 \"\"); Yang, [2019](https://ar5iv.org/html/2412.03487#bib.bib63 \"\")).\\\nSome works have focused on architectural choices: Germain et al. ( [2015](https://ar5iv.org/html/2412.03487#bib.bib20 \"\")) randomly masks out weights to induce a randomized ordering, while Pannatier et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib39 \"\")) uses a fixed causal attention architecture but randomly permutes the input ordering, with the end goal of learning all combinations of conditional distributions so that generation of the variables can be done in any order. The ordering itself is often optimized further by the use of heuristic scoring functions (Chang et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib6 \"\"); Ziv et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib68 \"\")).\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/text/gen_ppl_vs_elbo_fw.png)Figure 1: Generative perplexity vs. ELBO of kinetic optimal (KO) and linear schedulers of FineWeb-Edu models. The ELBO is evaluated: WikiText-103, LAMBADA, Penn TreeBank,FineWeb-Edu, and OpenWebText. Bold highlights the Pareto front. Table 1:\\\nZero-shot unconditional perplexity bound as in equation [36](https://ar5iv.org/html/2412.03487#S6.E36 \"Equation 36 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") of Fineweb-Edu models, more details are in [SectionE.1](https://ar5iv.org/html/2412.03487#A5.SS1 \"E.1 Text generation ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). ‚àó denotes our reimplementation of the method.\\\n\\\n| Method | Lambada‚Üì‚Üì\\\\downarrow | Wikitext2‚Üì‚Üì\\\\downarrow | PTB‚Üì‚Üì\\\\downarrow | Wikitext103‚Üì‚Üì\\\\downarrow | 1BW‚Üì‚Üì\\\\downarrow | OpenWebText‚Üì‚Üì\\\\downarrow | Fineweb-Edu (train set)‚Üì‚Üì\\\\downarrow |\\\n| SEDD‚àó (mask) (Lou et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib32 \"\")) | ‚â§\\\\leq58.57 | ‚â§\\\\leq42.84 | ‚â§\\\\leq136.99 | ‚â§\\\\leq42.88 | ‚â§\\\\leq114.17 | ‚â§\\\\leq36.55 | ‚â§\\\\leq19.41 |\\\n| MD4‚àó(Shi et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\")) | ‚â§\\\\leq61.27 | ‚â§\\\\leq43.08 | ‚â§\\\\leq157.00 | ‚â§\\\\leq43.02 | ‚â§\\\\leq127.55 | ‚â§\\\\leq35.57 | ‚â§\\\\leq18.69 |\\\n| DFM - Linear (Œ≤0=1024subscriptùõΩ01024\\\\beta\\_{0}=1024) | ‚â§\\\\leq60.59 | ‚â§\\\\leq44.17 | ‚â§\\\\leq180.75 | ‚â§\\\\leq44.29 | ‚â§\\\\leq147.21 | ‚â§\\\\leq36.33 | ‚â§\\\\leq18.67 |\\\n| DFM - Kinetic Optimal (mask) | ‚â§\\\\leq58.5 | ‚â§\\\\leq41.80 | ‚â§\\\\leq144.46 | ‚â§\\\\leq41.83 | ‚â§\\\\leq123.83 | ‚â§\\\\leq35.57 | ‚â§\\\\leq18.71 |\\\n| DFM - Kinetic Optimal (Œ≤0=1024subscriptùõΩ01024\\\\beta\\_{0}=1024) | ‚â§\\\\leq58.41 | ‚â§\\\\leq42.19 | ‚â§\\\\leq147.09 | ‚â§\\\\leq42.34 | ‚â§\\\\leq115.51 | ‚â§\\\\leq36.07 | ‚â§\\\\leq18.63 |\\\n\\\n## 8 Experiments\\\n\\\nWe evaluate Discrete Flow Matching (DFM) on multiple modalities: text, crystalline material, and image generation. Our main goal is to show that Discrete Flow Matching can outperform autoregressive models, and within the class of Discrete Flow Matching, we explore new additions such as the kinetic optimal and the metric-induced constructions. In text, we mainly explore the kinetic optimal probability paths (equation [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with different source distributions, as these have access to the closed-form ELBO ( [37](https://ar5iv.org/html/2412.03487#S6.E37 \"Equation 37 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nIn material generation, we find that enabling permutation invariance for DFM easily outperforms autoregressive models at de novo generation, achieving state-of-the-art results.\\\nFurthermore, in domains where a natural metric exists, we demonstrate our method‚Äôs ability to inject inductive bias into the velocity and probability path using equations [27](https://ar5iv.org/html/2412.03487#S4.E27 \"Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and [29](https://ar5iv.org/html/2412.03487#S4.E29 \"Equation 29 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We show that our large design space enables competitive results even with non-mask probability paths, showcasing the capabilities of our expanded design space.\\\n\\\n### 8.1 Text generation\\\n\\\nWe explore our method on the task of text generation. We use the kinetic optimal probability path as in equation [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), which only has one hyper-parameter, the source distribution p‚Äã(x)ùëùùë•p(x). For source distribution, we compute the statistics of tokens appearances in the training data pstats‚Äã(xi)subscriptùëùstatssuperscriptùë•ùëñp\\_{\\\\text{stats}}(x^{i}) and construct a single-parameter family of source distributions:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p‚Äã(x)=‚àèi=1Dp‚Äã(xi),p‚Äã(xi)=softmax‚Äã(‚àíŒ≤0‚Äãlog‚Å°pstats‚Äã(xi)),formulae-sequenceùëùùë•superscriptsubscriptproductùëñ1ùê∑ùëùsuperscriptùë•ùëñùëùsuperscriptùë•ùëñsoftmaxsubscriptùõΩ0subscriptùëùstatssuperscriptùë•ùëñ\\\\textstyle p(x)=\\\\prod\\_{i=1}^{D}p(x^{i}),\\\\quad p(x^{i})=\\\\text{softmax}(-\\\\beta\\_{0}\\\\log p\\_{\\\\text{stats}}(x^{i})), |  | (38) |\\\n\\\nwhere Œ≤0=‚àí1subscriptùõΩ01\\\\beta\\_{0}=-1 recovers the data statistics, Œ≤0=0subscriptùõΩ00\\\\beta\\_{0}=0 yield a uniform distribution on all tokens. Also, Œ≤0‚Üí‚àû‚ÜísubscriptùõΩ0\\\\beta\\_{0}\\\\rightarrow\\\\infty yields a uniform distribution on the set of least probable tokens in the data, which behaves similarly to a mask source distribution.\\\n\\\nFor this experiment, we used linear and kinetic optimal schedulers with mask, p‚Äã(x)=Œ¥ùïû‚Äã(x)ùëùùë•subscriptùõøùïûùë•p(x)=\\\\delta\\_{\\\\mathbbm{m}}(x), and Œ≤0‚àà{‚àí0.5,0.0,0.5,1,2,4,64,256,1024}subscriptùõΩ00.50.00.5124642561024\\\\beta\\_{0}\\\\in\\\\{-0.5,0.0,0.5,1,2,4,64,256,1024\\\\} source distributions. The models are trained on the FineWeb-Edu (Lozhkov et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib33 \"\")) data set.\\\nTable [1](https://ar5iv.org/html/2412.03487#S7.T1 \"Table 1 ‚Ä£ 7 Related Work ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") compares the evidence lower bound (ELBO), as in equation [37](https://ar5iv.org/html/2412.03487#S6.E37 \"Equation 37 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), of our trained models with previous works. See [SectionE.1](https://ar5iv.org/html/2412.03487#A5.SS1 \"E.1 Text generation ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for experimental setup. We find that the kinetic optimal scheduler yields the best results on most of the evaluation sets. Notably, to the best of our knowledge, this is the first time a non-mask source distribution obtains comparable results and sometimes outperforms the mask source distribution. Figure [1](https://ar5iv.org/html/2412.03487#S7.F1 \"Figure 1 ‚Ä£ 7 Related Work ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") presents a view of the generative perplexity (as measured by GPT2-large) vs. the ELBO of each model.\\\nGenerative perplexity represents the likelihood as determined by an external model, whereas the ELBO indicates the likelihood as assessed by the evaluated model.\\\nWe see that models trained using the kinetic optimal scheduler achieve better tradeoffs than those trained with the linear scheduler, as they more frequently appear on the Pareto front.\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/x1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/x2.png) | |     |     |\\\n| --- | --- |\\\n| Method | FID ‚Üì‚Üì\\\\downarrow |\\\n| D3PM (Austin et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib2 \"\")) | 7.34 |\\\n| CTDD (Nisonoff et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib37 \"\")) | 7.86 |\\\n| œÑùúè\\\\tauLDR-10 (Campbell et al., [2022](https://ar5iv.org/html/2412.03487#bib.bib4 \"\")) | 3.74 |\\\n| DFM w/ mask (Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")) | 3.63 |\\\n| DFM w/ metric (Ours) | 3.43 | |\\\n\\\nFigure 2: (left) Increasing the design space of discrete probability paths and velocities allows us to perform better than prior works, while significantly boosting performance at the low NFE regime.\\\n(middle) We find that the choice of kinetic optimal ut‚ãÜsuperscriptsubscriptùë¢ùë°‚ãÜu\\_{t}^{\\\\star} significantly affects the low NFE regime while adding the probability-preserving component ut‚üÇsuperscriptsubscriptùë¢ùë°perpendicular-tou\\_{t}^{\\\\perp} stabilizes the high NFE regime.\\\n(right) Comparison of FID values for discrete generative models.Table 2: De novo material generation. Our primary metric, Stability Rate, is the fraction of materials with energies below the convex hull formed by stable materials, following Miller et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib36 \"\")).\\\n\\\n| Method | NFE | Validity (%) ‚Üë‚Üë\\\\uparrow | Coverage (%) ‚Üë‚Üë\\\\uparrow | Property ‚Üì‚Üì\\\\downarrow | Stability Rate (%) ‚Üë‚Üë\\\\uparrow |\\\n|  |  | Structural | Composition | Recall | Precision | wdist (œÅùúå\\\\rho) | wdist (Ne‚ÄãlsubscriptùëÅùëíùëôN\\_{el}) |  |\\\n| CDVAE (Xie et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib62 \"\")) | 5000 | 100.00 | 86.70 | 99.15 | 99.49 | 0.688 | 0.278 | 1.57 |\\\n| DiffCSP (Jiao et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib26 \"\")) | 1000 | 100.00 | 83.25 | 99.71 | 99.76 | 0.350 | 0.125 | 5.06 |\\\n| FlowMM (Miller et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib36 \"\")) | 1000 | 96.85 | 83.19 | 99.49 | 99.58 | 0.239 | 0.083 | 4.65 |\\\n| CrystalLLM (70B) (Gruver et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib22 \"\")) | ‚Äì | 99.6 | 95.4 | 85.8 | 98.9 | 0.81 | 0.44 | 5.28 |\\\n| Autoregressive | ‚Äì | 86.43 | 89.33 | 63.31 | 99.74 | 0.088 | 0.030 | 1.99 |\\\n| Perm. invariant DFM - Mask w/ Cubic | 250 | 94.40 | 84.40 | 98.25 | 99.40 | 0.244 | 0.144 | 6.90 |\\\n| Perm. invariant DFM - Mask w/ Kinetic Optimal ( [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) | 250 | 95.79 | 88.50 | 90.11 | 99.29 | 0.542 | 0.154 | 7.02 |\\\n\\\n### 8.2 Crystalline material generation\\\n\\\nTo showcase the flexibility of our approach, we use discrete Flow Matching to generate crystals.\\\nWe train on inorganic materials from the MP-20 dataset, a subset of the Materials Project database (Jain et al., [2013](https://ar5iv.org/html/2412.03487#bib.bib25 \"\")).\\\nCrystalline materials are represented using a combination of continuous and discrete variables, which we tokenize using the same method as Gruver et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib22 \"\")), which fine-tunes a 70B LlaMa-2 autoregressive model (Touvron et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib56 \"\")). In contrast, we are the first to perform crystal generation with a purely discrete non-autoregressive model.\\\n\\\nAn important distinction is that since discrete Flow Matching directly predicts the factorized posterior ( [10](https://ar5iv.org/html/2412.03487#S2.E10 \"Equation 10 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), we can easily impose permutation invariance of the atoms, which should significantly reduce the complexity of the learning problem.\\\nThis is as opposed to prior works on using autoregressive models for material generation (Flam-Shepherd & Aspuru-Guzik, [2023](https://ar5iv.org/html/2412.03487#bib.bib18 \"\"); Gruver et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib22 \"\")) which must impose an unnatural ordering on the variables.\\\nWe show results in [Table2](https://ar5iv.org/html/2412.03487#S8.T2 \"In 8.1 Text generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") where we achieve state-of-the-art results using discrete Flow Matching, in particular, with a kinetic optimal scheduler ( [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")). We believe non-autoregressive generation is a key ingredient in performing well due to the ability to impose structure such as permutation invariance. Compared to continuous-space models such as FlowMM (Miller et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib36 \"\")) and DiffCSP (Jiao et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib26 \"\")), we see a large performance gain in terms of our main metric, stability rate (‚â•38absent38\\\\geq 38% relative improvement), from using discrete generative models due to the discrete nature of crystal generation.\\\n\\\nLlamaGen\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/ar_300_5.png)\\\n\\\nDFM metric\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/600_5.png)\\\n\\\nFigure 3: Generated samples for ImageNet 256√ó\\\\times256, with the same class label per column. (top) Autoregressive LlamaGen model (Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")). (bottom) Discrete Flow Matching with metric-induced probability path ( [27](https://ar5iv.org/html/2412.03487#S4.E27 \"Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\n\\\n### 8.3 Pixel space image generation\\\n\\\nWe first consider the case of image generation in pixel space. Here, ùíØ={0,‚Ä¶,255}ùíØ0‚Ä¶255{\\\\mathcal{T}}=\\\\{0,\\\\dots,255\\\\} and we have access to a natural choice of metric, by embedding ùíØùíØ{\\\\mathcal{T}} on the interval \\[‚àí1,1\\]‚äÇ‚Ñù11‚Ñù\\[-1,1\\]\\\\subset\\\\mathbb{R} and using the Euclidean distance d‚Äã(x,y)=\\|x‚àíy\\|dùë•ùë¶ùë•ùë¶\\\\textrm{d}(x,y)=\\|x-y\\| in ( [27](https://ar5iv.org/html/2412.03487#S4.E27 \"Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), as is typically done for continuous-space image generative models. We use the CIFAR-10 dataset (Krizhevsky et al., [2009](https://ar5iv.org/html/2412.03487#bib.bib28 \"\")) for these experiments. Results are shown in [Figure2](https://ar5iv.org/html/2412.03487#S8.F2 \"In 8.1 Text generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), where we can improve upon the masked construction while also retaining performance at low number of function evaluations (NFE). Generated samples are shown in [Figure3](https://ar5iv.org/html/2412.03487#S8.F3 \"In 8.2 Crystalline material generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and in [AppendixG](https://ar5iv.org/html/2412.03487#A7 \"Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We find that optimizing the velocity after training can provide significant gains: the choice of probability-advancing velocity ( [SectionC.3](https://ar5iv.org/html/2412.03487#A3.SS3 \"C.3 Power ‚àû velocity for general paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) affects the low NFE samples while the adding the probability-preserving component ( [Section5](https://ar5iv.org/html/2412.03487#S5 \"5 Probability-preserving velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) improves at high NFE.\\\n\\\n### 8.4 Discrete latent image generation\\\n\\\nTable 3: Face-blurred ImageNet-256 with the Llama-B architecture (111M parameters).\\\n\\\n‚àódenotes our reimplementation.\\\n\\\n| Method | NFE | FID |\\\n| --- | --- | --- |\\\n| LlamaGen (AR) (Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")) | 256 | 5.46 |\\\n| LlamaGen (AR)‚àó(Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")) | 256 | 4.81 |\\\n| DFM - Mask‚àó(Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")) | 100 | 5.72 |\\\n| DFM - Metric (Ours) | 100 | 4.50 |\\\n\\\nWe also explore the use of discrete Flow Matching as a generative model within a discrete latent space learned by a vector quantized variational autoencoder (VQVAE; Van Den Oord et al. ( [2017](https://ar5iv.org/html/2412.03487#bib.bib58 \"\"))). We use images from face-blurred ImageNet (Deng et al., [2009](https://ar5iv.org/html/2412.03487#bib.bib12 \"\"); Chrabaszcz et al., [2017](https://ar5iv.org/html/2412.03487#bib.bib8 \"\")) at 256√ó\\\\times256 resolution. For training the VQVAE model, we follow the setup in Sun et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")) and use 16√ó\\\\times downsampling to produce a latent space of dimension 16√ó\\\\times16 with a codebook size of \\|ùíØ\\|=214=16384ùíØsuperscript21416384\\|{\\\\mathcal{T}}\\|=2^{14}=16384.\\\nAs our choice of d‚Äã(‚ãÖ,x1)d‚ãÖsubscriptùë•1\\\\textrm{d}(\\\\cdot,x\\_{1}), we use the same metric that was used to train the VQVAE model, which is d‚Äã(x,y)=‚Äñx/‚Äñx‚Äñ‚àíy/‚Äñy‚Äñ‚Äñdùë•ùë¶normùë•normùë•ùë¶normùë¶\\\\textrm{d}(x,y)=\\\\left\\\\\\|\\\\nicefrac{{x}}{{\\\\left\\\\\\|x\\\\right\\\\\\|}}-\\\\nicefrac{{y}}{{\\\\left\\\\\\|y\\\\right\\\\\\|}}\\\\right\\\\\\|. We show quantitative results in [Table3](https://ar5iv.org/html/2412.03487#S8.T3 \"In 8.4 Discrete latent image generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), where we find that discrete Flow Matching model with the metric probability path outperforms the autoregressive approach, while the masked construction lags behind. In addition, we show generated samples in [Figure3](https://ar5iv.org/html/2412.03487#S8.F3 \"In 8.2 Crystalline material generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and [Figure8](https://ar5iv.org/html/2412.03487#A7.F8 \"In Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), along with a visualization of the metric probability path in [Figure4](https://ar5iv.org/html/2412.03487#A5.F4 \"In The metric path. ‚Ä£ E.4 Image generation - Face-blurred ImageNet256√ó256 ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and ablation studies on NFE and CFG scale in [AppendixG](https://ar5iv.org/html/2412.03487#A7 \"Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n## 9 Conclusion\\\n\\\nWe have opened up the design space of discrete Flow Matching models based on the the continuous-time Markov chain generative process. In particular, we propose a kinetic optimal point of view for constructing velocities given prescribed probability paths.\\\nThis leads to, for the first time, allowing arbitrary probability paths to be used.\\\nFurthermore, we justify mixture paths with particular schedulers as being kinetic optimal solutions, and showcase for the first time, competitive results for non-mask source distributions.\\\nOur method naturally encapsulates existing approaches, and we showcase the flexibility of our approach to designing discrete Flow Matching models across multiple application domains, ranging from text generation, to materials and image generation, where we see significant gains over autoregressive models.\\\n\\\n## References\\\n\\\n- Albergo et al. (2023)\\\nMichael S Albergo, Nicholas M Boffi, and Eric Vanden-Eijnden.\\\n\\\nStochastic interpolants: A unifying framework for flows and diffusions.\\\n\\\n_arXiv preprint arXiv:2303.08797_, 2023.\\\n\\\n- Austin et al. (2021)\\\nJacob Austin, Daniel D Johnson, Jonathan Ho, Daniel Tarlow, and Rianne Van Den Berg.\\\n\\\nStructured denoising diffusion models in discrete state-spaces.\\\n\\\n_Advances in Neural Information Processing Systems_, 34, 2021.\\\n\\\n- Bommasani et al. (2021)\\\nRishi Bommasani, Drew A Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S Bernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, et al.\\\n\\\nOn the opportunities and risks of foundation models.\\\n\\\n_arXiv preprint arXiv:2108.07258_, 2021.\\\n\\\n- Campbell et al. (2022)\\\nAndrew Campbell, Joe Benton, Valentin De Bortoli, Thomas Rainforth, George Deligiannidis, and Arnaud Doucet.\\\n\\\nA continuous time framework for discrete denoising models.\\\n\\\n_Advances in Neural Information Processing Systems_, 35:28266‚Äì28279, 2022.\\\n\\\n- Campbell et al. (2024)\\\nAndrew Campbell, Jason Yim, Regina Barzilay, Tom Rainforth, and Tommi Jaakkola.\\\n\\\nGenerative flows on discrete state-spaces: Enabling multimodal flows with applications to protein co-design.\\\n\\\n_arXiv preprint arXiv:2402.04997_, 2024.\\\n\\\n- Chang et al. (2022)\\\nHuiwen Chang, Han Zhang, Lu Jiang, Ce Liu, and William T Freeman.\\\n\\\nMaskgit: Masked generative image transformer.\\\n\\\nIn _Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  11315‚Äì11325, 2022.\\\n\\\n- Chelba et al. (2014)\\\nCiprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge, Thorsten Brants, Phillipp Koehn, and Tony Robinson.\\\n\\\nOne billion word benchmark for measuring progress in statistical language modeling, 2014.\\\n\\\nURL [https://arxiv.org/abs/1312.3005](https://arxiv.org/abs/1312.3005 \"\").\\\n\\\n- Chrabaszcz et al. (2017)\\\nPatryk Chrabaszcz, Ilya Loshchilov, and Frank Hutter.\\\n\\\nA downsampled variant of imagenet as an alternative to the cifar datasets.\\\n\\\n_arXiv preprint arXiv:1707.08819_, 2017.\\\n\\\n- Dai et al. (2023)\\\nXiaoliang Dai, Ji Hou, Chih-Yao Ma, Sam Tsai, Jialiang Wang, Rui Wang, Peizhao Zhang, Simon Vandenhende, Xiaofang Wang, Abhimanyu Dubey, et al.\\\n\\\nEmu: Enhancing image generation models using photogenic needles in a haystack.\\\n\\\n_arXiv preprint arXiv:2309.15807_, 2023.\\\n\\\n- Davies et al. (2019)\\\nDaniel W Davies, Keith T Butler, Adam J Jackson, Jonathan M Skelton, Kazuki Morita, and Aron Walsh.\\\n\\\nSmact: Semiconducting materials by analogy and chemical theory.\\\n\\\n_Journal of Open Source Software_, 4(38):1361, 2019.\\\n\\\n- Deng et al. (2023)\\\nBowen Deng, Peichen Zhong, KyuJung Jun, Janosh Riebesell, Kevin Han, Christopher J. Bartel, and Gerbrand Ceder.\\\n\\\nChgnet as a pretrained universal neural network potential for charge-informed atomistic modelling.\\\n\\\n_Nature Machine Intelligence_, pp.  1‚Äì11, 2023.\\\n\\\ndoi: 10.1038/s42256-023-00716-3.\\\n\\\n- Deng et al. (2009)\\\nJia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei.\\\n\\\nImagenet: A large-scale hierarchical image database.\\\n\\\nIn _2009 IEEE Conference on Computer Vision and Pattern Recognition_, pp.  248‚Äì255, 2009.\\\n\\\ndoi: 10.1109/CVPR.2009.5206848.\\\n\\\n- Devlin (2018)\\\nJacob Devlin.\\\n\\\nBert: Pre-training of deep bidirectional transformers for language understanding.\\\n\\\n_arXiv preprint arXiv:1810.04805_, 2018.\\\n\\\n- Dhariwal & Nichol (2021)\\\nPrafulla Dhariwal and Alex Nichol.\\\n\\\nDiffusion models beat gans on image synthesis.\\\n\\\n_arXiv preprint arXiv:2105.05233_, 2021.\\\n\\\n- Elfwing et al. (2018)\\\nStefan Elfwing, Eiji Uchibe, and Kenji Doya.\\\n\\\nSigmoid-weighted linear units for neural network function approximation in reinforcement learning.\\\n\\\n_Neural networks_, 107:3‚Äì11, 2018.\\\n\\\n- Esser et al. (2021)\\\nPatrick Esser, Robin Rombach, and Bjorn Ommer.\\\n\\\nTaming transformers for high-resolution image synthesis.\\\n\\\nIn _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pp.  12873‚Äì12883, 2021.\\\n\\\n- Esser et al. (2024)\\\nPatrick Esser, Sumith Kulal, Andreas Blattmann, Rahim Entezari, Jonas M√ºller, Harry Saini, Yam Levi, Dominik Lorenz, Axel Sauer, Frederic Boesel, et al.\\\n\\\nScaling rectified flow transformers for high-resolution image synthesis.\\\n\\\nIn _Forty-first International Conference on Machine Learning_, 2024.\\\n\\\n- Flam-Shepherd & Aspuru-Guzik (2023)\\\nDaniel Flam-Shepherd and Al√°n Aspuru-Guzik.\\\n\\\nLanguage models can generate molecules, materials, and protein binding sites directly in three dimensions as xyz, cif, and pdb files.\\\n\\\n_arXiv preprint arXiv:2305.05708_, 2023.\\\n\\\n- Gat et al. (2024)\\\nItai Gat, Tal Remez, Neta Shaul, Felix Kreuk, Ricky T. Q. Chen, Gabriel Synnaeve, Yossi Adi, and Yaron Lipman.\\\n\\\nDiscrete flow matching, 2024.\\\n\\\nURL [https://arxiv.org/abs/2407.15595](https://arxiv.org/abs/2407.15595 \"\").\\\n\\\n- Germain et al. (2015)\\\nMathieu Germain, Karol Gregor, Iain Murray, and Hugo Larochelle.\\\n\\\nMade: Masked autoencoder for distribution estimation.\\\n\\\nIn _International conference on machine learning_, pp.  881‚Äì889. PMLR, 2015.\\\n\\\n- Gokaslan & Cohen (2019)\\\nAaron Gokaslan and Vanya Cohen.\\\n\\\nOpenwebtext corpus.\\\n\\\n[http://Skylion007.github.io/OpenWebTextCorpus](http://skylion007.github.io/OpenWebTextCorpus \"\"), 2019.\\\n\\\n- Gruver et al. (2024)\\\nNate Gruver, Anuroop Sriram, Andrea Madotto, Andrew Gordon Wilson, C Lawrence Zitnick, and Zachary Ulissi.\\\n\\\nFine-tuned language models generate stable inorganic materials as text.\\\n\\\n_arXiv preprint arXiv:2402.04379_, 2024.\\\n\\\n- Ho et al. (2020)\\\nJonathan Ho, Ajay Jain, and Pieter Abbeel.\\\n\\\nDenoising diffusion probabilistic models.\\\n\\\n_Advances in neural information processing systems_, 33:6840‚Äì6851, 2020.\\\n\\\n- Hoogeboom et al. (2021)\\\nEmiel Hoogeboom, Alexey A Gritsenko, Jasmijn Bastings, Ben Poole, Rianne van den Berg, and Tim Salimans.\\\n\\\nAutoregressive diffusion models.\\\n\\\n_arXiv preprint arXiv:2110.02037_, 2021.\\\n\\\n- Jain et al. (2013)\\\nAnubhav Jain, Shyue Ping Ong, Geoffroy Hautier, Wei Chen, William Davidson Richards, Stephen Dacek, Shreyas Cholia, Dan Gunter, David Skinner, Gerbrand Ceder, et al.\\\n\\\nCommentary: The materials project: A materials genome approach to accelerating materials innovation.\\\n\\\n_APL materials_, 1(1), 2013.\\\n\\\n- Jiao et al. (2023)\\\nRui Jiao, Wenbing Huang, Peijia Lin, Jiaqi Han, Pin Chen, Yutong Lu, and Yang Liu.\\\n\\\nCrystal structure prediction by joint equivariant diffusion.\\\n\\\n_arXiv preprint arXiv:2309.04475_, 2023.\\\n\\\n- Kohn & Sham (1965)\\\nWalter Kohn and Lu Jeu Sham.\\\n\\\nSelf-consistent equations including exchange and correlation effects.\\\n\\\n_Physical review_, 140(4A):A1133, 1965.\\\n\\\n- Krizhevsky et al. (2009)\\\nAlex Krizhevsky, Geoffrey Hinton, et al.\\\n\\\nLearning multiple layers of features from tiny images.\\\n\\\n2009.\\\n\\\n- Le et al. (2024)\\\nMatthew Le, Apoorv Vyas, Bowen Shi, Brian Karrer, Leda Sari, Rashel Moritz, Mary Williamson, Vimal Manohar, Yossi Adi, Jay Mahadeokar, et al.\\\n\\\nVoicebox: Text-guided multilingual universal speech generation at scale.\\\n\\\n_Advances in neural information processing systems_, 36, 2024.\\\n\\\n- Lipman et al. (2022)\\\nYaron Lipman, Ricky T. Q. Chen, Heli Ben-Hamu, Maximilian Nickel, and Matt Le.\\\n\\\nFlow matching for generative modeling.\\\n\\\n_arXiv preprint arXiv:2210.02747_, 2022.\\\n\\\n- Liu et al. (2022)\\\nXingchao Liu, Chengyue Gong, and Qiang Liu.\\\n\\\nFlow straight and fast: Learning to generate and transfer data with rectified flow.\\\n\\\n_arXiv preprint arXiv:2209.03003_, 2022.\\\n\\\n- Lou et al. (2024)\\\nAaron Lou, Chenlin Meng, and Stefano Ermon.\\\n\\\nDiscrete diffusion language modeling by estimating the ratios of the data distribution.\\\n\\\n_International Conference on Machine Learning_, 2024.\\\n\\\n- Lozhkov et al. (2024)\\\nAnton Lozhkov, Loubna Ben Allal, Leandro von Werra, and Thomas Wolf.\\\n\\\nFineweb-edu, May 2024.\\\n\\\nURL [https://huggingface.co/datasets/HuggingFaceFW/fineweb-edu](https://huggingface.co/datasets/HuggingFaceFW/fineweb-edu \"\").\\\n\\\n- Marcus et al. (1993)\\\nMitchell P. Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz.\\\n\\\nBuilding a large annotated corpus of English: The Penn Treebank.\\\n\\\n_Computational Linguistics_, 19(2):313‚Äì330, 1993.\\\n\\\nURL [https://aclanthology.org/J93-2004](https://aclanthology.org/J93-2004 \"\").\\\n\\\n- Merity et al. (2016)\\\nStephen Merity, Caiming Xiong, James Bradbury, and Richard Socher.\\\n\\\nPointer sentinel mixture models, 2016.\\\n\\\nURL [https://arxiv.org/abs/1609.07843](https://arxiv.org/abs/1609.07843 \"\").\\\n\\\n- Miller et al. (2024)\\\nBenjamin Kurt Miller, Ricky T. Q. Chen, Anuroop Sriram, and Brandon M Wood.\\\n\\\nFlowMM: Generating materials with riemannian flow matching.\\\n\\\nIn _Forty-first International Conference on Machine Learning_, 2024.\\\n\\\nURL [https://openreview.net/forum?id=W4pB7VbzZI](https://openreview.net/forum?id=W4pB7VbzZI \"\").\\\n\\\n- Nisonoff et al. (2024)\\\nHunter Nisonoff, Junhao Xiong, Stephan Allenspach, and Jennifer Listgarten.\\\n\\\nUnlocking guidance for discrete state-space diffusion and flow models.\\\n\\\n_arXiv preprint arXiv:2406.01572_, 2024.\\\n\\\n- Ong et al. (2013)\\\nShyue Ping Ong, William Davidson Richards, Anubhav Jain, Geoffroy Hautier, Michael Kocher, Shreyas Cholia, Dan Gunter, Vincent L Chevrier, Kristin A Persson, and Gerbrand Ceder.\\\n\\\nPython materials genomics (pymatgen): A robust, open-source python library for materials analysis.\\\n\\\n_Computational Materials Science_, 68:314‚Äì319, 2013.\\\n\\\n- Pannatier et al. (2024)\\\nArnaud Pannatier, Evann Courdier, and Fran√ßois Fleuret.\\\n\\\nœÉùúé\\\\sigma-GPTs: A new approach to autoregressive models, 2024.\\\n\\\n- Paperno et al. (2016)\\\nDenis Paperno, Germ√°n Kruszewski, Angeliki Lazaridou, Quan Ngoc Pham, Raffaella Bernardi, Sandro Pezzelle, Marco Baroni, Gemma Boleda, and Raquel Fern√°ndez.\\\n\\\nThe lambada dataset: Word prediction requiring a broad discourse context, 2016.\\\n\\\nURL [https://arxiv.org/abs/1606.06031](https://arxiv.org/abs/1606.06031 \"\").\\\n\\\n- Peebles & Xie (2022)\\\nWilliam Peebles and Saining Xie.\\\n\\\nScalable diffusion models with transformers.\\\n\\\n_arXiv preprint arXiv:2212.09748_, 2022.\\\n\\\n- Peebles & Xie (2023)\\\nWilliam Peebles and Saining Xie.\\\n\\\nScalable diffusion models with transformers.\\\n\\\nIn _Proceedings of the IEEE/CVF International Conference on Computer Vision_, pp.  4195‚Äì4205, 2023.\\\n\\\n- Peyr√© et al. (2019)\\\nGabriel Peyr√©, Marco Cuturi, et al.\\\n\\\nComputational optimal transport: With applications to data science.\\\n\\\n_Foundations and Trends¬Æ in Machine Learning_, 11(5-6):355‚Äì607, 2019.\\\n\\\n- Radford et al. (2019)\\\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al.\\\n\\\nLanguage models are unsupervised multitask learners.\\\n\\\n_OpenAI blog_, 1(8):9, 2019.\\\n\\\n- Rombach et al. (2022)\\\nRobin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bj√∂rn Ommer.\\\n\\\nHigh-resolution image synthesis with latent diffusion models.\\\n\\\nIn _Proceedings of the IEEE/CVF conference on computer vision and pattern recognition_, pp.  10684‚Äì10695, 2022.\\\n\\\n- Saharia et al. (2022)\\\nChitwan Saharia, Jonathan Ho, William Chan, Tim Salimans, David J Fleet, and Mohammad Norouzi.\\\n\\\nImage super-resolution via iterative refinement.\\\n\\\n_IEEE transactions on pattern analysis and machine intelligence_, 45(4):4713‚Äì4726, 2022.\\\n\\\n- Sahoo et al. (2024)\\\nSubham Sekhar Sahoo, Marianne Arriola, Yair Schiff, Aaron Gokaslan, Edgar Marroquin, Justin T Chiu, Alexander Rush, and Volodymyr Kuleshov.\\\n\\\nSimple and effective masked diffusion language models.\\\n\\\n_arXiv preprint arXiv:2406.07524_, 2024.\\\n\\\n- Shaul et al. (2023)\\\nNeta Shaul, Ricky T. Q. Chen, Maximilian Nickel, Matthew Le, and Yaron Lipman.\\\n\\\nOn kinetic optimal probability paths for generative models.\\\n\\\nIn _International Conference on Machine Learning_, pp.  30883‚Äì30907. PMLR, 2023.\\\n\\\n- Shi et al. (2024)\\\nJiaxin Shi, Kehang Han, Zhe Wang, Arnaud Doucet, and Michalis K Titsias.\\\n\\\nSimplified and generalized masked diffusion for discrete data.\\\n\\\n_arXiv preprint arXiv:2406.04329_, 2024.\\\n\\\n- Singer et al. (2022)\\\nUriel Singer, Adam Polyak, Thomas Hayes, Xi Yin, Jie An, Songyang Zhang, Qiyuan Hu, Harry Yang, Oron Ashual, Oran Gafni, et al.\\\n\\\nMake-a-video: Text-to-video generation without text-video data.\\\n\\\n_arXiv preprint arXiv:2209.14792_, 2022.\\\n\\\n- Sohl-Dickstein et al. (2015)\\\nJascha Sohl-Dickstein, Eric Weiss, Niru Maheswaranathan, and Surya Ganguli.\\\n\\\nDeep unsupervised learning using nonequilibrium thermodynamics.\\\n\\\nIn _International conference on machine learning_, pp.  2256‚Äì2265. PMLR, 2015.\\\n\\\n- Song et al. (2021)\\\nYang Song, Jascha Sohl-Dickstein, Diederik P Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole.\\\n\\\nScore-based generative modeling through stochastic differential equations.\\\n\\\n_International Conference on Learning Representations_, 2021.\\\n\\\n- Su et al. (2024)\\\nJianlin Su, Murtadha Ahmed, Yu Lu, Shengfeng Pan, Wen Bo, and Yunfeng Liu.\\\n\\\nRoformer: Enhanced transformer with rotary position embedding.\\\n\\\n_Neurocomputing_, 568:127063, 2024.\\\n\\\n- Sun et al. (2024)\\\nPeize Sun, Yi Jiang, Shoufa Chen, Shilong Zhang, Bingyue Peng, Ping Luo, and Zehuan Yuan.\\\n\\\nAutoregressive model beats diffusion: Llama for scalable image generation.\\\n\\\n_arXiv preprint arXiv:2406.06525_, 2024.\\\n\\\n- Team (2024)\\\nChameleon Team.\\\n\\\nChameleon: Mixed-modal early-fusion foundation models.\\\n\\\n_arXiv preprint arXiv:2405.09818_, 2024.\\\n\\\n- Touvron et al. (2023)\\\nHugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al.\\\n\\\nLlama 2: Open foundation and fine-tuned chat models.\\\n\\\n_arXiv preprint arXiv:2307.09288_, 2023.\\\n\\\n- Van den Oord et al. (2016)\\\nAaron Van den Oord, Nal Kalchbrenner, Lasse Espeholt, Oriol Vinyals, Alex Graves, et al.\\\n\\\nConditional image generation with pixelcnn decoders.\\\n\\\n_Advances in neural information processing systems_, 29, 2016.\\\n\\\n- Van Den Oord et al. (2017)\\\nAaron Van Den Oord, Oriol Vinyals, et al.\\\n\\\nNeural discrete representation learning.\\\n\\\n_Advances in neural information processing systems_, 30, 2017.\\\n\\\n- Vishnoi (2012)\\\nNisheeth Vishnoi.\\\n\\\nLx=b. laplacian solvers and their algorithmic applications.\\\n\\\n_Foundations and Trends in Theoretical Computer Science_, 8, 01 2012.\\\n\\\ndoi: 10.1561/0400000054.\\\n\\\n- Vyas et al. (2023)\\\nApoorv Vyas, Bowen Shi, Matthew Le, Andros Tjandra, Yi-Chiao Wu, Baishan Guo, Jiemin Zhang, Xinyue Zhang, Robert Adkins, William Ngan, et al.\\\n\\\nAudiobox: Unified audio generation with natural language prompts.\\\n\\\n_arXiv preprint arXiv:2312.15821_, 2023.\\\n\\\n- Ward et al. (2016)\\\nLogan Ward, Ankit Agrawal, Alok Choudhary, and Christopher Wolverton.\\\n\\\nA general-purpose machine learning framework for predicting properties of inorganic materials.\\\n\\\n_npj Computational Materials_, 2(1):1‚Äì7, 2016.\\\n\\\n- Xie et al. (2021)\\\nTian Xie, Xiang Fu, Octavian-Eugen Ganea, Regina Barzilay, and Tommi S Jaakkola.\\\n\\\nCrystal diffusion variational autoencoder for periodic material generation.\\\n\\\nIn _International Conference on Learning Representations_, 2021.\\\n\\\n- Yang (2019)\\\nZhilin Yang.\\\n\\\nXlnet: Generalized autoregressive pretraining for language understanding.\\\n\\\n_arXiv preprint arXiv:1906.08237_, 2019.\\\n\\\n- Zhang et al. (2024)\\\nYizhe Zhang, Jiatao Gu, Zhuofeng Wu, Shuangfei Zhai, Joshua Susskind, and Navdeep Jaitly.\\\n\\\nPlanner: generating diversified paragraph via latent language diffusion model.\\\n\\\n_Advances in Neural Information Processing Systems_, 36, 2024.\\\n\\\n- Zheng et al. (2024)\\\nKaiwen Zheng, Yongxin Chen, Hanzi Mao, Ming-Yu Liu, Jun Zhu, and Qinsheng Zhang.\\\n\\\nMasked diffusion models are secretly time-agnostic masked models and exploit inaccurate categorical sampling.\\\n\\\n_arXiv preprint arXiv:2409.02908_, 2024.\\\n\\\n- Zhou et al. (2024)\\\nChunting Zhou, Lili Yu, Arun Babu, Kushal Tirumala, Michihiro Yasunaga, Leonid Shamis, Jacob Kahn, Xuezhe Ma, Luke Zettlemoyer, and Omer Levy.\\\n\\\nTransfusion: Predict the next token and diffuse images with one multi-modal model.\\\n\\\n_arXiv preprint arXiv:2408.11039_, 2024.\\\n\\\n- Zimmermann & Jain (2020)\\\nNils ER Zimmermann and Anubhav Jain.\\\n\\\nLocal structure order parameters and site fingerprints for quantification of coordination environment and crystal structure similarity.\\\n\\\n_RSC advances_, 10(10):6063‚Äì6081, 2020.\\\n\\\n- Ziv et al. (2024)\\\nAlon Ziv, Itai Gat, Gael Le Lan, Tal Remez, Felix Kreuk, Alexandre Defossez, Jade Copet, Gabriel Synnaeve, and Yossi Adi.\\\n\\\nMasked audio generation using a single non-autoregressive transformer.\\\n\\\nIn _ICLR_, 2024.\\\n\\\n\\\n## Appendix A Always-valid sampling scheme\\\n\\\nThe second step of the sampling scheme defined in Section [3](https://ar5iv.org/html/2412.03487#S3 \"3 Sample generation through the factorized posterior ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") requires the condition h‚â§1\\|ut‚Äã(zi,zi,x1i)\\|‚Ñé1subscriptùë¢ùë°superscriptùëßùëñsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñh\\\\leq\\\\frac{1}{\\\\left\\|u\\_{t}(z^{i},z^{i},x\\_{1}^{i})\\\\right\\|} to be a valid PMF, allowing only small step sizes.\\\nTo avoid this constraint on h‚Ñéh, we use an alternative first-order sampling scheme.\\\nWe replace step 222 from Section [3](https://ar5iv.org/html/2412.03487#S3 \"3 Sample generation through the factorized posterior ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") with\\\n\\\n1. 2)\\\n\\\n\\\nSample Xt+hi‚àºe‚àíh‚ÄãŒª‚Äã(Xti\\|X1i)‚ÄãŒ¥Xti‚Äã(‚ãÖ)+(1‚àíe‚àíh‚ÄãŒª‚Äã(Xti\\|X1i))‚Äãut‚Äã(‚ãÖ,Xti\\|X1i)Œª‚Äã(Xti\\|X1i)‚Äã(1‚àíŒ¥Xti‚Äã(‚ãÖ))similar-tosuperscriptsubscriptùëãùë°‚Ñéùëñsuperscriptùëí‚ÑéùúÜconditionalsuperscriptsubscriptùëãùë°ùëñsuperscriptsubscriptùëã1ùëñsubscriptùõøsubscriptsuperscriptùëãùëñùë°‚ãÖ1superscriptùëí‚ÑéùúÜconditionalsuperscriptsubscriptùëãùë°ùëñsuperscriptsubscriptùëã1ùëñsubscriptùë¢ùë°‚ãÖconditionalsubscriptsuperscriptùëãùëñùë°superscriptsubscriptùëã1ùëñùúÜconditionalsuperscriptsubscriptùëãùë°ùëñsuperscriptsubscriptùëã1ùëñ1subscriptùõøsubscriptsuperscriptùëãùëñùë°‚ãÖX\\_{t+h}^{i}\\\\sim e^{-h\\\\lambda(X\\_{t}^{i}\\|X\\_{1}^{i})}\\\\delta\\_{X^{i}\\_{t}}(\\\\cdot)+(1-e^{-h\\\\lambda(X\\_{t}^{i}\\|X\\_{1}^{i})})\\\\frac{u\\_{t}(\\\\cdot,X^{i}\\_{t}\\|X\\_{1}^{i})}{\\\\lambda(X\\_{t}^{i}\\|X\\_{1}^{i})}(1-\\\\delta\\_{X^{i}\\_{t}}(\\\\cdot)),\\\n\\\n\\\nwhere Œª(Xti\\|X1i)=\\|ut(Xti,Xti\\|X1i)\\|\\\\lambda(X\\_{t}^{i}\\|X\\_{1}^{i})=\\\\left\\|u\\_{t}(X^{i}\\_{t},X^{i}\\_{t}\\|X\\_{1}^{i})\\\\right\\|.\\\n\\\nInterpreting this expression, e‚àíh‚ÄãŒª‚Äã(Xti\\|X1i)superscriptùëí‚ÑéùúÜconditionalsuperscriptsubscriptùëãùë°ùëñsuperscriptsubscriptùëã1ùëñe^{-h\\\\lambda(X\\_{t}^{i}\\|X\\_{1}^{i})} is the probability the state does not change. If we do not change state, then we sample from Œ¥Xti‚Äã(‚ãÖ)subscriptùõøsubscriptsuperscriptùëãùëñùë°‚ãÖ\\\\delta\\_{X^{i}\\_{t}}(\\\\cdot). If we do change state, then we sample from ut‚Äã(‚ãÖ,Xti\\|X1i)Œª‚Äã(Xti\\|X1i)‚Äã(1‚àíŒ¥Xti‚Äã(‚ãÖ))subscriptùë¢ùë°‚ãÖconditionalsubscriptsuperscriptùëãùëñùë°superscriptsubscriptùëã1ùëñùúÜconditionalsuperscriptsubscriptùëãùë°ùëñsuperscriptsubscriptùëã1ùëñ1subscriptùõøsubscriptsuperscriptùëãùëñùë°‚ãÖ\\\\frac{u\\_{t}(\\\\cdot,X^{i}\\_{t}\\|X\\_{1}^{i})}{\\\\lambda(X\\_{t}^{i}\\|X\\_{1}^{i})}(1-\\\\delta\\_{X^{i}\\_{t}}(\\\\cdot)), which is a normalized distribution over all states not equal to Xtisuperscriptsubscriptùëãùë°ùëñX\\_{t}^{i}.\\\n\\\nThis is still a first-order sampling scheme, i.e. it is o‚Äã(h)ùëú‚Ñéo(h) error from ‚Ñô‚Äã(Xt+hi\\|Xti)‚Ñôconditionalsuperscriptsubscriptùëãùë°‚Ñéùëñsuperscriptsubscriptùëãùë°ùëñ\\\\mathbb{P}(X\\_{t+h}^{i}\\ \\|\\ X\\_{t}^{i}).\\\nHowever, unlike the simple Euler procedure, this alternative is always a valid PMF for any step size h‚Ñéh.\\\n\\\nAlgorithm 1 Euler Solver\\\n\\\n0:   model Œ∏ùúÉ\\\\theta, x0subscriptùë•0x\\_{0}, h‚Ñéh\\\n\\\nt‚Üê0‚Üêùë°0t\\\\leftarrow 0\\\n\\\nXt‚Üêx0‚Üêsubscriptùëãùë°subscriptùë•0X\\_{t}\\\\leftarrow x\\_{0}\\\n\\\nwhilet<1ùë°1t<1do\\\n\\\nfor i=0,‚Ä¶,D { in parallel} do\\\n\\\nX1i‚àºp1\\|tŒ∏,i(‚ãÖ\\|Xt)X\\_{1}^{i}\\\\sim p^{\\\\theta,i}\\_{1\\|t}(\\\\cdot\\|X\\_{t})\\\n\\\nŒªi‚Üê\\|uti(Xti,Xti\\|X1i)\\|\\\\lambda^{i}\\\\leftarrow\\\\left\\|u^{i}\\_{t}(X\\_{t}^{i},X\\_{t}^{i}\\|X\\_{1}^{i})\\\\right\\|\\\n\\\nZjumpi‚àºU‚Äã\\[0,1\\]similar-tosubscriptsuperscriptùëçùëñjumpùëà01Z^{i}\\_{\\\\text{jump}}\\\\sim U\\[0,1\\]\\\n\\\nifZjumpi‚â§1‚àíe‚àíh‚ÄãŒªisubscriptsuperscriptùëçùëñjump1superscriptùëí‚ÑésuperscriptùúÜùëñZ^{i}\\_{\\\\text{jump}}\\\\leq 1-e^{-h\\\\lambda^{i}}then\\\n\\\nXti‚àºuti‚Äã(‚ãÖ,Xti\\|X1i)Œªi‚Äã(1‚àíŒ¥Xti‚Äã(‚ãÖ))similar-tosuperscriptsubscriptùëãùë°ùëñsubscriptsuperscriptùë¢ùëñùë°‚ãÖconditionalsuperscriptsubscriptùëãùë°ùëñsuperscriptsubscriptùëã1ùëñsuperscriptùúÜùëñ1subscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖX\\_{t}^{i}\\\\sim\\\\frac{u^{i}\\_{t}(\\\\cdot,X\\_{t}^{i}\\|X\\_{1}^{i})}{\\\\lambda^{i}}\\\\left(1-\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)\\\\right)\\\n\\\nendif\\\n\\\nendfor\\\n\\\nt‚Üêt+h‚Üêùë°ùë°‚Ñét\\\\leftarrow t+h\\\n\\\nendwhile\\\n\\\nreturnXtsubscriptùëãùë°X\\_{t}\\\n\\\n## Appendix B Symmetrized Kinetic Optimization problem\\\n\\\n###### Proposition B.1(Kinetic-optimal relaxation).\\\n\\\nConsider pt>0subscriptùëùùë°0p\\_{t}>0 and assume pt‚Äã(z)wt‚Äã(x,z)=pt‚Äã(x)wt‚Äã(z,x)subscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùë•subscriptùë§ùë°ùëßùë•\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}=\\\\frac{p\\_{t}(x)}{w\\_{t}(z,x)}. Let ftsubscriptùëìùë°f\\_{t} be a solution to equation [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), which is unique up to a constant. Then, jt‚ãÜsubscriptsuperscriptùëó‚ãÜùë°j^{\\\\star}\\_{t} in equation [22](https://ar5iv.org/html/2412.03487#S4.E22 \"Equation 22 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is the unique solution to the Kinetic Optimality problem in equation [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n###### Proof.\\\n\\\nEquation [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is a linear system of equations with \\|ùíØ\\|ùíØ\\|{\\\\mathcal{T}}\\| equations and \\|ùíØ\\|ùíØ\\|{\\\\mathcal{T}}\\| variables, that has the form of a _discrete Poisson equation_ (i.e., the discrete analog to Œî‚Äãft=pÀôtŒîsubscriptùëìùë°subscriptÀôùëùùë°\\\\Delta f\\_{t}=\\\\dot{p}\\_{t}).\\\n\\\nAs œÅt‚Äã(x,z)‚âúpt‚Äã(z)wt‚Äã(x,z)>0‚âúsubscriptùúåùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëß0\\\\rho\\_{t}(x,z)\\\\triangleq\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}>0 there exists a unique solution to this system up to a constant. Indeed, the quadratic form associated with the linear part of equation [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | 12‚Äã‚àëx,yœÅt‚Äã(x,y)‚Äã\\[ft‚Äã(x)‚àíft‚Äã(y)\\]2.12subscriptùë•ùë¶subscriptùúåùë°ùë•ùë¶superscriptdelimited-\\[\\]subscriptùëìùë°ùë•subscriptùëìùë°ùë¶2\\\\frac{1}{2}\\\\sum\\_{x,y}\\\\rho\\_{t}(x,y)\\\\left\\[f\\_{t}(x)-f\\_{t}(y)\\\\right\\]^{2}. |  | (39) |\\\n\\\nAnd since œÅt‚Äã(x,y)>0subscriptùúåùë°ùë•ùë¶0\\\\rho\\_{t}(x,y)>0 the only function in the kernel is constant. Let ŒªtsubscriptùúÜùë°\\\\lambda\\_{t} be a particular solution to equation [21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and define\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  | jt‚Äã(x,y)subscriptùëóùë°ùë•ùë¶\\\\displaystyle j\\_{t}(x,y) | =œÅt‚Äã(x,z)‚Äã\\[Œªt‚Äã(x)‚àíŒªt‚Äã(y)\\]+absentsubscriptùúåùë°ùë•ùëßsubscriptdelimited-\\[\\]subscriptùúÜùë°ùë•subscriptùúÜùë°ùë¶\\\\displaystyle=\\\\rho\\_{t}(x,z)\\\\left\\[\\\\lambda\\_{t}(x)-\\\\lambda\\_{t}(y)\\\\right\\]\\_{+} | ‚àÄx‚â†yfor-allùë•ùë¶\\\\displaystyle\\\\forall x\\\\neq y |  | (40) |\\\n|  | Œºt‚Äã(x,y)subscriptùúáùë°ùë•ùë¶\\\\displaystyle\\\\mu\\_{t}(x,y) | ={0 if ‚Äãjt‚Äã(x,y)>0Œªt‚Äã(y)‚àíŒªt‚Äã(x) if ‚Äãjt‚Äã(x,y)=0absentcases0 if subscriptùëóùë°ùë•ùë¶0subscriptùúÜùë°ùë¶subscriptùúÜùë°ùë• if subscriptùëóùë°ùë•ùë¶0\\\\displaystyle=\\\\begin{cases}0&\\\\text{ if }j\\_{t}(x,y)>0\\\\\\<br>\\\\lambda\\_{t}(y)-\\\\lambda\\_{t}(x)&\\\\text{ if }j\\_{t}(x,y)=0\\\\end{cases} | ‚àÄx‚â†yfor-allùë•ùë¶\\\\displaystyle\\\\forall x\\\\neq y |  | (41) |\\\n\\\nNow consider the optimization problem in equation [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). Since œÅt‚Äã(x,z)>0subscriptùúåùë°ùë•ùëß0\\\\rho\\_{t}(x,z)>0 it is strictly convex and therefore has at most a single solution. Furthermore, if the constraint set is non-empty then the KKT conditions are necessary and sufficient for a solution. Note that jtsubscriptùëóùë°j\\_{t} defined in equation [40](https://ar5iv.org/html/2412.03487#A2.E40 \"Equation 40 ‚Ä£ Proof. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") satisfies the constraints in equation [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). Indeed, it is clearly non-negative, and\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | divx‚Äãjtsubscriptdivùë•subscriptùëóùë°\\\\displaystyle\\\\mathrm{div}\\_{x}j\\_{t} | =‚àëz‚â†xjt‚Äã(z,x)‚àí‚àëz‚â†xjt‚Äã(x,z)absentsubscriptùëßùë•subscriptùëóùë°ùëßùë•subscriptùëßùë•subscriptùëóùë°ùë•ùëß\\\\displaystyle=\\\\sum\\_{z\\\\neq x}j\\_{t}(z,x)-\\\\sum\\_{z\\\\neq x}j\\_{t}(x,z) |  | (42) |\\\n|  |  | =‚àëz‚â†xœÅt‚Äã(x,z)‚Äã\\[Œªt‚Äã(z)‚àíŒªt‚Äã(x)\\]+‚àíœÅt‚Äã(x,z)‚Äã\\[Œªt‚Äã(x)‚àíŒªt‚Äã(z)\\]+absentsubscriptùëßùë•subscriptùúåùë°ùë•ùëßsubscriptdelimited-\\[\\]subscriptùúÜùë°ùëßsubscriptùúÜùë°ùë•subscriptùúåùë°ùë•ùëßsubscriptdelimited-\\[\\]subscriptùúÜùë°ùë•subscriptùúÜùë°ùëß\\\\displaystyle=\\\\sum\\_{z\\\\neq x}\\\\rho\\_{t}(x,z)\\\\left\\[\\\\lambda\\_{t}(z)-\\\\lambda\\_{t}(x)\\\\right\\]\\_{+}-\\\\rho\\_{t}(x,z)\\\\left\\[\\\\lambda\\_{t}(x)-\\\\lambda\\_{t}(z)\\\\right\\]\\_{+} |  | (43) |\\\n|  |  | =‚àëz‚â†xœÅt‚Äã(x,z)‚Äã\\[Œªt‚Äã(z)‚àíŒªt‚Äã(x)\\]absentsubscriptùëßùë•subscriptùúåùë°ùë•ùëßdelimited-\\[\\]subscriptùúÜùë°ùëßsubscriptùúÜùë°ùë•\\\\displaystyle=\\\\sum\\_{z\\\\neq x}\\\\rho\\_{t}(x,z)\\\\left\\[\\\\lambda\\_{t}(z)-\\\\lambda\\_{t}(x)\\\\right\\] |  | (44) |\\\n|  |  | =([21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))‚àípÀôt‚Äã(x)[21](https://ar5iv.org/html/2412.03487#S4.E21 \"Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")subscriptÀôùëùùë°ùë•\\\\displaystyle\\\\overset{(\\\\ref{e:relaxation\\_lambda})}{=}-\\\\dot{p}\\_{t}(x) |  | (45) |\\\n\\\nTherefore the optimization problem in equation [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is feasible. This in particular means that the KKT conditions are both necessary and sufficient. For each t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] we denote the dual variables Œªt:\\[d\\]‚Üí‚Ñù:subscriptùúÜùë°‚Üídelimited-\\[\\]ùëë‚Ñù\\\\lambda\\_{t}:\\[d\\]\\\\rightarrow\\\\mathbb{R} and Œºt:\\[d\\]√ó\\[d\\]‚Üí‚Ñù:subscriptùúáùë°‚Üídelimited-\\[\\]ùëëdelimited-\\[\\]ùëë‚Ñù\\\\mu\\_{t}:\\[d\\]\\\\times\\[d\\]\\\\rightarrow\\\\mathbb{R}, and the KKT equations take the form:\\\n\\\n|     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- |\\\n|  |\\\n|  | jt‚Äã(x,y)œÅt‚Äã(x,y)+Œªt‚Äã(y)‚àíŒªt‚Äã(x)subscriptùëóùë°ùë•ùë¶subscriptùúåùë°ùë•ùë¶subscriptùúÜùë°ùë¶subscriptùúÜùë°ùë•\\\\displaystyle\\\\frac{j\\_{t}(x,y)}{\\\\rho\\_{t}(x,y)}+\\\\lambda\\_{t}(y)-\\\\lambda\\_{t}(x) | =Œºt‚Äã(x,y)absentsubscriptùúáùë°ùë•ùë¶\\\\displaystyle=\\\\mu\\_{t}(x,y) | ‚àÄx‚â†yfor-allùë•ùë¶\\\\displaystyle\\\\forall x\\\\neq y | ‚ñ∂stationary‚ñ∂absentstationary\\\\displaystyle\\\\quad\\\\blacktriangleright\\\\text{stationary} |  | (46a) |\\\n|  | ‚àëy\\[jt‚Äã(y,x)‚àíjt‚Äã(x,y)\\]subscriptùë¶delimited-\\[\\]subscriptùëóùë°ùë¶ùë•subscriptùëóùë°ùë•ùë¶\\\\displaystyle\\\\sum\\_{y}\\\\left\\[j\\_{t}(y,x)-j\\_{t}(x,y)\\\\right\\] | =‚àípÀôt‚Äã(x)absentsubscriptÀôùëùùë°ùë•\\\\displaystyle=-\\\\dot{p}\\_{t}(x) | ‚àÄxfor-allùë•\\\\displaystyle\\\\forall x | ‚ñ∂primal feasibility‚ñ∂absentprimal feasibility\\\\displaystyle\\\\quad\\\\blacktriangleright\\\\text{primal feasibility} |  | (46b) |\\\n|  | jt‚Äã(x,y)subscriptùëóùë°ùë•ùë¶\\\\displaystyle j\\_{t}(x,y) | ‚â•0absent0\\\\displaystyle\\\\geq 0 | ‚àÄx‚â†yfor-allùë•ùë¶\\\\displaystyle\\\\forall x\\\\neq y | ‚ñ∂primal feasibility‚ñ∂absentprimal feasibility\\\\displaystyle\\\\quad\\\\blacktriangleright\\\\text{primal feasibility} |  | (46c) |\\\n|  | Œºt‚Äã(x,y)subscriptùúáùë°ùë•ùë¶\\\\displaystyle\\\\mu\\_{t}(x,y) | ‚â•0absent0\\\\displaystyle\\\\geq 0 | ‚àÄx‚â†yfor-allùë•ùë¶\\\\displaystyle\\\\forall x\\\\neq y | ‚ñ∂dual feasibility‚ñ∂absentdual feasibility\\\\displaystyle\\\\quad\\\\blacktriangleright\\\\text{dual feasibility} |  | (46d) |\\\n|  | Œºt‚Äã(x,y)‚Äãjt‚Äã(x,y)subscriptùúáùë°ùë•ùë¶subscriptùëóùë°ùë•ùë¶\\\\displaystyle\\\\mu\\_{t}(x,y)j\\_{t}(x,y) | =0absent0\\\\displaystyle=0 | ‚àÄx‚â†yfor-allùë•ùë¶\\\\displaystyle\\\\forall x\\\\neq y | ‚ñ∂complementary slackness‚ñ∂absentcomplementary slackness\\\\displaystyle\\\\quad\\\\blacktriangleright\\\\text{complementary slackness} |  | (46e) |\\\n\\\nNow one can verify that jtsubscriptùëóùë°j\\_{t} and Œºtsubscriptùúáùë°\\\\mu\\_{t} defined in equation [40](https://ar5iv.org/html/2412.03487#A2.E40 \"Equation 40 ‚Ä£ Proof. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and equation [41](https://ar5iv.org/html/2412.03487#A2.E41 \"Equation 41 ‚Ä£ Proof. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") (respectively) solve the KKT. The primal feasibility is already checked above. Let us check the stationary condition:\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | jt‚Äã(x,y)œÅt‚Äã(x,y)+Œªt‚Äã(y)‚àíŒªt‚Äã(x)subscriptùëóùë°ùë•ùë¶subscriptùúåùë°ùë•ùë¶subscriptùúÜùë°ùë¶subscriptùúÜùë°ùë•\\\\displaystyle\\\\frac{j\\_{t}(x,y)}{\\\\rho\\_{t}(x,y)}+\\\\lambda\\_{t}(y)-\\\\lambda\\_{t}(x) | ={0Œªt‚Äã(x)‚àíŒªt‚Äã(y)>0Œªt‚Äã(y)‚àíŒªt‚Äã(x)Œªt‚Äã(x)‚àíŒªt‚Äã(y)‚â§0absentcases0subscriptùúÜùë°ùë•subscriptùúÜùë°ùë¶0subscriptùúÜùë°ùë¶subscriptùúÜùë°ùë•subscriptùúÜùë°ùë•subscriptùúÜùë°ùë¶0\\\\displaystyle=\\\\begin{cases}0&\\\\lambda\\_{t}(x)-\\\\lambda\\_{t}(y)>0\\\\\\<br>\\\\lambda\\_{t}(y)-\\\\lambda\\_{t}(x)&\\\\lambda\\_{t}(x)-\\\\lambda\\_{t}(y)\\\\leq 0\\\\end{cases} |  | (47) |\\\n|  |  | ={0jt‚Äã(x,y)>0Œªt‚Äã(y)‚àíŒªt‚Äã(x)jt‚Äã(x,y)=0absentcases0subscriptùëóùë°ùë•ùë¶0subscriptùúÜùë°ùë¶subscriptùúÜùë°ùë•subscriptùëóùë°ùë•ùë¶0\\\\displaystyle=\\\\begin{cases}0&j\\_{t}(x,y)>0\\\\\\<br>\\\\lambda\\_{t}(y)-\\\\lambda\\_{t}(x)&j\\_{t}(x,y)=0\\\\end{cases} |  | (48) |\\\n|  |  | =([41](https://ar5iv.org/html/2412.03487#A2.E41 \"Equation 41 ‚Ä£ Proof. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))‚ÄãŒºt‚Äã(x,y)[41](https://ar5iv.org/html/2412.03487#A2.E41 \"Equation 41 ‚Ä£ Proof. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")subscriptùúáùë°ùë•ùë¶\\\\displaystyle\\\\overset{(\\\\ref{ea:mu\\_in\\_proof})}{=}\\\\mu\\_{t}(x,y) |  | (49) |\\\n\\\nLastly, dual feasibility and complementary slackness hold by definition in equations [40](https://ar5iv.org/html/2412.03487#A2.E40 \"Equation 40 ‚Ä£ Proof. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and [41](https://ar5iv.org/html/2412.03487#A2.E41 \"Equation 41 ‚Ä£ Proof. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n‚àé\\\n\\\n###### Proposition B.2(Kinetic Optimal paths.).\\\n\\\nFor pt>0subscriptùëùùë°0p\\_{t}>0 and the choice of wt‚Äã(x,z)=1pt‚Äã(x)subscriptùë§ùë°ùë•ùëß1subscriptùëùùë°ùë•w\\_{t}(x,z)=\\\\frac{1}{p\\_{t}(x)}, the solution to the Kinetic Optimality problem in equation [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is equivalent to problem [30](https://ar5iv.org/html/2412.03487#S4.E30 \"Equation 30 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n###### Proof.\\\n\\\nAccording to equation [22](https://ar5iv.org/html/2412.03487#S4.E22 \"Equation 22 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") the optimal flux in this case takes the form jt‚àó‚Äã(x,z)=pt‚Äã(x)‚Äãpt‚Äã(x)‚Äã\\[pÀôt‚Äã(x)pt‚Äã(x)‚àípÀôt‚Äã(z)pt‚Äã(z)\\]+superscriptsubscriptùëóùë°ùë•ùëßsubscriptùëùùë°ùë•subscriptùëùùë°ùë•subscriptdelimited-\\[\\]subscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•subscriptÀôùëùùë°ùëßsubscriptùëùùë°ùëßj\\_{t}^{\\*}(x,z)=p\\_{t}(x)p\\_{t}(x)\\\\left\\[\\\\frac{\\\\dot{p}\\_{t}(x)}{p\\_{t}(x)}-\\\\frac{\\\\dot{p}\\_{t}(z)}{p\\_{t}(z)}\\\\right\\]\\_{+}. Plugging this in problem [19](https://ar5iv.org/html/2412.03487#S4.E19 \"Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") we get the energy\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àëx,zpt‚Äã(x)‚Äãpt‚Äã(z)‚Äã(pÀôt‚Äã(x)pt‚Äã(x)‚àípÀôt‚Äã(z)pt‚Äã(z))+2subscriptùë•ùëßsubscriptùëùùë°ùë•subscriptùëùùë°ùëßsuperscriptsubscriptsubscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•subscriptÀôùëùùë°ùëßsubscriptùëùùë°ùëß2\\\\displaystyle\\\\sum\\_{x,z}p\\_{t}(x)p\\_{t}(z)\\\\left(\\\\frac{\\\\dot{p}\\_{t}(x)}{p\\_{t}(x)}-\\\\frac{\\\\dot{p}\\_{t}(z)}{p\\_{t}(z)}\\\\right)\\_{+}^{2} | =12‚Äã‚àëx,zpt‚Äã(x)‚Äãpt‚Äã(z)‚Äã(pÀôt‚Äã(x)pt‚Äã(x)‚àípÀôt‚Äã(z)pt‚Äã(z))2absent12subscriptùë•ùëßsubscriptùëùùë°ùë•subscriptùëùùë°ùëßsuperscriptsubscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•subscriptÀôùëùùë°ùëßsubscriptùëùùë°ùëß2\\\\displaystyle=\\\\frac{1}{2}\\\\sum\\_{x,z}p\\_{t}(x)p\\_{t}(z)\\\\left(\\\\frac{\\\\dot{p}\\_{t}(x)}{p\\_{t}(x)}-\\\\frac{\\\\dot{p}\\_{t}(z)}{p\\_{t}(z)}\\\\right)^{2} |  |\\\n|  |  | =‚àëxpt‚Äã(x)‚Äã(pÀôt‚Äã(x)pt‚Äã(x))2‚àí(‚àëxpt‚Äã(x)‚ÄãpÀôt‚Äã(x)pt‚Äã(x))2absentsubscriptùë•subscriptùëùùë°ùë•superscriptsubscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•2superscriptsubscriptùë•subscriptùëùùë°ùë•subscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•2\\\\displaystyle=\\\\sum\\_{x}p\\_{t}(x)\\\\left(\\\\frac{\\\\dot{p}\\_{t}(x)}{p\\_{t}(x)}\\\\right)^{2}-\\\\left(\\\\sum\\_{x}p\\_{t}(x)\\\\frac{\\\\dot{p}\\_{t}(x)}{p\\_{t}(x)}\\\\right)^{2} |  |\\\n|  |  | =‚àëx(pÀôt‚Äã(x)pt‚Äã(x))2absentsubscriptùë•superscriptsubscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•2\\\\displaystyle=\\\\sum\\_{x}\\\\left(\\\\frac{\\\\dot{p}\\_{t}(x)}{\\\\sqrt{p\\_{t}(x)}}\\\\right)^{2} |  |\\\n|  |  | =2‚Äã‚àëx(dd‚Äãt‚Äãpt‚Äã(x))2absent2subscriptùë•superscriptùëëùëëùë°subscriptùëùùë°ùë•2\\\\displaystyle=2\\\\sum\\_{x}\\\\left(\\\\frac{d}{dt}\\\\sqrt{p}\\_{t}(x)\\\\right)^{2} |  |\\\n\\\nwhere in the previous to last equality we used the fact that ‚àëxpÀôt‚Äã(x)=dd‚Äãt‚Äã‚àëxpt‚Äã(x)=0subscriptùë•subscriptÀôùëùùë°ùë•ùëëùëëùë°subscriptùë•subscriptùëùùë°ùë•0\\\\sum\\_{x}\\\\dot{p}\\_{t}(x)=\\\\frac{d}{dt}\\\\sum\\_{x}p\\_{t}(x)=0. We are left with the following optimization problem:\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  |\\\n|  | minptsubscriptsubscriptùëùùë°\\\\textstyle\\\\min\\_{p\\_{t}} | ‚à´01‚àëx(dd‚Äãt‚Äãpt‚Äã(x))2superscriptsubscript01subscriptùë•superscriptùëëùëëùë°subscriptùëùùë°ùë•2\\\\textstyle\\\\quad\\\\int\\_{0}^{1}\\\\sum\\_{x}\\\\left(\\\\frac{d}{dt}\\\\sqrt{p}\\_{t}(x)\\\\right)^{2} |  | (50a) |\\\n|  |  | pt‚Äã(x)>0subscriptùëùùë°ùë•0\\\\textstyle\\\\quad p\\_{t}(x)>0 |  | (50b) |\\\n|  |  | ‚àëxpt‚Äã(x)=1subscriptùë•subscriptùëùùë°ùë•1\\\\textstyle\\\\quad\\\\sum\\_{x}p\\_{t}(x)=1 |  | (50c) |\\\n|  |  | p0=p,p1=qformulae-sequencesubscriptùëù0ùëùsubscriptùëù1ùëû\\\\textstyle\\\\quad p\\_{0}=p,\\\\quad p\\_{1}=q |  | (50d) |\\\n\\\nMaking the change of variables at‚Äã(x)=pt‚Äã(x)subscriptùëéùë°ùë•subscriptùëùùë°ùë•a\\_{t}(x)=\\\\sqrt{p\\_{t}(x)}, we get the form in equation [30](https://ar5iv.org/html/2412.03487#S4.E30 \"Equation 30 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), as desired.\\\n‚àé\\\n\\\n#### The case of q=Œ¥x1ùëûsubscriptùõøsubscriptùë•1q=\\\\delta\\_{x\\_{1}}.\\\n\\\nGiven that q=Œ¥x1ùëûsubscriptùõøsubscriptùë•1q=\\\\delta\\_{x\\_{1}} we get that the Kinetic Optimal solution equation [32](https://ar5iv.org/html/2412.03487#S4.E32 \"Equation 32 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") takes a form of a mixture path (equation [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with the scheduler specified in equation [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). Specifically we show that the probability path is\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | pt‚Äã(x\\|x1)subscriptùëùùë°conditionalùë•subscriptùë•1\\\\displaystyle p\\_{t}(x\\|x\\_{1}) | =at2‚Äã(x)=sin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©‚Äãp‚Äã(x)+(1‚àísin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©)‚ÄãŒ¥x1‚Äã(x),absentsubscriptsuperscriptùëé2ùë°ùë•superscript21ùë°Œ©superscript2Œ©ùëùùë•1superscript21ùë°Œ©superscript2Œ©subscriptùõøsubscriptùë•1ùë•\\\\displaystyle=a^{2}\\_{t}(x)=\\\\frac{\\\\sin^{2}{(1-t)\\\\Omega}}{\\\\sin^{2}\\\\Omega}p(x)+\\\\left(1-\\\\frac{\\\\sin^{2}{(1-t)\\\\Omega}}{\\\\sin^{2}\\\\Omega}\\\\right)\\\\delta\\_{x\\_{1}}(x), |  | (51) |\\\n\\\nand the velocity is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x,z\\|x1)=2‚ÄãŒ©tan‚Å°(1‚àít)‚ÄãŒ©‚Äã(Œ¥x1‚Äã(x)‚àíŒ¥z‚Äã(x)).subscriptùë¢ùë°ùë•conditionalùëßsubscriptùë•12Œ©1ùë°Œ©subscriptùõøsubscriptùë•1ùë•subscriptùõøùëßùë•u\\_{t}(x,z\\|x\\_{1})=\\\\frac{2\\\\Omega}{\\\\tan{(1-t)\\\\Omega}}\\\\left(\\\\delta\\_{x\\_{1}}(x)-\\\\delta\\_{z}(x)\\\\right). |  | (52) |\\\n\\\nWe start by substituting the q‚â°Œ¥x1ùëûsubscriptùõøsubscriptùë•1q\\\\equiv\\\\delta\\_{x\\_{1}} in equation [31](https://ar5iv.org/html/2412.03487#S4.E31 \"Equation 31 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | at‚Äã(x)=sin‚Å°(1‚àít)‚ÄãŒ©sin‚Å°Œ©‚Äãp‚Äã(x)+sin‚Å°t‚ÄãŒ©sin‚Å°Œ©‚ÄãŒ¥x1‚Äã(x).subscriptùëéùë°ùë•1ùë°Œ©Œ©ùëùùë•ùë°Œ©Œ©subscriptùõøsubscriptùë•1ùë•\\\\displaystyle a\\_{t}(x)=\\\\frac{\\\\sin(1-t)\\\\Omega}{\\\\sin\\\\Omega}\\\\sqrt{p(x)}+\\\\frac{\\\\sin t\\\\Omega}{\\\\sin\\\\Omega}\\\\delta\\_{x\\_{1}}(x). |  | (53) |\\\n\\\nHence the probability path is\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | pt‚Äã(x\\|x1)subscriptùëùùë°conditionalùë•subscriptùë•1\\\\displaystyle p\\_{t}(x\\|x\\_{1}) | =(sin‚Å°(1‚àít)‚ÄãŒ©sin‚Å°Œ©‚Äãp‚Äã(x)+sin‚Å°t‚ÄãŒ©sin‚Å°Œ©‚ÄãŒ¥x1‚Äã(x))2absentsuperscript1ùë°Œ©Œ©ùëùùë•ùë°Œ©Œ©subscriptùõøsubscriptùë•1ùë•2\\\\displaystyle=\\\\left(\\\\frac{\\\\sin(1-t)\\\\Omega}{\\\\sin\\\\Omega}\\\\sqrt{p(x)}+\\\\frac{\\\\sin t\\\\Omega}{\\\\sin\\\\Omega}\\\\delta\\_{x\\_{1}}(x)\\\\right)^{2} |  | (54) |\\\n|  |  | =sin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©‚Äãp‚Äã(x)+(2‚Äãp‚Äã(x1)‚Äãsin‚Å°(1‚àít)‚ÄãŒ©‚Äãsin‚Å°t‚ÄãŒ©sin2‚Å°Œ©+sin2‚Å°t‚ÄãŒ©sin2‚Å°Œ©)‚ÄãŒ¥x1‚Äã(x)absentsuperscript21ùë°Œ©superscript2Œ©ùëùùë•2ùëùsubscriptùë•11ùë°Œ©ùë°Œ©superscript2Œ©superscript2ùë°Œ©superscript2Œ©subscriptùõøsubscriptùë•1ùë•\\\\displaystyle=\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}p(x)+\\\\left(\\\\frac{2\\\\sqrt{p(x\\_{1})}\\\\sin(1-t)\\\\Omega\\\\sin t\\\\Omega}{\\\\sin^{2}\\\\Omega}+\\\\frac{\\\\sin^{2}t\\\\Omega}{\\\\sin^{2}\\\\Omega}\\\\right)\\\\delta\\_{x\\_{1}}(x) |  | (55) |\\\n|  |  | =sin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©‚Äãp‚Äã(x)+(2‚Äãcos‚Å°Œ©‚Äãsin‚Å°(1‚àít)‚ÄãŒ©‚Äãsin‚Å°t‚ÄãŒ©sin2‚Å°Œ©+sin2‚Å°(Œ©‚àí(1‚àít)‚ÄãŒ©)sin2‚Å°Œ©)‚ÄãŒ¥x1‚Äã(x)absentsuperscript21ùë°Œ©superscript2Œ©ùëùùë•2Œ©1ùë°Œ©ùë°Œ©superscript2Œ©superscript2Œ©1ùë°Œ©superscript2Œ©subscriptùõøsubscriptùë•1ùë•\\\\displaystyle=\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}p(x)+\\\\left(\\\\frac{2\\\\cos\\\\Omega\\\\sin(1-t)\\\\Omega\\\\sin t\\\\Omega}{\\\\sin^{2}\\\\Omega}+\\\\frac{\\\\sin^{2}\\\\left(\\\\Omega-(1-t)\\\\Omega\\\\right)}{\\\\sin^{2}\\\\Omega}\\\\right)\\\\delta\\_{x\\_{1}}(x) |  | (56) |\\\n|  |  | =sin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©p(x)+(2‚Äãcos‚Å°Œ©‚Äãsin‚Å°(1‚àít)‚ÄãŒ©‚Äãsin‚Å°(Œ©‚àí(1‚àít)‚ÄãŒ©)sin2‚Å°Œ©\\\\displaystyle=\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}p(x)+\\\\biggr{(}\\\\frac{2\\\\cos\\\\Omega\\\\sin(1-t)\\\\Omega\\\\sin\\\\left(\\\\Omega-(1-t)\\\\Omega\\\\right)}{\\\\sin^{2}\\\\Omega} |  | (57) |\\\n|  |  | +(sin‚Å°Œ©‚Äãcos‚Å°(1‚àít)‚ÄãŒ©‚àícos‚Å°Œ©‚Äãsin‚Å°(1‚àít)‚ÄãŒ©)2sin2‚Å°Œ©)Œ¥x1(x)\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad+\\\\frac{\\\\left(\\\\sin\\\\Omega\\\\cos(1-t)\\\\Omega-\\\\cos\\\\Omega\\\\sin(1-t)\\\\Omega\\\\right)^{2}}{\\\\sin^{2}\\\\Omega}\\\\biggr{)}\\\\delta\\_{x\\_{1}}(x) |  | (58) |\\\n|  |  | =sin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©p(x)+(‚àícos2‚Å°Œ©‚Äãsin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©+sin2‚Å°Œ©‚Äãcos2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©)Œ¥x1(x)\\\\displaystyle=\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}p(x)+\\\\biggr{(}\\\\frac{-\\\\cos^{2}\\\\Omega\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}+\\\\frac{\\\\sin^{2}\\\\Omega\\\\cos^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}\\\\biggr{)}\\\\delta\\_{x\\_{1}}(x) |  | (59) |\\\n|  |  | =sin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©p(x)+(‚àí(1‚àísin2‚Å°Œ©)‚Äãsin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©\\\\displaystyle=\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}p(x)+\\\\biggr{(}\\\\frac{-(1-\\\\sin^{2}\\\\Omega)\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega} |  | (60) |\\\n|  |  | +sin2‚Å°Œ©‚Äã(1‚àísin2‚Å°(1‚àít)‚ÄãŒ©)sin2‚Å°Œ©)Œ¥x1(x)\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad+\\\\frac{\\\\sin^{2}\\\\Omega(1-\\\\sin^{2}(1-t)\\\\Omega)}{\\\\sin^{2}\\\\Omega}\\\\biggr{)}\\\\delta\\_{x\\_{1}}(x) |  | (61) |\\\n|  |  | =sin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©p(x)+(1‚àísin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©)Œ¥x1(x),\\\\displaystyle=\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}p(x)+\\\\biggr{(}1-\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega}\\\\biggr{)}\\\\delta\\_{x\\_{1}}(x), |  | (62) |\\\n\\\nwhere in the third equality we used Œ©=arccos‚Å°p‚Äã(x1)Œ©ùëùsubscriptùë•1\\\\Omega=\\\\arccos\\\\sqrt{p(x\\_{1})}. Substituting\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∫t‚Äã(x1)=1‚àísin2‚Å°(1‚àít)‚ÄãŒ©sin2‚Å°Œ©subscriptùúÖùë°subscriptùë•11superscript21ùë°Œ©superscript2Œ©\\\\kappa\\_{t}(x\\_{1})=1-\\\\frac{\\\\sin^{2}(1-t)\\\\Omega}{\\\\sin^{2}\\\\Omega} |  | (63) |\\\n\\\nin equation [72](https://ar5iv.org/html/2412.03487#A3.E72 \"Equation 72 ‚Ä£ Arbitrary mixture paths using (26): ‚Ä£ C.1 Kinetic optimal velocities for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") yields the desired velocity as in equation [52](https://ar5iv.org/html/2412.03487#A2.E52 \"Equation 52 ‚Ä£ The case of ùëû=ùõø_ùë•‚ÇÅ. ‚Ä£ Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n## Appendix C Closed-form kinetic optimal velocities\\\n\\\n### C.1 Kinetic optimal velocities for mixture paths\\\n\\\nWe examine the velocities from the kinetic optimal fluxes given in ( [24](https://ar5iv.org/html/2412.03487#S4.E24 \"Equation 24 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) under mixture paths ( [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")). We show ( [24](https://ar5iv.org/html/2412.03487#S4.E24 \"Equation 24 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) produce the same velocity for the uniform mixture for which p‚Äã(x)=1/\\|ùíØ\\|ùëùùë•1ùíØp(x)=1/\\|{\\\\mathcal{T}}\\|, and different velocities for non-uniform mixtures. We also demonstrate our kinetic optimal velocity from ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is the velocity proposed by Gat et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")) for any mixture path.\\\n\\\n#### Positive mixture paths using ( [24](https://ar5iv.org/html/2412.03487\\#S4.E24 \"Equation 24 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")):\\\n\\\nFor ( [24](https://ar5iv.org/html/2412.03487#S4.E24 \"Equation 24 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), we only consider mixture paths for which pt‚Äã(x\\|x1)>0subscriptùëùùë°conditionalùë•subscriptùë•10p\\_{t}(x\\|x\\_{1})>0 for all x‚ààùíØùë•ùíØx\\\\in{\\\\mathcal{T}}, including uniform p‚Äã(x)=1/\\|ùíØ\\|ùëùùë•1ùíØp(x)=1/\\|{\\\\mathcal{T}}\\| as a special case. For these mixture paths, where we recall that x‚â†zùë•ùëßx\\\\neq z, we have\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x,z\\|x1)subscriptsuperscriptùë¢‚ãÜùë°ùë•conditionalùëßsubscriptùë•1\\\\displaystyle u^{\\\\star}\\_{t}(x,z\\|x\\_{1}) | =\\[‚àÇtpt‚Äã(x\\|x1)‚àí‚àÇtpt‚Äã(z\\|x1)\\]+\\|ùíØ\\|‚Äãpt‚Äã(z\\|x1)absentsubscriptdelimited-\\[\\]subscriptùë°subscriptùëùùë°conditionalùë•subscriptùë•1subscriptùë°subscriptùëùùë°conditionalùëßsubscriptùë•1ùíØsubscriptùëùùë°conditionalùëßsubscriptùë•1\\\\displaystyle=\\\\frac{\\\\left\\[\\\\partial\\_{t}p\\_{t}(x\\|x\\_{1})-\\\\partial\\_{t}p\\_{t}(z\\|x\\_{1})\\\\right\\]\\_{+}}{\\|{\\\\mathcal{T}}\\|p\\_{t}(z\\|x\\_{1})} |  |\\\n|  |  | =Œ∫Àôt‚Äã(x1)‚Äã\\[Œ¥x1‚Äã(x)‚àíŒ¥x1‚Äã(z)+p‚Äã(z)‚àíp‚Äã(x)\\]+\\|ùíØ\\|‚Äãpt‚Äã(z\\|x1)absentsubscriptÀôùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]subscriptùõøsubscriptùë•1ùë•subscriptùõøsubscriptùë•1ùëßùëùùëßùëùùë•ùíØsubscriptùëùùë°conditionalùëßsubscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1})\\\\left\\[\\\\delta\\_{x\\_{1}}(x)-\\\\delta\\_{x\\_{1}}(z)+p(z)-p(x)\\\\right\\]\\_{+}}{\\|{\\\\mathcal{T}}\\|p\\_{t}(z\\|x\\_{1})} |  | (64) |\\\n\\\nWe now examine the uniform and arbitrary p‚Äã(x)>0ùëùùë•0p(x)>0 cases separately.\\\n\\\n#### Uniform mixture using ( [24](https://ar5iv.org/html/2412.03487\\#S4.E24 \"Equation 24 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")):\\\n\\\nFor uniform, we have for x‚â†zùë•ùëßx\\\\neq z\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x,z\\|x1)subscriptsuperscriptùë¢‚ãÜùë°ùë•conditionalùëßsubscriptùë•1\\\\displaystyle u^{\\\\star}\\_{t}(x,z\\|x\\_{1}) | =Œ∫Àôt‚Äã(x1)‚Äã\\[Œ¥x1‚Äã(x)‚àíŒ¥x1‚Äã(z)+p‚Äã(z)‚àíp‚Äã(x)\\]+\\|ùíØ\\|‚Äãpt‚Äã(z\\|x1)absentsubscriptÀôùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]subscriptùõøsubscriptùë•1ùë•subscriptùõøsubscriptùë•1ùëßùëùùëßùëùùë•ùíØsubscriptùëùùë°conditionalùëßsubscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1})\\\\left\\[\\\\delta\\_{x\\_{1}}(x)-\\\\delta\\_{x\\_{1}}(z)+p(z)-p(x)\\\\right\\]\\_{+}}{\\|{\\\\mathcal{T}}\\|p\\_{t}(z\\|x\\_{1})} |  |\\\n|  |  | =Œ∫Àôt‚Äã(x1)‚Äã\\[Œ¥x1‚Äã(x)‚àíŒ¥x1‚Äã(z)\\]+\\|ùíØ\\|‚Äãpt‚Äã(z\\|x1)absentsubscriptÀôùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]subscriptùõøsubscriptùë•1ùë•subscriptùõøsubscriptùë•1ùëßùíØsubscriptùëùùë°conditionalùëßsubscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1})\\\\left\\[\\\\delta\\_{x\\_{1}}(x)-\\\\delta\\_{x\\_{1}}(z)\\\\right\\]\\_{+}}{\\|{\\\\mathcal{T}}\\|p\\_{t}(z\\|x\\_{1})} |  | (65) |\\\n\\\nThis is only positive if x=x1ùë•subscriptùë•1x=x\\_{1} and z‚â†x1ùëßsubscriptùë•1z\\\\neq x\\_{1}. In which case, we have\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x1,z‚â†x1\\|x1)subscriptsuperscriptùë¢‚ãÜùë°subscriptùë•1ùëßconditionalsubscriptùë•1subscriptùë•1\\\\displaystyle u^{\\\\star}\\_{t}(x\\_{1},z\\\\neq x\\_{1}\\|x\\_{1}) | =Œ∫Àôt‚Äã(x1)‚Äã\\[1‚àí0\\]+1‚àíŒ∫t‚Äã(x1)absentsubscriptÀôùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]101subscriptùúÖùë°subscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1})\\\\left\\[1-0\\\\right\\]\\_{+}}{1-\\\\kappa\\_{t}(x\\_{1})} |  |\\\n|  |  | =Œ∫Àôt‚Äã(x1)1‚àíŒ∫t‚Äã(x1)absentsubscriptÀôùúÖùë°subscriptùë•11subscriptùúÖùë°subscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1})}{1-\\\\kappa\\_{t}(x\\_{1})} |  | (66) |\\\n\\\nSo in total we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚àó‚Äã(x,z\\|x1)=Œ∫tÀô‚Äã(x1)1‚àíŒ∫t‚Äã(x1)‚Äã(Œ¥x1‚Äã(x)‚àíŒ¥z‚Äã(x))subscriptsuperscriptùë¢ùë°ùë•conditionalùëßsubscriptùë•1ÀôsubscriptùúÖùë°subscriptùë•11subscriptùúÖùë°subscriptùë•1subscriptùõøsubscriptùë•1ùë•subscriptùõøùëßùë•\\\\displaystyle u^{\\*}\\_{t}(x,z\\|x\\_{1})=\\\\frac{\\\\dot{\\\\kappa\\_{t}}(x\\_{1})}{1-\\\\kappa\\_{t}(x\\_{1})}(\\\\delta\\_{x\\_{1}}(x)-\\\\delta\\_{z}(x)) |  | (67) |\\\n\\\n#### Arbitrary p‚Äã(x)>0ùëùùë•0p(x)>0 using ( [24](https://ar5iv.org/html/2412.03487\\#S4.E24 \"Equation 24 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")):\\\n\\\nFor a non-uniform positive p‚Äã(x)ùëùùë•p(x) we do not arrive at the same velocity as the uniform mixture. Consider x‚â†zùë•ùëßx\\\\neq z, x‚â†x1ùë•subscriptùë•1x\\\\neq x\\_{1}, and z‚â†x1ùëßsubscriptùë•1z\\\\neq x\\_{1}, then\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x‚â†x1,z‚â†x1\\|x1)subscriptsuperscriptùë¢‚ãÜùë°formulae-sequenceùë•subscriptùë•1ùëßconditionalsubscriptùë•1subscriptùë•1\\\\displaystyle u^{\\\\star}\\_{t}(x\\\\neq x\\_{1},z\\\\neq x\\_{1}\\|x\\_{1}) | =Œ∫Àôt‚Äã(x1)‚Äã\\[p‚Äã(z)‚àíp‚Äã(x)\\]+\\|ùíØ\\|‚Äãpt‚Äã(z\\|x1).absentsubscriptÀôùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]ùëùùëßùëùùë•ùíØsubscriptùëùùë°conditionalùëßsubscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1})\\\\left\\[p(z)-p(x)\\\\right\\]\\_{+}}{\\|{\\\\mathcal{T}}\\|p\\_{t}(z\\|x\\_{1})}. |  | (68) |\\\n\\\nThis is not zero if p‚Äã(z)>p‚Äã(x)ùëùùëßùëùùë•p(z)>p(x) for any pair of zùëßz and xùë•x, proving this is a different velocity in general.\\\n\\\n#### Arbitrary mixture paths using ( [26](https://ar5iv.org/html/2412.03487\\#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")):\\\n\\\nSubstituting in the mixture path, where we recall that x‚â†zùë•ùëßx\\\\neq z and pt‚Äã(z\\|x1)>0subscriptùëùùë°conditionalùëßsubscriptùë•10p\\_{t}(z\\|x\\_{1})>0, we have\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x,z\\|x1)subscriptsuperscriptùë¢‚ãÜùë°ùë•conditionalùëßsubscriptùë•1\\\\displaystyle u^{\\\\star}\\_{t}(x,z\\|x\\_{1}) | =1pt‚Äã(z\\|x1)‚Äã\\[‚àÇtpt‚Äã(x\\|x1)‚Äãpt‚Äã(z\\|x1)‚àí‚àÇtpt‚Äã(z\\|x1)‚Äãpt‚Äã(x\\|x1)\\]+absent1subscriptùëùùë°conditionalùëßsubscriptùë•1subscriptdelimited-\\[\\]subscriptùë°subscriptùëùùë°conditionalùë•subscriptùë•1subscriptùëùùë°conditionalùëßsubscriptùë•1subscriptùë°subscriptùëùùë°conditionalùëßsubscriptùë•1subscriptùëùùë°conditionalùë•subscriptùë•1\\\\displaystyle=\\\\frac{1}{p\\_{t}(z\\|x\\_{1})}\\\\left\\[\\\\partial\\_{t}p\\_{t}(x\\|x\\_{1})p\\_{t}(z\\|x\\_{1})-\\\\partial\\_{t}p\\_{t}(z\\|x\\_{1})p\\_{t}(x\\|x\\_{1})\\\\right\\]\\_{+} |  |\\\n|  |  | =Œ∫tÀô‚Äã(x1)‚Äã\\[Œ¥x1‚Äã(x)‚àíp‚Äã(x)‚àípt‚Äã(x\\|x1)pt‚Äã(z\\|x1)‚Äã(Œ¥x1‚Äã(z)‚àíp‚Äã(z))\\]+absentÀôsubscriptùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]subscriptùõøsubscriptùë•1ùë•ùëùùë•subscriptùëùùë°conditionalùë•subscriptùë•1subscriptùëùùë°conditionalùëßsubscriptùë•1subscriptùõøsubscriptùë•1ùëßùëùùëß\\\\displaystyle=\\\\dot{\\\\kappa\\_{t}}(x\\_{1})\\\\left\\[\\\\delta\\_{x\\_{1}}(x)-p(x)-\\\\frac{p\\_{t}(x\\|x\\_{1})}{p\\_{t}(z\\|x\\_{1})}(\\\\delta\\_{x\\_{1}}(z)-p(z))\\\\right\\]\\_{+} |  | (69) |\\\n\\\nWe consider several cases. First, x‚â†x1ùë•subscriptùë•1x\\\\neq x\\_{1} and z=x1ùëßsubscriptùë•1z=x\\_{1}, then the term in brackets is negative and hence ut‚àó=0superscriptsubscriptùë¢ùë°0u\\_{t}^{\\*}=0. Second if x‚â†x1ùë•subscriptùë•1x\\\\neq x\\_{1} and z‚â†x1ùëßsubscriptùë•1z\\\\neq x\\_{1}, we have\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x‚â†x1,z‚â†x1\\|x1)subscriptsuperscriptùë¢‚ãÜùë°formulae-sequenceùë•subscriptùë•1ùëßconditionalsubscriptùë•1subscriptùë•1\\\\displaystyle u^{\\\\star}\\_{t}(x\\\\neq x\\_{1},z\\\\neq x\\_{1}\\|x\\_{1}) | =Œ∫tÀô‚Äã(x1)‚Äã\\[‚àíp‚Äã(x)+pt‚Äã(x\\|x1)‚Äãp‚Äã(z)pt‚Äã(z\\|x1)\\]+absentÀôsubscriptùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]ùëùùë•subscriptùëùùë°conditionalùë•subscriptùë•1ùëùùëßsubscriptùëùùë°conditionalùëßsubscriptùë•1\\\\displaystyle=\\\\dot{\\\\kappa\\_{t}}(x\\_{1})\\\\left\\[-p(x)+\\\\frac{p\\_{t}(x\\|x\\_{1})p(z)}{p\\_{t}(z\\|x\\_{1})}\\\\right\\]\\_{+} |  |\\\n|  |  | =Œ∫tÀô‚Äã(x1)‚Äã\\[‚àíp‚Äã(x)+(1‚àíŒ∫t‚Äã(x1))‚Äãp‚Äã(x)‚Äãp‚Äã(z)(1‚àíŒ∫t‚Äã(x1))‚Äãp‚Äã(z)\\]+absentÀôsubscriptùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]ùëùùë•1subscriptùúÖùë°subscriptùë•1ùëùùë•ùëùùëß1subscriptùúÖùë°subscriptùë•1ùëùùëß\\\\displaystyle=\\\\dot{\\\\kappa\\_{t}}(x\\_{1})\\\\left\\[-p(x)+\\\\frac{(1-\\\\kappa\\_{t}(x\\_{1}))p(x)p(z)}{(1-\\\\kappa\\_{t}(x\\_{1}))p(z)}\\\\right\\]\\_{+} |  |\\\n|  |  | =0.absent0\\\\displaystyle=0. |  | (70) |\\\n\\\nOur final case, x=x1ùë•subscriptùë•1x=x\\_{1} and z‚â†x1ùëßsubscriptùë•1z\\\\neq x\\_{1}, gives\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x1,z‚â†x1\\|x1)subscriptsuperscriptùë¢‚ãÜùë°subscriptùë•1ùëßconditionalsubscriptùë•1subscriptùë•1\\\\displaystyle u^{\\\\star}\\_{t}(x\\_{1},z\\\\neq x\\_{1}\\|x\\_{1}) | =Œ∫tÀô‚Äã(x1)‚Äã\\[1‚àíp‚Äã(x1)+((1‚àíŒ∫t‚Äã(x1))‚Äãp‚Äã(x1)+Œ∫t‚Äã(x1))‚Äãp‚Äã(z)(1‚àíŒ∫t‚Äã(x1))‚Äãp‚Äã(z)\\]+absentÀôsubscriptùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]1ùëùsubscriptùë•11subscriptùúÖùë°subscriptùë•1ùëùsubscriptùë•1subscriptùúÖùë°subscriptùë•1ùëùùëß1subscriptùúÖùë°subscriptùë•1ùëùùëß\\\\displaystyle=\\\\dot{\\\\kappa\\_{t}}(x\\_{1})\\\\left\\[1-p(x\\_{1})+\\\\frac{\\\\left((1-\\\\kappa\\_{t}(x\\_{1}))p(x\\_{1})+\\\\kappa\\_{t}(x\\_{1})\\\\right)p(z)}{(1-\\\\kappa\\_{t}(x\\_{1}))p(z)}\\\\right\\]\\_{+} |  |\\\n|  |  | =Œ∫tÀô‚Äã(x1)1‚àíŒ∫t‚Äã(x1)‚Äã\\[(1‚àíŒ∫t‚Äã(x1))‚Äã(1‚àíp‚Äã(x1))+(1‚àíŒ∫t‚Äã(x1))‚Äãp‚Äã(x1)+Œ∫t‚Äã(x1)\\]+absentÀôsubscriptùúÖùë°subscriptùë•11subscriptùúÖùë°subscriptùë•1subscriptdelimited-\\[\\]1subscriptùúÖùë°subscriptùë•11ùëùsubscriptùë•11subscriptùúÖùë°subscriptùë•1ùëùsubscriptùë•1subscriptùúÖùë°subscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa\\_{t}}(x\\_{1})}{1-\\\\kappa\\_{t}(x\\_{1})}\\\\left\\[(1-\\\\kappa\\_{t}(x\\_{1}))(1-p(x\\_{1}))+(1-\\\\kappa\\_{t}(x\\_{1}))p(x\\_{1})+\\\\kappa\\_{t}(x\\_{1})\\\\right\\]\\_{+} |  |\\\n|  |  | =Œ∫tÀô‚Äã(x1)1‚àíŒ∫t‚Äã(x1)absentÀôsubscriptùúÖùë°subscriptùë•11subscriptùúÖùë°subscriptùë•1\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa\\_{t}}(x\\_{1})}{1-\\\\kappa\\_{t}(x\\_{1})} |  | (71) |\\\n\\\nSo in total for any mixture path we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚àó‚Äã(x,z\\|x1)=Œ∫tÀô‚Äã(x1)1‚àíŒ∫t‚Äã(x1)‚Äã(Œ¥x1‚Äã(x)‚àíŒ¥z‚Äã(x)),subscriptsuperscriptùë¢ùë°ùë•conditionalùëßsubscriptùë•1ÀôsubscriptùúÖùë°subscriptùë•11subscriptùúÖùë°subscriptùë•1subscriptùõøsubscriptùë•1ùë•subscriptùõøùëßùë•\\\\displaystyle u^{\\*}\\_{t}(x,z\\|x\\_{1})=\\\\frac{\\\\dot{\\\\kappa\\_{t}}(x\\_{1})}{1-\\\\kappa\\_{t}(x\\_{1})}(\\\\delta\\_{x\\_{1}}(x)-\\\\delta\\_{z}(x)), |  | (72) |\\\n\\\nrecovering the velocity proposed in Gat et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")).\\\n\\\n### C.2 Marginal velocity in closed-form for mixture paths\\\n\\\nAs shown in Appendix [C.1](https://ar5iv.org/html/2412.03487#A3.SS1 \"C.1 Kinetic optimal velocities for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), the kinetic optimal flux given by ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) results in kinetic optimal velocity ( [72](https://ar5iv.org/html/2412.03487#A3.E72 \"Equation 72 ‚Ä£ Arbitrary mixture paths using (26): ‚Ä£ C.1 Kinetic optimal velocities for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for mixture paths. To derive the marginal velocity, we insert ( [72](https://ar5iv.org/html/2412.03487#A3.E72 \"Equation 72 ‚Ä£ Arbitrary mixture paths using (26): ‚Ä£ C.1 Kinetic optimal velocities for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) into ( [9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) as follows\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\displaystyle u\\_{t}^{i}(x^{i},z) | =‚àëx1i‚ààùíØut‚Äã(xi,zi\\|x1i)‚Äãp1\\|ti‚Äã(x1i\\|z)absentsubscriptsuperscriptsubscriptùë•1ùëñùíØsubscriptùë¢ùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptsubscriptùë•1ùëñùëß\\\\displaystyle=\\\\sum\\_{x\\_{1}^{i}\\\\in{\\\\mathcal{T}}}u\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})p^{i}\\_{1\\|t}(x\\_{1}^{i}\\|z) |  |\\\n|  |  | =‚àëx1i‚ààùíØŒ∫tÀô‚Äã(x1i)1‚àíŒ∫t‚Äã(x1i)‚Äã(Œ¥x1i‚Äã(xi)‚àíŒ¥zi‚Äã(xi))‚Äãp1\\|ti‚Äã(x1i\\|z)absentsubscriptsuperscriptsubscriptùë•1ùëñùíØÀôsubscriptùúÖùë°subscriptsuperscriptùë•ùëñ11subscriptùúÖùë°subscriptsuperscriptùë•ùëñ1subscriptùõøsubscriptsuperscriptùë•ùëñ1superscriptùë•ùëñsubscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñsubscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptsubscriptùë•1ùëñùëß\\\\displaystyle=\\\\sum\\_{x\\_{1}^{i}\\\\in{\\\\mathcal{T}}}\\\\frac{\\\\dot{\\\\kappa\\_{t}}(x^{i}\\_{1})}{1-\\\\kappa\\_{t}(x^{i}\\_{1})}(\\\\delta\\_{x^{i}\\_{1}}(x^{i})-\\\\delta\\_{z^{i}}(x^{i}))p^{i}\\_{1\\|t}(x\\_{1}^{i}\\|z) |  |\\\n|  |  | =Œ∫Àôt‚Äã(xi)1‚àíŒ∫t‚Äã(xi)‚Äãp1\\|ti‚Äã(xi\\|z)‚àíŒ¥zi‚Äã(xi)‚Äã‚àëx1i‚ààùíØŒ∫Àôt‚Äã(x1i)1‚àíŒ∫t‚Äã(x1i)‚Äãp1\\|ti‚Äã(x1i\\|z).absentsubscriptÀôùúÖùë°superscriptùë•ùëñ1subscriptùúÖùë°superscriptùë•ùëñsubscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptùë•ùëñùëßsubscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñsubscriptsuperscriptsubscriptùë•1ùëñùíØsubscriptÀôùúÖùë°superscriptsubscriptùë•1ùëñ1subscriptùúÖùë°superscriptsubscriptùë•1ùëñsubscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptsubscriptùë•1ùëñùëß\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x^{i})}{1-\\\\kappa\\_{t}(x^{i})}p^{i}\\_{1\\|t}(x^{i}\\|z)-\\\\delta\\_{z^{i}}(x^{i})\\\\sum\\_{x\\_{1}^{i}\\\\in{\\\\mathcal{T}}}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1}^{i})}{1-\\\\kappa\\_{t}(x\\_{1}^{i})}p^{i}\\_{1\\|t}(x\\_{1}^{i}\\|z). |  | (73) |\\\n\\\n### C.3 Power ‚àû\\\\infty velocity for general paths\\\n\\\nWe begin by defining a single parameter family of kinetic optimal velocities. For every Œ±>1ùõº1\\\\alpha>1 the flux as in equation [22](https://ar5iv.org/html/2412.03487#S4.E22 \"Equation 22 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for œÑt‚Äã(x)=ptŒ±‚Äã(x)subscriptùúèùë°ùë•superscriptsubscriptùëùùë°ùõºùë•\\\\tau\\_{t}(x)=p\\_{t}^{\\\\alpha}(x) is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)=ptŒ±‚Äã(x)‚ÄãptŒ±‚Äã(z)‚Äã\\[ft‚Äã(x)‚àíft‚Äã(z)\\]+,ft‚Äã(x)=1‚àës‚ààùíØptŒ±‚Äã(s)‚ÄãpÀôt‚Äã(x)ptŒ±‚Äã(x).formulae-sequencesuperscriptsubscriptùëóùë°‚ãÜùë•ùëßsuperscriptsubscriptùëùùë°ùõºùë•superscriptsubscriptùëùùë°ùõºùëßsubscriptdelimited-\\[\\]subscriptùëìùë°ùë•subscriptùëìùë°ùëßsubscriptùëìùë°ùë•1subscriptùë†ùíØsuperscriptsubscriptùëùùë°ùõºùë†subscriptÀôùëùùë°ùë•superscriptsubscriptùëùùë°ùõºùë•j\\_{t}^{\\\\star}(x,z)=p\\_{t}^{\\\\alpha}(x)p\\_{t}^{\\\\alpha}(z)\\\\left\\[f\\_{t}(x)-f\\_{t}(z)\\\\right\\]\\_{+},\\\\quad f\\_{t}(x)=\\\\frac{1}{\\\\sum\\_{s\\\\in{\\\\mathcal{T}}}p\\_{t}^{\\\\alpha}(s)}\\\\frac{\\\\dot{p}\\_{t}(x)}{p\\_{t}^{\\\\alpha}(x)}. |  | (74) |\\\n\\\nFurther simplifying jt‚ãÜ‚Äã(x,z)superscriptsubscriptùëóùë°‚ãÜùë•ùëßj\\_{t}^{\\\\star}(x,z),\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)superscriptsubscriptùëóùë°‚ãÜùë•ùëß\\\\displaystyle j\\_{t}^{\\\\star}(x,z) | =\\[pÀôt‚Äã(x)‚ÄãptŒ±‚Äã(z)‚àës‚ààùíØptŒ±‚Äã(s)‚àípÀôt‚Äã(z)‚ÄãptŒ±‚Äã(x)‚àës‚ààùíØptŒ±‚Äã(s)\\]+.absentsubscriptdelimited-\\[\\]subscriptÀôùëùùë°ùë•superscriptsubscriptùëùùë°ùõºùëßsubscriptùë†ùíØsuperscriptsubscriptùëùùë°ùõºùë†subscriptÀôùëùùë°ùëßsuperscriptsubscriptùëùùë°ùõºùë•subscriptùë†ùíØsuperscriptsubscriptùëùùë°ùõºùë†\\\\displaystyle=\\\\left\\[\\\\dot{p}\\_{t}(x)\\\\frac{p\\_{t}^{\\\\alpha}(z)}{\\\\sum\\_{s\\\\in{\\\\mathcal{T}}}p\\_{t}^{\\\\alpha}(s)}-\\\\dot{p}\\_{t}(z)\\\\frac{p\\_{t}^{\\\\alpha}(x)}{\\\\sum\\_{s\\\\in{\\\\mathcal{T}}}p\\_{t}^{\\\\alpha}(s)}\\\\right\\]\\_{+}. |  | (75) |\\\n\\\nAn interesting case of the flux above is taking the limit Œ±‚Üí‚àû‚Üíùõº\\\\alpha\\\\rightarrow\\\\infty, where\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ptŒ±‚Äã(x)‚àës‚ààùíØptŒ±‚Äã(s)‚ÜíŒ±‚Üí‚àûŒ¥arg‚Äãmaxs‚Å°(pt‚Äã(s))‚Äã(x),‚Üíùõºabsent‚Üísuperscriptsubscriptùëùùë°ùõºùë•subscriptùë†ùíØsuperscriptsubscriptùëùùë°ùõºùë†subscriptùõøsubscriptargmaxùë†subscriptùëùùë°ùë†ùë•\\\\frac{p\\_{t}^{\\\\alpha}(x)}{\\\\sum\\_{s\\\\in{\\\\mathcal{T}}}p\\_{t}^{\\\\alpha}(s)}\\\\xrightarrow\\[\\\\alpha\\\\rightarrow\\\\infty\\]{}\\\\delta\\_{\\\\operatorname\\*{arg\\\\,max}\\_{s}(p\\_{t}(s))}(x), |  | (76) |\\\n\\\nand the flux is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)=\\[pÀôt‚Äã(x)‚ÄãŒ¥arg‚Äãmaxs‚Å°(pt‚Äã(s))‚Äã(z)‚àípÀôt‚Äã(z)‚ÄãŒ¥arg‚Äãmaxs‚Å°(pt‚Äã(s))‚Äã(x)\\]+.superscriptsubscriptùëóùë°‚ãÜùë•ùëßsubscriptdelimited-\\[\\]subscriptÀôùëùùë°ùë•subscriptùõøsubscriptargmaxùë†subscriptùëùùë°ùë†ùëßsubscriptÀôùëùùë°ùëßsubscriptùõøsubscriptargmaxùë†subscriptùëùùë°ùë†ùë•j\\_{t}^{\\\\star}(x,z)=\\\\left\\[\\\\dot{p}\\_{t}(x)\\\\delta\\_{\\\\operatorname\\*{arg\\\\,max}\\_{s}(p\\_{t}(s))}(z)-\\\\dot{p}\\_{t}(z)\\\\delta\\_{\\\\operatorname\\*{arg\\\\,max}\\_{s}(p\\_{t}(s))}(x)\\\\right\\]\\_{+}. |  | (77) |\\\n\\\nIndeed the above flux satisfy the Continuity Equation and the Rate Conditions as in Indeed the above flux satisfy the Continuity Equation and the Rate Conditions as in equation [17](https://ar5iv.org/html/2412.03487#S4.E17 \"Equation 17 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). Note that it can also be seen that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)‚Üípt‚Äã(z)‚Üí00.‚Üísubscriptùëùùë°ùëß0absent‚Üísuperscriptsubscriptùëóùë°‚ãÜùë•ùëß0j\\_{t}^{\\\\star}(x,z)\\\\xrightarrow\\[p\\_{t}(z)\\\\rightarrow 0\\]{}0. |  | (78) |\\\n\\\n## Appendix D Evidence lower bound (ELBO) for CTMC\\\n\\\nLet 0=t0<t1<‚ãØ<tK=10subscriptùë°0subscriptùë°1‚ãØsubscriptùë°ùêæ10=t\\_{0}<t\\_{1}<\\\\cdots<t\\_{K}=1 be a uniform discretization of the interval \\[0,1\\]01\\[0,1\\] with h=tk+1‚àítk=1K‚Ñésubscriptùë°ùëò1subscriptùë°ùëò1ùêæh=t\\_{k+1}-t\\_{k}=\\\\frac{1}{K}. Also let qk+1\\|k‚Äã(xi\\|zi,x1i)=Œ¥zi‚Äã(xi)+h‚Äãut‚Äã(xi,zi\\|x1i)subscriptùëûùëòconditional1ùëòconditionalsuperscriptùë•ùëñsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésubscriptùë¢ùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñq\\_{k+1\\|k}(x^{i}\\|z^{i},x\\_{1}^{i})=\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i}) be the Euler discretization of the variational process, and let pk+1\\|k‚Äã(xi\\|zi)=Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)subscriptùëùùëòconditional1ùëòconditionalsuperscriptùë•ùëñsuperscriptùëßùëñsubscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßp\\_{k+1\\|k}(x^{i}\\|z^{i})=\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z) be the Euler discretization of the learned process, with both starting at the same source distribution q0‚Äã(xi\\|x1i)=p‚Äã(xi)subscriptùëû0conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñùëùsuperscriptùë•ùëñq\\_{0}(x^{i}\\|x\\_{1}^{i})=p(x^{i}). We also assume the model p‚Äã(x1i\\|x0:Ki)=Œ¥xKi‚Äã(x1i)ùëùconditionalsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë•:0ùêæùëñsubscriptùõøsuperscriptsubscriptùë•ùêæùëñsuperscriptsubscriptùë•1ùëñp(x\\_{1}^{i}\\|x\\_{0:K}^{i})=\\\\delta\\_{x\\_{K}^{i}}(x\\_{1}^{i}). The discrete-time ELBO is then\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | log‚Å°pŒ∏‚Äã(x1)subscriptùëùùúÉsubscriptùë•1\\\\displaystyle\\\\log p\\_{\\\\theta}(x\\_{1}) | ‚â•ùîºx0:K‚àºq0:K(‚ãÖ\\|x1)‚Äã\\[log‚Å°p‚Äã(x1\\|x0:K)+log‚Å°p0:K‚Äã(x0:K)‚àílog‚Å°q0:K‚Äã(x0:K\\|x1)\\]\\\\displaystyle\\\\geq\\\\mathbb{E}\\_{x\\_{0:K}\\\\sim q\\_{0:K}(\\\\cdot\\|x\\_{1})}\\\\left\\[\\\\log p(x\\_{1}\\|x\\_{0:K})+\\\\log p\\_{0:K}(x\\_{0:K})-\\\\log q\\_{0:K}(x\\_{0:K}\\|x\\_{1})\\\\right\\] |  | (79) |\\\n|  |  | =ùîºx1:K‚àºq1:K(‚ãÖ\\|x1)‚àëi=1D\\[logŒ¥xKi(x1i)‚àí‚àëk=0K‚àí1DKL(qk+1\\|k(xk+1i\\|xk,x1i)‚à•pk+1\\|k(xk+1i\\|xk))\\]\\\\displaystyle=\\\\mathbb{E}\\_{x\\_{1:K}\\\\sim q\\_{1:K}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\left\\[\\\\log\\\\delta\\_{x\\_{K}^{i}}(x\\_{1}^{i})-\\\\sum\\_{k=0}^{K-1}D\\_{\\\\text{KL}}(q\\_{k+1\\|k}(x\\_{k+1}^{i}\\|x\\_{k},x\\_{1}^{i})\\\\\\|p\\_{k+1\\|k}(x\\_{k+1}^{i}\\|x\\_{k}))\\\\right\\] |  | (80) |\\\n|  |  | ‚àí‚àëi=1DDKL‚Äã(q0‚Äã(xi\\|x1i)‚à•p‚Äã(xi))cancelsuperscriptsubscriptùëñ1ùê∑subscriptùê∑KLconditionalsubscriptùëû0conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñùëùsuperscriptùë•ùëñ\\\\displaystyle\\\\qquad-\\\\cancel{\\\\sum\\_{i=1}^{D}D\\_{\\\\text{KL}}(q\\_{0}(x^{i}\\|x\\_{1}^{i})\\\\\\|p(x^{i}))} |  | (81) |\\\n\\\nEach term in the summation:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | DKL(qk+1\\|k(xi\\|z,x1i)‚à•pk+1\\|k(xi\\|z))\\\\displaystyle D\\_{\\\\text{KL}}(q\\_{k+1\\|k}(x^{i}\\|z,x\\_{1}^{i})\\\\\\|p\\_{k+1\\|k}(x^{i}\\|z)) |  | (82) |\\\n|  | =‚àëxiqk+1\\|k‚Äã(xi\\|z,x1i)‚Äãlog‚Å°qk+1\\|k‚Äã(xi\\|z,x1i)pk+1\\|k‚Äã(xi\\|z)absentsubscriptsuperscriptùë•ùëñsubscriptùëûùëòconditional1ùëòconditionalsuperscriptùë•ùëñùëßsuperscriptsubscriptùë•1ùëñsubscriptùëûùëòconditional1ùëòconditionalsuperscriptùë•ùëñùëßsuperscriptsubscriptùë•1ùëñsubscriptùëùùëòconditional1ùëòconditionalsuperscriptùë•ùëñùëß\\\\displaystyle=\\\\sum\\_{x^{i}}q\\_{k+1\\|k}(x^{i}\\|z,x\\_{1}^{i})\\\\log\\\\frac{q\\_{k+1\\|k}(x^{i}\\|z,x\\_{1}^{i})}{p\\_{k+1\\|k}(x^{i}\\|z)} |  | (83) |\\\n|  | =‚àëxi\\[Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,zi\\|x1i)\\]‚Äãlog‚Å°Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,zi\\|x1)Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)absentsubscriptsuperscriptùë•ùëñdelimited-\\[\\]subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsubscriptùë•1subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\displaystyle=\\\\sum\\_{x^{i}}\\\\left\\[\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\]\\\\log\\\\frac{\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1})}{\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z)} |  | (84) |\\\n|  | =\\[1+h‚Äãut‚Äã(zi,zi\\|x1i)\\]‚Äãlog‚Å°1+h‚Äãuti‚Äã(zi,z\\|x1i)1+h‚Äãuti‚Äã(zi,z)+h‚Äã‚àëxi‚â†zi\\[ut‚Äã(xi,zi\\|x1i)\\]‚Äãlog‚Å°uti‚Äã(xi,zi\\|x1i)uti‚Äã(xi,z)absentdelimited-\\[\\]1‚Ñésubscriptùë¢ùë°superscriptùëßùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñ1‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñconditionalùëßsuperscriptsubscriptùë•1ùëñ1‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñùëß‚Ñésubscriptsuperscriptùë•ùëñsuperscriptùëßùëñdelimited-\\[\\]subscriptùë¢ùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\displaystyle=\\\\left\\[1+hu\\_{t}(z^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\]\\\\log\\\\frac{1+hu\\_{t}^{i}(z^{i},z\\|x\\_{1}^{i})}{1+hu\\_{t}^{i}(z^{i},z)}+h\\\\sum\\_{x^{i}\\\\neq z^{i}}\\\\left\\[u\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\]\\\\log\\\\frac{u\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1}^{i})}{u\\_{t}^{i}(x^{i},z)} |  | (85) |\\\n\\\nTaylor series expansion around h=0‚Ñé0h=0:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | log‚Å°(1+h‚Äãuti)=h‚Äãuti+o‚Äã(h)1‚Ñésuperscriptsubscriptùë¢ùë°ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñùëú‚Ñé\\\\log(1+hu\\_{t}^{i})=hu\\_{t}^{i}+o(h) |  | (86) |\\\n\\\nSo we can simplify\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | DKL(qk+1\\|k(xi\\|z,x1i)‚à•pk+1\\|k(xi\\|z))\\\\displaystyle D\\_{\\\\text{KL}}(q\\_{k+1\\|k}(x^{i}\\|z,x\\_{1}^{i})\\\\\\|p\\_{k+1\\|k}(x^{i}\\|z)) |  | (87) |\\\n|  | =\\[1+h‚Äãuti‚Äã(zi,zi\\|x1i)\\]‚Äã(h‚Äãuti‚Äã(zi,zi\\|x1i)‚àíh‚Äãuti‚Äã(zi,z))+h‚Äã‚àëxi‚â†zi\\[uti‚Äã(xi,zi\\|x1i)\\]‚Äãlog‚Å°uti‚Äã(xi,zi\\|x1i)uti‚Äã(xi,z)+o‚Äã(h)absentdelimited-\\[\\]1‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñùëß‚Ñésubscriptsuperscriptùë•ùëñsuperscriptùëßùëñdelimited-\\[\\]superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßùëú‚Ñé\\\\displaystyle=\\\\left\\[1+hu\\_{t}^{i}(z^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\](hu\\_{t}^{i}(z^{i},z^{i}\\|x\\_{1}^{i})-hu\\_{t}^{i}(z^{i},z))+h\\\\sum\\_{x^{i}\\\\neq z^{i}}\\\\left\\[u\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\]\\\\log\\\\frac{u\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1}^{i})}{u\\_{t}^{i}(x^{i},z)}+o(h) |  | (88) |\\\n|  | =h‚Äã(uti‚Äã(zi,zi\\|x1i)‚àíuti‚Äã(zi,z)+‚àëxi‚â†zi\\[uti‚Äã(xi,zi\\|x1i)\\]‚Äãlog‚Å°uti‚Äã(xi,zi\\|x1i)uti‚Äã(xi,z))+o‚Äã(h)absent‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñùëßsubscriptsuperscriptùë•ùëñsuperscriptùëßùëñdelimited-\\[\\]superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßùëú‚Ñé\\\\displaystyle=h\\\\left(u\\_{t}^{i}(z^{i},z^{i}\\|x\\_{1}^{i})-u\\_{t}^{i}(z^{i},z)+\\\\sum\\_{x^{i}\\\\neq z^{i}}\\\\left\\[u\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\]\\\\log\\\\frac{u\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1}^{i})}{u\\_{t}^{i}(x^{i},z)}\\\\right)+o(h) |  | (89) |\\\n\\\nTaking limit as K‚Üí‚àû‚ÜíùêæK\\\\rightarrow\\\\infty, hence h=1K‚Üí0‚Ñé1ùêæ‚Üí0h=\\\\frac{1}{K}\\\\rightarrow 0, and asserting that q‚Äã(xKi\\|x1i)=Œ¥x1i‚Äã(xKi)ùëûconditionalsuperscriptsubscriptùë•ùêæùëñsuperscriptsubscriptùë•1ùëñsubscriptùõøsuperscriptsubscriptùë•1ùëñsuperscriptsubscriptùë•ùêæùëñq(x\\_{K}^{i}\\|x\\_{1}^{i})=\\\\delta\\_{x\\_{1}^{i}}(x\\_{K}^{i}) in this continuous-time limit, we obtain the ELBO:\\\n\\\nlog‚Å°pŒ∏‚Äã(x1)‚â•subscriptùëùùúÉsubscriptùë•1absent\\\\displaystyle\\\\log p\\_{\\\\theta}(x\\_{1})\\\\geq(90)‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚Äã‚àëi=1D\\[uti‚Äã(xti,xt)‚àíuti‚Äã(xti,xti\\|x1i)+‚àëx‚â†xtuti‚Äã(xi,xti\\|x1i)‚Äãlog‚Å°uti‚Äã(xi,xt)ut‚Äã(xi,xti\\|x1i)\\]‚Äãd‚Äãt\\\\displaystyle\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\left\\[u\\_{t}^{i}(x\\_{t}^{i},x\\_{t})-u\\_{t}^{i}(x\\_{t}^{i},x\\_{t}^{i}\\|x\\_{1}^{i})+\\\\sum\\_{x\\\\neq x\\_{t}}u\\_{t}^{i}(x^{i},x\\_{t}^{i}\\|x\\_{1}^{i})\\\\log\\\\frac{u\\_{t}^{i}(x^{i},x\\_{t})}{u\\_{t}(x^{i},x\\_{t}^{i}\\|x\\_{1}^{i})}\\\\right\\]\\\\mathrm{d}t(91)\\\n\\\n### D.1 ELBO for masked models\\\n\\\nThe masked probability path is as in equation [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") with source distribution pi‚Äã(xi)=Œ¥ùïû‚Äã(xi)superscriptùëùùëñsuperscriptùë•ùëñsubscriptùõøùïûsuperscriptùë•ùëñp^{i}(x^{i})=\\\\delta\\_{\\\\mathbbm{m}}(x^{i}). Assuming the model is such that p1\\|tŒ∏‚Äã(zi\\|x)=Œ¥x1i‚Äã(zi)subscriptsuperscriptùëùùúÉconditional1ùë°conditionalsuperscriptùëßùëñùë•subscriptùõøsuperscriptsubscriptùë•1ùëñsuperscriptùëßùëñp^{\\\\theta}\\_{1\\|t}(z^{i}\\|x)=\\\\delta\\_{x\\_{1}^{i}}(z^{i}) if xisuperscriptùë•ùëñx^{i} is unmasked (i.e. xi=x1isuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñx^{i}=x\\_{1}^{i}), our ELBO as in equation [37](https://ar5iv.org/html/2412.03487#S6.E37 \"Equation 37 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") further simplifies to\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | logp1Œ∏(x1)‚â•‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1DŒ¥ùïû(xti)\\[\\\\displaystyle\\\\log p\\_{1}^{\\\\theta}(x\\_{1})\\\\geq\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\delta\\_{\\\\mathbbm{m}}(x\\_{t}^{i})\\\\biggr{\\[} | ‚àí‚àëyiŒ∫Àôt‚Äã(yi)1‚àíŒ∫t‚Äã(yi)‚Äãp1\\|tŒ∏‚Äã(yi\\|xt)subscriptsuperscriptùë¶ùëñsubscriptÀôùúÖùë°superscriptùë¶ùëñ1subscriptùúÖùë°superscriptùë¶ùëñsubscriptsuperscriptùëùùúÉconditional1ùë°conditionalsuperscriptùë¶ùëñsubscriptùë•ùë°\\\\displaystyle-\\\\sum\\_{y^{i}}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(y^{i})}{1-\\\\kappa\\_{t}(y^{i})}p^{\\\\theta}\\_{1\\|t}(y^{i}\\|x\\_{t}) |  | (92) |\\\n|  |  | +Œ∫Àôt‚Äã(x1i)1‚àíŒ∫t‚Äã(x1i)(1+logp1\\|tŒ∏(x1i\\|xt))\\]dt.\\\\displaystyle+\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1}^{i})}{1-\\\\kappa\\_{t}(x\\_{1}^{i})}\\\\left(1+\\\\log p^{\\\\theta}\\_{1\\|t}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t. |  | (93) |\\\n\\\nThis simplified expression recovers the ELBO for masked mixture path as proposed by Shi et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib49 \"\")).\\\n\\\n## Appendix E Experimental Details\\\n\\\n### E.1 Text generation\\\n\\\n#### Data.\\\n\\\nOur model are on trained OpenWebText (Gokaslan & Cohen, [2019](https://ar5iv.org/html/2412.03487#bib.bib21 \"\")) and FineWeb-Edu (Lozhkov et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib33 \"\")). For evaluation we use the test split of five dataset Radford et al. ( [2019](https://ar5iv.org/html/2412.03487#bib.bib44 \"\")): WikiText-103, WikiText-2 Merity et al. ( [2016](https://ar5iv.org/html/2412.03487#bib.bib35 \"\")), LAMBADA Paperno et al. ( [2016](https://ar5iv.org/html/2412.03487#bib.bib40 \"\")), PennTreebank (PTB) Marcus et al. ( [1993](https://ar5iv.org/html/2412.03487#bib.bib34 \"\")), One Billion Words (1BW) Chelba et al. ( [2014](https://ar5iv.org/html/2412.03487#bib.bib7 \"\")). Additionally, we extract 512512512 samples of length 102410241024 tokens of GPT2 Tokenizer from FineWeb-Edu, we do not see on training (our models do not complete an epoch in this dataset.\\\n\\\n#### Models.\\\n\\\nAll of our text generation models uses DiT transformers architecture Peebles & Xie ( [2022](https://ar5iv.org/html/2412.03487#bib.bib41 \"\")) with 12 layers, 12 attention heads, and hidden dimension of 768 (150‚Äãm150ùëö150m parameters). For optimization we use constant learning rate of 3‚Äãe‚àí43superscriptùëí43e^{-4} with 2500 warmup steps, Adam optimizer with Œ≤1=0.9subscriptùõΩ10.9\\\\beta\\_{1}=0.9 and Œ≤2=0.999subscriptùõΩ20.999\\\\beta\\_{2}=0.999, and weight decay of 0.030.030.03. We also use a dropout rate of 0.020.020.02, and we train for 200‚Äãk200ùëò200k iterations with batch size of 512512512.\\\n\\\n#### ELBO for training.\\\n\\\nAll text model are trained using our ELBO for mixture path as in equation [37](https://ar5iv.org/html/2412.03487#S6.E37 \"Equation 37 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). To avoid exploding terms in the loss, we sample tùë°t in \\[0,1‚àí1‚Äãe‚àí3\\]011superscriptùëí3\\[0,1-1e^{-3}\\].\\\n\\\n#### ELBO for evaluation.\\\n\\\nWe want to evaluate the ELBO as in equation [37](https://ar5iv.org/html/2412.03487#S6.E37 \"Equation 37 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for trained models with the mixture path as in equation [2](https://ar5iv.org/html/2412.03487#S2.E2 \"Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We note that each choice of scheduler Œ∫t‚Äã(x1i)subscriptùúÖùë°superscriptsubscriptùë•1ùëñ\\\\kappa\\_{t}(x\\_{1}^{i}) will results in a different conditional probability path and hence a different different ELBO. However for every token independent scheduler Œ∫t‚Äã(x1i)‚â°Œ∫tsubscriptùúÖùë°superscriptsubscriptùë•1ùëñsubscriptùúÖùë°\\\\kappa\\_{t}(x\\_{1}^{i})\\\\equiv\\\\kappa\\_{t} we can change the integration variable from tùë°t to Œ∫ùúÖ\\\\kappa,\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | log‚Å°p1Œ∏‚Äã(x1)‚â•superscriptsubscriptùëù1ùúÉsubscriptùë•1absent\\\\displaystyle\\\\textstyle\\\\log p\\_{1}^{\\\\theta}(x\\_{1})\\\\geq | ‚à´01dtùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1N\\[Œ∫Àôt‚Äã(xti)1‚àíŒ∫t‚Äã(xti)pŒ∏1\\|t(xti\\|xt)‚àí‚àëyiŒ∫Àôt‚Äã(yi)1‚àíŒ∫t‚Äã(yi)pŒ∏1\\|t(yi\\|xt)+\\\\displaystyle\\\\int\\_{0}^{1}\\\\mathrm{d}t\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{N}\\\\biggr{\\[}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{t}^{i})}{1-\\\\kappa\\_{t}(x\\_{t}^{i})}p^{\\\\theta}\\_{1\\|t}(x\\_{t}^{i}\\|x\\_{t})-\\\\sum\\_{y^{i}}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(y^{i})}{1-\\\\kappa\\_{t}(y^{i})}p^{\\\\theta}\\_{1\\|t}(y^{i}\\|x\\_{t})+ |  | (94) |\\\n|  |  | +(1‚àíŒ¥x1i(xti))Œ∫Àôt‚Äã(x1i)1‚àíŒ∫t‚Äã(x1i)(1+logp1\\|tŒ∏(x1i\\|xt))\\]\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad\\\\textstyle+(1-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}))\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1}^{i})}{1-\\\\kappa\\_{t}(x\\_{1}^{i})}\\\\left(1+\\\\log p^{\\\\theta}\\_{1\\|t}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]} |  | (95) |\\\n|  |  | =‚à´01dtùîºxt‚àºpt(‚ãÖ\\|x1)Œ∫Àôt1‚àíŒ∫t‚àëi=1N\\[pŒ∏1\\|t(xti\\|xt)‚àí‚àëyipŒ∏1\\|t(yi\\|xt)+\\\\displaystyle=\\\\int\\_{0}^{1}\\\\mathrm{d}t\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}\\\\sum\\_{i=1}^{N}\\\\biggr{\\[}p^{\\\\theta}\\_{1\\|t}(x\\_{t}^{i}\\|x\\_{t})-\\\\sum\\_{y^{i}}p^{\\\\theta}\\_{1\\|t}(y^{i}\\|x\\_{t})+ |  | (96) |\\\n|  |  | +(1‚àíŒ¥x1i(xti))(1+logp1\\|tŒ∏(x1i\\|xt))\\]\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad\\\\textstyle+(1-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}))\\\\left(1+\\\\log p^{\\\\theta}\\_{1\\|t}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]} |  | (97) |\\\n|  |  | =‚à´01d‚ÄãŒ∫1‚àíŒ∫ùîºxt‚àºptŒ∫(‚ãÖ\\|x1)‚àëi=1N\\[pŒ∏1\\|tŒ∫(xti\\|xt)‚àíŒ¥x1i(xti)\\\\displaystyle=\\\\int\\_{0}^{1}\\\\frac{\\\\mathrm{d}\\\\kappa}{1-\\\\kappa}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t\\_{\\\\kappa}}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{N}\\\\biggr{\\[}p^{\\\\theta}\\_{1\\|t\\_{\\\\kappa}}(x\\_{t}^{i}\\|x\\_{t})-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}) |  | (98) |\\\n|  |  | +(1‚àíŒ¥x1i(xti))(logp1\\|tŒ∫Œ∏(x1i\\|xt))\\],\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad\\\\textstyle+(1-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}))\\\\left(\\\\log p^{\\\\theta}\\_{1\\|t\\_{\\\\kappa}}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]}, |  | (99) |\\\n\\\nwhere tŒ∫subscriptùë°ùúÖt\\_{\\\\kappa} is the inverse of Œ∫tsubscriptùúÖùë°\\\\kappa\\_{t}. For token dependent schedulers we only use the Kinetic Optimal scheduler as in equation [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∫t‚Äã(x1i)=sin2‚Å°(1‚àít)‚ÄãŒ©‚Äã(x1i)sin2‚Å°Œ©‚Äã(x1i), where ‚ÄãŒ©‚Äã(x1i)=arccos‚Å°p‚Äã(x1i).formulae-sequencesubscriptùúÖùë°superscriptsubscriptùë•1ùëñsuperscript21ùë°Œ©superscriptsubscriptùë•1ùëñsuperscript2Œ©superscriptsubscriptùë•1ùëñ where Œ©superscriptsubscriptùë•1ùëñùëùsuperscriptsubscriptùë•1ùëñ\\\\kappa\\_{t}(x\\_{1}^{i})=\\\\frac{\\\\sin^{2}(1-t)\\\\Omega(x\\_{1}^{i})}{\\\\sin^{2}\\\\Omega(x\\_{1}^{i})},\\\\qquad\\\\text{ where }\\\\Omega(x\\_{1}^{i})=\\\\arccos\\\\sqrt{p(x\\_{1}^{i})}. |  | (100) |\\\n\\\nNote that Œ©‚àà\\[0,œÄ2\\]Œ©0ùúã2\\\\Omega\\\\in\\\\left\\[0,\\\\frac{\\\\pi}{2}\\\\right\\], depending on p‚Äã(x1i)ùëùsuperscriptsubscriptùë•1ùëñ\\\\sqrt{p(x\\_{1}^{i})}, we take Œ©=œÄ4Œ©ùúã4\\\\Omega=\\\\frac{\\\\pi}{4} and evaluate the integral,\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | log‚Å°p1Œ∏‚Äã(x1)‚â•superscriptsubscriptùëù1ùúÉsubscriptùë•1absent\\\\displaystyle\\\\textstyle\\\\log p\\_{1}^{\\\\theta}(x\\_{1})\\\\geq | ‚à´01dtùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1N\\[Œ∫Àôt‚Äã(xti)1‚àíŒ∫t‚Äã(xti)pŒ∏1\\|t(xti\\|xt)‚àí‚àëyiŒ∫Àôt‚Äã(yi)1‚àíŒ∫t‚Äã(yi)pŒ∏1\\|t(yi\\|xt)+\\\\displaystyle\\\\int\\_{0}^{1}\\\\mathrm{d}t\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{N}\\\\biggr{\\[}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{t}^{i})}{1-\\\\kappa\\_{t}(x\\_{t}^{i})}p^{\\\\theta}\\_{1\\|t}(x\\_{t}^{i}\\|x\\_{t})-\\\\sum\\_{y^{i}}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(y^{i})}{1-\\\\kappa\\_{t}(y^{i})}p^{\\\\theta}\\_{1\\|t}(y^{i}\\|x\\_{t})+ |  | (101) |\\\n|  |  | +(1‚àíŒ¥x1i(xti))Œ∫Àôt‚Äã(x1i)1‚àíŒ∫t‚Äã(x1i)(1+logp1\\|tŒ∏(x1i\\|xt))\\]\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad\\\\textstyle+(1-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}))\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1}^{i})}{1-\\\\kappa\\_{t}(x\\_{1}^{i})}\\\\left(1+\\\\log p^{\\\\theta}\\_{1\\|t}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]} |  | (102) |\\\n|  |  | ‚à´01dŒ∫(Œ©=œÄ4)ùîºxt‚àºpt(‚ãÖ\\|x1)1Œ∫ÀôtŒ∫‚Äã(Œ©=œÄ4)‚àëi=1N\\[Œ∫Àôt‚Äã(xti)1‚àíŒ∫t‚Äã(xti)pŒ∏1\\|tŒ∫(xti\\|xt)\\\\displaystyle\\\\int\\_{0}^{1}\\\\mathrm{d}\\\\kappa\\\\left(\\\\Omega=\\\\frac{\\\\pi}{4}\\\\right)\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\frac{1}{\\\\dot{\\\\kappa}\\_{t\\_{\\\\kappa}}\\\\left(\\\\Omega=\\\\frac{\\\\pi}{4}\\\\right)}\\\\sum\\_{i=1}^{N}\\\\biggr{\\[}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{t}^{i})}{1-\\\\kappa\\_{t}(x\\_{t}^{i})}p^{\\\\theta}\\_{1\\|t\\_{\\\\kappa}}(x\\_{t}^{i}\\|x\\_{t}) |  | (103) |\\\n|  |  | ‚àí‚àëyiŒ∫Àôt‚Äã(yi)1‚àíŒ∫t‚Äã(yi)‚Äãp1\\|tŒ∫Œ∏‚Äã(yi\\|xt)+limit-fromsubscriptsuperscriptùë¶ùëñsubscriptÀôùúÖùë°superscriptùë¶ùëñ1subscriptùúÖùë°superscriptùë¶ùëñsubscriptsuperscriptùëùùúÉconditional1subscriptùë°ùúÖconditionalsuperscriptùë¶ùëñsubscriptùë•ùë°\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad-\\\\sum\\_{y^{i}}\\\\frac{\\\\dot{\\\\kappa}\\_{t}(y^{i})}{1-\\\\kappa\\_{t}(y^{i})}p^{\\\\theta}\\_{1\\|t\\_{\\\\kappa}}(y^{i}\\|x\\_{t})+ |  | (104) |\\\n|  |  | +(1‚àíŒ¥x1i(xti))Œ∫Àôt‚Äã(x1i)1‚àíŒ∫t‚Äã(x1i)(1+logp1\\|tŒ∫Œ∏(x1i\\|xt))\\],\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\quad\\\\textstyle+(1-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}))\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x\\_{1}^{i})}{1-\\\\kappa\\_{t}(x\\_{1}^{i})}\\\\left(1+\\\\log p^{\\\\theta}\\_{1\\|t\\_{\\\\kappa}}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]}, |  | (105) |\\\n\\\nwhere Œ∫t‚Äã(Œ©=œÄ4)subscriptùúÖùë°Œ©ùúã4\\\\kappa\\_{t}\\\\left(\\\\Omega=\\\\frac{\\\\pi}{4}\\\\right) is the Kinetic Optimal scheduler with Œ©=œÄ4Œ©ùúã4\\\\Omega=\\\\frac{\\\\pi}{4}, and tŒ∫subscriptùë°ùúÖt\\_{\\\\kappa} is the inverse of Œ∫t‚Äã(Œ©=œÄ4)subscriptùúÖùë°Œ©ùúã4\\\\kappa\\_{t}\\\\left(\\\\Omega=\\\\frac{\\\\pi}{4}\\\\right). Now that we have a more fair estimator all the schedulers we us, for each x1subscriptùë•1x\\_{1} we discretize\\\nŒ∫‚àà\\[0,1‚àí1‚Äãe‚àí4\\]ùúÖ011superscriptùëí4\\\\kappa\\\\in\\[0,1-1e^{-4}\\] to 102410241024 using\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∫j=(j+œµ)‚Äã1‚àí1‚Äãe‚àí41024,j=0,‚Ä¶,1023,œµ‚àºU‚Äã\\[0,1\\].formulae-sequencesubscriptùúÖùëóùëóitalic-œµ11superscriptùëí41024formulae-sequenceùëó0‚Ä¶1023similar-toitalic-œµùëà01\\\\kappa\\_{j}=(j+{\\\\epsilon})\\\\frac{1-1e^{-4}}{1024},\\\\qquad j=0,...,1023,{\\\\epsilon}\\\\sim U\\[0,1\\]. |  | (106) |\\\n\\\n### E.2 Inorganic material generation\\\n\\\n#### Material representation.\\\n\\\nA crystal is represented by a parallelepiped in 3D space with periodic boundary conditions, as in previous works (Miller et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib36 \"\"); Xie et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib62 \"\")).\\\nThe model input is a variable-length sequences with length 6+4‚ãÖa6‚ãÖ4ùëé6+4\\\\cdot a, where aùëéa is the number of atoms in the unit cell.\\\nThe first 333 tokens represent the lengths of the sides of the parallelepiped, while the next 333 represent the angles between the sides.\\\nEvery atom is comprised of 444 tokens: a discrete atom type and 3 continuous numbers representing the atom position inside the parallelopiped in cartesian coordinates.\\\nThe coordinates are represented relative to the side lengths of the parallelopiped, and are therefore restricted to the interval \\[0,1\\]01\\[0,1\\] (known as _fractional coordinates_).\\\n\\\nWhile lengths, angles, and fractional coordinates are all continuous quantities, we discretize them uniformly to generate tokens, following the same tokenization method from Gruver et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib22 \"\")) ‚Äì lengths (in √Ö) are truncated to one decimal place, angles (in degrees) are represented as integers, and fractional coordinates are truncated to two decimal places.\\\nThe token set for these attributes can be created by the following python code:\\\n\\\n```\\\n    tokens_lens = [f\"{i/10:.1f}\" for i in range(500)]\\\n    tokens_angles = [str(x) for x in range(180)]\\\n    tokens_frac = [f\"0.{i:02d}\" for i in range(100)] + [\"1.00\"]\\\n\\\n```\\\n\\\nTokens for atoms are taken from Pymatgen (Ong et al., [2013](https://ar5iv.org/html/2412.03487#bib.bib38 \"\")) like so\\\n\\\n```\\\n    from pymatgen.core.periodic_table import Element\\\n    tokens_atom = [Element.from_Z(z).name for z in range(1, 95)]\\\n\\\n```\\\n\\\nThe overall vocabulary is composed of all previously mentioned sub-vocabularies, plus 333 special tokens: beggining-of-sentence (BOS), masking, and padding, totalling 500+180+101+94+3=878500180101943878500+180+101+94+3=878.\\\n\\\n#### Model implementation.\\\n\\\nAll of our models listed in [Table2](https://ar5iv.org/html/2412.03487#S8.T2 \"In 8.1 Text generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), namely, DFM, Kinetic Optimal DFM (KO-DFM), and Autoregressive (AR), use a modified version of the Diffusion Transformer (DiT) (Peebles & Xie, [2023](https://ar5iv.org/html/2412.03487#bib.bib42 \"\")) implementation from Lou et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib32 \"\")). The DFM model uses the cubic scheduler Œ∫t=t3subscriptùúÖùë°superscriptùë°3\\\\kappa\\_{t}=t^{3}, while the KO-DFM model uses the kinetic optimal scheduler in equation [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\nTwo sequences that differ only in a permutation of their atoms, along with their fractional coordinates, represent the same crystal.\\\nFor DFM and KO-DFM, we modified DiT to account for this invariance by transforming the input before applying the attention mechanism.\\\nWe flatten each quadruple of embeddings representing an atom (i.e., atom type plus 333 fractional coordinates) and apply a linear layer with a SiLU (Elfwing et al., [2018](https://ar5iv.org/html/2412.03487#bib.bib15 \"\")) activation to create a single representation for the atom.\\\nThis brings the sequence length from 6+4‚ãÖa6‚ãÖ4ùëé6+4\\\\cdot a to 6+a6ùëé6+a.\\\nPositional embeddings are then added, where the same positional embedding is added to all aùëéa output embeddings of the previous step, which establishes the invariance.\\\nAfter the attention mechanism, 444 independent linear layers are applied to each of the aùëéa outputs, increasing the sequence length from 6+a6ùëé6+a back to 6+4‚ãÖa6‚ãÖ4ùëé6+4\\\\cdot a, before computing the logits.\\\n\\\nFor the AR model, we replaced rotary embeddings (Su et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib53 \"\")) with sinusoidal positional encodings.\\\nNote that permutation invariance cannot be enforced in the same way as DFM and KO-DFM, as the model generates tokens auto-regressively.\\\nThe AR model performs conditional generation by generating an embedding for the number of atoms a‚àà{0,‚Ä¶,amax‚àí1}ùëé0‚Ä¶subscriptùëé1a\\\\in\\\\{0,...,a\\_{\\\\max}-1\\\\}, where amax=20subscriptùëé20a\\_{\\\\max}=20 for the MP-20 dataset in [Table2](https://ar5iv.org/html/2412.03487#S8.T2 \"In 8.1 Text generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\nThe embedding is then passed to the same conditioning mechanism (adaLN) present in the original DiT architecture (Peebles & Xie, [2023](https://ar5iv.org/html/2412.03487#bib.bib42 \"\")).\\\n\\\n#### Training and sampling.\\\n\\\nHyperparameter values used during training are listed in [Table4](https://ar5iv.org/html/2412.03487#A5.T4 \"In Training and sampling. ‚Ä£ E.2 Inorganic material generation ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). DFM and KO-DFM use the same values.\\\n\\\n| Param. | Hidden dim. | Attn. Blocks | Attn. Heads | Dropout | Batch Size | Learn. rate |\\\n| --- | --- | --- | --- | --- | --- | --- |\\\n| AR | 288288288 | 161616 | 161616 | 0.10.10.1 | 102410241024 | 1‚Äãe‚àí31e31\\\\mathrm{e}{-3} |\\\n| DFM, KO-DFM | 256256256 | 161616 | 161616 | 0.10.10.1 | 102410241024 | 1‚Äãe‚àí31e31\\\\mathrm{e}{-3} |\\\n\\\nTable 4: Hyperparameters used to train the DiT models for material generation.\\\n\\\nThe hidden dimension of KO-DFM and DFM was lowered to roughly match the same number of parameters as the AR model and FlowMM (Miller et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib36 \"\")) (around 252525 million), due to the additional layers required to ensure permutation invariance.\\\nModels are trained to predict the next token by minimizing the cross-entropy loss (equation [11](https://ar5iv.org/html/2412.03487#S2.E11 \"Equation 11 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\n\\\nDuring sampling, the softmax temperature was fixed to 0.70.70.7 for DFM and KO-DFM, and 1.01.01.0 for the AR model.\\\nBoth DFM and KO-DFM have noise distribution equal to a delta function on the all masked sequence (as in Gat et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\"))).\\\nDFM uses the convex linear scheduler (Œ∫t=tsubscriptùúÖùë°ùë°\\\\kappa\\_{t}=t), while KO-DFM uses the proposed kinetic-optimal scheduler ( [33](https://ar5iv.org/html/2412.03487#S4.E33 \"Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\n\\\n#### Evaluation metrics\\\n\\\nOur primary metric for material generation is based on thermodynamic stability, a key indicator of the synthesizability of materials. Thermodynamic stability is measured by comparing the energy of a material to a database of previously known materials with the same elements. Formally, we define Energy above Hull (Eh‚Äãu‚Äãl‚Äãlsuperscriptùê∏‚Ñéùë¢ùëôùëôE^{hull}) as the distance in energy landscape between the generated material and a convex hull of energies constructed from these reference database of materials. Stable materials have Eh‚Äãu‚Äãl‚Äãl<0superscriptùê∏‚Ñéùë¢ùëôùëô0E^{hull}<0, that is the energy of the new material is below the convex hull. Following Miller et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib36 \"\")), we define our Stability Rate metric as the percentage of generated materials that are stable, i.e. Eh‚Äãu‚Äãl‚Äãl<0superscriptùê∏‚Ñéùë¢ùëôùëô0E^{hull}<0 and n-ary ‚â•2absent2\\\\geq 2, where n-ary of a material is the number of unique elements in it.\\\n\\\nTo compute the energies, we follow the methodology from Miller et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib36 \"\")): we first perform structure relaxations using the CHGNet model (Deng et al., [2023](https://ar5iv.org/html/2412.03487#bib.bib11 \"\")), followed by density functional theory (DFT) (Kohn & Sham, [1965](https://ar5iv.org/html/2412.03487#bib.bib27 \"\")) calculations. We generated 10,000 materials to compute the stability rate.\\\n\\\nDue to the high computational cost of performing these energy calculations, Xie et al. ( [2021](https://ar5iv.org/html/2412.03487#bib.bib62 \"\")) proposed a number of proxy metrics, which we also include for completeness:\\\n\\\n1. 1.\\\n\\\n\\\nStructural Validity: Percentage of generated materials where all pairwise interatomic distances are greather than 0.5 √Ö.\\\n\\\n2. 2.\\\n\\\n\\\nCompositional Validity: Percentage of generated materials that are determined to be charge-neutral using the SMACT heuristic system Davies et al. ( [2019](https://ar5iv.org/html/2412.03487#bib.bib10 \"\")).\\\n\\\n3. 3.\\\n\\\n\\\nCoverage Precision & Recall:\\\nPrecision and Recall metrics computed by comparing 10000 generated structures to the MP-20 test set. Precision is the percentage of generated structures that are close to some test structure, while recall is the percentage of test structures which are close to some generated structure. Closeness is evaluated using structural and compositional fingerprints (Zimmermann & Jain, [2020](https://ar5iv.org/html/2412.03487#bib.bib67 \"\"); Ward et al., [2016](https://ar5iv.org/html/2412.03487#bib.bib61 \"\")).\\\n\\\n4. 4.\\\n\\\n\\\nWasserstein Distances of Property Distributions:\\\nWasserstein distances between the distribution of computed properties between the test set and the generated materials. We compute these distances for two properties: density (œÅùúå\\\\rho), and number of unique atoms (NelsubscriptùëÅelN\\_{\\\\text{el}})\\\n\\\n\\\nWe emphasize that most of these proxy metrics have become saturated and are not very good at distinguishing state-of-the-art models.\\\n\\\n### E.3 Image generation - CIFAR10\\\n\\\n#### Models\\\n\\\nAll our CIFAR10 models use the U-Net architecture as in Dhariwal & Nichol ( [2021](https://ar5iv.org/html/2412.03487#bib.bib14 \"\")), with channels 96 , depth 5, channels multiple \\[3,4,4\\], heads channels 64, and attention resolution 16. Additionally, we make two changes to the architecture as done in Gat et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")): (i) We replace the first layer with an embedding table of size 256√ó9625696256\\\\times 96, and we stack the channel features such that the input to the U-Net is of shape 288√ó32√ó322883232288\\\\times 32\\\\times 32. (ii) We enlarge the size of the final layer to output a tensor of shape 3√ó32√ó32√ó256332322563\\\\times 32\\\\times 32\\\\times 256. Overall parameters count of 113M. For optimization we use dropout rate of 0.3, and Adam optimizer with Œ≤1=0.9subscriptùõΩ10.9\\\\beta\\_{1}=0.9 and Œ≤2=0.999subscriptùõΩ20.999\\\\beta\\_{2}=0.999, a learning rate of 1e-4. We trained with an effective batch size pf 512 for approximately 300K iterations.\\\n\\\n#### The conditional path.\\\n\\\nFor our metric induced probability path ( [27](https://ar5iv.org/html/2412.03487#S4.E27 \"Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) on pixel space we have a natural choice of metric. We embed ùíØ={0,‚Ä¶,255}ùíØ0‚Ä¶255{\\\\mathcal{T}}=\\\\left\\\\{0,...,255\\\\right\\\\} in the interval \\[‚àí1,1\\]‚äÇ‚Ñù11‚Ñù\\[-1,1\\]\\\\subset\\\\mathbb{R} using the map emb‚Äã(x)=2255‚Äãx‚àí1embùë•2255ùë•1\\\\mathrm{emb}(x)=\\\\frac{2}{255}x-1 and with the lpsubscriptùëôùëùl\\_{p} distance,\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | d‚Äã(x,x1)=\\|emb‚Äã(x)‚àíemb‚Äã(x1)\\|lp,dùë•subscriptùë•1superscriptembùë•embsubscriptùë•1lp\\\\textrm{d}(x,x\\_{1})=\\\\left\\|\\\\mathrm{emb}(x)-\\\\mathrm{emb}(x\\_{1})\\\\right\\|^{\\\\text{lp}}, |  |\\\n\\\nwhere lp is a Hyper-parameter. For the Œ≤tsubscriptùõΩùë°\\\\beta\\_{t} scheduler we use,\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | Œ≤t=c‚Äã(t1‚àít)a,subscriptùõΩùë°ùëêsuperscriptùë°1ùë°ùëé\\\\beta\\_{t}=c\\\\left(\\\\frac{t}{1-t}\\\\right)^{a}, |  |\\\n\\\nwhere aùëéa and cùëêc are Hyper-parameters. We find that best results are achieved with lp=3lp3\\\\text{lp}=3, a=5ùëé5a=5, and c=1ùëê1c=1. For the other baselines in Figure [2](https://ar5iv.org/html/2412.03487#S8.F2 \"Figure 2 ‚Ä£ 8.1 Text generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") we follow (Gat et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib19 \"\")).\\\n\\\n### E.4 Image generation - Face-blurred ImageNet256√ó\\\\times256\\\n\\\nOur ImageNet256 experiments are conducted on the face-blurred variant of the ImageNet benchmark dataset scaled to 256x256 pixels. We first train a tokenizer model (encoder, quantizer and decoder) that maps the images to a discrete latent representation and back. Then, we train a latent generative model to generate latent representations conditional on the image class.\\\n\\\n#### Tokenizer details.\\\n\\\nThe tokenizer is realized as a VQVAE. Our architecture matches that of VQGAN (Esser et al., [2021](https://ar5iv.org/html/2412.03487#bib.bib16 \"\")). It applies a 16x downscaling to the image with a vocabulary size of 16384. The VQVAE is trained with the VQGAN loss for 40 epochs with a batch size of 128. We optimize using Adam with learning rate 1‚Äãe‚àí41ùëí41e-4, Œ≤1=0.9subscriptùõΩ10.9\\\\beta\\_{1}=0.9, and Œ≤1=0.95subscriptùõΩ10.95\\\\beta\\_{1}=0.95. We apply an exponential moving average to the VQVAE weights with decay rate of 0.999. After the training is complete, our VQVAE model reached an rFID value of 2.20, which matches the rFID reported by Sun et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")) on non-face-blurred ImageNet256.\\\n\\\n#### The baseline\\\n\\\nThe baseline with a masked source distribution uses the cubic scheduler Œ∫t=t3subscriptùúÖùë°superscriptùë°3\\\\kappa\\_{t}=t^{3}.\\\n\\\n#### The metric path.\\\n\\\nOur metric-induced probability path uses the euclidean distance of the token VQVAE embeddings as the distance function with lplp\\\\mathrm{lp} being a free parameter:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d‚Äã(x,x1)=\\|emb‚Äã(x)‚àíemb‚Äã(x1)\\|2lp.dùë•subscriptùë•1superscriptsubscriptembùë•embsubscriptùë•12lp\\\\textrm{d}(x,x\\_{1})=\\|\\\\mathrm{emb}(x)-\\\\mathrm{emb}(x\\_{1})\\|\\_{2}^{\\\\mathrm{lp}}\\\\,. |  | (107) |\\\n\\\nFurthermore, we parameterize Œ≤tsubscriptùõΩùë°\\\\beta\\_{t} as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ≤t=c‚Äã(t1‚àít)a,subscriptùõΩùë°ùëêsuperscriptùë°1ùë°ùëé\\\\beta\\_{t}=c\\\\left(\\\\frac{t}{1-t}\\\\right)^{a}\\\\,, |  | (108) |\\\n\\\nwith cùëêc and aùëéa being free parameters.\\\n\\\nThese three parameters are costly to search, because each configuration requires a separate model to train. We tune these parameters visually by plotting the samples along the conditional path and looking for configurations that make use of the whole time interval \\[0,1\\]. We settled on a=0.9ùëé0.9a=0.9, c=3ùëê3c=3 and lp=4lp4\\\\mathrm{lp}=4 (see [Figure4](https://ar5iv.org/html/2412.03487#A5.F4 \"In The metric path. ‚Ä£ E.4 Image generation - Face-blurred ImageNet256√ó256 ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))\\\n\\\nt=0.0ùë°0.0t=0.0t=0.125ùë°0.125t=0.125t=0.25ùë°0.25t=0.25t=0.375ùë°0.375t=0.375t=0.5ùë°0.5t=0.5t=0.625ùë°0.625t=0.625t=0.75ùë°0.75t=0.75t=0.875ùë°0.875t=0.875t=1.0ùë°1.0t=1.0\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/cond_path_0.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/cond_path_1.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/cond_path_2.png)\\\n\\\nFigure 4: The conditional path for a=0.9ùëé0.9a=0.9, c=3ùëê3c=3 and lp=4lp4\\\\mathrm{lp}=4. This path is advantageous because the the path smoothly interpolates from noise to image while utilizing the whole interval t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\].\\\n\\\n#### Latent Generative model details.\\\n\\\nOur generative model uses the Llama architecture that is also used by the LlamaGen model (Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")). Our comparisons are done on the Llama-B architecture variant with 111M parameters. For training hyperparameters, we used the exact configuration proposed in Sun et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")): batch size of 256, learning rate of 1e-4 with 2500 warmup steps, weight decay of 0.05, Adam optimizer with Œ≤1=0.9subscriptùõΩ10.9\\\\beta\\_{1}=0.9 and Œ≤2=0.95subscriptùõΩ20.95\\\\beta\\_{2}=0.95, gradient norm of 1.0 and class drop probability of 0.1. We used the same ten-crop data augmentation for training that (Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")) used.\\\n\\\nFollowing the guidance of (Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")), the autoregressive and masked models were trained for 300 epochs.\\\nWe found that the metric path model benefited from further training, so we trained this variant for 600 epochs.\\\n\\\nThe DFM models required minor architecture adjustments:\\\n\\\n- ‚Ä¢\\\n\\\n\\\nThe masked configuration uses non-causal attention.\\\n\\\n- ‚Ä¢\\\n\\\n\\\nThe metric path configuration uses non-causal attention and we also prepend a time embedding token (sinusoidal embedding) before the class label token to enable the model to learn the time dependency.\\\n\\\n\\\n#### Evaluation.\\\n\\\nWe report the FID of 50,000 generated images w.r.t. the training set. Note that our LlamaGen reproduction obtains a lower FID value then reported in Sun et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")) (4.81 vs 5.46). This difference is due to us using the face-blurred variant of ImageNet. While Sun et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\")) compares against the pre-computed statistics of non-face-blurred ImageNet, we compile the statistics of face-blurred ImageNet, including training data augmentations.\\\n\\\n#### Ablations.\\\n\\\nWe show ablations for CFG scale ( [Table5](https://ar5iv.org/html/2412.03487#A5.T5 \"In Ablations. ‚Ä£ E.4 Image generation - Face-blurred ImageNet256√ó256 ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and NFE ( [Table6](https://ar5iv.org/html/2412.03487#A5.T6 \"In Ablations. ‚Ä£ E.4 Image generation - Face-blurred ImageNet256√ó256 ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\n\\\n| CFG scale | 1.0 | 1.1 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6 | 1.7 | 1.8 | 1.9 | 2.0 | 2.1 | 2.2 | 2.3 | 2.4 | 2.5 |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n| LlamaGen, FID: | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì | 5.77 | 5.18 | 4.91 | 4.81 | 5.02 | 5.26 | 5.63 | 6.11 | 6.56 | 7.12 | 7.70 |\\\n| DFM masked path, NFE=100, FID: | 17.78 | 12.85 | 9.53 | 7.45 | 6.28 | 5.78 | 5.76 | 6.03 | 6.56 | 7.20 | 7.97 | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì |\\\n| DFM metric path, NFE=100, FID: | 8.58 | 5.99 | 4.87 | 4.50 | 4.82 | 5.47 | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì | ‚Äì |\\\n\\\nTable 5: Ablation of CFG scale for LlamaGen and DFM models. The missing cells were not evaluated because they are far from the optima.\\\n\\\n| NFE | 50 | 100 | 150 | 200 | 250 |\\\n| --- | --- | --- | --- | --- | --- |\\\n| DFM masked path, CFG=1.6, FID: | 5.73 | 5.72 | 5.74 | 5.71 | 5.82 |\\\n| DFM metric path, CFG=1.3, FID: | 4.78 | 4.50 | 4.69 | 4.87 | 4.98 |\\\n\\\nTable 6: Ablation of NFE for the DFM models.\\\n\\\n## Appendix F Relation to SEDD (Lou et al., [2024](https://ar5iv.org/html/2412.03487\\#bib.bib32 \"\"))\\\n\\\nIn this section we explain the relation between our method and SEDD (Lou et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib32 \"\")). We focus on three main points:\\\n\\\n1. 1.\\\n\\\n\\\n_Generality of probability paths._ SEDD starting point is a diffusion matrix Qti‚Äã(xi,zi)subscriptsuperscriptùëÑùëñùë°superscriptùë•ùëñsuperscriptùëßùëñQ^{i}\\_{t}(x^{i},z^{i}) and requires a closed-form conditional probability pt‚Äã(xi\\|x1i)subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i}) path solving the Kolmogorov equation (linear ODE) with this rate matrix. This entails solving a (general) \\|ùíØ\\|ùíØ\\\\left\\|{\\\\mathcal{T}}\\\\right\\| dimensional ODE which can be hard to do in closed form. Therefore SEDD resorts to rates of the form Qti‚Äã(xi,zi)=œÉt‚ÄãQi‚Äã(xi,zi)superscriptsubscriptùëÑùë°ùëñsuperscriptùë•ùëñsuperscriptùëßùëñsubscriptùúéùë°superscriptùëÑùëñsuperscriptùë•ùëñsuperscriptùëßùëñQ\\_{t}^{i}(x^{i},z^{i})=\\\\sigma\\_{t}Q^{i}(x^{i},z^{i}). In contrast, our method offers a closed form generating rates (velocity) for _every_ conditional probability path, see equation [16](https://ar5iv.org/html/2412.03487#S4.E16 \"Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\n2. 2.\\\n\\\n\\\n_Score-velocity conversion._ The concrete score function is a particular way to parameterize a probability velocity which is given by\\\n\\\n\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)=Qti‚Äã(xi,zi)‚Äãsti‚Äã(xi,z).superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptsuperscriptùëÑùëñùë°superscriptùë•ùëñsuperscriptùëßùëñsuperscriptsubscriptùë†ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z)=Q^{i}\\_{t}(x^{i},z^{i})s\\_{t}^{i}(x^{i},z). |  | (109) |\\\n\\\n3. 3.\\\n\\\n\\\n_Loss._ The training loss of SEDD can be seen as instance of our ELBO ( [36](https://ar5iv.org/html/2412.03487#S6.E36 \"Equation 36 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) when using the concrete score parameterization.\\\n\\\n\\\n#### Probability velocity vs. concrete score.\\\n\\\nUsing our notation, the noising process of SEDD taking a distribution p1subscriptùëù1p\\_{1} at time t=1ùë°1t=1, to a some simple distribution p0subscriptùëù0p\\_{0} at time t=0ùë°0t=0 is defined by the transition probability\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñô‚Äã(Xt‚àíh=x\\|Xt=z)=Œ¥z‚Äã(x)+h‚ÄãQt‚Äã(x,z)+o‚Äã(h),‚Ñôsubscriptùëãùë°‚Ñéconditionalùë•subscriptùëãùë°ùëßsubscriptùõøùëßùë•‚ÑésubscriptùëÑùë°ùë•ùëßùëú‚Ñé\\\\mathbb{P}(X\\_{t-h}=x\\ \\|\\ X\\_{t}=z)=\\\\delta\\_{z}(x)+hQ\\_{t}(x,z)+o(h), |  | (110) |\\\n\\\nwhere Qt‚àà‚Ñù\\|ùíÆ\\|√ó\\|ùíÆ\\|subscriptùëÑùë°superscript‚ÑùùíÆùíÆQ\\_{t}\\\\in\\\\mathbb{R}^{\\\\left\\|{\\\\mathcal{S}}\\\\right\\|\\\\times\\\\left\\|{\\\\mathcal{S}}\\\\right\\|} is called _diffusion matrix_ and it satisfies the rate conditions as in equation [5](https://ar5iv.org/html/2412.03487#S2.E5 \"Equation 5 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). The reverse process, taking the distribution p0subscriptùëù0p\\_{0} at time t=0ùë°0t=0 to the distribution p1subscriptùëù1p\\_{1} at t=1ùë°1t=1 is given by the diffusion matrix,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Q¬Øt‚Äã(x,z)=Qt‚Äã(z,x)‚Äãpt‚Äã(x)pt‚Äã(z)subscript¬ØùëÑùë°ùë•ùëßsubscriptùëÑùë°ùëßùë•subscriptùëùùë°ùë•subscriptùëùùë°ùëß\\\\bar{Q}\\_{t}(x,z)=Q\\_{t}(z,x)\\\\frac{p\\_{t}(x)}{p\\_{t}(z)} |  | (111) |\\\n\\\nwhere the marginal ptsubscriptùëùùë°p\\_{t} is determined by the noising process ( [110](https://ar5iv.org/html/2412.03487#A6.E110 \"Equation 110 ‚Ä£ Probability velocity vs. concrete score. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and p1subscriptùëù1p\\_{1} the distribution at the boundary t=1ùë°1t=1. The transition probability of the reverse process is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñô‚Äã(Xt+h=x\\|Xt=z)=Œ¥z‚Äã(x)+h‚ÄãQ¬Øt‚Äã(x,z)+o‚Äã(h),‚Ñôsubscriptùëãùë°‚Ñéconditionalùë•subscriptùëãùë°ùëßsubscriptùõøùëßùë•‚Ñésubscript¬ØùëÑùë°ùë•ùëßùëú‚Ñé\\\\mathbb{P}(X\\_{t+h}=x\\ \\|\\ X\\_{t}=z)=\\\\delta\\_{z}(x)+h\\\\bar{Q}\\_{t}(x,z)+o(h), |  | (112) |\\\n\\\nTo make the process tractable, the noising diffusion matrix that is chosen only allows transitions from states z‚ààùíÆùëßùíÆz\\\\in{\\\\mathcal{S}} to x‚ààùíÆùë•ùíÆx\\\\in{\\\\mathcal{S}} that differ by single token as in equation [6](https://ar5iv.org/html/2412.03487#S2.E6 \"Equation 6 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Qt‚Äã(x,z)=‚àëi=1DQti‚Äã(xi,zi)‚Äã‚àèj‚â†iŒ¥zj‚Äã(xj),subscriptùëÑùë°ùë•ùëßsuperscriptsubscriptùëñ1ùê∑superscriptsubscriptùëÑùë°ùëñsuperscriptùë•ùëñsuperscriptùëßùëñsubscriptproductùëóùëñsubscriptùõøsuperscriptùëßùëósuperscriptùë•ùëóQ\\_{t}(x,z)=\\\\sum\\_{i=1}^{D}Q\\_{t}^{i}(x^{i},z^{i})\\\\prod\\_{j\\\\neq i}\\\\delta\\_{z^{j}}(x^{j}), |  | (113) |\\\n\\\nwhere Qi‚àà‚Ñù\\|ùíØ\\|√ó\\|ùíØ\\|superscriptùëÑùëñsuperscript‚ÑùùíØùíØQ^{i}\\\\in\\\\mathbb{R}^{\\\\left\\|{\\\\mathcal{T}}\\\\right\\|\\\\times\\\\left\\|{\\\\mathcal{T}}\\\\right\\|} and satisfy the rate conditions ( [5](https://ar5iv.org/html/2412.03487#S2.E5 \"Equation 5 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")). In this case the diffusion matrix of the reverse process is,\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | Q¬Øt‚Äã(x,z)subscript¬ØùëÑùë°ùë•ùëß\\\\displaystyle\\\\bar{Q}\\_{t}(x,z) | =Qt‚Äã(z,x)‚Äãpt‚Äã(x)pt‚Äã(z)absentsubscriptùëÑùë°ùëßùë•subscriptùëùùë°ùë•subscriptùëùùë°ùëß\\\\displaystyle=Q\\_{t}(z,x)\\\\frac{p\\_{t}(x)}{p\\_{t}(z)} |  | (114) |\\\n|  |  | =‚àëi=1DQti‚Äã(zi,xi)‚Äã‚àèj‚â†iŒ¥xj‚Äã(zj)‚Äãpt‚Äã(x)pt‚Äã(z)absentsuperscriptsubscriptùëñ1ùê∑subscriptsuperscriptùëÑùëñùë°superscriptùëßùëñsuperscriptùë•ùëñsubscriptproductùëóùëñsubscriptùõøsuperscriptùë•ùëósuperscriptùëßùëósubscriptùëùùë°ùë•subscriptùëùùë°ùëß\\\\displaystyle=\\\\sum\\_{i=1}^{D}Q^{i}\\_{t}(z^{i},x^{i})\\\\prod\\_{j\\\\neq i}\\\\delta\\_{x^{j}}(z^{j})\\\\frac{p\\_{t}(x)}{p\\_{t}(z)} |  | (115) |\\\n|  |  | =‚àëi=1DQti‚Äã(zi,xi)‚Äãsti‚Äã(xi,z)‚Äã‚àèj‚â†iŒ¥zj‚Äã(xj),absentsuperscriptsubscriptùëñ1ùê∑subscriptsuperscriptùëÑùëñùë°superscriptùëßùëñsuperscriptùë•ùëñsuperscriptsubscriptùë†ùë°ùëñsuperscriptùë•ùëñùëßsubscriptproductùëóùëñsubscriptùõøsuperscriptùëßùëósuperscriptùë•ùëó\\\\displaystyle=\\\\sum\\_{i=1}^{D}Q^{i}\\_{t}(z^{i},x^{i})s\\_{t}^{i}(x^{i},z)\\\\prod\\_{j\\\\neq i}\\\\delta\\_{z^{j}}(x^{j}), |  | (116) |\\\n\\\nwhere st‚Äã(xi,z)subscriptùë†ùë°superscriptùë•ùëñùëßs\\_{t}(x^{i},z) is called the _concrete score function_ and it is defined as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | sti‚Äã(xi,z)=pt‚Äã(z1,‚Ä¶,zi‚àí1,xi,zi+1,‚Ä¶,zD)pt‚Äã(z1,‚Ä¶,zi‚àí1,zi,zi+1,‚Ä¶,zD).superscriptsubscriptùë†ùë°ùëñsuperscriptùë•ùëñùëßsubscriptùëùùë°superscriptùëß1‚Ä¶superscriptùëßùëñ1superscriptùë•ùëñsuperscriptùëßùëñ1‚Ä¶superscriptùëßùê∑subscriptùëùùë°superscriptùëß1‚Ä¶superscriptùëßùëñ1superscriptùëßùëñsuperscriptùëßùëñ1‚Ä¶superscriptùëßùê∑s\\_{t}^{i}(x^{i},z)=\\\\frac{p\\_{t}(z^{1},...,z^{i-1},x^{i},z^{i+1},...,z^{D})}{p\\_{t}(z^{1},...,z^{i-1},z^{i},z^{i+1},...,z^{D})}. |  | (117) |\\\n\\\nConsidering the boundary condition at time t=1ùë°1t=1 to be the data distribution, p1‚â°qsubscriptùëù1ùëûp\\_{1}\\\\equiv q, since in our notation the velocity of reverse process is ut‚Äã(x,z)=Q¬Øt‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßsubscript¬ØùëÑùë°ùë•ùëßu\\_{t}(x,z)=\\\\bar{Q}\\_{t}(x,z) we have that (comparing equation [116](https://ar5iv.org/html/2412.03487#A6.E116 \"Equation 116 ‚Ä£ Probability velocity vs. concrete score. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and equation [7](https://ar5iv.org/html/2412.03487#S2.E7 \"Equation 7 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)=Qti‚Äã(zi,xi)‚Äãsti‚Äã(xi,z).superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptsuperscriptùëÑùëñùë°superscriptùëßùëñsuperscriptùë•ùëñsuperscriptsubscriptùë†ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z)=Q^{i}\\_{t}(z^{i},x^{i})s\\_{t}^{i}(x^{i},z). |  | (118) |\\\n\\\nIn the next paragraph we show that for the boundary condition p1‚â°Œ¥x1subscriptùëù1subscriptùõøsubscriptùë•1p\\_{1}\\\\equiv\\\\delta\\_{x\\_{1}}, the time marginal of the noising process is factorized,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(x\\|x1)=‚àèi=1Dpt‚Äã(xi\\|x1i).subscriptùëùùë°conditionalùë•subscriptùë•1superscriptsubscriptproductùëñ1ùê∑subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x\\|x\\_{1})=\\\\prod\\_{i=1}^{D}p\\_{t}(x^{i}\\|x\\_{1}^{i}). |  | (119) |\\\n\\\nIn this case the conversion from concrete score to the probability velocity is,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(xi,zi\\|x1i)=Qt‚Äã(zi,xi)‚Äãpt‚Äã(xi\\|x1i)pt‚Äã(zi\\|x1i).subscriptùë¢ùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptùëÑùë°superscriptùëßùëñsuperscriptùë•ùëñsubscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñsubscriptùëùùë°conditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñu\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})=Q\\_{t}(z^{i},x^{i})\\\\frac{p\\_{t}(x^{i}\\|x\\_{1}^{i})}{p\\_{t}(z^{i}\\|x\\_{1}^{i})}. |  | (120) |\\\n\\\nConsidering equation [9](https://ar5iv.org/html/2412.03487#S2.E9 \"Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), we see that the relation between the concrete score and the probability velocity in equation [118](https://ar5iv.org/html/2412.03487#A6.E118 \"Equation 118 ‚Ä£ Probability velocity vs. concrete score. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") holds only if Qti‚Äã(xi,zi)superscriptsubscriptùëÑùë°ùëñsuperscriptùë•ùëñsuperscriptùëßùëñQ\\_{t}^{i}(x^{i},z^{i}) is independent of x1subscriptùë•1x\\_{1}.\\\n\\\n#### The conditional probability path.\\\n\\\nThe conditional probability path is the marginal of the noising process when taking p1‚â°Œ¥x1subscriptùëù1subscriptùõøsubscriptùë•1p\\_{1}\\\\equiv\\\\delta\\_{x\\_{1}}. Hence, the relation between the diffusion matrix QtsubscriptùëÑùë°Q\\_{t} and the conditional probability path is given by an ODE,\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | dd‚Äãt‚Äãp1‚àít‚Äã(x\\|x1)ùëëùëëùë°subscriptùëù1ùë°conditionalùë•subscriptùë•1\\\\displaystyle\\\\frac{d}{dt}p\\_{1-t}(x\\|x\\_{1}) | =‚àëz‚ààùíÆQ1‚àít‚Äã(x,z)‚Äãp1‚àít‚Äã(z\\|x1)absentsubscriptùëßùíÆsubscriptùëÑ1ùë°ùë•ùëßsubscriptùëù1ùë°conditionalùëßsubscriptùë•1\\\\displaystyle=\\\\sum\\_{z\\\\in{\\\\mathcal{S}}}Q\\_{1-t}(x,z)p\\_{1-t}(z\\|x\\_{1}) |  | (121) |\\\n|  |  | =‚àëz‚ààùíÆ‚àëi=1DQ1‚àíti‚Äã(xi,zi)‚Äã‚àèj‚â†iŒ¥zj‚Äã(xj)‚Äãp1‚àít‚Äã(x1).absentsubscriptùëßùíÆsuperscriptsubscriptùëñ1ùê∑superscriptsubscriptùëÑ1ùë°ùëñsuperscriptùë•ùëñsuperscriptùëßùëñsubscriptproductùëóùëñsubscriptùõøsuperscriptùëßùëósuperscriptùë•ùëósubscriptùëù1ùë°subscriptùë•1\\\\displaystyle=\\\\sum\\_{z\\\\in{\\\\mathcal{S}}}\\\\sum\\_{i=1}^{D}Q\\_{1-t}^{i}(x^{i},z^{i})\\\\prod\\_{j\\\\neq i}\\\\delta\\_{z^{j}}(x^{j})p\\_{1-t}(x\\_{1}). |  | (122) |\\\n\\\nOne can check that indeed the factorized conditional probability path, i.e., pt‚Äã(x\\|x1)=‚àèi=1Dpt‚Äã(xi\\|x1i)subscriptùëùùë°conditionalùë•subscriptùë•1superscriptsubscriptproductùëñ1ùê∑subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x\\|x\\_{1})=\\\\prod\\_{i=1}^{D}p\\_{t}(x^{i}\\|x\\_{1}^{i}), is the (unique) solution to the above ODE in case that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | dd‚Äãt‚Äãp1‚àít‚Äã(xi\\|x1i)=‚àëzi‚ààùíØQ1‚àíti‚Äã(xi,zi)‚Äãp1‚àít‚Äã(zi\\|x1i).ùëëùëëùë°subscriptùëù1ùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñsubscriptsuperscriptùëßùëñùíØsuperscriptsubscriptùëÑ1ùë°ùëñsuperscriptùë•ùëñsuperscriptùëßùëñsubscriptùëù1ùë°conditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñ\\\\frac{d}{dt}p\\_{1-t}(x^{i}\\|x\\_{1}^{i})=\\\\sum\\_{z^{i}\\\\in{\\\\mathcal{T}}}Q\\_{1-t}^{i}(x^{i},z^{i})p\\_{1-t}(z^{i}\\|x\\_{1}^{i}). |  | (123) |\\\n\\\nThe ODE in equation [123](https://ar5iv.org/html/2412.03487#A6.E123 \"Equation 123 ‚Ä£ The conditional probability path. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is still too hard to solve in the general case, and some extra assumptions are in order if we hope to solve this equation in analytically. SEDD suggests the standard extra assumption that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Qti‚Äã(xi,zi)=œÉt‚ÄãQi‚Äã(xi,zi),superscriptsubscriptùëÑùë°ùëñsuperscriptùë•ùëñsuperscriptùëßùëñsubscriptùúéùë°superscriptùëÑùëñsuperscriptùë•ùëñsuperscriptùëßùëñQ\\_{t}^{i}(x^{i},z^{i})=\\\\sigma\\_{t}Q^{i}(x^{i},z^{i}), |  | (124) |\\\n\\\nwhere œÉ:\\[0,1\\]‚Üí‚Ñù:ùúé‚Üí01‚Ñù\\\\sigma:\\[0,1\\]\\\\rightarrow\\\\mathbb{R}, and QisuperscriptùëÑùëñQ^{i} is constant in time. In this case the solution to equation [123](https://ar5iv.org/html/2412.03487#A6.E123 \"Equation 123 ‚Ä£ The conditional probability path. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p1‚àít‚Äã(xi\\|x1i)=exp‚Å°\\[(‚à´0tœÉs‚Äãùëës)‚ÄãQi\\]‚Äã(xi,x1i).subscriptùëù1ùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñsuperscriptsubscript0ùë°subscriptùúéùë†differential-dùë†superscriptùëÑùëñsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{1-t}(x^{i}\\|x\\_{1}^{i})=\\\\exp\\\\left\\[\\\\left(\\\\int\\_{0}^{t}\\\\sigma\\_{s}ds\\\\right)Q^{i}\\\\right\\](x^{i},x\\_{1}^{i}). |  | (125) |\\\n\\\nThe assumption in ( [124](https://ar5iv.org/html/2412.03487#A6.E124 \"Equation 124 ‚Ä£ The conditional probability path. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) significantly restricts the space of conditional probability paths.\\\n\\\nIn contrast, our point of view is arguably simpler: We start with an _arbitrary_ conditional pt‚Äã(xi\\|x1i)subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i}) and develop a closed-form expression for its generating velocity using equations ( [16](https://ar5iv.org/html/2412.03487#S4.E16 \"Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\n\\\nFor example, the generating process using our metric path as in equation [27](https://ar5iv.org/html/2412.03487#S4.E27 \"Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") should be comparable to the reverse process given by some diffusion matrix,\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | Qti‚Äã(zi,xi)‚Äãpt‚Äã(xi\\|x1i)pt‚Äã(zi\\|x1i)=Q¬Øti‚Äã(xi,zi\\|x1i)subscriptsuperscriptùëÑùëñùë°superscriptùëßùëñsuperscriptùë•ùëñsubscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñsubscriptùëùùë°conditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptsuperscript¬ØùëÑùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñ\\\\displaystyle Q^{i}\\_{t}(z^{i},x^{i})\\\\frac{p\\_{t}(x^{i}\\|x\\_{1}^{i})}{p\\_{t}(z^{i}\\|x\\_{1}^{i})}=\\\\bar{Q}^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i}) | =uti‚Äã(xi,zi\\|x1i)=pt‚Äã(xi\\|x1i)‚ÄãŒ≤Àôt‚Äã\\[d‚Äã(zi,x1i)‚àíd‚Äã(xi,x1i)\\]+,absentsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñsubscriptÀôùõΩùë°subscriptdelimited-\\[\\]dsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñdsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñ\\\\displaystyle=u\\_{t}^{i}(x^{i},z^{i}\\|x\\_{1}^{i})=p\\_{t}(x^{i}\\|x\\_{1}^{i})\\\\dot{\\\\beta}\\_{t}\\[\\\\textrm{d}(z^{i},x\\_{1}^{i})-\\\\textrm{d}(x^{i},x\\_{1}^{i})\\]\\_{+}, |  | (126) |\\\n\\\nassuming the diffusion matrix Qt‚Äã(xi,zi)subscriptùëÑùë°superscriptùë•ùëñsuperscriptùëßùëñQ\\_{t}(x^{i},z^{i}) is restricted to [Equation124](https://ar5iv.org/html/2412.03487#A6.E124 \"In The conditional probability path. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") we have that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Qi‚Äã(zi,xi)=pt‚Äã(zi\\|x1i)œÉt‚ÄãŒ≤Àôt‚Äã\\[d‚Äã(zi,x1i)‚àíd‚Äã(xi,x1i)\\]+superscriptùëÑùëñsuperscriptùëßùëñsuperscriptùë•ùëñsubscriptùëùùë°conditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptùúéùë°subscriptÀôùõΩùë°subscriptdelimited-\\[\\]dsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñdsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñQ^{i}(z^{i},x^{i})=\\\\frac{p\\_{t}(z^{i}\\|x\\_{1}^{i})}{\\\\sigma\\_{t}}\\\\dot{\\\\beta}\\_{t}\\[\\\\textrm{d}(z^{i},x\\_{1}^{i})-\\\\textrm{d}(x^{i},x\\_{1}^{i})\\]\\_{+} |  | (127) |\\\n\\\non leading to a contradiction since the L.H.S is constant in time.\\\n\\\n#### SEDD training loss.\\\n\\\nWe derive the ELBO train loss for concrete score function as suggested in Lou et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib32 \"\")) from our ELBO ( [36](https://ar5iv.org/html/2412.03487#S6.E36 \"Equation 36 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")). To instantiate our ELBO we need to consider two reverse processes. The first correspond to the noising process ( [110](https://ar5iv.org/html/2412.03487#A6.E110 \"Equation 110 ‚Ä£ Probability velocity vs. concrete score. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with the boundary condition p1‚â°Œ¥x1subscriptùëù1subscriptùõøsubscriptùë•1p\\_{1}\\\\equiv\\\\delta\\_{x\\_{1}},\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(xi,zi\\|x1i)=œÉt‚ÄãQi‚Äã(zi,xi)‚Äãpt‚Äã(xi\\|x1i)pt‚Äã(zi\\|x1i).subscriptùë¢ùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptùúéùë°superscriptùëÑùëñsuperscriptùëßùëñsuperscriptùë•ùëñsubscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñsubscriptùëùùë°conditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñu\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})=\\\\sigma\\_{t}Q^{i}(z^{i},x^{i})\\\\frac{p\\_{t}(x^{i}\\|x\\_{1}^{i})}{p\\_{t}(z^{i}\\|x\\_{1}^{i})}. |  | (128) |\\\n\\\nThe second correspond to the noising process ( [110](https://ar5iv.org/html/2412.03487#A6.E110 \"Equation 110 ‚Ä£ Probability velocity vs. concrete score. ‚Ä£ Appendix F Relation to SEDD (Lou et al., 2024) ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with the boundary condition p1‚â°qsubscriptùëù1ùëûp\\_{1}\\\\equiv q (i.e., data distribution),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)=œÉt‚ÄãQi‚Äã(zi,xi)‚Äãsti‚Äã(xi,z).superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptùúéùë°superscriptùëÑùëñsuperscriptùëßùëñsuperscriptùë•ùëñsuperscriptsubscriptùë†ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z)=\\\\sigma\\_{t}Q^{i}(z^{i},x^{i})s\\_{t}^{i}(x^{i},z). |  | (129) |\\\n\\\nNow we substitute the velocities in the ELBO ( [36](https://ar5iv.org/html/2412.03487#S6.E36 \"Equation 36 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")),\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | log‚Å°p1‚Äã(x1)subscriptùëù1subscriptùë•1\\\\displaystyle\\\\log p\\_{1}(x\\_{1}) | ‚â•‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1D‚àëyi‚â†xti\\[uit(yi,xti\\|x1i)‚àíuti(yi,xt)\\\\displaystyle\\\\geq\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\sum\\_{y^{i}\\\\neq x\\_{t}^{i}}\\\\biggr{\\[}u^{i}\\_{t}(y^{i},x\\_{t}^{i}\\|x^{i}\\_{1})-u\\_{t}^{i}(y^{i},x\\_{t}) |  | (130) |\\\n|  |  | +uti(yi,xti\\|x1i)log(uti‚Äã(yi,xt)uti‚Äã(yi,xti\\|x1i))\\]dt\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad+u^{i}\\_{t}(y^{i},x\\_{t}^{i}\\|x^{i}\\_{1})\\\\log\\\\left(\\\\frac{u\\_{t}^{i}(y^{i},x\\_{t})}{u^{i}\\_{t}(y^{i},x\\_{t}^{i}\\|x^{i}\\_{1})}\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t |  | (131) |\\\n|  |  | =‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1D‚àëyi‚â†xtiœÉtQi(xti,yi)\\[pt‚Äã(yi\\|x1i)pt‚Äã(xti\\|x1i)‚àísti(yi\\|xt)\\\\displaystyle=\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\sum\\_{y^{i}\\\\neq x\\_{t}^{i}}\\\\sigma\\_{t}Q^{i}(x\\_{t}^{i},y^{i})\\\\biggr{\\[}\\\\frac{p\\_{t}(y^{i}\\|x\\_{1}^{i})}{p\\_{t}(x\\_{t}^{i}\\|x\\_{1}^{i})}-s\\_{t}^{i}(y^{i}\\|x\\_{t}) |  | (132) |\\\n|  |  | +pt‚Äã(yi\\|x1i)pt‚Äã(xti\\|x1i)log(pt‚Äã(xti\\|x1i)pt‚Äã(yi\\|x1i)sti(yi\\|xt))\\]dt\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad+\\\\frac{p\\_{t}(y^{i}\\|x\\_{1}^{i})}{p\\_{t}(x\\_{t}^{i}\\|x\\_{1}^{i})}\\\\log\\\\left(\\\\frac{p\\_{t}(x\\_{t}^{i}\\|x\\_{1}^{i})}{p\\_{t}(y^{i}\\|x\\_{1}^{i})}s\\_{t}^{i}(y^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t |  | (133) |\\\n|  |  | =‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1D‚àëyi‚â†xtiœÉtQi(xti,yi)\\[‚àísti(yi\\|xt)\\\\displaystyle=\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\sum\\_{y^{i}\\\\neq x\\_{t}^{i}}\\\\sigma\\_{t}Q^{i}(x\\_{t}^{i},y^{i})\\\\biggr{\\[}-s\\_{t}^{i}(y^{i}\\|x\\_{t}) |  | (134) |\\\n|  |  | +pt‚Äã(yi\\|x1i)pt‚Äã(xti\\|x1i)log(sti(yi\\|xt))‚àíg(pt‚Äã(yi\\|x1i)pt‚Äã(xti\\|x1i))\\]dt,\\\\displaystyle\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad\\\\qquad+\\\\frac{p\\_{t}(y^{i}\\|x\\_{1}^{i})}{p\\_{t}(x\\_{t}^{i}\\|x\\_{1}^{i})}\\\\log\\\\left(s\\_{t}^{i}(y^{i}\\|x\\_{t})\\\\right)-g\\\\left(\\\\frac{p\\_{t}(y^{i}\\|x\\_{1}^{i})}{p\\_{t}(x\\_{t}^{i}\\|x\\_{1}^{i})}\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t, |  | (135) |\\\n\\\nwhere g‚Äã(s)=s‚Äã(log‚Å°(s)‚àí1)ùëîùë†ùë†ùë†1g(s)=s(\\\\log(s)-1).\\\n\\\n## Appendix G Additional Tables and Figures\\\n\\\n|  | NFE=64 | NFE=128 |\\\n| Default Velocity | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=1_sym=0.0/63.png) | | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=1_sym=0.0/63.png) | |\\\n|  | NFE=64 | NFE=128 |\\\n| Optimized Velocity | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=64_power=inf_sym=0.2/63.png) | | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=128_power=inf_sym=0.04/63.png) | |\\\n\\\nFigure 5: CIFAR10 Samples for 64 and 128 NFE, default velocities vs. optimized velocities. The default velocity we use is the velocity resulting from ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")). The optimized velocity searches over ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) or ( [77](https://ar5iv.org/html/2412.03487#A3.E77 \"Equation 77 ‚Ä£ C.3 Power ‚àû velocity for general paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), and also searches over the probability-preserving velocity ( [35](https://ar5iv.org/html/2412.03487#S5.E35 \"Equation 35 ‚Ä£ 5 Probability-preserving velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with varying weights. For each 8√ó8888\\\\times 8 table, same seed was used to generate the images.\\\n\\\n|  | NFE=256 | NFE=512 |\\\n| Default Velocity | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=1_sym=0.0/63.png) | | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.0/63.png) | |\\\n|  | NFE=256 | NFE=512 |\\\n| Optimized Velocity | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=256_power=inf_sym=0.0/63.png) | | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/31.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/32.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/33.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/34.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/35.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/36.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/37.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/38.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/39.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/40.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/41.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/42.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/43.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/44.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/45.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/46.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/47.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/48.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/49.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/50.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/51.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/52.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/53.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/54.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/55.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/56.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/57.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/58.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/59.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/60.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/61.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/62.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/samples/steps=512_power=1_sym=0.4/63.png) | |\\\n\\\nFigure 6: CIFAR10 Samples for 256 and 512 NFE, default velocities vs. optimized velocities. The default velocity we use is the velocity resulting from ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")). The optimized velocity searches over ( [26](https://ar5iv.org/html/2412.03487#S4.E26 \"Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) or ( [77](https://ar5iv.org/html/2412.03487#A3.E77 \"Equation 77 ‚Ä£ C.3 Power ‚àû velocity for general paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), and also searches over the probability-preserving velocity ( [35](https://ar5iv.org/html/2412.03487#S5.E35 \"Equation 35 ‚Ä£ 5 Probability-preserving velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with varying weights. For each 8√ó8888\\\\times 8 table, same seed was used to generate the images.\\\n\\\n|  | NFE=64 | NFE=128 |\\\n| Default Velocity | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_64/31.png) | | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_128/31.png) | |\\\n|  | NFE=256 | NFE=512 |\\\n| Optimized Velocity | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_256/31.png) | | |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/0.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/1.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/2.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/3.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/4.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/5.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/6.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/7.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/8.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/9.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/10.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/11.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/12.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/13.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/14.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/15.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/16.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/17.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/18.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/19.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/20.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/21.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/22.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/23.png) |\\\n| ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/24.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/25.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/26.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/27.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/28.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/29.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/30.png) | ![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/cifar10/campbell_samples/campbell_512/31.png) | |\\\n\\\nFigure 7: CIFAR10 samples generated from our model using the velocity from Campbell et al. ( [2024](https://ar5iv.org/html/2412.03487#bib.bib5 \"\")), which does not work for general probability paths such as our metric-induced paths. This is the same p1\\|tsubscriptùëùconditional1ùë°p\\_{1\\|t} model as was used to generate samples for [Figure5](https://ar5iv.org/html/2412.03487#A7.F5 \"In Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and [Figure6](https://ar5iv.org/html/2412.03487#A7.F6 \"In Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\\nLlamaGen (Sun et al., [2024](https://ar5iv.org/html/2412.03487#bib.bib54 \"\"))\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/ar_300_0.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/ar_300_1.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/ar_300_2.png)\\\n\\\nDiscrete Flow Matching - Mask\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/300_0.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/300_1.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/300_2.png)\\\n\\\nDiscrete Flow Matching - Metric\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/600_0.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/600_1.png)\\\n\\\n![Refer to caption](https://ar5iv.org/html/2412.03487/assets/figs/imagenet/samples/600_2.png)\\\n\\\nFigure 8: Non-curated generated samples for ImageNet256√ó\\\\times256.\\\n\\\n[‚óÑ](https://ar5iv.org/html/2412.03486) [![ar5iv homepage](https://ar5iv.org/assets/ar5iv.png)](https://ar5iv.org/) [Feeling\\\\\n\\\\\nlucky?](https://ar5iv.org/feeling_lucky) [Conversion\\\\\n\\\\\nreport](https://ar5iv.org/log/2412.03487) [Report\\\\\n\\\\\nan issue](https://github.com/dginev/ar5iv/issues/new?template=improve-article--arxiv-id-.md&title=Improve+article+2412.03487) [View original\\\\\n\\\\\non arXiv](https://arxiv.org/abs/2412.03487) [‚ñ∫](https://ar5iv.org/html/2412.03488)",
  "sections": {
    "1 Introduction": {
      "content": "Generative models over discrete spaces have not seen as much progress on the methodology side compared to continuous-space counterparts.\nFor the most part, applications such as large language modeling rely solely on autoregressive models\n(Radford et al., [2019]; Bommasani et al., [2021]). The simplicity of autoregressive modeling has also motivated people to use them for multimodal generation, where other modalities, such as images and videos, are tokenized and modeled within an autoregressive framework (Van den Oord et al., [2016]; Team, [2024]; Sun et al., [2024]).\nWhile obtaining reasonable results, they have not yet reached the performance of continuous-space generative models such as denoising diffusion (Ho et al., [2020]; Song et al., [2021]) and Flow Matching models (Lipman et al., [2022]; Albergo et al., [2023]) for the visual-audio domains (Rombach et al., [2022]; Dai et al., [2023]; Esser et al., [2024]; Zhou et al., [2024]), where it is believed that the ability to perform iterative refinement brings significant gains (Saharia et al., [2022]; Zhang et al., [2024]).\n\nA promising framework that brings iterative refinement to the discrete case is to consider the use of Markov chains within a dynamical generative framework. Many discrete-space generative flow and diffusion models have seen success in the generation of text (Austin et al., [2021]; Lou et al., [2024]; Shi et al., [2024]; Sahoo et al., [2024]; Gat et al., [2024]), proteins (Campbell et al., [2024]), images (Austin et al., [2021]; Shi et al., [2024]),\nand even executable code (Gat et al., [2024]).\nHowever, the design space of these models is currently rather limited, with many recent works instead focusing solely on the case of masking as a corruption process (Shi et al., [2024]; Sahoo et al., [2024]).\nThe masked construction is an extension of masked pretraining (Devlin, [2018]; Yang, [2019]), but it does not fully embody the concept of iterative refinement as it is equivalent to learning autoregressive models for every ordering (Hoogeboom et al., [2021]; Chang et al., [2022]), and it has been noticed that some of the recent reported progress was actually misleading due to low-precision sampling (Zheng et al., [2024]) rather than the explicit design choice of masking as a corruption process.\nIn spite of this, the masked construction has often been found to be the best performing choice out of the limited family of corruption processes previously considered tractable (Austin et al., [2021]; Campbell et al., [2024]; Gat et al., [2024]).\n\nWe instead take a holistic view on constructing discrete Flow Matching models, massively expanding the design space to enable arbitrary probability paths, or colloquially, corruption processes, grounded in the framework of continuous-time Markov chains (CTMC). We list our contributions:\n\n1. 1.\n\n\nAnalogous to the continuous setting, we find that an infinite number of velocities can generate any given probability path. In order to reduce this search space, we consider a decomposition into a _probability-advancing_ velocity and a _probability-preserving_ velocity.\n\n2. 2.\n\n\nTo explore the space of probability-advancing velocities, we motivate a family of closed-form velocities that be formulated as optimizing kinetic energy. In particular, we are the first to formulate velocities that can work with any choice of probability path, completely opening up the design space of probability paths, e.g., domain-specific constructions, while recovering the velocities used by prior works for existing paths in the literature.\n\n3. 3.\n\n\nWe also find that the probability path itself can also be optimized with the same kinetic energy criterion. A closed-form solution surprisingly recovers the mixture paths considered by Gat et al. ( [2024]) but with novel source-dependent schedulers.\n\n4. 4.\n\n\nWe derive the ELBO for discrete Flow Matching models in full generality. This leads to an improved ELBO for training mixture probability paths that has not been used before, and recovers the ELBO derived by Shi et al. ( [2024]) for the masked construction. We find that with this ELBO, our kinetic-optimal mixture paths outperform the masked construction.",
      "citations": [
        {
          "start_pos": 239,
          "end_pos": 261,
          "text": "Radford et al., [2019]",
          "paper_id": "bib.bib44",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 263,
          "end_pos": 287,
          "text": "Bommasani et al., [2021]",
          "paper_id": "bib.bib3",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib1",
            "bib.bib9",
            "bib.bib19"
          ]
        },
        {
          "start_pos": 518,
          "end_pos": 537,
          "text": "Oord et al., [2016]",
          "paper_id": "bib.bib57",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 539,
          "end_pos": 551,
          "text": "Team, [2024]",
          "paper_id": "bib.bib55",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 553,
          "end_pos": 571,
          "text": "Sun et al., [2024]",
          "paper_id": "bib.bib54",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 719,
          "end_pos": 736,
          "text": "Ho et al., [2020]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 738,
          "end_pos": 757,
          "text": "Song et al., [2021]",
          "paper_id": "bib.bib52",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 785,
          "end_pos": 806,
          "text": "Lipman et al., [2022]",
          "paper_id": "bib.bib30",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 808,
          "end_pos": 830,
          "text": "Albergo et al., [2023]",
          "paper_id": "bib.bib1",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib9",
            "bib.bib3",
            "bib.bib19"
          ]
        },
        {
          "start_pos": 862,
          "end_pos": 884,
          "text": "Rombach et al., [2022]",
          "paper_id": "bib.bib45",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 886,
          "end_pos": 904,
          "text": "Dai et al., [2023]",
          "paper_id": "bib.bib9",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib1",
            "bib.bib19",
            "bib.bib5"
          ]
        },
        {
          "start_pos": 906,
          "end_pos": 926,
          "text": "Esser et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 928,
          "end_pos": 947,
          "text": "Zhou et al., [2024]",
          "paper_id": "bib.bib66",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1046,
          "end_pos": 1068,
          "text": "Saharia et al., [2022]",
          "paper_id": "bib.bib46",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1070,
          "end_pos": 1090,
          "text": "Zhang et al., [2024]",
          "paper_id": "bib.bib64",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1353,
          "end_pos": 1374,
          "text": "Austin et al., [2021]",
          "paper_id": "bib.bib2",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1376,
          "end_pos": 1394,
          "text": "Lou et al., [2024]",
          "paper_id": "bib.bib32",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1396,
          "end_pos": 1414,
          "text": "Shi et al., [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1416,
          "end_pos": 1436,
          "text": "Sahoo et al., [2024]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1438,
          "end_pos": 1456,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 1469,
          "end_pos": 1492,
          "text": "Campbell et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 1503,
          "end_pos": 1524,
          "text": "Austin et al., [2021]",
          "paper_id": "bib.bib2",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1526,
          "end_pos": 1544,
          "text": "Shi et al., [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1573,
          "end_pos": 1591,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 1760,
          "end_pos": 1778,
          "text": "Shi et al., [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1780,
          "end_pos": 1800,
          "text": "Sahoo et al., [2024]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1866,
          "end_pos": 1880,
          "text": "Devlin, [2018]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1882,
          "end_pos": 1894,
          "text": "Yang, [2019]",
          "paper_id": "bib.bib63",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2036,
          "end_pos": 2060,
          "text": "Hoogeboom et al., [2021]",
          "paper_id": "bib.bib24",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2062,
          "end_pos": 2082,
          "text": "Chang et al., [2022]",
          "paper_id": "bib.bib6",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2206,
          "end_pos": 2226,
          "text": "Zheng et al., [2024]",
          "paper_id": "bib.bib65",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2482,
          "end_pos": 2503,
          "text": "Austin et al., [2021]",
          "paper_id": "bib.bib2",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2505,
          "end_pos": 2528,
          "text": "Campbell et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 2530,
          "end_pos": 2548,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 3772,
          "end_pos": 3791,
          "text": "Gat et al. ( [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 4053,
          "end_pos": 4072,
          "text": "Shi et al. ( [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "2 Background: Discrete Flow Matching": {
      "content": "We are interested in learning a generative model that approximates a data distribution q‚Äã(x)ùëûùë•q(x), where x=(x1,x2,‚Ä¶,xD)‚ààùíÆ=ùíØDùë•superscriptùë•1superscriptùë•2‚Ä¶superscriptùë•ùê∑ùíÆsuperscriptùíØùê∑x=(x^{1},x^{2},\\\\ldots,x^{D})\\\\in{\\\\mathcal{S}}={\\\\mathcal{T}}^{D} with ùíØ=\\[K\\]‚âú{1,2,‚Ä¶,K}ùíØdelimited-\\[\\]ùêæ‚âú12‚Ä¶ùêæ{\\\\mathcal{T}}=\\[K\\]\\\\triangleq\\\\left\\\\{1,2,\\\\ldots,K\\\\right\\\\} being a discrete set of possible token values, and D‚àà‚Ñïùê∑‚ÑïD\\\\in\\\\mathbb{N} is number of discrete variables.\nFor brevity and without loss of generality, we consider all dimensions to have the same number of discrete values.\n\nProbability paths.\nWe denote by p‚Äã(x)ùëùùë•p(x) and q‚Äã(x)ùëûùë•q(x) the source and target, respectively, probability mass functions (PMFs) over the state space ùíÆùíÆ{\\\\mathcal{S}}.\nWe consider _probability paths_ pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x), t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], to be time-dependent PMFs taking the form\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pt‚Äã(x)‚âú‚àëx1‚ààùíÆpt‚Äã(x\\|x1)‚Äãq‚Äã(x1), where ‚Äãpt‚Äã(x\\|x1)‚âú‚àèi=1Dpt‚Äã(xi\\|x1i),formulae-sequence‚âúsubscriptùëùùë°ùë•subscriptsubscriptùë•1ùíÆsubscriptùëùùë°conditionalùë•subscriptùë•1ùëûsubscriptùë•1‚âú where subscriptùëùùë°conditionalùë•subscriptùë•1superscriptsubscriptproductùëñ1ùê∑subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñ\\\\textstyle p\\_{t}(x)\\\\triangleq\\\\sum\\_{x\\_{1}\\\\in{\\\\mathcal{S}}}p\\_{t}(x\\|x\\_{1})q(x\\_{1}),\\\\text{ where }p\\_{t}(x\\|x\\_{1})\\\\triangleq\\\\prod\\_{i=1}^{D}p\\_{t}(x^{i}\\|x\\_{1}^{i}), |  | (1) |\n\nand pt‚Äã(xi\\|x1i)subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i}) is a _conditional probability path_ which interpolates between a simple PMF at time t=0ùë°0t=0 and a delta PMF centered around x1isubscriptsuperscriptùë•ùëñ1x^{i}\\_{1} at t=1ùë°1t=1. That is, we assume the boundary conditions\np0‚Äã(xi\\|x1i)=p‚Äã(xi)subscriptùëù0conditionalsuperscriptùë•ùëñsubscriptsuperscriptùë•ùëñ1ùëùsuperscriptùë•ùëñp\\_{0}(x^{i}\\|x^{i}\\_{1})=p(x^{i}) and p1‚Äã(xi\\|x1i)=Œ¥x1i‚Äã(xi)subscriptùëù1conditionalsuperscriptùë•ùëñsubscriptsuperscriptùë•ùëñ1subscriptùõøsubscriptsuperscriptùë•ùëñ1superscriptùë•ùëñp\\_{1}(x^{i}\\|x^{i}\\_{1})=\\\\delta\\_{x^{i}\\_{1}}(x^{i}).\nHence we can interpret these probability paths pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) in equation [1]Equation 1 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") as interpolating between a factorized source distribution p‚Äã(x)‚âú‚àèi=1Dp‚Äã(xi)‚âúùëùùë•superscriptsubscriptproductùëñ1ùê∑ùëùsuperscriptùë•ùëñp(x)\\\\triangleq\\\\prod\\_{i=1}^{D}p(x^{i}) and the data distribution q‚Äã(x)ùëûùë•q(x).\nA common family of probability paths used in previous works is the collection of _mixture paths_(Gat et al., [2024]), with x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-dependent schedulers similar to Shi et al. ( [2024]):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pt‚Äã(xi\\|x1i)=(1‚àíŒ∫t‚Äã(x1i))‚Äãp‚Äã(xi)+Œ∫t‚Äã(x1i)‚ÄãŒ¥x1i‚Äã(xi),subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñ1subscriptùúÖùë°superscriptsubscriptùë•1ùëñùëùsuperscriptùë•ùëñsubscriptùúÖùë°superscriptsubscriptùë•1ùëñsubscriptùõøsuperscriptsubscriptùë•1ùëñsuperscriptùë•ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i})=(1-\\\\kappa\\_{t}(x\\_{1}^{i}))p(x^{i})+\\\\kappa\\_{t}(x\\_{1}^{i})\\\\delta\\_{x\\_{1}^{i}}(x^{i}), |  | (2) |\n\nwhere Œ∫0‚Äã(‚ãÖ)=0subscriptùúÖ0‚ãÖ0\\\\kappa\\_{0}(\\\\cdot)=0 and Œ∫1‚Äã(‚ãÖ)=1subscriptùúÖ1‚ãÖ1\\\\kappa\\_{1}(\\\\cdot)=1 to satisfy the boundary conditions. Specifically, with p‚Äã(xi)=Œ¥ùïû‚Äã(xi)ùëùsuperscriptùë•ùëñsubscriptùõøùïûsuperscriptùë•ùëñp(x^{i})=\\\\delta\\_{\\\\mathbbm{m}}(x^{i}) we recover the masked construction (Shi et al., [2024]; Sahoo et al., [2024]).\n\nProbability velocities.\nAs our generative process, we simulate a Continuous Time Markov Chain (CTMC) (Xt)t‚àà\\[0,1\\]subscriptsubscriptùëãùë°ùë°01(X\\_{t})\\_{t\\\\in\\[0,1\\]} in ùíÆùíÆ{\\\\mathcal{S}} such that its time marginals follow a prescribed probability path,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Xt‚àºpt.similar-tosubscriptùëãùë°subscriptùëùùë°X\\_{t}\\\\sim p\\_{t}. |  | (3) |\n\nIn order to do so, we define the concept of a _probability velocity_, also known as a rate matrix.\nWe say that a probability velocity utsubscriptùë¢ùë°u\\_{t}generatesptsubscriptùëùùë°p\\_{t} if utsubscriptùë¢ùë°u\\_{t} characterizes a Markov process Xtsubscriptùëãùë°X\\_{t} with marginal ptsubscriptùëùùë°p\\_{t} (equation [3]Equation 3 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1) in the following sense:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñô‚Äã(Xt+h=x\\|Xt=z)=Œ¥z‚Äã(x)+h‚Äãut‚Äã(x,z)+o‚Äã(h),‚Ñôsubscriptùëãùë°‚Ñéconditionalùë•subscriptùëãùë°ùëßsubscriptùõøùëßùë•‚Ñésubscriptùë¢ùë°ùë•ùëßùëú‚Ñé\\\\textstyle\\\\mathbb{P}(X\\_{t+h}=x\\ \\|\\ X\\_{t}=z)=\\\\delta\\_{z}(x)+hu\\_{t}(x,z)+o(h), |  | (4) |\\\n\\\nwhere o‚Äã(h)ùëú‚Ñéo(h) denotes a function which is asymptotically smaller than h‚Ñéh, i.e., limh‚Üí0o‚Äã(h)/h=0subscript‚Üí‚Ñé0ùëú‚Ñé‚Ñé0\\\\lim\\_{h\\\\rightarrow 0}\\\\nicefrac{{o(h)}}{{h}}=0. Intuitively, utsubscriptùë¢ùë°u\\_{t} describes the Markov transition of Xtsubscriptùëãùë°X\\_{t} for small step sizes h>0‚Ñé0h>0. We note that for equation [4]Equation 4 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") to be a valid PMF, utsubscriptùë¢ùë°u\\_{t} must at least satisfy the _Rate Conditions_:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x,z)‚â•0‚Äã for all ‚Äãx‚â†z‚Äã and ‚Äã‚àëxut‚Äã(x,z)=0‚ñ∂ Rate Conditions\\\\begin{matrix}\\[l\\]u\\_{t}(x,z)\\\\geq 0\\\\text{ for all }x\\\\neq z\\\\text{ and }\\\\sum\\_{x}u\\_{t}(x,z)=0\\\\end{matrix}\\\\qquad\\\\blacktriangleright\\\\text{ Rate Conditions} |  | (5) |\\\n\\\nSingle-variable-change probability velocities.\\\nIt is natural to consider modeling a CTMC process Xtsubscriptùëãùë°X\\_{t} over ùíÆùíÆ{\\\\mathcal{S}} by defining a ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) for all pairs x,z‚ààùíÆùë•ùëßùíÆx,z\\\\in{\\\\mathcal{S}}.\\\nHowever, the state space is of size \\|ùíØ\\|DsuperscriptùíØùê∑\\|{\\\\mathcal{T}}\\|^{D} so this is generally prohibitive for high dimensions.\\\nA remedy is to consider rates that only allow a state to change in a single variable (Campbell et al., [2022]), e.g., in the following example we only change the variable at the iùëñi-th coordinate:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | (z1,‚Ä¶,zi‚àí1,ùíõùíä,zi+1,‚Ä¶,zD)‚Üí(z1,‚Ä¶,zi‚àí1,ùíôùíä,zi+1,‚Ä¶,zD).‚Üísuperscriptùëß1‚Ä¶superscriptùëßùëñ1superscriptùíõùíäsuperscriptùëßùëñ1‚Ä¶superscriptùëßùê∑superscriptùëß1‚Ä¶superscriptùëßùëñ1superscriptùíôùíäsuperscriptùëßùëñ1‚Ä¶superscriptùëßùê∑(z^{1},\\\\ldots,z^{i-1},\\\\bm{z^{i}},z^{i+1},\\\\ldots,z^{D})\\\\rightarrow(z^{1},\\\\ldots,z^{i-1},\\\\bm{x^{i}},z^{i+1},\\\\ldots,z^{D}). |  | (6) |\\\n\\\nTo model only such changes we restrict our attention to velocities of the form uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) that describe the probability rate between the state zùëßz and the state with the iùëñi-th coordinate replaced, i.e., as described in the r.h.s. in equation [6]Equation 6 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We can express the full velocity ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) via uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x,z)=‚àëi=1Duti‚Äã(xi,z)‚Äã‚àèj‚â†iŒ¥zj‚Äã(xj),subscriptùë¢ùë°ùë•ùëßsuperscriptsubscriptùëñ1ùê∑superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptproductùëóùëñsubscriptùõøsuperscriptùëßùëósuperscriptùë•ùëóu\\_{t}(x,z)=\\\\sum\\_{i=1}^{D}u\\_{t}^{i}(x^{i},z){\\\\color\\[rgb\\]{0,0,0}{\\\\prod\\_{j\\\\neq i}\\\\delta\\_{z^{j}}(x^{j})}}, |  | (7) |\\\n\\\nwhich states the probability velocity between two states z‚Üíx‚Üíùëßùë•z\\\\rightarrow x is zero if they differ by more than one variable and equal uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) if they differ by exactly one variable.\\\nPlugging this velocity into equation [4]Equation 4 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), it can be shown that (Gat et al., [2024]):\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñô‚Äã(Xt+h=x\\|Xt=z)=‚àèi=1D\\[Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)\\]+o‚Äã(h)‚Ñôsubscriptùëãùë°‚Ñéconditionalùë•subscriptùëãùë°ùëßsuperscriptsubscriptproductùëñ1ùê∑delimited-\\[\\]subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßùëú‚Ñé\\\\textstyle\\\\mathbb{P}(X\\_{t+h}=x\\ \\|\\ X\\_{t}=z)=\\\\prod\\_{i=1}^{D}\\\\left\\[\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z)\\\\right\\]+o(h) |  | (8) |\\\n\\\nThis implies we can sample each variable Xt+hisuperscriptsubscriptùëãùë°‚ÑéùëñX\\_{t+h}^{i} _independently_ from the distribution Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\delta\\_{z^{i}}(x^{i})+hu\\_{t}^{i}(x^{i},z), and only incur an error of o‚Äã(h)ùëú‚Ñéo(h).\\\n\\\nThe marginal velocity.\\\nPrevious works (Campbell et al., [2024]; Gat et al., [2024]) have shown that constructing a generating velocity for pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) can be achieved by considering only the conditional probability paths in equation [1]Equation 1 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). That is, assume we have conditional velocities uti‚Äã(xi,zi\\|x1i)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñu^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i}), which are velocities in the state space ùíØùíØ{\\\\mathcal{T}}, that generate the conditional paths pt‚Äã(xi\\|x1i)subscriptùëùùë°conditionalsuperscriptùë•ùëñsuperscriptsubscriptùë•1ùëñp\\_{t}(x^{i}\\|x\\_{1}^{i}) in equation [1]Equation 1 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\nThen a _marginal velocity_ uti‚Äã(xi,z)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßu^{i}\\_{t}(x^{i},z) that generates pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) takes the form:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)=‚àëx1i‚ààùíØuti‚Äã(xi,zi\\|x1i)‚Äãp1\\|ti‚Äã(x1i\\|z)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßsubscriptsuperscriptsubscriptùë•1ùëñùíØsubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptsubscriptùë•1ùëñùëß\\\\textstyle u^{i}\\_{t}(x^{i},z)=\\\\sum\\_{x\\_{1}^{i}\\\\in{\\\\mathcal{T}}}u^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})p^{i}\\_{1\\|t}(x\\_{1}^{i}\\|z) |  | (9) |\\\n\\\nwhere p1\\|ti‚Äã(x1i\\|z)subscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptsubscriptùë•1ùëñùëßp^{i}\\_{1\\|t}(x\\_{1}^{i}\\|z) is the posterior probability of the iùëñi-th token taking the value x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}, i.e.,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p1\\|ti‚Äã(xi\\|z)=‚àëx1‚ààùíÆŒ¥x1i‚Äã(xi)‚Äãpt‚Äã(z\\|x1)‚Äãq‚Äã(x1)pt‚Äã(z).subscriptsuperscriptùëùùëñconditional1ùë°conditionalsuperscriptùë•ùëñùëßsubscriptsubscriptùë•1ùíÆsubscriptùõøsuperscriptsubscriptùë•1ùëñsuperscriptùë•ùëñsubscriptùëùùë°conditionalùëßsubscriptùë•1ùëûsubscriptùë•1subscriptùëùùë°ùëß\\\\textstyle p^{i}\\_{1\\|t}(x^{i}\\|z)=\\\\sum\\_{x\\_{1}\\\\in\\\\mathcal{S}}\\\\delta\\_{x\\_{1}^{i}}(x^{i})\\\\frac{p\\_{t}(z\\|x\\_{1})q(x\\_{1})}{p\\_{t}(z)}. |  | (10) |\\\n\\\nParameterizing the _factorized posterior_ ‚àèi=1Dp1\\|tisuperscriptsubscriptproductùëñ1ùê∑subscriptsuperscriptùëùùëñconditional1ùë°\\\\prod\\_{i=1}^{D}p^{i}\\_{1\\|t} is an approach taken by prior works (Austin et al., [2021]; Campbell et al., [2022]). To train, a simple option is the cross-entropy objective:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚ÑíCE‚Äã(Œ∏)=ùîºt‚àºU\\[0,1\\],x1‚àºq(‚ãÖ),x‚àºpt(‚ãÖ\\|x1)‚Äã\\[‚àí‚àëi=1Dlog‚Å°p1\\|tŒ∏,i‚Äã(x1i\\|x)\\].\\\\textstyle\\\\mathcal{L}\\_{\\\\text{CE}}(\\\\theta)=\\\\mathbb{E}\\_{t\\\\sim U\\[0,1\\],x\\_{1}\\\\sim q(\\\\cdot),x\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\left\\[-\\\\sum\\_{i=1}^{D}\\\\log p\\_{1\\|t}^{\\\\theta,i}(x\\_{1}^{i}\\|x)\\\\right\\]. |  | (11) |\\\n\\\nWe use this training loss for general probability paths as it is generally applicable.\\\nHowever, for the case of mixture paths (equation [2]Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) it is possible to derive a tractable ELBO as the marginal utsubscriptùë¢ùë°u\\_{t} can be written in closed form without a summation as in equation [9]Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We cover this later in [Section6]ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\",
      "citations": [
        {
          "start_pos": 2564,
          "end_pos": 2582,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib9",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 2659,
          "end_pos": 2678,
          "text": "Shi et al. ( [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3388,
          "end_pos": 3406,
          "text": "Shi et al., [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3408,
          "end_pos": 3428,
          "text": "Sahoo et al., [2024]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5839,
          "end_pos": 5862,
          "text": "Campbell et al., [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7705,
          "end_pos": 7723,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib8",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 8490,
          "end_pos": 8513,
          "text": "Campbell et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib8",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 8515,
          "end_pos": 8533,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib8",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 10856,
          "end_pos": 10877,
          "text": "Austin et al., [2021]",
          "paper_id": "bib.bib2",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10879,
          "end_pos": 10902,
          "text": "Campbell et al., [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "3 Sample generation through the factorized posterior\\": {
      "content": "\\\nThe most direct approach to sample from this model is to use the marginal velocity ut‚Äã(xi,z)subscriptùë¢ùë°superscriptùë•ùëñùëßu\\_{t}(x^{i},z), e.g., with a first-order sampling scheme defined by removing the o‚Äã(h)ùëú‚Ñéo(h) term in equation [8]Equation 8 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), i.e., given Xtsubscriptùëãùë°X\\_{t}, we advance time with step size h‚Ñéh by sampling Xt+hisuperscriptsubscriptùëãùë°‚ÑéùëñX\\_{t+h}^{i} according to\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Xt+hi‚àºŒ¥Xti‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,Xt),similar-tosuperscriptsubscriptùëãùë°‚Ñéùëñsubscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésubscriptsuperscriptùë¢ùëñùë°‚ãÖsubscriptùëãùë°X\\_{t+h}^{i}\\\\sim\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)+hu^{i}\\_{t}(\\\\cdot,X\\_{t}), |  | (12) |\\\n\\\nfor each i‚àà\\[D\\]ùëñdelimited-\\[\\]ùê∑i\\\\in\\[D\\], where utisuperscriptsubscriptùë¢ùë°ùëñu\\_{t}^{i} is computed with equation [9]Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\nHowever, for general discrete paths this sampling procedure is intractable for large discrete spaces ùíØùíØ{\\\\mathcal{T}} as computing uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) with equation [9]Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for all xi‚ààùíØsuperscriptùë•ùëñùíØx^{i}\\\\in{\\\\mathcal{T}} has a computational complexity of \\|ùíØ\\|2superscriptùíØ2\\|{\\\\mathcal{T}}\\|^{2}.\\\n\\\nAlternatively, we propose a more efficient sampling scheme by noticing that\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,z)subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëß\\\\textstyle\\\\delta\\_{z^{i}}(x^{i})+hu^{i}\\_{t}(x^{i},z) | =([9]Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))‚Äã‚àëx1i‚ààùíØ\\[Œ¥zi‚Äã(xi)+h‚Äãuti‚Äã(xi,zi\\|x1i)\\]‚Äãp1\\|ti‚Äã(x1i,z),[9]Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")subscriptsuperscriptsubscriptùë•1ùëñùíØdelimited-\\[\\]subscriptùõøsuperscriptùëßùëñsuperscriptùë•ùëñ‚Ñésubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñsubscriptsuperscriptùëùùëñconditional1ùë°superscriptsubscriptùë•1ùëñùëß\\\\textstyle\\\\overset{(\\\\ref{e:u\\_t\\_marginalization})}{=}\\\\sum\\_{x\\_{1}^{i}\\\\in{\\\\mathcal{T}}}\\\\left\\[\\\\delta\\_{z^{i}}(x^{i})+hu^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i})\\\\right\\]p^{i}\\_{1\\|t}(x\\_{1}^{i},z), |  | (13) |\\\n\\\nwhich leads to a sampling process that avoids computing the full marginal velocity:\\\ngiven the current state Xtsubscriptùëãùë°X\\_{t}, sample X1subscriptùëã1X\\_{1} from the factorized posterior, then sample Xt+hsubscriptùëãùë°‚ÑéX\\_{t+h}. That is, for each i‚àà\\[D\\]ùëñdelimited-\\[\\]ùê∑i\\\\in\\[D\\],\\\n\\\n1)Sample X1i‚àºp1\\|ti(‚ãÖ\\|Xt)X^{i}\\_{1}\\\\sim p^{i}\\_{1\\|t}(\\\\cdot\\|X\\_{t}); and2)Sample Xt+hi‚àºŒ¥Xti‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,Xti\\|X1i)similar-tosuperscriptsubscriptùëãùë°‚Ñéùëñsubscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésubscriptsuperscriptùë¢ùëñùë°‚ãÖconditionalsuperscriptsubscriptùëãùë°ùëñsubscriptsuperscriptùëãùëñ1X\\_{t+h}^{i}\\\\sim\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)+hu^{i}\\_{t}(\\\\cdot,X\\_{t}^{i}\\|X^{i}\\_{1}).\\\n\\\nThis sampling procedure still results in Xtsubscriptùëãùë°X\\_{t} with the same time marginals while avoiding the computational cost of the summation in equation [9]Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\nTo enable the use of any step size h‚Ñéh, we use a slightly modified step 2; see [AppendixA]Appendix A Always-valid sampling scheme ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for more details and pseudocode in [Algorithm1]In Appendix A Always-valid sampling scheme ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\",
      "citations": []
    },
    "4 Kinetic optimal velocities and probability paths\\": {
      "content": "\\\nWe first decouple the design space of probability paths and their generating velocities, providing the means to effectively explore this large design space.\\\nThis section covers two contributions: (i) we propose a family of kinetic optimal (KO) velocities that generates any given probability path, and (ii) we solve for kinetic optimal probability paths, recovering a special case of mixture paths.\\\nThe first contribution enables us to work with general discrete probability paths.\\\nThe second contribution justifies the choice of mixture probability paths used by Gat et al. ( [2024]) but offers novel x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-dependent schedulers.\\\nFor both, we center our designs based on optimizing a discrete notion of kinetic energy (Peyr√© et al., [2019])).\\\n\\\nNotation. As the discussion in this section applies to arbitrary probability paths and discrete state spaces, we will use a simplified notation, where our state space is now ùíØùíØ{\\\\mathcal{T}} and for states we use x,z‚ààùíØùë•ùëßùíØx,z\\\\in{\\\\mathcal{T}}, abusing a bit the previous notation (where xi,zi‚ààùíØsuperscriptùë•ùëñsuperscriptùëßùëñùíØx^{i},z^{i}\\\\in{\\\\mathcal{T}}). Furthermore, we will denote by pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) and ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) an arbitrary probability path and velocity field in ùíØùíØ{\\\\mathcal{T}}, respectively.\\\n\\\nContinuity Equation.\\\nGiven a probability path pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x), the entire collection of velocities ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z) generating pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) are the solutions to the Continuity Equation (a.k.a. the Kolmogorov forward equation) that also satisfy the Rate Conditions. It is useful to formulate the Continuity Equation through the _flux_ jtsubscriptùëóùë°j\\_{t}, that is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pÀôt‚Äã(x)+divx‚Äã(jt)=0,‚àÄx‚ààùíØ, with ‚Äãjt‚Äã(x,z)=ut‚Äã(x,z)‚Äãpt‚Äã(z).formulae-sequencesubscriptÀôùëùùë°ùë•subscriptdivùë•subscriptùëóùë°0formulae-sequencefor-allùë•ùíØ with subscriptùëóùë°ùë•ùëßsubscriptùë¢ùë°ùë•ùëßsubscriptùëùùë°ùëß\\\\textstyle\\\\dot{p}\\_{t}(x)+\\\\mathrm{div}\\_{x}(j\\_{t})=0,\\\\qquad\\\\forall x\\\\in{\\\\mathcal{T}},\\\\qquad\\\\text{ with }j\\_{t}(x,z)=u\\_{t}(x,z)p\\_{t}(z). |  | (14) |\\\n\\\nIntuitively, the flux jt‚Äã(x,z)subscriptùëóùë°ùë•ùëßj\\_{t}(x,z) quantifies the amount of probability mass per unit of time moving from state zùëßz to state xùë•x.\\\nThe _divergence operator_ then measures the total outgoing flux minus the total incoming flux, which in the discrete case takes the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | divx‚Äã(jt)=‚àëz‚â†xjt‚Äã(z,x)‚àí‚àëz‚â†xjt‚Äã(x,z).subscriptdivùë•subscriptùëóùë°subscriptùëßùë•subscriptùëóùë°ùëßùë•subscriptùëßùë•subscriptùëóùë°ùë•ùëß\\\\textstyle\\\\text{div}\\_{x}(j\\_{t})=\\\\sum\\_{z\\\\neq x}j\\_{t}(z,x)-\\\\sum\\_{z\\\\neq x}j\\_{t}(x,z). |  | (15) |\\\n\\\nVelocity from flux. Given a flux jtsubscriptùëóùë°j\\_{t} satisfying the Continuity Equation (equation [14]Equation 14 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we can get a velocity from the flux by defining for x‚â†zùë•ùëßx\\\\neq z,\\\n\\\nut‚Äã(x,z)=jt‚Äã(x,z)/pt‚Äã(z)‚Äã if ‚Äãpt‚Äã(z)>0, else ‚Äãut‚Äã(x,z)=0,formulae-sequencesubscriptùë¢ùë°ùë•ùëßsubscriptùëóùë°ùë•ùëßsubscriptùëùùë°ùëß if subscriptùëùùë°ùëß0 else subscriptùë¢ùë°ùë•ùëß0\\\\textstyle u\\_{t}(x,z)=j\\_{t}(x,z)/p\\_{t}(z)\\\\;\\\\;\\\\text{ if }p\\_{t}(z)>0,\\\\qquad\\\\text{ else }\\\\;u\\_{t}(x,z)=0,(16)\\\n\\\nand the case x=zùë•ùëßx=z is uniquely set by the Rate Conditions ( [5]Equation 5 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), ut‚Äã(z,z)=‚àí‚àëx‚â†zut‚Äã(x,z)subscriptùë¢ùë°ùëßùëßsubscriptùë•ùëßsubscriptùë¢ùë°ùë•ùëßu\\_{t}(z,z)=-\\\\sum\\_{x\\\\neq z}u\\_{t}(x,z). The velocity defined in this way will satisfy the Continuity Equation and the Rate Conditions if the flux satisfies the following conditions:\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  |  | jt‚Äã(x,z)‚â•0, for ‚Äãx‚â†zformulae-sequencesubscriptùëóùë°ùë•ùëß0 for ùë•ùëß\\\\displaystyle j\\_{t}(x,z)\\\\geq 0,\\\\text{ for }x\\\\neq z\\\\qquad | ‚ñ∂Non-negativity‚ñ∂absentNon-negativity\\\\displaystyle\\\\blacktriangleright\\\\text{Non-negativity} |  | (17) |\\\n|  |  | pt‚Äã(z)=0‚áíjt‚Äã(x,z)=0subscriptùëùùë°ùëß0‚áísubscriptùëóùë°ùë•ùëß0\\\\displaystyle p\\_{t}(z)=0\\ \\\\Rightarrow\\ j\\_{t}(x,z)=0\\\\qquad | ‚ñ∂Safe Flux Condition‚ñ∂absentSafe Flux Condition\\\\displaystyle\\\\blacktriangleright\\\\text{Safe Flux Condition} |  | (18) |\\\n\\\nIntuitively, the Safe Flux Condition ensures no flux is leaving a zero probability state zùëßz.\\\n\\\n###### Proposition 4.1.\\\n\\\nGiven a non-negative safe flux jtsubscriptùëóùë°j\\_{t} that satisfies the Continuity Equation, the velocity defined in equation [16]Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") satisfies the Rate Conditions and generates the ptsubscriptùëùùë°p\\_{t} probability path.\\\n\\\nKinetic optimality. Motivated by the approach employed in the continuous case of minimizing the kinetic energy for the conditional velocities (Lipman et al., [2022]; Shaul et al., [2023]), we take a similar approach for finding velocities for the discrete case.\\\nThe standard convex formulation of the kinetic energy adapted to the discrete case is (Peyr√© et al., [2019])):\\\n\\\nminpt,jtsubscriptsubscriptùëùùë°subscriptùëóùë°\\\\textstyle\\\\min\\_{p\\_{t},j\\_{t}}‚à´01‚àëx‚â†zwt‚Äã(x,z)pt‚Äã(z)‚Äãjt‚Äã(x,z)2‚Äãd‚Äãtsuperscriptsubscript01subscriptùë•ùëßsubscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùëóùë°superscriptùë•ùëß2ùëëùë°\\\\textstyle\\\\quad\\\\int\\_{0}^{1}\\\\sum\\_{x\\\\neq z}\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}j\\_{t}(x,z)^{2}dt‚ñ∂ Kinetic Energy‚ñ∂absent Kinetic Energy\\\\textstyle\\\\blacktriangleright\\\\text{ Kinetic Energy }(19a)s.t.divx‚Äã(jt)=‚àípÀôt‚Äã(x),‚àÄx‚ààùíØformulae-sequencesubscriptdivùë•subscriptùëóùë°subscriptÀôùëùùë°ùë•for-allùë•ùíØ\\\\textstyle\\\\quad\\\\mathrm{div}\\_{x}(j\\_{t})=-\\\\dot{p}\\_{t}(x),\\\\qquad\\ \\ \\\\forall x\\\\in{\\\\mathcal{T}}‚ñ∂ Continuity Equation‚ñ∂absent Continuity Equation\\\\textstyle\\\\blacktriangleright\\\\text{ Continuity Equation }(19b)jt‚Äã(x,z)‚â•0,‚àÄx‚â†z‚ààùíØformulae-sequencesubscriptùëóùë°ùë•ùëß0for-allùë•ùëßùíØ\\\\textstyle\\\\quad j\\_{t}(x,z)\\\\geq 0,\\\\qquad\\\\qquad\\\\forall x\\\\neq z\\\\in{\\\\mathcal{T}}‚ñ∂ Non-negative flux‚ñ∂absent Non-negative flux\\\\textstyle\\\\blacktriangleright\\\\text{ Non-negative flux }(19c)p0=p,p1=qformulae-sequencesubscriptùëù0ùëùsubscriptùëù1ùëû\\\\textstyle\\\\quad p\\_{0}=p,\\\\quad p\\_{1}=q‚ñ∂ Boundary conditions‚ñ∂absent Boundary conditions\\\\textstyle\\\\blacktriangleright\\\\text{ Boundary conditions}(19d)\\\n\\\nwhere wt‚Äã(x,z)>0subscriptùë§ùë°ùë•ùëß0w\\_{t}(x,z)>0 is some problem-dependent weighting; a higher weight implies a smaller flux from z‚Üíx‚Üíùëßùë•z\\\\rightarrow x, i.e., the higher this value the smaller the velocity ut‚Äã(x,z)subscriptùë¢ùë°ùë•ùëßu\\_{t}(x,z).\\\nThe optimality criterion (equation [19a]Equation 19a ‚Ä£ Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is the kinetic energy, equivalently jt‚Äã(x,z)2pt‚Äã(z)=ut‚Äã(x,z)2‚Äãpt‚Äã(z)subscriptùëóùë°superscriptùë•ùëß2subscriptùëùùë°ùëßsubscriptùë¢ùë°superscriptùë•ùëß2subscriptùëùùë°ùëß\\\\frac{j\\_{t}(x,z)^{2}}{p\\_{t}(z)}=u\\_{t}(x,z)^{2}p\\_{t}(z).\\\nThe benefit of formulating in terms of the flux (instead of the velocity) is that the problem becomes convex in its unknowns (pt,jt)subscriptùëùùë°subscriptùëóùë°(p\\_{t},j\\_{t}), and in particular the Continuity Equation constraint in ( [19b]Equation 19b ‚Ä£ Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is linear. Lastly, in case of wt‚Äã(x,z)pt‚Äã(z)=‚àûsubscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëß\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}=\\\\infty the energy in equation [19a]Equation 19a ‚Ä£ Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is _defined_ to be 00 if jt‚Äã(x,z)=0subscriptùëóùë°ùë•ùëß0j\\_{t}(x,z)=0, and ‚àû\\\\infty if jt‚Äã(x,z)>0subscriptùëóùë°ùë•ùëß0j\\_{t}(x,z)>0. Therefore, to ensures the solution jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star} is safe (equation [18]Equation 18 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we ask that wtsubscriptùë§ùë°w\\_{t} satisfies:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt(z)=0‚áíwt‚Äã(x,z)pt‚Äã(z)=‚àû‚ñ∂ Safe Weight Condition\\\\textstyle p\\_{t}(z)=0\\\\Rightarrow\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}=\\\\infty\\\\quad\\\\blacktriangleright\\\\text{ Safe Weight Condition} |  | (20) |\\\n\\\nand that problem [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is _feasible_, i.e., it has a finite energy solution.\\\nAlthough problem [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") is convex, solving it for a general wtsubscriptùë§ùë°w\\_{t} requires numerical approximation. Since we want to solve it for conditional probability paths with different x1‚ààùíØsubscriptùë•1ùíØx\\_{1}\\\\in{\\\\mathcal{T}}, i.e., q‚Äã(x)=Œ¥x1‚Äã(x)ùëûùë•subscriptùõøsubscriptùë•1ùë•q(x)=\\\\delta\\_{x\\_{1}}(x), this can be computationally challenging. Instead, we will explore cases of wtsubscriptùë§ùë°w\\_{t} where problem ( [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is solvable in _closed-form_.\\\nWe start with assuming ptsubscriptùëùùë°p\\_{t} is known/given, and find the kinetic optimal velocity ut‚ãÜsubscriptsuperscriptùë¢‚ãÜùë°u^{\\\\star}\\_{t}, then afterwards we discuss optimizing the ptsubscriptùëùùë°p\\_{t} as well.\\\n\\\n### 4.1 Kinetic optimal velocity\\\n\\\nAssuming pt>0subscriptùëùùë°0p\\_{t}>0 is fixed in ( [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), our goal is to find the kinetic optimal solution jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star}, and consequently obtaining a velocity ut‚ãÜsuperscriptsubscriptùë¢ùë°‚ãÜu\\_{t}^{\\\\star} via ( [16]Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nOne observation we make is that ( [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be efficiently solved when _symmetric_, i.e., when wt‚Äã(x,z)pt‚Äã(z)=wt‚Äã(z,x)pt‚Äã(x)subscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùëßùë•subscriptùëùùë°ùë•\\\\frac{w\\_{t}(x,z)}{p\\_{t}(z)}=\\\\frac{w\\_{t}(z,x)}{p\\_{t}(x)}.\\\nAs we prove in [AppendixB]Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"),\\\n( [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be efficiently solved via the following linear relaxation:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àëzpt‚Äã(z)wt‚Äã(x,z)‚Äã\\[ft‚Äã(x)‚àíft‚Äã(z)\\]=pÀôt‚Äã(x),‚àÄx‚ààùíØformulae-sequencesubscriptùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëßdelimited-\\[\\]subscriptùëìùë°ùë•subscriptùëìùë°ùëßsubscriptÀôùëùùë°ùë•for-allùë•ùíØ\\\\textstyle\\\\sum\\_{z}\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}\\\\left\\[f\\_{t}(x)-f\\_{t}(z)\\\\right\\]=\\\\dot{p}\\_{t}(x),\\\\qquad\\\\forall x\\\\in{\\\\mathcal{T}} |  | (21) |\\\n\\\nwhere ft:ùíØ‚Üí‚Ñù:subscriptùëìùë°‚ÜíùíØ‚Ñùf\\_{t}:{\\\\mathcal{T}}\\\\rightarrow\\\\mathbb{R} is the unknown function over the state space. The linear equation in ( [21]Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is of _Laplacian form_, and many properties (including closed-form solutions) are known in many cases (Vishnoi, [2012]). The solution ftsubscriptùëìùë°f\\_{t} to ( [21]Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is unique up to a global constant and using ftsubscriptùëìùë°f\\_{t} we construct the kinetic optimal flux,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)‚âúpt‚Äã(z)wt‚Äã(x,z)‚Äã\\[ft‚Äã(x)‚àíft‚Äã(z)\\]+,‚âúsubscriptsuperscriptùëó‚ãÜùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëßsubscriptdelimited-\\[\\]subscriptùëìùë°ùë•subscriptùëìùë°ùëß\\\\textstyle j^{\\\\star}\\_{t}(x,z)\\\\triangleq\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}\\\\left\\[f\\_{t}(x)-f\\_{t}(z)\\\\right\\]\\_{+}, |  | (22) |\\\n\\\nwhere \\[s\\]+=max‚Å°{s,0}subscriptdelimited-\\[\\]ùë†ùë†0\\\\left\\[s\\\\right\\]\\_{+}=\\\\max\\\\left\\\\{s,0\\\\right\\\\} is the ReLU operator. This provides a solution to ( [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with a fixed and positive ptsubscriptùëùùë°p\\_{t}. Consequently, using ( [16]Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we get the kinetic optimal velocity. We have shown that a certain family of kinetic optimal velocities can be computed by solving a linear system ( [21]Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for arbitrary probability paths pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) over state-space ùíØùíØ{\\\\mathcal{T}}. Next we will further instantiate this family and provide some closed form solution for jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star} and ut‚ãÜsuperscriptsubscriptùë¢ùë°‚ãÜu\\_{t}^{\\\\star}.\\\n\\\nClosed-form utsubscriptùë¢ùë°u\\_{t}.\\\nWe will consider the case where wt‚Äã(x,z)=pt‚Äã(z)œÑt‚Äã(x)‚ÄãœÑt‚Äã(z)subscriptùë§ùë°ùë•ùëßsubscriptùëùùë°ùëßsubscriptùúèùë°ùë•subscriptùúèùë°ùëßw\\_{t}(x,z)=\\\\frac{p\\_{t}(z)}{\\\\tau\\_{t}(x)\\\\tau\\_{t}(z)}, and œÑt:ùíØ‚Üí‚Ñù‚â•0:subscriptùúèùë°‚ÜíùíØsubscript‚Ñùabsent0\\\\tau\\_{t}:{\\\\mathcal{T}}\\\\rightarrow\\\\mathbb{R}\\_{\\\\geq 0} is a design choice of our method. To ensure wtsubscriptùë§ùë°w\\_{t} is safe ( [20]Equation 20 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) we require that pt‚Äã(z)=0subscriptùëùùë°ùëß0p\\_{t}(z)=0 implies œÑt‚Äã(z)=0subscriptùúèùë°ùëß0\\\\tau\\_{t}(z)=0. The solution ftsubscriptùëìùë°f\\_{t} to ( [21]Equation 21 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"))‚Äîwhich can be checked with substitution‚Äîis:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ft‚Äã(x)=1‚àës‚ààùíØœÑt‚Äã(s)‚ÄãpÀôt‚Äã(x)œÑt‚Äã(x).subscriptùëìùë°ùë•1subscriptùë†ùíØsubscriptùúèùë°ùë†subscriptÀôùëùùë°ùë•subscriptùúèùë°ùë•\\\\textstyle f\\_{t}(x)=\\\\frac{1}{\\\\sum\\_{s\\\\in{\\\\mathcal{T}}}\\\\tau\\_{t}(s)}\\\\frac{\\\\dot{p}\\_{t}(x)}{\\\\tau\\_{t}(x)}. |  | (23) |\\\n\\\nOne choice is œÑt‚Äã(x)=ùüô\\[pt‚Äã(x)>0\\]subscriptùúèùë°ùë•subscript1delimited-\\[\\]subscriptùëùùë°ùë•0\\\\tau\\_{t}(x)=\\\\mathbbm{1}\\_{\\[p\\_{t}(x)>0\\]}, that leads to the Kinetic Optimal flux\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚ãÜ‚Äã(x,z)=1\\|ùíØ\\|‚Äã\\[‚àÇtpt‚Äã(x)‚àí‚àÇtpt‚Äã(z)\\]+, for ‚Äãx‚â†zformulae-sequencesubscriptsuperscriptùëó‚ãÜùë°ùë•ùëß1ùíØsubscriptdelimited-\\[\\]subscriptùë°subscriptùëùùë°ùë•subscriptùë°subscriptùëùùë°ùëß for ùë•ùëß\\\\textstyle j^{\\\\star}\\_{t}(x,z)=\\\\frac{1}{\\|{\\\\mathcal{T}}\\|}\\\\left\\[\\\\partial\\_{t}p\\_{t}(x)-\\\\partial\\_{t}p\\_{t}(z)\\\\right\\]\\_{+},\\\\qquad\\\\text{ for }x\\\\neq z |  | (24) |\\\n\\\nwhich upon converting to velocity via ( [16]Equation 16 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) recovers the velocity proposed in Campbell et al. ( [2024]) for positive paths, pt>0subscriptùëùùë°0p\\_{t}>0. Note however, that the above flux is not safe (does not satisfy equation [18]Equation 18 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and if pt‚Äã(z)=œµsubscriptùëùùë°ùëßitalic-œµp\\_{t}(z)={\\\\epsilon} the flux jt‚ãÜ‚Äã(x,z)subscriptsuperscriptùëó‚ãÜùë°ùë•ùëßj^{\\\\star}\\_{t}(x,z) for some general xùë•x is not necessarily small, showing a potential numerical issue. Campbell et al. ( [2024]) formulate a limit case for general ptsubscriptùëùùë°p\\_{t} that also requires adding an extra assumption on ptsubscriptùëùùë°p\\_{t} (that pt‚Äã(x)=0‚áípÀôt‚Äã(x)=0subscriptùëùùë°ùë•0‚áísubscriptÀôùëùùë°ùë•0p\\_{t}(x)=0\\\\Rightarrow\\\\dot{p}\\_{t}(x)=0), which does not hold even for common probability paths that are typically used, such as the masked mixture path with linear schedulers.\\\n\\\nAlternatively, we propose a more numerically stable choice. Consider œÑt‚Äã(x)=pt‚Äã(x)subscriptùúèùë°ùë•subscriptùëùùë°ùë•\\\\tau\\_{t}(x)=p\\_{t}(x), i.e.,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | wt‚Äã(x,z)=1/pt‚Äã(x).subscriptùë§ùë°ùë•ùëß1subscriptùëùùë°ùë•\\\\textstyle w\\_{t}(x,z)=1/p\\_{t}(x). |  | (25) |\\\n\\\nThis results in ft‚Äã(x)=pÀôt‚Äã(x)/pt‚Äã(x)subscriptùëìùë°ùë•subscriptÀôùëùùë°ùë•subscriptùëùùë°ùë•f\\_{t}(x)=\\\\dot{p}\\_{t}(x)/p\\_{t}(x), and the kinetic optimal flux in this case is:\\\n\\\njt‚ãÜ‚Äã(x,z)=\\[pt‚Äã(z)‚ÄãpÀôt‚Äã(x)‚àípÀôt‚Äã(z)‚Äãpt‚Äã(x)\\]+, for ‚Äãx‚â†zformulae-sequencesubscriptsuperscriptùëó‚ãÜùë°ùë•ùëßsubscriptdelimited-\\[\\]subscriptùëùùë°ùëßsubscriptÀôùëùùë°ùë•subscriptÀôùëùùë°ùëßsubscriptùëùùë°ùë• for ùë•ùëß\\\\displaystyle j^{\\\\star}\\_{t}(x,z)=\\\\left\\[p\\_{t}(z)\\\\dot{p}\\_{t}(x)-\\\\dot{p}\\_{t}(z)p\\_{t}(x)\\\\right\\]\\_{+},\\\\qquad\\\\text{ for }x\\\\neq z(26)\\\n\\\nNote that in contrast to before, this flux is safe (satisfies equation [18]Equation 18 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and therefore works for general ptsubscriptùëùùë°p\\_{t}. Furthermore, ( [26]Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) exhibits stable limiting behavior for continuously differentiable ptsubscriptùëùùë°p\\_{t}: when pt‚Äã(z)‚Üí0‚Üísubscriptùëùùë°ùëß0p\\_{t}(z)\\\\rightarrow 0, so too will j‚ãÜ‚Äã(x,z)‚Üí0‚Üísuperscriptùëó‚ãÜùë•ùëß0j^{\\\\star}(x,z)\\\\rightarrow 0.\\\n\\\nWe note that for uniform and mask source distributions with the mixture path ( [2]Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), the velocity considered by Campbell et al. ( [2024]) and our velocity resulting from ( [26]Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) coincide.\\\nHowever, for mixture paths ( [2]Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and general discrete paths, they generally do not coincide.\\\nAdditionally, the choice of velocity in ( [26]Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) also recovers the velocities used by Gat et al. ( [2024]) for mixture probability paths.\\\nSee [SectionC.1]C.1 Kinetic optimal velocities for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for detailed derivations.\\\nFinally, we discuss a broader family of closed-form velocities involving different choices of œÑtsubscriptùúèùë°\\\\tau\\_{t} in [SectionC.3]C.3 Power ‚àû velocity for general paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), which we find can significantly boost performance at low-cost sampling regimes.\\\n\\\nMetric-induced pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x). The velocity resulting from ( [26]Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be applied to any user-defined ptsubscriptùëùùë°p\\_{t}. We propose metric-induced conditional probability paths of the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(x\\|x1)=softmax‚Äã(‚àíŒ≤t‚Äãd‚Äã(x,x1)),subscriptùëùùë°conditionalùë•subscriptùë•1softmaxsubscriptùõΩùë°dùë•subscriptùë•1\\\\textstyle p\\_{t}(x\\|x\\_{1})=\\\\text{softmax}\\\\left(-\\\\beta\\_{t}\\\\textrm{d}(x,x\\_{1})\\\\right), |  | (27) |\\\n\\\nwhere Œ≤:\\[0,1\\]‚Üí‚Ñù‚â•0:ùõΩ‚Üí01subscript‚Ñùabsent0\\\\beta:\\[0,1\\]\\\\rightarrow\\\\mathbb{R}\\_{\\\\geq 0} is a monotonic scheduler with Œ≤0=0subscriptùõΩ00\\\\beta\\_{0}=0, Œ≤1=‚àûsubscriptùõΩ1\\\\beta\\_{1}=\\\\infty, and d:ùíØ√óùíØ‚Üí‚Ñù‚â•0:d‚ÜíùíØùíØsubscript‚Ñùabsent0\\\\textrm{d}:{\\\\mathcal{T}}\\\\times{\\\\mathcal{T}}\\\\rightarrow\\\\mathbb{R}\\_{\\\\geq 0} such that d‚Äã(x,x1)=0‚áîx=x1‚áîdùë•subscriptùë•10ùë•subscriptùë•1\\\\textrm{d}(x,x\\_{1})=0\\\\Leftrightarrow x=x\\_{1}\\\n,interpreted loosely as a metric over discrete values. If we apply the flux in ( [26]Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for the paths in ( [27]Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) and simplify, we obtain the velocity:\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ut‚ãÜ‚Äã(x,z\\|x1)superscriptsubscriptùë¢ùë°‚ãÜùë•conditionalùëßsubscriptùë•1\\\\textstyle u\\_{t}^{\\\\star}(x,z\\|x\\_{1}) | =pt‚Äã(x\\|x1)‚Äã\\[‚àÇtlog‚Å°pt‚Äã(x\\|x1)‚àí‚àÇtlog‚Å°pt‚Äã(z\\|x1)\\]+absentsubscriptùëùùë°conditionalùë•subscriptùë•1subscriptdelimited-\\[\\]subscriptùë°subscriptùëùùë°conditionalùë•subscriptùë•1subscriptùë°subscriptùëùùë°conditionalùëßsubscriptùë•1\\\\textstyle=p\\_{t}(x\\|x\\_{1})\\[\\\\partial\\_{t}\\\\log p\\_{t}(x\\|x\\_{1})-\\\\partial\\_{t}\\\\log p\\_{t}(z\\|x\\_{1})\\]\\_{+} |  | (28) |\\\n|  |  | =pt‚Äã(x\\|x1)‚ÄãŒ≤Àôt‚Äã\\[d‚Äã(z,x1)‚àíd‚Äã(x,x1)\\]+.absentsubscriptùëùùë°conditionalùë•subscriptùë•1subscriptÀôùõΩùë°subscriptdelimited-\\[\\]dùëßsubscriptùë•1dùë•subscriptùë•1\\\\textstyle=p\\_{t}(x\\|x\\_{1})\\\\dot{\\\\beta}\\_{t}\\[\\\\textrm{d}(z,x\\_{1})-\\\\textrm{d}(x,x\\_{1})\\]\\_{+}. |  | (29) |\\\n\\\nThis velocity has the property that we only move from state zùëßz to state xùë•x if xùë•x is closer than zùëßz to x1subscriptùë•1x\\_{1}, i.e., d‚Äã(x,x1)<d‚Äã(z,x1)dùë•subscriptùë•1dùëßsubscriptùë•1\\\\textrm{d}(x,x\\_{1})<\\\\textrm{d}(z,x\\_{1}), hence resulting in a flow that only moves closer to x1subscriptùë•1x\\_{1}.\\\n\\\n### 4.2 Kinetic Optimal probability paths\\\n\\\nInterestingly, for the weighting choice that we have motivated for the numerically stable velocity ( [25]Equation 25 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), it is also possible to solve for the kinetic optimal probability path pt‚ãÜsuperscriptsubscriptùëùùë°‚ãÜp\\_{t}^{\\\\star}.\\\nAs we show in [AppendixB]Appendix B Symmetrized Kinetic Optimization problem ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), in this case, the problem ( [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) can be formulated equivalently as\\\n\\\n|     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- |\\\n|  |\\\n|  | minatsubscriptsubscriptùëéùë°\\\\displaystyle\\\\textstyle\\\\min\\_{a\\_{t}} | ‚à´01‚àëxaÀôt‚Äã(x)2‚Äãd‚Äãtsuperscriptsubscript01subscriptùë•subscriptÀôùëéùë°superscriptùë•2ùëëùë°\\\\displaystyle\\\\quad\\\\int\\_{0}^{1}\\\\sum\\_{x}\\\\dot{a}\\_{t}(x)^{2}\\\\,dt | ‚ñ∂ Kinetic Energy‚ñ∂absent Kinetic Energy\\\\displaystyle\\\\blacktriangleright\\\\text{ Kinetic Energy } |  | (30a) |\\\n|  | s.t. | ‚àëxat‚Äã(x)2=1,‚àÄt‚àà\\[0,1\\]formulae-sequencesubscriptùë•subscriptùëéùë°superscriptùë•21for-allùë°01\\\\displaystyle\\\\textstyle\\\\quad\\\\sum\\_{x}a\\_{t}(x)^{2}=1,\\\\qquad\\\\qquad\\\\forall t\\\\in\\[0,1\\] | ‚ñ∂ Hypersphere constraints‚ñ∂absent Hypersphere constraints\\\\displaystyle\\\\blacktriangleright\\\\text{ Hypersphere constraints} |  | (30b) |\\\n|  |  | a0‚Äã(x)=p‚Äã(x),a1‚Äã(x)=q‚Äã(x)formulae-sequencesubscriptùëé0ùë•ùëùùë•subscriptùëé1ùë•ùëûùë•\\\\displaystyle\\\\textstyle\\\\quad a\\_{0}(x)=\\\\sqrt{p(x)},\\\\quad a\\_{1}(x)=\\\\sqrt{q(x)}\\\\qquad\\\\qquad | ‚ñ∂ Boundary conditions‚ñ∂absent Boundary conditions\\\\displaystyle\\\\blacktriangleright\\\\text{ Boundary conditions } |  | (30c) |\\\n\\\nwhere at‚Äã(x)=pt‚Äã(x)subscriptùëéùë°ùë•subscriptùëùùë°ùë•a\\_{t}(x)=\\\\sqrt{p\\_{t}(x)}. Problem ( [30]Equation 30 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is the kinetic energy of a curve over the hypersphere connecting pùëù\\\\sqrt{p} and qùëû\\\\sqrt{q}. The optimal solution thus corresponds to the geodesic curve on the hypersphere,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | at‚Äã(x)=sin‚Å°(1‚àít)‚ÄãŒ©sin‚Å°Œ©‚Äãp‚Äã(x)+sin‚Å°t‚ÄãŒ©sin‚Å°Œ©‚Äãq‚Äã(x),where ‚ÄãŒ©=arccos‚Å°(‚àëzp‚Äã(z)‚Äãq‚Äã(z)),formulae-sequencesubscriptùëéùë°ùë•1ùë°Œ©Œ©ùëùùë•ùë°Œ©Œ©ùëûùë•where Œ©subscriptùëßùëùùëßùëûùëß\\\\textstyle a\\_{t}(x)=\\\\frac{\\\\sin(1-t)\\\\Omega}{\\\\sin\\\\Omega}\\\\sqrt{p(x)}+\\\\frac{\\\\sin t\\\\Omega}{\\\\sin\\\\Omega}\\\\sqrt{q(x)},\\ \\ \\\\text{where }\\\\Omega=\\\\arccos\\\\left(\\\\sum\\_{z}\\\\sqrt{p(z)q(z)}\\\\right), |  | (31) |\\\n\\\nand consequently the optimal probability path and velocity for ( [30]Equation 30 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) are\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚ãÜ‚Äã(x)=at2‚Äã(x),ut‚ãÜ‚Äã(x,z)=at2‚Äã(x)‚Äã\\[‚àÇtlog‚Å°at2‚Äã(x)‚àí‚àÇtlog‚Å°at2‚Äã(z)\\]+formulae-sequencesuperscriptsubscriptùëùùë°‚ãÜùë•superscriptsubscriptùëéùë°2ùë•superscriptsubscriptùë¢ùë°‚ãÜùë•ùëßsuperscriptsubscriptùëéùë°2ùë•subscriptdelimited-\\[\\]subscriptùë°superscriptsubscriptùëéùë°2ùë•subscriptùë°superscriptsubscriptùëéùë°2ùëß\\\\textstyle p\\_{t}^{\\\\star}(x)=a\\_{t}^{2}(x),\\\\qquad{u\\_{t}^{\\\\star}(x,z)=a\\_{t}^{2}(x)\\\\left\\[\\\\partial\\_{t}\\\\log a\\_{t}^{2}(x)-\\\\partial\\_{t}\\\\log a\\_{t}^{2}(z)\\\\right\\]\\_{+}} |  | (32) |\\\n\\\nIn the particular case of conditional probability paths q‚Äã(x)=Œ¥x1‚Äã(x)ùëûùë•subscriptùõøsubscriptùë•1ùë•q(x)=\\\\delta\\_{x\\_{1}}(x), we get that the optimal solution recovers the _mixture path_ (equation [2]Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with a specific x1subscriptùë•1x\\_{1}-dependent scheduler:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∫t‚Äã(x1)=1‚àísin2‚Å°(1‚àít)‚ÄãŒ©‚Äã(x1)sin2‚Å°Œ©‚Äã(x1), where ‚ÄãŒ©‚Äã(x1)=arccos‚Å°p‚Äã(x1).formulae-sequencesubscriptùúÖùë°subscriptùë•11superscript21ùë°Œ©subscriptùë•1superscript2Œ©subscriptùë•1 where Œ©subscriptùë•1ùëùsubscriptùë•1\\\\textstyle\\\\kappa\\_{t}(x\\_{1})=1-\\\\frac{\\\\sin^{2}(1-t)\\\\Omega(x\\_{1})}{\\\\sin^{2}\\\\Omega(x\\_{1})},\\\\qquad\\\\text{ where }\\\\Omega(x\\_{1})=\\\\arccos\\\\sqrt{p(x\\_{1})}. |  | (33) |\\\n\\\nThis justifies the mixture paths ( [2]Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) as kinetic optimal, and furthermore, it naturally utilizes an x1subscriptùë•1x\\_{1}-dependent scheduler for general source distributions pùëùp when p‚Äã(x1)>0ùëùsubscriptùë•10p(x\\_{1})>0.\\\n\\",
      "citations": [
        {
          "start_pos": 569,
          "end_pos": 588,
          "text": "Gat et al. ( [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib1",
            "bib.bib3"
          ]
        },
        {
          "start_pos": 4912,
          "end_pos": 4933,
          "text": "Lipman et al., [2022]",
          "paper_id": "bib.bib30",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4935,
          "end_pos": 4955,
          "text": "Shaul et al., [2023]",
          "paper_id": "bib.bib48",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 11546,
          "end_pos": 11561,
          "text": "Vishnoi, [2012]",
          "paper_id": "bib.bib59",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 15294,
          "end_pos": 15318,
          "text": "Campbell et al. ( [2024]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib8",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 15791,
          "end_pos": 15815,
          "text": "Campbell et al. ( [2024]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib8",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 17867,
          "end_pos": 17891,
          "text": "Campbell et al. ( [2024]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib8",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 18594,
          "end_pos": 18613,
          "text": "Gat et al. ( [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib8",
            "bib.bib9"
          ]
        }
      ]
    },
    "5 Probability-preserving velocities\\": {
      "content": "\\\nWhile we have found a particular flux jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star}, the space of fluxes for a given ptsubscriptùëùùë°p\\_{t} is much larger, and in this section we show how to explore it further.\\\nWe first observe that since the Continuity Equation ( [14]Equation 14 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is a linear equation, any flux jtsubscriptùëóùë°j\\_{t} satisfying this equation can be written as a sum of two fluxes:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt=jt‚ãÜ+jt‚üÇ, where ‚Äãdivx‚Äã(jt‚üÇ)=0,formulae-sequencesubscriptùëóùë°superscriptsubscriptùëóùë°‚ãÜsuperscriptsubscriptùëóùë°perpendicular-to where subscriptdivùë•superscriptsubscriptùëóùë°perpendicular-to0j\\_{t}=j\\_{t}^{\\\\star}+j\\_{t}^{\\\\perp},\\\\qquad\\\\text{ where }\\\\mathrm{div}\\_{x}(j\\_{t}^{\\\\perp})=0, |  | (34) |\\\n\\\nwhere jt‚ãÜsuperscriptsubscriptùëóùë°‚ãÜj\\_{t}^{\\\\star} is a particular solution to the Continuity Equation and jt‚üÇsuperscriptsubscriptùëóùë°perpendicular-toj\\_{t}^{\\\\perp} is a solution to the homogenous version of the equation, i.e., divergence-free.\\\nWe call the velocity resulting from jt‚üÇsuperscriptsubscriptùëóùë°perpendicular-toj\\_{t}^{\\\\perp} a _probability-preserving_, or corrector, velocity as sampling with this velocity has ptsubscriptùëùùë°p\\_{t} as a steady-state.\\\nFor simplicity, we mainly consider the special case of symmetric flux.\\\nSymmetry is a sufficient condition for being divergence-free as is evident from ( [15]Equation 15 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nA natural choice for a symmetric flux is to consider a symmetrization of ( [22]Equation 22 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) taking the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | jt‚üÇ‚Äã(x,z)=pt‚Äã(z)wt‚Äã(x,z)‚Äã\\|ft‚Äã(x)‚àíft‚Äã(z)\\|, and ‚Äãut‚üÇ‚Äã(x,z)=jt‚üÇ‚Äã(x,z)/pt‚Äã(z),formulae-sequencesuperscriptsubscriptùëóùë°perpendicular-toùë•ùëßsubscriptùëùùë°ùëßsubscriptùë§ùë°ùë•ùëßsubscriptùëìùë°ùë•subscriptùëìùë°ùëß and superscriptsubscriptùë¢ùë°perpendicular-toùë•ùëßsuperscriptsubscriptùëóùë°perpendicular-toùë•ùëßsubscriptùëùùë°ùëß\\\\textstyle j\\_{t}^{\\\\perp}(x,z)=\\\\frac{p\\_{t}(z)}{w\\_{t}(x,z)}\\\\left\\|f\\_{t}(x)-f\\_{t}(z)\\\\right\\|,\\\\qquad\\\\text{ and }u\\_{t}^{\\\\perp}(x,z)=j\\_{t}^{\\\\perp}(x,z)/p\\_{t}(z), |  | (35) |\\\n\\\nfor any function ftsubscriptùëìùë°f\\_{t}. For convenience, we will simply re-use the same ftsubscriptùëìùë°f\\_{t} that comes from optimizing the kinetic energy ( [19]Equation 19 ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), e.g. the same as in ( [26]Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nIn contrast to the kinetic optimal velocity, which results in a unidirectional flow in the sense that samples will only move from lower ft‚Äã(‚ãÖ)subscriptùëìùë°‚ãÖf\\_{t}(\\\\cdot) to higher ft‚Äã(‚ãÖ)subscriptùëìùë°‚ãÖf\\_{t}(\\\\cdot), the symmetric flux in ( [35]Equation 35 ‚Ä£ 5 Probability-preserving velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) results in a bidirectional flow that allows equal movement between any two states with non-equal ft‚Äã(‚ãÖ)subscriptùëìùë°‚ãÖf\\_{t}(\\\\cdot).\\\nHence jt‚üÇsuperscriptsubscriptùëóùë°perpendicular-toj\\_{t}^{\\\\perp} acts as a corrector to redirect samples back to previous states in a way that leaves ptsubscriptùëùùë°p\\_{t} invariant.\\\n\\",
      "citations": []
    },
    "6 ELBO for Discrete Flow Matching\\": {
      "content": "\\\nWe show in [AppendixD]Appendix D Evidence lower bound (ELBO) for CTMC ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") that we can produce a continuous-time ELBO bound on the likelihood log‚Å°p1Œ∏‚Äã(x1)subscriptsuperscriptùëùùúÉ1subscriptùë•1\\\\log p^{\\\\theta}\\_{1}(x\\_{1}) for any conditional probability path and conditional probability velocity in terms of the marginal uti‚Äã(xi,z)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßu^{i}\\_{t}(x^{i},z) and conditional uti‚Äã(xi,zi\\|x1i)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñu^{i}\\_{t}(x^{i},z^{i}\\|x\\_{1}^{i}) as follows\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | logp1(x1)‚â•‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1D\\[uti‚Äã(xti,xt)‚àíuti‚Äã(xti,xti\\|x1i)+‚àëyi‚â†xtiuti(yi,xti\\|x1i)log(uti‚Äã(yi,xt)uti‚Äã(yi,xti\\|x1i))\\]dt\\\\begin{split}\\\\textstyle\\\\log p\\_{1}(x\\_{1})\\\\geq\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\biggr{\\[}&u\\_{t}^{i}(x\\_{t}^{i},x\\_{t})-u^{i}\\_{t}(x\\_{t}^{i},x\\_{t}^{i}\\|x^{i}\\_{1})\\\\\\<br>\\\\vspace{-0.5em}&\\\\textstyle+\\\\sum\\_{y^{i}\\\\neq x\\_{t}^{i}}u^{i}\\_{t}(y^{i},x\\_{t}^{i}\\|x^{i}\\_{1})\\\\log\\\\left(\\\\frac{u\\_{t}^{i}(y^{i},x\\_{t})}{u^{i}\\_{t}(y^{i},x\\_{t}^{i}\\|x^{i}\\_{1})}\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t\\\\end{split} |  | (36) |\\\n\\\nEvaluating this ELBO is difficult for the same reason as sampling in [Section3]Sample generation through the factorized posterior ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), for large discrete spaces ùíØùíØ{\\\\mathcal{T}} computing\\\n( [9]Equation 9 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) for all xi‚ààùíØsuperscriptùë•ùëñùíØx^{i}\\\\in{\\\\mathcal{T}} has a computational complexity of \\|ùíØ\\|2superscriptùíØ2\\|{\\\\mathcal{T}}\\|^{2}. However, for mixture paths ( [2]Equation 2 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), our conditional velocity resulting from ( [26]Equation 26 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) is used to obtain a closed-form expression for the marginal velocity (see [SectionC.2]C.2 Marginal velocity in closed-form for mixture paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")),\\\nyielding a tractable ELBO for mixture paths:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | logp1Œ∏(x1)‚â•‚à´01ùîºxt‚àºpt(‚ãÖ\\|x1)‚àëi=1D\\[Œª‚Äã(xti)‚Äãp1\\|tŒ∏‚Äã(xti\\|xt)‚àí‚àëyiŒª‚Äã(yi)‚Äãp1\\|tŒ∏‚Äã(yi\\|xt)++(1‚àíŒ¥x1i(xti))Œª(x1i)(1+logp1\\|tŒ∏(x1i\\|xt))\\]dt,\\\\begin{split}\\\\textstyle\\\\log p\\_{1}^{\\\\theta}(x\\_{1})\\\\geq\\\\int\\_{0}^{1}\\\\mathbb{E}\\_{x\\_{t}\\\\sim p\\_{t}(\\\\cdot\\|x\\_{1})}\\\\sum\\_{i=1}^{D}\\\\biggr{\\[}&\\\\lambda(x\\_{t}^{i})p^{\\\\theta}\\_{1\\|t}(x\\_{t}^{i}\\|x\\_{t})-\\\\sum\\_{y^{i}}\\\\lambda(y^{i})p^{\\\\theta}\\_{1\\|t}(y^{i}\\|x\\_{t})+\\\\\\<br>&\\\\textstyle+(1-\\\\delta\\_{x^{i}\\_{1}}(x\\_{t}^{i}))\\\\lambda(x\\_{1}^{i})\\\\left(1+\\\\log p^{\\\\theta}\\_{1\\|t}(x\\_{1}^{i}\\|x\\_{t})\\\\right)\\\\biggr{\\]}\\\\mathrm{d}t,\\\\end{split} |  | (37) |\\\n\\\nwhere Œª‚Äã(x)=Œ∫Àôt‚Äã(x)1‚àíŒ∫t‚Äã(x)ùúÜùë•subscriptÀôùúÖùë°ùë•1subscriptùúÖùë°ùë•\\\\lambda(x)=\\\\frac{\\\\dot{\\\\kappa}\\_{t}(x)}{1-\\\\kappa\\_{t}(x)}.\\\nThis ELBO has not been used previously, e.g., Campbell et al. ( [2022]) had to resort to a doubly stochastic estimator.\\\nSpecifically for the masked construction, we recover the ELBO used by Zheng et al. ( [2024]) for x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-independent schedulers and used by Shi et al. ( [2024]) for x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}-dependent schedulers; see [SectionD.1]D.1 ELBO for masked models ‚Ä£ Appendix D Evidence lower bound (ELBO) for CTMC ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\",
      "citations": [
        {
          "start_pos": 3321,
          "end_pos": 3345,
          "text": "Campbell et al. ( [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3466,
          "end_pos": 3487,
          "text": "Zheng et al. ( [2024]",
          "paper_id": "bib.bib65",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3565,
          "end_pos": 3584,
          "text": "Shi et al. ( [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "7 Related Work\\": {
      "content": "\\\nGenerative modeling through marginalization.\\\nDenoising diffusion models (Sohl-Dickstein et al., [2015]; Ho et al., [2020]; Song et al., [2021]) construct generative models by reversing a noising process. The Flow Matching framework (Lipman et al., [2022]; Albergo et al., [2023]; Liu et al., [2022]) shares similar traits but instead constructs generative models through a marginalization of conditional Markov processes, allowing a larger design space of probability paths. These types of models can be trained at scale both efficiently and stably relative to other frameworks, and thus have seen massive success in the large-scale generation of images (Rombach et al., [2022]; Esser et al., [2024]), videos (Singer et al., [2022]), and audio (Le et al., [2024]; Vyas et al., [2023]).\\\n\\\nContinuous-time Markov Chains. These aforementioned frameworks have been adapted to the discrete domain by making use of Continuous-time Markov Chains (CTMC) as the choice of generative process (Campbell et al., [2022]; [2024]); Lou et al., [2024]; Gat et al., [2024]). Many works discuss both a uniform noise and mask construction (Campbell et al., [2024]; Lou et al., [2024]); however,\\\nmore recent works have focused more and more on the simple masked construction where each discrete variable is randomly replaced with a dummy or mask token (Sahoo et al., [2024]; Shi et al., [2024]) as it often performs favorably compared to uniform noise. However, the simple masked construction leads to a generative model that is equivalent to any-order autoregressive modeling under mild assumptions (Hoogeboom et al., [2021]; Zheng et al., [2024]).\\\n\\\nAny-order autoregressive modeling. While autoregressive models prespecify a fixed ordering, any-order autoregressive models learn conditional probabilities for every ordering.\\\nTraining is often carried out by randomly masking out parts of the data sample (Devlin, [2018]; Yang, [2019]).\\\nSome works have focused on architectural choices: Germain et al. ( [2015]) randomly masks out weights to induce a randomized ordering, while Pannatier et al. ( [2024]) uses a fixed causal attention architecture but randomly permutes the input ordering, with the end goal of learning all combinations of conditional distributions so that generation of the variables can be done in any order. The ordering itself is often optimized further by the use of heuristic scoring functions (Chang et al., [2022]; Ziv et al., [2024]).\\\n\\\n![Refer to caption]Figure 1: Generative perplexity vs. ELBO of kinetic optimal (KO) and linear schedulers of FineWeb-Edu models. The ELBO is evaluated: WikiText-103, LAMBADA, Penn TreeBank,FineWeb-Edu, and OpenWebText. Bold highlights the Pareto front. Table 1:\\\nZero-shot unconditional perplexity bound as in equation [36]Equation 36 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") of Fineweb-Edu models, more details are in [SectionE.1]E.1 Text generation ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). ‚àó denotes our reimplementation of the method.\\\n\\\n| Method | Lambada‚Üì‚Üì\\\\downarrow | Wikitext2‚Üì‚Üì\\\\downarrow | PTB‚Üì‚Üì\\\\downarrow | Wikitext103‚Üì‚Üì\\\\downarrow | 1BW‚Üì‚Üì\\\\downarrow | OpenWebText‚Üì‚Üì\\\\downarrow | Fineweb-Edu (train set)‚Üì‚Üì\\\\downarrow |\\\n| SEDD‚àó (mask) (Lou et al., [2024]) | ‚â§\\\\leq58.57 | ‚â§\\\\leq42.84 | ‚â§\\\\leq136.99 | ‚â§\\\\leq42.88 | ‚â§\\\\leq114.17 | ‚â§\\\\leq36.55 | ‚â§\\\\leq19.41 |\\\n| MD4‚àó(Shi et al., [2024]) | ‚â§\\\\leq61.27 | ‚â§\\\\leq43.08 | ‚â§\\\\leq157.00 | ‚â§\\\\leq43.02 | ‚â§\\\\leq127.55 | ‚â§\\\\leq35.57 | ‚â§\\\\leq18.69 |\\\n| DFM - Linear (Œ≤0=1024subscriptùõΩ01024\\\\beta\\_{0}=1024) | ‚â§\\\\leq60.59 | ‚â§\\\\leq44.17 | ‚â§\\\\leq180.75 | ‚â§\\\\leq44.29 | ‚â§\\\\leq147.21 | ‚â§\\\\leq36.33 | ‚â§\\\\leq18.67 |\\\n| DFM - Kinetic Optimal (mask) | ‚â§\\\\leq58.5 | ‚â§\\\\leq41.80 | ‚â§\\\\leq144.46 | ‚â§\\\\leq41.83 | ‚â§\\\\leq123.83 | ‚â§\\\\leq35.57 | ‚â§\\\\leq18.71 |\\\n| DFM - Kinetic Optimal (Œ≤0=1024subscriptùõΩ01024\\\\beta\\_{0}=1024) | ‚â§\\\\leq58.41 | ‚â§\\\\leq42.19 | ‚â§\\\\leq147.09 | ‚â§\\\\leq42.34 | ‚â§\\\\leq115.51 | ‚â§\\\\leq36.07 | ‚â§\\\\leq18.63 |\\\n\\",
      "citations": [
        {
          "start_pos": 81,
          "end_pos": 105,
          "text": "Dickstein et al., [2015]",
          "paper_id": "bib.bib51",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 107,
          "end_pos": 124,
          "text": "Ho et al., [2020]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 126,
          "end_pos": 145,
          "text": "Song et al., [2021]",
          "paper_id": "bib.bib52",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 236,
          "end_pos": 257,
          "text": "Lipman et al., [2022]",
          "paper_id": "bib.bib30",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 259,
          "end_pos": 281,
          "text": "Albergo et al., [2023]",
          "paper_id": "bib.bib1",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib5",
            "bib.bib3"
          ]
        },
        {
          "start_pos": 283,
          "end_pos": 301,
          "text": "Liu et al., [2022]",
          "paper_id": "bib.bib31",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 658,
          "end_pos": 680,
          "text": "Rombach et al., [2022]",
          "paper_id": "bib.bib45",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 682,
          "end_pos": 702,
          "text": "Esser et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 713,
          "end_pos": 734,
          "text": "Singer et al., [2022]",
          "paper_id": "bib.bib50",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 748,
          "end_pos": 765,
          "text": "Le et al., [2024]",
          "paper_id": "bib.bib29",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 767,
          "end_pos": 786,
          "text": "Vyas et al., [2023]",
          "paper_id": "bib.bib60",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 987,
          "end_pos": 1010,
          "text": "Campbell et al., [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1021,
          "end_pos": 1039,
          "text": "Lou et al., [2024]",
          "paper_id": "bib.bib32",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1041,
          "end_pos": 1059,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib1",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 1125,
          "end_pos": 1148,
          "text": "Campbell et al., [2024]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib1",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 1150,
          "end_pos": 1168,
          "text": "Lou et al., [2024]",
          "paper_id": "bib.bib32",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1338,
          "end_pos": 1358,
          "text": "Sahoo et al., [2024]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1360,
          "end_pos": 1378,
          "text": "Shi et al., [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1586,
          "end_pos": 1610,
          "text": "Hoogeboom et al., [2021]",
          "paper_id": "bib.bib24",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1612,
          "end_pos": 1632,
          "text": "Zheng et al., [2024]",
          "paper_id": "bib.bib65",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1895,
          "end_pos": 1909,
          "text": "Devlin, [2018]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1911,
          "end_pos": 1923,
          "text": "Yang, [2019]",
          "paper_id": "bib.bib63",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1977,
          "end_pos": 2000,
          "text": "Germain et al. ( [2015]",
          "paper_id": "bib.bib20",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2068,
          "end_pos": 2093,
          "text": "Pannatier et al. ( [2024]",
          "paper_id": "bib.bib39",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2408,
          "end_pos": 2428,
          "text": "Chang et al., [2022]",
          "paper_id": "bib.bib6",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2430,
          "end_pos": 2448,
          "text": "Ziv et al., [2024]",
          "paper_id": "bib.bib68",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3345,
          "end_pos": 3363,
          "text": "Lou et al., [2024]",
          "paper_id": "bib.bib32",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3475,
          "end_pos": 3493,
          "text": "Shi et al., [2024]",
          "paper_id": "bib.bib49",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "8 Experiments\\": {
      "content": "\\\nWe evaluate Discrete Flow Matching (DFM) on multiple modalities: text, crystalline material, and image generation. Our main goal is to show that Discrete Flow Matching can outperform autoregressive models, and within the class of Discrete Flow Matching, we explore new additions such as the kinetic optimal and the metric-induced constructions. In text, we mainly explore the kinetic optimal probability paths (equation [33]Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) with different source distributions, as these have access to the closed-form ELBO ( [37]Equation 37 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\nIn material generation, we find that enabling permutation invariance for DFM easily outperforms autoregressive models at de novo generation, achieving state-of-the-art results.\\\nFurthermore, in domains where a natural metric exists, we demonstrate our method‚Äôs ability to inject inductive bias into the velocity and probability path using equations [27]Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and [29]Equation 29 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We show that our large design space enables competitive results even with non-mask probability paths, showcasing the capabilities of our expanded design space.\\\n\\\n### 8.1 Text generation\\\n\\\nWe explore our method on the task of text generation. We use the kinetic optimal probability path as in equation [33]Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), which only has one hyper-parameter, the source distribution p‚Äã(x)ùëùùë•p(x). For source distribution, we compute the statistics of tokens appearances in the training data pstats‚Äã(xi)subscriptùëùstatssuperscriptùë•ùëñp\\_{\\\\text{stats}}(x^{i}) and construct a single-parameter family of source distributions:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p‚Äã(x)=‚àèi=1Dp‚Äã(xi),p‚Äã(xi)=softmax‚Äã(‚àíŒ≤0‚Äãlog‚Å°pstats‚Äã(xi)),formulae-sequenceùëùùë•superscriptsubscriptproductùëñ1ùê∑ùëùsuperscriptùë•ùëñùëùsuperscriptùë•ùëñsoftmaxsubscriptùõΩ0subscriptùëùstatssuperscriptùë•ùëñ\\\\textstyle p(x)=\\\\prod\\_{i=1}^{D}p(x^{i}),\\\\quad p(x^{i})=\\\\text{softmax}(-\\\\beta\\_{0}\\\\log p\\_{\\\\text{stats}}(x^{i})), |  | (38) |\\\n\\\nwhere Œ≤0=‚àí1subscriptùõΩ01\\\\beta\\_{0}=-1 recovers the data statistics, Œ≤0=0subscriptùõΩ00\\\\beta\\_{0}=0 yield a uniform distribution on all tokens. Also, Œ≤0‚Üí‚àû‚ÜísubscriptùõΩ0\\\\beta\\_{0}\\\\rightarrow\\\\infty yields a uniform distribution on the set of least probable tokens in the data, which behaves similarly to a mask source distribution.\\\n\\\nFor this experiment, we used linear and kinetic optimal schedulers with mask, p‚Äã(x)=Œ¥ùïû‚Äã(x)ùëùùë•subscriptùõøùïûùë•p(x)=\\\\delta\\_{\\\\mathbbm{m}}(x), and Œ≤0‚àà{‚àí0.5,0.0,0.5,1,2,4,64,256,1024}subscriptùõΩ00.50.00.5124642561024\\\\beta\\_{0}\\\\in\\\\{-0.5,0.0,0.5,1,2,4,64,256,1024\\\\} source distributions. The models are trained on the FineWeb-Edu (Lozhkov et al., [2024]) data set.\\\nTable [1]Table 1 ‚Ä£ 7 Related Work ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") compares the evidence lower bound (ELBO), as in equation [37]Equation 37 ‚Ä£ 6 ELBO for Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), of our trained models with previous works. See [SectionE.1]E.1 Text generation ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") for experimental setup. We find that the kinetic optimal scheduler yields the best results on most of the evaluation sets. Notably, to the best of our knowledge, this is the first time a non-mask source distribution obtains comparable results and sometimes outperforms the mask source distribution. Figure [1]Figure 1 ‚Ä£ 7 Related Work ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") presents a view of the generative perplexity (as measured by GPT2-large) vs. the ELBO of each model.\\\nGenerative perplexity represents the likelihood as determined by an external model, whereas the ELBO indicates the likelihood as assessed by the evaluated model.\\\nWe see that models trained using the kinetic optimal scheduler achieve better tradeoffs than those trained with the linear scheduler, as they more frequently appear on the Pareto front.\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n| ![Refer to caption] | ![Refer to caption] | |     |     |\\\n| --- | --- |\\\n| Method | FID ‚Üì‚Üì\\\\downarrow |\\\n| D3PM (Austin et al., [2021]) | 7.34 |\\\n| CTDD (Nisonoff et al., [2024]) | 7.86 |\\\n| œÑùúè\\\\tauLDR-10 (Campbell et al., [2022]) | 3.74 |\\\n| DFM w/ mask (Gat et al., [2024]) | 3.63 |\\\n| DFM w/ metric (Ours) | 3.43 | |\\\n\\\nFigure 2: (left) Increasing the design space of discrete probability paths and velocities allows us to perform better than prior works, while significantly boosting performance at the low NFE regime.\\\n(middle) We find that the choice of kinetic optimal ut‚ãÜsuperscriptsubscriptùë¢ùë°‚ãÜu\\_{t}^{\\\\star} significantly affects the low NFE regime while adding the probability-preserving component ut‚üÇsuperscriptsubscriptùë¢ùë°perpendicular-tou\\_{t}^{\\\\perp} stabilizes the high NFE regime.\\\n(right) Comparison of FID values for discrete generative models.Table 2: De novo material generation. Our primary metric, Stability Rate, is the fraction of materials with energies below the convex hull formed by stable materials, following Miller et al. ( [2024]).\\\n\\\n| Method | NFE | Validity (%) ‚Üë‚Üë\\\\uparrow | Coverage (%) ‚Üë‚Üë\\\\uparrow | Property ‚Üì‚Üì\\\\downarrow | Stability Rate (%) ‚Üë‚Üë\\\\uparrow |\\\n|  |  | Structural | Composition | Recall | Precision | wdist (œÅùúå\\\\rho) | wdist (Ne‚ÄãlsubscriptùëÅùëíùëôN\\_{el}) |  |\\\n| CDVAE (Xie et al., [2021]) | 5000 | 100.00 | 86.70 | 99.15 | 99.49 | 0.688 | 0.278 | 1.57 |\\\n| DiffCSP (Jiao et al., [2023]) | 1000 | 100.00 | 83.25 | 99.71 | 99.76 | 0.350 | 0.125 | 5.06 |\\\n| FlowMM (Miller et al., [2024]) | 1000 | 96.85 | 83.19 | 99.49 | 99.58 | 0.239 | 0.083 | 4.65 |\\\n| CrystalLLM (70B) (Gruver et al., [2024]) | ‚Äì | 99.6 | 95.4 | 85.8 | 98.9 | 0.81 | 0.44 | 5.28 |\\\n| Autoregressive | ‚Äì | 86.43 | 89.33 | 63.31 | 99.74 | 0.088 | 0.030 | 1.99 |\\\n| Perm. invariant DFM - Mask w/ Cubic | 250 | 94.40 | 84.40 | 98.25 | 99.40 | 0.244 | 0.144 | 6.90 |\\\n| Perm. invariant DFM - Mask w/ Kinetic Optimal ( [33]Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) | 250 | 95.79 | 88.50 | 90.11 | 99.29 | 0.542 | 0.154 | 7.02 |\\\n\\\n### 8.2 Crystalline material generation\\\n\\\nTo showcase the flexibility of our approach, we use discrete Flow Matching to generate crystals.\\\nWe train on inorganic materials from the MP-20 dataset, a subset of the Materials Project database (Jain et al., [2013]).\\\nCrystalline materials are represented using a combination of continuous and discrete variables, which we tokenize using the same method as Gruver et al. ( [2024]), which fine-tunes a 70B LlaMa-2 autoregressive model (Touvron et al., [2023]). In contrast, we are the first to perform crystal generation with a purely discrete non-autoregressive model.\\\n\\\nAn important distinction is that since discrete Flow Matching directly predicts the factorized posterior ( [10]Equation 10 ‚Ä£ 2 Background: Discrete Flow Matching ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), we can easily impose permutation invariance of the atoms, which should significantly reduce the complexity of the learning problem.\\\nThis is as opposed to prior works on using autoregressive models for material generation (Flam-Shepherd & Aspuru-Guzik, [2023]; Gruver et al., [2024]) which must impose an unnatural ordering on the variables.\\\nWe show results in [Table2]In 8.1 Text generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") where we achieve state-of-the-art results using discrete Flow Matching, in particular, with a kinetic optimal scheduler ( [33]Equation 33 ‚Ä£ 4.2 Kinetic Optimal probability paths ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")). We believe non-autoregressive generation is a key ingredient in performing well due to the ability to impose structure such as permutation invariance. Compared to continuous-space models such as FlowMM (Miller et al., [2024]) and DiffCSP (Jiao et al., [2023]), we see a large performance gain in terms of our main metric, stability rate (‚â•38absent38\\\\geq 38% relative improvement), from using discrete generative models due to the discrete nature of crystal generation.\\\n\\\nLlamaGen\\\n\\\n![Refer to caption]\\\n\\\nDFM metric\\\n\\\n![Refer to caption]\\\n\\\nFigure 3: Generated samples for ImageNet 256√ó\\\\times256, with the same class label per column. (top) Autoregressive LlamaGen model (Sun et al., [2024]). (bottom) Discrete Flow Matching with metric-induced probability path ( [27]Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")).\\\n\\\n### 8.3 Pixel space image generation\\\n\\\nWe first consider the case of image generation in pixel space. Here, ùíØ={0,‚Ä¶,255}ùíØ0‚Ä¶255{\\\\mathcal{T}}=\\\\{0,\\\\dots,255\\\\} and we have access to a natural choice of metric, by embedding ùíØùíØ{\\\\mathcal{T}} on the interval \\[‚àí1,1\\]‚äÇ‚Ñù11‚Ñù\\[-1,1\\]\\\\subset\\\\mathbb{R} and using the Euclidean distance d‚Äã(x,y)=\\|x‚àíy\\|dùë•ùë¶ùë•ùë¶\\\\textrm{d}(x,y)=\\|x-y\\| in ( [27]Equation 27 ‚Ä£ 4.1 Kinetic optimal velocity ‚Ä£ 4 Kinetic optimal velocities and probability paths ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")), as is typically done for continuous-space image generative models. We use the CIFAR-10 dataset (Krizhevsky et al., [2009]) for these experiments. Results are shown in [Figure2]In 8.1 Text generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), where we can improve upon the masked construction while also retaining performance at low number of function evaluations (NFE). Generated samples are shown in [Figure3]In 8.2 Crystalline material generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and in [AppendixG]Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"). We find that optimizing the velocity after training can provide significant gains: the choice of probability-advancing velocity ( [SectionC.3]C.3 Power ‚àû velocity for general paths ‚Ä£ Appendix C Closed-form kinetic optimal velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) affects the low NFE samples while the adding the probability-preserving component ( [Section5]Probability-preserving velocities ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\")) improves at high NFE.\\\n\\\n### 8.4 Discrete latent image generation\\\n\\\nTable 3: Face-blurred ImageNet-256 with the Llama-B architecture (111M parameters).\\\n\\\n‚àódenotes our reimplementation.\\\n\\\n| Method | NFE | FID |\\\n| --- | --- | --- |\\\n| LlamaGen (AR) (Sun et al., [2024]) | 256 | 5.46 |\\\n| LlamaGen (AR)‚àó(Sun et al., [2024]) | 256 | 4.81 |\\\n| DFM - Mask‚àó(Gat et al., [2024]) | 100 | 5.72 |\\\n| DFM - Metric (Ours) | 100 | 4.50 |\\\n\\\nWe also explore the use of discrete Flow Matching as a generative model within a discrete latent space learned by a vector quantized variational autoencoder (VQVAE; Van Den Oord et al. ( [2017])). We use images from face-blurred ImageNet (Deng et al., [2009]; Chrabaszcz et al., [2017]) at 256√ó\\\\times256 resolution. For training the VQVAE model, we follow the setup in Sun et al. ( [2024]) and use 16√ó\\\\times downsampling to produce a latent space of dimension 16√ó\\\\times16 with a codebook size of \\|ùíØ\\|=214=16384ùíØsuperscript21416384\\|{\\\\mathcal{T}}\\|=2^{14}=16384.\\\nAs our choice of d‚Äã(‚ãÖ,x1)d‚ãÖsubscriptùë•1\\\\textrm{d}(\\\\cdot,x\\_{1}), we use the same metric that was used to train the VQVAE model, which is d‚Äã(x,y)=‚Äñx/‚Äñx‚Äñ‚àíy/‚Äñy‚Äñ‚Äñdùë•ùë¶normùë•normùë•ùë¶normùë¶\\\\textrm{d}(x,y)=\\\\left\\\\\\|\\\\nicefrac{{x}}{{\\\\left\\\\\\|x\\\\right\\\\\\|}}-\\\\nicefrac{{y}}{{\\\\left\\\\\\|y\\\\right\\\\\\|}}\\\\right\\\\\\|. We show quantitative results in [Table3]In 8.4 Discrete latent image generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), where we find that discrete Flow Matching model with the metric probability path outperforms the autoregressive approach, while the masked construction lags behind. In addition, we show generated samples in [Figure3]In 8.2 Crystalline material generation ‚Ä£ 8 Experiments ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and [Figure8]In Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\"), along with a visualization of the metric probability path in [Figure4]In The metric path. ‚Ä£ E.4 Image generation - Face-blurred ImageNet256√ó256 ‚Ä£ Appendix E Experimental Details ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\") and ablation studies on NFE and CFG scale in [AppendixG]Appendix G Additional Tables and Figures ‚Ä£ Flow Matching with General Discrete Paths: A Kinetic-Optimal Perspective\").\\\n\\",
      "citations": [
        {
          "start_pos": 3353,
          "end_pos": 3375,
          "text": "Lozhkov et al., [2024]",
          "paper_id": "bib.bib33",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4900,
          "end_pos": 4921,
          "text": "Austin et al., [2021]",
          "paper_id": "bib.bib2",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4941,
          "end_pos": 4964,
          "text": "Nisonoff et al., [2024]",
          "paper_id": "bib.bib37",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 4993,
          "end_pos": 5016,
          "text": "Campbell et al., [2022]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 5043,
          "end_pos": 5061,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib8",
            "bib.bib5",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 5827,
          "end_pos": 5849,
          "text": "Miller et al. ( [2024]",
          "paper_id": "bib.bib36",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6106,
          "end_pos": 6124,
          "text": "Xie et al., [2021]",
          "paper_id": "bib.bib62",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6203,
          "end_pos": 6222,
          "text": "Jiao et al., [2023]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6300,
          "end_pos": 6321,
          "text": "Miller et al., [2024]",
          "paper_id": "bib.bib36",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 6408,
          "end_pos": 6429,
          "text": "Gruver et al., [2024]",
          "paper_id": "bib.bib22",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7212,
          "end_pos": 7231,
          "text": "Jain et al., [2013]",
          "paper_id": "bib.bib25",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7374,
          "end_pos": 7396,
          "text": "Gruver et al. ( [2024]",
          "paper_id": "bib.bib22",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 7452,
          "end_pos": 7474,
          "text": "Touvron et al., [2023]",
          "paper_id": "bib.bib56",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 8076,
          "end_pos": 8089,
          "text": "Guzik, [2023]",
          "paper_id": "bib.bib18",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 8091,
          "end_pos": 8112,
          "text": "Gruver et al., [2024]",
          "paper_id": "bib.bib22",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 8829,
          "end_pos": 8850,
          "text": "Miller et al., [2024]",
          "paper_id": "bib.bib36",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 8865,
          "end_pos": 8884,
          "text": "Jiao et al., [2023]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 9303,
          "end_pos": 9321,
          "text": "Sun et al., [2024]",
          "paper_id": "bib.bib54",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10232,
          "end_pos": 10257,
          "text": "Krizhevsky et al., [2009]",
          "paper_id": "bib.bib28",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 11635,
          "end_pos": 11653,
          "text": "Sun et al., [2024]",
          "paper_id": "bib.bib54",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 11688,
          "end_pos": 11706,
          "text": "Sun et al., [2024]",
          "paper_id": "bib.bib54",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 11738,
          "end_pos": 11756,
          "text": "Gat et al., [2024]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib8",
            "bib.bib5",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 11987,
          "end_pos": 12007,
          "text": "Oord et al. ( [2017]",
          "paper_id": "bib.bib58",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 12053,
          "end_pos": 12072,
          "text": "Deng et al., [2009]",
          "paper_id": "bib.bib12",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 12074,
          "end_pos": 12099,
          "text": "Chrabaszcz et al., [2017]",
          "paper_id": "bib.bib8",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib19",
            "bib.bib5",
            "bib.bib9"
          ]
        },
        {
          "start_pos": 12184,
          "end_pos": 12203,
          "text": "Sun et al. ( [2024]",
          "paper_id": "bib.bib54",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "9 Conclusion\\": {
      "content": "\\\nWe have opened up the design space of discrete Flow Matching models based on the the continuous-time Markov chain generative process. In particular, we propose a kinetic optimal point of view for constructing velocities given prescribed probability paths.\\\nThis leads to, for the first time, allowing arbitrary probability paths to be used.\\\nFurthermore, we justify mixture paths with particular schedulers as being kinetic optimal solutions, and showcase for the first time, competitive results for non-mask source distributions.\\\nOur method naturally encapsulates existing approaches, and we showcase the flexibility of our approach to designing discrete Flow Matching models across multiple application domains, ranging from text generation, to materials and image generation, where we see significant gains over autoregressive models.\\\n\\",
      "citations": []
    }
  },
  "references": {
    "data": {
      "bib.bib1": {
        "id": "bib.bib1",
        "citation": "Albergo et al. (2023)",
        "authors": "",
        "year": "",
        "title": "Stochastic interpolants: A unifying framework for flows and diffusions.",
        "venue": "arXiv preprint arXiv:2303.08797",
        "pages": "",
        "url": "",
        "arxiv_id": "2303.08797",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "### 1.1 Background and motivation\n\nDynamical approaches for deterministic and stochastic transport have become a central theme in contemporary generative modeling research. At the heart of progress is the idea to use ordinary or stochastic differential equations (ODEs/SDEs) to continuously transform samples from a base probability density function (PDF) œÅ0subscriptùúå0\\\\rho\\_{0} into samples from a target density œÅ1subscriptùúå1\\\\rho\\_{1} (or vice-versa), and the realization that inference over the velocity field in these equations can be formulated as an empirical risk minimization problem over a parametric class of functions \\[ [24]), [58]), [25]), [60]), [5]), [2]), [41]), [39])\\].\n\nA major milestone was the introduction of score-based diffusion methods (SBDM) \\[ [60])\\], which map an arbitrary density into a standard Gaussian by passing samples through an Ornstein-Uhlenbeck (OU) process. The key insight of SBDM is that this process can be reversed by introducing a backwards SDE whose drift coefficient depends on the score of the time-dependent density of the process. By learning this score ‚Äì which can be done by minimization of a quadratic objective function known as the denoising loss \\[ [68])\\] ‚Äì the backwards SDE can be used as a generative model that maps Gaussian noise into data from the target. Though theoretically exact, the mapping takes infinite time in both directions, and hence must be truncated in practice.\n\nWhile diffusion-based methods have become state-of-the-art for tasks such as image generation, there remains considerable interest in developing methods that bridge two arbitrary densities (rather than requiring one to be Gaussian), that accomplish the transport exactly, and that do so on a finite time interval.\nMoreover, while the highest quality results from score-based diffusion were originally obtained using SDEs \\[ [60])\\], this has been challenged by recent works that find equivalent or better performance with ODE-based methods if the score is learned sufficiently well \\[ [32])\\].\nIf made to match the performance of their stochastic counterparts, ODE-based methods exhibit a number of desirable characteristics, such as an exact, computationally tractable formula for the likelihood and the easy application of well-developed adaptive integration schemes for sampling.\nIt is an open question of significant practical importance to understand if there exists a separation in sample quality between generative models based on deterministic dynamics and those based on stochastic dynamics.\n\nIn order to satisfy the desirable characteristics outlined in the previous paragraph, we develop a framework for generative modeling based on the method proposed in \\[ [2])\\], which is built on the notion of a stochastic interpolantxtsubscriptùë•ùë°x\\_{t} used to bridge two arbitrary densities œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}.\nWe will consider more general designs below, but as one example the reader can keep in mind:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xt=(1‚àít)‚Äãx0+t‚Äãx1+2‚Äãt‚Äã(1‚àít)‚Äãz,t‚àà\\[0,1\\],formulae-sequencesubscriptùë•ùë°1ùë°subscriptùë•0ùë°subscriptùë•12ùë°1ùë°ùëßùë°01x\\_{t}=(1-t)x\\_{0}+tx\\_{1}+\\\\sqrt{2t(1-t)}z,\\\\quad t\\\\in\\[0,1\\], |  | (1.1) |\n\nwhere x0subscriptùë•0x\\_{0}, x1subscriptùë•1x\\_{1}, and zùëßz are random variables drawn independently from œÅ0subscriptùúå0\\\\rho\\_{0}, œÅ1subscriptùúå1\\\\rho\\_{1}, and the standard Gaussian density ùñ≠‚Äã(0,Id)ùñ≠0Id\\\\mathsf{N}(0,\\\\text{\\\\it Id}), respectively. The stochastic interpolant xtsubscriptùë•ùë°x\\_{t} defined in ( [1.1]In 1.1 Background and motivation ‚Ä£ 1 Introduction ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is a continuous-time stochastic process that, by construction, satisfies xt=0=x0‚àºœÅ0subscriptùë•ùë°0subscriptùë•0similar-tosubscriptùúå0x\\_{t=0}=x\\_{0}\\\\sim\\\\rho\\_{0} and xt=1=x1‚àºœÅ1subscriptùë•ùë°1subscriptùë•1similar-tosubscriptùúå1x\\_{t=1}=x\\_{1}\\\\sim\\\\rho\\_{1}. Its paths therefore exactly bridge between samples from œÅ0subscriptùúå0\\\\rho\\_{0} at t=0ùë°0t=0 and from œÅ1subscriptùúå1\\\\rho\\_{1} at t=1ùë°1t=1. A key observation is that:\n\n> The law of the interpolant xtsubscriptùë•ùë°x\\_{t} at any time t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] can be realized by many different processes, including an ODE and forward and backward SDEs whose drifts can be learned from data.\n\nTo see why this is the case, one must consider the probability distribution of the interpolant xtsubscriptùë•ùë°x\\_{t}. As shown below, for a large class of densities œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} supported on ‚Ñùdsuperscript‚Ñùùëë{\\\\mathbb{R}}^{d}, this distribution is absolutely continuous with respect to the Lebesgue measure. Moreover, its time-dependent density œÅ‚Äã(t)ùúåùë°\\\\rho(t) satisfies a first-order transport equation and a family of forward and backward Fokker-Planck equations in which the diffusion coefficient can be varied at will. Out of these equations, we can readily derive generative models that satisfy ODEs and SDEs, respectively, and whose densities at time tùë°t are given by œÅ‚Äã(t)ùúåùë°\\\\rho(t).\n\n![Refer to caption]Figure 1: The stochastic interpolant paradigm.\nExample generative models based on the proposed framework, which connects two densities œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} using samples from both.\nThe design of the time-dependent probability density œÅ‚Äã(t)ùúåùë°\\\\rho(t) that bridges between œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} is separated from the choice of how to sample it, which can be accomplished with deterministic or stochastic generative models.\nLeft panel: Sampling with a deterministic (ODE) generative model known as the probability flow equation.\nRight panel: Sampling with a stochastic generative model given by an SDE with a tunable diffusion coefficient.\nThe probability flow equation and the SDE have different paths, but their time-dependent density œÅ‚Äã(t)ùúåùë°\\\\rho(t) is the same.\nMoreover, the two equations rely on the same estimates for the velocity and the score.\n\nInterestingly, the drift coefficients entering these ODEs/SDEs are the unique minimizers of quadratic objective functions that can be estimated empirically using data from œÅ0subscriptùúå0\\\\rho\\_{0}, œÅ1subscriptùúå1\\\\rho\\_{1}, and ùñ≠‚Äã(0,Id)ùñ≠0Id\\\\mathsf{N}(0,\\\\text{\\\\it Id}). The resulting least-squares regression problem allows us to estimate the drift coefficients of the ODE/SDEs, which can then be used to push samples from œÅ0subscriptùúå0\\\\rho\\_{0} onto new samples from œÅ1subscriptùúå1\\\\rho\\_{1} and vice-versa.\n\n### 1.2 Main contributions and organization\n\nThe approach introduced here is a versatile way to build generative models that unifies and extends many existing algorithms. In Sec. [2]Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we develop the framework in full generality, where we emphasize the following key contributions:\n\n- ‚Ä¢\n\n\nWe prove that the stochastic interpolant defined in Section [2.1]Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") has a distribution that is absolutely continuous with respect to the Lebesgue measure on ‚Ñùdsuperscript‚Ñùùëë{\\\\mathbb{R}}^{d}, and that its density œÅ‚Äã(t)ùúåùë°\\\\rho(t) satisfies a first-order transport equation (TE) as well as a family of forward and backward Fokker-Planck equations (FPEs) with tunable diffusion coefficients.\n\n- ‚Ä¢\n\n\nWe show how the stochastic interpolant can be used to learn the drift coefficients that enter the TE and the FPEs.\nWe characterize these coefficients as the minimizers of simple quadratic objective functions given in Section [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\nWe introduce a new objective for the score ‚àálog‚Å°œÅ‚Äã(t)‚àáùúåùë°\\\\nabla\\\\log\\\\rho(t) of the interpolant density, as well as an objective function for learning a denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}, which we relate to the score.\n\n- ‚Ä¢\n\n\nIn Section [2.3]Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we derive ordinary and stochastic differential equations associated with the TE and FPEs that lead to deterministic and stochastic generative models.\nIn Section [2.4]Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we show that regressing the drift for SDE-based models controls the likelihood, but that regressing the drift alone is not sufficient for ODE-based models, which must also minimize a Fisher divergence. We show how to optimally tune the diffusion coefficient to maximize the likelihood for SDEs.\n\n- ‚Ä¢\n\n\nIn Section [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we develop a general formula to evaluate the likelihood of SDE-based generative models that serves as a natural counterpart to the continuous change-of-variables formula commonly used to compute the likelihood of ODE-based models. In addition, we give formulas to estimate the cross-entropy.\n\n\nIn Section [3]Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we discuss instantiations of the stochastic interpolant method.\nIn Section [3.4]Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") we first show that interpolants are equivalent to a class of stochastic bridges, but that they avoid the need for Doob‚Äôs h‚Ñéh-transform, which is generically unknown; we show that this simplifies the construction of a broad class of generative models.\nIn Section [3.2]One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we define the one-sided interpolant, which corresponds to the conventional setting in which the base œÅ0subscriptùúå0\\\\rho\\_{0} is taken to be a Gaussian.\nWith a Gaussian base, several aspects of the interpolant simplify, and we detail the corresponding objective functions.\nIn Section [3.3]Mirror interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we introduce a mirror interpolant in which the base œÅ0subscriptùúå0\\\\rho\\_{0} and the target œÅ1subscriptùúå1\\\\rho\\_{1} are identical.\nFinally, in Section [3.4]Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we show how the interpolant framework leads to a natural formulation of the Schr√∂dinger bridge problem between two densities.\n\nIn Section [4]Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we discuss a special case in which the interpolant is spatially linear in x0subscriptùë•0x\\_{0} and x1subscriptùë•1x\\_{1}.\nIn this case, the velocity field can be factorized, which we show in Section [4.1]Factorization of the velocity field ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") leads to a simpler learning problem.\nWe detail specific choices of linear interpolants in Section [4.2]Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), and in Section [4.3]Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") we illustrate how these choices influence the performance of the resulting generative model, with a particular focus on the role of the latent variable and the diffusion coefficient.\nFor exposition, we focus on Gaussian mixture densities, for which the drift coefficients can be computed analytically.\nWe provide the resulting formula in Appendix [A]Appendix A Bridging two Gaussian mixture densities ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\nFinally, in Section [4.4]Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we discuss the case of spatially linear one-sided interpolants.\n\nIn Section [5]Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we formalize the connection between stochastic interpolants and related classes of generative models.\nIn Section [5.1]Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we show that score-based diffusion models can be re-written as one-sided interpolants after a reparameterization of time; we highlight how this approach eliminates singularities that appear when naively compressing score-based diffusion onto a finite-time interval.\nIn Section [5.2]Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we show how interpolants can be used to derive the Bayes-optimal estimator for a denoiser, and we show how this approach can be iterated to create a generative model.\nIn Section [5.3]Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we consider the possibility of rectifying the flow map of a learned generative model.\nWe show that the rectification procedure does not change the underlying generative model, though it may change the time-dependent density of the interpolant.\n\nIn Section [6]Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we provide the details of practical algorithms associated with the mathematical results presented above.\nIn Section [6.1]Learning ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we describe how to numerically estimate the objectives given empirical datasets from the base and the target.\nIn Section [6.2]Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we complement this discussion on learning with algorithms for sampling with the ODE or an SDE.\n\nWe provide numerical demonstrations in line with these recommendations in Section [7]Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), and we conclude with some remarks in Section. [8]Conclusion ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\n\n### 1.3 Related work\n\n#### Deterministic Transport and Normalizing Flows.\n\nTransport-based sampling and density estimation has its contemporary roots in Gaussianizing data via maximum entropy methods \\[ [23]), [12]), [64]), [63])\\]. The change of measure under such transformation is the backbone of normalizing flow models. The first neural network realizations of these methods arose through imposing clever structure on the transformation to make the change of measure tractable in discrete, sequential steps \\[ [52]), [16]), [50]), [28]), [19])\\]. A continuous time version of this procedure was made possible by viewing the map T=Xt‚Äã(x)ùëásubscriptùëãùë°ùë•T=X\\_{t}(x) as the solution of an ODE \\[ [11]), [24])\\], whose parametric drift defining the transport is learned via maximum likelihood estimation. Training this way is intractable at scale, as it requires simulating the ODE. Various methods have introduced regularization on the path taken between the two densities to make the ODE solves more efficient \\[ [22]), [48]), [65])\\], but the fundamental difficulty remains. We also work in continuous time; however, our approach allows us to learn the drift without simulation of the dynamics, and can be formulated at sample generation time through either deterministic or stochastic transport.\n\n#### Stochastic Transport and Score-Based Diffusions (SBDMs).\n\nComplementary to approaches based on deterministic maps, recent works have realized that connecting a data distribution to a Gaussian density can be viewed as the evolution of an Ornstein-Ulhenbeck (OU) process which gradually degrades samples from the distribution of interest to Gaussian noise \\[ [54]), [25]), [58]), [60])\\].\nThe OU process specifies a path in the space of probability densities; this path is simple to traverse in the forward direction by addition of noise, and can be reversed if access to the score of the time-dependent density ‚àálog‚Å°œÅ‚Äã(t)‚àáùúåùë°\\\\nabla\\\\log\\\\rho(t) is available.\nThis score can be approximated through solution of a least-squares regression problem \\[ [29]), [68])\\], and the target can be sampled by reversing the path once the score has been learned.\nInterestingly, the resulting forward and backward stochastic processes have an equivalent formulation (at the distribution level) in terms of a deterministic probability flow equation, first noted by \\[ [4]), [49]), [33])\\] and then applied in \\[ [44]), [57]), [34]), [7])\\].\nThe probability flow formulation is useful for density estimation and cross-entropy calculations, but it is worth noting that the probability flow and the reverse-time SDE will have densities that differ when using an approximate score.\nThe SBDM framework, as it has been originally presented, has a number of features which are not a priori well motivated, including the dependence on mapping to a normal density, the complicated tuning of the time parameterization and noise scheduling \\[ [69]), [26])\\], and the choice of the underlying stochastic dynamics \\[ [17]), [32])\\].\nWhile there have been some efforts to remove dependency on the OU process using stochastic bridges \\[ [51])\\], the resulting procedures can be algorithmically complex, relying on inexact mixtures of diffusions with limited expressivity and no accessible probability flow formulation. Some of these difficulties have been lifted in follow-up works \\[ [42])\\]. As another step in this direction, we observe that the key idea behind SBDMs ‚Äì the bridging of densities via a time-dependent density whose evolution equation is available ‚Äì can be generalized to a much wider class of processes in a straightforward and computationally accessible manner.\n\n#### Stochastic Interpolants, Rectified Flows, and Flow matching.\n\nVariants of the stochastic interpolant method presented in \\[ [2])\\] were also presented in \\[ [41]), [39])\\]. In \\[ [41])\\], a linear interpolant was proposed with a focus on straight paths. This was employed as a step toward rectifying the transport paths \\[ [40])\\] through a procedure that improves sampling efficiency but introduces a bias. In Section [5.3]Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we present an alternative form of rectification that is bias-free. In \\[ [39])\\], the interpolant picture was assembled from the perspective of conditional probability paths connecting to a Gaussian, where a noise convolution was used to improve the learning at the cost of biasing the method. Extensions of \\[ [39])\\] were presented in \\[ [66])\\] that generalize the method beyond the Gaussian base density. In the method proposed here, we introduce an unbiased means to incorporate noise into the process, both via the introduction of a latent variable into the stochastic interpolant and the inclusion of a tunable diffusion coefficient in the asociated stochastic generative models. We provide theoretical and practical motivation for the presence of these noise terms.\n\n#### Optimal Transport and Schr√∂dinger Bridges.\n\nThere is both theoretical and practical interest in minimizing the transport cost of connecting œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}, which. In the case of deterministic maps, this is characterized by the optimal transport problem, and in the case of diffusive maps, by the Schr√∂dinger Bridge problem \\[ [67]), [15])\\]. Formally, these two problems can be related by viewing the Schr√∂dinger Bridge as an entropy-regularized optimal transport.\nOptimal transport has primarily been employed as a means to regularize flow-based methods by imposing either a path length penalty \\[ [71]), [48]), [22]), [65])\\] or structure on the parameterization itself \\[ [27]), [70])\\].\nA variety of recent works have formulated the Schr√∂dinger problem in the context of a learnable diffusion \\[ [8]), [62]), [14])\\]. In the interpolant framework, \\[ [2]), [41]), [39]), [66])\\] all propose optimal transport extensions to the learning procedure. The method proposed in \\[ [41]), [40])\\] allows one to sequentially lower the transport cost through rectification, at the cost of introducing a bias unless the velocity field is perfectly learned. The method proposed in \\[ [2])\\] is an unbiased framework at the cost of solving an additional optimization problem over the interpolant function. The statement of optimal transport in \\[ [39])\\] only applies to Gaussians, but is shown to be practically useful in experimental demonstrations.\n\nIn the method proposed below, we provide two approaches for optimizing the transport under a stochastic dynamics. Our primary approach, based on the scheme introduced in \\[ [2])\\], is presented in Section [3.4]Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). It offers an alternative route to solve the Schr√∂dinger bridge problem under the Benamou-Brenier hydrodynamic formulation of transport by maximizing over the interpolant \\[ [6])\\]. However, we stress that this additional optimization step is not necessary in practice, as our approach leads to bias-free generative models for any fixed interpolant. In addition, Section [5.3]Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") discusses an unbiased variant of the rectification scheme proposed in \\[ [41])\\].\n\n#### Convergence bounds.\n\nInspired by the successes of score-based diffusion, significant recent research effort has been expended to understand the control that can be obtained on suitable distances between the distribution of the generative model and the target data distribution, such as ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}, W2subscriptùëä2W\\_{2}, or ùñ≥ùñµùñ≥ùñµ\\\\mathsf{TV}.\nPerhaps the first line of work in this direction is \\[ [57])\\], which showed that standard score-based diffusion training techniques bound the likelihood of the resulting SDE model.\nImportantly, as we show here, the likelihood of the corresponding probability flow is not bounded in general by this technique, as first highlighted in the context of SBDM by \\[ [43])\\].\nControl for SBDM-based techniques was later quantified more rigorously under the assumption of functional inequalities in a discretized setting by \\[ [36])\\], which were removed by \\[ [37])\\] and \\[ [13])\\] via Girsanov-based techniques.\nMost relevant to the PDE-based methods considered here is \\[ [10])\\], which applies similar techniques to our own in the SBDM context to obtain sharp guarantees with minimal assumptions.\n\n### 1.4 Notation\n\nThroughout, we denote probability density functions as œÅ0‚Äã(x)subscriptùúå0ùë•\\\\rho\\_{0}(x), œÅ1‚Äã(x)subscriptùúå1ùë•\\\\rho\\_{1}(x), and œÅ‚Äã(t,x)ùúåùë°ùë•\\\\rho(t,x), with t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] and x‚àà‚Ñùdùë•superscript‚Ñùùëëx\\\\in{\\\\mathbb{R}}^{d}, omitting the function arguments when clear from the context. We proceed similarly for other functions of time and space, such as b‚Äã(t,x)ùëèùë°ùë•b(t,x) or I‚Äã(t,x0,x1)ùêºùë°subscriptùë•0subscriptùë•1I(t,x\\_{0},x\\_{1}). We use the subscript tùë°t to denote the time-dependency of stochastic processes, such as the stochastic interpolant xtsubscriptùë•ùë°x\\_{t} or the Wiener process Wtsubscriptùëäùë°W\\_{t}. To specify that the random variable x0subscriptùë•0x\\_{0} is drawn from the probability distribution with density œÅ0subscriptùúå0\\\\rho\\_{0}, say, with a slight abuse of notations we use x0‚àºœÅ0similar-tosubscriptùë•0subscriptùúå0x\\_{0}\\\\sim\\\\rho\\_{0}. Similarly, we use ùñ≠‚Äã(0,Id)ùñ≠0Id{\\\\sf N}(0,\\\\text{\\\\it Id}) to denote both the density and the distribution of the Gaussian random variable with mean zero and covariance identity. We denote expectation by ùîºùîº{\\\\mathbb{E}}, and usually specify the random variables this expectation is taken over. With a slight abuse of terminology, we say that the law of the process xtsubscriptùë•ùë°x\\_{t} is œÅ‚Äã(t)ùúåùë°\\\\rho(t) if œÅ‚Äã(t)ùúåùë°\\\\rho(t) is the density of the probability distribution of xtsubscriptùë•ùë°x\\_{t} at time tùë°t.\n\nWe use standard notation for function spaces: for example, C1‚Äã(\\[0,1\\])superscriptùê∂101C^{1}(\\[0,1\\]) is the space of continuously differentiable functions from \\[0,1\\]01\\[0,1\\] to ‚Ñù‚Ñù{\\\\mathbb{R}}, (C2‚Äã(‚Ñùd))dsuperscriptsuperscriptùê∂2superscript‚Ñùùëëùëë(C^{2}({\\\\mathbb{R}}^{d}))^{d} is the space of twice continuously differentiable functions from ‚Ñùdsuperscript‚Ñùùëë{\\\\mathbb{R}}^{d} to ‚Ñùdsuperscript‚Ñùùëë{\\\\mathbb{R}}^{d}, and C0p‚Äã(‚Ñùd)subscriptsuperscriptùê∂ùëù0superscript‚ÑùùëëC^{p}\\_{0}({\\\\mathbb{R}}^{d}) is the space of compactly supported functions from ‚Ñùdsuperscript‚Ñùùëë{\\\\mathbb{R}}^{d} to ‚Ñù‚Ñù{\\\\mathbb{R}} that are continuously differentiable pùëùp times. Given a function b:\\[0,1\\]√ó‚Ñùd‚Üí‚Ñùd:ùëè‚Üí01superscript‚Ñùùëësuperscript‚Ñùùëëb:\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}^{d} with value b‚Äã(t,x)ùëèùë°ùë•b(t,x) at (t,x)ùë°ùë•(t,x), we use b‚ààC1‚Äã(\\[0,1\\];(C2‚Äã(‚Ñùd))d)ùëèsuperscriptùê∂101superscriptsuperscriptùê∂2superscript‚Ñùùëëùëëb\\\\in C^{1}(\\[0,1\\];(C^{2}({\\\\mathbb{R}}^{d}))^{d}) to indicate that bùëèb is continuously differentiable in tùë°t for all (t,x)‚àà\\[0,1\\]√ó‚Ñùdùë°ùë•01superscript‚Ñùùëë(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d} and that b‚Äã(t,‚ãÖ)ùëèùë°‚ãÖb(t,\\\\cdot) is an element of (C2‚Äã(‚Ñùd))dsuperscriptsuperscriptùê∂2superscript‚Ñùùëëùëë(C^{2}({\\\\mathbb{R}}^{d}))^{d} for all t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\].",
            "citations": null
          },
          "2 Stochastic interpolant framework": {
            "content": "### 2.1 Definitions and assumptions\n\nWe begin by defining the stochastic processes that are central to our approach:\n\n###### Definition 2.1(Stochastic interpolant).\n\nGiven two probability density functions œÅ0,œÅ1:‚Ñùd‚Üí‚Ñù‚â•0:subscriptùúå0subscriptùúå1‚Üísuperscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho\\_{0},\\\\rho\\_{1}:{{\\\\mathbb{R}}^{d}}\\\\rightarrow{\\\\mathbb{R}}\\_{\\\\geq 0}, a stochastic interpolant between œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} is a stochastic process xtsubscriptùë•ùë°x\\_{t} defined as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xt=I‚Äã(t,x0,x1)+Œ≥‚Äã(t)‚Äãz,t‚àà\\[0,1\\],formulae-sequencesubscriptùë•ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°ùëßùë°01x\\_{t}=I(t,x\\_{0},x\\_{1})+\\\\gamma(t)z,\\\\qquad t\\\\in\\[0,1\\], |  | (2.1) |\n\nwhere:\n\n1. 1.\n\n\nI‚ààC2(\\[0,1\\],(C2(‚Ñùd√ó‚Ñùd)d)I\\\\in C^{2}(\\[0,1\\],(C^{2}({\\\\mathbb{R}}^{d}\\\\times{\\\\mathbb{R}}^{d})^{d}) satisfies the boundary conditions I‚Äã(0,x0,x1)=x0ùêº0subscriptùë•0subscriptùë•1subscriptùë•0I(0,x\\_{0},x\\_{1})=x\\_{0} and I‚Äã(1,x0,x1)=x1ùêº1subscriptùë•0subscriptùë•1subscriptùë•1I(1,x\\_{0},x\\_{1})=x\\_{1}, as well as\n\n\n\n|     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|  |  | ‚àÉC1<‚àû::subscriptùê∂1absent\\\\displaystyle\\\\exists C\\_{1}<\\\\infty\\ :\\ |  | \\|‚àÇtI‚Äã(t,x0,x1)\\|‚â§C1‚Äã\\|x0‚àíx1\\|subscriptùë°ùêºùë°subscriptùë•0subscriptùë•1subscriptùê∂1subscriptùë•0subscriptùë•1\\\\displaystyle\\|\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})\\|\\\\leq C\\_{1}\\|x\\_{0}-x\\_{1}\\|\\\\quad |  | ‚àÄ(t,x0,x1)‚àà\\[0,1\\]√ó‚Ñùd√ó‚Ñùd.for-allùë°subscriptùë•0subscriptùë•101superscript‚Ñùùëësuperscript‚Ñùùëë\\\\displaystyle\\\\forall(t,x\\_{0},x\\_{1})\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\times{\\\\mathbb{R}}^{d}. |  | (2.2) |\n\n2. 2.\n\n\nŒ≥:\\[0,1\\]‚Üí‚Ñù:ùõæ‚Üí01‚Ñù\\\\gamma:\\[0,1\\]\\\\to{\\\\mathbb{R}} satisfies Œ≥‚Äã(0)=Œ≥‚Äã(1)=0ùõæ0ùõæ10\\\\gamma(0)=\\\\gamma(1)=0, Œ≥‚Äã(t)>0ùõæùë°0\\\\gamma(t)>0 for all t‚àà(0,1)ùë°01t\\\\in(0,1), and Œ≥2‚ààC2‚Äã(\\[0,1\\])superscriptùõæ2superscriptùê∂201\\\\gamma^{2}\\\\in C^{2}(\\[0,1\\]).\n\n3. 3.\n\n\nThe pair (x0,x1)subscriptùë•0subscriptùë•1(x\\_{0},x\\_{1}) is drawn from a probability measure ŒΩùúà\\\\nu that marginalizes on œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}, i.e.\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ŒΩ‚Äã(d‚Äãx0,‚Ñùd)=œÅ0‚Äã(x0)‚Äãd‚Äãx0,ŒΩ‚Äã(‚Ñùd,d‚Äãx1)=œÅ1‚Äã(x1)‚Äãd‚Äãx1.formulae-sequenceùúàùëësubscriptùë•0superscript‚Ñùùëësubscriptùúå0subscriptùë•0ùëësubscriptùë•0ùúàsuperscript‚Ñùùëëùëësubscriptùë•1subscriptùúå1subscriptùë•1ùëësubscriptùë•1\\\\nu(dx\\_{0},{\\\\mathbb{R}}^{d})=\\\\rho\\_{0}(x\\_{0})dx\\_{0},\\\\qquad\\\\nu({\\\\mathbb{R}}^{d},dx\\_{1})=\\\\rho\\_{1}(x\\_{1})dx\\_{1}. |  | (2.3) |\n\n4. 4.\n\n\nzùëßz is a Gaussian random variable independent of (x0,x1)subscriptùë•0subscriptùë•1(x\\_{0},x\\_{1}), i.e. z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}) and z‚üÇ(x0,x1)perpendicular-toùëßsubscriptùë•0subscriptùë•1z\\\\perp(x\\_{0},x\\_{1}).\n\n\nEq. ( [2.2]In item 1 ‚Ä£ Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) states that I‚Äã(t,x0,x1)ùêºùë°subscriptùë•0subscriptùë•1I(t,x\\_{0},x\\_{1}) does not move too fast along the way from x0subscriptùë•0x\\_{0} at t=0ùë°0t=0 to x1subscriptùë•1x\\_{1} at t=1ùë°1t=1, and as a result does not wander too far from either endpoint ‚Äì this assumption is made for convenience but is not necessary for most arguments below.\nLater, we will find it useful to consider choices for IùêºI that are spatially nonlinear, which we show can recover the solution to the Schr√∂dinger bridge problem. Nevertheless, a simple example that serves as a valid IùêºI in the sense of Definition [2.1]Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") is given in ( [1.1]In 1.1 Background and motivation ‚Ä£ 1 Introduction ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\nThe measure ŒΩùúà\\\\nu allows for a coupling between the two densities œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}, which affects the properties of the stochastic interpolant, but a simple choice is to take the product measure ŒΩ‚Äã(d‚Äãx0,d‚Äãx1)=œÅ0‚Äã(x0)‚ÄãœÅ1‚Äã(x1)‚Äãd‚Äãx0‚Äãd‚Äãx1ùúàùëësubscriptùë•0ùëësubscriptùë•1subscriptùúå0subscriptùë•0subscriptùúå1subscriptùë•1ùëësubscriptùë•0ùëësubscriptùë•1\\\\nu(dx\\_{0},dx\\_{1})=\\\\rho\\_{0}(x\\_{0})\\\\rho\\_{1}(x\\_{1})dx\\_{0}dx\\_{1}, in which case x0subscriptùë•0x\\_{0} and x1subscriptùë•1x\\_{1} are independent.\nIn Section [6]Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") we discuss how to design the stochastic interpolant in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and state some properties of the corresponding process xtsubscriptùë•ùë°x\\_{t}. Examples of stochastic interpolants are also shown in Figure [2]Figure 2 ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") for various choices of IùêºI and Œ≥ùõæ\\\\gamma.\n\n###### Remark 2.2(Comparison with \\[ [2])\\]).\n\nThe main difference between the stochastic interpolant defined in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the one originally introduced in \\[ [2])\\] is the inclusion of the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z. Many of the results below also hold when we set Œ≥‚Äã(t)‚Äãz=0ùõæùë°ùëß0\\\\gamma(t)z=0, but the objective of the present paper is to elucidate the advantages that this additional term provides when neither of the endpoints are Gaussian. We note that we could generalize the construction by making Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) a tensor; here we focus on the scalar case for simplicity. Another difference is the possibility to couple œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} via ŒΩùúà\\\\nu.\n\n![Refer to caption]Figure 2: Design flexibility. An illustration of how stochastic interpolants can be tailored to specific aims. All examples show one realization of xtsubscriptùë•ùë°x\\_{t} with one x0‚àºœÅ0similar-tosubscriptùë•0subscriptùúå0x\\_{0}\\\\sim\\\\rho\\_{0}, one x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1} (the flowers at the left and right of the figures), and one z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}). Top, Upper middle, and lower middle: various interpolants, ranging from direct interpolation with no latent variable (as in \\[ [2])\\]) to Gaussian encoding-decoding in which the data transitions to pure noise at the mid-point. Bottom: one-sided interpolant, which connects with score-based diffusion methods.\n\nThe stochastic interpolant xtsubscriptùë•ùë°x\\_{t} in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is a continuous-time stochastic process whose realizations are samples from œÅ0subscriptùúå0\\\\rho\\_{0} at time t=0ùë°0t=0 and from œÅ1subscriptùúå1\\\\rho\\_{1} at time t=1ùë°1t=1 by construction. As a result, it offers a way to bridge œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} ‚Äì we are interested in characterizing the law of xtsubscriptùë•ùë°x\\_{t} over the full interval \\[0,1\\]01\\[0,1\\], as it will allow us to design generative models. Mathematically, we want to characterize the properties of the time-dependent probability distribution Œº‚Äã(t,d‚Äãx)ùúáùë°ùëëùë•\\\\mu(t,dx) such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÄt‚àà\\[0,1\\]:‚à´‚Ñùdœï‚Äã(x)‚ÄãŒº‚Äã(t,d‚Äãx)=ùîº‚Äãœï‚Äã(xt)for any test functionœï‚ààC0‚àû‚Äã(‚Ñùd),formulae-sequencefor-allùë°01:formulae-sequencesubscriptsuperscript‚Ñùùëëitalic-œïùë•ùúáùë°ùëëùë•ùîºitalic-œïsubscriptùë•ùë°for any test functionitalic-œïsubscriptsuperscriptùê∂0superscript‚Ñùùëë\\\\forall t\\\\in\\[0,1\\]\\\\quad:\\\\quad\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\phi(x)\\\\mu(t,dx)={\\\\mathbb{E}}\\\\phi(x\\_{t})\\\\quad\\\\text{for any test function}\\\\quad\\\\phi\\\\in C^{\\\\infty}\\_{0}({\\\\mathbb{R}}^{d}), |  | (2.4) |\n\nwhere xtsubscriptùë•ùë°x\\_{t} is defined in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the expectation is taken independently over (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu, and z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}).\nTo this end, we will need to use conditional expectations over xtsubscriptùë•ùë°x\\_{t}111Formally, in terms of the Dirac delta distribution, we can write\n\nùîº‚Äã(f‚Äã(t,x0,x1,z)\\|xt=x)=ùîº‚Äã(f‚Äã(t,x0,x1,z)‚ÄãŒ¥‚Äã(x‚àíxt))ùîº‚ÄãŒ¥‚Äã(x‚àíxt)ùîºconditionalùëìùë°subscriptùë•0subscriptùë•1ùëßsubscriptùë•ùë°ùë•ùîºùëìùë°subscriptùë•0subscriptùë•1ùëßùõøùë•subscriptùë•ùë°ùîºùõøùë•subscriptùë•ùë°{\\\\mathbb{E}}\\\\left(f(t,x\\_{0},x\\_{1},z)\\|x\\_{t}=x\\\\right)=\\\\frac{{\\\\mathbb{E}}\\\\left(f(t,x\\_{0},x\\_{1},z)\\\\delta(x-x\\_{t})\\\\right)}{{\\\\mathbb{E}}\\\\delta(x-x\\_{t})}\nand in this notation we also have œÅ‚Äã(t,x)=ùîº‚ÄãŒ¥‚Äã(x‚àíxt)ùúåùë°ùë•ùîºùõøùë•subscriptùë•ùë°\\\\rho(t,x)={\\\\mathbb{E}}\\\\delta(x-x\\_{t})., as described in the following definition.\n\n###### Definition 2.3.\n\nGiven any f‚ààC0‚àû‚Äã(\\[0,1\\]√ó‚Ñùd√ó‚Ñùd√ó‚Ñùd)ùëìsubscriptsuperscriptùê∂001superscript‚Ñùùëësuperscript‚Ñùùëësuperscript‚Ñùùëëf\\\\in C^{\\\\infty}\\_{0}(\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\times{\\\\mathbb{R}}^{d}\\\\times{\\\\mathbb{R}}^{d}), its conditional expectation ùîº‚Äã(f‚Äã(t,x0,x1,z)\\|xt=x)ùîºconditionalùëìùë°subscriptùë•0subscriptùë•1ùëßsubscriptùë•ùë°ùë•{\\\\mathbb{E}}\\\\left(f(t,x\\_{0},x\\_{1},z)\\|x\\_{t}=x\\\\right) is the function of xùë•x such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚à´‚Ñùdùîº‚Äã(f‚Äã(t,x0,x1,z)\\|xt=x)‚ÄãŒº‚Äã(t,d‚Äãx)=ùîº‚Äãf‚Äã(t,x0,x1,z),subscriptsuperscript‚Ñùùëëùîºconditionalùëìùë°subscriptùë•0subscriptùë•1ùëßsubscriptùë•ùë°ùë•ùúáùë°ùëëùë•ùîºùëìùë°subscriptùë•0subscriptùë•1ùëß\\\\int\\_{{\\\\mathbb{R}}^{d}}{\\\\mathbb{E}}\\\\left(f(t,x\\_{0},x\\_{1},z)\\|x\\_{t}=x\\\\right)\\\\mu(t,dx)={\\\\mathbb{E}}f(t,x\\_{0},x\\_{1},z), |  | (2.5) |\n\nwhere Œº‚Äã(t,d‚Äãx)ùúáùë°ùëëùë•\\\\mu(t,dx) is the time-dependent distribution of xtsubscriptùë•ùë°x\\_{t} defined by ( [2.3]Definition 2.3. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and the expectation on the right-hand side is taken independently over (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu, and z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}).\n\nVector-valued functions have conditional expectations that are defined analogously. Note that, with our definition, ùîº‚Äã(f‚Äã(t,x0,x1,z)\\|xt=x)ùîºconditionalùëìùë°subscriptùë•0subscriptùë•1ùëßsubscriptùë•ùë°ùë•{\\\\mathbb{E}}\\\\left(f(t,x\\_{0},x\\_{1},z)\\|x\\_{t}=x\\\\right) is a deterministic function of (t,x)‚àà\\[0,1\\]√ó‚Ñùdùë°ùë•01superscript‚Ñùùëë(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}, not to be confused with the random variable ùîº‚Äã(f‚Äã(t,x0,x1,z)\\|xt)ùîºconditionalùëìùë°subscriptùë•0subscriptùë•1ùëßsubscriptùë•ùë°{\\\\mathbb{E}}\\\\left(f(t,x\\_{0},x\\_{1},z)\\|x\\_{t}\\\\right) that can be defined analogously.\n\n###### Remark 2.4.\n\nAnother seemingly more general way to define the stochastic interpolant is via\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xtùñΩ=I‚Äã(t,x0,x1)+Ntsubscriptsuperscriptùë•ùñΩùë°ùêºùë°subscriptùë•0subscriptùë•1subscriptùëÅùë°x^{\\\\mathsf{d}}\\_{t}=I(t,x\\_{0},x\\_{1})+N\\_{t} |  | (2.6) |\n\nwhere N:\\[0,1\\]‚Üí‚Ñùd:ùëÅ‚Üí01superscript‚ÑùùëëN:\\[0,1\\]\\\\to{\\\\mathbb{R}}^{d} is a zero-mean Gaussian stochastic process constrained to satisfy Nt=0=Nt=1=0subscriptùëÅùë°0subscriptùëÅùë°10N\\_{t=0}=N\\_{t=1}=0. As we will show below, our construction only depends on the single-time properties of NtsubscriptùëÅùë°N\\_{t}, which are completely specified by ùîº‚Äã\\[Zt‚ÄãZtùñ≥\\]ùîºdelimited-\\[\\]subscriptùëçùë°subscriptsuperscriptùëçùñ≥ùë°{\\\\mathbb{E}}\\[Z\\_{t}Z^{\\\\mathsf{T}}\\_{t}\\]. That is, if we take Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) such that ùîº‚Äã\\[Nt‚ÄãNtùñ≥\\]=Œ≥2‚Äã(t)‚ÄãIdùîºdelimited-\\[\\]subscriptùëÅùë°subscriptsuperscriptùëÅùñ≥ùë°superscriptùõæ2ùë°Id{\\\\mathbb{E}}\\[N\\_{t}N^{\\\\mathsf{T}}\\_{t}\\]=\\\\gamma^{2}(t)\\\\text{\\\\it Id}, then the probability distribution of xtsubscriptùë•ùë°x\\_{t} will coincide with that of xt‚Ä≤subscriptsuperscriptùë•‚Ä≤ùë°x^{\\\\prime}\\_{t} defined in ( [2.6]In Remark 2.4. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), xt=dxtùñΩsuperscriptdsubscriptùë•ùë°subscriptsuperscriptùë•ùñΩùë°x\\_{t}\\\\stackrel{{\\\\scriptstyle\\\\text{d}}}{{=}}x^{\\\\mathsf{d}}\\_{t}. For example, taking Œ≥‚Äã(t)=t‚Äã(1‚àít)ùõæùë°ùë°1ùë°\\\\gamma(t)=\\\\sqrt{t(1-t)} in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) ‚Äì a choice we will consider below in Sec. [3.4]Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") ‚Äì is equivalent to choosing NtsubscriptùëÅùë°N\\_{t} to be a Brownian bridge in ( [2.6]In Remark 2.4. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), i.e. the stochastic process realizable in terms of the Wiener process Wtsubscriptùëäùë°W\\_{t} as Nt=Wt‚àít‚ÄãW1subscriptùëÅùë°subscriptùëäùë°ùë°subscriptùëä1N\\_{t}=W\\_{t}-tW\\_{1}. This observation will also help us draw an analogy between our approach and the construction used in score-based diffusion models. As we will show below, it is simpler for both analysis and practical implementation to work with the definition ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for xtsubscriptùë•ùë°x\\_{t}.\n\nTo proceed, we will make the following assumption on the densities œÅ0subscriptùúå0\\\\rho\\_{0}, œÅ1subscriptùúå1\\\\rho\\_{1}, and the interplay between the measure ŒΩùúà\\\\nu to the function IùêºI:\n\n###### Assumption 2.5.\n\nThe densities œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} are strictly positive elements of C2‚Äã(‚Ñùd)superscriptùê∂2superscript‚ÑùùëëC^{2}({\\\\mathbb{R}}^{d}) and are such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚à´‚Ñùd\\|‚àálog‚Å°œÅ0‚Äã(x)\\|2‚ÄãœÅ0‚Äã(x)‚Äãùëëx<‚àûand‚à´‚Ñùd\\|‚àálog‚Å°œÅ1‚Äã(x)\\|2‚ÄãœÅ1‚Äã(x)‚Äãùëëx<‚àû.formulae-sequencesubscriptsuperscript‚Ñùùëësuperscript‚àásubscriptùúå0ùë•2subscriptùúå0ùë•differential-dùë•andsubscriptsuperscript‚Ñùùëësuperscript‚àásubscriptùúå1ùë•2subscriptùúå1ùë•differential-dùë•\\\\int\\_{{\\\\mathbb{R}}^{d}}\\|\\\\nabla\\\\log\\\\rho\\_{0}(x)\\|^{2}\\\\rho\\_{0}(x)dx<\\\\infty\\\\quad\\\\text{and}\\\\quad\\\\int\\_{{\\\\mathbb{R}}^{d}}\\|\\\\nabla\\\\log\\\\rho\\_{1}(x)\\|^{2}\\\\rho\\_{1}(x)dx<\\\\infty. |  | (2.7) |\n\nThe measure ŒΩùúà\\\\nu and the function IùêºI are such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÉM1,M2<‚àû:ùîº‚Äã\\[\\|‚àÇtI‚Äã(t,x0,x1)\\|4\\]‚â§M1;ùîº‚Äã\\[\\|‚àÇt2I‚Äã(t,x0,x1)\\|2\\]‚â§M2,‚àÄt‚àà\\[0,1\\],formulae-sequencesubscriptùëÄ1subscriptùëÄ2:ùîºdelimited-\\[\\]superscriptsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•14subscriptùëÄ1formulae-sequenceùîºdelimited-\\[\\]superscriptsubscriptsuperscript2ùë°ùêºùë°subscriptùë•0subscriptùë•12subscriptùëÄ2for-allùë°01\\\\exists M\\_{1},M\\_{2}<\\\\infty\\ \\ :\\ \\ {\\\\mathbb{E}}\\\\big{\\[}\\|\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})\\|^{4}\\\\big{\\]}\\\\leq M\\_{1};\\\\quad{\\\\mathbb{E}}\\\\big{\\[}\\|\\\\partial^{2}\\_{t}I(t,x\\_{0},x\\_{1})\\|^{2}\\\\big{\\]}\\\\leq M\\_{2},\\\\quad\\\\forall t\\\\in\\[0,1\\], |  | (2.8) |\n\nwhere the expectation is taken over (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu.\n\nNote that for the interpolant ( [1.1]In 1.1 Background and motivation ‚Ä£ 1 Introduction ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), Assumption [2.5]Assumption 2.5. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") holds if œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} both have finite fourth moments.\n\n![Refer to caption]Figure 3: Algorithmic implementation.\nA simple overview of suggested implementation strategies.\nFor deterministic sampling, a single velocity field bùëèb can be learned by minimizing the empirical loss in the top row.\nFor stochastic sampling, the velocity field bùëèb, along with the denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}, can be learned by minimizing the two empirical losses specified in the bottom row.\nTo sample deterministically, off-the-shelf ODE integrators can be used to integrate the probability flow equation.\nTo sample stochastically, the listed SDE can be integrated using standard techniques such as the Euler-Maruyama method or the Heun sampler introduced in \\[ [32])\\].\nThe time-dependent diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) can be specified after learning to maximize sample quality.\n\n### 2.2 Transport equations, score, and quadratic objectives\n\nWe now state a result that specifies some important properties of the probability distribution of the stochastic interpolant xtsubscriptùë•ùë°x\\_{t}:\n\n{restatable}\n\n\\[Stochastic interpolant properties\\]theoreminterpolation\n\nThe probability distribution of the stochastic interpolant xtsubscriptùë•ùë°x\\_{t} defined in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is absolutely continuous with respect to the Lebesgue measure at all times t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] and its time-dependent density œÅ‚Äã(t)ùúåùë°\\\\rho(t) satisfies œÅ‚Äã(0)=œÅ0ùúå0subscriptùúå0\\\\rho(0)=\\\\rho\\_{0}, œÅ‚Äã(1)=œÅ1ùúå1subscriptùúå1\\\\rho(1)=\\\\rho\\_{1}, œÅ‚ààC1‚Äã(\\[0,1\\];Cp‚Äã(‚Ñùd))ùúåsuperscriptùê∂101superscriptùê∂ùëùsuperscript‚Ñùùëë\\\\rho\\\\in C^{1}(\\[0,1\\];C^{p}({\\\\mathbb{R}}^{d})) for any p‚àà‚Ñïùëù‚Ñïp\\\\in{\\\\mathbb{N}}, and œÅ‚Äã(t,x)>0ùúåùë°ùë•0\\\\rho(t,x)>0 for all (t,x)‚àà\\[0,1\\]√ó‚Ñùdùë°ùë•01superscript‚Ñùùëë(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}. In addition, œÅùúå\\\\rho solves the transport equation\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ+‚àá‚ãÖ(b‚ÄãœÅ)=0,subscriptùë°ùúå‚ãÖ‚àáùëèùúå0\\\\partial\\_{t}\\\\rho+\\\\nabla\\\\cdot\\\\left(b\\\\rho\\\\right)=0, |  | (2.9) |\n\nwhere we defined the velocity\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | b‚Äã(t,x)=ùîº‚Äã\\[xÀôt\\|xt=x\\]=ùîº‚Äã\\[‚àÇtI‚Äã(t,x0,x1)+Œ≥Àô‚Äã(t)‚Äãz\\|xt=x\\].ùëèùë°ùë•ùîºdelimited-\\[\\]conditionalsubscriptÀôùë•ùë°subscriptùë•ùë°ùë•ùîºdelimited-\\[\\]subscriptùë°ùêºùë°subscriptùë•0subscriptùë•1conditionalÀôùõæùë°ùëßsubscriptùë•ùë°ùë•b(t,x)={\\\\mathbb{E}}\\[\\\\dot{x}\\_{t}\\|x\\_{t}=x\\]={\\\\mathbb{E}}\\[\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})+\\\\dot{\\\\gamma}(t)z\\|x\\_{t}=x\\]. |  | (2.10) |\n\nThis velocity is in C0‚Äã(\\[0,1\\];(Cp‚Äã(‚Ñùd))d)superscriptùê∂001superscriptsuperscriptùê∂ùëùsuperscript‚ÑùùëëùëëC^{0}(\\[0,1\\];(C^{p}({\\\\mathbb{R}}^{d}))^{d}) for any p‚àà‚Ñïùëù‚Ñïp\\\\in{\\\\mathbb{N}}, and such that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÄt‚àà\\[0,1\\]:‚à´‚Ñùd\\|b‚Äã(t,x)\\|2‚ÄãœÅ‚Äã(t,x)‚Äãùëëx<‚àû.formulae-sequencefor-allùë°01:subscriptsuperscript‚Ñùùëësuperscriptùëèùë°ùë•2ùúåùë°ùë•differential-dùë•\\\\forall t\\\\in\\[0,1\\]\\\\quad:\\\\quad\\\\int\\_{{\\\\mathbb{R}}^{d}}\\|b(t,x)\\|^{2}\\\\rho(t,x)dx<\\\\infty. |  | (2.11) |\n\nNote that this theorem means that we can write ( [2.4]In 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÄt‚àà\\[0,1\\]:‚à´‚Ñùdœï‚Äã(x)‚ÄãœÅ‚Äã(t,x)‚Äãùëëx=ùîº‚Äãœï‚Äã(xt)for any test functionœï‚ààC0‚àû‚Äã(‚Ñùd),formulae-sequencefor-allùë°01:formulae-sequencesubscriptsuperscript‚Ñùùëëitalic-œïùë•ùúåùë°ùë•differential-dùë•ùîºitalic-œïsubscriptùë•ùë°for any test functionitalic-œïsubscriptsuperscriptùê∂0superscript‚Ñùùëë\\\\forall t\\\\in\\[0,1\\]\\\\quad:\\\\quad\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\phi(x)\\\\rho(t,x)dx={\\\\mathbb{E}}\\\\phi(x\\_{t})\\\\quad\\\\text{for any test function}\\\\quad\\\\phi\\\\in C^{\\\\infty}\\_{0}({\\\\mathbb{R}}^{d}), |  | (2.12) |\n\nThe transport equation ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can be solved either forward in time from the initial condition œÅ‚Äã(0)=œÅ0ùúå0subscriptùúå0\\\\rho(0)=\\\\rho\\_{0}, in which case œÅ‚Äã(1)=œÅ1ùúå1subscriptùúå1\\\\rho(1)=\\\\rho\\_{1}, or backward in time from the final condition œÅ‚Äã(1)=œÅ1ùúå1subscriptùúå1\\\\rho(1)=\\\\rho\\_{1}, in which case œÅ‚Äã(0)=œÅ0ùúå0subscriptùúå0\\\\rho(0)=\\\\rho\\_{0}.\n\nThe proof of Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") is given in Appendix [B.1]B.1 Proof of Theorems 2.2, 2.2, and 2.2, and Corollary 2.6. ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"); it mostly relies on manipulations involving the characteristic function of the stochastic interpolant xtsubscriptùë•ùë°x\\_{t}. The transport equation ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for œÅùúå\\\\rho lead to methods for generative modeling and density estimation, as explained in Secs. [2.3]Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), provided that we can estimate the velocity bùëèb. This velocity is explicitly available only in special cases, for example when œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} are both Gaussian mixture densities: this case is treated in Appendix [A]Appendix A Bridging two Gaussian mixture densities ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). In general bùëèb must be calculated numerically, which can be performed via empirical risk minimization of a quadratic objective function, as characterized by our next result:\n\n{restatable}\n\n\\[Objective\\]theoreminterpolatelosses\n\nThe velocity bùëèb defined in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is the unique minimizer in C0‚Äã(\\[0,1\\];(C1‚Äã(‚Ñùd))d)superscriptùê∂001superscriptsuperscriptùê∂1superscript‚ÑùùëëùëëC^{0}(\\[0,1\\];(C^{1}({\\\\mathbb{R}}^{d}))^{d}) of the quadratic objective\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñíb‚Äã\\[b^\\]=‚à´01ùîº‚Äã(12‚Äã\\|b^‚Äã(t,xt)\\|2‚àí(‚àÇtI‚Äã(t,x0,x1)+Œ≥Àô‚Äã(t)‚Äãz)‚ãÖb^‚Äã(t,xt))‚Äãùëëtsubscript‚Ñíùëèdelimited-\\[\\]^ùëèsuperscriptsubscript01ùîº12superscript^ùëèùë°subscriptùë•ùë°2‚ãÖsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•1Àôùõæùë°ùëß^ùëèùë°subscriptùë•ùë°differential-dùë°\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{b}(t,x\\_{t})\\|^{2}-\\\\left(\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})+\\\\dot{\\\\gamma}(t)z\\\\right)\\\\cdot\\\\hat{b}(t,x\\_{t})\\\\right)dt |  | (2.13) |\n\nwhere xtsubscriptùë•ùë°x\\_{t} is defined in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the expectation is taken independently over (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu and z‚àºùñ≠‚Äã(0,Id).similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}).\n\nThe proof of Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") is given in Appendix [B.1]B.1 Proof of Theorems 2.2, 2.2, and 2.2, and Corollary 2.6. ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"): it relies on the definitions of bùëèb in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), as well as the definition of œÅùúå\\\\rho in ( [2.12]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and some elementary properties of the conditional expectation. We discuss how to estimate the objective function ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) in practice in Section [6]Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). Interestingly, we also have access to the score of the probability density, as shown by our next result:\n\n{restatable}\n\n\\[Score\\]theoremscore\n\nThe score of the probability density œÅùúå\\\\rho specified in Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") is in C1‚Äã(\\[0,1\\];(Cp‚Äã(‚Ñùd))d)superscriptùê∂101superscriptsuperscriptùê∂ùëùsuperscript‚ÑùùëëùëëC^{1}(\\[0,1\\];(C^{p}({\\\\mathbb{R}}^{d}))^{d}) for any p‚àà‚Ñïùëù‚Ñïp\\\\in{\\\\mathbb{N}} and given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | s‚Äã(t,x)=‚àálog‚Å°œÅ‚Äã(t,x)=‚àíŒ≥‚àí1‚Äã(t)‚Äãùîº‚Äã(z\\|xt=x)‚àÄ(t,x)‚àà(0,1)√ó‚Ñùdformulae-sequenceùë†ùë°ùë•‚àáùúåùë°ùë•superscriptùõæ1ùë°ùîºconditionalùëßsubscriptùë•ùë°ùë•for-allùë°ùë•01superscript‚Ñùùëës(t,x)=\\\\nabla\\\\log\\\\rho(t,x)=-\\\\gamma^{-1}(t){\\\\mathbb{E}}(z\\|x\\_{t}=x)\\\\quad\\\\forall(t,x)\\\\in(0,1)\\\\times{\\\\mathbb{R}}^{d} |  | (2.14) |\n\nIn addition it satisfies\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÄt‚àà\\[0,1\\]:‚à´‚Ñùd\\|s‚Äã(t,x)\\|2‚ÄãœÅ‚Äã(t,x)‚Äãùëëx<‚àû,formulae-sequencefor-allùë°01:subscriptsuperscript‚Ñùùëësuperscriptùë†ùë°ùë•2ùúåùë°ùë•differential-dùë•\\\\forall t\\\\in\\[0,1\\]\\\\quad:\\\\quad\\\\int\\_{{\\\\mathbb{R}}^{d}}\\|s(t,x)\\|^{2}\\\\rho(t,x)dx<\\\\infty, |  | (2.15) |\n\nand is the unique minimizer in C1‚Äã(\\[0,1\\];(C1‚Äã(‚Ñùd))d)superscriptùê∂101superscriptsuperscriptùê∂1superscript‚ÑùùëëùëëC^{1}(\\[0,1\\];(C^{1}({\\\\mathbb{R}}^{d}))^{d}) of the quadratic objective\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñís‚Äã\\[s^\\]=‚à´01ùîº‚Äã(12‚Äã\\|s^‚Äã(t,xt)\\|2+Œ≥‚àí1‚Äã(t)‚Äãz‚ãÖs^‚Äã(t,xt))‚Äãùëëtsubscript‚Ñíùë†delimited-\\[\\]^ùë†superscriptsubscript01ùîº12superscript^ùë†ùë°subscriptùë•ùë°2‚ãÖsuperscriptùõæ1ùë°ùëß^ùë†ùë°subscriptùë•ùë°differential-dùë°\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{s}(t,x\\_{t})\\|^{2}+\\\\gamma^{-1}(t)z\\\\cdot\\\\hat{s}(t,x\\_{t})\\\\right)dt |  | (2.16) |\n\nwhere xtsubscriptùë•ùë°x\\_{t} is defined in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the expectation is taken independently over (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu and z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id})\n\nThe proof of Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") is given in Appendix [B.1]B.1 Proof of Theorems 2.2, 2.2, and 2.2, and Corollary 2.6. ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). We stress that the objective function is well defined despite the fact that Œ≥‚Äã(0)=Œ≥‚Äã(1)=0ùõæ0ùõæ10\\\\gamma(0)=\\\\gamma(1)=0: see Section [6]Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") for more details about how to evaluate this objective in practice.\n\n###### Remark 2.6(Denoiser).\n\nThe quantity\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œ∑z‚Äã(t,x)=ùîº‚Äã(z\\|xt=x),subscriptùúÇùëßùë°ùë•ùîºconditionalùëßsubscriptùë•ùë°ùë•\\\\eta\\_{z}(t,x)={\\\\mathbb{E}}(z\\|x\\_{t}=x), |  | (2.17) |\n\nwill be referred as the denoiser, for reasons that will be made clear in Section [5.2]Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). By ( [2.14]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), this quantity gives access to the score on t‚àà(0,1)ùë°01t\\\\in(0,1) (where Œ≥‚Äã(t)>0ùõæùë°0\\\\gamma(t)>0) since, from ( [2.14]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")),\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | s‚Äã(t,x)=‚àíŒ≥‚àí1‚Äã(t)‚ÄãŒ∑z‚Äã(t,x).ùë†ùë°ùë•superscriptùõæ1ùë°subscriptùúÇùëßùë°ùë•s(t,x)=-\\\\gamma^{-1}(t)\\\\eta\\_{z}(t,x). |  | (2.18) |\n\nThis denoiser is the minimizer of an equivalent expression to ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")),\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíŒ∑z‚Äã\\[Œ∑^z\\]=‚à´01ùîº‚Äã(12‚Äã\\|Œ∑^z‚Äã(t,xt)\\|2‚àíz‚ãÖŒ∑^z‚Äã(t,xt))‚Äãùëët.subscript‚ÑísubscriptùúÇùëßdelimited-\\[\\]subscript^ùúÇùëßsuperscriptsubscript01ùîº12superscriptsubscript^ùúÇùëßùë°subscriptùë•ùë°2‚ãÖùëßsubscript^ùúÇùëßùë°subscriptùë•ùë°differential-dùë°\\\\mathcal{L}\\_{\\\\eta\\_{z}}\\[\\\\hat{\\\\eta}\\_{z}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}\\_{z}(t,x\\_{t})\\|^{2}-z\\\\cdot\\\\hat{\\\\eta}\\_{z}(t,x\\_{t})\\\\right)dt. |  | (2.19) |\n\nThe denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} is useful for numerical realizations.\nIn particular, the objective in ( [2.19]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is easier to use than the one in ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) because it does not contain the factor Œ≥‚àí1‚Äã(t)superscriptùõæ1ùë°\\\\gamma^{-1}(t), which needs careful handling as tùë°t approaches 0 and 1.\n\nHaving access to the score immediately allows us to rewrite the TE ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) as forward and backward Fokker-Planck equations, which we state as:\n\n{restatable}\n\n\\[Fokker-Planck equations\\]corollaryinterpolationfpe\n\nFor any œµ‚ààC0‚Äã(\\[0,1\\])italic-œµsuperscriptùê∂001\\\\epsilon\\\\in C^{0}(\\[0,1\\]) with œµ‚Äã(t)‚â•0italic-œµùë°0\\\\epsilon(t)\\\\geq 0 for all t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], the probability density œÅùúå\\\\rho specified in Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") satisfies:\n\n1. 1.\n\n\nThe forward Fokker-Planck equation\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ+‚àá‚ãÖ(bùñ•‚ÄãœÅ)=œµ‚Äã(t)‚ÄãŒî‚ÄãœÅ,œÅ‚Äã(0)=œÅ0,formulae-sequencesubscriptùë°ùúå‚ãÖ‚àásubscriptùëèùñ•ùúåitalic-œµùë°Œîùúåùúå0subscriptùúå0\\\\partial\\_{t}\\\\rho+\\\\nabla\\\\cdot\\\\left(b\\_{\\\\mathsf{F}}\\\\rho\\\\right)=\\\\epsilon(t)\\\\Delta\\\\rho,\\\\qquad\\\\rho(0)=\\\\rho\\_{0}, |  | (2.20) |\n\n\n\nwhere we defined the forward drift\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | bùñ•‚Äã(t,x)=b‚Äã(t,x)+œµ‚Äã(t)‚Äãs‚Äã(t,x).subscriptùëèùñ•ùë°ùë•ùëèùë°ùë•italic-œµùë°ùë†ùë°ùë•b\\_{\\\\mathsf{F}}(t,x)=b(t,x)+\\\\epsilon(t)s(t,x). |  | (2.21) |\n\n\n\nEquation ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is well-posed when solved forward in time from t=0ùë°0t=0 to t=1ùë°1t=1, and its solution for the initial condition œÅ‚Äã(t=0)=œÅ0ùúåùë°0subscriptùúå0\\\\rho(t=0)=\\\\rho\\_{0} satisfies œÅ‚Äã(t=1)=œÅ1ùúåùë°1subscriptùúå1\\\\rho(t=1)=\\\\rho\\_{1}.\n\n2. 2.\n\n\nThe backward Fokker-Planck equation\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ+‚àá‚ãÖ(bùñ°‚ÄãœÅ)=‚àíœµ‚Äã(t)‚ÄãŒî‚ÄãœÅ,œÅ‚Äã(1)=œÅ1,formulae-sequencesubscriptùë°ùúå‚ãÖ‚àásubscriptùëèùñ°ùúåitalic-œµùë°Œîùúåùúå1subscriptùúå1\\\\partial\\_{t}\\\\rho+\\\\nabla\\\\cdot\\\\left(b\\_{\\\\mathsf{B}}\\\\rho\\\\right)=-\\\\epsilon(t)\\\\Delta\\\\rho,\\\\qquad\\\\rho(1)=\\\\rho\\_{1}, |  | (2.22) |\n\n\n\nwhere we defined the backward drift\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | bùñ°‚Äã(t,x)=b‚Äã(t,x)‚àíœµ‚Äã(t)‚Äãs‚Äã(t,x).subscriptùëèùñ°ùë°ùë•ùëèùë°ùë•italic-œµùë°ùë†ùë°ùë•b\\_{\\\\mathsf{B}}(t,x)=b(t,x)-\\\\epsilon(t)s(t,x). |  | (2.23) |\n\n\n\nEquation ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is well-posed when solved backward in time from t=1ùë°1t=1 to t=0ùë°0t=0, and its solution for the final condition œÅ‚Äã(1)=œÅ1ùúå1subscriptùúå1\\\\rho(1)=\\\\rho\\_{1} satisfies œÅ‚Äã(0)=œÅ0ùúå0subscriptùúå0\\\\rho(0)=\\\\rho\\_{0}.\n\n\nIn Section [2.3]Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") we will use the results of this theorem to design generative models based on forward and backward stochastic differential equations.\nNote that we can replace the diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) by a positive semi-definite tensor; also note that if we define œÅùñ°‚Äã(tùñ°,x)=œÅ‚Äã(1‚àítùñ°,x)subscriptùúåùñ°subscriptùë°ùñ°ùë•ùúå1subscriptùë°ùñ°ùë•\\\\rho\\_{\\\\mathsf{B}}(t\\_{\\\\mathsf{B}},x)=\\\\rho(1-t\\_{\\\\mathsf{B}},x), the reversed FPE ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can be written as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtùñ°œÅùñ°‚Äã(tùñ°,x)‚àí‚àá‚ãÖ(bùñ°‚Äã(1‚àítùñ°,x)‚ÄãœÅùñ°‚Äã(tùñ°,x))=œµ‚Äã(1‚àítùñ°)‚ÄãŒî‚ÄãœÅùñ°‚Äã(tùñ°,x),œÅùñ°‚Äã(tùñ°=0)=œÅ1,formulae-sequencesubscriptsubscriptùë°ùñ°subscriptùúåùñ°subscriptùë°ùñ°ùë•‚ãÖ‚àásubscriptùëèùñ°1subscriptùë°ùñ°ùë•subscriptùúåùñ°subscriptùë°ùñ°ùë•italic-œµ1subscriptùë°ùñ°Œîsubscriptùúåùñ°subscriptùë°ùñ°ùë•subscriptùúåùñ°subscriptùë°ùñ°0subscriptùúå1\\\\partial\\_{t\\_{\\\\mathsf{B}}}\\\\rho\\_{\\\\mathsf{B}}({t\\_{\\\\mathsf{B}}},x)-\\\\nabla\\\\cdot\\\\left(b\\_{\\\\mathsf{B}}(1-{t\\_{\\\\mathsf{B}}},x)\\\\rho\\_{\\\\mathsf{B}}({t\\_{\\\\mathsf{B}}},x)\\\\right)=\\\\epsilon(1-t\\_{\\\\mathsf{B}})\\\\Delta\\\\rho\\_{\\\\mathsf{B}}({t\\_{\\\\mathsf{B}}},x),\\\\qquad\\\\rho\\_{\\\\mathsf{B}}({t\\_{\\\\mathsf{B}}}=0)=\\\\rho\\_{1}, |  | (2.24) |\n\nwhich is now well-posed forward in (reversed) time tùñ°subscriptùë°ùñ°t\\_{\\\\mathsf{B}}.\nSo as to have only one definition of time tùë°t, it is more convenient to work with ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\nLet us make a few remarks about the statements made so far:\n\n###### Remark 2.7.\n\nIf we set Œ≥‚Äã(t)=0ùõæùë°0\\\\gamma(t)=0 in xtsubscriptùë•ùë°x\\_{t} (i.e, if we remove the latent variable), the stochastic interpolant ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) reduces to the one originally considered in \\[ [2])\\]. In this setup, the results above formally stand except that we cannot guarantee the spatial regularity of b‚Äã(t,x)ùëèùë°ùë•b(t,x) and s‚Äã(t,x)ùë†ùë°ùë•s(t,x), since it relies on the presence of the latent variable (as shown in the proof of Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). Hence, we expect the introduction of the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z to help for generative modeling, where the solution to the corresponding ODEs/SDEs will be better behaved, and for statistical approximation, since the targets bùëèb and sùë†s will be more regular. We will see in Section [6]Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") that it also gives us much greater flexibility in the way we can bridge œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}, which will enable us to design generative models with appealing properties.\n\n###### Remark 2.8.\n\nWe will see in Section [2.4]Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") that the forward and backward FPE in ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) are more robust than the TE in ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) against approximation errors in the velocity bùëèb and the score sùë†s, which has practical implications for generative models based on these equations.\n\n###### Remark 2.9.\n\nWe could also obtain b‚Äã(t,‚ãÖ)ùëèùë°‚ãÖb(t,\\\\cdot) at any t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] by minimizing\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîº‚Äã(12‚Äã\\|b^‚Äã(t,xt)\\|2‚àí(‚àÇtI‚Äã(t,x0,x1)+Œ≥Àô‚Äã(t)‚Äãz)‚ãÖb^‚Äã(t,xt))t‚àà\\[0,1\\]ùîº12superscript^ùëèùë°subscriptùë•ùë°2‚ãÖsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•1Àôùõæùë°ùëß^ùëèùë°subscriptùë•ùë°ùë°01{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{b}(t,x\\_{t})\\|^{2}-\\\\left(\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})+\\\\dot{\\\\gamma}(t)z\\\\right)\\\\cdot\\\\hat{b}(t,x\\_{t})\\\\right)\\\\qquad t\\\\in\\[0,1\\] |  | (2.25) |\n\nand s‚Äã(t,‚ãÖ)ùë†ùë°‚ãÖs(t,\\\\cdot) at any t‚àà(0,1)ùë°01t\\\\in(0,1) by minimizing\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîº‚Äã(12‚Äã\\|s^‚Äã(t,xt)\\|2+Œ≥‚àí1‚Äã(t)‚Äãz‚ãÖs^‚Äã(t,xt))t‚àà(0,1)ùîº12superscript^ùë†ùë°subscriptùë•ùë°2‚ãÖsuperscriptùõæ1ùë°ùëß^ùë†ùë°subscriptùë•ùë°ùë°01{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{s}(t,x\\_{t})\\|^{2}+\\\\gamma^{-1}(t)z\\\\cdot\\\\hat{s}(t,x\\_{t})\\\\right)\\\\qquad t\\\\in(0,1) |  | (2.26) |\n\nUsing the time-integrated versions of these objectives given in ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is more convenient numerically as it allows one to parameterize b^^ùëè\\\\hat{b} and s^^ùë†\\\\hat{s} globally for (t,x)‚àà\\[0,1\\]√ó‚Ñùdùë°ùë•01superscript‚Ñùùëë(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}.\n\n###### Remark 2.10.\n\nFrom ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) we can write\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | b‚Äã(t,x)=v‚Äã(t,x)‚àíŒ≥Àô‚Äã(t)‚ÄãŒ≥‚Äã(t)‚Äãs‚Äã(t,x),ùëèùë°ùë•ùë£ùë°ùë•Àôùõæùë°ùõæùë°ùë†ùë°ùë•b(t,x)=v(t,x)-\\\\dot{\\\\gamma}(t)\\\\gamma(t)s(t,x), |  | (2.27) |\n\nwhere sùë†s is the score given in ( [2.14]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and we defined the velocity field\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | v‚Äã(t,x)=ùîº‚Äã(‚àÇtI‚Äã(t,x0,x1)\\|xt=x).ùë£ùë°ùë•ùîºconditionalsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•1subscriptùë•ùë°ùë•v(t,x)={\\\\mathbb{E}}(\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})\\|x\\_{t}=x). |  | (2.28) |\n\nThe velocity field v‚ààC0‚Äã(\\[0,1\\];(Cp‚Äã(‚Ñùd))d)ùë£superscriptùê∂001superscriptsuperscriptùê∂ùëùsuperscript‚Ñùùëëùëëv\\\\in C^{0}(\\[0,1\\];(C^{p}({\\\\mathbb{R}}^{d}))^{d}) for any p‚àà‚Ñïùëù‚Ñïp\\\\in{\\\\mathbb{N}} and can be characterized as the unique minimizer of\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñív‚Äã\\[v^\\]=‚à´01ùîº‚Äã(12‚Äã\\|v^‚Äã(t,xt)\\|2‚àí‚àÇtI‚Äã(t,x0,x1)‚ãÖv^‚Äã(t,xt))‚Äãùëëtsubscript‚Ñíùë£delimited-\\[\\]^ùë£superscriptsubscript01ùîº12superscript^ùë£ùë°subscriptùë•ùë°2subscriptùë°‚ãÖùêºùë°subscriptùë•0subscriptùë•1^ùë£ùë°subscriptùë•ùë°differential-dùë°\\\\mathcal{L}\\_{v}\\[\\\\hat{v}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{v}(t,x\\_{t})\\|^{2}-\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})\\\\cdot\\\\hat{v}(t,x\\_{t})\\\\right)dt |  | (2.29) |\n\nLearning this velocity and the score separately may be useful in practice.\n\n###### Remark 2.11.\n\nThe objectives in ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) (as well as the ones in( [2.19]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.29]In Remark 2.10. ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))) are amenable to empirical estimation if we have samples (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu, since in that case we can generate samples of xt=I‚Äã(t,x0,x1)+Œ≥‚Äã(t)‚Äãzsubscriptùë•ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°ùëßx\\_{t}=I(t,x\\_{0},x\\_{1})+\\\\gamma(t)z at any time t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\]. We will use this feature in the numerical experiments presented below.\n\n###### Remark 2.12.\n\nSince sùë†s is the score of œÅùúå\\\\rho, an alternative objective to estimate it is \\[ [29])\\]\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚à´01ùîº‚Äã(\\|s^‚Äã(t,xt)\\|2+2‚Äã‚àá‚ãÖs^‚Äã(t,xt))‚Äãùëët.superscriptsubscript01ùîºsuperscript^ùë†ùë°subscriptùë•ùë°2‚ãÖ2‚àá^ùë†ùë°subscriptùë•ùë°differential-dùë°\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\|\\\\hat{s}(t,x\\_{t})\\|^{2}+2\\\\nabla\\\\cdot\\\\hat{s}(t,x\\_{t})\\\\right)dt. |  | (2.30) |\n\nThe derivation of ( [2.30]In Remark 2.12. ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is standard:\nfor the reader‚Äôs convenience we recall it at the end of Appendix [B.1]B.1 Proof of Theorems 2.2, 2.2, and 2.2, and Corollary 2.6. ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). The advantage of using ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) over ( [2.30]In Remark 2.12. ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is that it does not require us to take the divergence of s^^ùë†\\\\hat{s}.\n\n###### Remark 2.13(Energy-based models).\n\nBy definition, the score s‚Äã(t,x)=‚àálog‚Å°œÅ‚Äã(t,x)ùë†ùë°ùë•‚àáùúåùë°ùë•s(t,x)=\\\\nabla\\\\log\\\\rho(t,x) is a gradient field. As a result, if we model s^‚Äã(t,x)=‚àí‚àáE^‚Äã(t,x)^ùë†ùë°ùë•‚àá^ùê∏ùë°ùë•\\\\hat{s}(t,x)=-\\\\nabla\\\\hat{E}(t,x), we can turn ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) into an objective function for E^‚Äã(t,x)^ùê∏ùë°ùë•\\\\hat{E}(t,x)\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíE‚Äã\\[E^\\]=‚à´01ùîº‚Äã(12‚Äã\\|‚àáE^‚Äã(t,xt)\\|2+Œ≥‚àí1‚Äã(t)‚Äãz‚ãÖ‚àáE^‚Äã(t,xt))‚Äãùëëtsubscript‚Ñíùê∏delimited-\\[\\]^ùê∏superscriptsubscript01ùîº12superscript‚àá^ùê∏ùë°subscriptùë•ùë°2‚ãÖsuperscriptùõæ1ùë°ùëß‚àá^ùê∏ùë°subscriptùë•ùë°differential-dùë°\\\\mathcal{L}\\_{E}\\[\\\\hat{E}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\nabla\\\\hat{E}(t,x\\_{t})\\|^{2}+\\\\gamma^{-1}(t)z\\\\cdot\\\\nabla\\\\hat{E}(t,x\\_{t})\\\\right)dt |  | (2.31) |\n\nThis objective is invariant to constant shifts in E^^ùê∏\\\\hat{E} and should therefore be minimized under some constraint, such as minx‚Å°E^‚Äã(t,x)=0subscriptùë•^ùê∏ùë°ùë•0\\\\min\\_{x}\\\\hat{E}(t,x)=0 for all t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\].\nThe minimizer of ( [2.31]In Remark 2.13 (Energy-based models). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) provides us with an energy-based model (EBM) \\[ [35]), [59])\\] that can in principle be used to sample the PDF of the stochastic interpolant, œÅ‚Äã(t,x)ùúåùë°ùë•\\\\rho(t,x), at any fixed t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] using e.g. Langevin dynamics.\nWe will not exploit this possibility here, and instead rely on generative models to sample œÅ‚Äã(t,x)ùúåùë°ùë•\\\\rho(t,x), as discussed next in Sec. [2.3]Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\n\n### 2.3 Generative models\n\nOur next result is a direct consequence of Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), and it shows how to design generative models using the stochastic processes associated with the TE ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), the forward FPE ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and the backward FPE ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")):\n\n{restatable}\n\n\\[Generative models\\]corollarygenerative\n\nAt any time t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], the law of the stochastic interpolant xtsubscriptùë•ùë°x\\_{t} coincides with the law of the three processes Xtsubscriptùëãùë°X\\_{t}, Xtùñ•subscriptsuperscriptùëãùñ•ùë°X^{\\\\mathsf{F}}\\_{t}, and Xtùñ°subscriptsuperscriptùëãùñ°ùë°X^{\\\\mathsf{B}}\\_{t}, respectively defined as:\n\n1. 1.\n\n\nThe solutions of the probability flow associated with the transport equation ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | dd‚Äãt‚ÄãXt=b‚Äã(t,Xt),ùëëùëëùë°subscriptùëãùë°ùëèùë°subscriptùëãùë°\\\\frac{d}{dt}X\\_{t}=b(t,X\\_{t}), |  | (2.32) |\n\n\n\nsolved either forward in time from the initial data Xt=0‚àºœÅ0similar-tosubscriptùëãùë°0subscriptùúå0X\\_{t=0}\\\\sim\\\\rho\\_{0} or backward in time from the final data Xt=1=x1‚àºœÅ1subscriptùëãùë°1subscriptùë•1similar-tosubscriptùúå1X\\_{t=1}=x\\_{1}\\\\sim\\\\rho\\_{1}.\n\n2. 2.\n\n\nThe solutions of the forward SDE associated with the FPE ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãXtùñ•=bùñ•‚Äã(t,Xtùñ•)‚Äãd‚Äãt+2‚Äãœµ‚Äã(t)‚Äãd‚ÄãWt,ùëësubscriptsuperscriptùëãùñ•ùë°subscriptùëèùñ•ùë°subscriptsuperscriptùëãùñ•ùë°ùëëùë°2italic-œµùë°ùëësubscriptùëäùë°dX^{\\\\mathsf{F}}\\_{t}=b\\_{\\\\mathsf{F}}(t,X^{\\\\mathsf{F}}\\_{t})dt+\\\\sqrt{2\\\\epsilon(t)}\\\\,dW\\_{t}, |  | (2.33) |\n\n\n\nsolved forward in time from the initial data Xt=0ùñ•‚àºœÅ0similar-tosubscriptsuperscriptùëãùñ•ùë°0subscriptùúå0X^{\\\\mathsf{F}}\\_{t=0}\\\\sim\\\\rho\\_{0} independent of WùëäW.\n\n3. 3.\n\n\nThe solutions of the backward SDE associated with the backward FPE ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãXtùñ°=bùñ°‚Äã(t,Xtùñ°)‚Äãd‚Äãt+2‚Äãœµ‚Äã(t)‚Äãd‚ÄãWtùñ°,Wtùñ°=‚àíW1‚àít,formulae-sequenceùëësubscriptsuperscriptùëãùñ°ùë°subscriptùëèùñ°ùë°subscriptsuperscriptùëãùñ°ùë°ùëëùë°2italic-œµùë°ùëësubscriptsuperscriptùëäùñ°ùë°superscriptsubscriptùëäùë°ùñ°subscriptùëä1ùë°dX^{\\\\mathsf{B}}\\_{t}=b\\_{\\\\mathsf{B}}(t,X^{\\\\mathsf{B}}\\_{t})dt+\\\\sqrt{2\\\\epsilon(t)}\\\\,dW^{\\\\mathsf{B}}\\_{t},\\\\quad W\\_{t}^{\\\\mathsf{B}}=-W\\_{1-t}, |  | (2.34) |\n\n\n\nsolved backward in time from the final data Xt=1ùñ°‚àºœÅ1similar-tosubscriptsuperscriptùëãùñ°ùë°1subscriptùúå1X^{\\\\mathsf{B}}\\_{t=1}\\\\sim\\\\rho\\_{1} independent of Wùñ°superscriptùëäùñ°W^{\\\\mathsf{B}}; the solution of ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is by definition Xtùñ°=Z1‚àítùñ•subscriptsuperscriptùëãùñ°ùë°subscriptsuperscriptùëçùñ•1ùë°X^{\\\\mathsf{B}}\\_{t}=Z^{\\\\mathsf{F}}\\_{1-t} where Ztùñ•subscriptsuperscriptùëçùñ•ùë°Z^{\\\\mathsf{F}}\\_{t} satisfies\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãZtùñ•=‚àíbùñ°‚Äã(1‚àít,Ztùñ•)‚Äãd‚Äãt+2‚Äãœµ‚Äã(t)‚Äãd‚ÄãWt,ùëësubscriptsuperscriptùëçùñ•ùë°subscriptùëèùñ°1ùë°subscriptsuperscriptùëçùñ•ùë°ùëëùë°2italic-œµùë°ùëësubscriptùëäùë°dZ^{\\\\mathsf{F}}\\_{t}=-b\\_{\\\\mathsf{B}}(1-t,Z^{\\\\mathsf{F}}\\_{t})dt+\\\\sqrt{2\\\\epsilon(t)}\\\\,dW\\_{t}, |  | (2.35) |\n\n\n\nsolved forward in time from the initial data Zt=0ùñ•‚àºœÅ1similar-tosubscriptsuperscriptùëçùñ•ùë°0subscriptùúå1Z^{\\\\mathsf{F}}\\_{t=0}\\\\sim\\\\rho\\_{1} independent of WùëäW.\n\n\nTo avoid repeated applications of the transformation t‚Ü¶1‚àítmaps-toùë°1ùë°t\\\\mapsto 1-t, it is convenient to work with ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) directly using the reversed It√¥ calculus rules stated in the following lemma, which follows from the results in \\[ [3])\\] and is proven in Appendix [B.2]B.2 Proof of Lemma 2.3 ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"):\n\n{restatable}\n\n\\[Reverse It√¥ Calculus\\]lemmareversed\nIf Xtùñ°subscriptsuperscriptùëãùñ°ùë°X^{\\\\mathsf{B}}\\_{t} solves the backward SDE ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")):\n\n1. 1.\n\n\nFor any f‚ààC1‚Äã(\\[0,1\\];C02‚Äã(‚Ñùd))ùëìsuperscriptùê∂101superscriptsubscriptùê∂02subscript‚Ñùùëëf\\\\in C^{1}(\\[0,1\\];C\\_{0}^{2}({\\\\mathbb{R}}\\_{d})) and t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], the backward It√¥ formula holds\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚Äãf‚Äã(t,Xtùñ°)=‚àÇtf‚Äã(t,Xtùñ°)‚Äãd‚Äãt+‚àáf‚Äã(Xtùñ°)‚ãÖd‚ÄãXtùñ°‚àíœµ‚Äã(t)‚ÄãŒî‚Äãf‚Äã(t,Xtùñ°)‚Äãd‚Äãt.ùëëùëìùë°subscriptsuperscriptùëãùñ°ùë°subscriptùë°ùëìùë°subscriptsuperscriptùëãùñ°ùë°ùëëùë°‚ãÖ‚àáùëìsubscriptsuperscriptùëãùñ°ùë°ùëësubscriptsuperscriptùëãùñ°ùë°italic-œµùë°Œîùëìùë°subscriptsuperscriptùëãùñ°ùë°ùëëùë°df(t,X^{\\\\mathsf{B}}\\_{t})=\\\\partial\\_{t}f(t,X^{\\\\mathsf{B}}\\_{t})dt+\\\\nabla f(X^{\\\\mathsf{B}}\\_{t})\\\\cdot dX^{\\\\mathsf{B}}\\_{t}-\\\\epsilon(t)\\\\Delta f(t,X^{\\\\mathsf{B}}\\_{t})dt. |  | (2.36) |\n\n2. 2.\n\n\nFor any g‚ààC0‚Äã(\\[0,1\\];(C0‚Äã(‚Ñùd))d)ùëîsuperscriptùê∂001superscriptsubscriptùê∂0subscript‚Ñùùëëùëëg\\\\in C^{0}(\\[0,1\\];(C\\_{0}({\\\\mathbb{R}}\\_{d}))^{d}) and t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], the backward It√¥ isometries hold:\n\n\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùîºùñ°x‚Äã‚à´t1g‚Äã(t,Xtùñ°)‚ãÖùëëWtùñ°=0;ùîºùñ°x‚Äã\\|‚à´t1g‚Äã(t,Xtùñ°)‚ãÖùëëWtùñ°\\|2subscriptsuperscriptùîºùë•ùñ°superscriptsubscriptùë°1‚ãÖùëîùë°subscriptsuperscriptùëãùñ°ùë°differential-dsubscriptsuperscriptùëäùñ°ùë°0subscriptsuperscriptùîºùë•ùñ°superscriptsuperscriptsubscriptùë°1‚ãÖùëîùë°subscriptsuperscriptùëãùñ°ùë°differential-dsubscriptsuperscriptùëäùñ°ùë°2\\\\displaystyle{\\\\mathbb{E}}^{x}\\_{\\\\mathsf{B}}\\\\int\\_{t}^{1}g(t,X^{\\\\mathsf{B}}\\_{t})\\\\cdot dW^{\\\\mathsf{B}}\\_{t}=0;\\\\qquad{\\\\mathbb{E}}^{x}\\_{\\\\mathsf{B}}\\\\left\\|\\\\int\\_{t}^{1}g(t,X^{\\\\mathsf{B}}\\_{t})\\\\cdot dW^{\\\\mathsf{B}}\\_{t}\\\\right\\|^{2} | =‚à´t1ùîºùñ°x‚Äã\\|g‚Äã(t,Xtùñ°)\\|2‚Äãùëët,absentsuperscriptsubscriptùë°1subscriptsuperscriptùîºùë•ùñ°superscriptùëîùë°subscriptsuperscriptùëãùñ°ùë°2differential-dùë°\\\\displaystyle=\\\\int\\_{t}^{1}{\\\\mathbb{E}}^{x}\\_{\\\\mathsf{B}}\\\\left\\|g(t,X^{\\\\mathsf{B}}\\_{t})\\\\right\\|^{2}dt, |  | (2.37) |\n\n\n\nwhere ùîºùñ°xsubscriptsuperscriptùîºùë•ùñ°{\\\\mathbb{E}}^{x}\\_{\\\\mathsf{B}} denotes expectation conditioned on the event Xt=1ùñ°=xsuperscriptsubscriptùëãùë°1ùñ°ùë•X\\_{t=1}^{\\\\mathsf{B}}=x.\n\n\nThe relevance of Corollary [2.3]Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") for generative modeling is clear. Assuming, for example, that œÅ0subscriptùúå0\\\\rho\\_{0} is a simple density that can be sampled easily (e.g. a Gaussian or a Gaussian mixture density), we can use the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) or the SDE ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) to push these samples forward in time and generate samples from a complex target density œÅ1subscriptùúå1\\\\rho\\_{1}. In Section [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we will show how to use the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) or the reverse SDE ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) to estimate œÅ1subscriptùúå1\\\\rho\\_{1} at any x‚àà‚Ñùdùë•superscript‚Ñùùëëx\\\\in{\\\\mathbb{R}}^{d} assuming that we can evaluate œÅ0subscriptùúå0\\\\rho\\_{0} at any x‚àà‚Ñùdùë•superscript‚Ñùùëëx\\\\in{\\\\mathbb{R}}^{d}. We will also show how similar ideas can be used to estimate the cross entropy between œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}.\n\n###### Remark 2.14.\n\nWe stress that the stochastic interpolant xtsubscriptùë•ùë°x\\_{t}, the solution Xtsubscriptùëãùë°X\\_{t} to the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and the solutions Xtùñ•subscriptsuperscriptùëãùñ•ùë°X^{\\\\mathsf{F}}\\_{t} and Xtùñ°subscriptsuperscriptùëãùñ°ùë°X^{\\\\mathsf{B}}\\_{t} of the forward and backward SDEs ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) are different stochastic processes, but their laws all coincide with œÅ‚Äã(t)ùúåùë°\\\\rho(t) at any time t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\]. This is all that matters when applying these processes as generative models.\nHowever, the fact that these processes are different has implications for the accuracy of the numerical integration used to sample from them at any tùë°t as well as for the propagation of statistical errors (see also the next remark).\n\nGenerative models based on solutions Xtsubscriptùëãùë°X\\_{t} to the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), solutions Xtùñ•subscriptsuperscriptùëãùñ•ùë°X^{\\\\mathsf{F}}\\_{t} to the forward SDE ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and solutions Xtùñ°subscriptsuperscriptùëãùñ°ùë°X^{\\\\mathsf{B}}\\_{t} to the backward SDE ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) will typically involve drifts bùëèb, bùñ•subscriptùëèùñ•b\\_{\\\\mathsf{F}}, and bùñ°subscriptùëèùñ°b\\_{\\\\mathsf{B}} that are, in practice, imperfectly estimated via minimization of ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) over finite datasets. It is important to estimate how this statistical estimation error propagates to errors in sample quality, and how the propagation of error depends on the generative model used, which is the object of our next section.\n\n### 2.4 Likelihood control\n\nIn this section, we demonstrate that jointly minimizing the objective functions ( [2.29]In Remark 2.10. ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) (or the losses ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))) controls the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence from the target density œÅ1subscriptùúå1\\\\rho\\_{1} to the model density œÅ^1subscript^ùúå1\\\\hat{\\\\rho}\\_{1}. We focus on bounds involving the score, but we note that analogous results hold for learning the denoiser Œ∑z‚Äã(t,x)subscriptùúÇùëßùë°ùë•\\\\eta\\_{z}(t,x) defined in ( [2.17]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) by the relation Œ∑z‚Äã(t,x)=‚àís‚Äã(t,x)/Œ≥‚Äã(t)subscriptùúÇùëßùë°ùë•ùë†ùë°ùë•ùõæùë°\\\\eta\\_{z}(t,x)=-s(t,x)/\\\\gamma(t). The derivation is based on a simple and exact characterization of the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence between two transport equations or two Fokker-Planck equations with different drifts. Remarkably, we find that the presence of a diffusive term determines whether or not it is sufficient to learn the drift to control ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}. This can be seen as a generalization of the result for score-based diffusion models described in \\[ [57])\\] to arbitrary generative models described by ODEs or SDEs. The proofs of the statements in this section are provided in Appendix [B.3]B.3 Proofs of Lemmas 2.4 and 2.4, and Theorem 2.4. ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\n\nWe first characterize the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL} divergence between two densities transported by two different continuity equations but initialized from the same initial condition:\n\n{restatable}\n\nlemmakltransport\n\nLet œÅ0:‚Ñùd‚Üí‚Ñù‚â•0:subscriptùúå0‚Üísuperscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho\\_{0}:{\\\\mathbb{R}}^{d}\\\\rightarrow{\\\\mathbb{R}}\\_{\\\\geq 0} denote a fixed base probability density function. Given two velocity fields b,b^‚ààC0‚Äã(\\[0,1\\],(C1‚Äã(‚Ñùd))d)ùëè^ùëèsuperscriptùê∂001superscriptsuperscriptùê∂1superscript‚Ñùùëëùëëb,\\\\hat{b}\\\\in C^{0}(\\[0,1\\],(C^{1}({\\\\mathbb{R}}^{d}))^{d}), let the time-dependent densities œÅ:\\[0,1\\]√ó‚Ñùd‚Üí‚Ñù‚â•0:ùúå‚Üí01superscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho:\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}\\_{\\\\geq 0} and œÅ^:\\[0,1\\]√ó‚Ñùd‚Üí‚Ñù‚â•0:^ùúå‚Üí01superscript‚Ñùùëësubscript‚Ñùabsent0\\\\hat{\\\\rho}:\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}\\_{\\\\geq 0} denote the solutions to the transport equations\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n|  |  | ‚àÇtœÅ+‚àá‚ãÖ(b‚ÄãœÅ)=0,subscriptùë°ùúå‚ãÖ‚àáùëèùúå0\\\\displaystyle\\\\partial\\_{t}\\\\rho+\\\\nabla\\\\cdot(b\\\\rho)=0,\\\\qquad |  | œÅ‚Äã(0)=œÅ0,ùúå0subscriptùúå0\\\\displaystyle\\\\rho(0)=\\\\rho\\_{0}, |  | (2.38) |\n|  |  | ‚àÇtœÅ^+‚àá‚ãÖ(b^‚ÄãœÅ^)=0,subscriptùë°^ùúå‚ãÖ‚àá^ùëè^ùúå0\\\\displaystyle\\\\partial\\_{t}\\\\hat{\\\\rho}+\\\\nabla\\\\cdot(\\\\hat{b}\\\\hat{\\\\rho})=0,\\\\qquad |  | œÅ^‚Äã(0)=œÅ0.^ùúå0subscriptùúå0\\\\displaystyle\\\\hat{\\\\rho}(0)=\\\\rho\\_{0}. |  |\n\nThen, the Kullback-Leibler divergence of œÅ‚Äã(1)ùúå1\\\\rho(1) from œÅ^‚Äã(1)^ùúå1\\\\hat{\\\\rho}(1) is given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùñ™ùñ´‚Äã(œÅ‚Äã(1)‚à•œÅ^‚Äã(1))=‚à´01‚à´‚Ñùd(‚àálog‚Å°œÅ^‚Äã(t,x)‚àí‚àálog‚Å°œÅ‚Äã(t,x))‚ãÖ(b^‚Äã(t,x)‚àíb‚Äã(t,x))‚ÄãœÅ‚Äã(t,x)‚Äãùëëx‚Äãùëët.ùñ™ùñ´conditionalùúå1^ùúå1superscriptsubscript01subscriptsuperscript‚Ñùùëë‚ãÖ‚àá^ùúåùë°ùë•‚àáùúåùë°ùë•^ùëèùë°ùë•ùëèùë°ùë•ùúåùë°ùë•differential-dùë•differential-dùë°\\\\mathsf{KL}(\\\\rho(1)\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(1))=\\\\int\\_{0}^{1}\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\left(\\\\nabla\\\\log\\\\hat{\\\\rho}(t,x)-\\\\nabla\\\\log\\\\rho(t,x)\\\\right)\\\\cdot\\\\big{(}\\\\hat{b}(t,x)-b(t,x)\\\\big{)}\\\\rho(t,x)dxdt. |  | (2.39) |\n\nLemma [2.4]Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") shows that it is insufficient in general to match b^^ùëè\\\\hat{b} with bùëèb to obtain control on the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL} divergence. The essence of the problem is that a small error in b^‚àíb^ùëèùëè\\\\hat{b}-b does not ensure control on the Fisher divergence ùñ•ùñ®‚Äã(œÅ‚Äã(t)‚à•œÅ^‚Äã(t))=‚à´‚Ñùd\\|‚àálog‚Å°œÅ‚Äã(t,x)‚àí‚àálog‚Å°œÅ^‚Äã(t,x)\\|2‚ÄãœÅ‚Äã(t,x)‚Äãùëëxùñ•ùñ®conditionalùúåùë°^ùúåùë°subscriptsuperscript‚Ñùùëësuperscript‚àáùúåùë°ùë•‚àá^ùúåùë°ùë•2ùúåùë°ùë•differential-dùë•\\\\mathsf{FI}(\\\\rho(t)\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(t))=\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\left\\|\\\\nabla\\\\log\\\\rho(t,x)-\\\\nabla\\\\log\\\\hat{\\\\rho}(t,x)\\\\right\\|^{2}\\\\rho(t,x)dx, which is necessary due to the presence of (‚àálog‚Å°œÅ^‚àí‚àálog‚Å°œÅ)‚àá^ùúå‚àáùúå\\\\left(\\\\nabla\\\\log\\\\hat{\\\\rho}-\\\\nabla\\\\log\\\\rho\\\\right) in ( [2.39]In 2.4 Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\nIn the next lemma, we study the case for two Fokker-Planck equations, and highlight that the situation becomes quite different.\n{restatable}lemmaklfpe\n\nLet œÅ0:‚Ñùd‚Üí‚Ñù‚â•0:subscriptùúå0‚Üísuperscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho\\_{0}:{\\\\mathbb{R}}^{d}\\\\rightarrow{\\\\mathbb{R}}\\_{\\\\geq 0} denote a fixed base probability density function. Given two velocity fields bùñ•,b^ùñ•‚ààC0‚Äã(\\[0,1\\],(C1‚Äã(‚Ñùd))d)subscriptùëèùñ•subscript^ùëèùñ•superscriptùê∂001superscriptsuperscriptùê∂1superscript‚Ñùùëëùëëb\\_{\\\\mathsf{F}},\\\\hat{b}\\_{\\\\mathsf{F}}\\\\in C^{0}(\\[0,1\\],(C^{1}({\\\\mathbb{R}}^{d}))^{d}), let the time-dependent densities œÅ:\\[0,1\\]√ó‚Ñùd‚Üí‚Ñù‚â•0:ùúå‚Üí01superscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho:\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}\\_{\\\\geq 0} and œÅ^:\\[0,1\\]√ó‚Ñùd‚Üí‚Ñù‚â•0:^ùúå‚Üí01superscript‚Ñùùëësubscript‚Ñùabsent0\\\\hat{\\\\rho}:\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}\\_{\\\\geq 0} denote the solutions to the Fokker-Planck equations\n\n|     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n|  |  | ‚àÇtœÅ+‚àá‚ãÖ(bùñ•‚ÄãœÅ)=œµ‚ÄãŒî‚ÄãœÅ,subscriptùë°ùúå‚ãÖ‚àásubscriptùëèùñ•ùúåitalic-œµŒîùúå\\\\displaystyle\\\\partial\\_{t}\\\\rho+\\\\nabla\\\\cdot(b\\_{\\\\mathsf{F}}\\\\rho)=\\\\epsilon\\\\Delta\\\\rho,\\\\qquad |  | œÅ‚Äã(0)=œÅ0,ùúå0subscriptùúå0\\\\displaystyle\\\\rho(0)=\\\\rho\\_{0}, |  | (2.40) |\n|  |  | ‚àÇtœÅ^+‚àá‚ãÖ(b^ùñ•‚ÄãœÅ^)=œµ‚ÄãŒî‚ÄãœÅ^,subscriptùë°^ùúå‚ãÖ‚àásubscript^ùëèùñ•^ùúåitalic-œµŒî^ùúå\\\\displaystyle\\\\partial\\_{t}\\\\hat{\\\\rho}+\\\\nabla\\\\cdot(\\\\hat{b}\\_{\\\\mathsf{F}}\\\\hat{\\\\rho})=\\\\epsilon\\\\Delta\\\\hat{\\\\rho},\\\\qquad |  | œÅ^‚Äã(0)=œÅ0.^ùúå0subscriptùúå0\\\\displaystyle\\\\hat{\\\\rho}(0)=\\\\rho\\_{0}. |  |\n\nwhere œµ>0italic-œµ0\\\\epsilon>0.\nThen, the Kullback-Leibler divergence from œÅ‚Äã(1)ùúå1\\\\rho(1) to œÅ^‚Äã(1)^ùúå1\\\\hat{\\\\rho}(1) is given by\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùñ™ùñ´‚Äã(œÅ‚Äã(1)‚à•œÅ^‚Äã(1))ùñ™ùñ´conditionalùúå1^ùúå1\\\\displaystyle\\\\mathsf{KL}(\\\\rho(1)\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(1)) | =‚à´01‚à´‚Ñùd(‚àálog‚Å°œÅ^‚Äã(t,x)‚àí‚àálog‚Å°œÅ‚Äã(t,x))‚ãÖ(b^ùñ•‚Äã(t,x)‚àíbùñ•‚Äã(t,x))‚ÄãœÅ‚Äã(t,x)‚Äãùëëx‚Äãùëëtabsentsuperscriptsubscript01subscriptsuperscript‚Ñùùëë‚ãÖ‚àá^ùúåùë°ùë•‚àáùúåùë°ùë•subscript^ùëèùñ•ùë°ùë•subscriptùëèùñ•ùë°ùë•ùúåùë°ùë•differential-dùë•differential-dùë°\\\\displaystyle=\\\\int\\_{0}^{1}\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\left(\\\\nabla\\\\log\\\\hat{\\\\rho}(t,x)-\\\\nabla\\\\log\\\\rho(t,x)\\\\right)\\\\cdot\\\\left(\\\\hat{b}\\_{\\\\mathsf{F}}(t,x)-b\\_{\\\\mathsf{F}}(t,x)\\\\right)\\\\rho(t,x)dxdt |  | (2.41) |\n|  |  | ‚àíœµ‚Äã‚à´01‚à´‚Ñùd\\|‚àálog‚Å°œÅ‚Äã(t,x)‚àí‚àálog‚Å°œÅ^‚Äã(t,x)\\|2‚ÄãœÅ‚Äã(t,x)‚Äãùëëx‚Äãùëët,italic-œµsuperscriptsubscript01subscriptsuperscript‚Ñùùëësuperscript‚àáùúåùë°ùë•‚àá^ùúåùë°ùë•2ùúåùë°ùë•differential-dùë•differential-dùë°\\\\displaystyle\\\\qquad-\\\\epsilon\\\\int\\_{0}^{1}\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\left\\|\\\\nabla\\\\log\\\\rho(t,x)-\\\\nabla\\\\log\\\\hat{\\\\rho}(t,x)\\\\right\\|^{2}\\\\rho(t,x)dxdt, |  |\n\nand as a result\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùñ™ùñ´‚Äã(œÅ‚Äã(1)‚à•œÅ^‚Äã(1))ùñ™ùñ´conditionalùúå1^ùúå1\\\\displaystyle\\\\mathsf{KL}(\\\\rho(1)\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(1)) | ‚â§14‚Äãœµ‚Äã‚à´01‚à´‚Ñùd\\|b^ùñ•‚Äã(t,x)‚àíbùñ•‚Äã(t,x)\\|2‚ÄãœÅ‚Äã(t,x)‚Äãùëëx‚Äãùëët.absent14italic-œµsuperscriptsubscript01subscriptsuperscript‚Ñùùëësuperscriptsubscript^ùëèùñ•ùë°ùë•subscriptùëèùñ•ùë°ùë•2ùúåùë°ùë•differential-dùë•differential-dùë°\\\\displaystyle\\\\leq\\\\frac{1}{4\\\\epsilon}\\\\int\\_{0}^{1}\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\left\\|\\\\hat{b}\\_{\\\\mathsf{F}}(t,x)-b\\_{\\\\mathsf{F}}(t,x)\\\\right\\|^{2}\\\\rho(t,x)dxdt. |  | (2.42) |\n\nLemma [2.4]Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") shows that, unlike for transport equations, the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence between the solutions of two Fokker-Planck equations is controlled by the error in their drifts. The diffusive term in each Fokker-Planck equation provides an additional negative term in the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence, which eliminates the need for explicit control on the Fisher divergence.\n\nPutting the above results together, we can state the following result, which demonstrates that the losses ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) control the likelihood for learned approximations to the FPE ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\n{restatable}\n\ntheoremlikelihoodbound\n\nLet œÅùúå\\\\rho denote the solution of the Fokker-Planck equation ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) with œµ‚Äã(t)=œµ>0italic-œµùë°italic-œµ0\\\\epsilon(t)=\\\\epsilon>0. Given two velocity fields b^,s^‚ààC0‚Äã(\\[0,1\\],(C1‚Äã(‚Ñùd))d)^ùëè^ùë†superscriptùê∂001superscriptsuperscriptùê∂1superscript‚Ñùùëëùëë\\\\hat{b},\\\\hat{s}\\\\in C^{0}(\\[0,1\\],(C^{1}({\\\\mathbb{R}}^{d}))^{d}), define\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | b^ùñ•‚Äã(t,x)=b^‚Äã(t,x)+œµ‚Äãs^‚Äã(t,x),v^‚Äã(t,x)=b^‚Äã(t,x)+Œ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)‚Äãs^‚Äã(t,x)formulae-sequencesubscript^ùëèùñ•ùë°ùë•^ùëèùë°ùë•italic-œµ^ùë†ùë°ùë•^ùë£ùë°ùë•^ùëèùë°ùë•ùõæùë°Àôùõæùë°^ùë†ùë°ùë•\\\\hat{b}\\_{\\\\mathsf{F}}(t,x)=\\\\hat{b}(t,x)+\\\\epsilon\\\\hat{s}(t,x),\\\\qquad\\\\hat{v}(t,x)=\\\\hat{b}(t,x)+\\\\gamma(t)\\\\dot{\\\\gamma}(t)\\\\hat{s}(t,x) |  | (2.43) |\n\nwhere the function Œ≥ùõæ\\\\gamma satisfies the properties listed in Definition [2.1]Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). Let œÅ^^ùúå\\\\hat{\\\\rho} denote the solution to the Fokker-Planck equation\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ^+‚àá‚ãÖ(b^ùñ•‚ÄãœÅ^)=œµ‚ÄãŒî‚ÄãœÅ^,œÅ^‚Äã(0)=œÅ0.formulae-sequencesubscriptùë°^ùúå‚ãÖ‚àásubscript^ùëèùñ•^ùúåitalic-œµŒî^ùúå^ùúå0subscriptùúå0\\\\partial\\_{t}\\\\hat{\\\\rho}+\\\\nabla\\\\cdot(\\\\hat{b}\\_{\\\\mathsf{F}}\\\\hat{\\\\rho})=\\\\epsilon\\\\Delta\\\\hat{\\\\rho},\\\\qquad\\\\hat{\\\\rho}(0)=\\\\rho\\_{0}. |  | (2.44) |\n\nThen,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùñ™ùñ´‚Äã(œÅ1‚à•œÅ^‚Äã(1))‚â§12‚Äãœµ‚Äã(‚Ñíb‚Äã\\[b^\\]‚àíminb^‚Å°‚Ñíb‚Äã\\[b^\\])+œµ2‚Äã(‚Ñís‚Äã\\[s^\\]‚àímins^‚Å°‚Ñís‚Äã\\[s^\\]),ùñ™ùñ´conditionalsubscriptùúå1^ùúå112italic-œµsubscript‚Ñíùëèdelimited-\\[\\]^ùëèsubscript^ùëèsubscript‚Ñíùëèdelimited-\\[\\]^ùëèitalic-œµ2subscript‚Ñíùë†delimited-\\[\\]^ùë†subscript^ùë†subscript‚Ñíùë†delimited-\\[\\]^ùë†\\\\mathsf{KL}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(1))\\\\leq\\\\frac{1}{2\\\\epsilon}\\\\left(\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\]-\\\\min\\_{\\\\hat{b}}\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\]\\\\right)+\\\\frac{\\\\epsilon}{2}\\\\left(\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]-\\\\min\\_{\\\\hat{s}}\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]\\\\right), |  | (2.45) |\n\nwhere ‚Ñíb‚Äã\\[b^\\]subscript‚Ñíùëèdelimited-\\[\\]^ùëè\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\] and ‚Ñís‚Äã\\[s^\\]subscript‚Ñíùë†delimited-\\[\\]^ùë†\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\] are the objective functions defined in ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùñ™ùñ´‚Äã(œÅ1‚à•œÅ^‚Äã(1))‚â§12‚Äãœµ‚Äã(‚Ñív‚Äã\\[v^\\]‚àíminv^‚Å°‚Ñív‚Äã\\[v^\\])+supt‚àà\\[0,1\\](Œ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)‚àíœµ)22‚Äãœµ‚Äã(‚Ñís‚Äã\\[s^\\]‚àíminv^‚Å°‚Ñís‚Äã\\[s^\\]).ùñ™ùñ´conditionalsubscriptùúå1^ùúå112italic-œµsubscript‚Ñíùë£delimited-\\[\\]^ùë£subscript^ùë£subscript‚Ñíùë£delimited-\\[\\]^ùë£subscriptsupremumùë°01superscriptùõæùë°Àôùõæùë°italic-œµ22italic-œµsubscript‚Ñíùë†delimited-\\[\\]^ùë†subscript^ùë£subscript‚Ñíùë†delimited-\\[\\]^ùë†\\\\mathsf{KL}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(1))\\\\leq\\\\frac{1}{2\\\\epsilon}\\\\left(\\\\mathcal{L}\\_{v}\\[\\\\hat{v}\\]-\\\\min\\_{\\\\hat{v}}\\\\mathcal{L}\\_{v}\\[\\\\hat{v}\\]\\\\right)+\\\\frac{\\\\sup\\_{t\\\\in\\[0,1\\]}(\\\\gamma(t)\\\\dot{\\\\gamma}(t)-\\\\epsilon)^{2}}{2\\\\epsilon}\\\\left(\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]-\\\\min\\_{\\\\hat{v}}\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]\\\\right). |  | (2.46) |\n\nwhere ‚Ñív‚Äã\\[v^\\]subscript‚Ñíùë£delimited-\\[\\]^ùë£\\\\mathcal{L}\\_{v}\\[\\\\hat{v}\\] is the objective function defined in ( [2.29]In Remark 2.10. ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\n###### Remark 2.15(Generative modeling).\n\nThe above results have practical ramifications for generative modeling. In particular, they show that minimizing either the losses ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) or ( [2.29]In Remark 2.10. ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) maximize the likelihood of the stochastic generative model\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãX^tùñ•=(b^‚Äã(t,X^tùñ•)+œµ‚Äãs^‚Äã(t,X^tùñ•))‚Äãd‚Äãt+2‚Äãœµ‚Äãd‚ÄãWt,ùëësuperscriptsubscript^ùëãùë°ùñ•^ùëèùë°superscriptsubscript^ùëãùë°ùñ•italic-œµ^ùë†ùë°superscriptsubscript^ùëãùë°ùñ•ùëëùë°2italic-œµùëësubscriptùëäùë°d\\\\hat{X}\\_{t}^{\\\\mathsf{F}}=\\\\left(\\\\hat{b}(t,\\\\hat{X}\\_{t}^{\\\\mathsf{F}})+\\\\epsilon\\\\hat{s}(t,\\\\hat{X}\\_{t}^{\\\\mathsf{F}})\\\\right)dt+\\\\sqrt{2\\\\epsilon}dW\\_{t}, |  | (2.47) |\n\nbut that minimizing the objective ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is insufficient in general to maximize the likelihood of the deterministic generative model\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | X^Àôt=b^‚Äã(t,X^t).subscriptÀô^ùëãùë°^ùëèùë°subscript^ùëãùë°\\\\dot{\\\\hat{X}}\\_{t}=\\\\hat{b}(t,\\\\hat{X}\\_{t}). |  | (2.48) |\n\nMoreover, they show that, when learning b^^ùëè\\\\hat{b} and s^^ùë†\\\\hat{s}, the choice of œµitalic-œµ\\\\epsilon that minimizes the upper bound is given by\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œµ‚àó=(‚Ñíb‚Äã\\[b^\\]‚àíminb^‚Å°‚Ñíb‚Äã\\[b^\\]‚Ñís‚Äã\\[s^\\]‚àímins^‚Å°‚Ñís‚Äã\\[s^\\])1/2,superscriptitalic-œµsuperscriptsubscript‚Ñíùëèdelimited-\\[\\]^ùëèsubscript^ùëèsubscript‚Ñíùëèdelimited-\\[\\]^ùëèsubscript‚Ñíùë†delimited-\\[\\]^ùë†subscript^ùë†subscript‚Ñíùë†delimited-\\[\\]^ùë†12\\\\epsilon^{\\*}=\\\\left(\\\\frac{\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\]-\\\\min\\_{\\\\hat{b}}\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\]}{\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]-\\\\min\\_{\\\\hat{s}}\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]}\\\\right)^{1/2}, |  | (2.49) |\n\nso that œµ‚àó>1superscriptitalic-œµ1\\\\epsilon^{\\*}>1 if the score is learned to higher accuracy than b^^ùëè\\\\hat{b} and œµ‚àó<1superscriptitalic-œµ1\\\\epsilon^{\\*}<1 in the opposite situation. Note that ( [2.49]In Remark 2.15 (Generative modeling). ‚Ä£ 2.4 Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) suggests to take œµ=0italic-œµ0\\\\epsilon=0 if b^^ùëè\\\\hat{b} is learned perfectly but s^^ùë†\\\\hat{s} is not, and send œµ‚Üí‚àû‚Üíitalic-œµ\\\\epsilon\\\\to\\\\infty in the opposite situation. While taking œµ=0italic-œµ0\\\\epsilon=0 is achievable in practice and leads to the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), taking œµ‚Üí‚àû‚Üíitalic-œµ\\\\epsilon\\\\to\\\\infty is not, as increasing œµitalic-œµ\\\\epsilon increases the expense of the numerical integration in ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\n### 2.5 Density estimation and cross-entropy calculation\n\nIt is well-known that the solution of the TE ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can be expressed in terms of the solution to the probability flow ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")); for completeness, we now recall this fact:\n{restatable}lemmaTEs\n\nGiven the velocity field b^‚ààC0‚Äã(\\[0,1\\],(C1‚Äã(‚Ñùd))d)^ùëèsuperscriptùê∂001superscriptsuperscriptùê∂1superscript‚Ñùùëëùëë\\\\hat{b}\\\\in C^{0}(\\[0,1\\],(C^{1}({\\\\mathbb{R}}^{d}))^{d}), let œÅ^^ùúå\\\\hat{\\\\rho} satisfy the transport equation\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ^+‚àá‚ãÖ(b^‚ÄãœÅ^)=0,subscriptùë°^ùúå‚ãÖ‚àá^ùëè^ùúå0\\\\partial\\_{t}\\\\hat{\\\\rho}+\\\\nabla\\\\cdot(\\\\hat{b}\\\\hat{\\\\rho})=0, |  | (2.50) |\n\nand let Xs,t‚Äã(x)subscriptùëãùë†ùë°ùë•X\\_{s,t}(x) solve the ODE\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | dd‚ÄãtXs,t(x)=b(t,Xs,t(x)),X(x)s,s=x,t,s‚àà\\[0,1\\]\\\\frac{d}{dt}X\\_{s,t}(x)=b(t,X\\_{s,t}(x)),\\\\qquad X{{}\\_{s,s}(x)=x,\\\\qquad t,s\\\\in\\[0,1\\]} |  | (2.51) |\n\nThen, given the PDFs œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}:\n\n1. 1.\n\n\nThe solution to ( [2.50]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for the initial condition œÅ^‚Äã(0)=œÅ0^ùúå0subscriptùúå0\\\\hat{\\\\rho}(0)=\\\\rho\\_{0} is given at any time t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] by\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œÅ^‚Äã(t,x)=exp‚Å°(‚àí‚à´0t‚àá‚ãÖb‚Äã(œÑ,Xt,œÑ‚Äã(x))‚ÄãùëëœÑ)‚ÄãœÅ0‚Äã(Xt,0‚Äã(x))^ùúåùë°ùë•superscriptsubscript0ùë°‚ãÖ‚àáùëèùúèsubscriptùëãùë°ùúèùë•differential-dùúèsubscriptùúå0subscriptùëãùë°0ùë•\\\\hat{\\\\rho}(t,x)=\\\\exp\\\\left(-\\\\int\\_{0}^{t}\\\\nabla\\\\cdot b(\\\\tau,X\\_{t,\\\\tau}(x))d\\\\tau\\\\right)\\\\rho\\_{0}(X\\_{t,0}(x)) |  | (2.52) |\n\n2. 2.\n\n\nThe solution to ( [2.50]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for the final condition œÅ^‚Äã(1)=œÅ1^ùúå1subscriptùúå1\\\\hat{\\\\rho}(1)=\\\\rho\\_{1} is given at any time t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] by\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œÅ^‚Äã(t,x)=exp‚Å°(‚à´t1‚àá‚ãÖb‚Äã(œÑ,Xt,œÑ‚Äã(x))‚ÄãùëëœÑ)‚ÄãœÅ1‚Äã(Xt,1‚Äã(x))^ùúåùë°ùë•superscriptsubscriptùë°1‚ãÖ‚àáùëèùúèsubscriptùëãùë°ùúèùë•differential-dùúèsubscriptùúå1subscriptùëãùë°1ùë•\\\\hat{\\\\rho}(t,x)=\\\\exp\\\\left(\\\\int\\_{t}^{1}\\\\nabla\\\\cdot b(\\\\tau,X\\_{t,\\\\tau}(x))d\\\\tau\\\\right)\\\\rho\\_{1}(X\\_{t,1}(x)) |  | (2.53) |\n\n\nThe proof of Lemma [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") can be found in Appendix [B.4]B.4 Proofs of Lemma 2.5 and Theorem 2.5 ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). Interestingly, we can obtain a similar result for the solution of the forward and backward FPEs in ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). These results make use of auxiliary forward and backward SDEs in which the roles of the forward and backward drifts are switched:\n\n{restatable}\n\ntheoremFK\n\nGiven œµ>0italic-œµ0\\\\epsilon>0 and two velocity fields b^,s^‚ààC0‚Äã(\\[0,1\\],(C1‚Äã(‚Ñùd))d)^ùëè^ùë†superscriptùê∂001superscriptsuperscriptùê∂1superscript‚Ñùùëëùëë\\\\hat{b},\\\\hat{s}\\\\in C^{0}(\\[0,1\\],(C^{1}({\\\\mathbb{R}}^{d}))^{d}), define\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | b^ùñ•‚Äã(t,x)=b^‚Äã(t,x)+œµ‚Äãs^‚Äã(t,x),b^ùñ°‚Äã(t,x)=b^‚Äã(t,x)‚àíœµ‚Äãs^‚Äã(t,x),formulae-sequencesubscript^ùëèùñ•ùë°ùë•^ùëèùë°ùë•italic-œµ^ùë†ùë°ùë•subscript^ùëèùñ°ùë°ùë•^ùëèùë°ùë•italic-œµ^ùë†ùë°ùë•\\\\hat{b}\\_{\\\\mathsf{F}}(t,x)=\\\\hat{b}(t,x)+\\\\epsilon\\\\hat{s}(t,x),\\\\qquad\\\\hat{b}\\_{\\\\mathsf{B}}(t,x)=\\\\hat{b}(t,x)-\\\\epsilon\\\\hat{s}(t,x), |  | (2.54) |\n\nand let Ytùñ•subscriptsuperscriptùëåùñ•ùë°Y^{\\\\mathsf{F}}\\_{t} and Ytùñ°subscriptsuperscriptùëåùñ°ùë°Y^{\\\\mathsf{B}}\\_{t} denote solutions of the following forward and backward SDEs:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãYtùñ•=bùñ°‚Äã(t,Ytùñ•)‚Äãd‚Äãt+2‚Äãœµ‚Äãd‚ÄãWt,ùëësubscriptsuperscriptùëåùñ•ùë°subscriptùëèùñ°ùë°subscriptsuperscriptùëåùñ•ùë°ùëëùë°2italic-œµùëësubscriptùëäùë°dY^{\\\\mathsf{F}}\\_{t}=b\\_{\\\\mathsf{B}}(t,Y^{\\\\mathsf{F}}\\_{t})dt+\\\\sqrt{2\\\\epsilon}dW\\_{t}, |  | (2.55) |\n\nto be solved forward in time from the initial condition Yt=0ùñ•=xsubscriptsuperscriptùëåùñ•ùë°0ùë•Y^{\\\\mathsf{F}}\\_{t=0}=x independent of WùëäW; and\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãYtùñ°=bùñ•‚Äã(t,Ytùñ°)‚Äãd‚Äãt+2‚Äãœµ‚Äãd‚ÄãWtùñ°,Wtùñ°=‚àíW1‚àít,formulae-sequenceùëësubscriptsuperscriptùëåùñ°ùë°subscriptùëèùñ•ùë°subscriptsuperscriptùëåùñ°ùë°ùëëùë°2italic-œµùëësubscriptsuperscriptùëäùñ°ùë°superscriptsubscriptùëäùë°ùñ°subscriptùëä1ùë°dY^{\\\\mathsf{B}}\\_{t}=b\\_{\\\\mathsf{F}}(t,Y^{\\\\mathsf{B}}\\_{t})dt+\\\\sqrt{2\\\\epsilon}dW^{\\\\mathsf{B}}\\_{t},\\\\quad W\\_{t}^{\\\\mathsf{B}}=-W\\_{1-t}, |  | (2.56) |\n\nto be solved backwards in time from the final condition Yt=1ùñ°=xsubscriptsuperscriptùëåùñ°ùë°1ùë•Y^{\\\\mathsf{B}}\\_{t=1}=x independent of Wùñ°superscriptùëäùñ°W^{\\\\mathsf{B}}. Then, given the densities œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}:\n\n1. 1.\n\n\nThe solution to the forward FPE\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ^ùñ•+‚àá‚ãÖ(b^ùñ•‚ÄãœÅ^ùñ•)=œµ‚ÄãŒî‚ÄãœÅ^ùñ•,œÅ^ùñ•‚Äã(0)=œÅ0,formulae-sequencesubscriptùë°subscript^ùúåùñ•‚ãÖ‚àásubscript^ùëèùñ•subscript^ùúåùñ•italic-œµŒîsubscript^ùúåùñ•subscript^ùúåùñ•0subscriptùúå0\\\\partial\\_{t}\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}+\\\\nabla\\\\cdot(\\\\hat{b}\\_{\\\\mathsf{F}}\\\\hat{\\\\rho}\\_{\\\\mathsf{F}})=\\\\epsilon\\\\Delta\\\\hat{\\\\rho}\\_{\\\\mathsf{F}},\\\\qquad\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(0)=\\\\rho\\_{0}, |  | (2.57) |\n\n\n\ncan be expressed at t=1ùë°1t=1 as\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œÅ^ùñ•‚Äã(1,x)=ùîºùñ°x‚Äã(exp‚Å°(‚àí‚à´01‚àá‚ãÖb^ùñ•‚Äã(t,Ytùñ°)‚Äãùëët)‚ÄãœÅ0‚Äã(Yt=0ùñ°)),subscript^ùúåùñ•1ùë•superscriptsubscriptùîºùñ°ùë•superscriptsubscript01‚ãÖ‚àásubscript^ùëèùñ•ùë°subscriptsuperscriptùëåùñ°ùë°differential-dùë°subscriptùúå0superscriptsubscriptùëåùë°0ùñ°\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1,x)={\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x}\\\\left(\\\\exp\\\\left(-\\\\int\\_{0}^{1}\\\\nabla\\\\cdot\\\\hat{b}\\_{\\\\mathsf{F}}(t,Y^{\\\\mathsf{B}}\\_{t})dt\\\\right)\\\\rho\\_{0}(Y\\_{t=0}^{\\\\mathsf{B}})\\\\right), |  | (2.58) |\n\n\n\nwhere ùîºùñ°xsuperscriptsubscriptùîºùñ°ùë•{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x} denotes expectation on the path of Ytùñ°superscriptsubscriptùëåùë°ùñ°Y\\_{t}^{\\\\mathsf{B}} conditional on the event Yt=1ùñ°=xsuperscriptsubscriptùëåùë°1ùñ°ùë•Y\\_{t=1}^{\\\\mathsf{B}}=x.\n\n2. 2.\n\n\nThe solution to the backward FPE\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ^ùñ°+‚àá‚ãÖ(b^ùñ°‚ÄãœÅ^ùñ°)=‚àíœµ‚ÄãŒî‚ÄãœÅ^ùñ°,œÅ^ùñ°‚Äã(1)=œÅ1,formulae-sequencesubscriptùë°subscript^ùúåùñ°‚ãÖ‚àásubscript^ùëèùñ°subscript^ùúåùñ°italic-œµŒîsubscript^ùúåùñ°subscript^ùúåùñ°1subscriptùúå1\\\\partial\\_{t}\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}+\\\\nabla\\\\cdot(\\\\hat{b}\\_{\\\\mathsf{B}}\\\\hat{\\\\rho}\\_{\\\\mathsf{B}})=-\\\\epsilon\\\\Delta\\\\hat{\\\\rho}\\_{\\\\mathsf{B}},\\\\qquad\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(1)=\\\\rho\\_{1}, |  | (2.59) |\n\n\n\ncan be expressed at any t=0ùë°0t=0 as\n\n\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œÅ^ùñ°‚Äã(0,x)=ùîºùñ•x‚Äã(exp‚Å°(‚à´01‚àá‚ãÖb^ùñ°‚Äã(t,Ytùñ•)‚Äãùëët)‚ÄãœÅ1‚Äã(Yt=1ùñ•)),subscript^ùúåùñ°0ùë•superscriptsubscriptùîºùñ•ùë•superscriptsubscript01‚ãÖ‚àásubscript^ùëèùñ°ùë°subscriptsuperscriptùëåùñ•ùë°differential-dùë°subscriptùúå1subscriptsuperscriptùëåùñ•ùë°1\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0,x)={\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x}\\\\left(\\\\exp\\\\left(\\\\int\\_{0}^{1}\\\\nabla\\\\cdot\\\\hat{b}\\_{\\\\mathsf{B}}(t,Y^{\\\\mathsf{F}}\\_{t})dt\\\\right)\\\\rho\\_{1}(Y^{\\\\mathsf{F}}\\_{t=1})\\\\right), |  | (2.60) |\n\n\n\nwhere ùîºùñ•xsuperscriptsubscriptùîºùñ•ùë•{\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x} denotes expectation on the path of Ytùñ•subscriptsuperscriptùëåùñ•ùë°Y^{\\\\mathsf{F}}\\_{t} conditional on Yt=0ùñ•=xsubscriptsuperscriptùëåùñ•ùë°0ùë•Y^{\\\\mathsf{F}}\\_{t=0}=x.\n\n\nThe proof of Theorem [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") can be found in Appendix [B.4]B.4 Proofs of Lemma 2.5 and Theorem 2.5 ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). Note that to generate data from either œÅ^ùñ•‚Äã(1)subscript^ùúåùñ•1\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1) or œÅ^ùñ°‚Äã(0)subscript^ùúåùñ°0\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0) assuming that we can sample exactly the PDF at the other end, i.e. œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} respectively, we would still rely on the equivalent of the forward and backward SDE in ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), now used with the approximate drifts in ( [2.54]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), i.e.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãX^tùñ•=b^ùñ•‚Äã(t,X^tùñ•)‚Äãd‚Äãt+2‚Äãœµ‚Äãd‚ÄãWt,ùëësubscriptsuperscript^ùëãùñ•ùë°subscript^ùëèùñ•ùë°subscriptsuperscript^ùëãùñ•ùë°ùëëùë°2italic-œµùëësubscriptùëäùë°d\\\\hat{X}^{\\\\mathsf{F}}\\_{t}=\\\\hat{b}\\_{\\\\mathsf{F}}(t,\\\\hat{X}^{\\\\mathsf{F}}\\_{t})dt+\\\\sqrt{2\\\\epsilon}dW\\_{t}, |  | (2.61) |\n\nand\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãX^tùñ°=b^ùñ°‚Äã(t,X^tùñ°)‚Äãd‚Äãt+2‚Äãœµ‚Äãd‚ÄãWtùñ°,Wtùñ°=‚àíW1‚àít,formulae-sequenceùëësubscriptsuperscript^ùëãùñ°ùë°subscript^ùëèùñ°ùë°subscriptsuperscript^ùëãùñ°ùë°ùëëùë°2italic-œµùëësubscriptsuperscriptùëäùñ°ùë°superscriptsubscriptùëäùë°ùñ°subscriptùëä1ùë°d\\\\hat{X}^{\\\\mathsf{B}}\\_{t}=\\\\hat{b}\\_{\\\\mathsf{B}}(t,\\\\hat{X}^{\\\\mathsf{B}}\\_{t})dt+\\\\sqrt{2\\\\epsilon}dW^{\\\\mathsf{B}}\\_{t},\\\\quad W\\_{t}^{\\\\mathsf{B}}=-W\\_{1-t}, |  | (2.62) |\n\nIf we solve ( [2.61]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) forward in time from initial data X^t=0ùñ•‚àºœÅ0similar-tosubscriptsuperscript^ùëãùñ•ùë°0subscriptùúå0\\\\hat{X}^{\\\\mathsf{F}}\\_{t=0}\\\\sim\\\\rho\\_{0}, we then have X^t=1ùñ•‚àºœÅ^ùñ•‚Äã(1)similar-tosubscriptsuperscript^ùëãùñ•ùë°1subscript^ùúåùñ•1\\\\hat{X}^{\\\\mathsf{F}}\\_{t=1}\\\\sim\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1) where œÅ^ùñ•subscript^ùúåùñ•\\\\hat{\\\\rho}\\_{\\\\mathsf{F}} is the solution to the forward FPE ( [2.57]In item 1 ‚Ä£ 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). Similarly If we solve ( [2.62]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) backward in time from final data X^t=1ùñ°‚àºœÅ1similar-tosubscriptsuperscript^ùëãùñ°ùë°1subscriptùúå1\\\\hat{X}^{\\\\mathsf{B}}\\_{t=1}\\\\sim\\\\rho\\_{1}, we then have X^t=0ùñ°‚àºœÅ^ùñ°‚Äã(0)similar-tosubscriptsuperscript^ùëãùñ°ùë°0subscript^ùúåùñ°0\\\\hat{X}^{\\\\mathsf{B}}\\_{t=0}\\\\sim\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0) where œÅ^ùñ°subscript^ùúåùñ°\\\\hat{\\\\rho}\\_{\\\\mathsf{B}} is the solution to the backward FPE ( [2.59]In item 2 ‚Ä£ 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\nThe results of Lemma [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and Theorem [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") can be used to test the quality of samples generated by either the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) or the forward and backward SDEs ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). In particular, the following two results are direct consequences of Lemma [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and Theorem [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), respectively:\n\n{restatable}\n\ncorollarycrossentode\n\nUnder the same conditions as Lemma [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), if œÅ^‚Äã(0)=œÅ0^ùúå0subscriptùúå0\\\\hat{\\\\rho}(0)=\\\\rho\\_{0}, the cross-entropy of œÅ^‚Äã(1)^ùúå1\\\\hat{\\\\rho}(1) relative to œÅ1subscriptùúå1\\\\rho\\_{1} is given by\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ1‚à•œÅ^‚Äã(1))ùñßconditionalsubscriptùúå1^ùúå1\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(1)) | =‚àí‚à´‚Ñùdlog‚Å°œÅ^‚Äã(1,x)‚ÄãœÅ1‚Äã(x)‚Äãùëëxabsentsubscriptsuperscript‚Ñùùëë^ùúå1ùë•subscriptùúå1ùë•differential-dùë•\\\\displaystyle=-\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\log\\\\hat{\\\\rho}(1,x)\\\\rho\\_{1}(x)dx |  | (2.63) |\n|  |  | =ùîº1‚Äã‚à´01‚àá‚ãÖb‚Äã(œÑ,X1,œÑ‚Äã(x1))‚ÄãùëëœÑ‚àíùîº1‚Äãlog‚Å°œÅ0‚Äã(X1,0‚Äã(x1))absentsubscriptùîº1superscriptsubscript01‚ãÖ‚àáùëèùúèsubscriptùëã1ùúèsubscriptùë•1differential-dùúèsubscriptùîº1subscriptùúå0subscriptùëã10subscriptùë•1\\\\displaystyle={\\\\mathbb{E}}\\_{1}\\\\int\\_{0}^{1}\\\\nabla\\\\cdot b(\\\\tau,X\\_{1,\\\\tau}(x\\_{1}))d\\\\tau-{\\\\mathbb{E}}\\_{1}\\\\log\\\\rho\\_{0}(X\\_{1,0}(x\\_{1})) |  |\n\nwhere ùîº1subscriptùîº1{\\\\mathbb{E}}\\_{1} denotes an expectation over x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1}. Similarly, if œÅ^‚Äã(1)=œÅ1^ùúå1subscriptùúå1\\\\hat{\\\\rho}(1)=\\\\rho\\_{1}, the cross-entropy of œÅ^‚Äã(0)^ùúå0\\\\hat{\\\\rho}(0) relative to œÅ0subscriptùúå0\\\\rho\\_{0} is given by\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ0‚à•œÅ^‚Äã(0))ùñßconditionalsubscriptùúå0^ùúå0\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{0}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}(0)) | =‚àí‚à´‚Ñùdlog‚Å°œÅ^‚Äã(0,x)‚ÄãœÅ0‚Äã(x)‚Äãùëëxabsentsubscriptsuperscript‚Ñùùëë^ùúå0ùë•subscriptùúå0ùë•differential-dùë•\\\\displaystyle=-\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\log\\\\hat{\\\\rho}(0,x)\\\\rho\\_{0}(x)dx |  | (2.64) |\n|  |  | =‚àíùîº0‚Äã‚à´01‚àá‚ãÖb‚Äã(œÑ,X0,œÑ‚Äã(x0))‚ÄãùëëœÑ‚àíùîº0‚Äãlog‚Å°œÅ1‚Äã(X0,1‚Äã(x0))absentsubscriptùîº0superscriptsubscript01‚ãÖ‚àáùëèùúèsubscriptùëã0ùúèsubscriptùë•0differential-dùúèsubscriptùîº0subscriptùúå1subscriptùëã01subscriptùë•0\\\\displaystyle=-{\\\\mathbb{E}}\\_{0}\\\\int\\_{0}^{1}\\\\nabla\\\\cdot b(\\\\tau,X\\_{0,\\\\tau}(x\\_{0}))d\\\\tau-{\\\\mathbb{E}}\\_{0}\\\\log\\\\rho\\_{1}(X\\_{0,1}(x\\_{0})) |  |\n\nwhere ùîº0subscriptùîº0{\\\\mathbb{E}}\\_{0} denotes an expectation over x0‚àºœÅ0similar-tosubscriptùë•0subscriptùúå0x\\_{0}\\\\sim\\\\rho\\_{0}.\n\n{restatable}\n\ncorollarycrossentsde\n\nUnder the same conditions as Theorem [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), the cross-entropy of œÅ^ùñ•‚Äã(1)subscript^ùúåùñ•1\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1) relative to œÅ1subscriptùúå1\\\\rho\\_{1} is given by\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ1‚à•œÅ^ùñ•‚Äã(1))ùñßconditionalsubscriptùúå1subscript^ùúåùñ•1\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1)) | =‚àí‚à´‚Ñùdlog‚Å°œÅ^ùñ•‚Äã(1,x)‚ÄãœÅ1‚Äã(x)‚Äãùëëxabsentsubscriptsuperscript‚Ñùùëësubscript^ùúåùñ•1ùë•subscriptùúå1ùë•differential-dùë•\\\\displaystyle=-\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1,x)\\\\rho\\_{1}(x)dx |  | (2.65) |\n|  |  | =‚àíùîº1‚Äãlog‚Å°ùîºùñ°x1‚Äã(exp‚Å°(‚àí‚à´01‚àá‚ãÖbùñ•‚Äã(t,Ytùñ°)‚Äãùëët)‚ÄãœÅ0‚Äã(Yt=0ùñ°)),absentsubscriptùîº1superscriptsubscriptùîºùñ°subscriptùë•1superscriptsubscript01‚ãÖ‚àásubscriptùëèùñ•ùë°subscriptsuperscriptùëåùñ°ùë°differential-dùë°subscriptùúå0superscriptsubscriptùëåùë°0ùñ°\\\\displaystyle=-{\\\\mathbb{E}}\\_{1}\\\\log{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{1}}\\\\left(\\\\exp\\\\left(-\\\\int\\_{0}^{1}\\\\nabla\\\\cdot b\\_{\\\\mathsf{F}}(t,Y^{\\\\mathsf{B}}\\_{t})dt\\\\right)\\\\rho\\_{0}(Y\\_{t=0}^{\\\\mathsf{B}})\\\\right), |  |\n\nwhere ùîºùñ°x1superscriptsubscriptùîºùñ°subscriptùë•1{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{1}} denotes an expectation over Ytùñ°subscriptsuperscriptùëåùñ°ùë°Y^{\\\\mathsf{B}}\\_{t} conditioned on the event Yt=1ùñ°=x1subscriptsuperscriptùëåùñ°ùë°1subscriptùë•1Y^{\\\\mathsf{B}}\\_{t=1}=x\\_{1}, and ùîº1subscriptùîº1{\\\\mathbb{E}}\\_{1} denotes an expectation over x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1}.\nSimilarly, the cross-entropy of œÅ^ùñ°‚Äã(0)subscript^ùúåùñ°0\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0) relative to œÅ0subscriptùúå0\\\\rho\\_{0} is given by\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ0‚à•œÅ^ùñ°‚Äã(0))ùñßconditionalsubscriptùúå0subscript^ùúåùñ°0\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{0}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0)) | =‚àí‚à´‚Ñùdlog‚Å°œÅ^ùñ°‚Äã(0,x)‚ÄãœÅ0‚Äã(x)‚Äãùëëxabsentsubscriptsuperscript‚Ñùùëësubscript^ùúåùñ°0ùë•subscriptùúå0ùë•differential-dùë•\\\\displaystyle=-\\\\int\\_{{\\\\mathbb{R}}^{d}}\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0,x)\\\\rho\\_{0}(x)dx |  | (2.66) |\n|  |  | =‚àíùîº0‚Äãlog‚Å°ùîºùñ•x0‚Äã(exp‚Å°(‚à´01‚àá‚ãÖbùñ°‚Äã(t,Ytùñ•)‚Äãùëët)‚ÄãœÅ1‚Äã(Yt=1ùñ•)),absentsubscriptùîº0superscriptsubscriptùîºùñ•subscriptùë•0superscriptsubscript01‚ãÖ‚àásubscriptùëèùñ°ùë°subscriptsuperscriptùëåùñ•ùë°differential-dùë°subscriptùúå1subscriptsuperscriptùëåùñ•ùë°1\\\\displaystyle=-{\\\\mathbb{E}}\\_{0}\\\\log{\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x\\_{0}}\\\\left(\\\\exp\\\\left(\\\\int\\_{0}^{1}\\\\nabla\\\\cdot b\\_{\\\\mathsf{B}}(t,Y^{\\\\mathsf{F}}\\_{t})dt\\\\right)\\\\rho\\_{1}(Y^{\\\\mathsf{F}}\\_{t=1})\\\\right), |  |\n\nwhere ùîºùñ°x0superscriptsubscriptùîºùñ°subscriptùë•0{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{0}} denotes an expectation over Ytùñ•subscriptsuperscriptùëåùñ•ùë°Y^{\\\\mathsf{F}}\\_{t} conditioned on the event Yt=0ùñ•=x0subscriptsuperscriptùëåùñ•ùë°0subscriptùë•0Y^{\\\\mathsf{F}}\\_{t=0}=x\\_{0}, and ùîº0subscriptùîº0{\\\\mathbb{E}}\\_{0} denotes an expectation over x0‚àºœÅ0similar-tosubscriptùë•0subscriptùúå0x\\_{0}\\\\sim\\\\rho\\_{0}.\n\nIf in ( [2.63]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), ( [2.64]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), ( [2.65]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and ( [2.66]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) we approximate the expectations ùîº0subscriptùîº0{\\\\mathbb{E}}\\_{0} and ùîº1subscriptùîº1{\\\\mathbb{E}}\\_{1} over œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} by empirical expectations over the available data, these equations allow us to cross-validate different approximations of b^^ùëè\\\\hat{b} and s^^ùë†\\\\hat{s}, as well as to compare the cross-entropies of densities evolved by the TE ( [2.50]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) with those of the forward and backward FPEs ( [2.57]In item 1 ‚Ä£ 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.59]In item 2 ‚Ä£ 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\n###### Remark 2.16.\n\nWhen using ( [2.65]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.66]In 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) in practice, taking the log\\\\log of the expectations ùîºùñ°x1superscriptsubscriptùîºùñ°subscriptùë•1{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{1}} and ùîºùñ•x0superscriptsubscriptùîºùñ•subscriptùë•0{\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x\\_{0}} may create difficulties, such as when using Hutchinson‚Äôs trace estimator to compute the divergence of bùñ•subscriptùëèùñ•b\\_{\\\\mathsf{F}} or bùñ°subscriptùëèùñ°b\\_{\\\\mathsf{B}}, which will introduce a bias. One way to remove this bias is to use Jensen‚Äôs inequality, which leads to the upper bounds\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ1‚à•œÅ^ùñ•‚Äã(1))‚â§‚à´01ùîº1‚Äãùîºùñ°x1‚Äã‚àá‚ãÖbùñ•‚Äã(t,Ytùñ°)‚Äãùëët‚àíùîº1‚Äãùîºùñ°x1‚Äãlog‚Å°œÅ0‚Äã(Yt=0ùñ°),ùñßconditionalsubscriptùúå1subscript^ùúåùñ•1superscriptsubscript01‚ãÖsubscriptùîº1superscriptsubscriptùîºùñ°subscriptùë•1‚àásubscriptùëèùñ•ùë°subscriptsuperscriptùëåùñ°ùë°differential-dùë°subscriptùîº1superscriptsubscriptùîºùñ°subscriptùë•1subscriptùúå0superscriptsubscriptùëåùë°0ùñ°\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1))\\\\leq\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\_{1}{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{1}}\\\\nabla\\\\cdot b\\_{\\\\mathsf{F}}(t,Y^{\\\\mathsf{B}}\\_{t})dt-{\\\\mathbb{E}}\\_{1}{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{1}}\\\\log\\\\rho\\_{0}(Y\\_{t=0}^{\\\\mathsf{B}}), |  | (2.67) |\n\nand\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ0‚à•œÅ^ùñ°‚Äã(0))‚â§‚àíùîº0‚Äãùîºùñ•x0‚Äã‚à´01‚àá‚ãÖbùñ°‚Äã(t,Ytùñ•)‚Äãùëët‚àíùîº0‚Äãùîºùñ•x0‚Äãlog‚Å°œÅ1‚Äã(Yt=1ùñ•).ùñßconditionalsubscriptùúå0subscript^ùúåùñ°0subscriptùîº0superscriptsubscriptùîºùñ•subscriptùë•0superscriptsubscript01‚ãÖ‚àásubscriptùëèùñ°ùë°subscriptsuperscriptùëåùñ•ùë°differential-dùë°subscriptùîº0superscriptsubscriptùîºùñ•subscriptùë•0subscriptùúå1subscriptsuperscriptùëåùñ•ùë°1\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{0}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0))\\\\leq-{\\\\mathbb{E}}\\_{0}{\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x\\_{0}}\\\\int\\_{0}^{1}\\\\nabla\\\\cdot b\\_{\\\\mathsf{B}}(t,Y^{\\\\mathsf{F}}\\_{t})dt-{\\\\mathbb{E}}\\_{0}{\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x\\_{0}}\\\\log\\\\rho\\_{1}(Y^{\\\\mathsf{F}}\\_{t=1}). |  | (2.68) |\n\nHowever, these bounds are not sharp in general ‚Äì in fact, using calculations similar to the one presented in the proof of Theorem [2.5]Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we can derive exact expressions that capture precisely what is lost when applying Jensen‚Äôs inequality:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ1‚à•œÅ^ùñ•‚Äã(1))=‚à´01ùîº1‚Äãùîºùñ°x1‚Äã(‚àá‚ãÖbùñ•‚Äã(t,Ytùñ°)‚àíœµ‚Äã\\|‚àálog‚Å°œÅ^ùñ•‚Äã(t,Ytùñ°)\\|2)‚Äãùëët‚àíùîº1‚Äãùîºùñ°x1‚Äãlog‚Å°œÅ0‚Äã(Yt=0ùñ°),ùñßconditionalsubscriptùúå1subscript^ùúåùñ•1superscriptsubscript01subscriptùîº1superscriptsubscriptùîºùñ°subscriptùë•1‚ãÖ‚àásubscriptùëèùñ•ùë°subscriptsuperscriptùëåùñ°ùë°italic-œµsuperscript‚àásubscript^ùúåùñ•ùë°superscriptsubscriptùëåùë°ùñ°2differential-dùë°subscriptùîº1superscriptsubscriptùîºùñ°subscriptùë•1subscriptùúå0superscriptsubscriptùëåùë°0ùñ°\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(1))=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\_{1}{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{1}}\\\\left(\\\\nabla\\\\cdot b\\_{\\\\mathsf{F}}(t,Y^{\\\\mathsf{B}}\\_{t})-\\\\epsilon\\|\\\\nabla\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}(t,Y\\_{t}^{\\\\mathsf{B}})\\|^{2}\\\\right)dt-{\\\\mathbb{E}}\\_{1}{\\\\mathbb{E}}\\_{\\\\mathsf{B}}^{x\\_{1}}\\\\log\\\\rho\\_{0}(Y\\_{t=0}^{\\\\mathsf{B}}), |  | (2.69) |\n\nand\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùñß‚Äã(œÅ0‚à•œÅ^ùñ°‚Äã(0))=‚àíùîº0‚Äãùîºùñ•x0‚Äã‚à´01(‚àá‚ãÖbùñ°‚Äã(t,Ytùñ•)+œµ‚Äã\\|‚àálog‚Å°œÅ^ùñ°‚Äã(t,Ytùñ•)\\|2)‚Äãùëët‚àíùîº0‚Äãùîºùñ•x0‚Äãlog‚Å°œÅ1‚Äã(Yt=1ùñ•).ùñßconditionalsubscriptùúå0subscript^ùúåùñ°0subscriptùîº0superscriptsubscriptùîºùñ•subscriptùë•0superscriptsubscript01‚ãÖ‚àásubscriptùëèùñ°ùë°subscriptsuperscriptùëåùñ•ùë°italic-œµsuperscript‚àásubscript^ùúåùñ°ùë°superscriptsubscriptùëåùë°ùñ•2differential-dùë°subscriptùîº0superscriptsubscriptùîºùñ•subscriptùë•0subscriptùúå1subscriptsuperscriptùëåùñ•ùë°1\\\\displaystyle\\\\mathsf{H}(\\\\rho\\_{0}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(0))=-{\\\\mathbb{E}}\\_{0}{\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x\\_{0}}\\\\int\\_{0}^{1}\\\\left(\\\\nabla\\\\cdot b\\_{\\\\mathsf{B}}(t,Y^{\\\\mathsf{F}}\\_{t})+\\\\epsilon\\|\\\\nabla\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}(t,Y\\_{t}^{\\\\mathsf{F}})\\|^{2}\\\\right)dt-{\\\\mathbb{E}}\\_{0}{\\\\mathbb{E}}\\_{\\\\mathsf{F}}^{x\\_{0}}\\\\log\\\\rho\\_{1}(Y^{\\\\mathsf{F}}\\_{t=1}). |  | (2.70) |\n\nUnfortunately, since ‚àálog‚Å°œÅ^ùñ•‚â†s^‚àásubscript^ùúåùñ•^ùë†\\\\nabla\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{F}}\\\\not=\\\\hat{s} and ‚àálog‚Å°œÅ^ùñ°‚â†s^‚àásubscript^ùúåùñ°^ùë†\\\\nabla\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}\\\\not=\\\\hat{s} in general due to approximation errors, we do not know how to estimate the extra terms on the right-hand side of ( [2.69]In Remark 2.16. ‚Ä£ 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.70]In Remark 2.16. ‚Ä£ 2.5 Density estimation and cross-entropy calculation ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). One possibility is to use s^^ùë†\\\\hat{s} as a proxy for ‚àálog‚Å°œÅ^ùñ•‚àásubscript^ùúåùñ•\\\\nabla\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{F}} and ‚àálog‚Å°œÅ^ùñ°‚àásubscript^ùúåùñ°\\\\nabla\\\\log\\\\hat{\\\\rho}\\_{\\\\mathsf{B}}, which may be useful in practice, but this approximation is uncontrolled in general.",
            "citations": null
          },
          "3 Instantiations and extensions": {
            "content": "In this section, we instantiate the stochastic interpolant framework discussed in Section [2]Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\n\n### 3.1 Diffusive interpolants\n\nRecently, there has been a surge of interest in the construction of generative models through diffusive bridge processes \\[ [8]), [51]), [42]), [55])\\]. In this section, we connect these approaches with our own, highlighting that stochastic interpolants allow us to manipulate certain bridge processes in a simpler and more direct manner. We also show that this perspective leads to a generative process that samples any target density œÅ1subscriptùúå1\\\\rho\\_{1} by pushing a point mass at any x0‚àà‚Ñùdsubscriptùë•0superscript‚Ñùùëëx\\_{0}\\\\in{\\\\mathbb{R}}^{d} through an SDE. We begin by introducing a new kind of interpolant:\n\n###### Definition 3.1(Diffusive interpolant).\n\nGiven two probability density functions œÅ0,œÅ1:‚Ñùd‚Üí‚Ñù‚â•0:subscriptùúå0subscriptùúå1‚Üísuperscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho\\_{0},\\\\rho\\_{1}:{{\\\\mathbb{R}}^{d}}\\\\rightarrow{\\\\mathbb{R}}\\_{\\\\geq 0}, a diffusive interpolant between œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} is a stochastic process xtùñΩsubscriptsuperscriptùë•ùñΩùë°x^{\\\\mathsf{d}}\\_{t} defined as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xtùñΩ=I‚Äã(t,x0,x1)+2‚Äãa‚Äã(t)‚ÄãBt,t‚àà\\[0,1\\],formulae-sequencesubscriptsuperscriptùë•ùñΩùë°ùêºùë°subscriptùë•0subscriptùë•12ùëéùë°subscriptùêµùë°ùë°01x^{\\\\mathsf{d}}\\_{t}=I(t,x\\_{0},x\\_{1})+\\\\sqrt{2a(t)}B\\_{t},\\\\qquad t\\\\in\\[0,1\\], |  | (3.1) |\n\nwhere:\n\n1. 1.\n\n\nI‚Äã(t,x0,x1)ùêºùë°subscriptùë•0subscriptùë•1I(t,x\\_{0},x\\_{1}) is as in Definition [2.1]Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\");\n\n2. 2.\n\n\n(x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu with ŒΩùúà\\\\nu satisfying ( [2.3]In item 3 ‚Ä£ Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) in Definition [2.1]Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\");\n\n3. 3.\n\n\na‚Äã(t)‚ààC2‚Äã(\\[0,1\\])ùëéùë°superscriptùê∂201a(t)\\\\in C^{2}(\\[0,1\\]) with a‚Äã(0)>0ùëé00a(0)>0 and a‚Äã(t)‚â•0ùëéùë°0a(t)\\\\geq 0 for all t‚àà(0,1\\]ùë°01t\\\\in(0,1\\], and;\n\n4. 4.\n\n\nBtsubscriptùêµùë°B\\_{t} is a standard Brownian bridge process, independent of x0subscriptùë•0x\\_{0} and x1subscriptùë•1x\\_{1}.\n\n\nPathwise, ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is different from the stochastic interpolant introduced in Definition [2.1]Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"): in particular, xtùñΩsubscriptsuperscriptùë•ùñΩùë°x^{\\\\mathsf{d}}\\_{t} is continuous but not differentiable in time. At the same time, since Btsubscriptùêµùë°B\\_{t} is a Gaussian process with mean zero and variance ùîº‚ÄãBt2=t‚Äã(1‚àít)ùîºsubscriptsuperscriptùêµ2ùë°ùë°1ùë°{\\\\mathbb{E}}B^{2}\\_{t}=t(1-t), ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) has the same single-time statistics and time-dependent density œÅ‚Äã(t,x)ùúåùë°ùë•\\\\rho(t,x) as the stochastic interpolant ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) if we set Œ≥‚Äã(t)=2‚Äãa‚Äã(t)‚Äãt‚Äã(1‚àít)ùõæùë°2ùëéùë°ùë°1ùë°\\\\gamma(t)=\\\\sqrt{2a(t)t(1-t)}, i.e.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xt=I‚Äã(t,x0,x1)+2‚Äãa‚Äã(t)‚Äãt‚Äã(1‚àít)‚Äãzwith(x0,x1)‚àºŒΩ,z‚àºùñ≠‚Äã(0,Id),(x0,x1)‚üÇz.formulae-sequencesubscriptùë•ùë°ùêºùë°subscriptùë•0subscriptùë•12ùëéùë°ùë°1ùë°ùëßwithformulae-sequencesimilar-tosubscriptùë•0subscriptùë•1ùúàformulae-sequencesimilar-toùëßùñ≠0Idperpendicular-tosubscriptùë•0subscriptùë•1ùëßx\\_{t}=I(t,x\\_{0},x\\_{1})+\\\\sqrt{2a(t)t(1-t)}z\\\\quad\\\\text{with}\\\\quad(x\\_{0},x\\_{1})\\\\sim\\\\nu,\\ z\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}),\\ (x\\_{0},x\\_{1})\\\\perp z. |  | (3.2) |\n\nAs a result, ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [3.2]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) lead to the same generative models. Technically, it is easier to work with ( [3.2]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) than with ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), because it avoids the use of It√¥ calculus, and enables direct sampling of xtsubscriptùë•ùë°x\\_{t} using samples from œÅ0subscriptùúå0\\\\rho\\_{0}, œÅ1subscriptùúå1\\\\rho\\_{1}, and ùñ≠‚Äã(0,Id)ùñ≠0Id\\\\mathsf{N}(0,\\\\text{\\\\it Id}).\nHowever, ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) sheds light on some interesting properties of the generative models based on ( [3.2]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), i.e. stochastic interpolants with Œ≥‚Äã(t)=2‚Äãa‚Äã(t)‚Äãt‚Äã(1‚àít)ùõæùë°2ùëéùë°ùë°1ùë°\\\\gamma(t)=\\\\sqrt{2a(t)t(1-t)}.\nTo see why, we now re-derive the transport equation for the density œÅ‚Äã(t,x)ùúåùë°ùë•\\\\rho(t,x) shared by ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [3.2]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) using the relation ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\nFor simplicity, we focus on the case where a‚Äã(t)ùëéùë°a(t) is constant in time, i.e. we set a‚Äã(t)=a>0ùëéùë°ùëé0a(t)=a>0 in ( [3.1]In Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\nTo begin, recall that the Brownian Bridge Btsubscriptùêµùë°B\\_{t} can be expressed in terms of the Wiener process Wtsubscriptùëäùë°W\\_{t} as Bt=Wt‚àít‚ÄãWt=1subscriptùêµùë°subscriptùëäùë°ùë°subscriptùëäùë°1B\\_{t}=W\\_{t}-tW\\_{t=1}.\nMoreover, it satisfies the SDE (obtained, for example, by conditioning on Bt=1=0subscriptùêµùë°10B\\_{t=1}=0 via Doob‚Äôs h‚Ñéh-transform \\[ [18])\\]):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãBt=‚àíBt1‚àít‚Äãd‚Äãt+d‚ÄãWt,Bt=0=0.formulae-sequenceùëësubscriptùêµùë°subscriptùêµùë°1ùë°ùëëùë°ùëësubscriptùëäùë°subscriptùêµùë°00dB\\_{t}=-\\\\frac{B\\_{t}}{1-t}dt+dW\\_{t},\\\\qquad B\\_{t=0}=0. |  | (3.3) |\n\nA direct application of It√¥‚Äôs formula implies that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚Äãei‚Äãk‚ãÖxtùñΩ=i‚Äãk‚ãÖ(‚àÇtI‚Äã(t,x0,x1)‚àí2‚Äãa‚ÄãBt1‚àít)‚Äãei‚Äãk‚ãÖxtùñΩ‚Äãd‚Äãt‚àía‚Äã\\|k\\|2‚Äãei‚Äãk‚ãÖxtùñΩ‚Äãd‚Äãt+2‚Äãa‚Äãi‚Äãk‚ãÖd‚ÄãWt‚Äãei‚Äãk‚ãÖxtùñΩ.ùëësuperscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩ‚ãÖùëñùëòsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•12ùëésubscriptùêµùë°1ùë°superscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩùëëùë°ùëésuperscriptùëò2superscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩùëëùë°‚ãÖ2ùëéùëñùëòùëësubscriptùëäùë°superscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩde^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}=ik\\\\cdot\\\\Big{(}\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})-\\\\frac{\\\\sqrt{2a}B\\_{t}}{1-t}\\\\Big{)}e^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}dt-a\\|k\\|^{2}e^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}dt+\\\\sqrt{2a}ik\\\\cdot dW\\_{t}e^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}. |  | (3.4) |\n\nTaking the expectation of this expression and using the independence between (x0,x1)subscriptùë•0subscriptùë•1(x\\_{0},x\\_{1}) and Btsubscriptùêµùë°B\\_{t}, we deduce that\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtùîº‚Äãei‚Äãk‚ãÖxtùñΩ=i‚Äãk‚ãÖùîº‚Äã((‚àÇtI‚Äã(t,x0,x1)‚àí2‚Äãa‚ÄãBt1‚àít)‚Äãei‚Äãk‚ãÖxtùñΩ)‚àía‚Äã\\|k\\|2‚Äãùîº‚Äãei‚Äãk‚ãÖxtùñΩ.subscriptùë°ùîºsuperscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩ‚ãÖùëñùëòùîºsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•12ùëésubscriptùêµùë°1ùë°superscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩùëésuperscriptùëò2ùîºsuperscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩ\\\\partial\\_{t}{\\\\mathbb{E}}e^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}=ik\\\\cdot{\\\\mathbb{E}}\\\\Big{(}\\\\Big{(}\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})-\\\\frac{\\\\sqrt{2a}B\\_{t}}{1-t}\\\\Big{)}e^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}\\\\Big{)}-a\\|k\\|^{2}{\\\\mathbb{E}}e^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}. |  | (3.5) |\n\nSince for all fixed t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] we have Bt=dt‚Äã(1‚àít)‚Äãzsuperscriptùëësubscriptùêµùë°ùë°1ùë°ùëßB\\_{t}\\\\stackrel{{\\\\scriptstyle d}}{{=}}\\\\sqrt{t(1-t)}z and xtùñΩ=dxtsuperscriptùëësubscriptsuperscriptùë•ùñΩùë°subscriptùë•ùë°x^{\\\\mathsf{d}}\\_{t}\\\\stackrel{{\\\\scriptstyle d}}{{=}}x\\_{t} with xtsubscriptùë•ùë°x\\_{t} defined in ( [3.2]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), the time derivative ( [3.5]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can also be written as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtùîº‚Äãei‚Äãk‚ãÖxt=i‚Äãk‚ãÖùîº‚Äã((‚àÇtI‚Äã(t,x0,x1)‚àí2‚Äãa‚Äãt‚Äãz1‚àít)‚Äãei‚Äãk‚ãÖxt)‚àía‚Äã\\|k\\|2‚Äãùîº‚Äãei‚Äãk‚ãÖxt.subscriptùë°ùîºsuperscriptùëí‚ãÖùëñùëòsubscriptùë•ùë°‚ãÖùëñùëòùîºsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•12ùëéùë°ùëß1ùë°superscriptùëí‚ãÖùëñùëòsubscriptùë•ùë°ùëésuperscriptùëò2ùîºsuperscriptùëí‚ãÖùëñùëòsubscriptùë•ùë°\\\\partial\\_{t}{\\\\mathbb{E}}e^{ik\\\\cdot x\\_{t}}=ik\\\\cdot{\\\\mathbb{E}}\\\\Big{(}\\\\Big{(}\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})-\\\\frac{\\\\sqrt{2at}\\\\,z}{\\\\sqrt{1-t}}\\\\Big{)}e^{ik\\\\cdot x\\_{t}}\\\\Big{)}-a\\|k\\|^{2}{\\\\mathbb{E}}e^{ik\\\\cdot x\\_{t}}. |  | (3.6) |\n\nMoreover, since by definition of their probability density we have ùîº‚Äãei‚Äãk‚ãÖxtùñΩ=ùîº‚Äãei‚Äãk‚ãÖxt=‚à´‚Ñùdei‚Äãk‚ãÖx‚ÄãœÅ‚Äã(t,x)‚Äãùëëxùîºsuperscriptùëí‚ãÖùëñùëòsuperscriptsubscriptùë•ùë°ùñΩùîºsuperscriptùëí‚ãÖùëñùëòsubscriptùë•ùë°subscriptsuperscript‚Ñùùëësuperscriptùëí‚ãÖùëñùëòùë•ùúåùë°ùë•differential-dùë•{\\\\mathbb{E}}e^{ik\\\\cdot x\\_{t}^{\\\\mathsf{d}}}={\\\\mathbb{E}}e^{ik\\\\cdot x\\_{t}}=\\\\int\\_{{\\\\mathbb{R}}^{d}}e^{ik\\\\cdot x}\\\\rho(t,x)dx, we can deduce from ( [3.6]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) that œÅ‚Äã(t)ùúåùë°\\\\rho(t) satisfies\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtœÅ+‚àá‚ãÖ(u‚ÄãœÅ)=a‚ÄãŒî‚ÄãœÅ,subscriptùë°ùúå‚ãÖ‚àáùë¢ùúåùëéŒîùúå\\\\partial\\_{t}\\\\rho+\\\\nabla\\\\cdot(u\\\\rho)=a\\\\Delta\\\\rho, |  | (3.7) |\n\nwhere we defined\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | u‚Äã(t,x)=ùîº‚Äã(‚àÇtI‚Äã(t,x0,x1)‚àí2‚Äãa‚Äãt‚Äãz1‚àít\\|xt=x).ùë¢ùë°ùë•ùîºsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•1conditional2ùëéùë°ùëß1ùë°subscriptùë•ùë°ùë•u(t,x)={\\\\mathbb{E}}\\\\Big{(}\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})-\\\\frac{\\\\sqrt{2at}\\\\,z}{\\\\sqrt{1-t}}\\\\Big{\\|}x\\_{t}=x\\\\Big{)}. |  | (3.8) |\n\nFor the interpolant xtsubscriptùë•ùë°x\\_{t} in ( [3.2]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), we have from the definitions of bùëèb and sùë†s in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.14]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) that\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | b‚Äã(t,x)ùëèùë°ùë•\\\\displaystyle b(t,x) | =ùîº‚Äã(‚àÇtI‚Äã(t,x0,x1)+a‚Äã(1‚àí2‚Äãt)‚Äãz2‚Äãt‚Äã(1‚àít)\\|xt=x),absentùîºsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•1conditionalùëé12ùë°ùëß2ùë°1ùë°subscriptùë•ùë°ùë•\\\\displaystyle={\\\\mathbb{E}}\\\\Big{(}\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})+\\\\frac{a(1-2t)z}{\\\\sqrt{2t(1-t)}}\\\\Big{\\|}x\\_{t}=x\\\\Big{)}, |  | (3.9) |\n|  | s‚Äã(t,x)ùë†ùë°ùë•\\\\displaystyle s(t,x) | =‚àálog‚Å°œÅ‚Äã(t,x)=‚àí12‚Äãa‚Äãt‚Äã(1‚àít)‚Äãùîº‚Äã(z\\|xt=x),absent‚àáùúåùë°ùë•12ùëéùë°1ùë°ùîºconditionalùëßsubscriptùë•ùë°ùë•\\\\displaystyle=\\\\nabla\\\\log\\\\rho(t,x)=-\\\\frac{1}{\\\\sqrt{2at(1-t)}}{\\\\mathbb{E}}(z\\|x\\_{t}=x), |  |\n\nAs a result, u‚àís=bùë¢ùë†ùëèu-s=b and ( [3.7]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can also be written as the TE ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) using Œî‚ÄãœÅ=‚àá‚ãÖ(s‚ÄãœÅ)Œîùúå‚ãÖ‚àáùë†ùúå\\\\Delta\\\\rho=\\\\nabla\\\\cdot(s\\\\rho).\n\nRemarkably, the drift uùë¢u defined in ( [3.8]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) remains non-singular for all t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] (including t=0ùë°0t=0) even if œÅ0subscriptùúå0\\\\rho\\_{0} is replaced by a point mass at x0subscriptùë•0x\\_{0}; by contrast, both bùëèb and sùë†s are singular at t=0ùë°0t=0 in this case.\nHence, the SDE associated with the FPE ( [3.7]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) provides us with a generative model that samples œÅ1subscriptùúå1\\\\rho\\_{1} from a base measure concentrated at a single x0subscriptùë•0x\\_{0} (i.e. such that the density œÅ0subscriptùúå0\\\\rho\\_{0} is replaced by a point mass measure at x=x0ùë•subscriptùë•0x=x\\_{0}).\nWe formalize this result in the following theorem:\n\n{restatable}\n\ntheoremdiffgen\n\nAssume that I‚Äã(t,x0,x1)=x0ùêºùë°subscriptùë•0subscriptùë•1subscriptùë•0I(t,x\\_{0},x\\_{1})=x\\_{0} for t‚àà\\[0,Œ¥\\]ùë°0ùõøt\\\\in\\[0,\\\\delta\\] with some Œ¥‚àà(0,1\\]ùõø01\\\\delta\\\\in(0,1\\].\nGiven any a>0ùëé0a>0, let\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | uùñΩ‚Äã(t,x,x0)=ùîºx1,z‚Äã(‚àÇtI‚Äã(t,x0,x1)‚àí2‚Äãa‚Äãt‚Äãz1‚àít\\|xt=x),superscriptùë¢ùñΩùë°ùë•subscriptùë•0subscriptùîºsubscriptùë•1ùëßsubscriptùë°ùêºùë°subscriptùë•0subscriptùë•1conditional2ùëéùë°ùëß1ùë°subscriptùë•ùë°ùë•u^{\\\\mathsf{d}}(t,x,x\\_{0})={\\\\mathbb{E}}\\_{x\\_{1},z}\\\\Big{(}\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})-\\\\frac{\\\\sqrt{2at}\\\\,z}{\\\\sqrt{1-t}}\\\\Big{\\|}x\\_{t}=x\\\\Big{)}, |  | (3.10) |\n\nwhere xtsubscriptùë•ùë°x\\_{t} is given by ( [3.2]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and where ùîºx1,z(‚ãÖ\\|xt=x){\\\\mathbb{E}}\\_{x\\_{1},z}(\\\\cdot\\|x\\_{t}=x) denotes an expectation over x1‚àºœÅ1‚üÇz‚àºùñ≠‚Äã(0,Id)similar-tosubscriptùë•1subscriptùúå1perpendicular-toùëßsimilar-toùñ≠0Idx\\_{1}\\\\sim\\\\rho\\_{1}\\\\perp z\\\\sim\\\\mathsf{N}(0,\\\\text{\\\\it Id}) conditioned on xt=xsubscriptùë•ùë°ùë•x\\_{t}=x with x0‚àà‚Ñùdsubscriptùë•0superscript‚Ñùùëëx\\_{0}\\\\in{\\\\mathbb{R}}^{d} fixed.\nThen uùñΩ‚Äã(‚ãÖ,‚ãÖ,x0)‚ààC0‚Äã(\\[0,1\\];(Cp‚Äã(‚Ñùd))d)superscriptùë¢ùñΩ‚ãÖ‚ãÖsubscriptùë•0superscriptùê∂001superscriptsuperscriptùê∂ùëùsuperscript‚Ñùùëëùëëu^{\\\\mathsf{d}}(\\\\cdot,\\\\cdot,x\\_{0})\\\\in C^{0}(\\[0,1\\];(C^{p}({\\\\mathbb{R}}^{d}))^{d}) for any p‚àà‚Ñïùëù‚Ñïp\\\\in{\\\\mathbb{N}} and x0‚àà‚Ñùdsubscriptùë•0superscript‚Ñùùëëx\\_{0}\\\\in{\\\\mathbb{R}}^{d}.\nMoreover, the solutions to the forward SDE\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | d‚ÄãXtùñΩ=uùñΩ‚Äã(t,XtùñΩ,x0)‚Äãd‚Äãt+2‚Äãa‚Äãd‚ÄãWt,Xt=0ùñΩ=x0,formulae-sequenceùëësuperscriptsubscriptùëãùë°ùñΩsuperscriptùë¢ùñΩùë°superscriptsubscriptùëãùë°ùñΩsubscriptùë•0ùëëùë°2ùëéùëësubscriptùëäùë°superscriptsubscriptùëãùë°0ùñΩsubscriptùë•0dX\\_{t}^{\\\\mathsf{d}}=u^{\\\\mathsf{d}}(t,X\\_{t}^{\\\\mathsf{d}},x\\_{0})dt+\\\\sqrt{2a}\\\\,dW\\_{t},\\\\qquad X\\_{t=0}^{\\\\mathsf{d}}=x\\_{0}, |  | (3.11) |\n\nare such that Xt=1ùñΩ‚àºœÅ1similar-tosubscriptsuperscriptùëãùñΩùë°1subscriptùúå1X^{\\\\mathsf{d}}\\_{t=1}\\\\sim\\\\rho\\_{1}.\n\nNote that the additional assumption we make on I‚Äã(t,x0,x1)ùêºùë°subscriptùë•0subscriptùë•1I(t,x\\_{0},x\\_{1}) is consistent with the requirements in Definition [2.1]Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and Assumption [2.5]Assumption 2.5. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"): this additional assumption is made for simplicity and can probably be relaxed to ‚àÇtI‚Äã(t=0,x0,x1)=0subscriptùë°ùêºùë°0subscriptùë•0subscriptùë•10\\\\partial\\_{t}I(t=0,x\\_{0},x\\_{1})=0.\n\nThe proof of Theorem [3.1]Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") is given in Appendix [B.5]B.5 Proof of Theorem 3.1 ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\nIt relies on the calculations that led to ( [3.8]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), along with the observation that at t=0ùë°0t=0 and x=x0ùë•subscriptùë•0x=x\\_{0},\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | uùñΩ‚Äã(t=0,x0,x0)=ùîºx1‚Äã(‚àÇtI‚Äã(t=0,x0,x1)),superscriptùë¢ùñΩùë°0subscriptùë•0subscriptùë•0subscriptùîºsubscriptùë•1subscriptùë°ùêºùë°0subscriptùë•0subscriptùë•1u^{\\\\mathsf{d}}(t=0,x\\_{0},x\\_{0})={\\\\mathbb{E}}\\_{x\\_{1}}\\\\left(\\\\partial\\_{t}I(t=0,x\\_{0},x\\_{1})\\\\right), |  | (3.12) |\n\nwhereas at t=1ùë°1t=1 and any x‚àà‚Ñùdùë•superscript‚Ñùùëëx\\\\in{\\\\mathbb{R}}^{d}, we have\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | uùñΩ‚Äã(t=1,x,x0)=‚àÇtI‚Äã(t=1,x0,x)+2‚Äãa‚Äã‚àálog‚Å°œÅ1‚Äã(x),superscriptùë¢ùñΩùë°1ùë•subscriptùë•0subscriptùë°ùêºùë°1subscriptùë•0ùë•2ùëé‚àásubscriptùúå1ùë•u^{\\\\mathsf{d}}(t=1,x,x\\_{0})=\\\\partial\\_{t}I(t=1,x\\_{0},x)+2a\\\\nabla\\\\log\\\\rho\\_{1}(x), |  | (3.13) |\n\nwhich are both well-defined.\nTo put the result in Theorem ( [3.1]Definition 3.1 (Diffusive interpolant). ‚Ä£ 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) in perspective, observe that no probability flow ODE with b‚ààC0‚Äã(\\[0,1\\];(Cp‚Äã(‚Ñùd))d)ùëèsuperscriptùê∂001superscriptsuperscriptùê∂ùëùsuperscript‚Ñùùëëùëëb\\\\in C^{0}(\\[0,1\\];(C^{p}({\\\\mathbb{R}}^{d}))^{d}) can achieve the same feat as the diffusion in ( [3.11]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\nThis is because the solutions of such an ODE are unique, and therefore can only map x0subscriptùë•0x\\_{0} onto a single point at time t=1ùë°1t=1.\nTo the best of our knowledge, ( [3.11]In 3.1 Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is the first instance of an SDE that maps a point mass at x0subscriptùë•0x\\_{0} into a density œÅ1subscriptùúå1\\\\rho\\_{1} in finite time, and whose drift can be estimated by quadratic regression.\nIndeed, uùñΩ‚Äã(t,x,x0)superscriptùë¢ùñΩùë°ùë•subscriptùë•0u^{\\\\mathsf{d}}(t,x,x\\_{0}) is the unique minimizer of the objective function\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíuùñΩ‚Äã\\[u^ùñΩ\\]=‚à´01ùîºx1,z‚Äã(\\|u^d‚Äã(t,xt,x0)\\|2‚àí2‚Äã(‚àÇtI‚Äã(t,x0,x1)‚àí2‚Äãa‚Äãt‚Äãz(1‚àít))‚ãÖu^d‚Äã(t,xt,x0))‚Äãùëët.subscript‚Ñísuperscriptùë¢ùñΩdelimited-\\[\\]superscript^ùë¢ùñΩsuperscriptsubscript01subscriptùîºsubscriptùë•1ùëßsuperscriptsuperscript^ùë¢ùëëùë°subscriptùë•ùë°subscriptùë•02‚ãÖ2subscriptùë°ùêºùë°subscriptùë•0subscriptùë•12ùëéùë°ùëß1ùë°superscript^ùë¢ùëëùë°subscriptùë•ùë°subscriptùë•0differential-dùë°\\\\mathcal{L}\\_{u^{\\\\mathsf{d}}}\\[\\\\hat{u}^{\\\\mathsf{d}}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\_{x\\_{1},z}\\\\left(\\|\\\\hat{u}^{d}(t,x\\_{t},x\\_{0})\\|^{2}-2\\\\Big{(}\\\\partial\\_{t}I(t,x\\_{0},x\\_{1})-\\\\frac{\\\\sqrt{2at}z}{\\\\sqrt{(1-t)}}\\\\Big{)}\\\\cdot\\\\hat{u}^{d}(t,x\\_{t},x\\_{0})\\\\right)dt. |  | (3.14) |\n\n###### Remark 3.2(Doob h-transform).\n\nIn principle, the approach above can be generalized to any stochastic bridge Btx0,x1superscriptsubscriptùêµùë°subscriptùë•0subscriptùë•1B\\_{t}^{x\\_{0},x\\_{1}}, which can be obtained from any SDE by conditioning its solution to satisfy Bt=0x0,x1=x0superscriptsubscriptùêµùë°0subscriptùë•0subscriptùë•1subscriptùë•0B\\_{t=0}^{x\\_{0},x\\_{1}}=x\\_{0} and Bt=1x0,x1=x1superscriptsubscriptùêµùë°1subscriptùë•0subscriptùë•1subscriptùë•1B\\_{t=1}^{x\\_{0},x\\_{1}}=x\\_{1} with the help of Doob‚Äôs h‚Ñéh-transform. In general, however, this construction cannot be made explicit, because the h‚Ñéh-transform is typically not available analytically. One approach would be to learn it, as proposed e.g. in \\[ [51]), [8])\\], but this adds an additional layer of difficulty that is avoided by the approach above.\n\n### 3.2 One-sided interpolants for Gaussian œÅ0subscriptùúå0\\\\rho\\_{0}\n\nA common choice of base density for generative modeling in the absence of prior information is to choose œÅ0=ùñ≠‚Äã(0,Id)subscriptùúå0ùñ≠0Id\\\\rho\\_{0}=\\\\mathsf{N}(0,\\\\text{\\\\it Id}).\nIn this setting, we can group the effect of the latent variable zùëßz with x0subscriptùë•0x\\_{0}.\nThis leads to a simpler type of stochastic interpolant that, in particular, will enables us to instantiate score-based diffusion within our general framework (see Section [3.4]Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\n\n###### Definition 3.3(One-sided stochastic interpolant).\n\nGiven a probability density function œÅ1:‚Ñùd‚Üí‚Ñù‚â•0:subscriptùúå1‚Üísuperscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho\\_{1}:{{\\\\mathbb{R}}^{d}}\\\\rightarrow{\\\\mathbb{R}}\\_{\\\\geq 0}, a one-sided stochastic interpolant between ùñ≠‚Äã(0,Id)ùñ≠0Id{\\\\sf N}(0,\\\\text{\\\\it Id}) and œÅ1subscriptùúå1\\\\rho\\_{1} is a stochastic process xtùóàùóåsubscriptsuperscriptùë•ùóàùóåùë°x^{\\\\mathsf{os}}\\_{t}\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xtùóàùóå=Œ±‚Äã(t)‚Äãz+J‚Äã(t,x1),t‚àà\\[0,1\\]formulae-sequencesubscriptsuperscriptùë•ùóàùóåùë°ùõºùë°ùëßùêΩùë°subscriptùë•1ùë°01x^{\\\\mathsf{os}}\\_{t}=\\\\alpha(t)z+J(t,x\\_{1}),\\\\qquad t\\\\in\\[0,1\\] |  | (3.15) |\n\nthat fulfills the requirements:\n\n1. 1.\n\n\nJ‚ààC2‚Äã(\\[0,1\\],C2‚Äã(‚Ñùd)d)ùêΩsuperscriptùê∂201superscriptùê∂2superscriptsuperscript‚ÑùùëëùëëJ\\\\in C^{2}(\\[0,1\\],C^{2}({\\\\mathbb{R}}^{d})^{d}) satisfies the boundary conditions J‚Äã(0,x1)=0ùêΩ0subscriptùë•10J(0,x\\_{1})=0 and J‚Äã(1,x1)=x1ùêΩ1subscriptùë•1subscriptùë•1J(1,x\\_{1})=x\\_{1}.\n\n2. 2.\n\n\nx1subscriptùë•1x\\_{1} and zùëßz are independent random variables drawn from œÅ1subscriptùúå1\\\\rho\\_{1} and ùñ≠‚Äã(0,Id)ùñ≠0Id{\\\\sf N}(0,\\\\text{\\\\it Id}), respectively.\n\n3. 3.\n\n\nŒ±:\\[0,1\\]‚Üí‚Ñù:ùõº‚Üí01‚Ñù\\\\alpha:\\[0,1\\]\\\\to{\\\\mathbb{R}} satisfies Œ±‚Äã(0)=1ùõº01\\\\alpha(0)=1, Œ±‚Äã(1)=0ùõº10\\\\alpha(1)=0, Œ±‚Äã(t)>0ùõºùë°0\\\\alpha(t)>0 for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1), and Œ±2‚ààC2‚Äã(\\[0,1\\])superscriptùõº2superscriptùê∂201\\\\alpha^{2}\\\\in C^{2}(\\[0,1\\]).\\\n\\\n\\\nBy construction, xt=0ùóàùóå=z‚àºùñ≠‚Äã(0,Id)subscriptsuperscriptùë•ùóàùóåùë°0ùëßsimilar-toùñ≠0Idx^{\\\\mathsf{os}}\\_{t=0}=z\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}) and xt=1ùóàùóå=x1‚àºœÅ1subscriptsuperscriptùë•ùóàùóåùë°1subscriptùë•1similar-tosubscriptùúå1x^{\\\\mathsf{os}}\\_{t=1}=x\\_{1}\\\\sim\\\\rho\\_{1}, so that the distribution of the stochastic process xtùóàùóåsubscriptsuperscriptùë•ùóàùóåùë°x^{\\\\mathsf{os}}\\_{t} bridges ùñ≠‚Äã(0,Id)ùñ≠0Id{\\\\sf N}(0,\\\\text{\\\\it Id}) and œÅ1subscriptùúå1\\\\rho\\_{1}. It is easy to see that the one-sided stochastic interpolant defined in ( [3.15]In Definition 3.3 (One-sided stochastic interpolant). ‚Ä£ 3.2 One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) will have the same density as the stochastic interpolant defined in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) if we set I‚Äã(t,x0,x1)=Jt‚Äã(x1)+Œ¥‚Äã(t)‚Äãx0ùêºùë°subscriptùë•0subscriptùë•1subscriptùêΩùë°subscriptùë•1ùõøùë°subscriptùë•0I(t,x\\_{0},x\\_{1})=J\\_{t}(x\\_{1})+\\\\delta(t)x\\_{0} and take Œ¥2‚Äã(t)+Œ≥2‚Äã(t)=Œ±2‚Äã(t)superscriptùõø2ùë°superscriptùõæ2ùë°superscriptùõº2ùë°\\\\delta^{2}(t)+\\\\gamma^{2}(t)=\\\\alpha^{2}(t). Restricting to this case, our earlier theoretical results apply where the velocity field bùëèb defined in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) becomes\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t,x)=ùîº‚Äã(Œ±Àô‚Äã(t)‚Äãz+‚àÇtJ‚Äã(t,x1)\\|xtùóàùóå=x),ùëèùë°ùë•ùîºÀôùõºùë°ùëßconditionalsubscriptùë°ùêΩùë°subscriptùë•1subscriptsuperscriptùë•ùóàùóåùë°ùë•b(t,x)={\\\\mathbb{E}}(\\\\dot{\\\\alpha}(t)z+\\\\partial\\_{t}J(t,x\\_{1})\\|x^{\\\\mathsf{os}}\\_{t}=x), |  | (3.16) |\\\n\\\nand the quadratic objective in ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) becomes\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñíb‚Äã\\[b^\\]=‚à´01ùîº‚Äã(12‚Äã\\|b^‚Äã(t,xtùóàùóå)\\|2‚àí(Œ±Àô‚Äã(t)‚Äãz+‚àÇtJ‚Äã(t,x1))‚ãÖb^‚Äã(t,xtùóàùóå))‚Äãùëët.subscript‚Ñíùëèdelimited-\\[\\]^ùëèsuperscriptsubscript01ùîº12superscript^ùëèùë°subscriptsuperscriptùë•ùóàùóåùë°2‚ãÖÀôùõºùë°ùëßsubscriptùë°ùêΩùë°subscriptùë•1^ùëèùë°subscriptsuperscriptùë•ùóàùóåùë°differential-dùë°\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{b}(t,x^{\\\\mathsf{os}}\\_{t})\\|^{2}-\\\\left(\\\\dot{\\\\alpha}(t)z+\\\\partial\\_{t}J(t,x\\_{1})\\\\right)\\\\cdot\\\\hat{b}(t,x^{\\\\mathsf{os}}\\_{t})\\\\right)dt. |  | (3.17) |\\\n\\\nIn the expression above, xtùóàùóåsubscriptsuperscriptùë•ùóàùóåùë°x^{\\\\mathsf{os}}\\_{t} is given by ( [3.15]In Definition 3.3 (One-sided stochastic interpolant). ‚Ä£ 3.2 One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the expectation ùîºùîº{\\\\mathbb{E}} is taken independently over x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1} and z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}). Similarly, the score is given by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | s‚Äã(t,x)=‚àíŒ±‚àí1‚Äã(t)‚ÄãŒ∑z‚Äã(t,x),Œ∑z‚Äã(t,x)=ùîº‚Äã(z\\|xtùóàùóå=x),formulae-sequenceùë†ùë°ùë•superscriptùõº1ùë°subscriptùúÇùëßùë°ùë•subscriptùúÇùëßùë°ùë•ùîºconditionalùëßsubscriptsuperscriptùë•ùóàùóåùë°ùë•s(t,x)=-\\\\alpha^{-1}(t)\\\\eta\\_{z}(t,x),\\\\qquad\\\\eta\\_{z}(t,x)={\\\\mathbb{E}}(z\\|x^{\\\\mathsf{os}}\\_{t}=x), |  | (3.18) |\\\n\\\nwhere Œ∑z‚Äã(t,x)subscriptùúÇùëßùë°ùë•\\\\eta\\_{z}(t,x) is the equivalent of the denoiser defined in ( [2.17]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). These functions are the unique minimizers of the objectives\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñís‚Äã\\[s^\\]=‚à´01ùîº‚Äã(12‚Äã\\|s^‚Äã(t,xtùóàùóå)\\|2+Œ≥‚àí1‚Äã(t)‚Äãz‚ãÖs^‚Äã(t,xtùóàùóå))‚Äãùëët,subscript‚Ñíùë†delimited-\\[\\]^ùë†superscriptsubscript01ùîº12superscript^ùë†ùë°subscriptsuperscriptùë•ùóàùóåùë°2‚ãÖsuperscriptùõæ1ùë°ùëß^ùë†ùë°subscriptsuperscriptùë•ùóàùóåùë°differential-dùë°\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{s}(t,x^{\\\\mathsf{os}}\\_{t})\\|^{2}+\\\\gamma^{-1}(t)z\\\\cdot\\\\hat{s}(t,x^{\\\\mathsf{os}}\\_{t})\\\\right)dt, |  | (3.19) |\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚ÑíŒ∑z‚Äã\\[Œ∑^z\\]=‚à´01ùîº‚Äã(12‚Äã\\|Œ∑^z‚Äã(t,xtùóàùóå)\\|2‚àíz‚ãÖŒ∑^z‚Äã(t,xtùóàùóå))‚Äãùëët.subscript‚ÑísubscriptùúÇùëßdelimited-\\[\\]subscript^ùúÇùëßsuperscriptsubscript01ùîº12superscriptsubscript^ùúÇùëßùë°subscriptsuperscriptùë•ùóàùóåùë°2‚ãÖùëßsubscript^ùúÇùëßùë°subscriptsuperscriptùë•ùóàùóåùë°differential-dùë°\\\\mathcal{L}\\_{\\\\eta\\_{z}}\\[\\\\hat{\\\\eta}\\_{z}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}\\_{z}(t,x^{\\\\mathsf{os}}\\_{t})\\|^{2}-z\\\\cdot\\\\hat{\\\\eta}\\_{z}(t,x^{\\\\mathsf{os}}\\_{t})\\\\right)dt. |  | (3.20) |\\\n\\\nMoreover, we can weaken Assumption [2.5]Assumption 2.5. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") to the following requirement:\\\n\\\n###### Assumption 3.4.\\\n\\\nThe density œÅ1‚ààC2‚Äã(‚Ñùd)subscriptùúå1superscriptùê∂2superscript‚Ñùùëë\\\\rho\\_{1}\\\\in C^{2}({\\\\mathbb{R}}^{d}), satisfies œÅ1‚Äã(x)>0subscriptùúå1ùë•0\\\\rho\\_{1}(x)>0 for all x‚àà‚Ñùdùë•superscript‚Ñùùëëx\\\\in{\\\\mathbb{R}}^{d}, and:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚à´‚Ñùd\\|‚àálog‚Å°œÅ1‚Äã(x)\\|2‚ÄãœÅ1‚Äã(x)‚Äãùëëx<‚àû.subscriptsuperscript‚Ñùùëësuperscript‚àásubscriptùúå1ùë•2subscriptùúå1ùë•differential-dùë•\\\\int\\_{{\\\\mathbb{R}}^{d}}\\|\\\\nabla\\\\log\\\\rho\\_{1}(x)\\|^{2}\\\\rho\\_{1}(x)dx<\\\\infty. |  | (3.21) |\\\n\\\nThe function JùêΩJ satisfies\\\n\\\n|     |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n|  |  | ‚àÉC1<‚àû::subscriptùê∂1absent\\\\displaystyle\\\\exists C\\_{1}<\\\\infty\\ :\\ |  | \\|‚àÇtJ‚Äã(t,x1)\\|‚â§C1‚Äã\\|x1\\|subscriptùë°ùêΩùë°subscriptùë•1subscriptùê∂1subscriptùë•1\\\\displaystyle\\|\\\\partial\\_{t}J(t,x\\_{1})\\|\\\\leq C\\_{1}\\|x\\_{1}\\|\\\\quad |  | for all(t,x1)‚àà\\[0,1\\]√ó‚Ñùd,for allùë°subscriptùë•101superscript‚Ñùùëë\\\\displaystyle\\\\text{for all}\\\\quad(t,x\\_{1})\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}, |  | (3.22) |\\\n\\\nand\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àÉM1,M2<‚àû:ùîº‚Äã\\[\\|‚àÇtJ‚Äã(t,x1)\\|4\\]‚â§M1;ùîº‚Äã\\[\\|‚àÇt2J‚Äã(t,x1)\\|2\\]‚â§M2,for allt‚àà\\[0,1\\],formulae-sequencesubscriptùëÄ1subscriptùëÄ2:ùîºdelimited-\\[\\]superscriptsubscriptùë°ùêΩùë°subscriptùë•14subscriptùëÄ1formulae-sequenceùîºdelimited-\\[\\]superscriptsubscriptsuperscript2ùë°ùêΩùë°subscriptùë•12subscriptùëÄ2for allùë°01\\\\exists M\\_{1},M\\_{2}<\\\\infty\\ \\ :\\ \\ {\\\\mathbb{E}}\\\\big{\\[}\\|\\\\partial\\_{t}J(t,x\\_{1})\\|^{4}\\\\big{\\]}\\\\leq M\\_{1};\\\\quad{\\\\mathbb{E}}\\\\big{\\[}\\|\\\\partial^{2}\\_{t}J(t,x\\_{1})\\|^{2}\\\\big{\\]}\\\\leq M\\_{2},\\\\quad\\\\text{for all}\\\\quad t\\\\in\\[0,1\\], |  | (3.23) |\\\n\\\nwhere the expectation is taken over x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1}.\\\n\\\n###### Remark 3.5.\\\n\\\nThe construction above can easily be generalized to the case where œÅ0=ùñ≠‚Äã(0,C0)subscriptùúå0ùñ≠0subscriptùê∂0\\\\rho\\_{0}=\\\\mathsf{N}(0,C\\_{0}) with C0subscriptùê∂0C\\_{0} a positive-definite matrix. Without loss of generality, we can then assume that C0subscriptùê∂0C\\_{0} can be represented as C0=œÉ0‚ÄãœÉ0ùñ≥subscriptùê∂0subscriptùúé0superscriptsubscriptùúé0ùñ≥C\\_{0}=\\\\sigma\\_{0}\\\\sigma\\_{0}^{\\\\mathsf{T}} where œÉ0subscriptùúé0\\\\sigma\\_{0} is a lower-triangular matrix and replace ( [3.15]In Definition 3.3 (One-sided stochastic interpolant). ‚Ä£ 3.2 One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | xtùóàùóå=Œ±‚Äã(t)‚ÄãœÉ0‚Äãz+J‚Äã(t,x1),t‚àà\\[0,1\\],formulae-sequencesubscriptsuperscriptùë•ùóàùóåùë°ùõºùë°subscriptùúé0ùëßùêΩùë°subscriptùë•1ùë°01x^{\\\\mathsf{os}}\\_{t}=\\\\alpha(t)\\\\sigma\\_{0}z+J(t,x\\_{1}),\\\\qquad t\\\\in\\[0,1\\], |  | (3.24) |\\\n\\\nwith JùêΩJ and Œ±ùõº\\\\alpha satisfying the conditions listed in Definition [3.3]Definition 3.3 (One-sided stochastic interpolant). ‚Ä£ 3.2 One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and where z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}).\\\n\\\n### 3.3 Mirror interpolants\\\n\\\nAnother practically relevant setting is when the base and the target are the same density œÅ1subscriptùúå1\\\\rho\\_{1}. In this setting we can define a stochastic interpolant as:\\\n\\\n###### Definition 3.6(Mirror stochastic interpolant).\\\n\\\nGiven a probability density function œÅ1:‚Ñùd‚Üí‚Ñù‚â•0:subscriptùúå1‚Üísuperscript‚Ñùùëësubscript‚Ñùabsent0\\\\rho\\_{1}:{{\\\\mathbb{R}}^{d}}\\\\rightarrow{\\\\mathbb{R}}\\_{\\\\geq 0}, a mirror stochastic interpolant between œÅ0subscriptùúå0\\\\rho\\_{0} and itself is a stochastic process xtùóÜùóÇùóãsubscriptsuperscriptùë•ùóÜùóÇùóãùë°x^{\\\\mathsf{mir}}\\_{t}\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | xtùóÜùóÇùóã=K‚Äã(t,x1)+Œ≥‚Äã(t)‚Äãz,t‚àà\\[0,1\\]formulae-sequencesubscriptsuperscriptùë•ùóÜùóÇùóãùë°ùêæùë°subscriptùë•1ùõæùë°ùëßùë°01x^{\\\\mathsf{mir}}\\_{t}=K(t,x\\_{1})+\\\\gamma(t)z,\\\\qquad t\\\\in\\[0,1\\] |  | (3.25) |\\\n\\\nthat fulfills the requirements:\\\n\\\n1. 1.\\\n\\\n\\\nK‚ààC2‚Äã(\\[0,1\\],C2‚Äã(‚Ñùd)d)ùêæsuperscriptùê∂201superscriptùê∂2superscriptsuperscript‚ÑùùëëùëëK\\\\in C^{2}(\\[0,1\\],C^{2}({\\\\mathbb{R}}^{d})^{d}) satisfies the boundary conditions K‚Äã(0,x1)=x1ùêæ0subscriptùë•1subscriptùë•1K(0,x\\_{1})=x\\_{1} and K‚Äã(1,x1)=x1ùêæ1subscriptùë•1subscriptùë•1K(1,x\\_{1})=x\\_{1}.\\\n\\\n2. 2.\\\n\\\n\\\nx1subscriptùë•1x\\_{1} and zùëßz are random variables drawn independently from œÅ1subscriptùúå1\\\\rho\\_{1} and ùñ≠‚Äã(0,Id)ùñ≠0Id{\\\\sf N}(0,\\\\text{\\\\it Id}), respectively.\\\n\\\n3. 3.\\\n\\\n\\\nŒ≥:\\[0,1\\]‚Üí‚Ñù:ùõæ‚Üí01‚Ñù\\\\gamma:\\[0,1\\]\\\\to{\\\\mathbb{R}} satisfies Œ≥‚Äã(0)=Œ≥‚Äã(1)=0ùõæ0ùõæ10\\\\gamma(0)=\\\\gamma(1)=0, Œ≥‚Äã(t)>0ùõæùë°0\\\\gamma(t)>0 for all t‚àà(0,1)ùë°01t\\\\in(0,1), and Œ≥2‚ààC1‚Äã(\\[0,1\\])superscriptùõæ2superscriptùê∂101\\\\gamma^{2}\\\\in C^{1}(\\[0,1\\]).\\\n\\\n\\\nBy construction, xt=0ùóÜùóÇùóã=xt=1ùóÜùóÇùóã=x1‚àºœÅ1subscriptsuperscriptùë•ùóÜùóÇùóãùë°0subscriptsuperscriptùë•ùóÜùóÇùóãùë°1subscriptùë•1similar-tosubscriptùúå1x^{\\\\mathsf{mir}}\\_{t=0}=x^{\\\\mathsf{mir}}\\_{t=1}=x\\_{1}\\\\sim\\\\rho\\_{1}, so that the distribution of the stochastic process xtùóÜùóÇùóãsubscriptsuperscriptùë•ùóÜùóÇùóãùë°x^{\\\\mathsf{mir}}\\_{t} bridges œÅ1subscriptùúå1\\\\rho\\_{1} to itself.\\\nNote that a valid choice is K‚Äã(t,x1)=Œ±‚Äã(t)‚Äãx1ùêæùë°subscriptùë•1ùõºùë°subscriptùë•1K(t,x\\_{1})=\\\\alpha(t)x\\_{1} with Œ±‚Äã(0)=Œ±‚Äã(1)=1ùõº0ùõº11\\\\alpha(0)=\\\\alpha(1)=1 (e.g. Œ±‚Äã(t)=1ùõºùë°1\\\\alpha(t)=1): in this case, mirror interpolants are related to denoisers, as will be discussed in Section [5.2]Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\\nIt is easy to see that our earlier theoretical results apply where the velocity field bùëèb defined in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) becomes\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t,x)=ùîº‚Äã(‚àÇtK‚Äã(t,x1)+Œ≥Àô‚Äã(t)‚Äãz\\|xtùóÜùóÇùóã=x),ùëèùë°ùë•ùîºsubscriptùë°ùêæùë°subscriptùë•1conditionalÀôùõæùë°ùëßsubscriptsuperscriptùë•ùóÜùóÇùóãùë°ùë•b(t,x)={\\\\mathbb{E}}(\\\\partial\\_{t}K(t,x\\_{1})+\\\\dot{\\\\gamma}(t)z\\|x^{\\\\mathsf{mir}}\\_{t}=x), |  | (3.26) |\\\n\\\nand the quadratic objective in ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) becomes\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñíb‚Äã\\[b^\\]=‚à´01ùîº‚Äã(12‚Äã\\|b^‚Äã(t,xtùóÜùóÇùóã)\\|2‚àí(‚àÇtK‚Äã(t,x1)+Œ≥Àô‚Äã(t)‚Äãz)‚ãÖb^‚Äã(t,xtùóÜùóÇùóã))‚Äãùëët.subscript‚Ñíùëèdelimited-\\[\\]^ùëèsuperscriptsubscript01ùîº12superscript^ùëèùë°subscriptsuperscriptùë•ùóÜùóÇùóãùë°2‚ãÖsubscriptùë°ùêæùë°subscriptùë•1Àôùõæùë°ùëß^ùëèùë°subscriptsuperscriptùë•ùóÜùóÇùóãùë°differential-dùë°\\\\mathcal{L}\\_{b}\\[\\\\hat{b}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{b}(t,x^{\\\\mathsf{mir}}\\_{t})\\|^{2}-\\\\left(\\\\partial\\_{t}K(t,x\\_{1})+\\\\dot{\\\\gamma}(t)z\\\\right)\\\\cdot\\\\hat{b}(t,x^{\\\\mathsf{mir}}\\_{t})\\\\right)dt. |  | (3.27) |\\\n\\\nIn the expression above, xtùóÜùóÇùóãsubscriptsuperscriptùë•ùóÜùóÇùóãùë°x^{\\\\mathsf{mir}}\\_{t} is given by ( [3.25]In Definition 3.6 (Mirror stochastic interpolant). ‚Ä£ 3.3 Mirror interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the expectation ùîºùîº{\\\\mathbb{E}} is taken independently over x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1} and z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}). Similarly, the score is given by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | s‚Äã(t,x)=‚àíŒ≥‚àí1‚Äã(t)‚ÄãŒ∑z‚Äã(t,x),Œ∑z‚Äã(t,x)=ùîº‚Äã(z\\|xtùóÜùóÇùóã=x),formulae-sequenceùë†ùë°ùë•superscriptùõæ1ùë°subscriptùúÇùëßùë°ùë•subscriptùúÇùëßùë°ùë•ùîºconditionalùëßsubscriptsuperscriptùë•ùóÜùóÇùóãùë°ùë•s(t,x)=-\\\\gamma^{-1}(t)\\\\eta\\_{z}(t,x),\\\\qquad\\\\eta\\_{z}(t,x)={\\\\mathbb{E}}(z\\|x^{\\\\mathsf{mir}}\\_{t}=x), |  | (3.28) |\\\n\\\nwhich are the unique minimizers of the objective functions\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñís‚Äã\\[s^\\]=‚à´01ùîº‚Äã(12‚Äã\\|s^‚Äã(t,xtùóÜùóÇùóã)\\|2+Œ≥‚àí1‚Äã(t)‚Äãz‚ãÖs^‚Äã(t,xtùóÜùóÇùóã))‚Äãùëët.subscript‚Ñíùë†delimited-\\[\\]^ùë†superscriptsubscript01ùîº12superscript^ùë†ùë°subscriptsuperscriptùë•ùóÜùóÇùóãùë°2‚ãÖsuperscriptùõæ1ùë°ùëß^ùë†ùë°subscriptsuperscriptùë•ùóÜùóÇùóãùë°differential-dùë°\\\\mathcal{L}\\_{s}\\[\\\\hat{s}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{s}(t,x^{\\\\mathsf{mir}}\\_{t})\\|^{2}+\\\\gamma^{-1}(t)z\\\\cdot\\\\hat{s}(t,x^{\\\\mathsf{mir}}\\_{t})\\\\right)dt. |  | (3.29) |\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚ÑíŒ∑z‚Äã\\[Œ∑^z\\]=‚à´01ùîº‚Äã(12‚Äã\\|Œ∑^z‚Äã(t,xtùóÜùóÇùóã)\\|2‚àíz‚ãÖŒ∑^z‚Äã(t,xtùóÜùóÇùóã))‚Äãùëët.subscript‚ÑísubscriptùúÇùëßdelimited-\\[\\]subscript^ùúÇùëßsuperscriptsubscript01ùîº12superscriptsubscript^ùúÇùëßùë°subscriptsuperscriptùë•ùóÜùóÇùóãùë°2‚ãÖùëßsubscript^ùúÇùëßùë°subscriptsuperscriptùë•ùóÜùóÇùóãùë°differential-dùë°\\\\mathcal{L}\\_{\\\\eta\\_{z}}\\[\\\\hat{\\\\eta}\\_{z}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}\\_{z}(t,x^{\\\\mathsf{mir}}\\_{t})\\|^{2}-z\\\\cdot\\\\hat{\\\\eta}\\_{z}(t,x^{\\\\mathsf{mir}}\\_{t})\\\\right)dt. |  | (3.30) |\\\n\\\nMoreover, we can weaken Assumption [2.5]Assumption 2.5. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") to the following requirement:\\\n\\\n###### Assumption 3.7.\\\n\\\nThe density œÅ1‚ààC2‚Äã(‚Ñùd)subscriptùúå1superscriptùê∂2superscript‚Ñùùëë\\\\rho\\_{1}\\\\in C^{2}({\\\\mathbb{R}}^{d}) satisfies œÅ1‚Äã(x)>0subscriptùúå1ùë•0\\\\rho\\_{1}(x)>0 for all x‚àà‚Ñùdùë•superscript‚Ñùùëëx\\\\in{\\\\mathbb{R}}^{d} and\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚à´‚Ñùd\\|‚àálog‚Å°œÅ1‚Äã(x)\\|2‚ÄãœÅ1‚Äã(x)‚Äãùëëx<‚àû.subscriptsuperscript‚Ñùùëësuperscript‚àásubscriptùúå1ùë•2subscriptùúå1ùë•differential-dùë•\\\\int\\_{{\\\\mathbb{R}}^{d}}\\|\\\\nabla\\\\log\\\\rho\\_{1}(x)\\|^{2}\\\\rho\\_{1}(x)dx<\\\\infty. |  | (3.31) |\\\n\\\nThe function KùêæK satisfies\\\n\\\n|     |     |     |     |     |     |     |     |     |\\\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\\\n|  |  | ‚àÉC1<‚àû::subscriptùê∂1absent\\\\displaystyle\\\\exists C\\_{1}<\\\\infty\\ :\\ |  | \\|‚àÇtK‚Äã(t,x1)\\|‚â§C1‚Äã\\|x1\\|subscriptùë°ùêæùë°subscriptùë•1subscriptùê∂1subscriptùë•1\\\\displaystyle\\|\\\\partial\\_{t}K(t,x\\_{1})\\|\\\\leq C\\_{1}\\|x\\_{1}\\|\\\\quad |  | for all(t,x1)‚àà\\[0,1\\]√ó‚Ñùd,for allùë°subscriptùë•101superscript‚Ñùùëë\\\\displaystyle\\\\text{for all}\\\\quad(t,x\\_{1})\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}, |  | (3.32) |\\\n\\\nand\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àÉM1,M2<‚àû:ùîº‚Äã\\[\\|‚àÇtK‚Äã(t,x1)\\|4\\]‚â§M1;ùîº‚Äã\\[\\|‚àÇt2K‚Äã(t,x1)\\|2\\]‚â§M2,for allt‚àà\\[0,1\\],formulae-sequencesubscriptùëÄ1subscriptùëÄ2:ùîºdelimited-\\[\\]superscriptsubscriptùë°ùêæùë°subscriptùë•14subscriptùëÄ1formulae-sequenceùîºdelimited-\\[\\]superscriptsubscriptsuperscript2ùë°ùêæùë°subscriptùë•12subscriptùëÄ2for allùë°01\\\\exists M\\_{1},M\\_{2}<\\\\infty\\ \\ :\\ \\ {\\\\mathbb{E}}\\\\big{\\[}\\|\\\\partial\\_{t}K(t,x\\_{1})\\|^{4}\\\\big{\\]}\\\\leq M\\_{1};\\\\quad{\\\\mathbb{E}}\\\\big{\\[}\\|\\\\partial^{2}\\_{t}K(t,x\\_{1})\\|^{2}\\\\big{\\]}\\\\leq M\\_{2},\\\\quad\\\\text{for all}\\\\quad t\\\\in\\[0,1\\], |  | (3.33) |\\\n\\\nwhere the expectation is taken over x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1}.\\\n\\\n###### Remark 3.8.\\\n\\\nInterestingly, if we take K‚Äã(t,x1)=x1ùêæùë°subscriptùë•1subscriptùë•1K(t,x\\_{1})=x\\_{1}, then ‚àÇtK‚Äã(t,x1)=0subscriptùë°ùêæùë°subscriptùë•10\\\\partial\\_{t}K(t,x\\_{1})=0, and the velocity field defined in ( [3.26]In 3.3 Mirror interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is completely defined by the denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t,x)=Œ≥Àô‚Äã(t)‚ÄãŒ∑z‚Äã(t,x)ùëèùë°ùë•Àôùõæùë°subscriptùúÇùëßùë°ùë•b(t,x)=\\\\dot{\\\\gamma}(t)\\\\eta\\_{z}(t,x) |  | (3.34) |\\\n\\\nSince the score sùë†s also depends on Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}, this denoiser is the only quantity that needs to be learned.\\\n\\\n###### Remark 3.9.\\\n\\\nIf œÅ1subscriptùúå1\\\\rho\\_{1} is only accessible via empirical samples, mirror interpolants do not enable calculation of the functional form of œÅ1subscriptùúå1\\\\rho\\_{1}.\\\nA notable exception is if we set K‚Äã(t,x1)=0ùêæùë°subscriptùë•10K(t,x\\_{1})=0 for t‚àà\\[t1,t2\\]ùë°subscriptùë°1subscriptùë°2t\\\\in\\[t\\_{1},t\\_{2}\\] with 0<t1‚â§t2<10subscriptùë°1subscriptùë°210<t\\_{1}\\\\leq t\\_{2}<1: in that case, xtùóÜùóÇùóã=Œ≥‚Äã(t)‚Äãz‚àºŒ≥‚Äã(t)‚Äãùñ≠‚Äã(0,Id)subscriptsuperscriptùë•ùóÜùóÇùóãùë°ùõæùë°ùëßsimilar-toùõæùë°ùñ≠0Idx^{\\\\mathsf{mir}}\\_{t}=\\\\gamma(t)z\\\\sim\\\\gamma(t){\\\\sf N}(0,\\\\text{\\\\it Id}) for t‚àà\\[t1,t2\\]ùë°subscriptùë°1subscriptùë°2t\\\\in\\[t\\_{1},t\\_{2}\\], which gives us a reference density for comparison.\\\nIn this setup, mirror interpolants essentially reduce to two one-sided interpolants glued together (with the second one time-reversed), or in fact a regular stochastic interpolant when œÅ0=œÅ1subscriptùúå0subscriptùúå1\\\\rho\\_{0}=\\\\rho\\_{1} and we set I‚Äã(t,x0,x1)=0ùêºùë°subscriptùë•0subscriptùë•10I(t,x\\_{0},x\\_{1})=0 for t‚àà\\[t1,t2\\]ùë°subscriptùë°1subscriptùë°2t\\\\in\\[t\\_{1},t\\_{2}\\].\\\n\\\n### 3.4 Stochastic interpolants and Schr√∂dinger bridges\\\n\\\nThe stochastic interpolant framework can also be used to solve the Schr√∂dinger bridge problem. For background material on this problem, we refer the reader to \\[ [38])\\] and the references therein. Consistent with the overall viewpoint of this paper, we consider the hydrodynamic formulation of the Schr√∂dinger bridge problem, in which the goal is to obtain a pair (œÅ,u)ùúåùë¢(\\\\rho,u), that solves the following optimization problem for a fixed œµ>0italic-œµ0\\\\epsilon>0\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  |  | minu^,œÅ^‚Äã‚à´01‚à´‚Ñùd\\|u^‚Äã(t,x)\\|2‚ÄãœÅ^‚Äã(t,x)‚Äãùëëx‚Äãùëëtsubscript^ùë¢^ùúåsuperscriptsubscript01subscriptsuperscript‚Ñùùëësuperscript^ùë¢ùë°ùë•2^ùúåùë°ùë•differential-dùë•differential-dùë°\\\\displaystyle\\\\min\\_{\\\\hat{u},\\\\hat{\\\\rho}}\\\\int\\_{0}^{1}\\\\int\\_{{\\\\mathbb{R}}^{d}}\\|\\\\hat{u}(t,x)\\|^{2}\\\\hat{\\\\rho}(t,x)dxdt |  | (3.35) |\\\n|  | subject to: | ‚àÇtœÅ^+‚àá‚ãÖ(u^‚ÄãœÅ^)=œµ‚ÄãŒî‚ÄãœÅ^,œÅ^‚Äã(0)=œÅ0œÅ^‚Äã(1)=œÅ1formulae-sequencesubscriptùë°^ùúå‚ãÖ‚àá^ùë¢^ùúåitalic-œµŒî^ùúåformulae-sequence^ùúå0subscriptùúå0^ùúå1subscriptùúå1\\\\displaystyle\\\\partial\\_{t}\\\\hat{\\\\rho}+\\\\nabla\\\\cdot\\\\left(\\\\hat{u}\\\\hat{\\\\rho}\\\\right)=\\\\epsilon\\\\Delta\\\\hat{\\\\rho},\\\\quad\\\\hat{\\\\rho}(0)=\\\\rho\\_{0}\\\\quad\\\\hat{\\\\rho}(1)=\\\\rho\\_{1} |  |\\\n\\\nUnder our assumptions on œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} listed in Assumption [2.5]Assumption 2.5. ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), it is known (see e.g. Proposition 4.1 in \\[ [38])\\]) that ( [3.35]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) has a unique minimizer (œÅ,u=‚àáŒª)ùúåùë¢‚àáùúÜ(\\\\rho,u=\\\\nabla\\\\lambda), with (œÅ,Œª)ùúåùúÜ(\\\\rho,\\\\lambda) classical solutions of the Euler-Lagrange equations:\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  |  | ‚àÇtœÅ+‚àá‚ãÖ(‚àáŒª‚ÄãœÅ)=œµ‚ÄãŒî‚ÄãœÅ,œÅ‚Äã(0)=œÅ0,œÅ‚Äã(1)=œÅ1,formulae-sequencesubscriptùë°ùúå‚ãÖ‚àá‚àáùúÜùúåitalic-œµŒîùúåformulae-sequenceùúå0subscriptùúå0ùúå1subscriptùúå1\\\\displaystyle\\\\partial\\_{t}\\\\rho+\\\\nabla\\\\cdot\\\\left(\\\\nabla\\\\lambda\\\\rho\\\\right)=\\\\epsilon\\\\Delta\\\\rho,\\\\quad\\\\rho(0)=\\\\rho\\_{0},\\\\quad\\\\rho(1)=\\\\rho\\_{1}, |  | (3.36) |\\\n|  |  | ‚àÇtŒª+12‚Äã\\|‚àáŒª\\|2=‚àíœµ‚ÄãŒî‚ÄãŒª.subscriptùë°ùúÜ12superscript‚àáùúÜ2italic-œµŒîùúÜ\\\\displaystyle\\\\partial\\_{t}\\\\lambda+\\\\tfrac{1}{2}\\|\\\\nabla\\\\lambda\\|^{2}=-\\\\epsilon\\\\Delta\\\\lambda. |  |\\\n\\\nTo proceed we will make the additional assumption that the solution œÅùúå\\\\rho to ( [3.36]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can be reversibly mapped to a standard Gaussian:\\\n\\\n###### Assumption 3.10.\\\n\\\nThere exists a reversible map T:\\[0,1\\]√ó‚Ñùd‚Üí‚Ñùd:ùëá‚Üí01superscript‚Ñùùëësuperscript‚ÑùùëëT:\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}^{d} with T,T‚àí1‚ààC1‚Äã(\\[0,1\\],(Cd‚Äã(‚Ñùd))d)ùëásuperscriptùëá1superscriptùê∂101superscriptsuperscriptùê∂ùëësuperscript‚ÑùùëëùëëT,T^{-1}\\\\in C^{1}(\\[0,1\\],(C^{d}({\\\\mathbb{R}}^{d}))^{d}) such that:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àÄt‚àà\\[0,1\\]:z‚àºùñ≠‚Äã(0,Id)‚áíT‚Äã(t,z)‚àºœÅ‚Äã(t);xt‚àºœÅ‚Äã(t)‚áíT‚àí1‚Äã(t,xt)‚àºùñ≠‚Äã(0,Id),formulae-sequenceformulae-sequencefor-allùë°01:similar-toùëßùñ≠0Id‚áíùëáùë°ùëßsimilar-toùúåùë°similar-tosubscriptùë•ùë°ùúåùë°‚áísuperscriptùëá1ùë°subscriptùë•ùë°similar-toùñ≠0Id\\\\forall t\\\\in\\[0,1\\]\\\\quad:\\\\quad z\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id})\\ \\\\Rightarrow\\ T(t,z)\\\\sim\\\\rho(t);\\\\quad x\\_{t}\\\\sim\\\\rho(t)\\ \\\\Rightarrow\\ T^{-1}(t,x\\_{t})\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}), |  | (3.37) |\\\n\\\nwhere œÅùúå\\\\rho is the solution to ( [3.36]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n\\\nWe stress that the actual form of the map TùëáT is not important for the arguments below.\\\nAssumption [3.10]Assumption 3.10. ‚Ä£ 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") can be used to show the existence of a stochastic interpolant whose density solves ( [3.36]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")):\\\n{restatable}lemmainterppdf\\\n\\\nIf Assumption ( [3.10]Assumption 3.10. ‚Ä£ 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) holds, then the solution œÅ‚Äã(t)ùúåùë°\\\\rho(t) to ( [3.36]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is the density of the stochastic interpolant\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | xt=T‚Äã(t,Œ±‚Äã(t)‚ÄãT‚àí1‚Äã(0,x0)+Œ≤‚Äã(t)‚ÄãT‚àí1‚Äã(1,x1))+Œ≥‚Äã(t)‚Äãz,subscriptùë•ùë°ùëáùë°ùõºùë°superscriptùëá10subscriptùë•0ùõΩùë°superscriptùëá11subscriptùë•1ùõæùë°ùëßx\\_{t}=T(t,\\\\alpha(t)T^{-1}(0,x\\_{0})+\\\\beta(t)T^{-1}(1,x\\_{1}))+\\\\gamma(t)z, |  | (3.38) |\\\n\\\nas long as Œ±2‚Äã(t)+Œ≤2‚Äã(t)+Œ≥2‚Äã(t)=1superscriptùõº2ùë°superscriptùõΩ2ùë°superscriptùõæ2ùë°1\\\\alpha^{2}(t)+\\\\beta^{2}(t)+\\\\gamma^{2}(t)=1.\\\n\\\nThe proof is given in Appendix [B.6]B.6 Proof of Lemma 3.10 and Theorem 3.10. ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"): ( [3.38]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) corresponds to choosing I‚Äã(t,x0,x1)=T‚Äã(t,Œ±‚Äã(t)‚ÄãT‚àí1‚Äã(t,x0)+Œ≤‚Äã(t)‚ÄãT‚àí1‚Äã(t,x1))ùêºùë°subscriptùë•0subscriptùë•1ùëáùë°ùõºùë°superscriptùëá1ùë°subscriptùë•0ùõΩùë°superscriptùëá1ùë°subscriptùë•1I(t,x\\_{0},x\\_{1})=T(t,\\\\alpha(t)T^{-1}(t,x\\_{0})+\\\\beta(t)T^{-1}(t,x\\_{1})) in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). With the help of Lemma [3.10]Assumption 3.10. ‚Ä£ 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we can establish the following result, which shows how to optimize over the function IùêºI to solve the problem ( [3.35]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))\\\n\\\n{restatable}\\\n\\\ntheoremsb\\\n\\\nPick some Œ≥:\\[0,1\\]‚Üí\\[0,1):ùõæ‚Üí0101\\\\gamma:\\[0,1\\]\\\\to\\[0,1) such that Œ≥‚Äã(0)=Œ≥‚Äã(1)=0ùõæ0ùõæ10\\\\gamma(0)=\\\\gamma(1)=0, Œ≥‚Äã(t)>0ùõæùë°0\\\\gamma(t)>0 for t‚àà(0,1)ùë°01t\\\\in(0,1), Œ≥‚ààC2‚Äã((0,1))ùõæsuperscriptùê∂201\\\\gamma\\\\in C^{2}((0,1)) and Œ≥2‚ààC1‚Äã(\\[0,1\\])superscriptùõæ2superscriptùê∂101\\\\gamma^{2}\\\\in C^{1}(\\[0,1\\]), and let x^t=I^‚Äã(t,x0,x1)+Œ≥‚Äã(t)‚Äãzsubscript^ùë•ùë°^ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°ùëß\\\\hat{x}\\_{t}=\\\\hat{I}(t,x\\_{0},x\\_{1})+\\\\gamma(t)z, with x0‚àºœÅ0similar-tosubscriptùë•0subscriptùúå0x\\_{0}\\\\sim\\\\rho\\_{0}, x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1}, and z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}) all independent. Consider the max-min problem over I^‚ààC1‚Äã(\\[0,1\\],(C1‚Äã(‚Ñùd√ó‚Ñùd))d)^ùêºsuperscriptùê∂101superscriptsuperscriptùê∂1superscript‚Ñùùëësuperscript‚Ñùùëëùëë\\\\hat{I}\\\\in C^{1}(\\[0,1\\],(C^{1}({\\\\mathbb{R}}^{d}\\\\times{\\\\mathbb{R}}^{d}))^{d}) and u^‚ààC0‚Äã(\\[0,1\\],(C1‚Äã(‚Ñùd))d)^ùë¢superscriptùê∂001superscriptsuperscriptùê∂1superscript‚Ñùùëëùëë\\\\hat{u}\\\\in C^{0}(\\[0,1\\],(C^{1}({\\\\mathbb{R}}^{d}))^{d}):\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | maxI^‚Å°minu^‚Äã‚à´01ùîº‚Äã(12‚Äã\\|u^‚Äã(t,x^t)\\|2‚àí(‚àÇtI^‚Äã(t,x0,x1)+(Œ≥Àô‚Äã(t)‚àíœµ‚ÄãŒ≥‚àí1‚Äã(t))‚Äãz)‚ãÖu^‚Äã(t,x^t))‚Äãùëët.subscript^ùêºsubscript^ùë¢superscriptsubscript01ùîº12superscript^ùë¢ùë°subscript^ùë•ùë°2‚ãÖsubscriptùë°^ùêºùë°subscriptùë•0subscriptùë•1Àôùõæùë°italic-œµsuperscriptùõæ1ùë°ùëß^ùë¢ùë°subscript^ùë•ùë°differential-dùë°\\\\max\\_{\\\\hat{I}}\\\\min\\_{\\\\hat{u}}\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left(\\\\tfrac{1}{2}\\|\\\\hat{u}(t,\\\\hat{x}\\_{t})\\|^{2}-\\\\left(\\\\partial\\_{t}\\\\hat{I}(t,x\\_{0},x\\_{1})+(\\\\dot{\\\\gamma}(t)-\\\\epsilon\\\\gamma^{-1}(t))z\\\\right)\\\\cdot\\\\hat{u}(t,\\\\hat{x}\\_{t})\\\\right)dt. |  | (3.39) |\\\n\\\nIf Assumption [3.10]Assumption 3.10. ‚Ä£ 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") holds, then all the optimizers (I,u)ùêºùë¢(I,u) of ( [3.39]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) are such that the density of the associated xt=I‚Äã(t,x0,x1)+Œ≥‚Äã(t)‚Äãzsubscriptùë•ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°ùëßx\\_{t}=I(t,x\\_{0},x\\_{1})+\\\\gamma(t)z is the solution œÅùúå\\\\rho to ( [3.36]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). Moreover, u=‚àáŒªùë¢‚àáùúÜu=\\\\nabla\\\\lambda, with ŒªùúÜ\\\\lambda the solution to ( [3.36]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n\\\nThe proof is also given in Appendix [B.6]B.6 Proof of Lemma 3.10 and Theorem 3.10. ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). Note that if we fix I^^ùêº\\\\hat{I}, the velocity uùë¢u minimizing this objective is the forward drift bùñ•subscriptùëèùñ•b\\_{\\\\mathsf{F}} defined in ( [2.21]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). Note also that if we set œµ‚Üí0‚Üíitalic-œµ0\\\\epsilon\\\\to 0, the minimizing velocity field is bùëèb as defined in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and the max-min problem formally reduces to solving the optimal transport problem. In this case, Assumption [3.10]Assumption 3.10. ‚Ä£ 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") becomes more stringent, as we need to assume that that system ( [3.36]In 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) with œµ=0italic-œµ0\\\\epsilon=0 (i.e. in the absence of the diffusive terms) has a classical solution. Theorem ( [3.10]Assumption 3.10. ‚Ä£ 3.4 Stochastic interpolants and Schr√∂dinger bridges ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) gives a practical route towards solving the Schr√∂dinger bridge problem with stochastic interpolants, and we leave the numerical investigation of this formulation to future work.\\\n\\",
            "citations": null
          },
          "4 Spatially linear interpolants\\": {
            "content": "\\\nIn this section, we study the stochastic interpolants that are obtained when we specialize the function IùêºI used in ( [2.1]In Definition 2.1 (Stochastic interpolant). ‚Ä£ 2.1 Definitions and assumptions ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) to be linear in both x0subscriptùë•0x\\_{0} and x1subscriptùë•1x\\_{1}, i.e. we consider\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | xtùóÖùóÇùóá=Œ±‚Äã(t)‚Äãx0+Œ≤‚Äã(t)‚Äãx1+Œ≥‚Äã(t)‚Äãz,subscriptsuperscriptùë•ùóÖùóÇùóáùë°ùõºùë°subscriptùë•0ùõΩùë°subscriptùë•1ùõæùë°ùëßx^{\\\\mathsf{lin}}\\_{t}=\\\\alpha(t)x\\_{0}+\\\\beta(t)x\\_{1}+\\\\gamma(t)z, |  | (4.1) |\\\n\\\nwhere (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu and z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}) with (x0,x1)‚üÇzperpendicular-tosubscriptùë•0subscriptùë•1ùëß(x\\_{0},x\\_{1})\\\\perp z, and Œ±,Œ≤,Œ≥2‚ààC2‚Äã(\\[0,1\\])ùõºùõΩsuperscriptùõæ2superscriptùê∂201\\\\alpha,\\\\beta,\\\\gamma^{2}\\\\in C^{2}(\\[0,1\\]) satisfy the conditions\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  |  | Œ±(0)=Œ≤(1)=1;Œ±(1)=Œ≤(0)=Œ≥(0)=Œ≥(1)=0;‚àÄt‚àà(0,1):Œ≥(t)>0.\\\\displaystyle\\\\alpha(0)=\\\\beta(1)=1;\\\\quad\\\\alpha(1)=\\\\beta(0)=\\\\gamma(0)=\\\\gamma(1)=0;\\\\quad\\\\forall t\\\\in(0,1)\\ :\\ \\\\gamma(t)>0. |  | (4.2) |\\\n\\\nDespite its simplicity, this setup offers significant design flexibility. The discussion highlights how the presence of the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z can simplify the structure of the intermediate density œÅ‚Äã(t)ùúåùë°\\\\rho(t).\\\nSince our ultimate aim is to investigate the properties of practical generative models built upon ODEs or SDEs, we will also study the effect of time-dependent diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t), which controls the amplitude of the noise in a generative SDE.\\\nThroughout, to build intuition, we choose œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} to be Gaussian mixture densities, for which the drift coefficients can be computed analytically (see Appendix [A]Appendix A Bridging two Gaussian mixture densities ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). This enables us to visualize the effect of each choice on the resulting generative models.\\\n\\\n### 4.1 Factorization of the velocity field\\\n\\\nWhen the stochastic interpolant is of the form ( [4.1]In 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), the velocity bùëèb and the score sùë†s defined in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.14]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can both be expressed in terms of the following three conditional expectations (the third is the denoiser already defined in ( [2.17]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))):\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∑0‚Äã(t,x)=ùîº‚Äã(x0\\|xtùóÖùóÇùóá=x),Œ∑1‚Äã(t,x)=ùîº‚Äã(x1\\|xtùóÖùóÇùóá=x),Œ∑z‚Äã(t,x)=ùîº‚Äã(z\\|xtùóÖùóÇùóá=x).formulae-sequencesubscriptùúÇ0ùë°ùë•ùîºconditionalsubscriptùë•0subscriptsuperscriptùë•ùóÖùóÇùóáùë°ùë•formulae-sequencesubscriptùúÇ1ùë°ùë•ùîºconditionalsubscriptùë•1subscriptsuperscriptùë•ùóÖùóÇùóáùë°ùë•subscriptùúÇùëßùë°ùë•ùîºconditionalùëßsubscriptsuperscriptùë•ùóÖùóÇùóáùë°ùë•\\\\eta\\_{0}(t,x)={\\\\mathbb{E}}(x\\_{0}\\|x^{\\\\mathsf{lin}}\\_{t}=x),\\\\quad\\\\eta\\_{1}(t,x)={\\\\mathbb{E}}(x\\_{1}\\|x^{\\\\mathsf{lin}}\\_{t}=x),\\\\quad\\\\eta\\_{z}(t,x)={\\\\mathbb{E}}(z\\|x^{\\\\mathsf{lin}}\\_{t}=x). |  | (4.3) |\\\n\\\nSpecifically, we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t,x)=Œ±Àô‚Äã(t)‚ÄãŒ∑0‚Äã(t,x)+Œ≤Àô‚Äã(t)‚ÄãŒ∑1‚Äã(t,x)+Œ≥Àô‚Äã(t)‚ÄãŒ∑z‚Äã(t,x),s‚Äã(t,x)=‚àíŒ≥‚àí1‚Äã(t)‚ÄãŒ∑z‚Äã(t,x).formulae-sequenceùëèùë°ùë•Àôùõºùë°subscriptùúÇ0ùë°ùë•ÀôùõΩùë°subscriptùúÇ1ùë°ùë•Àôùõæùë°subscriptùúÇùëßùë°ùë•ùë†ùë°ùë•superscriptùõæ1ùë°subscriptùúÇùëßùë°ùë•b(t,x)=\\\\dot{\\\\alpha}(t)\\\\eta\\_{0}(t,x)+\\\\dot{\\\\beta}(t)\\\\eta\\_{1}(t,x)+\\\\dot{\\\\gamma}(t)\\\\eta\\_{z}(t,x),\\\\qquad s(t,x)=-\\\\gamma^{-1}(t)\\\\eta\\_{z}(t,x). |  | (4.4) |\\\n\\\nThe second relation above holds for t‚àà(0,1)ùë°01t\\\\in(0,1) (i.e. when Œ≥‚Äã(t)‚â†0ùõæùë°0\\\\gamma(t)\\\\not=0).\\\nMoreover, because ùîº‚Äã(xt\\|xt=x)=xùîºconditionalsubscriptùë•ùë°subscriptùë•ùë°ùë•ùë•{\\\\mathbb{E}}(x\\_{t}\\|x\\_{t}=x)=x by definition, the functions Œ∑0subscriptùúÇ0\\\\eta\\_{0}, Œ∑1subscriptùúÇ1\\\\eta\\_{1}, and Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} satisfy\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àÄ(t,x)‚àà\\[0,1\\]√ó‚Ñùd:Œ±‚Äã(t)‚ÄãŒ∑0‚Äã(t,x)+Œ≤‚Äã(t)‚ÄãŒ∑1‚Äã(t,x)+Œ≥‚Äã(t)‚ÄãŒ∑z‚Äã(t,x)=x.formulae-sequencefor-allùë°ùë•01superscript‚Ñùùëë:ùõºùë°subscriptùúÇ0ùë°ùë•ùõΩùë°subscriptùúÇ1ùë°ùë•ùõæùë°subscriptùúÇùëßùë°ùë•ùë•\\\\forall(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\quad:\\\\quad\\\\alpha(t)\\\\eta\\_{0}(t,x)+\\\\beta(t)\\\\eta\\_{1}(t,x)+\\\\gamma(t)\\\\eta\\_{z}(t,x)=x. |  | (4.5) |\\\n\\\nThis enables us to reduce computational expense: given two of the Œ∑ùúÇ\\\\eta‚Äôs, the third can always be calculated via ( [4.5]In 4.1 Factorization of the velocity field ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nFinally, it is easy to see that the functions Œ∑0subscriptùúÇ0\\\\eta\\_{0}, Œ∑1subscriptùúÇ1\\\\eta\\_{1}, and Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} are the unique minimizers of the objectives\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ‚ÑíŒ∑0‚Äã(Œ∑^0)subscript‚ÑísubscriptùúÇ0subscript^ùúÇ0\\\\displaystyle\\\\mathcal{L}\\_{\\\\eta\\_{0}}(\\\\hat{\\\\eta}\\_{0}) | =‚à´01ùîº‚Äã\\[12‚Äã\\|Œ∑^0‚Äã(t,xtùóÖùóÇùóá)\\|2‚àíx0‚ãÖŒ∑^0‚Äã(t,xtùóÖùóÇùóá)\\]‚Äãùëët,absentsuperscriptsubscript01ùîºdelimited-\\[\\]12superscriptsubscript^ùúÇ0ùë°subscriptsuperscriptùë•ùóÖùóÇùóáùë°2‚ãÖsubscriptùë•0subscript^ùúÇ0ùë°subscriptsuperscriptùë•ùóÖùóÇùóáùë°differential-dùë°\\\\displaystyle=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left\\[\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}\\_{0}(t,x^{\\\\mathsf{lin}}\\_{t})\\|^{2}-x\\_{0}\\\\cdot\\\\hat{\\\\eta}\\_{0}(t,x^{\\\\mathsf{lin}}\\_{t})\\\\right\\]dt, |  | (4.6) |\\\n|  | ‚ÑíŒ∑1‚Äã(Œ∑^1)subscript‚ÑísubscriptùúÇ1subscript^ùúÇ1\\\\displaystyle\\\\mathcal{L}\\_{\\\\eta\\_{1}}(\\\\hat{\\\\eta}\\_{1}) | =‚à´01ùîº‚Äã\\[12‚Äã\\|Œ∑^1‚Äã(t,xtùóÖùóÇùóá)\\|2‚àíx1‚ãÖŒ∑^1‚Äã(t,xtùóÖùóÇùóá)\\]‚Äãùëët,absentsuperscriptsubscript01ùîºdelimited-\\[\\]12superscriptsubscript^ùúÇ1ùë°subscriptsuperscriptùë•ùóÖùóÇùóáùë°2‚ãÖsubscriptùë•1subscript^ùúÇ1ùë°subscriptsuperscriptùë•ùóÖùóÇùóáùë°differential-dùë°\\\\displaystyle=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left\\[\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}\\_{1}(t,x^{\\\\mathsf{lin}}\\_{t})\\|^{2}-x\\_{1}\\\\cdot\\\\hat{\\\\eta}\\_{1}(t,x^{\\\\mathsf{lin}}\\_{t})\\\\right\\]dt, |  |\\\n|  | ‚ÑíŒ∑z‚Äã(Œ∑^z)subscript‚ÑísubscriptùúÇùëßsubscript^ùúÇùëß\\\\displaystyle\\\\mathcal{L}\\_{\\\\eta\\_{z}}(\\\\hat{\\\\eta}\\_{z}) | =‚à´01ùîº‚Äã\\[12‚Äã\\|Œ∑^z‚Äã(t,xtùóÖùóÇùóá)\\|2‚àíz‚ãÖŒ∑^z‚Äã(t,xtùóÖùóÇùóá)\\]‚Äãùëët,absentsuperscriptsubscript01ùîºdelimited-\\[\\]12superscriptsubscript^ùúÇùëßùë°subscriptsuperscriptùë•ùóÖùóÇùóáùë°2‚ãÖùëßsubscript^ùúÇùëßùë°subscriptsuperscriptùë•ùóÖùóÇùóáùë°differential-dùë°\\\\displaystyle=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left\\[\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}\\_{z}(t,x^{\\\\mathsf{lin}}\\_{t})\\|^{2}-z\\\\cdot\\\\hat{\\\\eta}\\_{z}(t,x^{\\\\mathsf{lin}}\\_{t})\\\\right\\]dt, |  |\\\n\\\nwhere xtùóÖùóÇùóásubscriptsuperscriptùë•ùóÖùóÇùóáùë°x^{\\\\mathsf{lin}}\\_{t} is defined in ( [4.1]In 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the expectation is taken independently over (x0,x1)‚àºŒΩsimilar-tosubscriptùë•0subscriptùë•1ùúà(x\\_{0},x\\_{1})\\\\sim\\\\nu and z‚àºùñ≠‚Äã(0,Id).similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}).\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n| Stochastic Interpolant |  | Œ±‚Äã(t)ùõºùë°\\\\alpha(t) | Œ≤‚Äã(t)ùõΩùë°\\\\beta(t) | Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) |\\\n| Arbitrary œÅ0subscriptùúå0\\\\rho\\_{0} (two-sided) | linear | 1‚àít1ùë°1-t | tùë°t | a‚Äãt‚Äã(1‚àít)ùëéùë°1ùë°\\\\sqrt{at(1-t)} |\\\n| trig | cos‚Å°œÄ2‚Äãtùúã2ùë°\\\\cos{\\\\tfrac{\\\\pi}{2}t} | sin‚Å°œÄ2‚Äãtùúã2ùë°\\\\sin{\\\\tfrac{\\\\pi}{2}t} | a‚Äãt‚Äã(1‚àít)ùëéùë°1ùë°\\\\sqrt{at(1-t)} |\\\n| enc-dec | cos2‚Å°(œÄ‚Äãt)‚Äã1\\[0,12)‚Äã(t)superscript2ùúãùë°subscript1012ùë°\\\\cos^{2}(\\\\pi t)1\\_{\\[0,\\\\frac{1}{2})}(t) | cos2‚Å°(œÄ‚Äãt)‚Äã1(12,1\\]‚Äã(t)superscript2ùúãùë°subscript1121ùë°\\\\cos^{2}(\\\\pi t)1\\_{(\\\\frac{1}{2},1\\]}(t) | sin2‚Å°(œÄ‚Äãt)superscript2ùúãùë°\\\\sin^{2}(\\\\pi t) |\\\n| Gaussian œÅ0subscriptùúå0\\\\rho\\_{0} (one-sided) | linear | 1‚àít1ùë°1-t | tùë°t | 0 |\\\n| trig | cos‚Å°œÄ2‚Äãtùúã2ùë°\\\\cos{\\\\tfrac{\\\\pi}{2}t} | sin‚Å°œÄ2‚Äãtùúã2ùë°\\\\sin{\\\\tfrac{\\\\pi}{2}t} | 0 |\\\n| SBDM (VP) | 1‚àít21superscriptùë°2\\\\sqrt{1-t^{2}} | tùë°t | 0 |\\\n| Mirror |  | 0 | 1 | a‚Äãt‚Äã(1‚àít)ùëéùë°1ùë°\\\\sqrt{at(1-t)} |\\\n\\\nTable 4: Linear interpolants. A table suggesting various linear interpolants.\\\nIn general, this paper describes methods for arbitrary œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}.\\\nIn Section [4.4]Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we detail linear interpolants for one-sided generation, where œÅ0subscriptùúå0\\\\rho\\_{0} is a Gaussian and the latent variable zùëßz can be absorbed into x0subscriptùë•0x\\_{0}.\\\nLater, in Section [5.1]Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we discuss how to recast score-based diffusion models (SBDM) as linear one-sided interpolants, which leads to the expressions given in the table when using a variance-preserving parameterization.\\\nLinear mirror interpolants, where œÅ0=œÅ1subscriptùúå0subscriptùúå1\\\\rho\\_{0}=\\\\rho\\_{1} are equal, are defined by ( [3.25]In Definition 3.6 (Mirror stochastic interpolant). ‚Ä£ 3.3 Mirror interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) with the choice K‚Äã(t,x1)=Œ±‚Äã(t)‚Äãx1ùêæùë°subscriptùë•1ùõºùë°subscriptùë•1K(t,x\\_{1})=\\\\alpha(t)x\\_{1}.\\\n\\\n### 4.2 Some specific design choices\\\n\\\nIt is useful to assume that both œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} have been scaled to have zero mean and identity covariance (which can be achieved in practice, for example, by an affine transformation of the data). In this case, the time-dependent mean and covariance of ( [4.1]In 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) are given by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ùîº‚Äã\\[xtùóÖùóÇùóá\\]=0,ùîº‚Äã\\[xtùóÖùóÇùóá‚Äã(xtùóÖùóÇùóá)ùñ≥\\]=(Œ±2‚Äã(t)+Œ≤2‚Äã(t)+Œ≥2‚Äã(t))‚ÄãId.formulae-sequenceùîºdelimited-\\[\\]subscriptsuperscriptùë•ùóÖùóÇùóáùë°0ùîºdelimited-\\[\\]subscriptsuperscriptùë•ùóÖùóÇùóáùë°superscriptsubscriptsuperscriptùë•ùóÖùóÇùóáùë°ùñ≥superscriptùõº2ùë°superscriptùõΩ2ùë°superscriptùõæ2ùë°Id{\\\\mathbb{E}}\\[x^{\\\\mathsf{lin}}\\_{t}\\]=0,\\\\qquad{\\\\mathbb{E}}\\[x^{\\\\mathsf{lin}}\\_{t}(x^{\\\\mathsf{lin}}\\_{t})^{\\\\mathsf{T}}\\]=(\\\\alpha^{2}(t)+\\\\beta^{2}(t)+\\\\gamma^{2}(t))\\\\text{\\\\it Id}. |  | (4.7) |\\\n\\\nPreserving the identity covariance at all times therefore leads to the constraint\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àÄt‚àà\\[0,1\\]:Œ±2‚Äã(t)+Œ≤2‚Äã(t)+Œ≥2‚Äã(t)=1.formulae-sequencefor-allùë°01:superscriptùõº2ùë°superscriptùõΩ2ùë°superscriptùõæ2ùë°1\\\\forall t\\\\in\\[0,1\\]\\\\quad:\\\\quad\\\\alpha^{2}(t)+\\\\beta^{2}(t)+\\\\gamma^{2}(t)=1. |  | (4.8) |\\\n\\\n![Refer to caption]Figure 5: The functions Œ±‚Äã(t)ùõºùë°\\\\alpha(t), Œ≤‚Äã(t)ùõΩùë°\\\\beta(t), and Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) for the linear ( [4.9]In Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), trigonometric ( [4.10]In Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) with Œ≥‚Äã(t)=2‚Äãt‚Äã(1‚àít)ùõæùë°2ùë°1ùë°\\\\gamma(t)=\\\\sqrt{2t(1-t)}, Gaussian encoding-decoding ( [4.11]In Gaussian encoding-decoding. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), one-sided ( [3.15]In Definition 3.3 (One-sided stochastic interpolant). ‚Ä£ 3.2 One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and mirror ( [3.25]In Definition 3.6 (Mirror stochastic interpolant). ‚Ä£ 3.3 Mirror interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) interpolants.\\\n\\\nThis choice is also sensible if œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} have covariances that are not the identity but are on a similar scale. In this case we no longer need to enforce ( [4.8]In 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) exactly, and could, for example, take three functions whose sum of squares is of order one. For definiteness, in the sequel we discuss possible choices that satisfy ( [4.8]In 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) exactly, with the understanding that the corresponding functions Œ±ùõº\\\\alpha, Œ≤ùõΩ\\\\beta, and Œ≥ùõæ\\\\gamma could all be slightly modified without significantly affecting the conclusions.\\\n\\\n#### Linear and trigonometric Œ±ùõº\\\\alpha and Œ≤ùõΩ\\\\beta.\\\n\\\nOne way to ensure that ( [4.8]In 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) holds while maintaining the influence of œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} everywhere on \\[0,1\\]01\\[0,1\\] except at the endpoints is to choose\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ±‚Äã(t)=t,Œ≤‚Äã(t)=1‚àít,Œ≥‚Äã(t)=2‚Äãt‚Äã(1‚àít).formulae-sequenceùõºùë°ùë°formulae-sequenceùõΩùë°1ùë°ùõæùë°2ùë°1ùë°\\\\alpha(t)=t,\\\\qquad\\\\beta(t)=1-t,\\\\qquad\\\\gamma(t)=\\\\sqrt{2t(1-t)}. |  | (4.9) |\\\n\\\nThis choice was advocated in \\[ [41])\\], without the inclusion of the latent variable (Œ≥=0ùõæ0\\\\gamma=0). Another possibility that gives more leeway is to pick any Œ≥:\\[0,1\\]‚Üí\\[0,1\\]:ùõæ‚Üí0101\\\\gamma:\\[0,1\\]\\\\to\\[0,1\\] and set\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ±‚Äã(t)=1‚àíŒ≥2‚Äã(t)‚Äãcos‚Å°(12‚ÄãœÄ‚Äãt),Œ≤‚Äã(t)=1‚àíŒ≥2‚Äã(t)‚Äãsin‚Å°(12‚ÄãœÄ‚Äãt).formulae-sequenceùõºùë°1superscriptùõæ2ùë°12ùúãùë°ùõΩùë°1superscriptùõæ2ùë°12ùúãùë°\\\\alpha(t)=\\\\sqrt{1-\\\\gamma^{2}(t)}\\\\cos(\\\\tfrac{1}{2}\\\\pi t),\\\\qquad\\\\beta(t)=\\\\sqrt{1-\\\\gamma^{2}(t)}\\\\sin(\\\\tfrac{1}{2}\\\\pi t). |  | (4.10) |\\\n\\\nWith Œ≥=0ùõæ0\\\\gamma=0, this was the choice preferred in \\[ [2])\\]. The PDF œÅ‚Äã(t)ùúåùë°\\\\rho(t) obtained with the choices ( [4.9]In Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [4.10]In Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) when œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} are both Gaussian mixture densities are shown in Figure [6]Figure 6 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). As this example shows, when œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} have distinct complex features, these would be duplicated in œÅ‚Äã(t)ùúåùë°\\\\rho(t) at intermediate times if not for the smoothing effect of the latent variable; this behavior is seen in Figure [6]Figure 6 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), where it is most prominent in the first row with Œ≥‚Äã(t)=0ùõæùë°0\\\\gamma(t)=0. From a statistical learning perspective, eliminating the formation of spurious features will simplify the estimation of the velocity field bùëèb, which becomes smoother as the formation of such features is suppressed.\\\n\\\n![Refer to caption]Figure 6: The effect of Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z on œÅ‚Äã(t)ùúåùë°\\\\rho(t). A visualization of how the choice of Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) changes the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) of xtùóÖùóÇùóá=Œ±‚Äã(t)‚Äãx0+Œ≤‚Äã(t)‚Äãx1+Œ≥‚Äã(t)‚Äãzsubscriptsuperscriptùë•ùóÖùóÇùóáùë°ùõºùë°subscriptùë•0ùõΩùë°subscriptùë•1ùõæùë°ùëßx^{\\\\mathsf{lin}}\\_{t}=\\\\alpha(t)x\\_{0}+\\\\beta(t)x\\_{1}+\\\\gamma(t)z when œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} are Gaussian mixture densities with two modes and three modes, respectively.\\\nThe first row depicts Œ≥‚Äã(t)=0ùõæùë°0\\\\gamma(t)=0, which reduces to the stochastic interpolant developed in \\[ [2])\\]. This case forms a valid transport between œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}, but produces spurious intermediate modes in œÅ‚Äã(t)ùúåùë°\\\\rho(t).\\\nThe second row depicts the choice of Œ≥‚Äã(t)=2‚Äãt‚Äã(1‚àít)ùõæùë°2ùë°1ùë°\\\\gamma(t)=\\\\sqrt{2t(1-t)}. In this case, the spurious modes are partially damped by the addition of the latent variable, leading to a simpler œÅ‚Äã(t)ùúåùë°\\\\rho(t).\\\nThe final row shows the Gaussian encoding-decoding, which smoothly encodes œÅ0subscriptùúå0\\\\rho\\_{0} into a standard normal distribution on the time interval \\[0,1/2)012\\[0,1/2), which is then decoded into œÅ1subscriptùúå1\\\\rho\\_{1} on the interval (1/2,1\\]121(1/2,1\\]. In this case, no intermediate modes form in œÅ‚Äã(t)ùúåùë°\\\\rho(t): the two modes in œÅ0subscriptùúå0\\\\rho\\_{0} collide to form ùñ≠‚Äã(0,1)ùñ≠01\\\\mathsf{N}(0,1) at t=12ùë°12t=\\\\tfrac{1}{2}, which then spreads into the three modes of œÅ1subscriptùúå1\\\\rho\\_{1}.\\\nA visualization of individual sample trajectories from deterministic and stochastic generative models based on ODEs and SDEs whose solutions have density œÅ‚Äã(t)ùúåùë°\\\\rho(t) can be seen in Figure [7]Figure 7 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n![Refer to caption]Figure 7: The effect of œµitalic-œµ\\\\epsilon on sample trajectories. A visualization of how the choice of œµitalic-œµ\\\\epsilon affects the sample trajectories obtained by solving the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) or the forward SDE ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). The set-up is the same as in Figure [6]Figure 6 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"):\\\nœÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} are taken to be the same Gaussian mixture densities, and the analytical expressions for bùëèb and sùë†s are used.\\\nIn the three panels in each column the value of Œ≥ùõæ\\\\gamma is the same, and each panel shows trajectories with different œµitalic-œµ\\\\epsilon.\\\nThree specific trajectories from the same three initial conditions drawn from œÅ0subscriptùúå0\\\\rho\\_{0} are also highlighted in white in every panel.\\\nAs œµitalic-œµ\\\\epsilon increases but Œ≥ùõæ\\\\gamma stays the same, the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) is unchanged, but the individual trajectories become increasingly stochastic.\\\nWhile all choices are equivalent with exact bùëèb and sùë†s, Theorem [2.4]Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") shows that nonzero values of œµitalic-œµ\\\\epsilon provide control on the likelihood in terms of the error in bùëèb and sùë†s when they are approximate.\\\n\\\n#### Gaussian encoding-decoding.\\\n\\\nA useful limiting case is to devolve the data from œÅ0subscriptùúå0\\\\rho\\_{0} completely into noise by the halfway point t=12ùë°12t=\\\\tfrac{1}{2} and to reconstruct œÅ1subscriptùúå1\\\\rho\\_{1} completely from noise starting from t=12ùë°12t=\\\\frac{1}{2}. One choice that allows us to do so while satisfying ( [4.8]In 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ±‚Äã(t)=cos2‚Å°(œÄ‚Äãt)‚Äã1\\[0,12)‚Äã(t),Œ≤‚Äã(t)=cos2‚Å°(œÄ‚Äãt)‚Äã1(12,1\\]‚Äã(t),Œ≥‚Äã(t)=sin2‚Å°(œÄ‚Äãt),formulae-sequenceùõºùë°superscript2ùúãùë°subscript1012ùë°formulae-sequenceùõΩùë°superscript2ùúãùë°subscript1121ùë°ùõæùë°superscript2ùúãùë°\\\\alpha(t)=\\\\cos^{2}(\\\\pi t)1\\_{\\[0,\\\\frac{1}{2})}(t),\\\\qquad\\\\beta(t)=\\\\cos^{2}(\\\\pi t)1\\_{(\\\\frac{1}{2},1\\]}(t),\\\\qquad\\\\gamma(t)=\\\\sin^{2}(\\\\pi t), |  | (4.11) |\\\n\\\nwhere 1A‚Äã(t)subscript1ùê¥ùë°1\\_{A}(t) is the indicator function of Aùê¥A, i.e. 1A‚Äã(t)=1subscript1ùê¥ùë°11\\_{A}(t)=1 if t‚ààAùë°ùê¥t\\\\in A and 1A‚Äã(t)=0subscript1ùê¥ùë°01\\_{A}(t)=0 otherwise.\\\nWith this choice, it is easy to see that xt=12=Œ≥‚Äã(12)‚Äãz‚àºùñ≠‚Äã(0,Œ≥2‚Äã(12))subscriptùë•ùë°12ùõæ12ùëßsimilar-toùñ≠0superscriptùõæ212x\\_{t=\\\\frac{1}{2}}=\\\\gamma(\\\\tfrac{1}{2})z\\\\sim{\\\\sf N}(0,\\\\gamma^{2}(\\\\tfrac{1}{2})), which seamlessly glues together two interpolants: one between œÅ0subscriptùúå0\\\\rho\\_{0} and a standard Gaussian, and one between a standard Gaussian and œÅ1subscriptùúå1\\\\rho\\_{1}.\\\n\\\nEven though the choice ( [4.11]In Gaussian encoding-decoding. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) encodes œÅ0subscriptùúå0\\\\rho\\_{0} into pure noise on the interval \\[0,12\\]012\\[0,\\\\tfrac{1}{2}\\], which is then decoded into œÅ1subscriptùúå1\\\\rho\\_{1} on the interval \\[12,1\\]121\\[\\\\tfrac{1}{2},1\\] (and vice-versa when proceeding backwards in time), the resulting velocity bùëèb still defines a single continuity equation that maps œÅ0subscriptùúå0\\\\rho\\_{0} to œÅ1subscriptùúå1\\\\rho\\_{1} on \\[0,1\\]01\\[0,1\\].\\\nThis is most clearly seen at the level of the probability flow ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), since its solution Xtsubscriptùëãùë°X\\_{t} is a bijection between the initial and final conditions Xt=0subscriptùëãùë°0X\\_{t=0} and Xt=1subscriptùëãùë°1X\\_{t=1}, but a similar pairing can also be observed in the solutions to the forward and backward SDEs ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), whose solutions at time t=1ùë°1t=1 or t=0ùë°0t=0 remain correlated with the initial or final condition used.\\\nThis allows for a more direct means of image-to-image translation with diffusions when compared to the recent approach described in \\[ [62])\\].\\\nThe choice ( [4.11]In Gaussian encoding-decoding. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is depicted in the final row of Figure [6]Figure 6 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), where no spurious modes form at all; individual sample trajectories of the deterministic and stochastic generative models based on ODEs and SDEs whose solutions have this œÅ‚Äã(t)ùúåùë°\\\\rho(t) as density can be seen in the panels forming the third column in Figure [7]Figure 7 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nWe note that the elimination of spurious intermediate modes can also be implemented by use of a data-adapted coupling ŒΩ‚Äã(d‚Äãx0,d‚Äãx1)ùúàùëësubscriptùë•0ùëësubscriptùë•1\\\\nu(dx\\_{0},dx\\_{1}), as considered in \\[ [1])\\].\\\n\\\nUnsurprisingly, it is necessary to have Œ≥‚Äã(t)>0ùõæùë°0\\\\gamma(t)>0 for the choice ( [4.11]In Gaussian encoding-decoding. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")): for Œ≥‚Äã(t)=0ùõæùë°0\\\\gamma(t)=0, the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) collapses to a Dirac measure at t=12ùë°12t=\\\\frac{1}{2}. This consideration highlights that the inclusion of the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z matters even for the deterministic dynamics ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and its presence is distinct from the stochasticity inherent to the SDEs ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n\\\n### 4.3 Impact of the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z and the diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t)\\\n\\\nThe stochastic interpolant framework enables us to discern the independent roles of the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z and the diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) we use in a generative model.\\\nAs shown in Theorem [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), the presence of the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z for Œ≥‚â†0ùõæ0\\\\gamma\\\\neq 0 smooths both the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) and the velocity bùëèb defined in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) spatially.\\\nThis provides a computational advantage at sample generation time because it simplifies the required numerical integration of ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nIntuitively, this is because the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) of xtsubscriptùë•ùë°x\\_{t} can be represented exactly as the density that would be obtained with Œ≥‚Äã(t)=0ùõæùë°0\\\\gamma(t)=0 convolved with ùñ≠‚Äã(0,Œ≥2‚Äã(t)‚ÄãI‚Äãd)ùñ≠0superscriptùõæ2ùë°ùêºùëë\\\\mathsf{N}(0,\\\\gamma^{2}(t)Id) at each t‚àà(0,1)ùë°01t\\\\in(0,1). A comparison between the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) obtained with trigonometric interpolants with Œ≥‚Äã(t)=0ùõæùë°0\\\\gamma(t)=0 and Œ≥‚Äã(t)=2‚Äãt‚Äã(1‚àít)ùõæùë°2ùë°1ùë°\\\\gamma(t)=\\\\sqrt{2t(1-t)} can be seen in the first and second row of Figure [6]Figure 6 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\\nBy contrast, the diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) leaves the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) unchanged, and only affects the way we sample it.\\\nIn particular, the probability flow ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) results in a map that pushes every Xt=0=x0subscriptùëãùë°0subscriptùë•0X\\_{t=0}=x\\_{0} onto a single Xt=1=x1subscriptùëãùë°1subscriptùë•1X\\_{t=1}=x\\_{1} and vice-versa.\\\nThe forward SDE ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) maps each Xt=0ùñ•=x0subscriptsuperscriptùëãùñ•ùë°0subscriptùë•0X^{\\\\mathsf{F}}\\_{t=0}=x\\_{0} onto an ensemble Xt=1ùñ•subscriptsuperscriptùëãùñ•ùë°1X^{\\\\mathsf{F}}\\_{t=1} whose spread is controlled by the amplitude of œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) (and similarly for the reversed SDE  ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) that maps each Xt=1ùñ°=x1subscriptsuperscriptùëãùñ°ùë°1subscriptùë•1X^{\\\\mathsf{B}}\\_{t=1}=x\\_{1} onto an ensemble Xt=0ùñ°subscriptsuperscriptùëãùñ°ùë°0X^{\\\\mathsf{B}}\\_{t=0}).\\\nThis ensemble is not distributed according to œÅ1subscriptùúå1\\\\rho\\_{1} for finite œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) ‚Äì like with the ODE, we need to sample initial conditions from œÅ0subscriptùúå0\\\\rho\\_{0} to get solutions at time t=1ùë°1t=1 that sample œÅ1subscriptùúå1\\\\rho\\_{1} ‚Äì but its density converges towards œÅ1subscriptùúå1\\\\rho\\_{1} as œµ‚Äã(t)‚Üí‚àû‚Üíitalic-œµùë°\\\\epsilon(t)\\\\to\\\\infty.\\\nThese features are illustrated in Figure [7]Figure 7 ‚Ä£ Linear and trigonometric ùõº and ùõΩ. ‚Ä£ 4.2 Some specific design choices ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\\n###### Remark 4.1.\\\n\\\nAnother potential advantage of including the latent variable Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z is its impact on the velocity bùëèb at the end points. Since xt=0=x0subscriptùë•ùë°0subscriptùë•0x\\_{t=0}=x\\_{0} and xt=1=x1subscriptùë•ùë°1subscriptùë•1x\\_{t=1}=x\\_{1}, it is easy to see that the velocity bùëèb of the linear interpolant xtsubscriptùë•ùë°x\\_{t} defined in ( [4.1]In 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) satisfies\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | b‚Äã(0,x)ùëè0ùë•\\\\displaystyle b(0,x) | =Œ±Àô‚Äã(0)‚Äãx+Œ≤Àô‚Äã(0)‚Äãùîº‚Äã\\[x1\\]‚àílimt‚Üí0Œ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)‚Äãs0‚Äã(x),absentÀôùõº0ùë•ÀôùõΩ0ùîºdelimited-\\[\\]subscriptùë•1subscript‚Üíùë°0ùõæùë°Àôùõæùë°subscriptùë†0ùë•\\\\displaystyle=\\\\dot{\\\\alpha}(0)x+\\\\dot{\\\\beta}(0){\\\\mathbb{E}}\\[x\\_{1}\\]-\\\\lim\\_{t\\\\to 0}\\\\gamma(t)\\\\dot{\\\\gamma}(t)s\\_{0}(x), |  | (4.12) |\\\n|  | b‚Äã(1,x)ùëè1ùë•\\\\displaystyle b(1,x) | =Œ±Àô‚Äã(1)‚Äãùîº‚Äã\\[x0\\]+Œ≤Àô‚Äã(1)‚Äãx‚àílimt‚Üí1Œ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)‚Äãs1‚Äã(x),absentÀôùõº1ùîºdelimited-\\[\\]subscriptùë•0ÀôùõΩ1ùë•subscript‚Üíùë°1ùõæùë°Àôùõæùë°subscriptùë†1ùë•\\\\displaystyle=\\\\dot{\\\\alpha}(1){\\\\mathbb{E}}\\[x\\_{0}\\]+\\\\dot{\\\\beta}(1)x-\\\\lim\\_{t\\\\to 1}\\\\gamma(t)\\\\dot{\\\\gamma}(t)s\\_{1}(x), |  |\\\n\\\nwhere s0=‚àálog‚Å°œÅ0subscriptùë†0‚àásubscriptùúå0s\\_{0}=\\\\nabla\\\\log\\\\rho\\_{0} and s1=‚àálog‚Å°œÅ1subscriptùë†1‚àásubscriptùúå1s\\_{1}=\\\\nabla\\\\log\\\\rho\\_{1}. If Œ≥‚ààC2‚Äã(\\[0,1\\])ùõæsuperscriptùê∂201\\\\gamma\\\\in C^{2}(\\[0,1\\]), because Œ≥‚Äã(0)=Œ≥‚Äã(1)=0ùõæ0ùõæ10\\\\gamma(0)=\\\\gamma(1)=0, the terms involving the scores s0subscriptùë†0s\\_{0} and s1subscriptùë†1s\\_{1} in these expressions vanish. Choosing Œ≥2‚ààC1‚Äã(\\[0,1\\])superscriptùõæ2superscriptùê∂101\\\\gamma^{2}\\\\in C^{1}(\\[0,1\\]) but Œ≥ùõæ\\\\gamma not differentiable at t=0ùë°0t=0 or t=1ùë°1t=1 leaves open the possibility that the limits remain nonzero. For example, if we take one of the choices discussed in Section [3.1]Diffusive interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), i.e.\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ≥‚Äã(t)=a‚Äãt‚Äã(1‚àít),a>0,formulae-sequenceùõæùë°ùëéùë°1ùë°ùëé0\\\\gamma(t)=\\\\sqrt{at(1-t)},\\\\qquad a>0, |  | (4.13) |\\\n\\\nwe obtain\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | limt‚Üí0Œ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)=‚àílimt‚Üí1Œ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)=a2.subscript‚Üíùë°0ùõæùë°Àôùõæùë°subscript‚Üíùë°1ùõæùë°Àôùõæùë°ùëé2\\\\lim\\_{t\\\\to 0}\\\\gamma(t)\\\\dot{\\\\gamma}(t)=-\\\\lim\\_{t\\\\to 1}\\\\gamma(t)\\\\dot{\\\\gamma}(t)=\\\\frac{a}{2}. |  | (4.14) |\\\n\\\nAs a result, the choice ( [4.13]In Remark 4.1. ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) ensures that the velocity bùëèb encodes information about the score of the densities œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} at the end points.\\\nWe stress however that, while the choice of Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) given in ( [4.13]In Remark 4.1. ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is appealing because of its nontrivial influence on the velocity bùëèb at the endpoints, the user is free to explore a variety of alternatives.\\\nWe present some examples in Table [8]Table 8 ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), specifying the differentiability of Œ≥ùõæ\\\\gamma at t=0ùë°0t=0 and t=1ùë°1t=1. The function Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) specified in ( [4.13]In Remark 4.1. ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is the only featured case for which the contribution from the score is non-vanishing in the velocity bùëèb at the endpoints. In Section [7]Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we illustrate on numerical examples that there are tradeoffs between different choices of Œ≥ùõæ\\\\gamma, which might be directly related to this fact.\\\nWhen using the ODE as a generative model, the score is only felt through bùëèb, whereas it is explicit when using the SDE as a generative model.\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n| Œ≥‚Äã(t)::ùõæùë°absent\\\\gamma(t): | a‚Äãt‚Äã(1‚àít)ùëéùë°1ùë°\\\\sqrt{at(1-t)} | t‚Äã(1‚àít)ùë°1ùë°t(1-t) | œÉ^‚Äã(t)^ùúéùë°\\\\hat{\\\\sigma}(t) | sin2‚Å°(œÄ‚Äãt)superscript2ùúãùë°\\\\sin^{2}(\\\\pi t) |\\\n| C1superscriptùê∂1C^{1} at t=0,1ùë°01t=0,1 | ‚úó | ‚úì | ‚úì | ‚úì |\\\n\\\nTable 8: Differentiability of Œ≥‚Äã(t)‚Äãzùõæùë°ùëß\\\\gamma(t)z.\\\nA characterization of the possible choices of Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) with respect to their differentiability. The column specified by œÉ^‚Äã(t)^ùúéùë°\\\\hat{\\\\sigma}(t) is sum of sigmoid functions, made compact by the notation œÉ^‚Äã(t)=œÉ‚Äã(f‚Äã(t‚àí12)+1)‚àíœÉ‚Äã(f‚Äã(t‚àí12)‚àí1)‚àíœÉ‚Äã(‚àíf2+1)+œÉ‚Äã(‚àíf2‚àí1)^ùúéùë°ùúéùëìùë°121ùúéùëìùë°121ùúéùëì21ùúéùëì21\\\\hat{\\\\sigma}(t)=\\\\sigma(f(t-\\\\tfrac{1}{2})+1)-\\\\sigma(f(t-\\\\tfrac{1}{2})-1)-\\\\sigma(-\\\\tfrac{f}{2}+1)+\\\\sigma(-\\\\tfrac{f}{2}-1), where œÉ‚Äã(t)=et/(1+et)ùúéùë°superscriptùëíùë°1superscriptùëíùë°\\\\sigma(t)=e^{t}/(1+e^{t}) and fùëìf is a scaling factor.\\\n\\\n### 4.4 Spatially linear one-sided interpolants\\\n\\\nMuch of the discussion above generalizes to one-sided interpolants if we take the function J‚Äã(t,x1)ùêΩùë°subscriptùë•1J(t,x\\_{1}) in ( [3.15]In Definition 3.3 (One-sided stochastic interpolant). ‚Ä£ 3.2 One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) to be linear in x1subscriptùë•1x\\_{1} and define\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | xtùóàùóå,ùóÖùóÇùóá=Œ±‚Äã(t)‚Äãz+Œ≤‚Äã(t)‚Äãx1,t‚àà\\[0,1\\]formulae-sequencesubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùõºùë°ùëßùõΩùë°subscriptùë•1ùë°01x^{\\\\mathsf{os,lin}}\\_{t}=\\\\alpha(t)z+\\\\beta(t)x\\_{1},\\\\qquad t\\\\in\\[0,1\\] |  | (4.15) |\\\n\\\nwhere Œ±2,Œ≤‚ààC2‚Äã(\\[0,1\\])superscriptùõº2ùõΩsuperscriptùê∂201\\\\alpha^{2},\\\\beta\\\\in C^{2}(\\[0,1\\]) and Œ±‚Äã(0)=Œ≤‚Äã(1)=1ùõº0ùõΩ11\\\\alpha(0)=\\\\beta(1)=1, Œ±‚Äã(1)=Œ≤‚Äã(0)=0ùõº1ùõΩ00\\\\alpha(1)=\\\\beta(0)=0, and Œ±‚Äã(t)>0ùõºùë°0\\\\alpha(t)>0 for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1).\\\nThe velocity bùëèb and the score sùë†s defined in ( [2.10]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.14]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can now be expressed as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t,x)=Œ±Àô‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,x)+Œ≤Àô‚Äã(t)‚ÄãŒ∑1ùóàùóå‚Äã(t,x),s‚Äã(t,x)=‚àíŒ±‚àí1‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,x),formulae-sequenceùëèùë°ùë•Àôùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°ùë•ÀôùõΩùë°subscriptsuperscriptùúÇùóàùóå1ùë°ùë•ùë†ùë°ùë•superscriptùõº1ùë°subscriptsuperscriptùúÇùóàùóåùëßùë°ùë•b(t,x)=\\\\dot{\\\\alpha}(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x)+\\\\dot{\\\\beta}(t)\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x),\\\\qquad s(t,x)=-\\\\alpha^{-1}(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x), |  | (4.16) |\\\n\\\nwhere the second expression holds for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1) and we defined:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∑zùóàùóå‚Äã(t,x)=ùîº‚Äã(z\\|xtùóàùóå,ùóÖùóÇùóá=x),Œ∑1ùóàùóå‚Äã(t,x)=ùîº‚Äã(x1\\|xtùóàùóå,ùóÖùóÇùóá=x).formulae-sequencesubscriptsuperscriptùúÇùóàùóåùëßùë°ùë•ùîºconditionalùëßsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùë•subscriptsuperscriptùúÇùóàùóå1ùë°ùë•ùîºconditionalsubscriptùë•1subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùë•\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x)={\\\\mathbb{E}}(z\\|x^{\\\\mathsf{os,lin}}\\_{t}=x),\\\\qquad\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x)={\\\\mathbb{E}}(x\\_{1}\\|x^{\\\\mathsf{os,lin}}\\_{t}=x). |  | (4.17) |\\\n\\\nNote that, by definition of the conditional expectation, Œ∑zùóàùóåsubscriptsuperscriptùúÇùóàùóåùëß\\\\eta^{\\\\mathsf{os}}\\_{z} and Œ∑1ùóàùóåsubscriptsuperscriptùúÇùóàùóå1\\\\eta^{\\\\mathsf{os}}\\_{1} satisfy\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àÄ(t,x)‚àà\\[0,1\\]√ó‚Ñùd:Œ±‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,x)+Œ≤‚Äã(t)‚ÄãŒ∑1ùóàùóå‚Äã(t,x)=x.formulae-sequencefor-allùë°ùë•01superscript‚Ñùùëë:ùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°ùë•ùõΩùë°subscriptsuperscriptùúÇùóàùóå1ùë°ùë•ùë•\\\\forall(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\quad:\\\\quad\\\\alpha(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x)+\\\\beta(t)\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x)=x. |  | (4.18) |\\\n\\\nAs a result, only one of them needs to be estimated.\\\nFor example, we can express Œ∑1ùóàùóåsubscriptsuperscriptùúÇùóàùóå1\\\\eta^{\\\\mathsf{os}}\\_{1} as a function of Œ∑zùóàùóåsubscriptsuperscriptùúÇùóàùóåùëß\\\\eta^{\\\\mathsf{os}}\\_{z} for all tùë°t such that Œ≤‚Äã(t)‚â†0ùõΩùë°0\\\\beta(t)\\\\not=0, and use the result to express the velocity ( [4.16]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t,x)=Œ≤Àô‚Äã(t)‚ÄãŒ≤‚àí1‚Äã(t)‚Äãx+(Œ±Àô‚Äã(t)‚àíŒ±‚Äã(t)‚ÄãŒ≤Àô‚Äã(t)‚ÄãŒ≤‚àí1‚Äã(t))‚ÄãŒ∑zùóàùóå‚Äã(t,x)‚àÄt:Œ≤‚Äã(t)‚â†0.:ùëèùë°ùë•ÀôùõΩùë°superscriptùõΩ1ùë°ùë•Àôùõºùë°ùõºùë°ÀôùõΩùë°superscriptùõΩ1ùë°subscriptsuperscriptùúÇùóàùóåùëßùë°ùë•for-allùë°ùõΩùë°0b(t,x)=\\\\dot{\\\\beta}(t)\\\\beta^{-1}(t)x+\\\\big{(}\\\\dot{\\\\alpha}(t)-\\\\alpha(t)\\\\dot{\\\\beta}(t)\\\\beta^{-1}(t)\\\\big{)}\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x)\\\\qquad\\\\forall t\\ :\\ \\\\beta(t)\\\\not=0. |  | (4.19) |\\\n\\\nAssuming that Œ≤‚Äã(t)‚â†0ùõΩùë°0\\\\beta(t)\\\\not=0 for all t‚àà(0,1\\]ùë°01t\\\\in(0,1\\], this formula only needs to be supplemented at t=0ùë°0t=0 with\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(0,x)=Œ±Àô‚Äã(0)‚Äãx+Œ≤Àô‚Äã(0)‚Äãùîº‚Äã\\[x1\\]ùëè0ùë•Àôùõº0ùë•ÀôùõΩ0ùîºdelimited-\\[\\]subscriptùë•1b(0,x)=\\\\dot{\\\\alpha}(0)x+\\\\dot{\\\\beta}(0){\\\\mathbb{E}}\\[x\\_{1}\\] |  | (4.20) |\\\n\\\nwhich follows from ( [4.16]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) since xt=0ùóàùóå,ùóÖùóÇùóá=zsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùëßx^{\\\\mathsf{os,lin}}\\_{t=0}=z.\\\nLater in Section [5.2]Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") we will show that using the velocity bùëèb in ( [4.19]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) to solve the probability flow ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can be seen as using a denoiser to construct a generative model.\\\n\\\nFinally note that Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} and/or Œ∑1subscriptùúÇ1\\\\eta\\_{1} can be estimated using the following two objective functions, respectively:\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ‚ÑíŒ∑z‚Äã(Œ∑^zùóàùóå)subscript‚ÑísubscriptùúÇùëßsubscriptsuperscript^ùúÇùóàùóåùëß\\\\displaystyle\\\\mathcal{L}\\_{\\\\eta\\_{z}}(\\\\hat{\\\\eta}^{\\\\mathsf{os}}\\_{z}) | =‚à´01ùîº‚Äã\\[12‚Äã\\|Œ∑^zùóàùóå‚Äã(t,xtùóàùóå,ùóÖùóÇùóá)\\|2‚àíz‚ãÖŒ∑^zùóàùóå‚Äã(t,xtùóàùóå,ùóÖùóÇùóá)\\]‚Äãùëët,absentsuperscriptsubscript01ùîºdelimited-\\[\\]12superscriptsubscriptsuperscript^ùúÇùóàùóåùëßùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°2‚ãÖùëßsubscriptsuperscript^ùúÇùóàùóåùëßùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°differential-dùë°\\\\displaystyle=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left\\[\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}^{\\\\mathsf{os}}\\_{z}(t,x^{\\\\mathsf{os,lin}}\\_{t})\\|^{2}-z\\\\cdot\\\\hat{\\\\eta}^{\\\\mathsf{os}}\\_{z}(t,x^{\\\\mathsf{os,lin}}\\_{t})\\\\right\\]dt, |  | (4.21) |\\\n|  | ‚ÑíŒ∑1‚Äã(Œ∑^1ùóàùóå)subscript‚ÑísubscriptùúÇ1subscriptsuperscript^ùúÇùóàùóå1\\\\displaystyle\\\\mathcal{L}\\_{\\\\eta\\_{1}}(\\\\hat{\\\\eta}^{\\\\mathsf{os}}\\_{1}) | =‚à´01ùîº‚Äã\\[12‚Äã\\|Œ∑^1ùóàùóå‚Äã(t,xtùóàùóå,ùóÖùóÇùóá)\\|2‚àíx1‚ãÖŒ∑^1ùóàùóå‚Äã(t,xtùóàùóå,ùóÖùóÇùóá)\\]‚Äãùëët.absentsuperscriptsubscript01ùîºdelimited-\\[\\]12superscriptsubscriptsuperscript^ùúÇùóàùóå1ùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°2‚ãÖsubscriptùë•1subscriptsuperscript^ùúÇùóàùóå1ùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°differential-dùë°\\\\displaystyle=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\left\\[\\\\tfrac{1}{2}\\|\\\\hat{\\\\eta}^{\\\\mathsf{os}}\\_{1}(t,x^{\\\\mathsf{os,lin}}\\_{t})\\|^{2}-x\\_{1}\\\\cdot\\\\hat{\\\\eta}^{\\\\mathsf{os}}\\_{1}(t,x^{\\\\mathsf{os,lin}}\\_{t})\\\\right\\]dt. |  |\\\n\\",
            "citations": null
          },
          "5 Connections with other methods\\": {
            "content": "\\\nIn this section, we discuss connections between the stochastic interpolant framework and the score-based diffusion method \\[ [60])\\], the stochastic localization framework \\[ [21]), [20]), [45])\\]), denoising methods \\[ [53]), [30]), [31]), [25])\\], and the rectified flow method introduced in \\[ [41])\\].\\\n\\\n### 5.1 Score-based diffusion models and stochastic localization\\\n\\\nScore-based diffusion models (SBDM) are based on variants of the Ornstein-Uhlenbeck process\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d‚ÄãZœÑ=‚àíZœÑ‚Äãd‚Äãt+2‚Äãd‚ÄãWœÑ,ZœÑ=0‚àºœÅ1,formulae-sequenceùëësubscriptùëçùúèsubscriptùëçùúèùëëùë°2ùëësubscriptùëäùúèsimilar-tosubscriptùëçùúè0subscriptùúå1dZ\\_{\\\\tau}=-Z\\_{\\\\tau}dt+\\\\sqrt{2}dW\\_{\\\\tau},\\\\qquad Z\\_{\\\\tau=0}\\\\sim\\\\rho\\_{1}, |  | (5.1) |\\\n\\\nwhich has the property that the marginal density of its solution at time œÑùúè\\\\tau converges to a standard normal as œÑùúè\\\\tau tends towards infinity. By learning the score of the density of ZœÑsubscriptùëçùúèZ\\_{\\\\tau}, we can write the associated backward SDE for ( [5.1]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), which can then be used as a generative model ‚Äì this backwards SDE is also the one that is used in the stochastic localization process, see \\[ [45])\\].\\\n\\\nTo see the connection with stochastic interpolants, notice that the solution of ( [5.1]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) from the initial condition ZœÑ=0=x1‚àºœÅ1subscriptùëçùúè0subscriptùë•1similar-tosubscriptùúå1Z\\_{\\\\tau=0}=x\\_{1}\\\\sim\\\\rho\\_{1} can be written exactly as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ZœÑ=x1‚Äãe‚àíœÑ+2‚Äã‚à´0œÑe‚àíœÑ+s‚ÄãùëëWs.subscriptùëçùúèsubscriptùë•1superscriptùëíùúè2superscriptsubscript0ùúèsuperscriptùëíùúèùë†differential-dsubscriptùëäùë†Z\\_{\\\\tau}=x\\_{1}e^{-\\\\tau}+\\\\sqrt{2}\\\\int\\_{0}^{\\\\tau}e^{-\\\\tau+s}dW\\_{s}. |  | (5.2) |\\\n\\\nAs a result, the law of ZœÑsubscriptùëçùúèZ\\_{\\\\tau} conditioned on ZœÑ=0=x1subscriptùëçùúè0subscriptùë•1Z\\_{\\\\tau=0}=x\\_{1} is given by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ZœÑ‚àºùñ≠‚Äã(x1‚Äãe‚àíœÑ,(1‚àíe‚àí2‚ÄãœÑ)),similar-tosubscriptùëçùúèùñ≠subscriptùë•1superscriptùëíùúè1superscriptùëí2ùúèZ\\_{\\\\tau}\\\\sim{\\\\sf N}(x\\_{1}e^{-\\\\tau},(1-e^{-2\\\\tau})), |  | (5.3) |\\\n\\\nfor any time œÑ‚àà\\[0,‚àû)ùúè0\\\\tau\\\\in\\[0,\\\\infty). This is also the law of the process\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | yœÑ=x1‚Äãe‚àíœÑ+1‚àíe‚àí2‚ÄãœÑ‚Äãz,z‚àºùñ≠‚Äã(0,Id),œÑ‚àà\\[0,‚àû).formulae-sequencesubscriptùë¶ùúèsubscriptùë•1superscriptùëíùúè1superscriptùëí2ùúèùëßformulae-sequencesimilar-toùëßùñ≠0Idùúè0y\\_{\\\\tau}=x\\_{1}e^{-\\\\tau}+\\\\sqrt{1-e^{-2\\\\tau}}\\\\,z,\\\\qquad z\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}),\\\\qquad\\\\tau\\\\in\\[0,\\\\infty). |  | (5.4) |\\\n\\\nIf we let x1‚àºœÅ1similar-tosubscriptùë•1subscriptùúå1x\\_{1}\\\\sim\\\\rho\\_{1} with x1‚üÇzperpendicular-tosubscriptùë•1ùëßx\\_{1}\\\\perp z, the process yœÑsubscriptùë¶ùúèy\\_{\\\\tau} is similar to a one-sided stochastic interpolant, except\\\nthe density of yœÑsubscriptùë¶ùúèy\\_{\\\\tau} only converges to ùñ≠‚Äã(0,Id)ùñ≠0Id{\\\\sf N}(0,\\\\text{\\\\it Id}) as œÑ‚Üí‚àû‚Üíùúè\\\\tau\\\\to\\\\infty; by contrast, the one-sided interpolants we introduced in Section [3.2]One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") converge on the finite interval \\[0,1\\]01\\[0,1\\].\\\nIn SBDM, this is handled by capping the evolution of ZœÑsubscriptùëçùúèZ\\_{\\\\tau} to a finite time interval \\[0,T\\]0ùëá\\[0,T\\] with T<‚àûùëáT<\\\\infty, and then by using the backward SDE associated with ( [5.1]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) restricted to \\[0,T\\]0ùëá\\[0,T\\].\\\nHowever, this introduces a bias that is not present with one-sided stochastic interpolants, because the final condition used for the backwards SDE in SBDM is drawn from ùñ≠‚Äã(0,Id)ùñ≠0Id{\\\\sf N}(0,\\\\text{\\\\it Id}) even though the density of the process ( [5.1]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is not Gaussian at time TùëáT.\\\n\\\nWe can, however, turn ( [5.4]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) into a one-sided linear stochastic interpolant by defining t=e‚àíœÑùë°superscriptùëíùúèt=e^{-\\\\tau} and by choosing Œ±‚Äã(t)ùõºùë°\\\\alpha(t) and Œ≤‚Äã(t)ùõΩùë°\\\\beta(t) in ( [4.15]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) to have a specific form. More precisely, evaluating ( [5.4]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) at œÑ=‚àílog‚Å°tùúèùë°\\\\tau=-\\\\log t,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | yœÑ=‚àílog‚Å°t=1‚àít2‚Äãz+t‚Äãx1‚â°xtùóàùóå,ùóÖùóÇùóáforŒ±‚Äã(t)=1‚àít2,Œ≤‚Äã(t)=t.formulae-sequencesubscriptùë¶ùúèùë°1superscriptùë°2ùëßùë°subscriptùë•1subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°forùõºùë°1superscriptùë°2ùõΩùë°ùë°y\\_{\\\\tau=-\\\\log t}=\\\\sqrt{1-t^{2}}z+tx\\_{1}\\\\equiv x^{\\\\mathsf{os,lin}}\\_{t}\\\\quad\\\\text{for}\\\\quad\\\\alpha(t)=\\\\sqrt{1-t^{2}},\\\\quad\\\\beta(t)=t. |  | (5.5) |\\\n\\\nWith this choice of Œ±‚Äã(t)ùõºùë°\\\\alpha(t) and Œ≤‚Äã(t)ùõΩùë°\\\\beta(t), from ( [4.16]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) we get the velocity field\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t,x)=‚àít1‚àít2‚ÄãŒ∑zùóàùóå‚Äã(t,x)+Œ∑1ùóàùóå‚Äã(t,x)‚â°t‚Äãs‚Äã(t,x)+Œ∑1ùóàùóå‚Äã(t,x)ùëèùë°ùë•ùë°1superscriptùë°2subscriptsuperscriptùúÇùóàùóåùëßùë°ùë•subscriptsuperscriptùúÇùóàùóå1ùë°ùë•ùë°ùë†ùë°ùë•subscriptsuperscriptùúÇùóàùóå1ùë°ùë•b(t,x)=-\\\\frac{t}{\\\\sqrt{1-t^{2}}}\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x)+\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x)\\\\equiv ts(t,x)+\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x) |  | (5.6) |\\\n\\\nwhere Œ∑zùóàùóåsuperscriptsubscriptùúÇùëßùóàùóå\\\\eta\\_{z}^{\\\\mathsf{os}} and Œ∑1ùóàùóåsuperscriptsubscriptùúÇ1ùóàùóå\\\\eta\\_{1}^{\\\\mathsf{os}} are defined in ( [4.17]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nThis expression shows that the velocity bùëèb used in the probability flow ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is well-behaved at all times, including at t=1ùë°1t=1 where Œ±Àô‚Äã(t)Àôùõºùë°\\\\dot{\\\\alpha}(t) is singular.\\\nThe same is true for the drift bùñ•‚Äã(t,x)=b‚Äã(t,x)+œµ‚Äã(t)‚Äãs‚Äã(t,x)subscriptùëèùñ•ùë°ùë•ùëèùë°ùë•italic-œµùë°ùë†ùë°ùë•b\\_{\\\\mathsf{F}}(t,x)=b(t,x)+\\\\epsilon(t)s(t,x) used in the forward SDE ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), regardless of the choice of œµ‚ààC0‚Äã(\\[0,1\\])italic-œµsuperscriptùê∂001\\\\epsilon\\\\in C^{0}(\\[0,1\\]) with œµ‚Äã(t)‚â•0italic-œµùë°0\\\\epsilon(t)\\\\geq 0.\\\nThis shows that casting SBDM into a one-sided linear stochastic interpolant ( [4.15]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) allows the construction of unbiased generative models that operate on t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\].\\\nThis comes at no extra computational cost, since only one of the two functions defined in ( [4.17]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) needs to be estimated, which is akin to estimating the score in SBDM.\\\n\\\nIt is worth comparing the above procedure to an equivalent change of time at the level of the diffusion process ( [5.1]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), which we now show leads to singular terms that pose numerical and analytical difficulties.\\\nIndeed, if we define Ztùñ°=ZœÑ=‚àílog‚Å°tsubscriptsuperscriptùëçùñ°ùë°subscriptùëçùúèùë°Z^{\\\\mathsf{B}}\\_{t}=Z\\_{\\\\tau=-\\\\log t}, from ( [5.1]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) we obtain\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d‚ÄãZtùñ°=t‚àí1‚ÄãZtùñ°‚Äãd‚Äãt+2‚Äãt‚àí1‚Äãd‚ÄãWtùñ°,Zt=1ùñ°‚àºœÅ1,formulae-sequenceùëësubscriptsuperscriptùëçùñ°ùë°superscriptùë°1subscriptsuperscriptùëçùñ°ùë°ùëëùë°2superscriptùë°1ùëësubscriptsuperscriptùëäùñ°ùë°similar-tosubscriptsuperscriptùëçùñ°ùë°1subscriptùúå1dZ^{\\\\mathsf{B}}\\_{t}=t^{-1}Z^{\\\\mathsf{B}}\\_{t}dt+\\\\sqrt{2t^{-1}}dW^{\\\\mathsf{B}}\\_{t},\\\\quad Z^{\\\\mathsf{B}}\\_{t=1}\\\\sim\\\\rho\\_{1}, |  | (5.7) |\\\n\\\nto be solved backwards in time.\\\nBecause of the factor t‚àí1superscriptùë°1t^{-1}, this SDE cannot easily be solved until t=0ùë°0t=0, which corresponds to œÑ=‚àûùúè\\\\tau=\\\\infty in the original ( [5.1]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nFor the same reason, the forward SDE associated with ( [5.7]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"))\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d‚ÄãZtùñ•=t‚àí1‚ÄãZtùñ•‚Äãd‚Äãt+2‚Äãt‚àí1‚Äãs‚Äã(t,Ztùñ•)‚Äãd‚Äãt+2‚Äãt‚àí1‚Äãd‚ÄãWt,ùëësubscriptsuperscriptùëçùñ•ùë°superscriptùë°1subscriptsuperscriptùëçùñ•ùë°ùëëùë°2superscriptùë°1ùë†ùë°subscriptsuperscriptùëçùñ•ùë°ùëëùë°2superscriptùë°1ùëësubscriptùëäùë°dZ^{\\\\mathsf{F}}\\_{t}=t^{-1}Z^{\\\\mathsf{F}}\\_{t}dt+2t^{-1}s(t,Z^{\\\\mathsf{F}}\\_{t})dt+\\\\sqrt{2t^{-1}}dW\\_{t}, |  | (5.8) |\\\n\\\ncannot be solved from t=0ùë°0t=0, where formally Zt=0ùñ•=dZt=0ùñ°=ZœÑ=‚àû‚àºùñ≠‚Äã(0,Id)superscriptùëësubscriptsuperscriptùëçùñ•ùë°0subscriptsuperscriptùëçùñ°ùë°0subscriptùëçùúèsimilar-toùñ≠0IdZ^{\\\\mathsf{F}}\\_{t=0}\\\\stackrel{{\\\\scriptstyle d}}{{=}}Z^{\\\\mathsf{B}}\\_{t=0}=Z\\_{\\\\tau=\\\\infty}\\\\sim\\\\mathsf{N}(0,\\\\text{\\\\it Id}).\\\nThis means it cannot be used as a generative model unless we start from some t>0ùë°0t>0, which introduces a bias.\\\nImportantly, this problem does not arise with the stochastic interpolant framework, because the construction of the density œÅ‚Äã(t)ùúåùë°\\\\rho(t) connecting œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1} is handled separately from the construction of the process that generates samples from œÅ‚Äã(t)ùúåùë°\\\\rho(t).\\\nBy contrast, SBDM combines these two operations into one, leading to the singularity at t=0ùë°0t=0 in the coefficients in ( [5.7]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [5.8]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n\\\n###### Remark 5.1.\\\n\\\nTo emphasize the last point made above, we stress that there is no contradiction between having a singular drift and diffusion coefficient in ( [5.8]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and being able to write a nonsingular SDE with stochastic interpolants. To see why, notice that the stochastic interpolant tells us that we can change the diffusion coefficient in ( [5.8]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) to any nonsingular œµ‚ààC0‚Äã(\\[0,1\\])italic-œµsuperscriptùê∂001\\\\epsilon\\\\in C^{0}(\\[0,1\\]) with œµ‚â•0italic-œµ0\\\\epsilon\\\\geq 0 and replace this SDE with\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | d‚ÄãXtùñ•=t‚àí1‚ÄãZtùñ•‚Äãd‚Äãt+(t‚àí1+œµ‚Äã(t))‚Äãs‚Äã(t,Xtùñ•)‚Äãd‚Äãt+2‚Äãœµ‚Äã(t)‚Äãd‚ÄãWt,ùëësubscriptsuperscriptùëãùñ•ùë°superscriptùë°1subscriptsuperscriptùëçùñ•ùë°ùëëùë°superscriptùë°1italic-œµùë°ùë†ùë°subscriptsuperscriptùëãùñ•ùë°ùëëùë°2italic-œµùë°ùëësubscriptùëäùë°dX^{\\\\mathsf{F}}\\_{t}=t^{-1}Z^{\\\\mathsf{F}}\\_{t}dt+(t^{-1}+\\\\epsilon(t))s(t,X^{\\\\mathsf{F}}\\_{t})dt+\\\\sqrt{2\\\\epsilon(t)}dW\\_{t}, |  | (5.9) |\\\n\\\nThis SDE has the property that Xt=1ùñ•‚àºœÅ1similar-tosubscriptsuperscriptùëãùñ•ùë°1subscriptùúå1X^{\\\\mathsf{F}}\\_{t=1}\\\\sim\\\\rho\\_{1} if Xt=0ùñ•‚àºœÅ0similar-tosubscriptsuperscriptùëãùñ•ùë°0subscriptùúå0X^{\\\\mathsf{F}}\\_{t=0}\\\\sim\\\\rho\\_{0}, and its drift is also nonsingular at t=0ùë°0t=0 and given precisely by ( [5.6]In 5.1 Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). Indeed, using the constraint ( [4.18]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), which here reads x=1‚àít2‚ÄãŒ∑zùóàùóå‚Äã(t,x)+t‚ÄãŒ∑1ùóàùóå‚Äã(t,x)‚â°‚àí(1‚àít2)‚Äãs‚Äã(t,x)+t‚ÄãŒ∑1ùóàùóå‚Äã(t,x)ùë•1superscriptùë°2subscriptsuperscriptùúÇùóàùóåùëßùë°ùë•ùë°subscriptsuperscriptùúÇùóàùóå1ùë°ùë•1superscriptùë°2ùë†ùë°ùë•ùë°subscriptsuperscriptùúÇùóàùóå1ùë°ùë•x=\\\\sqrt{1-t^{2}}\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x)+t\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x)\\\\equiv-(1-t^{2})s(t,x)+t\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x), it is easy to see that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | t‚àí1‚Äãx+t‚àí1‚Äãs‚Äã(t,x)=t‚Äãs‚Äã(t,x)+Œ∑1ùóàùóå‚Äã(t,x),superscriptùë°1ùë•superscriptùë°1ùë†ùë°ùë•ùë°ùë†ùë°ùë•superscriptsubscriptùúÇ1ùóàùóåùë°ùë•t^{-1}x+t^{-1}s(t,x)=ts(t,x)+\\\\eta\\_{1}^{\\\\mathsf{os}}(t,x), |  | (5.10) |\\\n\\\nwhich is nonsingular at t=0ùë°0t=0.\\\n\\\n### 5.2 Denoising methods\\\n\\\nConsider the spatially-linear one-sided stochastic interpolant defined in ( [4.15]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). By solving this equation for x1subscriptùë•1x\\_{1}, we obtain\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | x1=Œ≤‚àí1‚Äã(t)‚Äã(xtùóàùóå,ùóÖùóÇùóá‚àíŒ±‚Äã(t)‚Äãz)t‚àà(0,1\\].formulae-sequencesubscriptùë•1superscriptùõΩ1ùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùõºùë°ùëßùë°01x\\_{1}=\\\\beta^{-1}(t)\\\\left(x^{\\\\mathsf{os,lin}}\\_{t}-\\\\alpha(t)z\\\\right)\\\\qquad t\\\\in(0,1\\]. |  | (5.11) |\\\n\\\nTaking a conditional expectation at fixed xtùóàùóå,ùóÖùóÇùóásubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°x^{\\\\mathsf{os,lin}}\\_{t} and using ( [4.17]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) implies that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ùîº‚Äã(x1\\|xtùóàùóå,ùóÖùóÇùóá)=Œ∑1ùóàùóå‚Äã(t,xtùóàùóå,ùóÖùóÇùóá)=Œ≤‚àí1‚Äã(t)‚Äã(xtùóàùóå,ùóÖùóÇùóá‚àíŒ±‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,xtùóàùóå,ùóÖùóÇùóá))t‚àà(0,1\\]formulae-sequenceùîºconditionalsubscriptùë•1subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°subscriptsuperscriptùúÇùóàùóå1ùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°superscriptùõΩ1ùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùë°01{\\\\mathbb{E}}(x\\_{1}\\|x^{\\\\mathsf{os,lin}}\\_{t})=\\\\eta^{\\\\mathsf{os}}\\_{1}(t,x^{\\\\mathsf{os,lin}}\\_{t})=\\\\beta^{-1}(t)\\\\left(x^{\\\\mathsf{os,lin}}\\_{t}-\\\\alpha(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x^{\\\\mathsf{os,lin}}\\_{t})\\\\right)\\\\qquad t\\\\in(0,1\\] |  | (5.12) |\\\n\\\nwhile trivially ùîº‚Äã(x1\\|xt=0ùóàùóå,ùóÖùóÇùóá)=ùîº‚Äã\\[x1\\]ùîºconditionalsubscriptùë•1subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùîºdelimited-\\[\\]subscriptùë•1{\\\\mathbb{E}}(x\\_{1}\\|x^{\\\\mathsf{os,lin}}\\_{t=0})={\\\\mathbb{E}}\\[x\\_{1}\\] since xt=0ùóàùóå,ùóÖùóÇùóá=zsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùëßx^{\\\\mathsf{os,lin}}\\_{t=0}=z. This expression is commonly used in denoising methods \\[ [53]), [31])\\], and it is Stein‚Äôs unbiased risk estimator (SURE) for x1subscriptùë•1x\\_{1} given the noisy information in xtùóàùóå,ùóÖùóÇùóásubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°x^{\\\\mathsf{os,lin}}\\_{t}\\[ [61])\\].\\\nRather than considering the conditional expectation of x1subscriptùë•1x\\_{1}, we can consider an analogous quantity for xsùóàùóå,ùóÖùóÇùóásuperscriptsubscriptùë•ùë†ùóàùóåùóÖùóÇùóáx\\_{s}^{\\\\mathsf{os,lin}} for any s‚àà\\[0,1\\]ùë†01s\\\\in\\[0,1\\]; this leads to the following result.\\\n\\\n###### Lemma 5.2(SURE).\\\n\\\nFor s‚àà\\[0,1\\]ùë†01s\\\\in\\[0,1\\], we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ùîº‚Äã(xsùóàùóå,ùóÖùóÇùóá\\|xtùóàùóå,ùóÖùóÇùóá)=Œ≤‚Äã(s)Œ≤‚Äã(t)‚Äãxtùóàùóå,ùóÖùóÇùóá+(Œ±‚Äã(s)‚àíŒ±‚Äã(t)‚ÄãŒ≤‚Äã(s)Œ≤‚Äã(t))‚ÄãŒ∑zùóàùóå‚Äã(t,xtùóàùóå,ùóÖùóÇùóá)t‚àà(0,1\\]formulae-sequenceùîºconditionalsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë†subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùõΩùë†ùõΩùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùõºùë†ùõºùë°ùõΩùë†ùõΩùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°ùë°01{\\\\mathbb{E}}(x^{\\\\mathsf{os,lin}}\\_{s}\\|x^{\\\\mathsf{os,lin}}\\_{t})=\\\\frac{\\\\beta(s)}{\\\\beta(t)}x^{\\\\mathsf{os,lin}}\\_{t}+\\\\left(\\\\alpha(s)-\\\\frac{\\\\alpha(t)\\\\beta(s)}{\\\\beta(t)}\\\\right)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,x^{\\\\mathsf{os,lin}}\\_{t})\\\\qquad t\\\\in(0,1\\] |  | (5.13) |\\\n\\\nand ùîº‚Äã(xsùóàùóå,ùóÖùóÇùóá\\|xt=0ùóàùóå,ùóÖùóÇùóá)=Œ±‚Äã(s)‚Äãxt=0ùóàùóå,ùóÖùóÇùóá+Œ≤‚Äã(s)‚Äãùîº‚Äã\\[x1\\]ùîºconditionalsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë†subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùõºùë†subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùõΩùë†ùîºdelimited-\\[\\]subscriptùë•1{\\\\mathbb{E}}(x^{\\\\mathsf{os,lin}}\\_{s}\\|x^{\\\\mathsf{os,lin}}\\_{t=0})=\\\\alpha(s)x^{\\\\mathsf{os,lin}}\\_{t=0}+\\\\beta(s){\\\\mathbb{E}}\\[x\\_{1}\\].\\\n\\\n###### Proof.\\\n\\\n( [5.13]In Lemma 5.2 (SURE). ‚Ä£ 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) follows from inserting ( [5.11]In 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) in the expression for xsùóàùóå,ùóÖùóÇùóásubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë†x^{\\\\mathsf{os,lin}}\\_{s} and taking the conditional expectation using the definition of Œ∑1ùóàùóåsuperscriptsubscriptùúÇ1ùóàùóå\\\\eta\\_{1}^{\\\\mathsf{os}} and Œ∑zùóàùóåsuperscriptsubscriptùúÇùëßùóàùóå\\\\eta\\_{z}^{\\\\mathsf{os}} in ( [4.17]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). ùîº‚Äã(xsùóàùóå,ùóÖùóÇùóá\\|xt=0ùóàùóå,ùóÖùóÇùóá)=Œ±‚Äã(s)‚Äãxt=0ùóàùóå,ùóÖùóÇùóá+Œ≤‚Äã(s)‚Äãùîº‚Äã\\[x1\\]ùîºconditionalsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë†subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùõºùë†subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùõΩùë†ùîºdelimited-\\[\\]subscriptùë•1{\\\\mathbb{E}}(x^{\\\\mathsf{os,lin}}\\_{s}\\|x^{\\\\mathsf{os,lin}}\\_{t=0})=\\\\alpha(s)x^{\\\\mathsf{os,lin}}\\_{t=0}+\\\\beta(s){\\\\mathbb{E}}\\[x\\_{1}\\] follows from xt=0ùóàùóå,ùóÖùóÇùóá=zsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°0ùëßx^{\\\\mathsf{os,lin}}\\_{t=0}=z together with ( [5.11]In 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n‚àé\\\n\\\nAt this stage, equations ( [5.11]In 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [5.13]In Lemma 5.2 (SURE). ‚Ä£ 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) cannot be used as generative models: the random variable ùîº‚Äã(x1\\|xtùóàùóå,ùóÖùóÇùóá)ùîºconditionalsubscriptùë•1subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°{\\\\mathbb{E}}(x\\_{1}\\|x^{\\\\mathsf{os,lin}}\\_{t}) is not a sample of œÅ1subscriptùúå1\\\\rho\\_{1}, and the random variable ùîº‚Äã(xsùóàùóå,ùóÖùóÇùóá\\|xtùóàùóå,ùóÖùóÇùóá)ùîºconditionalsubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë†subscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°{\\\\mathbb{E}}(x^{\\\\mathsf{os,lin}}\\_{s}\\|x^{\\\\mathsf{os,lin}}\\_{t}) is not a sample from œÅ‚Äã(s)ùúåùë†\\\\rho(s), the density of xsùóàùóå,ùóÖùóÇùóásubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë†x^{\\\\mathsf{os,lin}}\\_{s}.\\\nHowever, the following result shows that if we iterate upon formula ( [5.13]In Lemma 5.2 (SURE). ‚Ä£ 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) by taking infinitesimal steps, we obtain a generative model consistent with the probability flow equation ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) associated with xtùóàùóå,ùóÖùóÇùóásubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°x^{\\\\mathsf{os,lin}}\\_{t}.\\\n{restatable}theoremdn\\\n\\\nLet tj=j/Nsubscriptùë°ùëóùëóùëÅt\\_{j}=j/N with j‚àà{1,‚Ä¶,N}ùëó1‚Ä¶ùëÅj\\\\in\\\\{1,\\\\ldots,N\\\\}, set X1ùñΩùñæùóá=zsubscriptsuperscriptùëãùñΩùñæùóá1ùëßX^{\\\\mathsf{den}}\\_{1}=z, and define for j=1,‚Ä¶,N‚àí1ùëó1‚Ä¶ùëÅ1j=1,\\\\ldots,N-1,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Xj+1ùñΩùñæùóá=Œ≤‚Äã(tj+1)Œ≤‚Äã(tj)‚ÄãXjùñΩùñæùóá+(Œ±‚Äã(tj+1)‚àíŒ±‚Äã(tj)‚ÄãŒ≤‚Äã(tj+1)Œ≤‚Äã(tj))‚ÄãŒ∑zùóàùóå‚Äã(tj,XjùñΩùñæùóá).subscriptsuperscriptùëãùñΩùñæùóáùëó1ùõΩsubscriptùë°ùëó1ùõΩsubscriptùë°ùëósubscriptsuperscriptùëãùñΩùñæùóáùëóùõºsubscriptùë°ùëó1ùõºsubscriptùë°ùëóùõΩsubscriptùë°ùëó1ùõΩsubscriptùë°ùëósubscriptsuperscriptùúÇùóàùóåùëßsubscriptùë°ùëósubscriptsuperscriptùëãùñΩùñæùóáùëóX^{\\\\mathsf{den}}\\_{{j+1}}=\\\\frac{\\\\beta(t\\_{j+1})}{\\\\beta(t\\_{j})}X^{\\\\mathsf{den}}\\_{j}+\\\\left(\\\\alpha(t\\_{j+1})-\\\\frac{\\\\alpha(t\\_{j})\\\\beta(t\\_{j+1})}{\\\\beta(t\\_{j})}\\\\right)\\\\eta^{\\\\mathsf{os}}\\_{z}(t\\_{j},X^{\\\\mathsf{den}}\\_{j}). |  | (5.14) |\\\n\\\nThen, ( [5.14]In 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is a consistent integration scheme for the probability flow equation ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) associated with the velocity field ( [4.16]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) expressed as in ( [4.19]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nThat is, if N,j‚Üí‚àû‚ÜíùëÅùëóN,j\\\\to\\\\infty with j/N‚Üít‚àà\\[0,1\\]‚ÜíùëóùëÅùë°01j/N\\\\to t\\\\in\\[0,1\\], then XjùñΩùñæùóá‚ÜíXt‚ÜísubscriptsuperscriptùëãùñΩùñæùóáùëósubscriptùëãùë°X^{\\\\mathsf{den}}\\_{j}\\\\to X\\_{t} where\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | XÀôt=b‚Äã(t,Xt)=Œ≤Àô‚Äã(t)Œ≤‚Äã(t)‚ÄãXt+(Œ±Àô‚Äã(t)‚àíŒ±‚Äã(t)‚ÄãŒ≤Àô‚Äã(t)Œ≤‚Äã(t))‚ÄãŒ∑zùóàùóå‚Äã(t,Xt),Xt=0=z.formulae-sequencesubscriptÀôùëãùë°ùëèùë°subscriptùëãùë°ÀôùõΩùë°ùõΩùë°subscriptùëãùë°Àôùõºùë°ùõºùë°ÀôùõΩùë°ùõΩùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptùëãùë°subscriptùëãùë°0ùëß\\\\dot{X}\\_{t}=b(t,X\\_{t})=\\\\frac{\\\\dot{\\\\beta}(t)}{\\\\beta(t)}X\\_{t}+\\\\left(\\\\dot{\\\\alpha}(t)-\\\\frac{\\\\alpha(t)\\\\dot{\\\\beta}(t)}{\\\\beta(t)}\\\\right)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,X\\_{t}),\\\\quad X\\_{t=0}=z. |  | (5.15) |\\\n\\\nIn particular, if z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}), then XNùñΩùñæùóá‚Üíx1‚àºœÅ1‚ÜísubscriptsuperscriptùëãùñΩùñæùóáùëÅsubscriptùë•1similar-tosubscriptùúå1X^{\\\\mathsf{den}}\\_{N}\\\\to x\\_{1}\\\\sim\\\\rho\\_{1} in this limit.\\\n\\\nThe proof of this theorem is given in Appendix [B.7]B.7 Proof of Theorem 5.2 ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), and proceeds by Taylor expansion of the right-hand side of ( [5.14]In 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n\\\n### 5.3 Rectified flows\\\n\\\nWe now discuss how stochastic interpolants can be rectified according to the procedure proposed in \\[ [41])\\].\\\nSuppose that we have perfectly learned the velocity field bùëèb in the probability flow equation ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for a given stochastic interpolant.\\\nDenote by Xt‚Äã(x)subscriptùëãùë°ùë•X\\_{t}(x) the solution to this ODE with the initial condition Xt=0‚Äã(x)=xsubscriptùëãùë°0ùë•ùë•X\\_{t=0}(x)=x, i.e.\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | dd‚Äãt‚ÄãXt‚Äã(x)=b‚Äã(t,Xt‚Äã(x)),Xt=0‚Äã(x)=x.formulae-sequenceùëëùëëùë°subscriptùëãùë°ùë•ùëèùë°subscriptùëãùë°ùë•subscriptùëãùë°0ùë•ùë•\\\\frac{d}{dt}X\\_{t}(x)=b(t,X\\_{t}(x)),\\\\qquad X\\_{t=0}(x)=x. |  | (5.16) |\\\n\\\nWe can use the map Xt=1:‚Ñùd‚Üí‚Ñùd:subscriptùëãùë°1‚Üísuperscript‚Ñùùëësuperscript‚ÑùùëëX\\_{t=1}:{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}^{d} to define a new stochastic interpolant with z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id})\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | xtùóãùñæùñº=Œ±‚Äã(t)‚Äãz+Œ≤‚Äã(t)‚ÄãXt=1‚Äã(z),subscriptsuperscriptùë•ùóãùñæùñºùë°ùõºùë°ùëßùõΩùë°subscriptùëãùë°1ùëßx^{\\\\mathsf{rec}}\\_{t}=\\\\alpha(t)z+\\\\beta(t)X\\_{t=1}(z), |  | (5.17) |\\\n\\\nwhere Œ±2,Œ≤‚ààC2‚Äã(\\[0,1\\])superscriptùõº2ùõΩsuperscriptùê∂201\\\\alpha^{2},\\\\beta\\\\in C^{2}(\\[0,1\\]) satisfy Œ±‚Äã(0)=Œ≤‚Äã(1)=1ùõº0ùõΩ11\\\\alpha(0)=\\\\beta(1)=1, Œ±‚Äã(1)=Œ≤‚Äã(0)=0ùõº1ùõΩ00\\\\alpha(1)=\\\\beta(0)=0, and Œ±‚Äã(t)>0ùõºùë°0\\\\alpha(t)>0 for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1).\\\nClearly, we then have xt=0ùóãùñæùñº=z‚àºœÅ0subscriptsuperscriptùë•ùóãùñæùñºùë°0ùëßsimilar-tosubscriptùúå0x^{\\\\mathsf{rec}}\\_{t=0}=z\\\\sim\\\\rho\\_{0} since Xt=0‚Äã(z)=zsubscriptùëãùë°0ùëßùëßX\\_{t=0}(z)=z and xt=1ùóãùñæùñº=Xt=1‚Äã(z)‚àºœÅ1subscriptsuperscriptùë•ùóãùñæùñºùë°1subscriptùëãùë°1ùëßsimilar-tosubscriptùúå1x^{\\\\mathsf{rec}}\\_{t=1}=X\\_{t=1}(z)\\\\sim\\\\rho\\_{1} by definition of the probability flow equation.\\\nWe can define a new probability flow equation associated with the velocity field\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | bùóãùñæùñº‚Äã(t,x)=ùîº‚Äã\\[xÀôtùóãùñæùñº\\|xtùóãùñæùñº=x\\]=Œ±Àô‚Äã(t)‚Äãùîº‚Äã\\[z\\|xtùóãùñæùñº=x\\]+Œ≤Àô‚Äã(t)‚Äãùîº‚Äã\\[Xt=1‚Äã(z)\\|xtùóãùñæùñº=x\\].superscriptùëèùóãùñæùñºùë°ùë•ùîºdelimited-\\[\\]conditionalsubscriptsuperscriptÀôùë•ùóãùñæùñºùë°subscriptsuperscriptùë•ùóãùñæùñºùë°ùë•Àôùõºùë°ùîºdelimited-\\[\\]conditionalùëßsubscriptsuperscriptùë•ùóãùñæùñºùë°ùë•ÀôùõΩùë°ùîºdelimited-\\[\\]conditionalsubscriptùëãùë°1ùëßsubscriptsuperscriptùë•ùóãùñæùñºùë°ùë•b^{\\\\mathsf{rec}}(t,x)={\\\\mathbb{E}}\\[\\\\dot{x}^{\\\\mathsf{rec}}\\_{t}\\|x^{\\\\mathsf{rec}}\\_{t}=x\\]=\\\\dot{\\\\alpha}(t){\\\\mathbb{E}}\\[z\\|x^{\\\\mathsf{rec}}\\_{t}=x\\]+\\\\dot{\\\\beta}(t){\\\\mathbb{E}}\\[X\\_{t=1}(z)\\|x^{\\\\mathsf{rec}}\\_{t}=x\\]. |  | (5.18) |\\\n\\\nIt is easy to see that this velocity field is amenable to estimation, since it is the unique minimizer of\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñíbùóãùñæùñº‚Äã\\[b^ùóãùñæùñº\\]=‚à´01ùîº‚Äã\\[12‚Äã\\|b^ùóãùñæùñº‚Äã(t,xtùóãùñæùñº)\\|2‚àí(Œ±Àô‚Äã(t)‚Äãz+Œ≤Àô‚Äã(t)‚ÄãXt=1‚Äã(z))‚ãÖb^ùóãùñæùñº‚Äã(t,xtùóãùñæùñº)\\]‚Äãùëët,subscript‚Ñísuperscriptùëèùóãùñæùñºdelimited-\\[\\]superscript^ùëèùóãùñæùñºsuperscriptsubscript01ùîºdelimited-\\[\\]12superscriptsuperscript^ùëèùóãùñæùñºùë°subscriptsuperscriptùë•ùóãùñæùñºùë°2‚ãÖÀôùõºùë°ùëßÀôùõΩùë°subscriptùëãùë°1ùëßsuperscript^ùëèùóãùñæùñºùë°subscriptsuperscriptùë•ùóãùñæùñºùë°differential-dùë°\\\\mathcal{L}\\_{b^{\\\\mathsf{rec}}}\\[\\\\hat{b}^{\\\\mathsf{rec}}\\]=\\\\int\\_{0}^{1}{\\\\mathbb{E}}\\\\big{\\[}\\\\tfrac{1}{2}\\|\\\\hat{b}^{\\\\mathsf{rec}}(t,x^{\\\\mathsf{rec}}\\_{t})\\|^{2}-(\\\\dot{\\\\alpha}(t)z+\\\\dot{\\\\beta}(t)X\\_{t=1}(z))\\\\cdot\\\\hat{b}^{\\\\mathsf{rec}}(t,x^{\\\\mathsf{rec}}\\_{t})\\\\big{\\]}dt, |  | (5.19) |\\\n\\\nwhere xtùóãùñæùñºsubscriptsuperscriptùë•ùóãùñæùñºùë°x^{\\\\mathsf{rec}}\\_{t} is given in ( [5.17]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and the expectation is now only on z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}). Our next result show that the probability flow equation associated with the velocity field ( [5.18]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) has straight line solutions, but ultimately it leads to a generative model that is identical to the one based on ( [5.16]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nTo phrase this result, we first make an assumption on the invertibility of xtùóãùñæùñºsuperscriptsubscriptùë•ùë°ùóãùñæùñºx\\_{t}^{\\\\mathsf{rec}}.\\\n\\\n###### Assumption 5.3.\\\n\\\nThe map x‚ÜíM‚Äã(t,x)‚Üíùë•ùëÄùë°ùë•x\\\\to M(t,x) where M‚Äã(t,x)=Œ±‚Äã(t)‚Äãx+Œ≤‚Äã(t)‚ÄãXt=1‚Äã(x)ùëÄùë°ùë•ùõºùë°ùë•ùõΩùë°subscriptùëãùë°1ùë•M(t,x)=\\\\alpha(t)x+\\\\beta(t)X\\_{t=1}(x) with Xt‚Äã(x)subscriptùëãùë°ùë•X\\_{t}(x) solution to ( [5.16]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is invertible for all (t,x)‚àà\\[0,1\\]√ó‚Ñùdùë°ùë•01superscript‚Ñùùëë(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}, i.e. ‚àÉN(t,‚ãÖ,):‚Ñùd‚Üí‚Ñùd\\\\exists N(t,\\\\cdot,):{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}^{d} such that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àÄ(t,x)‚àà\\[0,1\\]√ó‚Ñùd:N‚Äã(t,M‚Äã(t,x))=M‚Äã(t,N‚Äã(t,x))=x.formulae-sequencefor-allùë°ùë•01superscript‚Ñùùëë:ùëÅùë°ùëÄùë°ùë•ùëÄùë°ùëÅùë°ùë•ùë•\\\\forall(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}\\\\quad:\\\\quad N(t,M(t,x))=M(t,N(t,x))=x. |  | (5.20) |\\\n\\\nThis is equivalent to requiring that the determinant of the Jacobian of M‚Äã(t,x)ùëÄùë°ùë•M(t,x) is nonzero for all (t,x)‚àà\\[0,1\\]√ó‚Ñùdùë°ùë•01superscript‚Ñùùëë(t,x)\\\\in\\[0,1\\]\\\\times{\\\\mathbb{R}}^{d}; put differently, Assumption [5.3]Assumption 5.3. ‚Ä£ 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") requires that the Jacobian of Xt=1‚Äã(x)subscriptùëãùë°1ùë•X\\_{t=1}(x) never has eigenvalues precisely equal to ‚àíŒ±‚Äã(t)/Œ≤‚Äã(t)ùõºùë°ùõΩùë°-\\\\alpha(t)/\\\\beta(t), which is generic.\\\nUnder this assumption, we state the following theorem.\\\n{restatable}theoremrec\\\n\\\nConsider the probability flow equation associated with ( [5.18]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | dd‚Äãt‚ÄãXtùóãùñæùñº‚Äã(x)=bùóãùñæùñº‚Äã(t,Xtùóãùñæùñº‚Äã(x)),Xt=0ùóãùñæùñº‚Äã(x)=x.formulae-sequenceùëëùëëùë°subscriptsuperscriptùëãùóãùñæùñºùë°ùë•superscriptùëèùóãùñæùñºùë°subscriptsuperscriptùëãùóãùñæùñºùë°ùë•subscriptsuperscriptùëãùóãùñæùñºùë°0ùë•ùë•\\\\frac{d}{dt}X^{\\\\mathsf{rec}}\\_{t}(x)=b^{\\\\mathsf{rec}}(t,X^{\\\\mathsf{rec}}\\_{t}(x)),\\\\qquad X^{\\\\mathsf{rec}}\\_{t=0}(x)=x. |  | (5.21) |\\\n\\\nThen, all solutions are such that Xt=1ùóãùñæùñº‚Äã(z)‚àºœÅ1similar-tosubscriptsuperscriptùëãùóãùñæùñºùë°1ùëßsubscriptùúå1X^{\\\\mathsf{rec}}\\_{t=1}(z)\\\\sim\\\\rho\\_{1} if z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim{\\\\sf N}(0,\\\\text{\\\\it Id}). In addition,\\\nif Assumption ( [5.3]Assumption 5.3. ‚Ä£ 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) holds, the velocity field defined in ( [5.18]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) reduces to\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | bùóãùñæùñº‚Äã(t,x)=Œ±Àô‚Äã(t)‚ÄãN‚Äã(t,x)+Œ≤Àô‚Äã(t)‚ÄãXt=1‚Äã(N‚Äã(t,x))superscriptùëèùóãùñæùñºùë°ùë•Àôùõºùë°ùëÅùë°ùë•ÀôùõΩùë°subscriptùëãùë°1ùëÅùë°ùë•b^{\\\\mathsf{rec}}(t,x)=\\\\dot{\\\\alpha}(t)N(t,x)+\\\\dot{\\\\beta}(t)X\\_{t=1}(N(t,x)) |  | (5.22) |\\\n\\\nand the solution to the probability flow ODE ( [5.21]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is simply\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Xtùóãùñæùñº‚Äã(x)=Œ±‚Äã(t)‚Äãx+Œ≤‚Äã(t)‚ÄãXt=1‚Äã(x).subscriptsuperscriptùëãùóãùñæùñºùë°ùë•ùõºùë°ùë•ùõΩùë°subscriptùëãùë°1ùë•X^{\\\\mathsf{rec}}\\_{t}(x)=\\\\alpha(t)x+\\\\beta(t)X\\_{t=1}(x). |  | (5.23) |\\\n\\\nThe proof is given in Appendix [B.8]B.8 Proof of Theorem 5.3 ‚Ä£ Appendix B Proofs ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\\nTheorem [5.3]Assumption 5.3. ‚Ä£ 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") implies that Xtùóãùñæùñº‚Äã(x)subscriptsuperscriptùëãùóãùñæùñºùë°ùë•X^{\\\\mathsf{rec}}\\_{t}(x) is a simpler flow than Xt‚Äã(x)subscriptùëãùë°ùë•X\\_{t}(x), but we stress that they give the same map, Xt=1ùóãùñæùñº=Xt=1subscriptsuperscriptùëãùóãùñæùñºùë°1subscriptùëãùë°1X^{\\\\mathsf{rec}}\\_{t=1}=X\\_{t=1}. In particular, Xtùóãùñæùñº‚Äã(x)subscriptsuperscriptùëãùóãùñæùñºùë°ùë•X^{\\\\mathsf{rec}}\\_{t}(x) reduces to a straight line between xùë•x and Xt=1‚Äã(x)subscriptùëãùë°1ùë•X\\_{t=1}(x) for Œ±‚Äã(t)=1‚àítùõºùë°1ùë°\\\\alpha(t)=1-t and Œ≤‚Äã(t)=tùõΩùë°ùë°\\\\beta(t)=t.\\\nWe also note that the approach can be used to learn a single-step map, since ( [5.22]In 5.3 Rectified flows ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and N‚Äã(t=0,x)=xùëÅùë°0ùë•ùë•N(t=0,x)=x give\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | bùóãùñæùñº‚Äã(t=0,x)=Œ±Àô‚Äã(0)‚Äãx+Œ≤Àô‚Äã(0)‚ÄãXt=1‚Äã(x),superscriptùëèùóãùñæùñºùë°0ùë•Àôùõº0ùë•ÀôùõΩ0subscriptùëãùë°1ùë•b^{\\\\mathsf{rec}}(t=0,x)=\\\\dot{\\\\alpha}(0)x+\\\\dot{\\\\beta}(0)X\\_{t=1}(x), |  | (5.24) |\\\n\\\nwhich expresses Xt=1‚Äã(x)subscriptùëãùë°1ùë•X\\_{t=1}(x) in terms of known quantities as long as Œ≤Àô‚Äã(0)‚â†0ÀôùõΩ00\\\\dot{\\\\beta}(0)\\\\not=0.\\\nFor example, if Œ±Àô‚Äã(0)=0Àôùõº00\\\\dot{\\\\alpha}(0)=0 and Œ≤Àô‚Äã(0)=1ÀôùõΩ01\\\\dot{\\\\beta}(0)=1, we obtain bùóãùñæùñº‚Äã(t=0,x)=Xt=1‚Äã(x)superscriptùëèùóãùñæùñºùë°0ùë•subscriptùëãùë°1ùë•b^{\\\\mathsf{rec}}(t=0,x)=X\\_{t=1}(x).\\\n\\\n###### Remark 5.4(Optimal transport).\\\n\\\nThe discussion above highlights the fact that a probability flow equation can have straight line solutions and lead to a map that exactly pushes œÅ0subscriptùúå0\\\\rho\\_{0} onto œÅ1subscriptùúå1\\\\rho\\_{1} but is not the optimal transport map.\\\nThat is, straight line solutions is a necessary condition for optimal transport, but it is not sufficient.\\\n\\\n###### Remark 5.5(Gradient fields).\\\n\\\nThe map is unaffected by the rectification procedure because we do not impose that the velocity bùóãùñæùñº‚Äã(t,x)superscriptùëèùóãùñæùñºùë°ùë•b^{\\\\mathsf{rec}}(t,x) be a gradient field.\\\nIf we do impose this structure by setting bùóãùñæùñº‚Äã(t,x)=‚àáœï‚Äã(t,x)superscriptùëèùóãùñæùñºùë°ùë•‚àáitalic-œïùë°ùë•b^{\\\\mathsf{rec}}(t,x)=\\\\nabla\\\\phi(t,x) for some œï:‚Ñùd‚Üí‚Ñù:italic-œï‚Üísuperscript‚Ñùùëë‚Ñù\\\\phi:{\\\\mathbb{R}}^{d}\\\\to{\\\\mathbb{R}}, then Xt=1ùóãùñæùñº‚â†Xt=1superscriptsubscriptùëãùë°1ùóãùñæùñºsubscriptùëãùë°1X\\_{t=1}^{\\\\mathsf{rec}}\\\\not=X\\_{t=1}.\\\nAs shown in \\[ [40])\\], iterating over this procedure eventually gives the optimal transport map.\\\nThat is, implemented over gradient fields and iterated infinitely, rectification computes Brenier‚Äôs polar decomposition of the map \\[ [9])\\].\\\n\\\n###### Remark 5.6(Consistency models).\\\n\\\nRecent work has introduced the notion of consistency models\\[ [56])\\], which distill a velocity field learned via score-based diffusion into a single-step map.\\\nSection [5.1]Score-based diffusion models and stochastic localization ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and the previous discussion provide an alternative perspective on consistency models, and show how they may be computed in the framework of stochastic interpolants via rectification.\\\n\\",
            "citations": null
          },
          "6 Algorithmic aspects\\": {
            "content": "\\\nThe methods described in the previous sections have efficient numerical realizations.\\\nHere, we detail algorithms and practical recommendations for an implementation.\\\nThese suggestions can be split into two complementary tasks: learning the drift coefficients, and sampling with an ODE or an SDE.\\\n\\\n### 6.1 Learning\\\n\\\nAs described in Section [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), there are a variety of algorithmic choices that can be made when learning the drift coefficients in ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")). While all choices lead to exact generative models in the absence of numerical and statistical errors, in practice, the presence of these errors ensures that different choices lead to different generative models, some of which may perform better for specific applications. Here, we describe the various realizations explicitly.\\\n\\\n#### Deterministic generative modeling: Learning bùëèb versus learning vùë£v and sùë†s.\\\n\\\nRecall from Section [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") that the drift bùëèb of the transport equation ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can be written as b‚Äã(t,x)=v‚Äã(t,x)‚àíŒ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)‚Äãs‚Äã(t,x)ùëèùë°ùë•ùë£ùë°ùë•ùõæùë°Àôùõæùë°ùë†ùë°ùë•b(t,x)=v(t,x)-\\\\gamma(t)\\\\dot{\\\\gamma}(t)s(t,x). This raises the practical question of whether it would be better to learn an estimate b^^ùëè\\\\hat{b} of bùëèb by minimizing the empirical risk\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñí^b‚Äã(b^)=1N‚Äã‚àëi=1N(12‚Äã\\|b^‚Äã(ti,xtii)\\|2‚àíb^‚Äã(ti,xtii)‚ãÖ(‚àÇtI‚Äã(ti,x0i,x1i)+Œ≥Àô‚Äã(ti)‚Äãzi)),subscript^‚Ñíùëè^ùëè1ùëÅsuperscriptsubscriptùëñ1ùëÅ12superscript^ùëèsubscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñ2‚ãÖ^ùëèsubscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñsubscriptùë°ùêºsubscriptùë°ùëñsuperscriptsubscriptùë•0ùëñsuperscriptsubscriptùë•1ùëñÀôùõæsubscriptùë°ùëñsuperscriptùëßùëñ\\\\hat{\\\\mathcal{L}}\\_{b}(\\\\hat{b})=\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\left(\\\\frac{1}{2}\\|\\\\hat{b}(t\\_{i},x\\_{t\\_{i}}^{i})\\|^{2}-\\\\hat{b}(t\\_{i},x\\_{t\\_{i}}^{i})\\\\cdot\\\\left(\\\\partial\\_{t}I(t\\_{i},x\\_{0}^{i},x\\_{1}^{i})+\\\\dot{\\\\gamma}(t\\_{i})z^{i}\\\\right)\\\\right), |  | (6.1) |\\\n\\\nor to learn estimates of v^^ùë£\\\\hat{v} and s^^ùë†\\\\hat{s} by minimizing the empirical risks\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñí^v‚Äã(v^)=1N‚Äã‚àëi=1N(12‚Äã\\|v^‚Äã(ti,xtii)\\|2‚àív^‚Äã(ti,xtii)‚ãÖ‚àÇtI‚Äã(ti,x0i,x1i))subscript^‚Ñíùë£^ùë£1ùëÅsuperscriptsubscriptùëñ1ùëÅ12superscript^ùë£subscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñ2‚ãÖ^ùë£subscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñsubscriptùë°ùêºsubscriptùë°ùëñsuperscriptsubscriptùë•0ùëñsuperscriptsubscriptùë•1ùëñ\\\\hat{\\\\mathcal{L}}\\_{v}(\\\\hat{v})=\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\left(\\\\frac{1}{2}\\|\\\\hat{v}(t\\_{i},x\\_{t\\_{i}}^{i})\\|^{2}-\\\\hat{v}(t\\_{i},x\\_{t\\_{i}}^{i})\\\\cdot\\\\partial\\_{t}I(t\\_{i},x\\_{0}^{i},x\\_{1}^{i})\\\\right) |  | (6.2) |\\\n\\\nand\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñí^s‚Äã(s^)=1N‚Äã‚àëi=1N(12‚Äã\\|s^‚Äã(ti,xtii)\\|2+Œ≥‚Äã(ti)‚àí1‚Äãs^‚Äã(ti,xtii)‚ãÖzi)subscript^‚Ñíùë†^ùë†1ùëÅsuperscriptsubscriptùëñ1ùëÅ12superscript^ùë†subscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñ2‚ãÖùõæsuperscriptsubscriptùë°ùëñ1^ùë†subscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñsuperscriptùëßùëñ\\\\hat{\\\\mathcal{L}}\\_{s}(\\\\hat{s})=\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\left(\\\\frac{1}{2}\\|\\\\hat{s}(t\\_{i},x\\_{t\\_{i}}^{i})\\|^{2}+\\\\gamma(t\\_{i})^{-1}\\\\hat{s}(t\\_{i},x\\_{t\\_{i}}^{i})\\\\cdot z^{i}\\\\right) |  | (6.3) |\\\n\\\nInput: Batch size NùëÅN, interpolant function I‚Äã(t,x0,x1)ùêºùë°subscriptùë•0subscriptùë•1I(t,x\\_{0},x\\_{1}), coupling ŒΩ‚Äã(d‚Äãx0,d‚Äãx1)ùúàùëësubscriptùë•0ùëësubscriptùë•1\\\\nu(dx\\_{0},dx\\_{1}) to sample x0,x1subscriptùë•0subscriptùë•1x\\_{0},x\\_{1}, noise function Œ≥‚Äã(t)ùõæùë°\\\\gamma(t), initial parameters Œ∏bsubscriptùúÉùëè\\\\theta\\_{b}, gradient-based optimization algorithm to minimize ‚Ñíbsubscript‚Ñíùëè\\\\mathcal{L}\\_{b} defined in ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), number of gradient steps NgsubscriptùëÅùëîN\\_{g}.\\\n\\\nReturns: An estimate b^^ùëè\\\\hat{b} of bùëèb.\\\n\\\nfor _j=1,‚Ä¶,Ngùëó1‚Ä¶subscriptùëÅùëîj=1,\\\\ldots,N\\_{g}_ do\\\n\\\n\\\nDraw NùëÅN samples (ti,x0i,x1i,zi)‚àºùñ¥ùóáùóÇùñø‚Äã(\\[0,1\\])√óŒΩ√óùñ≠‚Äã(0,1)similar-tosubscriptùë°ùëñsuperscriptsubscriptùë•0ùëñsuperscriptsubscriptùë•1ùëñsuperscriptùëßùëñùñ¥ùóáùóÇùñø01ùúàùñ≠01(t\\_{i},x\\_{0}^{i},x\\_{1}^{i},z^{i})\\\\sim\\\\mathsf{Unif}(\\[0,1\\])\\\\times\\\\nu\\\\times\\\\mathsf{N}(0,1), for i=1,‚Ä¶,Nùëñ1‚Ä¶ùëÅi=1,\\\\ldots,N.\\\n\\\n\\\nConstruct samples xti=I‚Äã(ti,x0i,x1i)+Œ≥‚Äã(ti)‚Äãzisuperscriptsubscriptùë•ùë°ùëñùêºsubscriptùë°ùëñsuperscriptsubscriptùë•0ùëñsuperscriptsubscriptùë•1ùëñùõæsubscriptùë°ùëñsuperscriptùëßùëñx\\_{t}^{i}=I(t\\_{i},x\\_{0}^{i},x\\_{1}^{i})+\\\\gamma(t\\_{i})z^{i}, for i=1,‚Ä¶,Nùëñ1‚Ä¶ùëÅi=1,\\\\ldots,N.\\\n\\\n\\\nTake gradient step with respect to ‚Ñíb‚Äã(Œ∏b,{xti}i=1N)subscript‚ÑíùëèsubscriptùúÉùëèsuperscriptsubscriptsuperscriptsubscriptùë•ùë°ùëñùëñ1ùëÅ\\\\mathcal{L}\\_{b}\\\\left(\\\\theta\\_{b},\\\\{x\\_{t}^{i}\\\\}\\_{i=1}^{N}\\\\right).\\\n\\\nReturn:b^^ùëè\\\\hat{b}.\\\n\\\nAlgorithm 1Learning bùëèb with arbitrary œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}.\\\n\\\nand construct the estimate b^‚Äã(t,x)=v^‚Äã(t,x)‚àíŒ≥‚Äã(t)‚ÄãŒ≥Àô‚Äã(t)‚Äãs^‚Äã(t,x)^ùëèùë°ùë•^ùë£ùë°ùë•ùõæùë°Àôùõæùë°^ùë†ùë°ùë•\\\\hat{b}(t,x)=\\\\hat{v}(t,x)-\\\\gamma(t)\\\\dot{\\\\gamma}(t)\\\\hat{s}(t,x). Above, xtii=I‚Äã(ti,x0i,x1i)+Œ≥‚Äã(ti)‚Äãzisuperscriptsubscriptùë•subscriptùë°ùëñùëñùêºsubscriptùë°ùëñsuperscriptsubscriptùë•0ùëñsuperscriptsubscriptùë•1ùëñùõæsubscriptùë°ùëñsuperscriptùëßùëñx\\_{t\\_{i}}^{i}=I(t\\_{i},x\\_{0}^{i},x\\_{1}^{i})+\\\\gamma(t\\_{i})z^{i}, and NùëÅN denotes the number of samples tisuperscriptùë°ùëñt^{i}, x0isuperscriptsubscriptùë•0ùëñx\\_{0}^{i}, and x1isuperscriptsubscriptùë•1ùëñx\\_{1}^{i}. If the practitioner is interested in a deterministic generative model (for example, to exploit adaptive integration or exact likelihood computation), learning the estimate b^^ùëè\\\\hat{b} directly only requires learning a single model, and hence will typically lead to greater efficiency. This recommendation is captured in Algorithm [1]In Deterministic generative modeling: Learning ùëè versus learning ùë£ and ùë†. ‚Ä£ 6.1 Learning ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). If both stochastic and deterministic generative models are of interest, it is necessary to learn two models for most choices of the interpolant; we discuss more suggestions for stochastic case below.\\\n\\\n#### Antithetic sampling and capping.\\\n\\\nIn practice, the losses for bùëèb ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and sùë†s ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can become high-variance near the endpoints t=0ùë°0t=0 and t=1ùë°1t=1 due to the presence of the singular term 1/Œ≥‚Äã(t)1ùõæùë°1/\\\\gamma(t) and the (potentially) singular term Œ≥Àô‚Äã(t)Àôùõæùë°\\\\dot{\\\\gamma}(t). This issue can be eliminated by using antithetic sampling, which we found necessary for stable training of objectives involving Œ≥‚àí1‚Äã(t)superscriptùõæ1ùë°\\\\gamma^{-1}(t).\\\nTo show why, we consider the loss ( [2.16]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for sùë†s, but an analogous calculation can be performed for the loss ( [2.13]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for bùëèb or ( [2.19]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) for Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} (even though it is not necessary for this last quantity).\\\nWe first observe that, by definition of xtsubscriptùë•ùë°x\\_{t} and by Taylor expansion, as t‚Üí0‚Üíùë°0t\\\\to 0 or t‚Üí1‚Üíùë°1t\\\\to 1\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | 1Œ≥‚Äã(t)‚Äãz‚ãÖs‚Äã(t,xt)‚ãÖ1ùõæùë°ùëßùë†ùë°subscriptùë•ùë°\\\\displaystyle\\\\frac{1}{\\\\gamma(t)}z\\\\cdot s(t,x\\_{t}) | =1Œ≥‚Äã(t)‚Äãz‚ãÖs‚Äã(t,I‚Äã(t,x0,x1)+Œ≥‚Äã(t)‚Äãz),absent‚ãÖ1ùõæùë°ùëßùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°ùëß\\\\displaystyle=\\\\frac{1}{\\\\gamma(t)}z\\\\cdot s(t,I(t,x\\_{0},x\\_{1})+\\\\gamma(t)z), |  | (6.4) |\\\n|  |  | =1Œ≥‚Äã(t)‚Äãz‚ãÖ(s‚Äã(t,I‚Äã(t,x0,x1))+Œ≥‚Äã(t)‚Äã‚àás‚Äã(t,I‚Äã(t,x0,x1))‚Äãz+o‚Äã(Œ≥‚Äã(t))),absent‚ãÖ1ùõæùë°ùëßùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°‚àáùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùëßùëúùõæùë°\\\\displaystyle=\\\\frac{1}{\\\\gamma(t)}z\\\\cdot\\\\left(s(t,I(t,x\\_{0},x\\_{1}))+\\\\gamma(t)\\\\nabla s(t,I(t,x\\_{0},x\\_{1}))z+o(\\\\gamma(t))\\\\right), |  |\\\n|  |  | =1Œ≥‚Äã(t)‚Äãz‚ãÖs‚Äã(t,I‚Äã(t,x0,x1))+z‚ãÖ‚àás‚Äã(t,I‚Äã(t,x0,x1))‚Äãz+o‚Äã(1).absent‚ãÖ1ùõæùë°ùëßùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1‚ãÖùëß‚àáùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùëßùëú1\\\\displaystyle=\\\\frac{1}{\\\\gamma(t)}z\\\\cdot s(t,I(t,x\\_{0},x\\_{1}))+z\\\\cdot\\\\nabla s(t,I(t,x\\_{0},x\\_{1}))z+o(1). |  |\\\n\\\nEven though the conditional mean of the first term at the right-hand side is finite in the limit as t‚Üí0‚Üíùë°0t\\\\to 0 or t‚Üí1‚Üíùë°1t\\\\to 1, its variance diverges. By contrast, let xt+=I‚Äã(t,x0,x1)+Œ≥‚Äã(t)‚Äãzsuperscriptsubscriptùë•ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°ùëßx\\_{t}^{+}=I(t,x\\_{0},x\\_{1})+\\\\gamma(t)z and xt‚àí=I‚Äã(t,x0,x1)‚àíŒ≥‚Äã(t)‚Äãzsuperscriptsubscriptùë•ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°ùëßx\\_{t}^{-}=I(t,x\\_{0},x\\_{1})-\\\\gamma(t)z with x0,x1subscriptùë•0subscriptùë•1x\\_{0},x\\_{1}, and zùëßz fixed. Then,\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  |  | 12‚ÄãŒ≥‚Äã(t)‚Äã(z‚ãÖs‚Äã(t,xt+)‚àíz‚ãÖs‚Äã(t,xt‚àí))12ùõæùë°‚ãÖùëßùë†ùë°superscriptsubscriptùë•ùë°‚ãÖùëßùë†ùë°superscriptsubscriptùë•ùë°\\\\displaystyle\\\\frac{1}{2\\\\gamma(t)}\\\\left(z\\\\cdot s(t,x\\_{t}^{+})-z\\\\cdot s(t,x\\_{t}^{-})\\\\right) |  | (6.5) |\\\n|  |  | =12‚ÄãŒ≥‚Äã(t)(z‚ãÖs(t,I(t,x0,x1)+Œ≥(t)z))‚àíz‚ãÖs(t,I(t,x0,x1)‚àíŒ≥(t)z)),\\\\displaystyle=\\\\frac{1}{2\\\\gamma(t)}\\\\left(z\\\\cdot s(t,I(t,x\\_{0},x\\_{1})+\\\\gamma(t)z))-z\\\\cdot s(t,I(t,x\\_{0},x\\_{1})-\\\\gamma(t)z)\\\\right), |  |\\\n|  |  | =12‚ÄãŒ≥‚Äã(t)‚Äãz‚ãÖ(s‚Äã(t,I‚Äã(t,x0,x1))+Œ≥‚Äã(t)‚Äã‚àás‚Äã(t,I‚Äã(t,x0,x1))‚Äãz+o‚Äã(Œ≥‚Äã(t)))absent‚ãÖ12ùõæùë°ùëßùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°‚àáùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùëßùëúùõæùë°\\\\displaystyle=\\\\frac{1}{2\\\\gamma(t)}z\\\\cdot\\\\left(s(t,I(t,x\\_{0},x\\_{1}))+\\\\gamma(t)\\\\nabla s(t,I(t,x\\_{0},x\\_{1}))z+o(\\\\gamma(t))\\\\right) |  |\\\n|  |  | ‚àí12‚ÄãŒ≥‚Äã(t)‚Äãz‚ãÖ(s‚Äã(t,I‚Äã(t,x0,x1))‚àíŒ≥‚Äã(t)‚Äã‚àás‚Äã(t,I‚Äã(t,x0,x1))‚Äãz+o‚Äã(Œ≥‚Äã(t))),‚ãÖ12ùõæùë°ùëßùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùõæùë°‚àáùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùëßùëúùõæùë°\\\\displaystyle\\\\qquad-\\\\frac{1}{2\\\\gamma(t)}z\\\\cdot\\\\left(s(t,I(t,x\\_{0},x\\_{1}))-\\\\gamma(t)\\\\nabla s(t,I(t,x\\_{0},x\\_{1}))z+o(\\\\gamma(t))\\\\right), |  |\\\n|  |  | =z‚ãÖ‚àás‚Äã(t,I‚Äã(t,x0,x1))‚Äãz+o‚Äã(1),absent‚ãÖùëß‚àáùë†ùë°ùêºùë°subscriptùë•0subscriptùë•1ùëßùëú1\\\\displaystyle=z\\\\cdot\\\\nabla s(t,I(t,x\\_{0},x\\_{1}))z+o(1), |  |\\\n\\\nso that both the conditional mean and variance are finite in the limit as t‚Üí0‚Üíùë°0t\\\\to 0 or t‚Üí1‚Üíùë°1t\\\\to 1 despite the singularity of 1/Œ≥‚Äã(t)1ùõæùë°1/\\\\gamma(t).\\\nIn practice, this can be implemented by using xt+superscriptsubscriptùë•ùë°x\\_{t}^{+} and xt‚àísuperscriptsubscriptùë•ùë°x\\_{t}^{-} for every draw of x0,x1subscriptùë•0subscriptùë•1x\\_{0},x\\_{1}, and zùëßz in the empirical discretization of the population loss.\\\n\\\nInput: Batch size NùëÅN, interpolant function I‚Äã(t,x0,x1)ùêºùë°subscriptùë•0subscriptùë•1I(t,x\\_{0},x\\_{1}), a coupling ŒΩ‚Äã(d‚Äãx0,d‚Äãx1)ùúàùëësubscriptùë•0ùëësubscriptùë•1\\\\nu(dx\\_{0},dx\\_{1}) to sample x0,x1subscriptùë•0subscriptùë•1x\\_{0},x\\_{1}, noise function Œ≥‚Äã(t)ùõæùë°\\\\gamma(t), initial parameters Œ∏Œ∑zsubscriptùúÉsubscriptùúÇùëß\\\\theta\\_{\\\\eta\\_{z}}, gradient-based optimization algorithm to minimize ‚ÑíŒ∑zsubscript‚ÑísubscriptùúÇùëß\\\\mathcal{L}\\_{\\\\eta\\_{z}} defined in ( [2.19]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), number of gradient steps NgsubscriptùëÅùëîN\\_{g}.\\\n\\\nReturns: An estimate Œ∑^zsubscript^ùúÇùëß\\\\hat{\\\\eta}\\_{z} of Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}.\\\n\\\nfor _j=1,‚Ä¶,Ngùëó1‚Ä¶subscriptùëÅùëîj=1,\\\\ldots,N\\_{g}_ do\\\n\\\n\\\nDraw NùëÅN samples (ti,x0i,x1i,zi)‚àºùñ¥ùóáùóÇùñø‚Äã(\\[0,1\\])√óŒΩ√óùñ≠‚Äã(0,1)similar-tosubscriptùë°ùëñsuperscriptsubscriptùë•0ùëñsuperscriptsubscriptùë•1ùëñsuperscriptùëßùëñùñ¥ùóáùóÇùñø01ùúàùñ≠01(t\\_{i},x\\_{0}^{i},x\\_{1}^{i},z^{i})\\\\sim\\\\mathsf{Unif}(\\[0,1\\])\\\\times\\\\nu\\\\times\\\\mathsf{N}(0,1), for i=1,‚Ä¶,Nùëñ1‚Ä¶ùëÅi=1,\\\\ldots,N.\\\n\\\n\\\nConstruct samples xti=I‚Äã(ti,x0i,x1i)+Œ≥‚Äã(ti)‚Äãzisuperscriptsubscriptùë•ùë°ùëñùêºsubscriptùë°ùëñsuperscriptsubscriptùë•0ùëñsuperscriptsubscriptùë•1ùëñùõæsubscriptùë°ùëñsuperscriptùëßùëñx\\_{t}^{i}=I(t\\_{i},x\\_{0}^{i},x\\_{1}^{i})+\\\\gamma(t\\_{i})z^{i}, for i=1,‚Ä¶,Nùëñ1‚Ä¶ùëÅi=1,\\\\ldots,N.\\\n\\\n\\\nTake gradient step with respect to ‚ÑíŒ∑z‚Äã(Œ∏Œ∑z,{xti}i=1N)subscript‚ÑísubscriptùúÇùëßsubscriptùúÉsubscriptùúÇùëßsuperscriptsubscriptsuperscriptsubscriptùë•ùë°ùëñùëñ1ùëÅ\\\\mathcal{L}\\_{\\\\eta\\_{z}}\\\\left(\\\\theta\\_{\\\\eta\\_{z}},\\\\{x\\_{t}^{i}\\\\}\\_{i=1}^{N}\\\\right).\\\n\\\nReturn:Œ∑^zsubscript^ùúÇùëß\\\\hat{\\\\eta}\\_{z}.\\\n\\\nAlgorithm 2Learning Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} with arbitrary œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}.\\\n\\\n#### Learning the score sùë†s versus learning a denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}.\\\n\\\nWhen learning sùë†s, an alternative to antithetic sampling is to consider learning the denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} defined in ( [2.17]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), which is related to the score by a factor of Œ≥ùõæ\\\\gamma. Note that the objective function for the denoiser in ( [2.19]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) is well behaved for all t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], and can be thought of as a generalization of the DDPM loss introduced in \\[ [25])\\]. The empirical risk associated with this loss reads\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñí^Œ∑z‚Äã(Œ∑^z)=1N‚Äã‚àëi=1N(12‚Äã\\|Œ∑^z‚Äã(ti,xtii)\\|2‚àíŒ∑^z‚Äã(ti,xtii)‚ãÖzi)subscript^‚ÑísubscriptùúÇùëßsubscript^ùúÇùëß1ùëÅsuperscriptsubscriptùëñ1ùëÅ12superscriptsubscript^ùúÇùëßsubscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñ2‚ãÖsubscript^ùúÇùëßsubscriptùë°ùëñsuperscriptsubscriptùë•subscriptùë°ùëñùëñsuperscriptùëßùëñ\\\\hat{\\\\mathcal{L}}\\_{\\\\eta\\_{z}}(\\\\hat{\\\\eta}\\_{z})=\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\left(\\\\frac{1}{2}\\|\\\\hat{\\\\eta}\\_{z}(t\\_{i},x\\_{t\\_{i}}^{i})\\|^{2}-\\\\hat{\\\\eta}\\_{z}(t\\_{i},x\\_{t\\_{i}}^{i})\\\\cdot z^{i}\\\\right) |  | (6.6) |\\\n\\\nA detailed procedure for learning the denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}, e.g. for its use in an SDE-based generative model is given in Algorithm [2]In Antithetic sampling and capping. ‚Ä£ 6.1 Learning ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nFor the case of one-sided spatially-linear interpolants, the procedure becomes particularly simple, which is highlighted in Algorithm [3]In Learning the score ùë† versus learning a denoiser ùúÇ_ùëß. ‚Ä£ 6.1 Learning ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\\nInput: Batch size NùëÅN, interpolant function xtùóàùóå,ùóÖùóÇùóásubscriptsuperscriptùë•ùóàùóåùóÖùóÇùóáùë°x^{\\\\mathsf{os,lin}}\\_{t}, a coupling ŒΩ‚Äã(d‚Äãx0,d‚Äãx1)ùúàùëësubscriptùë•0ùëësubscriptùë•1\\\\nu(dx\\_{0},dx\\_{1}) to sample z,x1ùëßsubscriptùë•1z,x\\_{1}, initial parameters Œ∏Œ∑zùóàùóåsubscriptùúÉsuperscriptsubscriptùúÇùëßùóàùóå\\\\theta\\_{\\\\eta\\_{z}^{\\\\mathsf{os}}}, gradient-based optimization algorithm to minimize ‚ÑíŒ∑zùóàùóåsubscript‚ÑísuperscriptsubscriptùúÇùëßùóàùóå\\\\mathcal{L}\\_{\\\\eta\\_{z}^{\\\\mathsf{os}}} defined in ( [2.19]In Remark 2.6 (Denoiser). ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), number of gradient steps NgsubscriptùëÅùëîN\\_{g}.\\\n\\\nReturns: An estimate Œ∑^zùóàùóåsuperscriptsubscript^ùúÇùëßùóàùóå\\\\hat{\\\\eta}\\_{z}^{\\\\mathsf{os}} of Œ∑zùóàùóåsuperscriptsubscriptùúÇùëßùóàùóå\\\\eta\\_{z}^{\\\\mathsf{os}}.\\\n\\\nfor _j=1,‚Ä¶,Ngùëó1‚Ä¶subscriptùëÅùëîj=1,\\\\ldots,N\\_{g}_ do\\\n\\\n\\\nDraw NùëÅN samples (ti,zi,x1i)‚àºùñ¥ùóáùóÇùñø‚Äã(\\[0,1\\])√óŒΩsimilar-tosubscriptùë°ùëñsuperscriptùëßùëñsuperscriptsubscriptùë•1ùëñùñ¥ùóáùóÇùñø01ùúà(t\\_{i},z^{i},x\\_{1}^{i})\\\\sim\\\\mathsf{Unif}(\\[0,1\\])\\\\times\\\\nu, for i=1,‚Ä¶,Nùëñ1‚Ä¶ùëÅi=1,\\\\ldots,N.\\\n\\\n\\\nConstruct samples xti=Œ±‚Äã(ti)‚Äãz+Œ≤‚Äã(ti)‚Äãx1isuperscriptsubscriptùë•ùë°ùëñùõºsubscriptùë°ùëñùëßùõΩsubscriptùë°ùëñsuperscriptsubscriptùë•1ùëñx\\_{t}^{i}=\\\\alpha(t\\_{i})z+\\\\beta(t\\_{i})x\\_{1}^{i}, for i=1,‚Ä¶,Nùëñ1‚Ä¶ùëÅi=1,\\\\ldots,N.\\\n\\\n\\\nTake gradient step w.r.t ‚ÑíŒ∑zùóàùóå‚Äã(Œ∏Œ∑zùóàùóå,{xti}i=1N)subscript‚ÑísuperscriptsubscriptùúÇùëßùóàùóåsubscriptùúÉsuperscriptsubscriptùúÇùëßùóàùóåsuperscriptsubscriptsuperscriptsubscriptùë•ùë°ùëñùëñ1ùëÅ\\\\mathcal{L}\\_{\\\\eta\\_{z}^{\\\\mathsf{os}}}\\\\left(\\\\theta\\_{\\\\eta\\_{z}^{\\\\mathsf{os}}},\\\\{x\\_{t}^{i}\\\\}\\_{i=1}^{N}\\\\right).\\\n\\\nReturn:Œ∑^zùóàùóåsuperscriptsubscript^ùúÇùëßùóàùóå\\\\hat{\\\\eta}\\_{z}^{\\\\mathsf{os}}.\\\n\\\nAlgorithm 3Learning Œ∑zùóàùóåsuperscriptsubscriptùúÇùëßùóàùóå\\\\eta\\_{z}^{\\\\mathsf{os}} with Gaussian œÅ0subscriptùúå0\\\\rho\\_{0}.\\\n\\\n### 6.2 Sampling\\\n\\\nWe now discuss several practical aspects of sampling generative models based on stochastic interpolants.\\\nThese are intimately related to the choice of objects that are learned, as well as to the specific interpolant used to build a path between œÅ0subscriptùúå0\\\\rho\\_{0} and œÅ1subscriptùúå1\\\\rho\\_{1}.\\\nA general algorithm for sampling models built on either ordinary or stochastic differential equations is presented in Algorithm [4]In 6.2 Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\\nInput: Number of samples nùëõn, timestep Œî‚ÄãtŒîùë°\\\\Delta t, drift estimates b^^ùëè\\\\hat{b} and Œ∑^zsubscript^ùúÇùëß\\\\hat{\\\\eta}\\_{z}, initial time t0subscriptùë°0t\\_{0}, final time tfsubscriptùë°ùëìt\\_{f}, noise function Œ≥‚Äã(t)ùõæùë°\\\\gamma(t), diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t), SDE or ODE timestepper TakeStep.\\\n\\\nReturns: {x^1(i)}i=1nsuperscriptsubscriptsuperscriptsubscript^ùë•1ùëñùëñ1ùëõ\\\\{\\\\hat{x}\\_{1}^{(i)}\\\\}\\_{i=1}^{n}, a batch of model samples.\\\n\\\nInitialize\\\n\\\n\\\nSet time t=t0ùë°subscriptùë°0t=t\\_{0}.\\\n\\\n\\\nDraw initial conditions x^t0(i)‚àºœÅ0similar-tosubscriptsuperscript^ùë•ùëñsubscriptùë°0subscriptùúå0\\\\hat{x}^{(i)}\\_{t\\_{0}}\\\\sim\\\\rho\\_{0} for i=1,‚Ä¶,nùëñ1‚Ä¶ùëõi=1,\\\\ldots,n.\\\n\\\n\\\nConstruct s^‚Äã(t,x)=‚àíŒ∑^z‚Äã(t,x)/Œ≥‚Äã(t)^ùë†ùë°ùë•subscript^ùúÇùëßùë°ùë•ùõæùë°\\\\hat{s}(t,x)=-\\\\hat{\\\\eta}\\_{z}(t,x)/\\\\gamma(t).\\\n\\\n\\\nConstruct b^ùñ•‚Äã(t,x)=b^‚Äã(t,x)+œµ‚Äã(t)‚Äãs^‚Äã(t,x)subscript^ùëèùñ•ùë°ùë•^ùëèùë°ùë•italic-œµùë°^ùë†ùë°ùë•\\\\hat{b}\\_{\\\\mathsf{F}}(t,x)=\\\\hat{b}(t,x)+\\\\epsilon(t)\\\\hat{s}(t,x). // Reduces to b^^ùëè\\\\hat{b} for œµ‚Äã(t)=0italic-œµùë°0\\\\epsilon(t)=0 (ODE).\\\n\\\nwhile _t<tfùë°subscriptùë°ùëìt<t\\_{f}_ do\\\n\\\n\\\nPropagate x^t+Œî‚Äãt(i)=TakeStep‚Äã(t,x^t(i),bùñ•,œµ,Œî‚Äãt)subscriptsuperscript^ùë•ùëñùë°Œîùë°TakeStepùë°subscriptsuperscript^ùë•ùëñùë°subscriptùëèùñ•italic-œµŒîùë°\\\\hat{x}^{(i)}\\_{t+\\\\Delta t}=\\\\texttt{TakeStep}(t,\\\\hat{x}^{(i)}\\_{t},b\\_{\\\\mathsf{F}},\\\\epsilon,\\\\Delta t) for i=1,‚Ä¶,nùëñ1‚Ä¶ùëõi=1,\\\\ldots,n. // ODE or SDE integrator.\\\n\\\n\\\nUpdate t=t+Œî‚Äãtùë°ùë°Œîùë°t=t+\\\\Delta t.\\\n\\\nReturn: {x^(i)}i=1nsuperscriptsubscriptsuperscript^ùë•ùëñùëñ1ùëõ\\\\{\\\\hat{x}^{(i)}\\\\}\\_{i=1}^{n}.\\\n\\\nAlgorithm 4Sampling general stochastic interpolants.\\\n\\\n#### Using the denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} instead of the score sùë†s.\\\n\\\nWe remarked in Section [6.1]Learning ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") that learning the denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} is more numerically stable than learning the score sùë†s directly.\\\nWe note that while the objective for Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} is well-behaved for all t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\], the resulting drifts can become singular at t=0ùë°0t=0 and t=1ùë°1t=1 when using s‚Äã(t,x)=‚àíŒ∑z‚Äã(t,x)/Œ≥‚Äã(t)ùë†ùë°ùë•subscriptùúÇùëßùë°ùë•ùõæùë°s(t,x)=-\\\\eta\\_{z}(t,x)/\\\\gamma(t).\\\nThere are several ways to avoid this singularity in practice.\\\nOne method is to choose a time-varying œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) that vanishes in a small interval around the endpoints t=0ùë°0t=0 and t=1ùë°1t=1, which avoids this numerical instability.\\\nAn alternative option is to integrate the SDE up to a final time tfsubscriptùë°ùëìt\\_{f} with tf<1subscriptùë°ùëì1t\\_{f}<1, and then to perform a step of denoising using ( [5.13]In Lemma 5.2 (SURE). ‚Ä£ 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nWe use this approach in Section [7]Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") below when sampling the SDE.\\\n\\\n#### A denoiser is all you need for spatially-linear one-sided interpolants.\\\n\\\nInput: Number of samples nùëõn, timestep Œî‚ÄãtŒîùë°\\\\Delta t, denoiser estimate Œ∑^zsubscript^ùúÇùëß\\\\hat{\\\\eta}\\_{z}, initial time t0subscriptùë°0t\\_{0}, final time tfsubscriptùë°ùëìt\\_{f}, noise function Œ≥‚Äã(t)ùõæùë°\\\\gamma(t), diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t), interpolant functions Œ±‚Äã(t)ùõºùë°\\\\alpha(t) and Œ≤‚Äã(t)ùõΩùë°\\\\beta(t), SDE or ODE timestepper TakeStep.\\\n\\\nReturns: {x^1(i)}i=1nsuperscriptsubscriptsuperscriptsubscript^ùë•1ùëñùëñ1ùëõ\\\\{\\\\hat{x}\\_{1}^{(i)}\\\\}\\_{i=1}^{n}, a batch of model samples.\\\n\\\nInitialize\\\n\\\n\\\nSet time t=t0ùë°subscriptùë°0t=t\\_{0}.\\\n\\\n\\\nDraw initial conditions x^t0(i)‚àºœÅ0similar-tosubscriptsuperscript^ùë•ùëñsubscriptùë°0subscriptùúå0\\\\hat{x}^{(i)}\\_{t\\_{0}}\\\\sim\\\\rho\\_{0} for i=1,‚Ä¶,nùëñ1‚Ä¶ùëõi=1,\\\\ldots,n.\\\n\\\n\\\nConstruct s^‚Äã(t,x)=‚àíŒ∑^z‚Äã(t,x)/Œ±‚Äã(t)^ùë†ùë°ùë•subscript^ùúÇùëßùë°ùë•ùõºùë°\\\\hat{s}(t,x)=-\\\\hat{\\\\eta}\\_{z}(t,x)/\\\\alpha(t).\\\n\\\n\\\nConstruct b^‚Äã(t,x)=Œ±Àô‚Äã(t)‚ÄãŒ∑^zùóàùóå‚Äã(t,x)+Œ≤Àô‚Äã(t)Œ≤‚Äã(t)‚Äã(x‚àíŒ±‚Äã(t)‚ÄãŒ∑^zùóàùóå‚Äã(t,x))^ùëèùë°ùë•Àôùõºùë°superscriptsubscript^ùúÇùëßùóàùóåùë°ùë•ÀôùõΩùë°ùõΩùë°ùë•ùõºùë°superscriptsubscript^ùúÇùëßùóàùóåùë°ùë•\\\\hat{b}(t,x)=\\\\dot{\\\\alpha}(t)\\\\hat{\\\\eta}\\_{z}^{\\\\mathsf{os}}(t,x)+\\\\frac{\\\\dot{\\\\beta}(t)}{\\\\beta(t)}\\\\left(x-\\\\alpha(t)\\\\hat{\\\\eta}\\_{z}^{\\\\mathsf{os}}(t,x)\\\\right).\\\n\\\n\\\nConstruct b^ùñ•‚Äã(t,x)=b^‚Äã(t,x)+œµ‚Äã(t)‚Äãs^‚Äã(t,x)subscript^ùëèùñ•ùë°ùë•^ùëèùë°ùë•italic-œµùë°^ùë†ùë°ùë•\\\\hat{b}\\_{\\\\mathsf{F}}(t,x)=\\\\hat{b}(t,x)+\\\\epsilon(t)\\\\hat{s}(t,x). // Reduces to b^^ùëè\\\\hat{b} for œµ‚Äã(t)=0italic-œµùë°0\\\\epsilon(t)=0 (ODE).\\\n\\\nwhile _t<tfùë°subscriptùë°ùëìt<t\\_{f}_ do\\\n\\\n\\\nPropagate x^t+Œî‚Äãt(i)=TakeStep‚Äã(t,x^t(i),bùñ•,œµ,Œî‚Äãt)subscriptsuperscript^ùë•ùëñùë°Œîùë°TakeStepùë°subscriptsuperscript^ùë•ùëñùë°subscriptùëèùñ•italic-œµŒîùë°\\\\hat{x}^{(i)}\\_{t+\\\\Delta t}=\\\\texttt{TakeStep}(t,\\\\hat{x}^{(i)}\\_{t},b\\_{\\\\mathsf{F}},\\\\epsilon,\\\\Delta t) for i=1,‚Ä¶,nùëñ1‚Ä¶ùëõi=1,\\\\ldots,n. // ODE or SDE integrator.\\\n\\\n\\\nUpdate t=t+Œî‚Äãtùë°ùë°Œîùë°t=t+\\\\Delta t.\\\n\\\nReturn: {x^(i)}i=1nsuperscriptsubscriptsuperscript^ùë•ùëñùëñ1ùëõ\\\\{\\\\hat{x}^{(i)}\\\\}\\_{i=1}^{n}.\\\n\\\nAlgorithm 5Sampling spatially-linear one-sided interpolants with Gaussian œÅ0subscriptùúå0\\\\rho\\_{0}.\\\n\\\nAs shown in ( [4.19]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), and as considered in Section [5.2]Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), the denoiser Œ∑zùóàùóåsuperscriptsubscriptùúÇùëßùóàùóå\\\\eta\\_{z}^{\\\\mathsf{os}} is sufficient to represent the velocity field bùëèb appearing in the probability flow equation ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n\\\nUsing this definition for bùëèb and the relationship s‚Äã(t,x)=‚àíŒ∑z‚Äã(t,x)/Œ≥‚Äã(t)ùë†ùë°ùë•subscriptùúÇùëßùë°ùë•ùõæùë°s(t,x)=-\\\\eta\\_{z}(t,x)/\\\\gamma(t), we state the following ordinary and stochastic differential equations for sampling\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | ODE::ODEabsent\\\\displaystyle\\\\text{ODE}: | XÀôt=Œ±Àô‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,Xt)+Œ≤Àô‚Äã(t)Œ≤‚Äã(t)‚Äã(Xt‚àíŒ±‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,Xt))subscriptÀôùëãùë°Àôùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptùëãùë°ÀôùõΩùë°ùõΩùë°subscriptùëãùë°ùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptùëãùë°\\\\displaystyle\\\\quad\\\\dot{X}\\_{t}=\\\\dot{\\\\alpha}(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,X\\_{t})+\\\\frac{\\\\dot{\\\\beta}(t)}{\\\\beta(t)}\\\\big{(}X\\_{t}-\\\\alpha(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,X\\_{t})\\\\big{)} |  | (6.7) |\\\n|  | SDE::SDEabsent\\\\displaystyle\\\\text{SDE}: | d‚ÄãXtùñ•=(Œ±Àô‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,Xtùñ•)+Œ≤Àô‚Äã(t)Œ≤‚Äã(t)‚Äã(Xtùñ•‚àíŒ±‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,Xtùñ•))‚àíœµ‚Äã(t)Œ±‚Äã(t)‚ÄãŒ∑zùóàùóå‚Äã(t,Xtùñ•))‚Äãd‚Äãtùëësubscriptsuperscriptùëãùñ•ùë°Àôùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptsuperscriptùëãùñ•ùë°ÀôùõΩùë°ùõΩùë°subscriptsuperscriptùëãùñ•ùë°ùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptsuperscriptùëãùñ•ùë°italic-œµùë°ùõºùë°subscriptsuperscriptùúÇùóàùóåùëßùë°subscriptsuperscriptùëãùñ•ùë°ùëëùë°\\\\displaystyle\\\\quad dX^{\\\\mathsf{F}}\\_{t}=\\\\big{(}\\\\dot{\\\\alpha}(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,X^{\\\\mathsf{F}}\\_{t})+\\\\frac{\\\\dot{\\\\beta}(t)}{\\\\beta(t)}\\\\big{(}X^{\\\\mathsf{F}}\\_{t}-\\\\alpha(t)\\\\eta^{\\\\mathsf{os}}\\_{z}(t,X^{\\\\mathsf{F}}\\_{t})\\\\big{)}-\\\\frac{\\\\epsilon(t)}{\\\\alpha(t)}\\\\eta^{\\\\mathsf{os}}\\_{z}(t,X^{\\\\mathsf{F}}\\_{t})\\\\big{)}dt |  |\\\n|  |  | +2‚Äãœµ‚Äã(t)‚Äãd‚ÄãWt.2italic-œµùë°ùëësubscriptùëäùë°\\\\displaystyle\\\\qquad\\\\qquad+\\\\sqrt{2\\\\epsilon(t)}dW\\_{t}. |  |\\\n\\\nBecause Œ≤‚Äã(0)=0ùõΩ00\\\\beta(0)=0, the drift is numerically singular in both equations.\\\nHowever, b‚Äã(t=0,x)ùëèùë°0ùë•b(t=0,x) has a finite limit\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | b‚Äã(t=0,x)=Œ±Àô‚Äã(0)‚Äãx+Œ≤Àô‚Äã(0)‚Äãùîº‚Äã\\[x1\\],ùëèùë°0ùë•Àôùõº0ùë•ÀôùõΩ0ùîºdelimited-\\[\\]subscriptùë•1b(t=0,x)=\\\\dot{\\\\alpha}(0)x+\\\\dot{\\\\beta}(0)\\\\mathbb{E}\\[x\\_{1}\\], |  | (6.8) |\\\n\\\nas originally given in ( [4.20]In 4.4 Spatially linear one-sided interpolants ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nEquation ( [6.8]In A denoiser is all you need for spatially-linear one-sided interpolants. ‚Ä£ 6.2 Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) can be estimated using available data, which means that when learning a one-sided interpolant, ODE and SDE-based generative models can be defined exactly on the interval t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] using only a score or a denoiser without singularity.\\\n\\\nThe factor of Œ±‚Äã(t)‚àí1ùõºsuperscriptùë°1\\\\alpha(t)^{-1} in the final term of the SDE could pose numerical problems at t=1ùë°1t=1, as Œ±‚Äã(1)=0ùõº10\\\\alpha(1)=0. As discussed in the paragraph above, a choice of œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) which is such that œµ‚Äã(t)/Œ±‚Äã(t)‚ÜíC‚Üíitalic-œµùë°ùõºùë°ùê∂\\\\epsilon(t)/\\\\alpha(t)\\\\rightarrow C for some constant Cùê∂C as t‚Üí1‚Üíùë°1t\\\\rightarrow 1 avoids any issue.\\\n\\\nAn algorithm for sampling with only the denoiser Œ∑zùóàùóåsuperscriptsubscriptùúÇùëßùóàùóå\\\\eta\\_{z}^{\\\\mathsf{os}} is given in Algorithm [5]In A denoiser is all you need for spatially-linear one-sided interpolants. ‚Ä£ 6.2 Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\",
            "citations": null
          },
          "7 Numerical results\\": {
            "content": "\\\n![Refer to caption]Figure 9: The effects of Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) and œµitalic-œµ\\\\epsilon on sample quality: qualitative comparison. Kernel density estimates of œÅ^‚Äã(1)^ùúå1\\\\hat{\\\\rho}(1) for models with different choices of Œ≥ùõæ\\\\gamma and œµitalic-œµ\\\\epsilon. Sampling with œµ=0italic-œµ0\\\\epsilon=0 corresponds to using the probability flow with the learned drift b^=v^‚àíŒ≥‚ÄãŒ≥Àô‚Äãs^^ùëè^ùë£ùõæÀôùõæ^ùë†\\\\hat{b}=\\\\hat{v}-\\\\gamma\\\\dot{\\\\gamma}\\\\hat{s}, whereas sampling with œµ>0italic-œµ0\\\\epsilon>0 corresponds to using the SDE with the learned drift b^^ùëè\\\\hat{b} and score s^^ùë†\\\\hat{s}. We find empirically that SDE sampling is generically better than ODE sampling for this target density, though the gap is smallest for the probability flow specified with Œ≥‚Äã(t)=t‚Äã(1‚àít)ùõæùë°ùë°1ùë°\\\\gamma(t)=\\\\sqrt{t(1-t)}, in agreement with the Remark [4.1]Remark 4.1. ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") regarding the influence of Œ≥ùõæ\\\\gamma on bùëèb at the endpoints.\\\nThe SDE performs well at any noise level, though numerically integrating it for higher œµitalic-œµ\\\\epsilon requires a smaller step size.\\\n\\\nSo far, we have been focused on the impact of Œ±ùõº\\\\alpha, Œ≤ùõΩ\\\\beta, and Œ≥ùõæ\\\\gamma in ( [4.1]In 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) on the density œÅ‚Äã(t)ùúåùë°\\\\rho(t), which we illustrated analytically.\\\nIn this section, we study examples where the drift coefficients must be learned over parametric function classes.\\\nIn particular, we explore numerically the tradeoffs between generative models based on ODEs and SDEs, as well as the various design choices introduced in Sections [3]Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), [4]Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), and [6]Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nIn Section [7.1]Deterministic versus stochastic models: 2D ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we consider simple two-dimensional distributions that can be visualized easily.\\\nIn Section [7.2]Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we consider high-dimensional Gaussian mixtures, where we can compare our learned models to analytical solutions.\\\nFinally in Section [7.3]Image generation ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") we perform some experiments in image generation.\\\n\\\n### 7.1 Deterministic versus stochastic models: 2D\\\n\\\n![Refer to caption]Figure 10: The effects of Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) and œµitalic-œµ\\\\epsilon on sample quality: quantitative comparison.\\\nFor each Œ≥ùõæ\\\\gamma and each œµitalic-œµ\\\\epsilon specified in Figure [9]Figure 9 ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), we compute the mean and variance of the absolute value of the difference of log‚Å°œÅ1subscriptùúå1\\\\log\\\\rho\\_{1} (exact) and log‚Å°œÅ^‚Äã(1)^ùúå1\\\\log\\\\hat{\\\\rho}(1) (model).\\\nThe model specified with Œ≥‚Äã(t)=t‚Äã(1‚àít)ùõæùë°ùë°1ùë°\\\\gamma(t)=\\\\sqrt{t(1-t)} is the best performing probability flow (œµ=0italic-œµ0\\\\epsilon=0).\\\nAt large œµitalic-œµ\\\\epsilon, SDE sampling with the same learned drift b^^ùëè\\\\hat{b} and score s^^ùë†\\\\hat{s} performs better, complementing the observations in the previous figure.\\\n\\\nAs shown in Section [2.2]Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), the evolution of œÅ‚Äã(t)ùúåùë°\\\\rho(t) can be captured exactly by either the transport equation ( [2.9]In 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) or by the forward and backward Fokker-Planck equations ( [2.20]In item 1 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.22]In item 2 ‚Ä£ 2.2 Transport equations, score, and quadratic objectives ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nThese perspectives lead to generative models that are either based on the deterministic dynamics ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) or the forward and backward stochastic dynamics ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) and ( [2.34]In item 3 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")), where the level of stochasticity can be tuned by varying the diffusion coefficient œµ‚Äã(t)italic-œµùë°\\\\epsilon(t).\\\nWe showed in Section [2.4]Likelihood control ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") that setting a constant œµ‚Äã(t)=œµ>0italic-œµùë°italic-œµ0\\\\epsilon(t)=\\\\epsilon>0 can offer better control on the likelihood when using an imperfect velocity bùëèb and an imperfect score sùë†s.\\\nMoreover, the optimal choice of œµitalic-œµ\\\\epsilon is determined by the relative accuracy of the estimates b^^ùëè\\\\hat{b} and s^^ùë†\\\\hat{s}.\\\nHaving laid out the evolution of œÅ‚Äã(t)ùúåùë°\\\\rho(t) for different choices of Œ≥ùõæ\\\\gamma in the previous section, we now show how different values of œµitalic-œµ\\\\epsilon can build these densities up from individual trajectories.\\\nThe stochasticity intrinsic to the sampling process increases with œµitalic-œµ\\\\epsilon, but by construction, the marginal density œÅ‚Äã(t)ùúåùë°\\\\rho(t) for fixed Œ±ùõº\\\\alpha, Œ≤ùõΩ\\\\beta and Œ≥ùõæ\\\\gamma is independent of œµitalic-œµ\\\\epsilon.\\\n\\\n#### The roles of Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) and œµitalic-œµ\\\\epsilon for 2D density estimation.\\\n\\\nTo explore the roles of Œ≥ùõæ\\\\gamma and œµitalic-œµ\\\\epsilon, we consider a target density œÅ1subscriptùúå1\\\\rho\\_{1} whose mass concentrates on a two-dimensional checkerboard and a base density œÅ0=ùñ≠‚Äã(0,Id)subscriptùúå0ùñ≠0Id\\\\rho\\_{0}=\\\\mathsf{N}(0,\\\\text{\\\\it Id}); here, the target was chosen to highlight the ability of the method to learn a challenging density with sharp boundaries.\\\nThe same model architecture and training procedure was used to learn both vùë£v and sùë†s for several choices of Œ≥ùõæ\\\\gamma given in Table [8]Table 8 ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nThe feed-forward network was defined with 444 layers, each of size 512512512, and with the ReLU \\[ [46])\\] as an activation function.\\\n\\\nAfter training, we draw 300,000 samples using either an ODE (œµ=0italic-œµ0\\\\epsilon=0) or an SDE with œµ=0.5italic-œµ0.5\\\\epsilon=0.5, œµ=1.0italic-œµ1.0\\\\epsilon=1.0, or œµ=2.5italic-œµ2.5\\\\epsilon=2.5.\\\nWe compute kernel density estimates for each resulting density, which we compare to the exact density and to the original stochastic interpolant from \\[ [2])\\] (obtained by setting Œ≥=0ùõæ0\\\\gamma=0).\\\nResults are given in Figure [9]Figure 9 ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") for each Œ≥ùõæ\\\\gamma and each œµitalic-œµ\\\\epsilon.\\\nSampling with œµ>0italic-œµ0\\\\epsilon>0 empirically performs better, though the gap is smallest when using the Œ≥ùõæ\\\\gamma specified in ( [4.13]In Remark 4.1. ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\nMoreover, even when œµ=0italic-œµ0\\\\epsilon=0, using the probability flow with Œ≥ùõæ\\\\gamma given by ( [4.13]In Remark 4.1. ‚Ä£ 4.3 Impact of the latent variable ùõæ‚Å¢(ùë°)‚Å¢ùëß and the diffusion coefficient œµ‚Å¢(ùë°) ‚Ä£ 4 Spatially linear interpolants ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) performs better than the original interpolant from \\[ [2])\\].\\\nNumerical comparisons of the mean and variance of the absolute value of the difference of log‚Å°œÅ1subscriptùúå1\\\\log\\\\rho\\_{1} (exact) from log‚Å°œÅ^‚Äã(1)^ùúå1\\\\log\\\\hat{\\\\rho}(1) (model) for the various configurations are given in Figure [10]Figure 10 ‚Ä£ 7.1 Deterministic versus stochastic models: 2D ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), which corroborate the above observations.\\\n\\\n### 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures\\\n\\\nWe now study the performance of the stochastic interpolant method in the case where the target is a high-dimensional Gaussian mixture. Gaussian mixtures (GMs) are a convenient class of target distributions to study, because they can be made arbitrarily complex by increasing the number of modes, their separation, and the overall dimensionality.\\\nMoreover, by considering low-dimensional projections, we can compute quantitative error metrics such as the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence between the target and the model as a function of the (constant) diffusion coefficient œµitalic-œµ\\\\epsilon.\\\nThis enables us to quantify the tradeoffs of ODE and SDE-based samplers.\\\n\\\n#### Experimental details.\\\n\\\nWe consider the problem of mapping œÅ0=ùñ≠‚Äã(0,Id)subscriptùúå0ùñ≠0Id\\\\rho\\_{0}=\\\\mathsf{N}(0,\\\\text{\\\\it Id}) to a Gaussian mixture with five modes in dimension d=128ùëë128d=128.\\\nThe mean mi‚àà‚Ñùdsubscriptùëöùëñsuperscript‚Ñùùëëm\\_{i}\\\\in{\\\\mathbb{R}}^{d} of each mode is drawn i.i.d. mi‚àºùñ≠‚Äã(0,œÉ2‚ÄãId)similar-tosubscriptùëöùëñùñ≠0superscriptùúé2Idm\\_{i}\\\\sim\\\\mathsf{N}(0,\\\\sigma^{2}\\\\text{\\\\it Id}) with œÉ=7.5ùúé7.5\\\\sigma=7.5.\\\nEach covariance Ci‚àà‚Ñùd√ódsubscriptùê∂ùëñsuperscript‚ÑùùëëùëëC\\_{i}\\\\in{\\\\mathbb{R}}^{d\\\\times d} is also drawn randomly with Ci=1d‚ÄãWiùñ≥‚ÄãWi+Idsubscriptùê∂ùëñ1ùëësuperscriptsubscriptùëäùëñùñ≥subscriptùëäùëñIdC\\_{i}=\\\\tfrac{1}{d}W\\_{i}^{\\\\mathsf{T}}W\\_{i}+\\\\text{\\\\it Id} and (Wi)k‚Äãl‚àºùñ≠‚Äã(0,1)similar-tosubscriptsubscriptùëäùëñùëòùëôùñ≠01(W\\_{i})\\_{kl}\\\\sim\\\\mathsf{N}(0,1) for k,l=1,‚Ä¶,dformulae-sequenceùëòùëô1‚Ä¶ùëëk,l=1,\\\\ldots,d; this choice ensures that each covariance is a positive definite perturbation of the identity with diagonal entries that are O‚Äã(1)ùëÇ1O(1) with respect to dimension dùëëd.\\\nFor a fixed random draw of the means {mi}i=15superscriptsubscriptsubscriptùëöùëñùëñ15\\\\{m\\_{i}\\\\}\\_{i=1}^{5} and covariances {Ci}i=15superscriptsubscriptsubscriptùê∂ùëñùëñ15\\\\{C\\_{i}\\\\}\\_{i=1}^{5}, we study the four combinations of learning bùëèb or vùë£v and sùë†s or Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} to form a stochastic interpolant from œÅ0subscriptùúå0\\\\rho\\_{0} to œÅ1subscriptùúå1\\\\rho\\_{1}.\\\nIn each case, we consider a linear interpolant with Œ±‚Äã(t)=1‚àítùõºùë°1ùë°\\\\alpha(t)=1-t, Œ≤‚Äã(t)=tùõΩùë°ùë°\\\\beta(t)=t, and Œ≥‚Äã(t)=t‚Äã(1‚àít)ùõæùë°ùë°1ùë°\\\\gamma(t)=\\\\sqrt{t(1-t)}.\\\n\\\n![Refer to caption]Figure 11: Gaussian mixtures: target projection. Low-dimensional marginal of the target density œÅ1subscriptùúå1\\\\rho\\_{1} for the Gaussian mixture experiment, visualized via KDE.\\\n\\\nFor visual reference, a projection of the target density œÅ1subscriptùúå1\\\\rho\\_{1} onto the first two coordinates is depicted in Figure [11]Figure 11 ‚Ä£ Experimental details. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") ‚Äì it contains significant multimodality, several modes that are difficult to distinguish, and one mode that is well-separated from the others, which requires nontrivial transport to resolve.\\\nIn the following experiments, all samples were generated with the fourth-order Dormand-Prince adaptive ODE solver (dopri5) for œµ=0italic-œµ0\\\\epsilon=0 and by using one thousand timesteps of the Heun SDE integrator introduced in \\[ [32])\\] for œµ‚â†0italic-œµ0\\\\epsilon\\\\neq 0.\\\nTo maximize performance at high œµitalic-œµ\\\\epsilon, the timestep should be adapted to œµitalic-œµ\\\\epsilon; here, we chose to use a fixed computational budget that performs well for moderate levels of œµitalic-œµ\\\\epsilon to avoid computational effort that may become unreasonable in practice.\\\nWhen learning Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}, to avoid singularity at t=0ùë°0t=0 and t=1ùë°1t=1 when dividing by Œ≥‚Äã(t)ùõæùë°\\\\gamma(t) in the formula s‚Äã(t,x)=‚àíŒ∑‚Äã(t,x)/Œ≥‚Äã(t)ùë†ùë°ùë•ùúÇùë°ùë•ùõæùë°s(t,x)=-\\\\eta(t,x)/\\\\gamma(t), we set t0=10‚àí4subscriptùë°0superscript104t\\_{0}=10^{-4} and tf=1‚àít0subscriptùë°ùëì1subscriptùë°0t\\_{f}=1-t\\_{0} in Algorithm [4]In 6.2 Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"). For all other cases, we set t0=0subscriptùë°00t\\_{0}=0 and tf=1subscriptùë°ùëì1t\\_{f}=1.\\\n\\\n![Refer to caption]Figure 12: Gaussian mixtures: density errors. Errors œÅ^1‚Äã(x,y)‚àíœÅ1‚Äã(x,y)subscript^ùúå1ùë•ùë¶subscriptùúå1ùë•ùë¶\\\\hat{\\\\rho}\\_{1}(x,y)-\\\\rho\\_{1}(x,y) in the marginals over the first two coordinates for all four variations of learning bùëèb or vùë£v and sùë†s or Œ∑ùúÇ\\\\eta, computed via kernel density estimation. For small œµitalic-œµ\\\\epsilon, the model densities tend to be overly-concentrated, and overestimate the density within the modes and underestimate the densities in the tails. As œµitalic-œµ\\\\epsilon increases, the model becomes less concentrated and more accurately represents the target density. For œµitalic-œµ\\\\epsilon too large, the model becomes overly spread out and under-estimates the density within the modes. Note: visualizations show two-dimensional slices of a 128128128-dimensional density.\\\n\\\n#### Quantitative metric\\\n\\\nTo quantify performance, we make use of an error metric given by a ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence between kernel density estimates (KDE) of low-dimensional marginals of œÅ1subscriptùúå1\\\\rho\\_{1} and the model density œÅ^1subscript^ùúå1\\\\hat{\\\\rho}\\_{1}; this error metric was chosen for computational tractability and interpretability.\\\nTo compute it, we draw 50,0005000050,000 samples from œÅ1subscriptùúå1\\\\rho\\_{1} and each œÅ^1subscript^ùúå1\\\\hat{\\\\rho}\\_{1}. We obtain samples from the marginal density over the first two coordinates by projection, and then compute a Gaussian KDE with bandwidth parameter chosen by Scott‚Äôs rule. We then draw a fresh set of Ne=50,000subscriptùëÅùëí50000N\\_{e}=50,000 samples {xi}i=1Nesuperscriptsubscriptsubscriptùë•ùëñùëñ1subscriptùëÅùëí\\\\{x\\_{i}\\\\}\\_{i=1}^{N\\_{e}} with each xi‚àºœÅ1similar-tosubscriptùë•ùëñsubscriptùúå1x\\_{i}\\\\sim\\\\rho\\_{1} for evaluation.\\\nTo compute the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence, we form a Monte-Carlo estimate with control variate\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ùñ™ùñ´‚Äã(œÅ1‚à•œÅ^1)‚âà1Ne‚Äã‚àëi=1Ne(log‚Å°œÅ1‚Äã(xi)‚àílog‚Å°œÅ^1‚Äã(xi)‚àí(œÅ^1‚Äã(xi)œÅ1‚Äã(xi)‚àí1)).ùñ™ùñ´conditionalsubscriptùúå1subscript^ùúå11subscriptùëÅùëísuperscriptsubscriptùëñ1subscriptùëÅùëísubscriptùúå1subscriptùë•ùëñsubscript^ùúå1subscriptùë•ùëñsubscript^ùúå1subscriptùë•ùëñsubscriptùúå1subscriptùë•ùëñ1\\\\mathsf{KL}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{1})\\\\approx\\\\frac{1}{N\\_{e}}\\\\sum\\_{i=1}^{N\\_{e}}\\\\left(\\\\log\\\\rho\\_{1}(x\\_{i})-\\\\log\\\\hat{\\\\rho}\\_{1}(x\\_{i})-\\\\left(\\\\frac{\\\\hat{\\\\rho}\\_{1}(x\\_{i})}{\\\\rho\\_{1}(x\\_{i})}-1\\\\right)\\\\right). |  | (7.1) |\\\n\\\nWe found use of the control variate œÅ^1/œÅ1‚àí1subscript^ùúå1subscriptùúå11\\\\hat{\\\\rho}\\_{1}/\\\\rho\\_{1}-1 helpful to reduce variance in the Monte-Carlo estimate; moreover, by concavity of the logarithm, use of the control variate ensures that the Monte-Carlo estimate cannot become negative.\\\n\\\n#### Results.\\\n\\\n![Refer to caption]Figure 13: Gaussian mixtures: densities. A visualization of the marginal densities in the first two variables of the model density œÅ^1subscript^ùúå1\\\\hat{\\\\rho}\\_{1} computed for all four variations of learning bùëèb or vùë£v and sùë†s or Œ∑ùúÇ\\\\eta, computed via kernel density estimation. Note: visualizations show two-dimensional slices of a 128128128-dimensional density.![Refer to caption]Figure 14: Gaussian mixtures: quantitative comparison.ùñ™ùñ´‚Äã(œÅ1‚à•œÅ^1œµ)ùñ™ùñ´conditionalsubscriptùúå1superscriptsubscript^ùúå1italic-œµ\\\\mathsf{KL}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{1}^{\\\\epsilon}) as a function of œµitalic-œµ\\\\epsilon when learning each of the four possible sets of drift coefficients (b,s)ùëèùë†(b,s), (b,Œ∑)ùëèùúÇ(b,\\\\eta), (v,s)ùë£ùë†(v,s), (v,Œ∑)ùë£ùúÇ(v,\\\\eta). The best performance is achieved when learning bùëèb and Œ∑ùúÇ\\\\eta, along with a proper choice of œµ>0italic-œµ0\\\\epsilon>0.\\\n\\\nFigures [12]Figure 12 ‚Ä£ Experimental details. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and [13]Figure 13 ‚Ä£ Results. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") display two-dimensional projections (computed via KDE) of the model density error œÅ^1‚àíœÅ1subscript^ùúå1subscriptùúå1\\\\hat{\\\\rho}\\_{1}-\\\\rho\\_{1} and the model density œÅ^1subscript^ùúå1\\\\hat{\\\\rho}\\_{1} itself, respectively, for different instantiations of Algorithms [1]In Deterministic generative modeling: Learning ùëè versus learning ùë£ and ùë†. ‚Ä£ 6.1 Learning ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and [2]In Antithetic sampling and capping. ‚Ä£ 6.1 Learning ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and different choices of œµitalic-œµ\\\\epsilon in Algorithm [4]In 6.2 Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nTaken together with Figure [11]Figure 11 ‚Ä£ Experimental details. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), these results demonstrate qualitatively that small values of œµitalic-œµ\\\\epsilon tend to over-estimate the density within the modes and under-estimate the density in the tails.\\\nConversely, when œµitalic-œµ\\\\epsilon is taken too large, the model tends to under-estimate the modes and over-estimate the tails. Somewhere in between (and for differing levels of œµitalic-œµ\\\\epsilon), every model obtains its optimal performance.\\\nFigure [14]Figure 14 ‚Ä£ Results. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") makes these observations quantitative, and displays the ùñ™ùñ´ùñ™ùñ´\\\\mathsf{KL}-divergence from the target marginal to the model marginal ùñ™ùñ´‚Äã(œÅ1‚à•œÅ^1œµ)ùñ™ùñ´conditionalsubscriptùúå1superscriptsubscript^ùúå1italic-œµ\\\\mathsf{KL}(\\\\rho\\_{1}\\\\>\\\\\\|\\\\>\\\\hat{\\\\rho}\\_{1}^{\\\\epsilon}) as a function of œµitalic-œµ\\\\epsilon, with each data point on the curve matching the models depicted in Figures [12]Figure 12 ‚Ä£ Experimental details. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and [13]Figure 13 ‚Ä£ Results. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nWe find that for each case, there is an optimal value of œµ‚â†0italic-œµ0\\\\epsilon\\\\neq 0, in line with the qualitative picture put forth by Figures [12]Figure 12 ‚Ä£ Experimental details. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") and [13]Figure 13 ‚Ä£ Results. ‚Ä£ 7.2 Deterministic versus stochastic models: 128D Gaussian mixtures ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nMoreover, we find that learning bùëèb generically performs better than learning vùë£v, and that learning Œ∑ùúÇ\\\\eta generically performs better than learning sùë†s (except when œµitalic-œµ\\\\epsilon is taken large enough that performance starts to degrade).\\\nWith proper treatment of the singularity in the sampling algorithm when using the denoiser in the construction of s‚Äã(t,x)=‚àíŒ∑‚Äã(t,x)/Œ≥‚Äã(t)ùë†ùë°ùë•ùúÇùë°ùë•ùõæùë°s(t,x)=-\\\\eta(t,x)/\\\\gamma(t) ‚Äì either by capping t0‚â†0subscriptùë°00t\\_{0}\\\\neq 0 and tf‚â†1subscriptùë°ùëì1t\\_{f}\\\\neq 1 or by properly tuning œµ‚Äã(t)italic-œµùë°\\\\epsilon(t) as discussed in Section [6.2]Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") ‚Äì our results suggest that learning the denoiser is best practice.\\\n\\\n### 7.3 Image generation\\\n\\\nIn the following, we demonstrate that the proposed method scales straightforwardly to high-dimensional problems like image generation.\\\nTo this end, we illustrate the use of our approach on the 128√ó128128128128\\\\times 128 Oxford flowers dataset \\[ [47])\\] by testing two different variations of the interpolant for image generation: the one-sided interpolant, using œÅ0=ùñ≠‚Äã(0,Id)subscriptùúå0ùñ≠0Id\\\\rho\\_{0}=\\\\mathsf{N}(0,\\\\text{\\\\it Id}), as well as the mirror interpolant, where œÅ0=œÅ1subscriptùúå0subscriptùúå1\\\\rho\\_{0}=\\\\rho\\_{1} both represent the data distribution.\\\nThe purpose of this section is to demonstrate that our theory is well-motivated, and that it provides a framework that is both scalable and flexible.\\\nIn this regard, image generation is a convenient exercise, but is not the main focus of this work, and we will leave a more thorough study on other datasets such as ImageNet with standard benchmarks such as the Frechet Inception Distance (FID) for a future study.\\\n\\\n#### Generation from Gaussian œÅ0subscriptùúå0\\\\rho\\_{0}.\\\n\\\nWe train spatially-linear one-sided interpolants xt=(1‚àít)‚Äãz+t‚Äãx1subscriptùë•ùë°1ùë°ùëßùë°subscriptùë•1x\\_{t}=(1-t)z+tx\\_{1} and xt=cos‚Å°(œÄ2‚Äãt)‚Äãz+sin‚Å°(œÄ2‚Äãt)‚Äãx1subscriptùë•ùë°ùúã2ùë°ùëßùúã2ùë°subscriptùë•1x\\_{t}=\\\\cos({\\\\tfrac{\\\\pi}{2}}t)z+\\\\sin({\\\\tfrac{\\\\pi}{2}t})x\\_{1} on the 128√ó128128128128\\\\times 128 Oxford flowers dataset, where we take z‚àºùñ≠‚Äã(0,Id)similar-toùëßùñ≠0Idz\\\\sim\\\\mathsf{N}(0,\\\\text{\\\\it Id}) and x1subscriptùë•1x\\_{1} from the data distribution.\\\nBased on our results for Gaussian mixtures, we learn the drift b‚Äã(t,x)ùëèùë°ùë•b(t,x), the score s‚Äã(t,x)ùë†ùë°ùë•s(t,x), and the denoiser Œ∑z‚Äã(t,x)subscriptùúÇùëßùë°ùë•\\\\eta\\_{z}(t,x) to benchmark our generative models based on ODEs or SDEs.\\\nIn all cases, we parameterize the networks representing Œ∑^^ùúÇ\\\\hat{\\\\eta}, s^^ùë†\\\\hat{s} and b^^ùëè\\\\hat{b} using the U-Net architecture used in \\[ [25])\\].\\\nMinimization of the objective functions given in Section [3.2]One-sided interpolants for Gaussian ùúå‚ÇÄ ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") is performed using the Adam optimizer.\\\nDetails of the architecture in both cases and all training hyperparameters are provided in Appendix [C.1]C.1 Image Experiments ‚Ä£ Appendix C Experimental Specifications ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\n\\\n![Refer to caption]Figure 15: Image generation: Oxford flowers.\\\nExample generated flowers from the same initial condition x0subscriptùë•0x\\_{0} using either the ODE with œµ=0italic-œµ0\\\\epsilon=0 and learned bùëèb or the SDE for various increasing values of œµitalic-œµ\\\\epsilon with learned bùëèb and sùë†s.\\\nFor œµ=0italic-œµ0\\\\epsilon=0, sampling is done using the dopri5 solver and therefore the number of steps is adaptive.\\\nOtherwise, 200020002000, 250025002500, and 400040004000 steps were taken using the Heun solver for œµ=1.0italic-œµ1.0\\\\epsilon=1.0, 2.02.02.0, and 4.04.04.0 respectively.\\\n\\\nLike in the case of learning Gaussian mixtures, we use the fourth-order dopri5 solver when sampling with the ODE and the Heun method for the SDE, as detailed in Algorithm [4]In 6.2 Sampling ‚Ä£ 6 Algorithmic aspects ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nWhen learning a denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z}, we found it beneficial to complete the image generation with a final denoising step, in which we set œµ=0italic-œµ0\\\\epsilon=0 and switch the integrator to the one given in ( [5.14]In 5.2 Denoising methods ‚Ä£ 5 Connections with other methods ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")).\\\n\\\nExemplary images generated from the model using the ODE and the SDE with various value of the diffusion coefficient œµitalic-œµ\\\\epsilon are shown in Figure [15]Figure 15 ‚Ä£ Generation from Gaussian ùúå‚ÇÄ. ‚Ä£ 7.3 Image generation ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), starting from the same sample from œÅ0subscriptùúå0\\\\rho\\_{0}.\\\nThe result illustrates that different images can be generated from the same sample when using the SDE, and their diversity increases as we increase the diffusion coefficient œµitalic-œµ\\\\epsilon.\\\nTo highlight that the model does not memorize the training set, in Figure [16]Figure 16 ‚Ä£ Generation from Gaussian ùúå‚ÇÄ. ‚Ä£ 7.3 Image generation ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\") we compare an example generated image to its five nearest neighbors in the training set (measured in ‚Ñì1subscript‚Ñì1\\\\ell\\_{1} norm), which appear visually quite different.\\\n\\\n![Refer to caption]Figure 16: No memorization. Top: An example generated image from a trained linear one-sided interpolant. Bottom: Five nearest neighbors (in ‚Ñì1subscript‚Ñì1\\\\ell\\_{1} norm) to the generated image in the dataset. The nearest neighbors are visually distinct, highlighting that the interpolant does not overfit on the dataset.\\\n\\\n#### Mirror interpolant.\\\n\\\nWe consider the mirror interpolant xt=x1+Œ≥‚Äã(t)‚Äãzsubscriptùë•ùë°subscriptùë•1ùõæùë°ùëßx\\_{t}=x\\_{1}+\\\\gamma(t)z, for which ( [3.34]In Remark 3.8. ‚Ä£ 3.3 Mirror interpolants ‚Ä£ 3 Instantiations and extensions ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) shows that the drift bùëèb is given in terms the denoiser Œ∑zsubscriptùúÇùëß\\\\eta\\_{z} by b‚Äã(t,x)=Œ≥Àô‚Äã(t)‚ÄãŒ∑z‚Äã(t)ùëèùë°ùë•Àôùõæùë°subscriptùúÇùëßùë°b(t,x)=\\\\dot{\\\\gamma}(t)\\\\eta\\_{z}(t); this means that it is sufficient to only learn an estimate Œ∑^zsubscript^ùúÇùëß\\\\hat{\\\\eta}\\_{z} to construct a generative model.\\\nSimilar to the previous section, we demonstrate this on the Oxford flowers dataset, again making use of a U-Net parameterization for Œ∑^z‚Äã(t,x)subscript^ùúÇùëßùë°ùë•\\\\hat{\\\\eta}\\_{z}(t,x).\\\nFurther experimental details can be found in Appendix [C.1]C.1 Image Experiments ‚Ä£ Appendix C Experimental Specifications ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nIn this setup the output image at time t=1ùë°1t=1 is the same as the input image if we use the ODE ( [2.32]In item 1 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")); with the SDE, however, we can generate new images from the same input. This is illustrated in Figure [17]Figure 17 ‚Ä£ Mirror interpolant. ‚Ä£ 7.3 Image generation ‚Ä£ 7 Numerical results ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\"), where we show how a sample image from the dataset œÅ1subscriptùúå1\\\\rho\\_{1} is pushed forward through the SDE ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) with œµ‚Äã(t)=œµ=10italic-œµùë°italic-œµ10\\\\epsilon(t)=\\\\epsilon=10.\\\nAs can be seen the original image is resampled to a proximal flower not seen in the dataset.\\\n\\\n![Refer to caption]Figure 17: Mirror interpolant.\\\nExample trajectory from a learned denoiser model b^=Œ≥Àô‚Äã(t)‚ÄãŒ∑^z^ùëèÀôùõæùë°subscript^ùúÇùëß\\\\hat{b}=\\\\dot{\\\\gamma}(t)\\\\hat{\\\\eta}\\_{z} for the mirror interpolant xt=x1+Œ≥‚Äã(t)‚Äãzsubscriptùë•ùë°subscriptùë•1ùõæùë°ùëßx\\_{t}=x\\_{1}+\\\\gamma(t)z on the 128√ó128128128128\\\\times 128 Oxford flowers dataset with Œ≥‚Äã(t)=t‚Äã(1‚àít)ùõæùë°ùë°1ùë°\\\\gamma(t)=\\\\sqrt{t(1-t)}.\\\nThe parametric form for Œ∑^zsubscript^ùúÇùëß\\\\hat{\\\\eta}\\_{z} is the U-Net from \\[ [25])\\], with hyperparameter details given in Appendix [C]Appendix C Experimental Specifications ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\").\\\nThe choice of œµitalic-œµ\\\\epsilon in the generative SDE given in ( [2.33]In item 2 ‚Ä£ 2.3 Generative models ‚Ä£ 2 Stochastic interpolant framework ‚Ä£ Stochastic Interpolants: A Unifying Framework for Flows and Diffusions\")) influences the extent to which the generated image differs from the original. Here, œµ‚Äã(t)=10.0italic-œµùë°10.0\\\\epsilon(t)=10.0.\\\n\\",
            "citations": null
          },
          "8 Conclusion\\": {
            "content": "\\\nThe above exposition provides a full treatment of the stochastic interpolant method, as well as a careful consideration of its relation to existing literature.\\\nOur goal is to provide a general framework that can be used to devise generative models built upon dynamical transport of measure.\\\nTo this end, we have detailed mathematical theory and efficient algorithms for constructing both deterministic and stochastic generative models that map between two densities exactly in finite time.\\\nAlong the way, we have illustrated the various design parameters that can be used to shape this process, with connections, for example, to optimal transport and Schr√∂dinger bridges.\\\nWhile we detail specific instantiations, such as the mirror and one-sided interpolants, we highlight that there is a much broader space of possible designs that may be relevant for future applications.\\\nSeveral candidate application domains include the solution of inverse problems such as image inpainting and super-resolution, spatiotemporal forecasting of dynamical systems, and scientific problems such as sampling of molecular configurations and machine learning-assisted Markov chain Monte-Carlo.\\\n\\",
            "citations": null
          }
        },
        "abstract": "A class of generative models that unifies flow-based and diffusion-based\nmethods is introduced. These models extend the framework proposed in Albergo &\nVanden-Eijnden (2023), enabling the use of a broad class of continuous-time\nstochastic processes called `stochastic interpolants' to bridge any two\narbitrary probability density functions exactly in finite time. These\ninterpolants are built by combining data from the two prescribed densities with\nan additional latent variable that shapes the bridge in a flexible way. The\ntime-dependent probability density function of the stochastic interpolant is\nshown to satisfy a first-order transport equation as well as a family of\nforward and backward Fokker-Planck equations with tunable diffusion\ncoefficient. Upon consideration of the time evolution of an individual sample,\nthis viewpoint immediately leads to both deterministic and stochastic\ngenerative models based on probability flow equations or stochastic\ndifferential equations with an adjustable level of noise. The drift\ncoefficients entering these models are time-dependent velocity fields\ncharacterized as the unique minimizers of simple quadratic objective functions,\none of which is a new objective for the score of the interpolant density. We\nshow that minimization of these quadratic objectives leads to control of the\nlikelihood for generative models built upon stochastic dynamics, while\nlikelihood control for deterministic dynamics is more stringent. We also\ndiscuss connections with other methods such as score-based diffusion models,\nstochastic localization processes, probabilistic denoising techniques, and\nrectifying flows. In addition, we demonstrate that stochastic interpolants\nrecover the Schr\\\"odinger bridge between the two target densities when\nexplicitly optimizing over the interpolant. Finally, algorithmic aspects are\ndiscussed and the approach is illustrated on numerical examples."
      },
      "bib.bib3": {
        "id": "bib.bib3",
        "citation": "Bommasani et al. (2021)",
        "authors": "",
        "year": "",
        "title": "On the opportunities and risks of foundation models.",
        "venue": "arXiv preprint arXiv:2108.07258",
        "pages": "",
        "url": "",
        "arxiv_id": "2108.07258",
        "doi": null,
        "sections": {},
        "abstract": "AI is undergoing a paradigm shift with the rise of models (e.g., BERT,\nDALL-E, GPT-3) that are trained on broad data at scale and are adaptable to a\nwide range of downstream tasks. We call these models foundation models to\nunderscore their critically central yet incomplete character. This report\nprovides a thorough account of the opportunities and risks of foundation\nmodels, ranging from their capabilities (e.g., language, vision, robotics,\nreasoning, human interaction) and technical principles(e.g., model\narchitectures, training procedures, data, systems, security, evaluation,\ntheory) to their applications (e.g., law, healthcare, education) and societal\nimpact (e.g., inequity, misuse, economic and environmental impact, legal and\nethical considerations). Though foundation models are based on standard deep\nlearning and transfer learning, their scale results in new emergent\ncapabilities,and their effectiveness across so many tasks incentivizes\nhomogenization. Homogenization provides powerful leverage but demands caution,\nas the defects of the foundation model are inherited by all the adapted models\ndownstream. Despite the impending widespread deployment of foundation models,\nwe currently lack a clear understanding of how they work, when they fail, and\nwhat they are even capable of due to their emergent properties. To tackle these\nquestions, we believe much of the critical research on foundation models will\nrequire deep interdisciplinary collaboration commensurate with their\nfundamentally sociotechnical nature."
      },
      "bib.bib5": {
        "id": "bib.bib5",
        "citation": "Campbell et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Generative flows on discrete state-spaces: Enabling multimodal flows with applications to protein co-design.",
        "venue": "arXiv preprint arXiv:2402.04997",
        "pages": "",
        "url": "",
        "arxiv_id": "2402.04997",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Scientific domains often involve _continuous_ atomic interactions with _discrete_ chemical descriptions.\nExpanding the capabilities of generative models to handle discrete and continuous data, which we refer to as _multimodal_, is a fundamental problem to enable their widespread adoption in scientific applications (Wang et al., [2023])).\nOne such application requiring a multimodal generative model is protein co-design where the aim is to jointly generate continuous protein structures alongside corresponding discrete amino acid sequences (Shi et al., [2022])).\nProteins have been well-studied: the function of the protein is endowed through its structure while the sequence is the blueprint of how the structure is made.\nThis interplay motivates jointly generating the structure and sequence rather than in isolation.\nTo this end, the focus of our work is to develop a multimodal generative framework capable of co-design.\n\nDiffusion models (Sohl-Dickstein et al., [2015]); Ho et al., [2020]); Song et al., [2020])) have achieved state-of-the-art performance across multiple applications.\nThey have potential as a multimodal framework because they can be defined on both continuous and discrete spaces (Hoogeboom et al., [2021]); Austin et al., [2021])).\nHowever, their sample time inflexibility makes them unsuitable for multimodal problems.\nOn even just a single modality, finding optimal sampling parameters requires extensive re-training and evaluations (Karras et al., [2022])).\nThis problem is exacerbated for multiple modalities.\nOn the other hand, flow-based models (Liu et al., [2023]); Albergo & Vanden-Eijnden, [2023]); Lipman et al., [2023])) improve over diffusion models with a simpler framework that allows for superior performance through sampling flexibility (Ma et al., [2024])).\nUnfortunately, our current inability to define a flow-based model on discrete spaces holds us back from a multimodal flow model.\n\n![Refer to caption]Figure 1: Overview.(A.) A DFM trajectory with masking over a 3-dim. sequence with 4 possible states.\n(B.) CTMC stochasticity controls the number of transitions in a sequence trajectory _while respecting the flow ptsubscriptùëùùë°p\\_{t}_. Shown is a 1-dim. sequence with 5 states.\n(C.) Sampling with Multiflow can start from noise (bottom left) or with either the structure or sequence given (top left and bottom right).\nAny sampling tasks (structure/sequence generation, forward/inverse folding, co-generation) can be achieved with a single Multiflow model.\n\nWe address this by introducing a novel flow-based model for discrete data named Discrete Flow Models (DFMs) and thereby unlock a complete framework for flow-based multimodal generative modeling.\nOur key insight comes from seeing that a discrete flow-based model can be realized using Continuous Time Markov Chains (CTMCs).\nDFMs are a new discrete generative modeling paradigm: less restrictive than diffusion, allows for sampling flexibility without re-training and enables simple combination with continuous state space flows to form multimodal flow models.\n\n[Fig.1]In 1 Introduction ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") A provides an overview of DFMs.\nWe first define a probability flow ptsubscriptùëùùë°p\\_{t} that linearly interpolates from noise to data.\nWe then generate new data by simulating a sequence trajectory xtsubscriptùë•ùë°x\\_{t} that follows ptsubscriptùëùùë°p\\_{t} across time which requires training a denoising neural network with cross-entropy.\nThe sequence trajectory could have many transitions or few, a property we term CTMC Stochasticity ( [Fig.1]In 1 Introduction ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") B).\nPrior discrete diffusion models are equivalent to picking a specific stochasticity at training time, whereas we can adjust it at inference: enhancing sample quality and exerting control over sample distributional properties.\n\nUsing DFMs, we are then able to create a multimodal flow model by defining factorized flows for each data modality.\nWe apply this capability to the task of protein co-design by developing a novel continuous structure and discrete sequence generative model named Multiflow.\nWe combine a DFM for sequence generation and a flow-based structure generation method developed in Yim et al. ( [2023a])).\nPrevious multimodal approaches either generated only the sequence or only the structure and then used a prediction model to infer the remaining modality (see [Sec.5]Related Work ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")).\nOur _single_ model can jointly generate sequence and structure while being able to condition on either modality.\n\nIn our experiments ( [Sec.6]Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")), we first verify on small scale text data that DFMs outperform the discrete diffusion alternative, D3PM (Austin et al., [2021])) through their expanded sample time flexibility.\nWe then move to our main focus, assessing Multiflow‚Äôs performance on the co-design task of jointly generating protein structure and sequence.\nMultiflow achieves state-of-the-art co-design performance while data distillation allows for obtaining state-of-the-art structure generation.\nWe find CTMC stochasticity enables controlling sample properties such as secondary structure composition and diversity.\nPreliminary results on inverse and forward folding show Multiflow is a promising path towards a general-purpose protein generative model.\n\nOur contributions are summarized as follows:\n\n- ‚Ä¢\n\n\nWe present Discrete Flow Models (DFMs), a novel discrete generative modeling method built through a CTMC simulating a probability flow.\n\n- ‚Ä¢\n\n\nWe combine DFMs with continuous flow-based methods to create a multimodal generative modeling framework.\n\n- ‚Ä¢\n\n\nWe use our multimodal framework to develop Multiflow, a state-of-the-art generative protein co-design model with the flexibility of multimodal protein generation.",
            "citations": null
          },
          "2 Background": {
            "content": "We aim to model discrete data where a sequence x‚àà{1,‚Ä¶,S}Dùë•superscript1‚Ä¶ùëÜùê∑x\\\\in\\\\{1,\\\\dots,S\\\\}^{D} has Dùê∑D dimensions, each taking on one of SùëÜS states.\nFor ease of exposition, we will assume D=1ùê∑1D=1; all results hold for D>1ùê∑1D>1 as discussed in [App.E]Appendix E Multidimensional Data ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nWe first explain a class of continuous time discrete stochastic processes called Continuous Time Markov Chains (CTMCs) Norris ( [1998])) and then describe the link to probability flows.\n\n### 2.1 Continuous Time Markov Chains.\n\nA sequence trajectory xtsubscriptùë•ùë°x\\_{t} over time t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\] that follows a CTMC alternates between resting in its current state and periodically jumping to another randomly chosen state. We show example trajectories in [Fig.1]In 1 Introduction ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") B.\nThe frequency and destination of the jumps are determined by the rate matrix Rt‚àà‚ÑùS√óSsubscriptùëÖùë°superscript‚ÑùùëÜùëÜR\\_{t}\\\\in\\\\mathbb{R}^{S\\\\times S} with the constraint its off-diagonal elements are non-negative.\nThe probability xtsubscriptùë•ùë°x\\_{t} will jump to a different state jùëój is Rt‚Äã(xt,j)‚Äãd‚ÄãtsubscriptùëÖùë°subscriptùë•ùë°ùëódùë°R\\_{t}(x\\_{t},j)\\\\mathrm{d}t for the next infinitesimal time step d‚Äãtdùë°\\\\mathrm{d}t .\nWe can write the transition probability as\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | pt+d‚Äãt\\|t‚Äã(j\\|xt)subscriptùëùùë°conditionaldùë°ùë°conditionalùëósubscriptùë•ùë°\\\\displaystyle p\\_{t+\\\\mathrm{d}t\\|t}(j\\|x\\_{t}) | ={Rt‚Äã(xt,j)‚Äãd‚Äãtfor‚Äãj‚â†xt1+Rt‚Äã(xt,xt)‚Äãd‚Äãtfor‚Äãj=xtabsentcasessubscriptùëÖùë°subscriptùë•ùë°ùëódùë°forùëósubscriptùë•ùë°1subscriptùëÖùë°subscriptùë•ùë°subscriptùë•ùë°dùë°forùëósubscriptùë•ùë°\\\\displaystyle=\\\\begin{cases}R\\_{t}(x\\_{t},j)\\\\mathrm{d}t&\\\\text{for}\\\\,\\\\,j\\\\neq x\\_{t}\\\\\\<br>1+R\\_{t}(x\\_{t},x\\_{t})\\\\mathrm{d}t&\\\\text{for}\\\\,\\\\,j=x\\_{t}\\\\end{cases} |  | (1) |\n|  |  | =Œ¥‚Äã{xt,j}+Rt‚Äã(xt,j)‚Äãd‚Äãtabsentùõøsubscriptùë•ùë°ùëósubscriptùëÖùë°subscriptùë•ùë°ùëódùë°\\\\displaystyle=\\\\delta\\\\left\\\\{x\\_{t},j\\\\right\\\\}+R\\_{t}(x\\_{t},j)\\\\mathrm{d}t |  | (2) |\n\nwhere Œ¥‚Äã{i,j}ùõøùëñùëó\\\\delta\\\\left\\\\{i,j\\\\right\\\\} is the Kronecker delta which is 111 when i=jùëñùëói=j and is otherwise 00 and Rt‚Äã(xt,xt):=‚àí‚àëk‚â†xRt‚Äã(xt,k)assignsubscriptùëÖùë°subscriptùë•ùë°subscriptùë•ùë°subscriptùëòùë•subscriptùëÖùë°subscriptùë•ùë°ùëòR\\_{t}(x\\_{t},x\\_{t})\\\\vcentcolon=-\\\\sum\\_{k\\\\neq x}R\\_{t}(x\\_{t},k) in order for pt+d‚Äãt\\|t(‚ãÖ\\|i)p\\_{t+\\\\mathrm{d}t\\|t}(\\\\cdot\\|i) to sum to 111.\nWe use compact notation [Eq.2]In 2.1 Continuous Time Markov Chains. ‚Ä£ 2 Background ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") in place of [Eq.1]In 2.1 Continuous Time Markov Chains. ‚Ä£ 2 Background ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nTherefore, pt+d‚Äãt\\|tsubscriptùëùùë°conditionaldùë°ùë°p\\_{t+\\\\mathrm{d}t\\|t} is a Categorical distribution with probabilities Œ¥‚Äã{xt,‚ãÖ}+Rt‚Äã(xt,‚ãÖ)‚Äãd‚Äãtùõøsubscriptùë•ùë°‚ãÖsubscriptùëÖùë°subscriptùë•ùë°‚ãÖdùë°\\\\delta\\\\left\\\\{x\\_{t},\\\\cdot\\\\right\\\\}+R\\_{t}(x\\_{t},\\\\cdot)\\\\mathrm{d}t that we denote as Cat‚Äã(Œ¥‚Äã{xt,j}+Rt‚Äã(xt,j)‚Äãd‚Äãt)Catùõøsubscriptùë•ùë°ùëósubscriptùëÖùë°subscriptùë•ùë°ùëódùë°\\\\mathrm{Cat}(\\\\delta\\\\left\\\\{x\\_{t},j\\\\right\\\\}+R\\_{t}(x\\_{t},j)\\\\mathrm{d}t):\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | j‚àºpt+d‚Äãt\\|t‚Äã(j\\|xt)‚ü∫j‚àºCat‚Äã(Œ¥‚Äã{xt,j}+Rt‚Äã(xt,j)‚Äãd‚Äãt).‚ü∫similar-toùëósubscriptùëùùë°conditionaldùë°ùë°conditionalùëósubscriptùë•ùë°similar-toùëóCatùõøsubscriptùë•ùë°ùëósubscriptùëÖùë°subscriptùë•ùë°ùëódùë°j\\\\sim p\\_{t+\\\\mathrm{d}t\\|t}(j\\|x\\_{t})\\ \\\\Longleftrightarrow\\ j\\\\sim\\\\mathrm{Cat}(\\\\delta\\\\left\\\\{x\\_{t},j\\\\right\\\\}+R\\_{t}(x\\_{t},j)\\\\mathrm{d}t). |  | (3) |\n\nIn practice, we need to simulate the sequence trajectory with finite time intervals Œî‚ÄãtŒîùë°\\\\Delta t.\nA sequence trajectory can be simulated with Euler steps (Sun et al., [2023b]))\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xt+Œî‚Äãt‚àºCat‚Äã(Œ¥‚Äã{xt,xt+Œî‚Äãt}+Rt‚Äã(xt,xt+Œî‚Äãt)‚ÄãŒî‚Äãt),similar-tosubscriptùë•ùë°Œîùë°Catùõøsubscriptùë•ùë°subscriptùë•ùë°Œîùë°subscriptùëÖùë°subscriptùë•ùë°subscriptùë•ùë°Œîùë°Œîùë°x\\_{t+\\\\Delta t}\\\\sim\\\\mathrm{Cat}(\\\\delta\\\\left\\\\{x\\_{t},x\\_{t+\\\\Delta t}\\\\right\\\\}+R\\_{t}(x\\_{t},x\\_{t+\\\\Delta t})\\\\Delta t), |  | (4) |\n\nwhere the sequence starts from an initial sample x0‚àºp0similar-tosubscriptùë•0subscriptùëù0x\\_{0}\\\\sim p\\_{0} at time t=0ùë°0t=0.\nThe rate matrix RtsubscriptùëÖùë°R\\_{t} along with an initial distribution p0subscriptùëù0p\\_{0} together define the CTMC.\n\n### 2.2 Kolmogorov equation\n\nFor a sequence trajectory following the dynamics of a CTMC, we write its marginal distribution at time tùë°t as pt‚Äã(xt)subscriptùëùùë°subscriptùë•ùë°p\\_{t}(x\\_{t}).\nThe Kolmogorov equation allows us to relate the rate matrix RtsubscriptùëÖùë°R\\_{t} to the change in pt‚Äã(xt)subscriptùëùùë°subscriptùë•ùë°p\\_{t}(x\\_{t}). It has the form:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àÇtpt‚Äã(xt)=‚àëj‚â†xtRt‚Äã(j,xt)‚Äãpt‚Äã(j)‚èüincoming‚àí‚àëj‚â†xtRt‚Äã(xt,j)‚Äãpt‚Äã(xt)‚èüoutgoingsubscriptùë°subscriptùëùùë°subscriptùë•ùë°subscript‚èüsubscriptùëósubscriptùë•ùë°subscriptùëÖùë°ùëósubscriptùë•ùë°subscriptùëùùë°ùëóincomingsubscript‚èüsubscriptùëósubscriptùë•ùë°subscriptùëÖùë°subscriptùë•ùë°ùëósubscriptùëùùë°subscriptùë•ùë°outgoing\\\\partial\\_{t}p\\_{t}(x\\_{t})=\\\\underbrace{\\\\sum\\_{j\\\\neq x\\_{t}}R\\_{t}(j,x\\_{t})p\\_{t}(j)}\\_{\\\\text{incoming}}-\\\\underbrace{\\\\sum\\_{j\\\\neq x\\_{t}}R\\_{t}(x\\_{t},j)p\\_{t}(x\\_{t})}\\_{\\\\text{outgoing}}\\\\vspace{-0.1cm} |  | (5) |\n\nThe difference between the incoming and outgoing probability mass is the time derivative of the marginal ‚àÇtpt‚Äã(xt)subscriptùë°subscriptùëùùë°subscriptùë•ùë°\\\\partial\\_{t}p\\_{t}(x\\_{t}).\nUsing our definition of Rt‚Äã(xt,xt)subscriptùëÖùë°subscriptùë•ùë°subscriptùë•ùë°R\\_{t}(x\\_{t},x\\_{t}), [Eq.5]In 2.2 Kolmogorov equation ‚Ä£ 2 Background ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") can be succinctly written as ‚àÇtpt=Rt‚ä§‚Äãptsubscriptùë°subscriptùëùùë°superscriptsubscriptùëÖùë°topsubscriptùëùùë°\\\\partial\\_{t}p\\_{t}=R\\_{t}^{\\\\top}p\\_{t} where the marginals are treated as probability mass vectors: pt‚àà\\[0,1\\]Ssubscriptùëùùë°superscript01ùëÜp\\_{t}\\\\in\\[0,1\\]^{S}.\nThis defines an Ordinary Differential Equation (ODE) in a vector space.\nWe refer to the series of distributions pt‚Äã‚àÄt‚àà\\[0,1\\]subscriptùëùùë°for-allùë°01p\\_{t}\\ \\\\forall t\\\\in\\[0,1\\] satisfying the ODE as a _probability flow_.\n\nKey terms:\nA CTMC is defined by an initial distribution p0subscriptùëù0p\\_{0} and rate matrix RtsubscriptùëÖùë°R\\_{t}.\nSamples along CTMC dynamics are called a sequence trajectoryxtsubscriptùë•ùë°x\\_{t}.\nThe probability flowptsubscriptùëùùë°p\\_{t} is the marginal distribution of xtsubscriptùë•ùë°x\\_{t} at every time tùë°t.\nWe say RtsubscriptùëÖùë°R\\_{t}generatesptsubscriptùëùùë°p\\_{t} if ‚àÇtpt=Rt‚ä§‚Äãpt‚Äã‚àÄt‚àà\\[0,1\\]subscriptùë°subscriptùëùùë°superscriptsubscriptùëÖùë°topsubscriptùëùùë°for-allùë°01\\\\partial\\_{t}p\\_{t}=R\\_{t}^{\\\\top}p\\_{t}\\ \\\\forall t\\\\in\\[0,1\\].",
            "citations": null
          },
          "3 Discrete Flow Models": {
            "content": "A Discrete Flow Model (DFM) is a Discrete data generative model built around a probability Flow that interpolates from noise to data.\nTo sample new datapoints, we simulate a sequence trajectory that matches the noise to data probability flow.\nThe flow construction allows us to combine DFM with continuous data flow models to define a multimodal generative model.\nProofs for all propositions are in [App.B]Appendix B Proofs ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\n### 3.1 A Flow Model for Sampling Discrete Data\n\nWe start by constructing the data generating probability flow referred to as the _generative flow_, ptsubscriptùëùùë°p\\_{t}, that we will later sample from using a CTMC.\nThe generative flow interpolates from noise to data where p0‚Äã(x0)=pnoise‚Äã(x0)subscriptùëù0subscriptùë•0subscriptùëùnoisesubscriptùë•0p\\_{0}(x\\_{0})=p\\_{\\\\mathrm{noise}}(x\\_{0}) and p1‚Äã(x1)=pdata‚Äã(x1)subscriptùëù1subscriptùë•1subscriptùëùdatasubscriptùë•1p\\_{1}(x\\_{1})=p\\_{\\\\mathrm{data}}(x\\_{1}).\nSince ptsubscriptùëùùë°p\\_{t} is complex to consider directly, the insight of flow matching is to define ptsubscriptùëùùë°p\\_{t} using a simpler datapoint conditional flow, pt\\|1(‚ãÖ\\|x1)p\\_{t\\|1}(\\\\cdot\\|x\\_{1}) that we will be able to write down explicitly.\nWe can then define ptsubscriptùëùùë°p\\_{t} as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pt‚Äã(xt):=ùîºpdata‚Äã(x1)‚Äã\\[pt\\|1‚Äã(xt\\|x1)\\].assignsubscriptùëùùë°subscriptùë•ùë°subscriptùîºsubscriptùëùdatasubscriptùë•1delimited-\\[\\]subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t}(x\\_{t})\\\\vcentcolon=\\\\mathbb{E}\\_{p\\_{\\\\mathrm{data}}(x\\_{1})}\\\\left\\[p\\_{t\\|1}(x\\_{t}\\|x\\_{1})\\\\right\\]. |  | (6) |\n\nThe conditional flow, pt\\|1(‚ãÖ\\|x1)p\\_{t\\|1}(\\\\cdot\\|x\\_{1}) interpolates from noise to the datapoint x1subscriptùë•1x\\_{1}.\nThe conditioning allows us to write the flow down in closed form.\nWe are free to define pt\\|1(‚ãÖ\\|x1)p\\_{t\\|1}(\\\\cdot\\|x\\_{1}) as needed for the specific application.\nThe conditional flows we use in this paper linearly interpolate towards x1subscriptùë•1x\\_{1} from a uniform prior or an artificially introduced mask state, MùëÄM:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | pt\\|1unif‚Äã(xt\\|x1)superscriptsubscriptùëùconditionalùë°1unifconditionalsubscriptùë•ùë°subscriptùë•1\\\\textstyle p\\_{t\\|1}^{\\\\mathrm{unif}}(x\\_{t}\\|x\\_{1}) | =Cat‚Äã(t‚ÄãŒ¥‚Äã{x1,xt}+(1‚àít)‚Äã1S),absentCatùë°ùõøsubscriptùë•1subscriptùë•ùë°1ùë°1ùëÜ\\\\textstyle=\\\\mathrm{Cat}(t\\\\delta\\\\left\\\\{x\\_{1},x\\_{t}\\\\right\\\\}+(1-t)\\\\frac{1}{S}), |  | (7) |\n|  | pt\\|1mask‚Äã(xt\\|x1)superscriptsubscriptùëùconditionalùë°1maskconditionalsubscriptùë•ùë°subscriptùë•1\\\\textstyle p\\_{t\\|1}^{\\\\mathrm{mask}}(x\\_{t}\\|x\\_{1}) | =Cat‚Äã(t‚ÄãŒ¥‚Äã{x1,xt}+(1‚àít)‚ÄãŒ¥‚Äã{M,xt}).absentCatùë°ùõøsubscriptùë•1subscriptùë•ùë°1ùë°ùõøùëÄsubscriptùë•ùë°\\\\textstyle=\\\\mathrm{Cat}(t\\\\delta\\\\left\\\\{x\\_{1},x\\_{t}\\\\right\\\\}+(1-t)\\\\delta\\\\left\\\\{M,x\\_{t}\\\\right\\\\}). |  | (8) |\n\nWe require our conditional flow to converge on the datapoint x1subscriptùë•1x\\_{1} at t=1ùë°1t=1, i.e. pt\\|1‚Äã(xt\\|x1)=Œ¥‚Äã{x1,xt}subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1ùõøsubscriptùë•1subscriptùë•ùë°p\\_{t\\|1}(x\\_{t}\\|x\\_{1})=\\\\delta\\\\left\\\\{x\\_{1},x\\_{t}\\\\right\\\\}.\nWe also require that the conditional flow starts from noise at t=0ùë°0t=0, i.e. pt\\|1‚Äã(xt\\|x1)=pnoise‚Äã(xt)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1subscriptùëùnoisesubscriptùë•ùë°p\\_{t\\|1}(x\\_{t}\\|x\\_{1})=p\\_{\\\\mathrm{noise}}(x\\_{t}).\nIn our examples, pnoiseunif‚Äã(xt)=1Ssuperscriptsubscriptùëùnoiseunifsubscriptùë•ùë°1ùëÜp\\_{\\\\mathrm{noise}}^{\\\\mathrm{unif}}(x\\_{t})=\\\\frac{1}{S} and pnoisemask‚Äã(xt)=Œ¥‚Äã{M,xt}superscriptsubscriptùëùnoisemasksubscriptùë•ùë°ùõøùëÄsubscriptùë•ùë°p\\_{\\\\mathrm{noise}}^{\\\\mathrm{mask}}(x\\_{t})=\\\\delta\\\\left\\\\{M,x\\_{t}\\\\right\\\\}.\nThese two requirements ensure our generative flow, ptsubscriptùëùùë°p\\_{t}, defined in [Eq.6]In 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") interpolates from pnoisesubscriptùëùnoisep\\_{\\\\mathrm{noise}} at t=0ùë°0t=0 towards pdatasubscriptùëùdatap\\_{\\\\mathrm{data}} at t=1ùë°1t=1 as desired.\nNext, we will show how to sample from the generative flow by exploiting ptsubscriptùëùùë°p\\_{t}‚Äôs decomposition into conditional flows.\n\nTable 1:\nComparison between continuous space linear interpolant flow models and DFMs with masking.\nBoth start with a conditional flow pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) interpolating between data and noise.\nFor continuous, pt\\|1‚Äã(xt\\|x1)=ùí©‚Äã(t‚Äãx1,(1‚àít)2‚ÄãI)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1ùí©ùë°subscriptùë•1superscript1ùë°2ùêºp\\_{t\\|1}(x\\_{t}\\|x\\_{1})=\\\\mathcal{N}(tx\\_{1},(1-t)^{2}I) and for discrete we use pt\\|1masksuperscriptsubscriptùëùconditionalùë°1maskp\\_{t\\|1}^{\\\\mathrm{mask}}.\nSolving the Fokker-Planck or Kolmogorov equations with pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) gives a data conditioned process, specified either by the velocity field (ŒΩtsubscriptùúàùë°\\\\nu\\_{t}) or the rate matrix (RtsubscriptùëÖùë°R\\_{t}).\nWe train a model to learn the unconditional process ‚Äì written analytically as the expected value of the conditional quantity ‚Äì which is then used for sampling.\nThe side-by-side comparison reveals the similar forms of each quantity.\n\n|     |     |     |\n| --- | --- | --- |\n| Quantity | Continuous | Discrete |\n| Fokker-Planck-Kolmogorov | ‚àÇtpt=‚àí‚àá‚ãÖ(vt‚Äãpt)subscriptùë°subscriptùëùùë°‚ãÖ‚àásubscriptùë£ùë°subscriptùëùùë°\\\\partial\\_{t}p\\_{t}=-\\\\nabla\\\\cdot\\\\left(v\\_{t}p\\_{t}\\\\right) | ‚àÇtpt=Rt‚ä§‚Äãptsubscriptùë°subscriptùëùùë°superscriptsubscriptùëÖùë°topsubscriptùëùùë°\\\\partial\\_{t}p\\_{t}={R\\_{t}}^{\\\\top}p\\_{t} |\n| Conditional process | ŒΩt‚Äã(xt\\|x1)=xt‚àíx11‚àítsubscriptùúàùë°conditionalsubscriptùë•ùë°subscriptùë•1subscriptùë•ùë°subscriptùë•11ùë°\\\\nu\\_{t}(x\\_{t}\\|x\\_{1})=\\\\frac{x\\_{t}-x\\_{1}}{1-t} | Rt‚Äã(xt,j\\|x1)=Œ¥‚Äã{j,x1}1‚àít‚ÄãŒ¥‚Äã{xt,M}subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1ùõøùëósubscriptùë•11ùë°ùõøsubscriptùë•ùë°ùëÄR\\_{t}(x\\_{t},j\\|x\\_{1})=\\\\frac{\\\\delta\\\\left\\\\{j,x\\_{1}\\\\right\\\\}}{1-t}\\\\delta\\\\left\\\\{x\\_{t},M\\\\right\\\\} |\n| Generative process | ŒΩt‚Äã(xt)=ùîºp1\\|t‚Äã(x1\\|xt)‚Äã\\[ŒΩt‚Äã(xt\\|x1)\\]subscriptùúàùë°subscriptùë•ùë°subscriptùîºsubscriptùëùconditional1ùë°conditionalsubscriptùë•1subscriptùë•ùë°delimited-\\[\\]subscriptùúàùë°conditionalsubscriptùë•ùë°subscriptùë•1\\\\nu\\_{t}(x\\_{t})=\\\\mathbb{E}\\_{p\\_{1\\|t}(x\\_{1}\\|x\\_{t})}\\\\left\\[\\\\nu\\_{t}(x\\_{t}\\|x\\_{1})\\\\right\\] | Rt‚Äã(xt,j)=ùîºp1\\|t‚Äã(x1\\|xt)‚Äã\\[R‚Äã(xt,j\\|x1)\\]subscriptùëÖùë°subscriptùë•ùë°ùëósubscriptùîºsubscriptùëùconditional1ùë°conditionalsubscriptùë•1subscriptùë•ùë°delimited-\\[\\]ùëÖsubscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j)=\\\\mathbb{E}\\_{p\\_{1\\|t}(x\\_{1}\\|x\\_{t})}\\\\left\\[R(x\\_{t},j\\|x\\_{1})\\\\right\\] |\n| Generative sampling | xt+Œî‚Äãt=xt+vt‚Äã(xt)‚ÄãŒî‚Äãtsubscriptùë•ùë°Œîùë°subscriptùë•ùë°subscriptùë£ùë°subscriptùë•ùë°Œîùë°x\\_{t+\\\\Delta t}=x\\_{t}+v\\_{t}(x\\_{t})\\\\Delta t | xt+Œî‚Äãt‚àºCat‚Äã(Œ¥‚Äã{xt,xt+Œî‚Äãt}+Rt‚Äã(xt,xt+Œî‚Äãt)‚ÄãŒî‚Äãt)similar-tosubscriptùë•ùë°Œîùë°Catùõøsubscriptùë•ùë°subscriptùë•ùë°Œîùë°subscriptùëÖùë°subscriptùë•ùë°subscriptùë•ùë°Œîùë°Œîùë°x\\_{t+\\\\Delta t}\\\\sim\\\\mathrm{Cat}(\\\\delta\\\\left\\\\{x\\_{t},x\\_{t+\\\\Delta t}\\\\right\\\\}+R\\_{t}(x\\_{t},x\\_{t+\\\\Delta t})\\\\Delta t) |\n\n#### 3.1.1 Sampling\n\nTo sample from pdatasubscriptùëùdatap\\_{\\\\mathrm{data}} using the generative flow, ptsubscriptùëùùë°p\\_{t}, we need access to a rate matrix Rt‚Äã(xt,j)subscriptùëÖùë°subscriptùë•ùë°ùëóR\\_{t}(x\\_{t},j) that generates ptsubscriptùëùùë°p\\_{t}.\nGiven a Rt‚Äã(xt,j)subscriptùëÖùë°subscriptùë•ùë°ùëóR\\_{t}(x\\_{t},j), we could use [Eq.4]In 2.1 Continuous Time Markov Chains. ‚Ä£ 2 Background ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") to simulate a sequence trajectory that begins with marginal distribution pnoisesubscriptùëùnoisep\\_{\\\\mathrm{noise}} at t=0ùë°0t=0 and ends with marginal distribution pdatasubscriptùëùdatap\\_{\\\\mathrm{data}} at t=1ùë°1t=1.\nThe definition of ptsubscriptùëùùë°p\\_{t} in [Eq.6]In 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") suggests Rt‚Äã(xt,j)subscriptùëÖùë°subscriptùë•ùë°ùëóR\\_{t}(x\\_{t},j) can also be derived as an expectation over a simpler conditional rate matrix.\nDefine Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) as a datapoint conditional rate matrix that generates pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}). We now show Rt‚Äã(xt,j)subscriptùëÖùë°subscriptùë•ùë°ùëóR\\_{t}(x\\_{t},j) can indeed be defined as an expectation over Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}).\n\n###### Proposition 3.1.\n\nIf Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) is a rate matrix that generates the conditional flow pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}), then\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Rt‚Äã(xt,j):=ùîºp1\\|t‚Äã(x1\\|xt)‚Äã\\[Rt‚Äã(xt,j\\|x1)\\]assignsubscriptùëÖùë°subscriptùë•ùë°ùëósubscriptùîºsubscriptùëùconditional1ùë°conditionalsubscriptùë•1subscriptùë•ùë°delimited-\\[\\]subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1\\\\textstyle R\\_{t}(x\\_{t},j)\\\\vcentcolon=\\\\mathbb{E}\\_{p\\_{1\\|t}(x\\_{1}\\|x\\_{t})}\\\\left\\[R\\_{t}(x\\_{t},j\\|x\\_{1})\\\\right\\] |  | (9) |\n\nis a rate matrix that generates ptsubscriptùëùùë°p\\_{t} defined in [Eq.6]In 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nThe expectation is taken over p1\\|t‚Äã(x1\\|xt)=pt\\|1‚Äã(xt\\|x1)‚Äãpdata‚Äã(x1)pt‚Äã(xt)subscriptùëùconditional1ùë°conditionalsubscriptùë•1subscriptùë•ùë°subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1subscriptùëùdatasubscriptùë•1subscriptùëùùë°subscriptùë•ùë°p\\_{1\\|t}(x\\_{1}\\|x\\_{t})=\\\\frac{p\\_{t\\|1}(x\\_{t}\\|x\\_{1})p\\_{\\\\mathrm{data}}(x\\_{1})}{p\\_{t}(x\\_{t})}.\n\nOur aim now is to calculate Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) and p1\\|t‚Äã(x1\\|xt)subscriptùëùconditional1ùë°conditionalsubscriptùë•1subscriptùë•ùë°p\\_{1\\|t}(x\\_{1}\\|x\\_{t}) to plug into [Eq.9]In Proposition 3.1. ‚Ä£ 3.1.1 Sampling ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\np1\\|t‚Äã(x1\\|xt)subscriptùëùconditional1ùë°conditionalsubscriptùë•1subscriptùë•ùë°p\\_{1\\|t}(x\\_{1}\\|x\\_{t}) is the distribution predicting clean data x1subscriptùë•1x\\_{1} from noisy data xtsubscriptùë•ùë°x\\_{t} and in [Sec.3.1.2]Training ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\"), we will train a neural network p1\\|tŒ∏‚Äã(x1\\|xt)superscriptsubscriptùëùconditional1ùë°ùúÉconditionalsubscriptùë•1subscriptùë•ùë°p\\_{1\\|t}^{\\\\theta}(x\\_{1}\\|x\\_{t}) to approximate it.\nIn [Sec.3.2]Choice of Rate Matrix ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\"), we will show how to derive Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) in closed form.\nSampling pseudo-code is provided in [Alg.1]In 3.1.1 Sampling ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\nAlgorithm 1 DFM Sampling\n\n1:initt=0,x0‚àºp0formulae-sequenceùë°0similar-tosubscriptùë•0subscriptùëù0t=0,x\\_{0}\\\\sim p\\_{0}, choice of Rt(xt,‚ãÖ\\|x1)R\\_{t}(x\\_{t},\\\\cdot\\|x\\_{1}) ( [Sec.3.2]Choice of Rate Matrix ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\"))\n\n2:whilet<1ùë°1t<1do\n\n3:RtŒ∏(xt,‚ãÖ)‚Üêùîºp1\\|tŒ∏‚Äã(x1\\|xt)\\[Rt(xt,‚ãÖ\\|x1)\\]R\\_{t}^{\\\\theta}(x\\_{t},\\\\cdot)\\\\leftarrow\\\\mathbb{E}\\_{p^{\\\\theta}\\_{1\\|t}(x\\_{1}\\|x\\_{t})}\\\\left\\[R\\_{t}(x\\_{t},\\\\cdot\\|x\\_{1})\\\\right\\]\n\n4:xt+Œî‚Äãt‚àºCat‚Äã(Œ¥‚Äã{xt,xt+Œî‚Äãt}+RtŒ∏‚Äã(xt,xt+Œî‚Äãt)‚ÄãŒî‚Äãt)similar-tosubscriptùë•ùë°Œîùë°Catùõøsubscriptùë•ùë°subscriptùë•ùë°Œîùë°superscriptsubscriptùëÖùë°ùúÉsubscriptùë•ùë°subscriptùë•ùë°Œîùë°Œîùë°x\\_{t+\\\\Delta t}\\\\sim\\\\mathrm{Cat}\\\\left(\\\\delta\\\\left\\\\{x\\_{t},x\\_{t+\\\\Delta t}\\\\right\\\\}+R\\_{t}^{\\\\theta}(x\\_{t},x\\_{t+\\\\Delta t})\\\\Delta t\\\\right)\n\n5:t‚Üêt+Œî‚Äãt‚Üêùë°ùë°Œîùë°t\\\\leftarrow t+\\\\Delta t\n\n6:endwhile\n\n7:returnx1subscriptùë•1x\\_{1}\n\nWe discuss further CTMC sampling methods in [App.G]Appendix G CTMC Sampling Methods ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nOur construction of the generative flow from conditional flows is analogous to the construction of generative probability paths from conditional probability paths in Lipman et al. ( [2023])), where instead of a continuous vector field generating the probability path, we have a rate matrix generating the probability flow.\nWe expand on these links in [Table.1]In 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\n#### 3.1.2 Training\n\nWe train a neural network with parameters Œ∏ùúÉ\\\\theta, p1\\|tŒ∏‚Äã(xt\\|x1)superscriptsubscriptùëùconditional1ùë°ùúÉconditionalsubscriptùë•ùë°subscriptùë•1p\\_{1\\|t}^{\\\\theta}(x\\_{t}\\|x\\_{1}), to approximate the true denoising distribution using the standard cross-entropy i.e. learning to predict the clean datapoint x1subscriptùë•1x\\_{1} when given noisy data xt‚àºpt\\|1‚Äã(xt\\|x1)similar-tosubscriptùë•ùë°subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1x\\_{t}\\\\sim p\\_{t\\|1}(x\\_{t}\\|x\\_{1}).\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñíce=ùîºpdata‚Äã(x1)‚Äãùí∞‚Äã(t;0,1)‚Äãpt\\|1‚Äã(xt\\|x1)‚Äã\\[log‚Å°p1\\|tŒ∏‚Äã(x1\\|xt)\\]subscript‚Ñícesubscriptùîºsubscriptùëùdatasubscriptùë•1ùí∞ùë°01subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1delimited-\\[\\]superscriptsubscriptùëùconditional1ùë°ùúÉconditionalsubscriptùë•1subscriptùë•ùë°\\\\mathcal{L}\\_{\\\\mathrm{ce}}=\\\\mathbb{E}\\_{p\\_{\\\\mathrm{data}}(x\\_{1})\\\\mathcal{U}(t;0,1)p\\_{t\\|1}(x\\_{t}\\|x\\_{1})}\\\\left\\[\\\\log p\\_{1\\|t}^{\\\\theta}(x\\_{1}\\|x\\_{t})\\\\right\\] |  | (10) |\n\nwhere ùí∞‚Äã(t;0,1)ùí∞ùë°01\\\\mathcal{U}(t;0,1) is a uniform distribution on \\[0,1\\]01\\[0,1\\].\nxtsubscriptùë•ùë°x\\_{t} can be sampled from pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) in a simulation-free manner by using the explicit form we wrote down for pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1} e.g. [Eq.7]In 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nIn [App.C]Appendix C Analysis of Training Objective ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\"), we analyse how ‚Ñícesubscript‚Ñíce\\\\mathcal{L}\\_{\\\\mathrm{ce}} relates to the model log-likelihood and its relation to the Evidence Lower Bound (ELBO) used to train diffusion models.\nWe stress that ‚Ñícesubscript‚Ñíce\\\\mathcal{L}\\_{\\\\mathrm{ce}} does not depend on Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) and so we can postpone the choice of Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) until after training.\nThis enables inference time flexibility in how our discrete data is sampled.\n\n### 3.2 Choice of Rate Matrix\n\nThe missing piece in [Eq.9]In Proposition 3.1. ‚Ä£ 3.1.1 Sampling ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") is a conditional rate matrix Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) that generates the conditional flow pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}).\nThere are many choices for Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) that all generate the same pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) as we later show in [Prop.3.3]Proposition 3.3. ‚Ä£ 3.2 Choice of Rate Matrix ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nIn order to proceed, we start by giving one valid choice of rate matrix and from this, build a set of rate matrices that all generate pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1}.\nAt inference time, we can then pick the rate matrix from this set that performs the best.\nOur starting choice for a rate matrix that generates pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1} is defined for xt‚â†jsubscriptùë•ùë°ùëóx\\_{t}\\\\neq j as,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Rt‚àó‚Äã(xt,j\\|x1):=ReLU‚Äã(‚àÇtpt\\|1‚Äã(j\\|x1)‚àí‚àÇtpt\\|1‚Äã(xt\\|x1))S‚ãÖpt\\|1‚Äã(xt\\|x1)assignsubscriptsuperscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1ReLUsubscriptùë°subscriptùëùconditionalùë°1conditionalùëósubscriptùë•1subscriptùë°subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1‚ãÖùëÜsubscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1\\\\displaystyle R^{\\*}\\_{t}(x\\_{t},j\\|x\\_{1})\\\\vcentcolon=\\\\frac{\\\\mathrm{ReLU}\\\\left(\\\\partial\\_{t}p\\_{t\\|1}(j\\|x\\_{1})-\\\\partial\\_{t}p\\_{t\\|1}(x\\_{t}\\|x\\_{1})\\\\right)}{S\\\\cdot p\\_{t\\|1}(x\\_{t}\\|x\\_{1})} |  | (11) |\n\nwhere ReLU‚Äã(a)=max‚Äã(a,0)ReLUùëémaxùëé0\\\\mathrm{ReLU}(a)=\\\\text{max}(a,0) and ‚àÇtpt\\|1subscriptùë°subscriptùëùconditionalùë°1\\\\partial\\_{t}p\\_{t\\|1} can be found by differentiating our explicit form for pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1}. This assumes pt\\|1‚Äã(xt\\|x1)>0subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•10p\\_{t\\|1}(x\\_{t}\\|x\\_{1})>0, see [Sec.B.2]B.2 Proof of Proposition 3.2 ‚Ä£ Appendix B Proofs ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") for the full form.\nWe first heuristically justify Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} and then prove it generates pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) in [Prop.3.2]Proposition 3.2. ‚Ä£ 3.2 Choice of Rate Matrix ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nRt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} can be understood as distributing probability mass to states that require it.\nIf ‚àÇtpt\\|1‚Äã(j\\|x1)>‚àÇtpt\\|1‚Äã(xt\\|x1)subscriptùë°subscriptùëùconditionalùë°1conditionalùëósubscriptùë•1subscriptùë°subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1\\\\partial\\_{t}p\\_{t\\|1}(j\\|x\\_{1})>\\\\partial\\_{t}p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) then state jùëój needs to gain more probability mass than the current state xtsubscriptùë•ùë°x\\_{t} resulting in a positive rate.\nIf ‚àÇtpt\\|1‚Äã(j\\|x1)‚â§‚àÇtpt\\|1‚Äã(i\\|x1)subscriptùë°subscriptùëùconditionalùë°1conditionalùëósubscriptùë•1subscriptùë°subscriptùëùconditionalùë°1conditionalùëñsubscriptùë•1\\\\partial\\_{t}p\\_{t\\|1}(j\\|x\\_{1})\\\\leq\\\\partial\\_{t}p\\_{t\\|1}(i\\|x\\_{1}) then state xtsubscriptùë•ùë°x\\_{t} should give no mass to state jùëój hence the ReLUReLU\\\\mathrm{ReLU}.\nThis rate should then be normalized by the probability mass in the current state.\nThe ReLUReLU\\\\mathrm{ReLU} ensures off-diagonal elements of Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} are positive and is inspired by Zhang et al. ( [2023])).\n\n###### Proposition 3.2.\n\nAssuming zero mass states, pt\\|1‚Äã(j\\|x1)=0subscriptùëùconditionalùë°1conditionalùëósubscriptùë•10p\\_{t\\|1}(j\\|x\\_{1})=0, have ‚àÇtpt\\|1‚Äã(j\\|x1)=0subscriptùë°subscriptùëùconditionalùë°1conditionalùëósubscriptùë•10\\\\partial\\_{t}p\\_{t\\|1}(j\\|x\\_{1})=0, then Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} generates pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}).\n\nThe proof is easy to derive by substituting Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} along with pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) into the Kolmogorov equation [Eq.5]In 2.2 Kolmogorov equation ‚Ä£ 2 Background ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nThe forms for Rt‚àó‚Äã(xt,j\\|x1)subscriptsuperscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R^{\\*}\\_{t}(x\\_{t},j\\|x\\_{1}) under pt\\|1unifsuperscriptsubscriptùëùconditionalùë°1unifp\\_{t\\|1}^{\\\\mathrm{unif}} or pt\\|1masksuperscriptsubscriptùëùconditionalùë°1maskp\\_{t\\|1}^{\\\\mathrm{mask}} are simple\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Rt‚àóunif=Œ¥‚Äã{x1,j}‚Äã(1‚àíŒ¥‚Äã{x1,xt})1‚àít,Rt‚àómask=Œ¥‚Äã{x1,j}‚ÄãŒ¥‚Äã{xt,M}1‚àítformulae-sequencesuperscriptsubscriptùëÖùë°absentunifùõøsubscriptùë•1ùëó1ùõøsubscriptùë•1subscriptùë•ùë°1ùë°superscriptsubscriptùëÖùë°absentmaskùõøsubscriptùë•1ùëóùõøsubscriptùë•ùë°ùëÄ1ùë°\\\\textstyle R\\_{t}^{\\*\\\\mathrm{unif}}=\\\\frac{\\\\delta\\\\left\\\\{x\\_{1},j\\\\right\\\\}(1-\\\\delta\\\\left\\\\{x\\_{1},x\\_{t}\\\\right\\\\})}{1-t},\\\\quad R\\_{t}^{\\*\\\\mathrm{mask}}=\\\\frac{\\\\delta\\\\left\\\\{x\\_{1},j\\\\right\\\\}\\\\delta\\\\left\\\\{x\\_{t},M\\\\right\\\\}}{1-t} |  | (12) |\n\nas we derive in [App.F]Appendix F Implementation Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nUsing Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} as a starting point, we now build out a set of rate matrices that all generate pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1}.\nWe can accomplish this by adding on a second rate matrix that is in detailed balance with pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1}.\n\n###### Proposition 3.3.\n\nLet RtDBsubscriptsuperscriptùëÖDBùë°R^{\\\\mathrm{DB}}\\_{t} be a rate matrix that satisfies the detailed balance condition for pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1},\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pt\\|1‚Äã(i\\|x1)‚ÄãRtDB‚Äã(i,j\\|x1)=pt\\|1‚Äã(j\\|x1)‚ÄãRtDB‚Äã(j,i\\|x1),.subscriptùëùconditionalùë°1conditionalùëñsubscriptùë•1subscriptsuperscriptùëÖDBùë°ùëñconditionalùëósubscriptùë•1subscriptùëùconditionalùë°1conditionalùëósubscriptùë•1subscriptsuperscriptùëÖDBùë°ùëóconditionalùëñsubscriptùë•1p\\_{t\\|1}(i\\|x\\_{1})R^{\\\\mathrm{DB}}\\_{t}(i,j\\|x\\_{1})=p\\_{t\\|1}(j\\|x\\_{1})R^{\\\\mathrm{DB}}\\_{t}(j,i\\|x\\_{1}),. |  | (13) |\n\nLet RtŒ∑superscriptsubscriptùëÖùë°ùúÇR\\_{t}^{\\\\eta} be defined by Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t}, RtDBsubscriptsuperscriptùëÖDBùë°R^{\\\\mathrm{DB}}\\_{t} and parameter Œ∑‚àà‚Ñù‚â•0ùúÇsuperscript‚Ñùabsent0\\\\eta\\\\in\\\\mathbb{R}^{\\\\geq 0},\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | RtŒ∑:=Rt‚àó+Œ∑‚ÄãRtDB.assignsuperscriptsubscriptùëÖùë°ùúÇsubscriptsuperscriptùëÖùë°ùúÇsubscriptsuperscriptùëÖDBùë°R\\_{t}^{\\\\eta}\\\\vcentcolon=R^{\\*}\\_{t}+\\\\eta R^{\\\\mathrm{DB}}\\_{t}. |  | (14) |\n\nThen we have RtŒ∑superscriptsubscriptùëÖùë°ùúÇR\\_{t}^{\\\\eta} generates pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}), ‚àÄŒ∑‚àà‚Ñù‚â•0for-allùúÇsuperscript‚Ñùabsent0\\\\forall\\\\eta\\\\in\\\\mathbb{R}^{\\\\geq 0}.\n\nThe detailed balance condition intuitively enforces the incoming probability mass, pt\\|1‚Äã(j\\|x1)‚ÄãRtDB‚Äã(j,i\\|x1)subscriptùëùconditionalùë°1conditionalùëósubscriptùë•1subscriptsuperscriptùëÖDBùë°ùëóconditionalùëñsubscriptùë•1p\\_{t\\|1}(j\\|x\\_{1})R^{\\\\mathrm{DB}}\\_{t}(j,i\\|x\\_{1}) to equal the outgoing probability mass, pt\\|1‚Äã(i\\|x1)‚ÄãRtDB‚Äã(i,j\\|x1)subscriptùëùconditionalùë°1conditionalùëñsubscriptùë•1subscriptsuperscriptùëÖDBùë°ùëñconditionalùëósubscriptùë•1p\\_{t\\|1}(i\\|x\\_{1})R^{\\\\mathrm{DB}}\\_{t}(i,j\\|x\\_{1}).\nTherefore, RtDBsubscriptsuperscriptùëÖDBùë°R^{\\\\mathrm{DB}}\\_{t} has no overall effect on the probability flow and can be added on to Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} with the combined rate still generating pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1}.\nIn many cases, [Eq.13]In Proposition 3.3. ‚Ä£ 3.2 Choice of Rate Matrix ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") is easy to solve for RtDBsubscriptsuperscriptùëÖDBùë°R^{\\\\mathrm{DB}}\\_{t} due to the explicit relation between elements of RtDBsubscriptsuperscriptùëÖDBùë°R^{\\\\mathrm{DB}}\\_{t} as we exemplify in [App.F]Appendix F Implementation Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nDetailed balance has been used previously in CTMC generative models (Campbell et al., [2022])) to make post-hoc inference adjustments.\n\n##### CTMC stochasticity.\n\nWe now have a set of rate matrices, {RtŒ∑:Œ∑‚â•0}conditional-setsuperscriptsubscriptùëÖùë°ùúÇùúÇ0\\\\{R\\_{t}^{\\\\eta}:\\\\eta\\\\geq 0\\\\}, that all generate pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1}.\nWe can plug any one of these into our definition for Rt‚Äã(xt,j)subscriptùëÖùë°subscriptùë•ùë°ùëóR\\_{t}(x\\_{t},j) ( [Eq.9]In Proposition 3.1. ‚Ä£ 3.1.1 Sampling ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")) and sample novel datapoints using [Alg.1]In 3.1.1 Sampling ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nThe chosen value for Œ∑ùúÇ\\\\eta will influence the dynamics of the CTMC we are simulating.\nFor large values of Œ∑ùúÇ\\\\eta, the increased influence of RtDBsubscriptsuperscriptùëÖDBùë°R^{\\\\mathrm{DB}}\\_{t} will cause large exchanges of probability mass between states.\nThis manifests as increasing the frequency of jumps occurring in the sequence trajectory.\nThis leads to a short auto-correlation time for the CTMC and a high level of unpredictability of future states given the current state.\nWe refer to the behaviour that Œ∑ùúÇ\\\\eta controls as CTMC stochasticity. [Fig.1]In 1 Introduction ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") B shows examples of high and low Œ∑ùúÇ\\\\eta.\n\nOn a given task, we expect there to be an optimal stochasticity level.\nAdditional stochasticity improves performance in continuous diffusion models Cao et al. ( [2023])); Xu et al. ( [2023])), but too much stochasticity can result in a poorly performing degenerate CTMC.\nIn some cases, setting Œ∑=0ùúÇ0\\\\eta=0, i.e. using Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t}, results in the minimum possible number of jumps because the ReLUReLU\\\\mathrm{ReLU} within Rt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} removes state pairs that needlessly exchange mass (Zhang et al., [2023])).\n\n###### Proposition 3.4.\n\nFor pt\\|1unifsuperscriptsubscriptùëùconditionalùë°1unifp\\_{t\\|1}^{\\\\mathrm{unif}} and pt\\|1masksuperscriptsubscriptùëùconditionalùë°1maskp\\_{t\\|1}^{\\\\mathrm{mask}},\nRt‚àósubscriptsuperscriptùëÖùë°R^{\\*}\\_{t} generates pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1} whilst minimizing the expected number of jumps during the sequence trajectory. This assumes multi-dimensional data under the factorization assumptions listed in [App.E]Appendix E Multidimensional Data ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\n### 3.3 DFMs Recipe\n\nWe now summarize the key steps of a DFM. PyTorch code for a minimal DFM implementaton is provided in [App.F]Appendix F Implementation Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\n1. 1.\n\n\nDefine the desired noise schedule pt\\|1‚Äã(xt\\|x1)subscriptùëùconditionalùë°1conditionalsubscriptùë•ùë°subscriptùë•1p\\_{t\\|1}(x\\_{t}\\|x\\_{1}) ( [Sec.3.1]A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")).\n\n2. 2.\n\n\nTrain denoising model p1\\|tŒ∏‚Äã(x1\\|xt)superscriptsubscriptùëùconditional1ùë°ùúÉconditionalsubscriptùë•1subscriptùë•ùë°p\\_{1\\|t}^{\\\\theta}(x\\_{1}\\|x\\_{t}) ( [Sec.3.1.2]Training ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")).\n\n3. 3.\n\n\nChoose rate matrix RtŒ∑superscriptsubscriptùëÖùë°ùúÇR\\_{t}^{\\\\eta} ( [Sec.3.2]Choice of Rate Matrix ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")).\n\n4. 4.\n\n\nRun sampling ( [Alg.1]In 3.1.1 Sampling ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")).",
            "citations": null
          },
          "4 Multimodal Protein Generative Model": {
            "content": "We now use a DFM to create a multimodal protein generative model.\nTo generate multimodal data, we will define a multimodal generative flow.\nWe define pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1} to factorize over different modalities allowing us to define pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1} individually for each one.\nOur training loss is then simply the sum of the standard flow loss for each modality.\nAt inference time, we can also update each modality individually for each simulation step, using an ODE for continuous data and a CTMC for discrete data.\nWe now apply this capability on protein structure-sequence generation.\n\nA protein can be modeled as a linear chain of residues, each with an assigned amino acid and 3D atomic coordinates.\nProtein co-design aims to jointly generate the amino acids (sequence) and coordinates (structure).\nPrior works have used a generative model on one modality (sequence or structure) with a separate model to predict the other (see [Sec.5]Related Work ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")).\nInstead, our approach uses a single generative model to jointly sample both modalities: a DFM for the sequence and a flow model, FrameFlow (Yim et al., [2023a])), for the structure.\nWe refer to this as co-generating the sequence and structure; hence, the method is called Multiflow.\n\nMultimodal Flow.  Following FrameFlow, we refer to the protein structure as the _backbone_ atomic coordinates of each residue.\nWe leave modeling side-chain atoms as a follow-up work.\nThe structure is represented as elements of SE‚Äã(3)SE3\\\\mathrm{SE}(3) to capture the rigidity of the local frames along the backbone (Yim et al., [2023b])).\nA protein of length Dùê∑D residues can then be represented as {(xd,rd,ad)}d=1Dsuperscriptsubscriptsuperscriptùë•ùëësuperscriptùëüùëësuperscriptùëéùëëùëë1ùê∑\\\\{(x^{d},r^{d},a^{d})\\\\}\\_{d=1}^{D} where x‚àà3superscript3ùë•absentx\\\\in^{3} is the translation of the residue‚Äôs Carbon-Œ±ùõº\\\\alpha atom, r‚ààSO‚Äã(3)ùëüSO3r\\\\in\\\\mathrm{SO}(3) is a rotation matrix of the residue‚Äôs local frame with respect to global reference frame, and a‚àà{1,‚Ä¶,20}‚à™{M}ùëé1‚Ä¶20ùëÄa\\\\in\\\\{1,\\\\dots,20\\\\}\\\\cup\\\\{M\\\\} is one of 20 amino acids or the mask state MùëÄM.\nDuring training, we corrupt data using the conditional flow for each modality.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  |  | Translation:xt=t‚Äãx1+(1‚àít)‚Äãx0,x0‚àºùí©‚Äã(0,I)formulae-sequenceTranslation:subscriptùë•ùë°ùë°subscriptùë•11ùë°subscriptùë•0similar-tosubscriptùë•0ùí©0ùêº\\\\textstyle\\\\text{Translation:}\\\\quad x\\_{t}=tx\\_{1}+(1-t)x\\_{0},\\ x\\_{0}\\\\sim\\\\mathcal{N}(0,I) |  | (15) |\n|  |  | Rotation:rt=expr0‚Äã(t‚Äãlogr0‚Äã(r1)),r0‚àºùí∞SO‚Äã(3)formulae-sequenceRotation:subscriptùëüùë°subscriptexpsubscriptùëü0ùë°subscriptlogsubscriptùëü0subscriptùëü1similar-tosubscriptùëü0subscriptùí∞SO3\\\\textstyle\\\\text{Rotation:}\\\\quad r\\_{t}=\\\\mathrm{exp}\\_{r\\_{0}}\\\\left(t\\\\mathrm{log}\\_{r\\_{0}}(r\\_{1})\\\\right),\\ r\\_{0}\\\\sim\\\\mathcal{U}\\_{\\\\text{SO}(3)} |  | (16) |\n|  |  | Amino acid:at~‚àºCat‚Äã(t~‚ÄãŒ¥‚Äã{a1,at~}+(1‚àít~)‚ÄãŒ¥‚Äã{M,at~}),similar-toAmino acid:subscriptùëé~ùë°Cat~ùë°ùõøsubscriptùëé1subscriptùëé~ùë°1~ùë°ùõøùëÄsubscriptùëé~ùë°\\\\textstyle\\\\text{Amino acid:}\\\\quad a\\_{\\\\tilde{t}}\\\\sim\\\\mathrm{Cat}(\\\\tilde{t}\\\\delta\\\\left\\\\{a\\_{1},a\\_{\\\\tilde{t}}\\\\right\\\\}+(1-\\\\tilde{t})\\\\delta\\\\left\\\\{M,a\\_{\\\\tilde{t}}\\\\right\\\\}), |  | (17) |\n\nwhere expexp\\\\mathrm{exp} and log\\\\log are the exponential and logarithmic maps.\nùí∞SO‚Äã(3)subscriptùí∞SO3\\\\mathcal{U}\\_{\\\\mathrm{SO}(3)} is the uniform distribution on SO‚Äã(3)SO3\\\\mathrm{SO}(3).\nThe noise level for the structure, tùë°t, is independent of the noise level for the sequence, t~~ùë°\\\\tilde{t}, which enables flexible sampling options that we explore in our experiments (Albergo et al., [2023])).\nFor brevity, we let Tt,t~d=(xtd,rtd,at~d)subscriptsuperscriptùëáùëëùë°~ùë°subscriptsuperscriptùë•ùëëùë°subscriptsuperscriptùëüùëëùë°subscriptsuperscriptùëéùëë~ùë°T^{d}\\_{t,\\\\tilde{t}}=(x^{d}\\_{t},r^{d}\\_{t},a^{d}\\_{\\\\tilde{t}}) while ùêìt,t~={Tt,t~d}d=1Dsubscriptùêìùë°~ùë°superscriptsubscriptsubscriptsuperscriptùëáùëëùë°~ùë°ùëë1ùê∑\\\\mathbf{T}\\_{t,\\\\tilde{t}}=\\\\{T^{d}\\_{t,\\\\tilde{t}}\\\\}\\_{d=1}^{D} is the protein‚Äôs sequence and structure at times t,t~ùë°~ùë°t,\\\\tilde{t}.\n\nTraining.  During training, our network will take as input the noised protein ùêìt,t~subscriptùêìùë°~ùë°\\\\mathbf{T}\\_{t,\\\\tilde{t}} and predict the denoised translations x^1‚Äã(ùêìt,t~)subscript^ùë•1subscriptùêìùë°~ùë°\\\\hat{x}\\_{1}(\\\\mathbf{T}\\_{t,\\\\tilde{t}}), rotations r^1‚Äã(ùêìt,t~)subscript^ùëü1subscriptùêìùë°~ùë°\\\\hat{r}\\_{1}(\\\\mathbf{T}\\_{t,\\\\tilde{t}}), and amino acid distribution pŒ∏‚Äã(a1\\|ùêìt,t~)subscriptùëùùúÉconditionalsubscriptùëé1subscriptùêìùë°~ùë°p\\_{\\\\theta}(a\\_{1}\\|\\\\mathbf{T}\\_{t,\\\\tilde{t}}).\nWe minimize the following loss,\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | ùîº\\[‚àëd=1D\\\\textstyle\\\\mathbb{E}\\\\Big{\\[}\\\\sum\\_{d=1}^{D} | \\|\\|x^1d‚Äã(ùêìt,t~)‚àíx1d\\|\\|21‚àít‚àílog‚Å°pŒ∏‚Äã(a1d\\|ùêìt,t~)superscriptsuperscriptsubscript^ùë•1ùëësubscriptùêìùë°~ùë°superscriptsubscriptùë•1ùëë21ùë°subscriptùëùùúÉconditionalsuperscriptsubscriptùëé1ùëësubscriptùêìùë°~ùë°\\\\textstyle\\\\frac{\\\\left\\\\lvert\\\\left\\\\lvert\\\\hat{x}\\_{1}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})-x\\_{1}^{d}\\\\right\\\\rvert\\\\right\\\\rvert^{2}}{1-t}-\\\\log p\\_{\\\\theta}(a\\_{1}^{d}\\|\\\\mathbf{T}\\_{t,\\\\tilde{t}}) |  | (18) |\\\n|  | +\\\\textstyle+ | \\|\\|logrtd‚Äã(r^1d‚Äã(ùêìt))‚àílogrtd‚Äã(r1d)\\|\\|21‚àít\\].\\\\textstyle\\\\frac{\\\\left\\\\lvert\\\\left\\\\lvert\\\\mathrm{log}\\_{r\\_{t}^{d}}\\\\left(\\\\hat{r}\\_{1}^{d}(\\\\mathbf{T}\\_{t})\\\\right)-\\\\mathrm{log}\\_{r\\_{t}^{d}}\\\\left(r\\_{1}^{d}\\\\right)\\\\right\\\\rvert\\\\right\\\\rvert^{2}}{1-t}\\\\Big{\\]}. |  | (19) |\n\nwhere the expectation is over t,t~‚àºùí∞‚Äã(0,1)similar-toùë°~ùë°ùí∞01t,\\\\tilde{t}\\\\sim\\\\mathcal{U}(0,1) and ùêì1,1‚àºpdatasimilar-tosubscriptùêì11subscriptùëùdata\\\\mathbf{T}\\_{1,1}\\\\sim p\\_{\\\\mathrm{data}} while ùêìt,t~subscriptùêìùë°~ùë°\\\\mathbf{T}\\_{t,\\\\tilde{t}} is sampled by interpolating to times t,t~ùë°~ùë°t,\\\\tilde{t} via [Eq.16]In 4 Multimodal Protein Generative Model ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nOur independent tùë°t, t~~ùë°\\\\tilde{t} objective enables the model to learn over different relative levels of corruption between the sequence and structure.\n[Eq.18]In 4 Multimodal Protein Generative Model ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") corresponds to the flow matching loss for continuous data and the DFMs loss [Eq.10]In 3.1.2 Training ‚Ä£ 3.1 A Flow Model for Sampling Discrete Data ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") for discrete amino acids.\nThe neural network architecture is modified from FrameFlow with a larger transformer, smaller Invariant Point Attention, and extra multi-layer perception head to predict the amino acid logits.\nWe now convert our predictions into vector fields and rate matrices:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ŒΩxd‚Äã(ùêìt,t~)=x^1d‚Äã(ùêìt,t~)‚àíxtd1‚àít,ŒΩrd‚Äã(ùêìt,t~)=c‚ãÖlogrtd‚Äã(r^1d‚Äã(ùêìt,t~)),formulae-sequencesuperscriptsubscriptùúàùë•ùëësubscriptùêìùë°~ùë°superscriptsubscript^ùë•1ùëësubscriptùêìùë°~ùë°superscriptsubscriptùë•ùë°ùëë1ùë°superscriptsubscriptùúàùëüùëësubscriptùêìùë°~ùë°‚ãÖùëêsubscriptlogsuperscriptsubscriptùëüùë°ùëësuperscriptsubscript^ùëü1ùëësubscriptùêìùë°~ùë°\\\\textstyle\\\\nu\\_{x}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})=\\\\frac{\\\\hat{x}\\_{1}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})-x\\_{t}^{d}}{1-t},\\\\,\\\\,\\\\nu\\_{r}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})=c\\\\cdot\\\\mathrm{log}\\_{r\\_{t}^{d}}(\\\\hat{r}\\_{1}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})), |  | (20) |\n|  | Rt~Œ∏‚Äãd‚Äã(ùêìt,t~,j)=pŒ∏‚Äã(a1d=j\\|ùêìt,t~)1‚àít~‚ÄãŒ¥‚Äã{at~d,M}.superscriptsubscriptùëÖ~ùë°ùúÉùëësubscriptùêìùë°~ùë°ùëósubscriptùëùùúÉsuperscriptsubscriptùëé1ùëëconditionalùëósubscriptùêìùë°~ùë°1~ùë°ùõøsuperscriptsubscriptùëé~ùë°ùëëùëÄ\\\\textstyle R\\_{\\\\tilde{t}}^{\\\\theta d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}},j)=\\\\frac{p\\_{\\\\theta}(a\\_{1}^{d}=j\\|\\\\mathbf{T}\\_{t,\\\\tilde{t}})}{1-\\\\tilde{t}}\\\\delta\\\\left\\\\{a\\_{\\\\tilde{t}}^{d},M\\\\right\\\\}. |  | (21) |\n\nŒΩxdsuperscriptsubscriptùúàùë•ùëë\\\\nu\\_{x}^{d} is the standard form for a Euclidean vector field (Lipman et al., [2023])).\nŒΩrdsuperscriptsubscriptùúàùëüùëë\\\\nu\\_{r}^{d} is the vector field on a Riemannian manifold (e.g. SO‚Äã(3)SO3\\\\mathrm{SO}(3)) (Chen & Lipman, [2023])) using an exponential rate scheduler found to improve sample quality in Bose et al. ( [2023])).\nWe use c=10ùëê10c=10 as in FrameFlow.\nWe derive the form for Rt~Œ∏‚ÄãdsuperscriptsubscriptùëÖ~ùë°ùúÉùëëR\\_{\\\\tilde{t}}^{\\\\theta d} assuming Œ∑=0ùúÇ0\\\\eta=0 in [Sec.F.1]F.1 Masking Example ‚Ä£ Appendix F Implementation Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n[Eq.21]In 4 Multimodal Protein Generative Model ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") can be understood intuitively as creating continuous or discrete ‚Äòvectors‚Äô that point towards the predicted clean data point from the current noisy sample.\nThis ‚Äòvector‚Äô is x^1d‚Äã(ùêìt,t~)‚àíxtdsuperscriptsubscript^ùë•1ùëësubscriptùêìùë°~ùë°superscriptsubscriptùë•ùë°ùëë\\\\hat{x}\\_{1}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})-x\\_{t}^{d} for the translations, logrtd‚Äã(r^1d‚Äã(ùêìt,t~))subscriptlogsuperscriptsubscriptùëüùë°ùëësuperscriptsubscript^ùëü1ùëësubscriptùêìùë°~ùë°\\\\mathrm{log}\\_{r\\_{t}^{d}}(\\\\hat{r}\\_{1}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})) for the rotations, and pŒ∏‚Äã(a1d=j\\|ùêìt,t~)subscriptùëùùúÉsuperscriptsubscriptùëé1ùëëconditionalùëósubscriptùêìùë°~ùë°p\\_{\\\\theta}(a\\_{1}^{d}=j\\|\\\\mathbf{T}\\_{t,\\\\tilde{t}}) for the amino acids.\n\nSampling.  To sample with Multiflow, we integrate along the ODE trajectories for the translations and rotations whilst simultaneously following the CTMC for the amino acid sequence.\nEach Euler step during sampling has the update:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | xt+Œî‚Äãtd=xtd+ŒΩxd‚Äã(ùêìt,t~)‚ÄãŒî‚Äãt,rt+Œî‚Äãtd=exprtd‚Äã(Œî‚Äãt‚ãÖŒΩrd‚Äã(ùêìt,t~))formulae-sequencesuperscriptsubscriptùë•ùë°Œîùë°ùëësuperscriptsubscriptùë•ùë°ùëësuperscriptsubscriptùúàùë•ùëësubscriptùêìùë°~ùë°Œîùë°superscriptsubscriptùëüùë°Œîùë°ùëësubscriptexpsuperscriptsubscriptùëüùë°ùëë‚ãÖŒîùë°superscriptsubscriptùúàùëüùëësubscriptùêìùë°~ùë°\\\\textstyle x\\_{t+\\\\Delta t}^{d}=x\\_{t}^{d}+\\\\nu\\_{x}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})\\\\Delta t,\\ r\\_{t+\\\\Delta t}^{d}=\\\\mathrm{exp}\\_{r\\_{t}^{d}}\\\\left(\\\\Delta t\\\\cdot\\\\nu\\_{r}^{d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}})\\\\right) |  | (22) |\n|  | at~+Œî‚Äãt~d‚àºCat‚Äã(Œ¥‚Äã{at~d,at~+Œî‚Äãt~d}+Rt~Œ∏‚Äãd‚Äã(ùêìt,t~,at~+Œî‚Äãt~d)‚ÄãŒî‚Äãt~).similar-tosuperscriptsubscriptùëé~ùë°Œî~ùë°ùëëCatùõøsuperscriptsubscriptùëé~ùë°ùëësuperscriptsubscriptùëé~ùë°Œî~ùë°ùëësuperscriptsubscriptùëÖ~ùë°ùúÉùëësubscriptùêìùë°~ùë°superscriptsubscriptùëé~ùë°Œî~ùë°ùëëŒî~ùë°\\\\textstyle a\\_{\\\\tilde{t}+\\\\Delta\\\\tilde{t}}^{d}\\\\sim\\\\mathrm{Cat}(\\\\delta\\\\{a\\_{\\\\tilde{t}}^{d},a\\_{\\\\tilde{t}+\\\\Delta\\\\tilde{t}}^{d}\\\\}+R\\_{\\\\tilde{t}}^{\\\\theta d}(\\\\mathbf{T}\\_{t,\\\\tilde{t}},a\\_{\\\\tilde{t}+\\\\Delta\\\\tilde{t}}^{d})\\\\Delta\\\\tilde{t}). |  | (23) |\n\nWhen sampling the amino acids, we found it beneficial to utilize purity (Tang et al., [2022])) to choose which indices to unmask at each step.\nThe advantage of training with decoupled time schedules is that we have freedom to arbitrarily sample with any combination of (t,t~)ùë°~ùë°(t,\\\\tilde{t}).\nWe use this to perform conditional inpainting where one of the modalities is fixed by setting tùë°t or t~~ùë°\\\\tilde{t} equal to 1.\nFor example, setting t=1ùë°1t=1 then using Euler steps to update t~~ùë°\\\\tilde{t} from 0‚Üí1‚Üí010\\\\rightarrow 1 performs sequence generation conditioned on the structure.\nWe summarize the capabilities in [Fig.1]In 1 Introduction ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") C and in [Table.2]In 4 Multimodal Protein Generative Model ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\nTable 2: Flexible multimodal sampling.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Codesign | Inverse folding | Forward folding |\n| xt,rtsubscriptùë•ùë°subscriptùëüùë°x\\_{t},r\\_{t} | t:0‚Üí1:ùë°‚Üí01t:0\\\\rightarrow 1 | t=1ùë°1t=1 | t:0‚Üí1:ùë°‚Üí01t:0\\\\rightarrow 1 |\n| at~subscriptùëé~ùë°a\\_{\\\\tilde{t}} | t~:0‚Üí1:~ùë°‚Üí01\\\\tilde{t}:0\\\\rightarrow 1 | t~:0‚Üí1:~ùë°‚Üí01\\\\tilde{t}:0\\\\rightarrow 1 | t~=1~ùë°1\\\\tilde{t}=1 |",
            "citations": null
          },
          "5 Related Work": {
            "content": "Discrete Diffusion Models.  Our continuous time flow builds on work that extends discrete diffusion Hoogeboom et al. ( [2021])); Austin et al. ( [2021])) to continuous time Campbell et al. ( [2022])); Sun et al. ( [2023b])); Santos et al. ( [2023])); Lou et al. ( [2023])) but we simplify and extend the framework.\nWe are not restricted to noising processes that can be defined by a matrix exponential as we just write pt\\|1subscriptùëùconditionalùë°1p\\_{t\\|1} down directly and we have the freedom to choose Rt‚Äã(xt,j\\|x1)subscriptùëÖùë°subscriptùë•ùë°conditionalùëósubscriptùë•1R\\_{t}(x\\_{t},j\\|x\\_{1}) at inference time rather than being restricted to the time reversal.\nWe show how DFMs encompasses prior discrete diffusion models in [App.H]Appendix H Comparison with Discrete Diffusion Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nFor molecular retrosynthesis, Igashov et al. ( [2023])) also considered a data conditional process, but did not build a modeling framework around it.\nZhang et al. ( [2023])) constructed low-stochasticity rate matrices and their derivation provides the building blocks of [Prop.3.2]Proposition 3.2. ‚Ä£ 3.2 Choice of Rate Matrix ‚Ä£ 3 Discrete Flow Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nSome works have built a multimodal diffusion model for molecule generation (Peng et al., [2023]); Vignac et al., [2023b]); Hua et al., [2023])) whereas we focus on protein co-design using flows.\nWe discuss further related work in [App.D]Appendix D Discussion of Related Work ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\nProtein Generation.\nDiffusion and flow models have risen in popularity for generating novel and diverse protein backbones (Yim et al., [2023b]); [a]); Bose et al., [2023]); Lin & AlQuraishi, [2023]); Ingraham et al., [2023])).\nRFDiffusion achieved notable success by generating proteins validated in wet-lab experiments (Watson et al., [2023])).\nHowever, these methods required a separate model for sequence generation.\nSome works have focused only on sequence generation with diffusion models (Alamdari et al., [2023]); Gruver et al., [2023]); Yang et al., [2023]); Yi et al., [2023])).\nWe focus on co-design which aims to jointly generate the structure and sequence.\n\nPrior works have attempted co-design.\nProteinGenerator (Lisanza et al., [2023])) performs Euclidean diffusion over one-hot amino acids while predicting the structure at each step with RosettaFold (Baek et al., [2021])).\nConversely, Protpardelle (Chu et al., [2023])) performs Euclidean diffusion over structure while iteratively predicting the sequence.\nMultiflow instead uses a generative model over _both_ the structure and sequence which allows for flexibility in conditioning at inference time (see [Sec.6.2.1]Co-design results. ‚Ä£ 6.2 Protein generation ‚Ä£ 6 Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\")).\nLuo et al. ( [2022])); Shi et al. ( [2022])) are co-design methods, but are limited to generating CDR loops on antibodies.\nLastly, Anand & Achim ( [2022])) presented diffusion on structure and sequence, but did not report standard evaluation metrics nor is code available.",
            "citations": null
          },
          "6 Experiments": {
            "content": "We first show that tuning stochasticity at sample time improves pure discrete generative modeling performance by modeling text data.\nWe then evaluate Multiflow, the first flow model on discrete and continuous state spaces.\nWe show Multiflow provides state-of-the-art-performance on protein generation compared to prior approaches that do not generate using a true multimodal generative model.\nFinally, we investigate Multiflow‚Äôs crossmodal properties of how varying the sequence sampling affects the structure.\n\n### 6.1 Text Modeling\n\n![Refer to caption]Figure 2: Negative log-likelihood as measured by GPT-J-6B versus sample entropy for DFM, D3PM and an autoregressive model with p1\\|tŒ∏‚Äã(x1\\|xt)superscriptsubscriptùëùconditional1ùë°ùúÉconditionalsubscriptùë•1subscriptùë•ùë°p\\_{1\\|t}^{\\\\theta}(x\\_{1}\\|x\\_{t}) logit temperature swept over {0.5,0.6,,‚Ä¶,1}\\\\{0.5,0.6,,\\\\dots,1\\\\}. We aim to minimize NLL whilst staying close to the dataset entropy.\n\n##### Set-up.\n\nWe model the text dataset, text8 Mahoney ( [2006])), which is 100100100MB of text from English Wikipedia.\nWe model at the character level, following Austin et al. ( [2021])), with S=28ùëÜ28S=28 categories for 262626 lowercase letters, a white-space and a mask token. We split the text into chunks of length D=256ùê∑256D=256. We train a DFM using pt\\|1masksuperscriptsubscriptùëùconditionalùë°1maskp\\_{t\\|1}^{\\\\mathrm{mask}} and parameterize the denoising network using a transformer with 868686M non-embedding parameters, full details are in [App.I]Appendix I Text Experiment Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\n\nResults. Text samples are evaluated following Strudel et al. ( [2022])).\nA much larger text model, we use GPT-J-6B Wang & Komatsuzaki ( [2021])), is used to evaluate the negative log-likelihood (NLL) of the generated samples.\nThe NLL metric alone can be gamed by repeating similar sequences, so the token distribution entropy is also measured.\nGood samples should have both low NLL and entropy close to the data distribution.\nFor a given value of Œ∑ùúÇ\\\\eta, we create a Pareto-frontier in NLL vs entropy space by varying the temperature applied to the p1\\|tŒ∏‚Äã(x1\\|xt)superscriptsubscriptùëùconditional1ùë°ùúÉconditionalsubscriptùë•1subscriptùë•ùë°p\\_{1\\|t}^{\\\\theta}(x\\_{1}\\|x\\_{t}) logits during the softmax operation.\n[Fig.2]In 6.1 Text Modeling ‚Ä£ 6 Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") plots the results for varying levels of Œ∑ùúÇ\\\\eta and sampling temperature.\nFor comparison, we also include results for the discrete diffusion D3PM method with absorbing state corruption Austin et al. ( [2021])).\nWe find the DFM performs better than D3PM due to our additional sample time flexibility. We are able to choose the value of Œ∑ùúÇ\\\\eta that optimizes the Pareto-frontier at sample time (here Œ∑=15ùúÇ15\\\\eta=15) whereas D3PM does not have this flexibility. We show the full Œ∑ùúÇ\\\\eta sweep in [App.I]Appendix I Text Experiment Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") and show the frontier for Œ∑=0ùúÇ0\\\\eta=0 in [Fig.2]In 6.1 Text Modeling ‚Ä£ 6 Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nWhen Œ∑=0ùúÇ0\\\\eta=0, performance is similar due to DFMs being a continuous time generalization of D3PM at this setting, see [Sec.H.2]H.2 Discrete Time Discrete Diffusion Models ‚Ä£ Appendix H Comparison with Discrete Diffusion Models ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nWe also include results for an autoregressive model in [Fig.2]In 6.1 Text Modeling ‚Ä£ 6 Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") for reference; however, we note this is not a complete like-for-like comparison as autoregressive models require much less compute to train than diffusion based models Gulrajani & Hashimoto ( [2023])).\n\n### 6.2 Protein generation\n\nTable 3: Co-design results. Abbreviations: Designability (DES.), Diversity (DIV.), Novelty (NOV.).\n\n|     |     |     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Method | Co-design 1 | PMPNN 8 | PMPNN 1 |\n|  | Des. (‚Üë‚Üë\\\\uparrow) | Div. (‚Üë‚Üë\\\\uparrow) | Nov. (‚Üì‚Üì\\\\downarrow) | Des. | Div. | Nov. | Des. | Div. | Nov. |\n| Protpardelle | 0.05 | 6 | 0.75 | 0.92 | 46 | 0.67 | 0.63 | 33 | 0.68 |\n| ProteinGenerator | 0.34 | 31 | 0.74 | 0.88 | 73 | 0.71 | 0.75 | 56 | 0.72 |\n| RFdiffusion |  | N/A |  | 0.90 | 161 | 0.69 | 0.69 | 120 | 0.70 |\n| Multiflow | 0.88 | 143 | 0.68 | 0.99 | 156 | 0.68 | 0.87 | 142 | 0.69 |\n| Multiflow w/o distillation | 0.41 | 73 | 0.68 | 0.89 | 126 | 0.68 | 0.75 | 110 | 0.69 |\n| Multiflow w/o sequence |  | N/A |  | 0.99 | 118 | 0.69 | 0.86 | 95 | 0.69 |\n\nMetrics.  Evaluating the quality of structure-sequence samples is performed with _self-consistency_ which measures how consistent a generated sequence is with a generated structure by testing how accurately a protein folding network can predict the structure from the sequence.\nSpecifically, either AlphaFold2 (Jumper et al., [2021])) or ESMFold (Lin et al., [2023])), is first used to predict a structure given only the generated sequence.\nOur results will use ESMFold but we show results with AlphaFold2 in [App.J]Appendix J Protein Generation Experiment Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nThen, we calculate scRMSD: the Root Mean Squared Deviation between the generated and predicted structure‚Äôs backbone atoms.\nThe generated structure is called _designable_ if scRMSD<2‚Äã√ÖscRMSD2√Ö\\\\text{scRMSD}<2\\\\text{\\\\AA{}}.\n\nStructure-only generative models such as RFdiffusion first use ProteinMPNN (PMPNN) (Dauparas et al., [2022])) to predict a sequence given the generated structure in order to then be able to use the self-consistency metric.\nWe present three variants of self-consistency:\n\n- ‚Ä¢\n\n\n_Co-design 1_: use the sampled (structure, sequence) pair.\n\n- ‚Ä¢\n\n\n_PMPNN 8_: take only the sampled structure and predict 8 sequences with PMPNN. Then use ESMFold to predict a new structure for each sequence.\nThe final structure-sequence pair is the original sampled structure along with the PMPNN sequence with minimum scRMSD.\n\n- ‚Ä¢\n\n\n_PMPNN 1_: same as PMPNN 8 except PMPNN only generates one sequence.\n\n\nPMPNN 8 and PMPNN 1 evaluate only the quality of a model‚Äôs generated structures whereas, for co-design models, Co-design 1 evaluates the quality of a model‚Äôs generated (structure, sequence) pairs.\nThe comparison between PMPNN 1 and Co-design 1 allows for evaluating the quality of co-designed sequences.\nPMPNN 8 is the procedure used in prior structure-only works.\nAs our main metric of sample quality, we report _designability_ as the percentage of designable samples.\nAs a further sanity check, designable samples are then evaluated on _diversity_ and _novelty_.\nWe use FoldSeek (van Kempen et al., [2022])) to report diversity as the number of unique clusters while novelty is the average TM-score (Zhang & Skolnick, [2005])) of each sample to its most similar protein in PDB.\n\nTraining.\nOur training data consisted of length 60-384 proteins from the Protein Data Bank (PDB) (Berman et al., [2000])) that were curated in Yim et al. ( [2023b])) for a total of 18684 proteins.\nTraining took 200 epochs over 3 days on 4 A6000 Nvidia GPUs using the AdamW optimizer (Loshchilov & Hutter, [2017])) with learning rate 0.0001.\n\nDistillation.\nMultiflow with PDB training generated highly designable structures.\nHowever, the co-designed sequences suffered from lower designability than PMPNN.\nOur analysis revealed the original PDB sequences achieved worse designability than PMPNN.\nWe sought to improve performance by distilling knowledge from other models.\nTo accomplish this, we first replaced the original sequence of each structure in the training dataset with the lowest scRMSD sequence out of 8 generated by PMPNN conditioned on the structure.\nSecond, we generated synthetic structures of random lengths between 60-384 using an initial Multiflow model and added those that passed PMPNN 8 designability into the training dataset with the lowest scRMSD PMPNN sequence.\nWe found that we needed to add only an extra 4179 examples to the original set of 18684 proteins to see a dramatic improvement.\nThis procedure can be seen as a single step of reinforced self training (ReST) Gulcehre et al. ( [2023])).\n\n#### 6.2.1 Co-design results.\n\nFollowing RFdiffusion‚Äôs benchmark, we sample 100 proteins for each length 70, 100, 200, and 300.\nWe sample Multiflow with 500 timesteps using a temperature of 0.1 (PMPNN also uses 0.1) and stochasticity level Œ∑=20ùúÇ20\\\\eta=20.\nWe compare our structure quality to state-of-the-art structure generation method RFdiffusion.\nFor co-design, we compare to Protpardelle and ProteinGenerator.\nAll methods were ran using their publicly released code and evaluated identically.\n\nOur results are presented in [Table.3]In 6.2 Protein generation ‚Ä£ 6 Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nWe find that Multiflow‚Äôs co-design capabilities surpass previous co-design methods, none of which use a joint multimodal generation process.\nMultiflow generates sequences that are consistent with the generated structure at a comparable level to PMPNN which we see through comparing the Co-design 1 and PMPNN 1 designability.\nOn pure structure generation, we find that Multiflow outperforms all baselines in terms of structure quality measured by PMPNN 8 designability.\nMultiflow also attains comparable diversity and novelty to previous approaches.\nWe ablate our use of distillation and find that distillation results in overall designability improvements while also improving diversity.\nFinally, we train our exact same architecture except only modeling the structure on the distilled dataset using the loss presented in Yim et al. ( [2023a])).\nWe find our joint structure-sequence model achieves the same structural quality as the structure-only version, however, additionally including the sequence in our generative process induces extra structural diversity.\n\nCrossmodal modulation.\nWe next investigate how modulating the CTMC stochasticity of the sequence affects the structural properties of sampled proteins.\n[Fig.3]In 6.2.1 Co-design results. ‚Ä£ 6.2 Protein generation ‚Ä£ 6 Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") shows that varying the stochasticity level Œ∑ùúÇ\\\\eta results in a change of the secondary structure composition (Kabsch & Sander, [1983])) of the sampled proteins.\nThis is an example of the flexibility our multimodal framework provides to tune properties between data modalities at inference time.\n\n![Refer to caption]Figure 3: Multiflow structural properties. Average proportion of residues that are part of an alpha helix or beta strand versus the CTMC stochasticity level.\nProportions of helices or strands can be desirable based on the family of proteins to generate (Vinothkumar & Henderson, [2010])).\nError bars show the standard error.\n\n#### 6.2.2 Forward and Inverse Folding\n\nMultiflow can achieve state-of-the-art codesign performance, but can accomplish more tasks as described in [Fig.1]In 1 Introduction ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\") B and [Table.4]In 6.2.2 Forward and Inverse Folding ‚Ä£ 6.2 Protein generation ‚Ä£ 6 Experiments ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nExpanding Multiflow to achieve competitive performance on all tasks is a future work.\nHere, we take the same model weights for co-design and evaluate forward and inverse folding _without additional training_.\nWe compare performance to ESMFold and ProteinPMNN which are specialized models for forward and inverse folding.\nWe curated a clustered test-out set of 449 monomeric proteins with length <400absent400<400 from the PDB using a date split of our training set.\nDetails of forward/inverse folding and these experiments can be found in [App.J]Appendix J Protein Generation Experiment Details ‚Ä£ Generative Flows on Discrete State-Spaces: Enabling Multimodal Flows with Applications to Protein Co-Design\").\nWe find Multiflow can achieve very close performance with ProteinMPNN while it achieves poor results compared to ESMFold.\nThis highlights a limitation that Multiflow cannot perform competitively at every generation task, but leaves exciting future work for a potential general-purpose generative model.\n\nTable 4: Forward and inverse folding: mean ¬±plus-or-minus\\\\pm std.\n\n|     |     |     |\n| --- | --- | --- |\n|  | Inverse folding | Forward folding |\n| Method | scRMSD (‚Üì‚Üì\\\\downarrow) | RMSD (‚Üì‚Üì\\\\downarrow) |\n| ProteinMPNN | 1.9 ¬±plus-or-minus\\\\pm 2.7 | N/A |\n| ESMFold | N/A | 2.7 ¬±plus-or-minus\\\\pm 3.9 |\n| Multiflow | 2.2 ¬±plus-or-minus\\\\pm 2.6 | 15.3 ¬±plus-or-minus\\\\pm 4.5 |",
            "citations": null
          },
          "7 Discussion": {
            "content": "We presented Discrete Flow Models (DFMs), a flow based generative model framework by making analogy to continuous state space flow models.\nOur formulation is simple to implement, removes limitations in defining corruption processes, and provides more sampling flexibility for improved performance compared to previous discrete diffusion models.\nOur framework enables easy application to multimodal generative problems which we apply to protein co-design.\nThe combination of a DFM and FrameFlow enables state-of-the-art co-design with Multiflow.\nFuture work includes to develop more domain specific models with DFMs and improve Multiflow‚Äôs performance on all protein generation tasks including sidechain modeling.",
            "citations": null
          },
          "8 Acknowledgments": {
            "content": "The authors would like to thank Ricardo Baptista, Mathieu Le Provost, George Deligiannidis, Joe Benton, Bowen Jing, Hannes St√§rk, Emile Mathieu, Luhuan Wu, Timur Garipov, Rachel Wu, Mingyu Choi, Sidney Lisanza, and Woody Ahern for helpful discussions.\n\nAC acknowledges support from the EPSRC CDT in Modern Statistics and Statistical Machine Learning (EP/S023151/1)\nJY was supported in part by an NSF-GRFP.\nJY, RB, and TJ acknowledge support from NSF Expeditions grant (award 1918839: Collaborative Research: Understanding the World Through Code), Machine Learning for Pharmaceutical Discovery and Synthesis (MLPDS) consortium, the Abdul Latif Jameel\nClinic for Machine Learning in Health, the DTRA Discovery of Medical Countermeasures Against New and Emerging (DOMANE) threats program, the DARPA Accelerated Molecular Discovery program and the Sanofi Computational Antibody Design grant. IF is supported by the Office of Naval Research, the Howard Hughes Medical Institute (HHMI), and NIH (NIMH-MH129046).\nThe authors would like to acknowledge the use of the University of Oxford Advanced Research Computing (ARC) facility in carrying out this work. [http://dx.doi.org/10.5281/zenodo.22558].",
            "citations": null
          },
          "9 Impact statement": {
            "content": "In this paper we work to advance general purpose generative modeling techniques, specifically those used for modeling discrete and multimodal data. We apply these techniques to the task of protein generation. Improving protein modeling capabilities can have wide ranging societal impacts and care must be taken to ensure these impacts are positive. For example, improved modeling capabilities can help design better enzymes and drug candidates that can then go on to improve the lives of many people. Conversely, these general purpose techniques could also be misused to design toxic substances. To mitigate these risks, we do not present any specific methods to apply Multiflow to tasks that could be easily adjusted to the design of harmful substances without expert knowledge.",
            "citations": null
          }
        },
        "abstract": "Combining discrete and continuous data is an important capability for\ngenerative models. We present Discrete Flow Models (DFMs), a new flow-based\nmodel of discrete data that provides the missing link in enabling flow-based\ngenerative models to be applied to multimodal continuous and discrete data\nproblems. Our key insight is that the discrete equivalent of continuous space\nflow matching can be realized using Continuous Time Markov Chains. DFMs benefit\nfrom a simple derivation that includes discrete diffusion models as a specific\ninstance while allowing improved performance over existing diffusion-based\napproaches. We utilize our DFMs method to build a multimodal flow-based\nmodeling framework. We apply this capability to the task of protein co-design,\nwherein we learn a model for jointly generating protein structure and sequence.\nOur approach achieves state-of-the-art co-design performance while allowing the\nsame multimodal model to be used for flexible generation of the sequence or\nstructure."
      },
      "bib.bib7": {
        "id": "bib.bib7",
        "citation": "Chelba et al. (2014)",
        "authors": "",
        "year": "",
        "title": "One billion word benchmark for measuring progress in statistical language modeling, 2014.",
        "venue": "",
        "pages": "",
        "url": "https://arxiv.org/abs/1312.3005",
        "arxiv_id": "1312.3005",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Statistical language modeling has been applied to a wide range of applications and domains with great success.\nTo name a few, automatic speech recognition, machine translation, spelling correction,\ntouch-screen ‚Äúsoft‚Äù keyboards and many natural language processing applications depend on the quality of\nlanguage models (LMs).\n\nThe performance of LMs is determined mostly by several factors: the amount of\ntraining data, quality and match of the training data to the test data, and choice of modeling technique for estimation from the data. It is widely accepted that the amount of data, and the ability of a given estimation algorithm to accomodate large amounts of training are very important in providing a solution that competes successfully with the entrenched n-gram LMs. At the same time, scaling up a novel algorithm to a large amount of data involves a large amount of work, and provides a significant barrier to entry for new modeling techniques. By choosing one billion words as the amount of training data we hope to strike a balance between the relevance of the benchmark in the world of abundant data, and the ease with which any researcher can evaluate a given modeling approach. This follows the work of Goodman \\[ [Goodman, 2001a])\\], who explored performance of various language modeling techniques when applied to large data sets. One of the key contributions of our work is that the experiments presented in this paper can be reproduced by virtually anybody with an interest in LM, as we use a data set that is freely available on the web.\n\nAnother contribution is that we provide strong baseline results with the currently very popular\nneural network LM \\[ [Bengio et al., 2003])\\]. This should allow researchers who work\non competitive techniques to quickly compare their results to the current state of the art.\n\nThe paper is organized as follows: Section 2 describes how the training data was obtained; Section 3 provides a short overview of the language modeling techniques evaluated; finally, Section 4 presents results obtained and Section 5 concludes the paper.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| Model | Num. Params | Training Time | Perplexity |\n|  | \\[billions\\] | \\[hours\\] | \\[CPUs\\] |  |\n| Interpolated KN 5-gram, 1.1B n-grams (KN) | 1.76 | 3 | 100 | 67.6 |\n| Katz 5-gram, 1.1B n-grams | 1.74 | 2 | 100 | 79.9 |\n| Stupid Backoff 5-gram (SBO) | 1.13 | 0.4 | 200 | 87.9 |\n| Interpolated KN 5-gram, 15M n-grams | 0.03 | 3 | 100 | 243.2 |\n| Katz 5-gram, 15M n-grams | 0.03 | 2 | 100 | 127.5 |\n| Binary MaxEnt 5-gram (n-gram features) | 1.13 | 1 | 5000 | 115.4 |\n| Binary MaxEnt 5-gram (n-gram + skip-1 features) | 1.8 | 1.25 | 5000 | 107.1 |\n| Hierarchical Softmax MaxEnt 4-gram (HME) | 6 | 3 | 1 | 101.3 |\n| Recurrent NN-256 + MaxEnt 9-gram | 20 | 60 | 24 | 58.3 |\n| Recurrent NN-512 + MaxEnt 9-gram | 20 | 120 | 24 | 54.5 |\n| Recurrent NN-1024 + MaxEnt 9-gram | 20 | 240 | 24 | 51.3 |\n\nTable 1: Results on the 1B Word Benchmark test set with various types of language models.",
            "citations": null
          },
          "2 Description of the Benchmark Data": {
            "content": "In the following experiments, we used text data obtained from the WMT11 website111 [http://statmt.org/wmt11/training-monolingual.tgz]. The data preparation process was performed as follows:\n\n- ‚Ä¢\n\n\nAll training monolingual/English corpora were selected\n\n- ‚Ä¢\n\n\nNormalization and tokenization was performed using scripts distributed from the WMT11 site, slightly augmented to normalize various UTF-8 variants for common punctuation, e.g. `‚Äô`\n\n- ‚Ä¢\n\n\nDuplicate sentences were removed, dropping the number of words from about 2.9 billion to about 0.8 billion (829250940, more exactly, counting sentence boundary markers `<S>`, `<\\S>`)\n\n- ‚Ä¢\n\n\nVocabulary (793471 words including sentence boundary markers `<S>`, `<\\S>`) was constructed by discarding all words with count below 3\n\n- ‚Ä¢\n\n\nWords outside of the vocabulary were mapped to `<UNK>` token, also part of the vocabulary\n\n- ‚Ä¢\n\n\nSentence order was randomized, and the data was split into 100 disjoint partitions\n\n- ‚Ä¢\n\n\nOne such partition (1%) of the data was chosen as the held-out set\n\n- ‚Ä¢\n\n\nThe held-out set was then randomly shuffled and split again into 50 disjoint partitions to be used as development/test data\n\n- ‚Ä¢\n\n\nOne such resulting partition (2%, amounting to 159658 words without counting the sentence beginning marker `<S>` which is never predicted by the language model) of the held-out data were used as test data in our experiments; the remaining partitions are reserved for future experiments\n\n- ‚Ä¢\n\n\nThe out-of-vocabulary (OoV) rate on the test set was 0.28%.\n\n\nThe benchmark is available as a code.google.com project:\n[https://code.google.com/p/1-billion-word-language-modeling-benchmark/].\nBesides the scripts needed to rebuild the training/held-out data, it also makes\navailable [log-probability values] for each word in each of ten held-out data sets, for each of the baseline n-gram models.\n\nBecause the original data had already randomized sentence order, the benchmark is not\nuseful for experiments with models that capture long context dependencies across\nsentence boundaries.",
            "citations": null
          },
          "3 Baseline Language Models": {
            "content": "As baselines we chose to use \\[ [Katz, 1995])\\], and Interpolated \\[ [Kneser and Ney, 1995])\\] (KN) 5-gram LMs, as they are the most prevalent. Since in practice these models are pruned, often quite aggressivley, we also illustrate the negative effect of \\[ [Stolcke, 1998])\\] entropy pruning on both models, similar to \\[ [Chelba et al., 2010])\\]. In particular KN smoothing degrades much more rapidly than Katz, calling for a discerning choice in a given application.",
            "citations": null
          },
          "4 Advanced Language Modeling Techniques": {
            "content": "The number of advanced techniques for statistical language modeling is very large. It is out of scope of this paper to provide their detailed description, but we mention some of the most popular ones:\n\n- ‚Ä¢\n\n\nN-grams with Modified Kneser-Ney smoothing \\[ [Chen and Goodman, 1996])\\]\n\n- ‚Ä¢\n\n\nCache \\[ [Jelinek et al., 1991])\\]\n\n- ‚Ä¢\n\n\nClass-based \\[ [Brown et al., 1992])\\]\n\n- ‚Ä¢\n\n\nMaximum entropy \\[ [Rosenfeld, 1994])\\]\n\n- ‚Ä¢\n\n\nStructured \\[ [Chelba and Jelinek, 2000])\\]\n\n- ‚Ä¢\n\n\nNeural net based \\[ [Bengio et al., 2003])\\]\n\n- ‚Ä¢\n\n\nDiscriminative \\[ [Roark et al., 2004])\\]\n\n- ‚Ä¢\n\n\nRandom forest \\[ [Xu, 2005])\\]\n\n- ‚Ä¢\n\n\nBayesian \\[ [Teh, 2006])\\]\n\n\nBelow, we provide a short description of models that we used in our comparison using the benchmark data.\n\n### 4.1 Normalized Stupid Backoff\n\nThe Stupid Backoff LM was proposed in \\[ [Brants et al., 2007])\\] as a simplified version of backoff LM,\nsuited to client-server architectures in a distributed computing environment.It does not apply any discounting to relative frequencies, and it uses a single backoff weight instead of context-dependent backoff weights. As a result, the Stupid Backoff model does not generate normalized probabilities.\nFor the purpose of computing perplexity as reported in Table [1]Table 1 ‚Ä£ 1 Introduction ‚Ä£ One Billion Word Benchmark for Measuring Progress in Statistical Language Modeling\"), values output\nby the model were normalized over the entire LM vocabulary.\n\n### 4.2 Binary Maximum Entropy Language Model\n\nThe Binary MaxEnt model was proposed in \\[ [Xu et al., 2011])\\] and aims to avoid the expensive probability\nnormalization during training by using independent binary predictors. Each predictor\nis trained using all the positive examples, but the negative examples are dramatically down-sampled.\nThis type of model is attractive for parallel training, thus we explored its performance further.\n\nWe trained two models with a sampling rate of 0.001 for negative examples, one uses n-gram features only\nand the other uses n-gram and skip-1 n-gram features. We separated the phases of generating negative\nexamples and tuning model parameters such that the output of the first phase can be shared by two\nmodels. The generation of the negative examples took 7.25 hours using\n500 machines, while tuning the parameters using 5000 machines took 50 minutes, and 70 minutes for\nthe two models, respectively.\n\n| Model | Perplexity |\n| --- | --- |\n| Interpolated KN 5-gram, 1.1B n-grams | 67.6 |\n| All models | 43.8 |\n\nTable 2: Model combination on the 1B Word Benchmark test set. The weights were tuned to minimize perplexity on held-out data. The optimal interpolation weights for the KN, rnn1024, rnn512, rnn256, SBO, HME were, respectively: 0.06, 0.61, 0.13, 0.00, 0.20, 0.00.\n\n### 4.3 Maximum Entropy Language Model with Hierarchical Softmax\n\nAnother option to reduce training complexity of the MaxEnt models is to use a hierarchical\nsoftmax \\[ [Goodman, 2001b]), [Morin and Bengio, 2005])\\].\nThe idea is to estimate probabilities of groups of words, like in a class based model ‚Äì only the\nclasses that contain the positive examples need to be evaluated. In our case, we explored a\nbinary Huffman tree representation of the vocabulary, such that evaluation of\nfrequent words takes less time. The idea of using frequencies of words\nfor a hierarchical softmax was presented previously in \\[ [Mikolov et al., 2011a])\\].\n\n### 4.4 Recurrent Neural Network Language Model\n\nThe Recurrent Neural Network (RNN) based LM have recently achieved outstanding\nperformance on a number of tasks \\[ [Mikolov, 2012])\\]. It was shown that RNN LM significantly outperforms\nmany other language modeling techniques on the Penn Treebank data set \\[ [Mikolov et al., 2011b])\\].\nIt was also shown that RNN models scale very well to data sets with hundreds of millions\nof words \\[ [Mikolov et al., 2011c])\\], although the reported training times for the largest models\nwere in the order of weeks.\n\nWe cut down training times by a factor of 20-50 for large problems using a\nnumber of techniques, which allow RNN training in typically 1-10 days with\nbillions of words, >1‚ÄãMabsent1ùëÄ>1M vocabularies and up to 20B parameters on a single\nstandard machine without GPUs.\n\nThese techniques were in order of importance:\na) Parallelization of training across available CPU threads,\nb) Making use of SIMD instructions where possible,\nc) Reducing number of output parameters by 90%,\nd) Running a Maximum Entropy model in parallel to the RNN.\nBecause of space limitations we cannot describe the exact details of the speed-ups here ‚Äì they will be reported in an upcoming paper.\n\nWe trained several models with varying number of neurons (Table  [1]Table 1 ‚Ä£ 1 Introduction ‚Ä£ One Billion Word Benchmark for Measuring Progress in Statistical Language Modeling\")) using regular SGD with a learning rate of 0.05 to 0.001 using 10 iterations over the data. The MaxEnt models running in parallel to the RNN capture a history of 9 previous words, and the models use as additional features the previous 15 words independently of order. While training times approach 2 weeks for the most complex model, slightly worse models can be trained in a few days. Note that we didn‚Äôt optimize for model size nor training speed, only test performance.",
            "citations": null
          },
          "5 Results": {
            "content": "### 5.1 Performance of Individual Models\n\nResults achieved on the benchmark data with various types of LM are reported\nin Table [1]Table 1 ‚Ä£ 1 Introduction ‚Ä£ One Billion Word Benchmark for Measuring Progress in Statistical Language Modeling\").\nWe focused on minimizing the perplexity when choosing\nhyper-parameters, however we also report the time required to train the models.\nTraining times are not necessarily comparable as they depend on the underlying implementation. Mapreduces can potentially process larger data sets than single-machine implementations, but come with a large overhead of communication and file I/O. Discussing details of the implementations is outside the scope as this paper.\n\n### 5.2 Model Combination\n\nThe best perplexity results were achieved by linearly interpolating together probabilities from\nall models. However, only some models had significant weight in the combination; the weights\nwere tuned on the held-out data. As can be seen in Table [2]Table 2 ‚Ä£ 4.2 Binary Maximum Entropy Language Model ‚Ä£ 4 Advanced Language Modeling Techniques ‚Ä£ One Billion Word Benchmark for Measuring Progress in Statistical Language Modeling\"), the best\nperplexity is about 35% lower than the baseline - the modified Kneser-Ney smoothed 5-gram\nmodel with no count cutoffs. This corresponds to about 10% reduction of cross-entropy (bits).\n\nSomewhat surprisingly the SBO model receives a relatively high weight in the linear combination of\nmodels, despite its poor performance in perplexity, whereas the KN baseline receives a fairly small\nweight relative to the other models in the combination.",
            "citations": null
          },
          "6 Conclusion": {
            "content": "We introduced a new data set for measuring research progress in statistical language modeling.\nThe benchmark data set is based on resources that are freely available on the web, thus fair comparison\nof various techniques is easily possible. The importance of such effort is unquestionable: it\nhas been seen many times in the history of research that significant progress can be achieved when\nvarious approaches are measurable, reproducible, and the barrier to entry is low.\n\nThe choice of approximately one billion words might seem somewhat restrictive. Indeed, it can be\nhardly expected that new techniques will be immediately competitive on a large data set.\nComputationally expensive techniques can still be compared using for example\njust the first or the first 10 partitions of this new dataset, corresponding to approx. 10 million and 100 million words. However, to achieve impactful results\nin domains such as speech recognition and machine translation, the language modeling\ntechniques need to be scaled up to large data sets.\n\nAnother contribution of this paper is the comparison of a few novel modeling approaches\nwhen trained on a large data set. As far as we know, we were able to train the largest\nrecurrent neural network language model ever reported. The performance gain is very promising;\nthe perplexity reduction of 35% is large enough to let us hope for significant improvements in\nvarious applications.\n\nIn the future, we would like to encourage other researchers to participate in our efforts\nto make language modeling research more transparent. This would greatly help to transfer\nthe latest discoveries into real-world applications. In the spirit of a benchmark our first\ngoal was to achieve the best possible test perplexities regardless of model sizes or training\ntime. However, this was a relatively limited collaborative effort, and some well known techniques\nare still missing. We invite other researchers to complete the picture by evaluating new,\nand well-known techniques on this corpus. Ideally the benchmark would also contain ASR or SMT\nlattices/N-best lists, such that one can evaluate application specific performance as well.",
            "citations": null
          }
        },
        "abstract": "We propose a new benchmark corpus to be used for measuring progress in\nstatistical language modeling. With almost one billion words of training data,\nwe hope this benchmark will be useful to quickly evaluate novel language\nmodeling techniques, and to compare their contribution when combined with other\nadvanced techniques. We show performance of several well-known types of\nlanguage models, with the best results achieved with a recurrent neural network\nbased language model. The baseline unpruned Kneser-Ney 5-gram model achieves\nperplexity 67.6; a combination of techniques leads to 35% reduction in\nperplexity, or 10% reduction in cross-entropy (bits), over that baseline.\n  The benchmark is available as a code.google.com project; besides the scripts\nneeded to rebuild the training/held-out data, it also makes available\nlog-probability values for each word in each of ten held-out data sets, for\neach of the baseline n-gram models."
      },
      "bib.bib8": {
        "id": "bib.bib8",
        "citation": "Chrabaszcz et al. (2017)",
        "authors": "",
        "year": "",
        "title": "A downsampled variant of imagenet as an alternative to the cifar datasets.",
        "venue": "arXiv preprint arXiv:1707.08819",
        "pages": "",
        "url": "",
        "arxiv_id": "1707.08819",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Deep learning research has been substantially facilitated by the availability of realistic and accessible benchmark datasets, such as CIFAR-10 and CIFAR-100 (Krizhevsky and Hinton, [2009])) (and MNIST (LeCun et al., [1998])) in the 1990s). With the progress of machine learning, simple datasets lose some of their relevance, and more complex datasets/tasks become more important. While good results can be achieved on more complex datasets, such as ImageNet (Krizhevsky et al., [2012]); Russakovsky et al., [2015])), this incurs a large computational burden, making it intractable to achieve state-of-the-art performance without massive compute resources\n(training a strong ImageNet model typically requires several GPU months).\n\nDue to this computational expense of running experiments on the original ImageNet dataset we propose to explore cheaper alternatives that preserve the dataset‚Äôs complexity.\nIn order to check the scalability of new methods, neural architectures and hyperparameters associated with them, one might be interested in a downscaled version of ImageNet which allows for cheaper experimentation. Moreover, a lower resolution of the images would make the classification task much more difficult and would thus postpone the saturation of benchmarking results currently observed on CIFAR-10, e.g., 3% error obtained by  Gastaldi ( [2017])) compared to roughly 6% obtained by a trained human (Karpathy, [2011])).\n\nTo address this issue, we provide downsampled variants of the original ImageNet dataset and analyze results on them w.r.t. different hyperparameter settings and network sizes. We obtain surprisingly strong classification results on our downsampled variants and find qualitative results to be very similar across downsampling sizes. This suggests that these downsampled datasets are useful for facilitating cheap experimentation.\n\nThe basic contributions of this report are as follows:\n\n- ‚Ä¢\n\n\nWe make available downsampled versions of ImageNet (64√ó64646464\\\\times 64, 32√ó32323232\\\\times 32, and 16√ó16161616\\\\times 16 pixels) to facilitate fast experimentation with different network architectures, training algorithms, and hyperparameters.\n\n- ‚Ä¢\n\n\nWe show that different downsampling techniques yield similar results, except for a nearest neighbor approach, which performed worse in all our experiments.\n\n- ‚Ä¢\n\n\nUsing Wide ResNets (Zagoruyko and Komodakis, [2016])), we obtain surprisingly good performance, matching the baseline by the pioneering AlexNet (Krizhevsky et al., [2012])) (18.2% top-5 error) while using ImageNet32x32 (whose images have roughly 50√ó\\\\times less pixels per image than the original ones).\n\n- ‚Ä¢\n\n\nWe show that the range of optimal learning rates does not change much across ImageNet16x16, ImageNet32x32, and ImageNet64x64, as well as across different network widths. This could be exploited by multi-fidelity methods for architecture and hyperparameter search (Li et al., [2016]); Klein et al., [2016])).",
            "citations": null
          },
          "2 Downsampling ImageNet": {
            "content": "The original ImageNet dataset consists of images released as a part of the ILSVRC-2012 classification dataset (Krizhevsky et al., [2012]); Russakovsky et al., [2015])). Each image belongs to one of 1000 object classes, with the number of training images per class varying from 732 to 1300; there are 50 validation images per class. The size of the original images varies; therefore, a preprocessing step is usually applied to scale and crop images to the size of 224 √ó\\\\times 224 pixels.\n\nWe are aware of two datasets that contain low resolution images derived from the ImageNet dataset:\n\n- ‚Ä¢\n\n\nDownsampled ImageNet(Oord et al., [2016])), like our datasets, contains all images in ImageNet, but since it was constructed for unsupervised learning, it does not provide the actual image labels and can therefore not be used for supervised learning.\n\n- ‚Ä¢\n\n\nTinyImageNet (available at [https://tiny-imagenet.herokuapp.com/])\ncontains a subset of 200 classes with 500 images per class.\n\n\nMishkin et al. ( [2016])) suggested to use 128x128 pixels ImageNet images to evaluate various deep learning techniques, but their dataset is not available.\n\nWe downsample / resize the original images to smaller images of 32x32 pixels to form ImageNet32x32, to images of 64x64 pixels to form ImageNet64x64 and to images of 16x16 pixels to form ImageNet16x16. In contrast to TinyImageNet, we do not reduce the number of classes and number of images. All images are shuffled and then divided into 10 different files so that each file is expected to have images from all classes. The validation data is stored in a separate file, both the training and validation data points are labeled (e.g., indexed starting from 1) according to the mapping file of the ImageNet devkit. Each file contains images, labels and the mean image computed over the whole training set. We keep the same format of files as the one that is commonly used for the CIFAR datasets. ImageNet16x16, ImageNet32x32 and ImageNet64x64 take 1 GB, 4 GB and 16 GB of disk space, respectively.\n\n![Refer to caption]Figure 1: The original images (first column) and images obtained by 6 downsampling techniques (left to right): bicubic, bilinear, box, hamming, lanczos, nearest. Our resizing procedure changes the aspect ratio of images.\n\nWe consider 6 different downsampling techniques available in the Pillow library111Pillow version 4.1 available at [https://python-pillow.org]: lanczos, nearest, bilinear, bicubic, hamming, box (see Figure [1]Figure 1 ‚Ä£ 2 Downsampling ImageNet ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\")). In order to check the quality of the downsampled images we use them to train Wide Residual Networks (WRNs) by Zagoruyko and Komodakis ( [2016])), expecting that better validation errors will tend to be achieved with downsampling techniques that lose less information.",
            "citations": null
          },
          "3 Experimental setup": {
            "content": "We train Wide Residual Networks WRN-N-k by Zagoruyko and Komodakis ( [2016])), where NùëÅN is the number of layers and kùëòk is a multiplicative factor for the number of filters, with k=1ùëò1k=1 corresponding to 16 filters in the first residual block; increasing kùëòk makes the network wider. We use Stochastic Gradient Descent with momentum factor 0.9, drop the learning rate by a factor of 5.0 every 10 epochs, and train up to a total budget of 40 epochs. Throughout, we show validation error rates obtained after training for 31 epochs (right after the last drop of the learning rate).\n\nOur experiments on ImageNet32x32 employ the original WRNs designed for the CIFAR datasets with 32 √ó\\\\times 32 pixels per image. To adapt WRNs for images with 64 √ó\\\\times 64 pixels per image as used in ImageNet64x64, we add an additional stack of residual blocks to reduce the spatial resolution of the last feature map from 16 √ó\\\\times 16 to 8 √ó\\\\times 8 and thus double the number of features. Analogously, for ImageNet16x16, we remove the last stack of residual blocks. For data augmentation, we flip images horizontally and concatenate them to the original images, effectively doubling the number of images per epoch. We also use random image shifts (up to 4 pixels horizontally and vertically).",
            "citations": null
          },
          "4 Results": {
            "content": "![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 2: The mean Top-5 errors obtained in 3 runs by WRN-28-2 on ImageNet32x32 for different learning rates (indicated at the top of each subfigure as LR) and downsampling algorithms.\n\nDoes the downsampling technique matter?\nWe evaluated the six downsampling techniques described in Section [2]Downsampling ImageNet ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") using a small WRN-28-2 network and various initial learning rates L‚ÄãR‚àà{0.001,0.0025,0.005,0.01,0.025,0.05}ùêøùëÖ0.0010.00250.0050.010.0250.05LR\\\\in\\\\{0.001,0.0025,0.005,0.01,0.025,0.05\\\\}. The results in Figure [2]Figure 2 ‚Ä£ 4 Results ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") show that all downsampling techniques performed very similarly, except for the nearest neighbour technique which yielded the worst results for all learning rates. This observation is in line with Figure [1]Figure 1 ‚Ä£ 2 Downsampling ImageNet ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") and also holds for ImageNet16x16 and ImageNet64x64 (results not shown for brevity). For all remaining experiments in this paper, we used the box method.\n\nDo conclusions drawn for cheap evaluations carry over to expensive ones?\nNext, we studied to which extent conclusions drawn for small networks and downsampled images carry over to larger networks and higher resolution images. This in turn determines the usefulness of these techniques for speeding up the experimental loop of architecture design and hyperparameter optimization. For this, we performed three experiments:\n\n- ‚Ä¢\n\n\nWe studied how the results scale with the network size, more specifically, network width, defined by kùëòk. Table [1]Table 1 ‚Ä£ 1st item ‚Ä£ 4 Results ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") shows that larger kùëòk yielded better results independently of the downsampling size.\nPerformance on our downsampled datasets was surprisingly strong; for example, on ImageNet32x32, using k=10ùëò10k=10 achieved 40.96% Top-1 validation error and 18.87% Top-5 validation error. Interestingly, this matches the original results by AlexNets (Krizhevsky et al., [2012])) (40.7% and 18.2%, respectively) on full-sized ImageNet (which has roughly 50 times more pixels per image). Clearly, greater image resolution yielded better results (e.g., 12.64% top-5 performance for ImageNet64x64).\n\n\n\n\n\n|  | width kùëòk | \\# params | Top-1 error | Top-5 error | Time \\[days\\] |\n| WRN-20-k on ImageNet16x16 | 1 | 0.12M | 85,18% | 66,12% | 0.2 |\n| WRN-20-k on ImageNet16x16 | 2 | 0.42M | 77,00% | 54,22% | 0.4 |\n| WRN-20-k on ImageNet16x16 | 5 | 2.3M | 66,60% | 41,59% | 1.0 |\n| WRN-20-k on ImageNet16x16 | 10 | 8.9M | 59.94% | 35.10% | 2.7 |\n| WRN-28-k on ImageNet32x32 | 0.5 | 0.13M | 79,83% | 57,64% | 0.5 |\n| WRN-28-k on ImageNet32x32 | 1 | 0.44M | 67,97% | 42,49% | 0.8 |\n| WRN-28-k on ImageNet32x32 | 2 | 1.6M | 56,92% | 30,92% | 1.5 |\n| WRN-28-k on ImageNet32x32 | 5 | 9.5M | 45,36% | 21,36% | 4.9 |\n| WRN-28-k on ImageNet32x32 | 10 | 37.1M | 40,96% | 18,87% | 13.8 |\n| WRN-36-k on ImageNet64x64 | 0.5 | 0.44M | 62,35% | 36,06% | 2.1 |\n| WRN-36-k on ImageNet64x64 | 1 | 1.6M | 49,79% | 24,17% | 3.4 |\n| WRN-36-k on ImageNet64x64 | 2 | 6.2M | 39,55% | 16,57% | 6.4 |\n| WRN-36-k on ImageNet64x64 | 5 | 37.6M | 32,34% | 12,64% | 22 |\n\nTable 1: The mean Top-1 and Top-5 test error rates obtained in 3 runs by WRNs measured right after the last drop of the learning rate, i.e., after epoch 31 (for bigger models training for more than one epoch after the last drop can lead to overfitting). All results are based on a learning rate of 0.01. The timing results are reported for training on a single Titan X GPU.\n- ‚Ä¢\n\n\nWe studied how optimal learning rates changed across different combinations of downsampling sizes and network widths. Figure [3]Figure 3 ‚Ä£ 2nd item ‚Ä£ 4 Results ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") shows that the region of optimal learning rates remained similar across all our experimental setups, including networks whose space and time complexity differed by up to a factor of 100.\nAdditionally, Figure [4]Figure 4 ‚Ä£ 2nd item ‚Ä£ 4 Results ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") compares performance as a function of both learning rate and width multiplier kùëòk for downsampling sizes of 32x32 and 16x16, showing qualitatively very similar results in both cases, including the interaction effect that larger values of kùëòk favor somewhat larger learning rates than smaller kùëòk.\nThis suggests that small networks and\ndownsampled images may indeed facilitate faster experimentation.\n\n\n\n\n\n\n![Refer to caption]\n\n\n\n![Refer to caption]\n\n\n\nFigure 3: The mean Top-1 (Left) and Top-5 (Right) errors obtained in 3 runs by WRN-N-kùëòk after 31 epochs with different settings of the initial learning rates and different sizes of the downsampled images (ImageNet16x16, ImageNet32x32 and ImageNet64x64). The results for ImageNet64x64 are shown for different kùëòk but a single value of the initial learning rate LR=0.01 which seems reasonably good across different settings.\n\n\n\n![Refer to caption]\n\n\n\n![Refer to caption]\n\n\n\nFigure 4: The mean Top-5 errors for 32x32 images (left) and 16x16 images (right), as a function of network width kùëòk and learning rate.\n\n\n\n![Refer to caption]\n\n\n\n\n\n\n\n![Refer to caption]\n\n\n\nFigure 5: The mean Top-5 test error rates according to Table [1]Table 1 ‚Ä£ 1st item ‚Ä£ 4 Results ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") for different models (with different number of parameters) vs. training time on a single Titan X GPU. The bottom figure replicates the top one, but also shows semi-transparent curves in the background to represent convergence curves.\n- ‚Ä¢\n\n\nWe also investigated the tradeoffs of performance vs. training time resulting from different downsampling and network sizes. Figure [5]Figure 5 ‚Ä£ 2nd item ‚Ä£ 4 Results ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") and Table [1]Table 1 ‚Ä£ 1st item ‚Ä£ 4 Results ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") show that both mechanisms for reducing the computational cost should be considered simultaneously to achieve optimal anytime performance.\nAn additional mechanism could be to perform warm restarts (Loshchilov and Hutter, [2017])), which was shown to substantially improve anytime performance over reductions of the learning rate at regular intervals. Since the relative ranking of learning rates was consistent across different downsampling and network sizes, we also envision that architecture and hyperparameter search methods could exploit cheap proxies of computationally more expensive setups based on varying these degrees of freedom. Possible methods for exploiting these include Li et al. ( [2016])); Klein et al. ( [2016])).",
            "citations": null
          },
          "5 Discussion and Conclusion": {
            "content": "Our proposed downsampled versions of the original ImageNet dataset might represent a viable alternative to the CIFAR datasets while dealing with more complex data and classes. Quite surprisingly, even by greatly reducing the resolution of images to 32 √ó\\\\times 32 pixels, one can predict image labels quite well (see also Figure [6]Figure 6 ‚Ä£ 6 Acknowledgement ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\") and Figure [7]Figure 7 ‚Ä£ A Downsampled Variant of ImageNet as an Alternative to the CIFAR datasets\")).\n\nClassification of low resolution images might also be of interest when (i) data storage is important (the original ImageNet dataset is 145GB), (ii) the input images are corrupted by noise, or (iii) a small subpart of a high resolution image must be classified.\n\nWe hope that the provided datasets will fill the gap between the CIFAR datasets and the full ImageNet dataset, representing a good benchmark for experimental studies, such as algorithm design, neural network architecture search and hyperparameter optimization. Our preliminary experiments support the hypothesis that findings obtained on smaller networks for lower resolution images may transfer to larger networks for higher resolution images, while being up to 100 times cheaper to obtain. This could be exploited by multi-fidelity methods for architecture and hyperparameter search (Li et al., [2016]); Klein et al., [2016])).",
            "citations": null
          },
          "6 Acknowledgement": {
            "content": "This work has partly been supported by the European Research Council (ERC) under the European Union‚Äôs Horizon 2020 research and innovation programme under grant no. 716721 and by the German Research Foundation (DFG), under the BrainLinksBrainTools Cluster of Excellence (grant number EXC 1086).\nThe authors acknowledge support by the High Performance and Cloud Computing Group at the Zentrum f√ºr Datenverarbeitung of the University of T√ºbingen, the state of Baden-W√ºrttemberg through bwHPC\nand the German Research Foundation (DFG) through grant no INST 37/935-1 FUGG.\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 6: Percentage of correct Top-1 (Left) and Top-5 (Right) predictions for different classes obtained by WRN-28-5 on ImageNet32x32. Classes are ordered by this value for better visualization.",
            "citations": null
          }
        },
        "abstract": "The original ImageNet dataset is a popular large-scale benchmark for training\nDeep Neural Networks. Since the cost of performing experiments (e.g, algorithm\ndesign, architecture search, and hyperparameter tuning) on the original dataset\nmight be prohibitive, we propose to consider a downsampled version of ImageNet.\nIn contrast to the CIFAR datasets and earlier downsampled versions of ImageNet,\nour proposed ImageNet32$\\times$32 (and its variants ImageNet64$\\times$64 and\nImageNet16$\\times$16) contains exactly the same number of classes and images as\nImageNet, with the only difference that the images are downsampled to\n32$\\times$32 pixels per image (64$\\times$64 and 16$\\times$16 pixels for the\nvariants, respectively). Experiments on these downsampled variants are\ndramatically faster than on the original ImageNet and the characteristics of\nthe downsampled datasets with respect to optimal hyperparameters appear to\nremain similar. The proposed datasets and scripts to reproduce our results are\navailable at http://image-net.org/download-images and\nhttps://github.com/PatrykChrabaszcz/Imagenet32_Scripts"
      },
      "bib.bib9": {
        "id": "bib.bib9",
        "citation": "Dai et al. (2023)",
        "authors": "",
        "year": "",
        "title": "Emu: Enhancing image generation models using photogenic needles in a haystack.",
        "venue": "arXiv preprint arXiv:2309.15807",
        "pages": "",
        "url": "",
        "arxiv_id": "2309.15807",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "![Refer to caption]Figure 2: Selected Examples. Selected images generated by our quality-tuned model, Emu.\n\nRecent advances in generative models have enabled them to generate various high-quality content, such as text \\[ [2]), [33])\\], image \\[ [25]), [21])\\], music \\[ [16])\\], video \\[ [32])\\], and even 3D scenes \\[ [22]), [19]), [34])\\], which has fundamentally revolutionized generative artificial intelligence (AI).\nIn this paper, we present a recipe we have found to be effective for training highly aesthetic text-to-image models. It involves two stages: a knowledge learning stage, where the goal is to acquire the ability to generate virtually anything from text, which typically involves pre-training on hundreds of millions of image-text pairs; and a quality learning stage, which is necessary to restrict the output to a high-quality and aesthetically pleasing domain. We refer to the process of fine-tuning for the purpose of improving quality and promoting aesthetic alignment as quality-tuning for short.\n\nOur key insight is that to effectively perform quality-tuning, a surprisingly small amount ‚Äì a couple of thousand ‚Äì exceptionally high-quality images and associated text is enough to make a significant impact on the aesthetics of the generated images without compromising the generality of the model in terms of visual concepts that can be generated.\nAlthough having more data while maintaining the same level of quality may be helpful, any attempts to prioritize quantity over quality may result in a compromise of the quality of generated images.\n\nThis is an interesting finding in the broader landscape of fine-tuning generative models. Quality-tuning for visual generative models can be thought of as analogous to instruction-tuning for large language models (LLMs) in terms of improving generation quality. First, before instruction-tuning, language models are more prone to generating low-quality text, which may be inconsistent in tone, overly verbose or concise, or simply unhelpful or even toxic \\[ [20]), [6]), [7]), [35]), [13])\\]; ChatGPT-level \\[ [2])\\] performance is achieved with effective instruction-tuning \\[ [20])\\]. Similarly, we find that quality-tuning significantly improves the generation quality of text-to-image models. Second, the recipe for effectively performing instruction-tuning and quality-tuning is similar: use high-quality data, even if the quantity has to be small to maintain quality. Llama2 \\[ [33])\\] has been fine-tuned on 272727K high-quality prompts, which can be considered a very small quantity compared to the billions or trillions of pre-training tokens.\nSimilarly, we find that strong text-to-image performance can be achieved by fine-tuning with even less data ‚Äì a few thousand carefully selected images. Lastly, the knowledge obtained from pre-training is mostly retained after both instruction-tuning and quality-tuning. Like instruction-tuned LLMs, quality-tuned text-to-image models retain their generality in terms of the visual concepts that can be generated. These post pre-training stages align the knowledge to downstream user value ‚Äì improving text quality and following instructions in the case of LLMs, and promoting aesthetic alignment in the case of text-to-image models.\n\nConcretely, we pre-train a latent diffusion model (LDM) on 1.11.11.1 billion image-text pairs and quality-tune the model on a few thousand hand-picked exceptionally high-quality images selected from a large corpus of images. By its nature, the selection criterion is subjective and culturally dependent. We follow some common principles in photography, including but not limited to composition, lighting, color, effective resolution, focus, and storytelling to guide the selection process.\nWith a few optimizations to the latent diffusion architecture, we start with a strong pre-trained model and dramatically improve the visual appeal of our generated images through quality-tuning. In fact, it significantly outperform a state-of-the-art publicly available model SDXLv1.0 \\[ [21])\\] on visual appeal.\nWe call our quality-tuned LDM Emu. We show example generations from Emu in Figure [1]Figure 1 ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") and Figure [2]Figure 2 ‚Ä£ 1 Introduction ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\").\n\nFurthermore, we show that quality-tuning is a generic approach that is also effective for pixel diffusion and masked generative transformer models.\n\nOur main contributions are:\n\n- ‚Ä¢\n\n\nWe build Emu, a quality-tuned latent diffusion model that significantly outperforms a publicly available state-of-the-art model SDXLv1.0 on visual appeal.\n\n- ‚Ä¢\n\n\nTo the best of our knowledge, this is the first work to emphasize the importance of a good fine-tuning recipe for aesthetic alignment of text-to-image models. We provide insights and recommendations for a key ingredient of this recipe ‚Äì supervised fine-tuning with a surprisingly small amount of exceptionally high-quality data can have a significant impact on the quality of the generated images. Image quality should always be prioritized over quantity.\n\n- ‚Ä¢\n\n\nWe show that quality-tuning is a generic approach that also works well for other popular model architectures besides LDM, including pixel diffusion and masked generative transformer models.",
            "citations": null
          },
          "2 Related Work": {
            "content": "#### Text-to-Image Models.\n\nGenerating an image from a textual description has been explored using various approaches. Diffusion-based methods learn a denoising process to gradually generate images from pure Gaussian noise \\[ [14])\\]. The denoising process can occur either in pixel space or latent space, resulting in pixel diffusion models \\[ [25]), [30]), [5])\\] or latent diffusion models \\[ [27]), [21])\\], which feature higher efficiency by reducing the size of spatial features. Generative transformer methods usually train autoregressive \\[ [26]), [37]), [11]), [10]), [4]), [38])\\] or non-autoregressive (masked) \\[ [9])\\] transformers in discrete token space to model the generation process. Generative adversarial network \\[ [31]), [17])\\] also show remarkable capability of generating realistic images. While these models exhibit unprecedented image generation ability, they do not always generate highly aesthetic images.\n\n#### Fine-Tuning Text-to-Image Models.\n\nGiven a pre-trained text-to-image model, different methods have been developed to enable specific tasks. A number of techniques have been developed to personalize or adapt text-to-image models to a new subject or style \\[ [28]), [12]), [15])\\]. ControlNet \\[ [39])\\] provides additional control to the generation process by additionally conditioning on pose, sketch, edges, depth, etc.\nInstructPix2Pix \\[ [8])\\] makes text-to-image models follow editing instructions by fine-tuning them on a set of generated image editing examples. To the best of our knowledge, this is the first work highlighting fine-tuning for generically promoting aesthetic alignment for a wide range of visual domains.\n\n#### Fine-Tuning Language Models.\n\nFine-tuning has become a critical step in building high-quality LLMs \\[ [33]), [20]), [1])\\]. It generically improves output quality while enabling instruction-following capabilities. Effective fine-tuning of LLMs can be achieved with a relatively small but high-quality fine-tuning dataset, e.g., using 272727K prompts in \\[ [33])\\].\nIn this work, we show that effective fine-tuning of text-to-image models can be also achieved with a small but high-quality fine-tuning dataset. This finding shows an interesting connection between fine-tuning vision and language models in generative AI.",
            "citations": null
          },
          "3 Approach": {
            "content": "As discussed earlier, our approach involves a knowledge learning stage followed by a quality-tuning stage. This may seem like a well-known recipe when mapped to pre-training and fine-tuning. That said, the key insights here are: (i) the fine-tuning dataset can be surprisingly small, on the order of a couple of thousand images, (ii) the quality of the dataset needs to be very high, making it difficult to fully automate data curation, requiring manual annotation, and (iii) even with a small fine-tuning dataset, quality-tuning not only significantly improves the aesthetics of the generated images, but does so without sacrificing generality as measured by faithfulness to the input prompt. Note that the stronger the base pre-trained model, the higher the quality of the generated images after quality-tuning. To this end, we made several modifications to the latent diffusion architecture \\[ [27])\\] to facilitate high-quality generation. That said, quality-tuning is general enough and can be applied to a variety of architectures.\n\nIn this section, we first introduce the latent diffusion architecture we use. Then, we discuss the pre-training stage, followed by the protocol for collecting the high-quality fine-tuning dataset, and finally the quality-tuning stage. Later in Section [4]Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\"), we demonstrate that quality-tuning is not limited to latent diffusion models but also improve other models such as pixel diffusion \\[ [30])\\] and masked generative transformer \\[ [9])\\] models.\n\n![Refer to caption]Figure 3: Autoencoder. The visual quality of the reconstructed images for autoencoders with different channel sizes. While keeping all other architecture layers the same, we only change the latent channel size. We show that the original 4-channel autoencoder design \\[ [27])\\] is unable to reconstruct fine details. Increasing channel size leads to much better reconstructions. We choose to use a 16-channel autoencoder in our latent diffusion model.\n\n### 3.1 Latent Diffusion Architecture\n\nWe design a latent diffusion model that outputs 1024√ó1024102410241024\\\\times 1024 resolution images. Following standard latent diffusion architecture design, our model has an autoencoder (AE) to encode an image to latent embeddings and a U-Net to learn the denoising process.\n\nWe find that the commonly used 4-channel autoencoder (AE-4) architecture often results in a loss of details in the reconstructed images due to its high compression rate.\nThe issue is especially noticeable in small objects. Intuitively, it compresses the image resolution by 64√ó64\\\\times with three 2√ó2222\\\\times 2 downsampling blocks but increases the channel size only from 3 (RGB) to 4 (latent channels). We find that increasing the channel size to 16 significantly improves reconstruction quality (see Table [1]Table 1 ‚Ä£ 3.1 Latent Diffusion Architecture ‚Ä£ 3 Approach ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\")). To further improve the reconstruction performance, we use an adversarial loss and apply a non-learnable pre-processing step to RGB images using a Fourier Feature Transform\nto lift the input channel dimension from 3 (RGB) to a higher dimension to better capture fine structures.\nSee Figure [3]Figure 3 ‚Ä£ 3 Approach ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") for qualitative results of autoencoders of different channel size.\n\n| model | channel | SSIM | PSNR | FID |\n| --- | --- | --- | --- | --- |\n|  | 4 | 0.80 | 28.64 | 0.35 |\n| AE | 8 | 0.86 | 30.95 | 0.19 |\n|  | 16 | 0.92 | 34.00 | 0.06 |\n| Fourier-AE | 16 | 0.93 | 34.19 | 0.04 |\n\nTable 1: While keeping all other architecture design choices fixed, we first only change the latent channel size and report their reconstruction metrics on ImageNet \\[ [29])\\]. We see that AE-16 significantly improves over AE-4 on all reconstruction metrics. Adding a Fourier Feature Transform and an adversarial loss further improves the reconstruction performance.\n\nWe use a large U-Net with 2.8B trainable parameters. We increase the channel size and number of stacked residual blocks in each stage for larger model capacity. We use text embeddings from both CLIP ViT-L \\[ [23])\\] and T5-XXL \\[ [24])\\] as the text conditions.\n\n### 3.2 Pre-training\n\nWe curate a large internal pre-training dataset consisting of 1.11.11.1 billion images to train our model.\nThe model is trained with progressively increasing resolutions, similar to \\[ [21])\\].\nThis progressive approach allows the model to efficiently learn high-level semantics at lower resolutions and improve finer details at the highest resolutions\nWe also use a noise-offset \\[ [3])\\] of 0.02 in the final stage of pre-training. This facilitates high-contrast generation, which contributes to the aesthetics of the generated images.\n\n![Refer to caption]Figure 4: Visual Appealing Data. Examples of visually appealing data that can meet our human filtering criterion.\n\n### 3.3 High-Quality Alignment Data\n\nAs discussed before, in order to align the model towards highly aesthetic generations ‚Äì quality matters significantly more than quantity in the fine-tuning dataset (see Section [4.3]Ablation Studies ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") for an ablation study on quality vs quantity). As also discussed, the notion of aesthetics is highly subjective. Here we discuss in detail what aesthetics we chose and how we curated our fine-tuning dataset by combining both automated filtering and manual filtering. The general quality-tuning strategy will likely apply to other aesthetics as well.\n\nAutomatic Filtering. Starting from an initial pool of billions of images, we first use a series of automatic filters to reduce the pool to a few hundreds of millions. These filters include but are not limited to offensive content removal, aesthetic score filter, optical character recognition (OCR) word count filter to eliminate images with too much overlaying text on them, and CLIP score filter to eliminate samples with poor image-text alignment, which are standard pre-filtering steps for sourcing large datasets. We then perform additional automated filtering via image size and aspect ratio. Lastly, to balance images from various domains and categories, we leverage visual concept classification \\[ [36])\\] to source images from specific domains (e.g., portrait, food, animal, landscape, car, etc). Finally, with additional quality filtering based on proprietary signals (e.g., number of likes), we can further reduce the data to 200200200K.\n\nHuman Filtering.\nNext, we perform a two-stage human filtering process to only retain highly aesthetic images. In the first stage, we train generalist annotators to downselect the image pool to 20K images. Our primary goal during this stage is to optimize recall, ensuring the exclusion of medium and low quality that may have passed through the automatic filtering.\nIn the second stage, we engage specialist annotators who have a good understanding of a set of photography principles. Their task is to filter and select images of the highest aesthetic quality (see Figure [4]Figure 4 ‚Ä£ 3.2 Pre-training ‚Ä£ 3 Approach ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") for examples). During this stage, we focus on optimizing precision, meaning we aim to select only the very best images.\nA brief annotation guideline for photorealistic images is as follows. Our hypothesis is that following basic principles of high quality photography leads to generically more aesthetic images across a variety of styles, which is validated via human evaluation.\n\n1. 1.\n\n\nComposition. The image should adhere to certain principles of professional photography composition, including the ‚ÄúRule Of Thirds‚Äù, ‚ÄúDepth and Layering‚Äù, and more. Negative examples may include imbalance in visual weight, such as when all focal subjects are concentrated on one side of the frame, subjects captured from less flattering angles, or instances where the primary subject is obscured, or surrounding unimportant objects are distracting from the subject.\n\n2. 2.\n\n\nLighting. We are looking for dynamic lighting with balanced exposure that enhances the image, for example, lighting that originates from an angle, casting highlights on select areas of the background and subject(s). We try to avoid artificial or lackluster lighting, as well as excessively dim or overexposed light.\n\n3. 3.\n\n\nColor and Contrast. We prefer images with vibrant colors and strong color contrast. We avoid monochromatic images or those where a single color dominates the entire frame.\n\n4. 4.\n\n\nSubject and Background. The image should have a sense of depth between the foreground and background elements. The background should be uncluttered but not overly simplistic or dull. The focused subjects must be intentionally placed within the frame, ensuring that all critical details are clearly visible without compromise. For instance, in a portrait, the primary subject of image should not extend beyond the frame or be obstructed. Furthermore, the level of detail on the foreground subject is extremely important.\n\n5. 5.\n\n\nAdditional Subjective Assessments. Furthermore, we request annotators to provide their subjective assessments to ensure that only images of exceptionally aesthetic quality are retained by answering a couple of questions, such as:\n(i) Does this image convey a compelling story?\n(ii) Could it have been captured significantly better?\n(iii) Is this among the best photos you‚Äôve ever seen for this particular content?\n\n\nThrough this filtering process, we retained a total of 2000 exceptionally high-quality images. Subsequently, we composed ground-truth captions for each of them. Note that some of these handpicked images are below our target resolution of 1024√ó1024102410241024\\\\times 1024.\nWe trained a pixel diffusion upsampler inspired by the architecture proposed in \\[ [30])\\] to upsample these images when necessary.\n\n### 3.4 Quality-Tuning\n\nWe can think of the visually stunning images (like the 2000 images we collected) as a subset of all images that share some common statistics.\nOur hypothesis is that a strongly pre-trained model is already capable of generating highly aesthetic images, but the generation process is not properly guided towards always producing images with these statistics. Quality-tuning effectively restricts outputs to a high-quality subset.\n\nWe fine-tune the pre-trained model with a small batch size of 646464.\nWe use a noise-offset of 0.10.10.1 at this stage. Note that early stopping is important here as fine-tuning on a small dataset for too long will result in significant overfitting and degradation in generality of visual concepts. We fine-tune for no more than 151515K iterations despite the loss still decreasing. This total iteration number is determined empirically.",
            "citations": null
          },
          "4 Experiments": {
            "content": "We compare our quality-tuned model to our pre-trained model to demonstrate the effectiveness of quality-tuning. To place the visual appeal of our generated images in context with a current state-of-the-art model, we compare our model to SDXLv1.0 \\[ [21])\\]. Due to lack of access to training data of SDXL and their underlying model, we leveraged their corresponding APIs for our comparison. Note that unlike SDXL, we use a single stage architecture, and do not use a subsequent refinement stage. As stated earlier, we also show that quality-tuning is not specific to LDMs, and can be applied to other architectures ‚Äì pixel diffusion and masked generative transformer models.\n\n### 4.1 Evaluation Setting\n\n#### Prompts.\n\nWe evaluate on two large sets of prompts: 1600 PartiPrompts \\[ [37])\\] which is commonly used for text-to-image generation benchmarking, and our 2100 Open User Input (OUI) Prompts.\nThe OUI prompt set is based on real-world user prompts. It captures prompts that are popular with text-to-image models, reflecting visual concepts that are relevant to real-world use cases (Figure [5]Figure 5 ‚Ä£ Prompts. ‚Ä£ 4.1 Evaluation Setting ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\")), paraphrased by LLMs to be closer to how regular users might input prompts (as opposed to being highly prompt engineered). The overall motivation was to capture the creativity and intricacies of popular prompts for text-to-image models so we are pushing the capabilities of models, while also being grounded in likely real world use cases.\n\n![Refer to caption]Figure 5: Prompt distributions. The distribution of different concepts in our Open User Input prompts. We cover a comprehensive list of common concepts people typically use to generate images.\n\n#### Metrics.\n\nWe use two separate evaluation metrics: visual appeal and text faithfulness.\nVisual appeal refers to the overall aesthetic quality of a generated image. It combines various visual elements such as color, shape, texture, and composition that creates a pleasing and engaging look. The concept of visual appeal is subjective and varies from person to person, as what may be aesthetically pleasing to one person may not be to another. Therefore, we ask five annotators to rate each sample. Concretely, we show annotators two images A and B, side-by-side, each generated by a different model using the same caption. The text captions are not displayed. Annotators choose which image is more visually appealing by selecting ‚ÄúA‚Äù, ‚ÄúB‚Äù or ‚ÄúTie‚Äù.\n\nText faithfulness refers to the degree of similarity between a generated image and a text caption. In this task, we again display two generated images A and B, side-by-side, but with the caption alongside the images. The annotators are asked to ignore the visual appeal of the images and choose which ones best describe the caption with choices ‚ÄúA ‚Äù, ‚ÄúB‚Äù, ‚ÄúBoth‚Äù, and ‚ÄúNeither‚Äù, where ‚ÄúBoth‚Äù and ‚ÄúNeither‚Äù are considered as ‚ÄúTie‚Äù.\nIn this task, we have three annotators to annotate each sample pair.\n\nWe do not report ‚Äústandard‚Äù metrics such as FID scores. As argued in many recent papers (e.g.,\\[ [21]), [18])\\]), FID scores do not correlate well with human assessment of the performance of generative models.\n\n![Refer to caption](a)All Prompts\n\n![Refer to caption](b)Stylized Prompts\n\nFigure 6: Quality-Tuning vs Pre-training. Human evaluation on both the PartiPrompts and Open User Input prompts shows that our quality-tuned model, Emu, significantly outperforms the pre-trained\nmodel on visual appeal, without loss of generality of visual concepts or styles that can be generated.\n![Refer to caption]Figure 7: Qualitative Comparison. a comparison of images generated by the pre-trained and quality-tuned model.\n\n### 4.2 Results\n\n![Refer to caption]Figure 8: Generated Examples. Images generated by our quality-tuned model, Emu.![Refer to caption]Figure 9: More Examples. Images generated by our quality-tuned model, Emu.\n\n#### Effectiveness of Quality-Tuning.\n\nFirst, we compare our quality-tuned model, Emu, with the pre-trained model. See Figure [7]Figure 7 ‚Ä£ Metrics. ‚Ä£ 4.1 Evaluation Setting ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") for random (not cherry-picked) qualitative examples before and after quality-tuning. Note the highly aesthetic non-photorealistic image as well, validating our hypothesis that following certain photography principles in curating the quality-tuning dataset leads to improved aesthetics for a broad set of styles.\nWe show more examples of generated images using Emu in Figure [8]Figure 8 ‚Ä£ 4.2 Results ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") and Figure [9]Figure 9 ‚Ä£ 4.2 Results ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\").\n\nQuantitatively, as shown in Figure [6]Figure 6 ‚Ä£ Metrics. ‚Ä£ 4.1 Evaluation Setting ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") (top),\nafter quality-tuning, Emu is preferred in both visual appeal and text faithfulness by a significant margin.\nSpecifically, Emu is preferred 82.9%percent82.982.9\\\\% and 91.2%percent91.291.2\\\\% of the time for visual appeal, and 36.7%percent36.736.7\\\\% and 47.9%percent47.947.9\\\\% of the time for text faithfulness on PartiPrompts and OUI Prompts, respectively. In contrast, the pre-trained model is preferred only 15.4%percent15.415.4\\\\% and 7.9%percent7.97.9\\\\% of the time for visual appeal, and 21.0%percent21.021.0\\\\% and 18.5%percent18.518.5\\\\% of the time for text faithfulness on PartiPrompts and OUI Prompts. The remaining cases result in ties.\nFrom the two large sets of evaluation data that covers various domains and categories, we did not observe degradation of generality across visual concepts. In fact, as seen, text-faithfulness also improved. We hypothesize this is because the captions of the 2000 quality-tuning images were manually written, while the captions in the pre-training dataset tend to be noisy. Finally, we analyze the results on non-photorealistic stylized prompts (e.g., sketches, cartoons, etc.). We find that the improvements broadly apply to a variety of styles, see Figure [6]Figure 6 ‚Ä£ Metrics. ‚Ä£ 4.1 Evaluation Setting ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\") (bottom).\n\n#### Visual Appeal in the Context of SoTA.\n\nTo place the visual appeal of our generated images in the context of current state-of-the-art, we compare Emu with SDXLv1.0 \\[ [21])\\]. As shown in Table [2]Table 2 ‚Ä£ Visual Appeal in the Context of SoTA. ‚Ä£ 4.2 Results ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\"), our model is preferred over SDXLv1.0 in visual appeal by a significant margin ‚Äì including on stylized (non-photorealistic) prompts.\n\n| Eval data | win (%percent\\\\%) | tie (%percent\\\\%) | lose (%percent\\\\%) |\n| --- | --- | --- | --- |\n| Parti (All) | 68.4 | 2.1 | 29.5 |\n| OUI (All) | 71.3 | 1.2 | 27.5 |\n| Parti (Stylized) | 81.7 | 1.9 | 16.3 |\n| OUI (Stylized) | 75.5 | 1.4 | 23.1 |\n\nTable 2: Emu vs SDXL on Visual Appeal. Our model is preferred over SDXL by a large margin, including on stylized, non-photorealistic prompts.\n\n#### Quality-Tuning Other Architectures.\n\nNext, we show our quality-tuning can also improve other popular architectures, such as pixel diffusion and masked generative transformer models.\nSpecifically, we re-implement and re-train from scratch a pixel diffusion model, similar to Imagen \\[ [30])\\] architecture, and a masked generative transformer model, similar to Muse \\[ [9])\\] architecture, and then quality-tune them on 2000 images.\nWe evaluate both quality-tuned models on 1/3131/3 randomly sampled PartiPrompts.\nAs shown in Figure [10]Figure 10 ‚Ä£ Quality-Tuning Other Architectures. ‚Ä£ 4.2 Results ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\"), both architectures show significant improvement after quality-tuning on both visual appeal and text faithfulness metrics.\n\n![Refer to caption]Figure 10: Quality-Tuning vs Pre-training on Pixel Diffusion and Masked Generative Transformer. We adapt our quality-tuning to other popular text-to-image model architectures. Our results indicate that the success of quality-tuning can be transferred to other architectures, beyond latent diffusion models.\n\n### 4.3 Ablation Studies\n\nWe do ablation studies on the fine-tuning dataset with a focus on visual appeal. We first investigate the impact of the dataset size. We report results of quality-tuning on randomly sampled subsets of sizes 100, 1000 and 2000 in Table [3]Table 3 ‚Ä£ 4.3 Ablation Studies ‚Ä£ 4 Experiments ‚Ä£ Emu: Enhancing Image Generation Models Using Photogenic Needles in a Haystack\").\nWith even just 100 fine-tuning images, the model can already be guided towards generating visually-pleasing images, jumping from a win rate of 24.8%percent24.824.8\\\\% to 60%percent6060\\\\% compared with SDXL.\n\n| fine-tune data | win (%percent\\\\%) | tie (%percent\\\\%) | lose (%percent\\\\%) |\n| --- | --- | --- | --- |\n| w/o quality-tuning | 24.8 | 1.4 | 73.9 |\n| 100 | 60.3 | 1.5 | 38.2 |\n| 1000 | 63.2 | 1.9 | 35.0 |\n| 2000 | 67.0 | 2.6 | 30.4 |\n\nTable 3: Visual Appeal by Fine-Tuning Dataset Size. All the numbers are against SDXL as baseline. With merely 100 high-quality images as fine-tuning data, our quality-tuned model can already outperform SDXL in visual appeal. Our model‚Äôs visual appeal further improves as more images are used.",
            "citations": null
          },
          "5 Limitation": {
            "content": "Limitation of Human Evaluation. Relative to most published works, the prompt sets we evaluate on are reasonably large (1600 Parti prompts and our 2100 Open User Input prompts), under a multi-review annotation setting. Even then, the evaluation results may not fully reflect real-world usage of the models. In addition, human evaluation of text-to-image models, especially when it comes to aesthetics, is inherently subjective and noisy. As a result, evaluation on a different set of prompts or with different annotators and guidelines may lead to different results.\n\nLimitations of Small-Scale Fine-Tuning. The role of quality-tuning is to restrict the output distribution to a high-quality domain. However, issues rooted from pre-training may still persist. For instance, the models may struggle to generate certain objects that were not sufficiently learned during pre-training.\n\nLimitations of Text-to-Image Models in General. Like other text-to-image models, our models may generate biased, misleading, or offensive outputs. We‚Äôve invested a significant amount in fairness and safety of our models - starting with balanced dataset construction, creating dedicated evaluation sets for these risk categories and investing multiple hours of redteaming.",
            "citations": null
          },
          "6 Conclusion": {
            "content": "In this paper, we demonstrated that manually selecting high quality images that are highly aesthetically-pleasing is one of the most important keys to improving the aesthetics of images generated by text-to-image generative models.\nWe showed that with just a few hundred to thousand fine-tuning images, we were able to improve the visual appeal of generated images without compromising on the generality of visual concepts depicted. With this finding, we build Emu, a LDM for high-quality image synthesis. On the commonly used PartiPrompts and our Open User Input Prompts, we carefully evaluate our model against a publicly available state-of-the-art text-to-image model (SDXLv1.0 \\[ [21])\\]) as well as our pre-trained LDM. We also show that quality-tuning not only improves LDMs, but also pixel diffusion and masked generative transformer models.",
            "citations": null
          },
          "7 Acknowledgement": {
            "content": "This work would not have been possible without a large group of collaborators who helped with the underlying infrastructure, data, privacy, and the evaluation framework. We extend our gratitude to the following people for their contributions (alphabetical order): Eric Alamillo, Andr√©s Alvarado, Giri Anantharaman, Stuart Anderson, Snesha Arumugam, Chris Bray, Matt Butler, Anthony Chen, Lawrence Chen, Jessica Cheng, Lauren Cohen, Jort Gemmeke, Freddy Gottesman, Nader Hamekasi, Zecheng He, Jiabo Hu, Praveen Krishnan, Carolyn Krol, Tianhe Li, Mo Metanat, Vivek Pai, Guan Pang, Albert Pumarola, Ankit Ramchandani, Stephen Roylance, Kalyan Saladi, Artsiom Sanakoyeu, Dev Satpathy, Alex Schneidman, Edgar Schoenfeld, Shubho Sengupta, Hardik Shah, Shivani Shah, Yaser Sheikh, Karthik Sivakumar, Lauren Spencer, Fei Sun, Ali Thabet, Mor Tzur, Mike Wang, Mack Ward, Bichen Wu, Seiji Yamamoto, Licheng Yu, Hector Yuen, Luxin Zhang, Yinan Zhao, and Jessica Zhong.\n\nFinally, thank you Connor Hayes, Manohar Paluri and Ahmad Al-Dahle for your support and leadership.",
            "citations": null
          }
        },
        "abstract": "Training text-to-image models with web scale image-text pairs enables the\ngeneration of a wide range of visual concepts from text. However, these\npre-trained models often face challenges when it comes to generating highly\naesthetic images. This creates the need for aesthetic alignment post\npre-training. In this paper, we propose quality-tuning to effectively guide a\npre-trained model to exclusively generate highly visually appealing images,\nwhile maintaining generality across visual concepts. Our key insight is that\nsupervised fine-tuning with a set of surprisingly small but extremely visually\nappealing images can significantly improve the generation quality. We pre-train\na latent diffusion model on $1.1$ billion image-text pairs and fine-tune it\nwith only a few thousand carefully selected high-quality images. The resulting\nmodel, Emu, achieves a win rate of $82.9\\%$ compared with its pre-trained only\ncounterpart. Compared to the state-of-the-art SDXLv1.0, Emu is preferred\n$68.4\\%$ and $71.3\\%$ of the time on visual appeal on the standard PartiPrompts\nand our Open User Input benchmark based on the real-world usage of\ntext-to-image models. In addition, we show that quality-tuning is a generic\napproach that is also effective for other architectures, including pixel\ndiffusion and masked generative transformer models."
      },
      "bib.bib19": {
        "id": "bib.bib19",
        "citation": "Gat et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Discrete flow matching, 2024.",
        "venue": "",
        "pages": "",
        "url": "https://arxiv.org/abs/2407.15595",
        "arxiv_id": "2407.15595",
        "doi": null,
        "sections": {
          "1 Introduction\\": {
            "content": "\\\nDespite the remarkable success of diffusion and flow models in generating continuous spatial signals such as images (Ho et al., [2020]); Rombach et al., [2022]); Esser et al., [2024])) and videos (Singer et al., [2022]); Blattmann et al., [2023])), their performance still falters when applied to discrete sequential data compared to autoregressive models. Recent progress in adapting diffusion and flow models to the discrete setting has been made via mostly two approaches: embedding the discrete data in continuous space and applying continuous diffusion (Dieleman et al., [2022]); Stark et al., [2024])) or designing diffusion or flow processes over discrete state spaces (Austin et al., [2021a]); Campbell et al., [2022])).\\\n\\\nIn this paper, we pursue the discrete flow approach of Campbell et al. ( [2024])) and introduce Discrete Flow Matching (FM), a theoretical framework and algorithmic methodology for discrete flow models that yields a state-of-the-art discrete non-autoregressive generative approach. Surprisingly, Discrete FM exhibits similarities with the continuous Flow Matching (Lipman et al., [2022])) approach proposed for continuous signals. Notably, its _generating probability velocity_, employed in the sampling algorithm, is identical in form to its continuous counterpart. Additionally, Discrete FM offers the following advancements and simplifications over prior methods: It encompasses a more comprehensive family of probability paths transforming source (noise) distributions into target (data) distributions, accommodating arbitrary source-target couplings and time-dependent schedulers. Furthermore, it provides a unified formulation for the generating probability velocity directly expressed in terms of the learned posteriors and schedulers, along with a unified and general theory and algorithm for corrector sampling and iterations. In practice, we observe that path and corrector schedulers are pivotal, and their proper tuning leads to substantial improvements in generation quality. We have trained a 1.7B parameter Discrete FM model on the same data mix as in Llama-2 (Touvron et al., [2023])) and CodeLlama (Roziere et al., [2023])), achieving 6.7%‚ÄâPass@1 and 13.4%‚ÄâPass@10 on HumanEval and 6.7%‚ÄâPass@1 and 20.6%‚ÄâPass@10 on _1-shot_ MBPP coding benchmarks; [Figure1]In 1 Introduction ‚Ä£ Discrete Flow Matching\") shows some code generation examples. In conditional text generation our model produces texts with a generated perplexity score of 9.7 as measured by the Llama-3 8B model, surpassing a 1.7B autoregressive model that achieves 22.3 and not far from the Llama-2 7B model that achieves 8.3 in perplexity score. We strongly believe that Discrete FM represents a significant step in bridging the performance gap between discrete diffusion and autoregressive models, and that further enhancements are possible by exploring the vast design space that Discrete FM has to offer.\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBmaWIobjogaW50KToKIiIiUmV0dXJuIG4tdGggRmlib25hY2NpCm51bWJlci4KPj4+IGZpYigxMCkKNTUKPj4+IGZpYigxKQoxCj4+PiBmaWIoOCkKMjEKIiIiCg==)\\\n\\\ndeffib(n:int):\\\n\\\n\"\"\"Returnn-thFibonacci\\\n\\\nnumber.\\\n\\\n>>>fib(10)\\\n\\\n55\\\n\\\n>>>fib(1)\\\n\\\n1\\\n\\\n>>>fib(8)\\\n\\\n21\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmlmIG4gPCAxOiByZXR1cm4gMAppZiBuIDwgMjogcmV0dXJuIDEKXHBhcnJldHVybiBmaWIobi0xKSArIGZpYihuLTIpCg==)\\\n\\\nifn<1:return0\\\n\\\nifn<2:return1\\\n\\\n\\parreturnfib(n-1)+fib(n-2)\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBmaW5kX3Bvc2l0aW9uX29mX3ZhbHVlKGFyciwgeCk6Cg==)\\\n\\\ndeffind\\_position\\_of\\_value(arr,x):\\\n\\\n[‚¨á](data:text/plain;base64,CmxvdywgbWlkID0gMCwgMApoaWdoID0gbGVuKGFycikgLSAxClxwYXI=)\\\n\\\nlow,mid=0,0\\\n\\\nhigh=len(arr)-1\\\n\\\n\\par\\\n\\\n[‚¨á](data:text/plain;base64,CndoaWxlIGhpZ2ggPj0gbG93Ogo=)\\\n\\\nwhilehigh>=low:\\\n\\\n[‚¨á](data:text/plain;base64,Cm1pZCA9IChoaWdoICsgbG93KSAvLyAyClxwYXIjIElmIHggaXMgZ3JlYXRlcgppZiBhcnJbbWlkXSA8IHg6CmxvdyA9IG1pZCArIDEKIyBJZiB4IGlzIHNtYWxsZXIK)\\\n\\\nmid=(high+low)//2\\\n\\\n\\par#Ifxisgreater\\\n\\\nifarr\\[mid\\]<x:\\\n\\\nlow=mid+1\\\n\\\n#Ifxissmaller\\\n\\\n[‚¨á](data:text/plain;base64,CmVsaWYgYXJyW21pZF0gPiB4Ogo=)\\\n\\\nelifarr\\[mid\\]>x:\\\n\\\n[‚¨á](data:text/plain;base64,CmhpZ2ggPSBtaWQgLSAxCmVsc2U6CnJldHVybiBtaWQKcmV0dXJuIC0xCg==)\\\n\\\nhigh=mid-1\\\n\\\nelse:\\\n\\\nreturnmid\\\n\\\nreturn-1\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBiaW5hcnlfc2VhcmNoKGFyciwgeCk6Cg==)\\\n\\\ndefbinary\\_search(arr,x):\\\n\\\n[‚¨á](data:text/plain;base64,CnN0YXJ0ID0gMAplbmQgPSBsZW4oYXJyKS0xClxwYXIjIFdoaWxlIHBlcmZvcm1pbmcgYmluYXJ5IHNlYXJjaAp3aGlsZSBzdGFydCA8PSBlbmQ6Cm1pZCA9IChzdGFydCArIGVuZCkgLy8gMgo=)\\\n\\\nstart=0\\\n\\\nend=len(arr)-1\\\n\\\n\\par#Whileperformingbinarysearch\\\n\\\nwhilestart<=end:\\\n\\\nmid=(start+end)//2\\\n\\\n[‚¨á](data:text/plain;base64,CiMgSWYgeCBpcyBncmVhdGVyCg==)\\\n\\\n#Ifxisgreater\\\n\\\n[‚¨á](data:text/plain;base64,CmlmIGFyclttaWRdIDwgeDoKc3RhcnQgPSBtaWQgKyAxCg==)\\\n\\\nifarr\\[mid\\]<x:\\\n\\\nstart=mid+1\\\n\\\n[‚¨á](data:text/plain;base64,CiMgSWYgeCBpcyBzbWFsbGVyCg==)\\\n\\\n#Ifxissmaller\\\n\\\n[‚¨á](data:text/plain;base64,CmVsaWYgYXJyW21pZF0gPiB4OgplbmQgPSBtaWQgLSAxCg==)\\\n\\\nelifarr\\[mid\\]>x:\\\n\\\nend=mid-1\\\n\\\n[‚¨á](data:text/plain;base64,CmVsc2U6Cg==)\\\n\\\nelse:\\\n\\\n[‚¨á](data:text/plain;base64,CnJldHVybiBtaWQKcmV0dXJuIC0xCg==)\\\n\\\nreturnmid\\\n\\\nreturn-1\\\n\\\nFigure 1: Code generation examples using Discrete Flow Matching. Code condition is marked in gray, model generation is marked in yellow. Left sub-figure presents the standard left-to-right prompting; Middle and Right sub-figures, presents complex infilling setup.\\\n\\",
            "citations": null
          },
          "2 Discrete Flow Matching\\": {
            "content": "\\\n### 2.1 Setup and notations\\\n\\\nIn discrete sequence modeling, we denote a sequence xùë•x as an array of NùëÅN elements (x1,x2,‚Ä¶,xN)superscriptùë•1superscriptùë•2‚Ä¶superscriptùë•ùëÅ(x^{1},x^{2},\\\\ldots,x^{N}). Each element, or token, within this sequence is selected from a vocabulary of size dùëëd. Consequently, the entire set of possible sequences is given by ùíü=\\[d\\]Nùíüsuperscriptdelimited-\\[\\]ùëëùëÅ\\\\mathcal{D}=\\[d\\]^{N}, where \\[d\\]=\\\\set‚Äã1,‚Ä¶,ddelimited-\\[\\]ùëë\\\\set1‚Ä¶ùëë\\[d\\]=\\\\set{1,\\\\ldots,d}. A random variable taking values in the space ùíüùíü\\\\mathcal{D} is denoted by XùëãX and its corresponding probability mass function (PMF) is P‚Äã(X=x)ùëÉùëãùë•P(X=x). For simplicity, throughout the paper, we sometimes omit the random variable XùëãX and use p‚Äã(x)ùëùùë•p(x) to denote the PMF.\\\n\\\nTo describe marginalization properties, we denote p‚Äã(xi)ùëùsuperscriptùë•ùëñp(x^{i}) the xisuperscriptùë•ùëñx^{i} marginal of pùëùp, \\\\ie, p‚Äã(xi)=‚àëxi¬Øp‚Äã(x)ùëùsuperscriptùë•ùëñsubscriptsuperscriptùë•¬Øùëñùëùùë•p(x^{i})=\\\\sum\\_{x^{\\\\bar{i}}}p(x), where xi¬Ø=(‚Ä¶,xi‚àí1,xi+1,‚Ä¶)‚àà\\[d\\]N‚àí1superscriptùë•¬Øùëñ‚Ä¶superscriptùë•ùëñ1superscriptùë•ùëñ1‚Ä¶superscriptdelimited-\\[\\]ùëëùëÅ1x^{\\\\bar{i}}=(\\\\ldots,x^{i-1},x^{i+1},\\\\ldots)\\\\in\\[d\\]^{N-1} are all the arguments excluding iùëñi. Similarly, p‚Äã(xi¬Ø)=‚àëxip‚Äã(x)ùëùsuperscriptùë•¬Øùëñsubscriptsuperscriptùë•ùëñùëùùë•p(x^{\\\\bar{i}})=\\\\sum\\_{x^{i}}p(x), and xi‚àà\\[d\\]superscriptùë•ùëñdelimited-\\[\\]ùëëx^{i}\\\\in\\[d\\]. A useful PMF is the delta function, Œ¥ysubscriptùõøùë¶\\\\delta\\_{y}, y‚àà\\\\gDùë¶\\\\gDy\\\\in\\\\gD, which is defined by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ¥y‚Äã(x)=‚àèi=1NŒ¥yi‚Äã(xi), where ‚ÄãŒ¥yi‚Äã(xi)={1xi=yi0xi‚â†yi.formulae-sequencesubscriptùõøùë¶ùë•superscriptsubscriptproductùëñ1ùëÅsubscriptùõøsuperscriptùë¶ùëñsuperscriptùë•ùëñ where subscriptùõøsuperscriptùë¶ùëñsuperscriptùë•ùëñcases1superscriptùë•ùëñsuperscriptùë¶ùëñ0superscriptùë•ùëñsuperscriptùë¶ùëñ\\\\delta\\_{y}(x)=\\\\prod\\_{i=1}^{N}\\\\delta\\_{y^{i}}(x^{i}),\\\\text{ where }\\\\delta\\_{y^{i}}(x^{i})=\\\\begin{cases}1&x^{i}=y^{i}\\\\\\<br>0&x^{i}\\\\neq y^{i}\\\\end{cases}. |  | (1) |\\\n\\\nWith the marginal notation Œ¥y‚Äã(xi)=Œ¥yi‚Äã(xi)subscriptùõøùë¶superscriptùë•ùëñsubscriptùõøsuperscriptùë¶ùëñsuperscriptùë•ùëñ\\\\delta\\_{y}(x^{i})=\\\\delta\\_{y^{i}}(x^{i}) and Œ¥y‚Äã(xi¬Ø)=Œ¥yi¬Ø‚Äã(xi¬Ø)=‚àèj‚â†iŒ¥yj‚Äã(xj)subscriptùõøùë¶superscriptùë•¬Øùëñsubscriptùõøsuperscriptùë¶¬Øùëñsuperscriptùë•¬Øùëñsubscriptproductùëóùëñsubscriptùõøsuperscriptùë¶ùëósuperscriptùë•ùëó\\\\delta\\_{y}(x^{\\\\bar{i}})=\\\\delta\\_{y^{\\\\bar{i}}}(x^{\\\\bar{i}})=\\\\prod\\_{j\\\\neq i}\\\\delta\\_{y^{j}}(x^{j}) which simplifies notation.\\\n\\\n### 2.2 Source and target distributions\\\n\\\nIn discrete generative models our goal is to transform source samples X0‚àºpsimilar-tosubscriptùëã0ùëùX\\_{0}\\\\sim p to target samples X1‚àºqsimilar-tosubscriptùëã1ùëûX\\_{1}\\\\sim q. Our training data, consist of pairs X0subscriptùëã0X\\_{0} and X1subscriptùëã1X\\_{1} that are sampled from a joint distribution œÄ‚Äã(x,y)ùúãùë•ùë¶\\\\pi(x,y), satisfying the marginals constraints p‚Äã(x)=‚àëy‚àà\\\\gDœÄ‚Äã(x,y),q‚Äã(y)=‚àëx‚àà\\\\gDœÄ‚Äã(x,y)formulae-sequenceùëùùë•subscriptùë¶\\\\gDùúãùë•ùë¶ùëûùë¶subscriptùë•\\\\gDùúãùë•ùë¶p(x)=\\\\sum\\_{y\\\\in\\\\gD}\\\\pi(x,y),q(y)=\\\\sum\\_{x\\\\in\\\\gD}\\\\pi(x,y), i.e.,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | (X0,X1)‚àºœÄ‚Äã(X0,X1).similar-tosubscriptùëã0subscriptùëã1ùúãsubscriptùëã0subscriptùëã1(X\\_{0},X\\_{1})\\\\sim\\\\pi(X\\_{0},X\\_{1}). |  | (2) |\\\n\\\nIn the simplest case, the training pairs X0subscriptùëã0X\\_{0} and X1subscriptùëã1X\\_{1} are sampled independently from the source and target distributions respectively,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | (X0,X1)‚àºp‚Äã(X0)‚Äãq‚Äã(X1).similar-tosubscriptùëã0subscriptùëã1ùëùsubscriptùëã0ùëûsubscriptùëã1(X\\_{0},X\\_{1})\\\\sim p(X\\_{0})q(X\\_{1}). |  | (3) |\\\n\\\n_Example:_ source and couplings.\\\nCommon instantiations of source distribution pùëùp are: (i) adding a special token value often referred to as a ‚Äòmask‚Äô or ‚Äòdummy‚Äô token, denoted here by \\\\dummy\\\\dummy\\\\dummy, and setting the source distribution to be all-mask sequences, \\\\ie, p‚Äã(x)=Œ¥\\\\dummy‚Äã(x)ùëùùë•subscriptùõø\\\\dummyùë•p(x)=\\\\delta\\_{\\\\dummy}(x); and (ii) using uniform distribution over \\\\gD\\\\gD\\\\gD, which is equivalent to drawing each xisuperscriptùë•ùëñx^{i} independently to be some value in \\[d\\]delimited-\\[\\]ùëë\\[d\\] with equal probability, denoted p‚Äã(x)=pu‚Äã(x)ùëùùë•subscriptùëùuùë•p(x)=p\\_{\\\\tiny\\\\text{u}}(x). In this paper we focus mainly on (i). We further consider two choices of couplings œÄùúã\\\\pi: Independent coupling, which we call unconditional coupling (U-coupling), œÄ‚Äã(x0,x1)=p‚Äã(x0)‚Äãq‚Äã(x1)ùúãsubscriptùë•0subscriptùë•1ùëùsubscriptùë•0ùëûsubscriptùë•1\\\\pi(x\\_{0},x\\_{1})=p(x\\_{0})q(x\\_{1}). A random sample that realizes this choice have the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | (X0,X1)=((\\\\dummy,‚Ä¶,\\\\dummy),X1),subscriptùëã0subscriptùëã1\\\\dummy‚Ä¶\\\\dummysubscriptùëã1(X\\_{0},X\\_{1})=\\\\Big{(}(\\\\dummy,\\\\ldots,\\\\dummy),X\\_{1}\\\\Big{)}, |  | (4) |\\\n\\\nwhere X1‚àºq‚Äã(X1)similar-tosubscriptùëã1ùëûsubscriptùëã1X\\_{1}\\\\sim q(X\\_{1}) is a random sample from the training set. The second choice of coupling œÄ‚Äã(x0,x1)=p‚Äã(x0\\|x1)‚Äãq‚Äã(x1)ùúãsubscriptùë•0subscriptùë•1ùëùconditionalsubscriptùë•0subscriptùë•1ùëûsubscriptùë•1\\\\pi(x\\_{0},x\\_{1})=p(x\\_{0}\\|x\\_{1})q(x\\_{1}), which we find improves conditional sampling, partially masks inputs with samples of the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | (X0,X1)=(\\\\sI‚äôX1+(\\\\one‚àí\\\\sI)‚äô(\\\\dummy,‚Ä¶,\\\\dummy),X1),subscriptùëã0subscriptùëã1direct-product\\\\sIsubscriptùëã1direct-product\\\\one\\\\sI\\\\dummy‚Ä¶\\\\dummysubscriptùëã1(X\\_{0},X\\_{1})=(\\\\sI\\\\odot X\\_{1}+(\\\\one-\\\\sI)\\\\odot(\\\\dummy,\\\\ldots,\\\\dummy),X\\_{1}), |  | (5) |\\\n\\\nwhere X1‚àºq‚Äã(X1)similar-tosubscriptùëã1ùëûsubscriptùëã1X\\_{1}\\\\sim q(X\\_{1}) and \\\\sI‚àà\\\\set‚Äã0,1N\\\\sI\\\\set0superscript1ùëÅ\\\\sI\\\\in\\\\set{0,1}^{N} is a random variable indicating the conditioning, ‚äôdirect-product\\\\odot denotes the entry-wise product, and \\\\one‚àà\\\\RealN\\\\onesuperscript\\\\RealùëÅ\\\\one\\\\in\\\\Real^{N} is the vector of all ones. We call this conditional coupling (C-coupling).\\\n\\\n### 2.3 Probability paths\\\n\\\nWe follow the Flow Matching approach (Lipman et al., [2022]); Liu et al., [2022]); Albergo and Vanden-Eijnden, [2022])) that uses a predefined _probability path_ ptsubscriptùëùùë°p\\_{t} interpolating pùëùp and qùëûq, \\\\ie,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p0=p and p1=qformulae-sequencesubscriptùëù0ùëù and subscriptùëù1ùëûp\\_{0}=p\\\\quad\\\\text{ and }\\\\quad\\ p\\_{1}=q |  | (6) |\\\n\\\nto train the generative model taking a source sample X0‚àºpsimilar-tosubscriptùëã0ùëùX\\_{0}\\\\sim p to a target sample X1‚àºqsimilar-tosubscriptùëã1ùëûX\\_{1}\\\\sim q. We use arbitrary coupling of source and target (Pooladian et al., [2023]); Tong et al., [2023])), œÄ‚Äã(x0,x1)ùúãsubscriptùë•0subscriptùë•1\\\\pi(x\\_{0},x\\_{1}), and the symmetric FM path  (Albergo and Vanden-Eijnden, [2022])) to define the marginal probability path,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(x)=‚àëx0,x1‚àà\\\\gDpt‚Äã(x\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1), where ‚Äãpt‚Äã(x\\|x0,x1)=‚àèi=1Npt‚Äã(xi\\|x0,x1),formulae-sequencesubscriptùëùùë°ùë•subscriptsubscriptùë•0subscriptùë•1\\\\gDsubscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1 where subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1superscriptsubscriptproductùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1p\\_{t}(x)=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}p\\_{t}(x\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1}),\\\\text{ where }p\\_{t}(x\\|x\\_{0},x\\_{1})=\\\\prod\\_{i=1}^{N}p\\_{t}(x^{i}\\|x\\_{0},x\\_{1}), |  | (7) |\\\n\\\nand pt‚Äã(xi\\|x0,x1)subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1p\\_{t}(x^{i}\\|x\\_{0},x\\_{1}) is a time-dependent probability on the space of tokens \\[d\\]delimited-\\[\\]ùëë\\[d\\] conditioned on the pair x0,x1subscriptùë•0subscriptùë•1x\\_{0},x\\_{1}, and satisfying p0‚Äã(xi\\|x0,x1)=Œ¥x0‚Äã(xi)subscriptùëù0conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•0superscriptùë•ùëñp\\_{0}(x^{i}\\|x\\_{0},x\\_{1})=\\\\delta\\_{x\\_{0}}(x^{i}) and p1‚Äã(xi\\|x0,x1)=Œ¥x1‚Äã(xi)subscriptùëù1conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•1superscriptùë•ùëñp\\_{1}(x^{i}\\|x\\_{0},x\\_{1})=\\\\delta\\_{x\\_{1}}(x^{i}). If the conditional path pt‚Äã(xi\\|x0,x1)subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1p\\_{t}(x^{i}\\|x\\_{0},x\\_{1}) satisfies these boundary conditions then the marginal path pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) satisfies ( [6]Equation 6 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")).\\\n\\\nIn developing the framework, we would like to consider as general as possible set of probability paths that are also tractable to learn within the Flow Matching framework. We consider conditional probability paths as a convex sum of mùëöm conditional probabilities wj‚Äã(xi\\|x0,x1)superscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1w^{j}(x^{i}\\|x\\_{0},x\\_{1}), \\\\ie,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(xi\\|x0,x1)=‚àëj=1mŒ∫ti,j‚Äãwj‚Äã(xi\\|x0,x1),subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscriptsubscriptùëó1ùëösubscriptsuperscriptùúÖùëñùëóùë°superscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1p\\_{t}(x^{i}\\|x\\_{0},x\\_{1})=\\\\sum\\_{j=1}^{m}\\\\kappa^{i,j}\\_{t}w^{j}(x^{i}\\|x\\_{0},x\\_{1}), |  | (8) |\\\n\\\nwhere ‚àëjŒ∫ti,j=1subscriptùëósubscriptsuperscriptùúÖùëñùëóùë°1\\\\sum\\_{j}\\\\kappa^{i,j}\\_{t}=1 and Œ∫ti,j‚â•0subscriptsuperscriptùúÖùëñùëóùë°0\\\\kappa^{i,j}\\_{t}\\\\geq 0 are collectively called the _scheduler_. Note that the scheduler can be defined independently for each location in the sequence i‚àà\\[N\\]ùëñdelimited-\\[\\]ùëÅi\\\\in\\[N\\] or uniformly for all tokens, Œ∫ti,j=Œ∫tjsubscriptsuperscriptùúÖùëñùëóùë°subscriptsuperscriptùúÖùëóùë°\\\\kappa^{i,j}\\_{t}=\\\\kappa^{j}\\_{t}.\\\n\\\nA simple yet useful instance of these conditional paths is reminiscent of the continuous Flow Matching paths formulated as convex interpolants,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(xi\\|x0,x1)=(1‚àíŒ∫t)‚ÄãŒ¥x0‚Äã(xi)+Œ∫t‚ÄãŒ¥x1‚Äã(xi),subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•11subscriptùúÖùë°subscriptùõøsubscriptùë•0superscriptùë•ùëñsubscriptùúÖùë°subscriptùõøsubscriptùë•1superscriptùë•ùëñ\\\\displaystyle p\\_{t}(x^{i}\\|x\\_{0},x\\_{1})=(1-\\\\kappa\\_{t})\\\\delta\\_{x\\_{0}}(x^{i})+\\\\kappa\\_{t}\\\\delta\\_{x\\_{1}}(x^{i}), |  | (9) |\\\n\\\nwhere the scheduler Œ∫tsubscriptùúÖùë°\\\\kappa\\_{t} satisfies Œ∫0=0subscriptùúÖ00\\\\kappa\\_{0}=0, Œ∫1=1subscriptùúÖ11\\\\kappa\\_{1}=1, and monotonically increasing in tùë°t. Another interesting instantiation of ( [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is adding uniform noise with some probability depending on tùë°t,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(xi\\|x0,x1)=Œ∫t1‚ÄãŒ¥x1‚Äã(xi)+Œ∫t2‚Äãpu‚Äã(xi)+Œ∫t3‚ÄãŒ¥x0‚Äã(xi),subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptsuperscriptùúÖ1ùë°subscriptùõøsubscriptùë•1superscriptùë•ùëñsubscriptsuperscriptùúÖ2ùë°subscriptùëùusuperscriptùë•ùëñsubscriptsuperscriptùúÖ3ùë°subscriptùõøsubscriptùë•0superscriptùë•ùëñp\\_{t}(x^{i}\\|x\\_{0},x\\_{1})=\\\\kappa^{1}\\_{t}\\\\delta\\_{x\\_{1}}(x^{i})+\\\\kappa^{2}\\_{t}p\\_{\\\\text{\\\\tiny u}}(x^{i})+\\\\kappa^{3}\\_{t}\\\\delta\\_{x\\_{0}}(x^{i}), |  | (10) |\\\n\\\nwhere Œ∫01=0subscriptsuperscriptùúÖ100\\\\kappa^{1}\\_{0}=0, Œ∫11=1subscriptsuperscriptùúÖ111\\\\kappa^{1}\\_{1}=1, Œ∫02=Œ∫12=0subscriptsuperscriptùúÖ20subscriptsuperscriptùúÖ210\\\\kappa^{2}\\_{0}=\\\\kappa^{2}\\_{1}=0 (remembering that ‚àëjŒ∫ti,j=1subscriptùëósuperscriptsubscriptùúÖùë°ùëñùëó1\\\\sum\\_{j}\\\\kappa\\_{t}^{i,j}=1).\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\\\n| Flow \\\\RealNsuperscript\\\\RealùëÅ\\\\Real^{N} | Flow \\[d\\]Nsuperscriptdelimited-\\[\\]ùëëùëÅ\\[d\\]^{N} | \\\\divv\\\\divv\\\\divv in \\\\RealNsuperscript\\\\RealùëÅ\\\\Real^{N} | \\\\divv\\\\divv\\\\divv in \\[d\\]Nsuperscriptdelimited-\\[\\]ùëëùëÅ\\[d\\]^{N} |\\\n\\\nFigure 2: Discrete flow in \\\\gD=\\[d\\]N\\\\gDsuperscriptdelimited-\\[\\]ùëëùëÅ\\\\gD=\\[d\\]^{N} here with d=3,N=2formulae-sequenceùëë3ùëÅ2d=3,N=2 (middle-left) versus continuous flow in \\\\RealNsuperscript\\\\RealùëÅ\\\\Real^{N}, N=2ùëÅ2N=2 (left). The rate of change of probability of a state (gray disk) is given by the divergence operator shown in the continuous case (middle right) and the discrete case (right).\\\n\\\n### 2.4 Generating Probability Velocities\\\n\\\nContinuous generating velocity. Sampling in continuous FM is performed by updating the current (continuous) sample Xt‚àà\\\\RealNsubscriptùëãùë°superscript\\\\RealùëÅX\\_{t}\\\\in\\\\Real^{N}, t‚àà\\[0,1)ùë°01t\\\\in\\[0,1), according to a learned _generating velocity field_ uti‚Äã(Xt)superscriptsubscriptùë¢ùë°ùëñsubscriptùëãùë°u\\_{t}^{i}(X\\_{t}), i‚àà\\[N\\]ùëñdelimited-\\[\\]ùëÅi\\\\in\\[N\\]. Euler sampling follows the (deterministic) rule\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Xt+hi=Xti+h‚Äãuti‚Äã(Xt),superscriptsubscriptùëãùë°‚Ñéùëñsuperscriptsubscriptùëãùë°ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsubscriptùëãùë°X\\_{t+h}^{i}=X\\_{t}^{i}+hu\\_{t}^{i}(X\\_{t}), |  | (11) |\\\n\\\nwhere h>0‚Ñé0h>0 is a user-defined time step. Note that ( [11]Equation 11 ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is updating separately each of the sample coordinates, Xtisuperscriptsubscriptùëãùë°ùëñX\\_{t}^{i}, i‚àà\\[N\\]ùëñdelimited-\\[\\]ùëÅi\\\\in\\[N\\], see \\\\eg, [Figure2]In 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), left. The velocity uti‚Äã(Xt)superscriptsubscriptùë¢ùë°ùëñsubscriptùëãùë°u\\_{t}^{i}(X\\_{t}) can be either directly modeled with a neural network, or parameterized via the _denoiser_ (a.k.a. xùë•x-prediction) or _noise-prediction_ (a.k.a. \\\\eps\\\\eps\\\\eps-prediction), see left column in [Table1]In The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). If, for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1), starting at Xt‚àºptsimilar-tosubscriptùëãùë°subscriptùëùùë°X\\_{t}\\\\sim p\\_{t} and sampling with ( [11]Equation 11 ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) provides Xt+h‚àºpt+h+o‚Äã(h)similar-tosubscriptùëãùë°‚Ñésubscriptùëùùë°‚Ñéùëú‚ÑéX\\_{t+h}\\\\sim p\\_{t+h}+o(h)111The o‚Äã(h‚Ñì)ùëúsuperscript‚Ñé‚Ñìo(h^{\\\\ell}) notation means a function going to zero faster than h‚Ñìsuperscript‚Ñé‚Ñìh^{\\\\ell} as h‚Äã\\\\too‚Äã0‚Ñé\\\\too0h\\\\too 0, \\\\ie, o‚Äã(h‚Ñì)h‚Ñì‚Äã‚ü∂h‚Äã\\\\too‚Äã0‚Äã0ùëúsuperscript‚Ñé‚Ñìsuperscript‚Ñé‚Ñì‚Ñé\\\\too0‚ü∂0\\\\frac{o(h^{\\\\ell})}{h^{\\\\ell}}\\\\overset{h\\\\too 0}{\\\\longrightarrow}0. then we say that utsubscriptùë¢ùë°u\\_{t} _generates_ ptsubscriptùëùùë°p\\_{t}.\\\n\\\n#### Generating probability velocity.\\\n\\\nFor defining FM in the discrete setting, we follow Campbell et al. ( [2024])) and consider a Continuous-Time discrete Markov Chain (CTMC) paradigm, namely the sample Xtsubscriptùëãùë°X\\_{t} is jumping between states in \\\\gD\\\\gD\\\\gD, depending on a continuous time value t‚àà\\[0,1\\]ùë°01t\\\\in\\[0,1\\]. Similar to the continuous FM setting described above, we focus on a model that predicts the rate of probability change of the current sample Xtsubscriptùëãùë°X\\_{t} in each of its NùëÅN tokens, see [Figure2]In 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), middle-left. Then, each token of the sample Xt‚àºptsimilar-tosubscriptùëãùë°subscriptùëùùë°X\\_{t}\\\\sim p\\_{t} is updated independently by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Xt+hi‚àºŒ¥Xti‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,Xt),similar-tosubscriptsuperscriptùëãùëñùë°‚Ñésubscriptùõøsubscriptsuperscriptùëãùëñùë°‚ãÖ‚Ñésuperscriptsubscriptùë¢ùë°ùëñ‚ãÖsubscriptùëãùë°X^{i}\\_{t+h}\\\\sim\\\\delta\\_{X^{i}\\_{t}}(\\\\cdot)+hu\\_{t}^{i}(\\\\cdot,X\\_{t}), |  | (12) |\\\n\\\nwhere we call utsubscriptùë¢ùë°u\\_{t} the _probability velocity_ as reminiscent of the velocity field in continuous Flow Matching, and as in the continuous case, we define:\\\n\\\n###### Definition 2.1.\\\n\\\nProbability velocity utsubscriptùë¢ùë°u\\_{t} _generates_ the probability path ptsubscriptùëùùë°p\\_{t} if, for all t‚àà\\[0,1)ùë°01t\\\\in\\[0,1) and given a sample Xt‚àºptsimilar-tosubscriptùëãùë°subscriptùëùùë°X\\_{t}\\\\sim p\\_{t}, the sample Xt+hsubscriptùëãùë°‚ÑéX\\_{t+h} defined in ( [12]Equation 12 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) satisfies Xt+h‚àºpt+h+o‚Äã(h)similar-tosubscriptùëãùë°‚Ñésubscriptùëùùë°‚Ñéùëú‚ÑéX\\_{t+h}\\\\sim p\\_{t+h}+o(h).\\\n\\\nAlgorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") formulates a basic sampling algorithm given a generating probability velocity utsubscriptùë¢ùë°u\\_{t}. In order for the r.h.s. of ( [12]Equation 12 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) to define a proper PMF for sufficiently small h>0‚Ñé0h>0, it is necessary and sufficient that the probability velocity satisfies the conditions\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àëxi‚àà\\[d\\]uti‚Äã(xi,z)=0, and ‚Äãuti‚Äã(xi,z)‚â•0‚Äã for all ‚Äãi‚àà\\[N\\]‚Äã and ‚Äãxi‚â†zi.formulae-sequencesubscriptsuperscriptùë•ùëñdelimited-\\[\\]ùëësuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß0 and superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß0 for all ùëñdelimited-\\[\\]ùëÅ and superscriptùë•ùëñsuperscriptùëßùëñ\\\\sum\\_{x^{i}\\\\in\\[d\\]}u\\_{t}^{i}(x^{i},z)=0,\\\\text{ and }u\\_{t}^{i}(x^{i},z)\\\\geq 0\\\\text{ for all }i\\\\in\\[N\\]\\\\text{ and }x^{i}\\\\neq z^{i}.\\\\vspace{-3pt} |  | (13) |\\\n\\\nAlgorithm 1 Flow Matching sampling.\\\n\\\nvelocity utsubscriptùë¢ùë°u\\_{t}, sample X‚àºpsimilar-toùëãùëùX\\\\sim p, step size h=1n‚Ñé1ùëõh=\\\\frac{1}{n}\\\n\\\nfort=0,h,2‚Äãh,‚Ä¶,1‚àíhùë°0‚Ñé2‚Ñé‚Ä¶1‚Ñét=0,h,2h,\\\\ldots,1-hdo\\\n\\\nXi‚àºŒ¥Xi‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,X)similar-tosuperscriptùëãùëñsubscriptùõøsuperscriptùëãùëñ‚ãÖ‚Ñésubscriptsuperscriptùë¢ùëñùë°‚ãÖùëãX^{i}\\\\sim\\\\delta\\_{X^{i}}(\\\\cdot)+hu^{i}\\_{t}(\\\\cdot,X), for i‚àà\\[N\\]ùëñdelimited-\\[\\]ùëÅi\\\\in\\[N\\]‚ñ∑‚ñ∑\\\\triangleright eq. [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") or [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")\\\n\\\nendfor\\\n\\\nreturnXùëãX\\\n\\\nNow the main question is how to find a probability velocity utsubscriptùë¢ùë°u\\_{t} that generates the probability path defined in equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")?\\\nA key insight in Flow Matching (Lipman et al., [2022])) is that utsubscriptùë¢ùë°u\\_{t} can be constructed as a marginalization of _conditional_ probability velocities, uti‚Äã(xi,z\\|x0,x1)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1u\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1}), generating the corresponding conditional probability paths pt‚Äã(xi\\|x0,x1)subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1p\\_{t}(x^{i}\\|x\\_{0},x\\_{1}).\\\nThis can also be shown to hold in the discrete CTMC setting (Campbell et al., [2024])), where a reformulation in our context and notation is as follows.\\\n\\\n###### Theorem 2.2.\\\n\\\nGiven a conditional probability velocity uti‚Äã(xi,z\\|x0,x1)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1u\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1}) generating a conditional probability path pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t}(x\\|x\\_{0},x\\_{1}), the marginal velocity defined by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)=‚àëx0,x1‚àà\\\\gDuti‚Äã(xi,z\\|x0,x1)‚Äãpt‚Äã(x0,x1\\|z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptsubscriptùë•0subscriptùë•1\\\\gDsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1ùëßu\\_{t}^{i}(x^{i},z)=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}u\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1})p\\_{t}(x\\_{0},x\\_{1}\\|z) |  | (14) |\\\n\\\ngenerates the marginal probability path pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x), where by Bayes‚Äô rule\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(x0,x1\\|z)=pt‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Äã(x).subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1ùëßsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptùëùùë°ùë•p\\_{t}(x\\_{0},x\\_{1}\\|z)=\\\\frac{p\\_{t}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{p\\_{t}(x)}. |  | (15) |\\\n\\\nFor completeness we provide a simple proof of this theorem in [Section10.2]Conditional velocities lead to marginal velocities ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). The proof, similar to the continuous FM case, shows that utsubscriptùë¢ùë°u\\_{t} and ptsubscriptùëùùë°p\\_{t} satisfy the (discrete version of the) Continuity Equation.\\\n\\\n#### The Continuity Equation.\\\n\\\nTo provide the mathematical tool for showing that a probability velocity utsubscriptùë¢ùë°u\\_{t} does indeed generate the probability path ptsubscriptùëùùë°p\\_{t}, and also to further highlight the similarities to the continuous case, we next formulate the _Kolmogorov Equations_, which describe the state probability rate pÀôt‚Äã(x)subscriptÀôùëùùë°ùë•\\\\dot{p}\\_{t}(x), x‚àà\\\\gDùë•\\\\gDx\\\\in\\\\gD, in CTMC as a Continuity Equation (CE). The Continuity Equation, similarly to Kolmogorov Equations, describes pÀôt‚Äã(x)subscriptÀôùëùùë°ùë•\\\\dot{p}\\_{t}(x), x‚àà\\\\RealNùë•superscript\\\\RealùëÅx\\\\in\\\\Real^{N} in the _continuous case_, and is formulated as the Partial Differential Equation (PDE)\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pÀôt‚Äã(x)+\\\\divvx‚Äã(pt‚Äãut)=0,subscriptÀôùëùùë°ùë•subscript\\\\divvùë•subscriptùëùùë°subscriptùë¢ùë°0\\\\dot{p}\\_{t}(x)+\\\\divv\\_{x}(p\\_{t}u\\_{t})=0, |  | (16) |\\\n\\\nwhere the divergence operator \\\\divvx‚Äã(v)subscript\\\\divvùë•ùë£\\\\divv\\_{x}(v) applied to a vector field v:\\\\RealN‚Äã\\\\too‚Äã\\\\RealN:ùë£superscript\\\\RealùëÅ\\\\toosuperscript\\\\RealùëÅv:\\\\Real^{N}\\\\too\\\\Real^{N} is defined by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã(v)=‚àëi=1N‚àÇxivi‚Äã(x),subscript\\\\divvùë•ùë£superscriptsubscriptùëñ1ùëÅsubscriptsuperscriptùë•ùëñsuperscriptùë£ùëñùë•\\\\divv\\_{x}(v)=\\\\sum\\_{i=1}^{N}\\\\partial\\_{x^{i}}v^{i}(x), |  | (17) |\\\n\\\nand intuitively means the total flux leaving xùë•x, see [Figure2]In 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") (middle-right). This gives an intuitive explanation to the Continuity Equation: the rate of the probability pÀôt‚Äã(x)subscriptÀôùëùùë°ùë•\\\\dot{p}\\_{t}(x) of a state x‚àà\\\\RealNùë•superscript\\\\RealùëÅx\\\\in\\\\Real^{N} equals the total _incoming probability flux_, pt‚Äãutsubscriptùëùùë°subscriptùë¢ùë°p\\_{t}u\\_{t}, at xùë•x. In the discrete case (CTMC) the Continuity Equation (( [16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) holds as is, once the discrete divergence operator is properly defined, \\\\ie, to measure the outgoing flux from a discrete state. In more detail, given some vector field, which in the discrete case is a scalar-valued function over pairs of states, v:\\\\gD√ó\\\\gD‚Äã\\\\too‚Äã\\\\Real:ùë£\\\\gD\\\\gD\\\\too\\\\Realv:\\\\gD\\\\times\\\\gD\\\\too\\\\Real, the discrete divergence is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã(v)=‚àëz‚àà\\\\gD\\\\brac‚Äãv‚Äã(z,x)‚àív‚Äã(x,z),subscript\\\\divvùë•ùë£subscriptùëß\\\\gD\\\\bracùë£ùëßùë•ùë£ùë•ùëß\\\\divv\\_{x}(v)=\\\\sum\\_{z\\\\in\\\\gD}\\\\brac{v(z,x)-v(x,z)}, |  | (18) |\\\n\\\nwhere v‚Äã(z,x)ùë£ùëßùë•v(z,x) represents the flux x‚Äã\\\\too‚Äãzùë•\\\\tooùëßx\\\\too z and v‚Äã(x,z)ùë£ùë•ùëßv(x,z) represent the opposite flux z‚Äã\\\\too‚Äãxùëß\\\\tooùë•z\\\\too x; see [Figure2]In 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), right. Now, in our case (see [Figure2]In 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), middle-left), the probability flux at a state x‚àà\\\\gDùë•\\\\gDx\\\\in\\\\gD involves all sequences with at most one token difference from xùë•x, \\\\ie, the probability flux pt‚Äãutsubscriptùëùùë°subscriptùë¢ùë°p\\_{t}u\\_{t} at xùë•x takes the form v‚Äã(x,z)=pt‚Äã(z)‚Äãuti‚Äã(xi,z)ùë£ùë•ùëßsubscriptùëùùë°ùëßsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßv(x,z)=p\\_{t}(z)u\\_{t}^{i}(x^{i},z) and v‚Äã(z,x)=pt‚Äã(x)‚Äãuti‚Äã(zi,x)ùë£ùëßùë•subscriptùëùùë°ùë•superscriptsubscriptùë¢ùë°ùëñsuperscriptùëßùëñùë•v(z,x)=p\\_{t}(x)u\\_{t}^{i}(z^{i},x) for zùëßz and xùë•x that differ only in the iùëñi-th token, v‚Äã(x,x)=‚àëi=1Nuti‚Äã(xi,x)ùë£ùë•ùë•superscriptsubscriptùëñ1ùëÅsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùë•v(x,x)=\\\\sum\\_{i=1}^{N}u\\_{t}^{i}(x^{i},x), and v‚Äã(x,z)=0ùë£ùë•ùëß0v(x,z)=0 for all other (z,x)‚àà\\\\gD√ó\\\\gDùëßùë•\\\\gD\\\\gD(z,x)\\\\in\\\\gD\\\\times\\\\gD. A direct calculation now shows (see [Section10.1]Computation of the discrete divergence ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")):\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã(pt‚Äãut)=‚àí‚àëz‚àà\\\\gDpt‚Äã(z)‚Äã\\\\brac‚Äã‚àëi=1NŒ¥z‚Äã(xi¬Ø)‚Äãuti‚Äã(xi,z).subscript\\\\divvùë•subscriptùëùùë°subscriptùë¢ùë°subscriptùëß\\\\gDsubscriptùëùùë°ùëß\\\\bracsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùëßsuperscriptùë•¬Øùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\divv\\_{x}(p\\_{t}u\\_{t})=-\\\\sum\\_{z\\\\in\\\\gD}p\\_{t}(z)\\\\brac{\\\\sum\\_{i=1}^{N}\\\\delta\\_{z}(x^{\\\\bar{i}})u\\_{t}^{i}(x^{i},z)}. |  | (19) |\\\n\\\nChecking that a probability velocity utsubscriptùë¢ùë°u\\_{t} generates a probability path ptsubscriptùëùùë°p\\_{t} (in the sense of Definition [2.1]Definition 2.1. ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) amounts to verifying the Continuity Equation (( [16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))). Indeed, using arguments from Campbell et al. ( [2024])) and the discrete divergence operator, the PMF of Xt+hsubscriptùëãùë°‚ÑéX\\_{t+h} defined by sampling according to ( [12]Equation 12 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  |  | \\\\EXt‚Äã‚àèi=1N\\\\brac‚ÄãŒ¥Xt‚Äã(xi)+h‚Äãuti‚Äã(xi,Xt)=\\\\EXt‚Äã\\\\brac‚ÄãŒ¥Xt‚Äã(x)+h‚Äã‚àëi=1NŒ¥Xt‚Äã(xi¬Ø)‚Äãuti‚Äã(xi,Xt)+o‚Äã(h)subscript\\\\Esubscriptùëãùë°superscriptsubscriptproductùëñ1ùëÅ\\\\bracsubscriptùõøsubscriptùëãùë°superscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°subscript\\\\Esubscriptùëãùë°\\\\bracsubscriptùõøsubscriptùëãùë°ùë•‚Ñésuperscriptsubscriptùëñ1ùëÅsubscriptùõøsubscriptùëãùë°superscriptùë•¬Øùëñsubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°ùëú‚Ñé\\\\displaystyle\\\\E\\_{X\\_{t}}\\\\prod\\_{i=1}^{N}\\\\brac{\\\\delta\\_{X\\_{t}}(x^{i})+hu\\_{t}^{i}(x^{i},X\\_{t})}=\\\\E\\_{X\\_{t}}\\\\brac{\\\\delta\\_{X\\_{t}}(x)+h\\\\sum\\_{i=1}^{N}\\\\delta\\_{X\\_{t}}(x^{\\\\bar{i}})u^{i}\\_{t}(x^{i},X\\_{t})}+o(h) |  | (20) |\\\n|  |  | =pt‚Äã(x)‚àíh‚Äã\\\\divvx‚Äã(pt‚Äãut)+o‚Äã(h)‚Äã=([16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))‚Äãpt‚Äã(x)+h‚ÄãpÀôt‚Äã(x)+o‚Äã(h)=pt+h‚Äã(x)+o‚Äã(h),absentsubscriptùëùùë°ùë•‚Ñésubscript\\\\divvùë•subscriptùëùùë°subscriptùë¢ùë°ùëú‚Ñé[16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")subscriptùëùùë°ùë•‚ÑésubscriptÀôùëùùë°ùë•ùëú‚Ñésubscriptùëùùë°‚Ñéùë•ùëú‚Ñé\\\\displaystyle\\\\qquad\\\\quad=p\\_{t}(x)-h\\\\divv\\_{x}(p\\_{t}u\\_{t})+o(h){\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overset{(\\\\ref{e:ce})}{=}}p\\_{t}(x)+h\\\\dot{p}\\_{t}(x)+o(h)=p\\_{t+h}(x)+o(h), |  |\\\n\\\nwhere we assume Xt‚àºptsimilar-tosubscriptùëãùë°subscriptùëùùë°X\\_{t}\\\\sim p\\_{t}, the first equality uses the identity ‚àèi\\\\brac‚Äãai+h‚Äãbi=‚àèiai+h‚Äã‚àëi(‚àèj‚â†iaj)‚Äãbi+o‚Äã(h)subscriptproductùëñ\\\\bracsuperscriptùëéùëñ‚Ñésuperscriptùëèùëñsubscriptproductùëñsuperscriptùëéùëñ‚Ñésubscriptùëñsubscriptproductùëóùëñsuperscriptùëéùëósuperscriptùëèùëñùëú‚Ñé\\\\prod\\_{i}\\\\brac{a^{i}+hb^{i}}=\\\\prod\\_{i}a^{i}+h\\\\sum\\_{i}(\\\\prod\\_{j\\\\neq i}a^{j})b^{i}+o(h), the second equality uses eq. [19]Equation 19 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), and the previous-to-last equality uses the Continuity Equation (( [16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))). This shows that if the Continuity Equation holds then utsubscriptùë¢ùë°u\\_{t} generates ptsubscriptùëùùë°p\\_{t} in the sense of Definition [2.1]Definition 2.1. ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\nConditional and marginal generating velocities. We provide the probability velocities generating the conditional probability paths pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t}(x\\|x\\_{0},x\\_{1}) defined in equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). Then, using the marginalization formula in ( [14]Equation 14 ‚Ä£ Theorem 2.2. ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) we end up with a closed-form marginal velocity for the probability paths pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x). In [Section10.3]Probability velocities generating conditional probability paths ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we show\\\n\\\n###### Theorem 2.3(Probability velocity of conditional paths).\\\n\\\nA generating probability velocity for the conditional paths pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t}(x\\|x\\_{0},x\\_{1}) defined in equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z\\|x0,x1)=‚àëj=1mati,j‚Äãwj‚Äã(xi\\|x0,x1)+bti‚ÄãŒ¥z‚Äã(xi),superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1superscriptsubscriptùëó1ùëösuperscriptsubscriptùëéùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscriptsubscriptùëèùë°ùëñsubscriptùõøùëßsuperscriptùë•ùëñu\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1})=\\\\sum\\_{j=1}^{m}a\\_{t}^{i,j}w^{j}(x^{i}\\|x\\_{0},x\\_{1})+b\\_{t}^{i}\\\\delta\\_{z}(x^{i}), |  | (21) |\\\n\\\nwith ati,j=Œ∫Àôti,j‚àíŒ∫ti,j‚ÄãŒ∫Àôti,‚Ñì/Œ∫ti,‚Ñìsuperscriptsubscriptùëéùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìa\\_{t}^{i,j}=\\\\dot{\\\\kappa}\\_{t}^{i,j}-\\\\kappa\\_{t}^{i,j}\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}/\\\\kappa\\_{t}^{i,\\\\ell}, and bti=Œ∫Àôti,‚Ñì/Œ∫ti,‚Ñìsuperscriptsubscriptùëèùë°ùëñsuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìb\\_{t}^{i}=\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}/\\\\kappa\\_{t}^{i,\\\\ell} where ‚Ñì=\\\\argminj‚àà\\[m\\]‚Äã\\\\brac‚ÄãŒ∫Àôti,j/Œ∫ti,j‚Ñìsubscript\\\\argminùëódelimited-\\[\\]ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\ell=\\\\argmin\\_{j\\\\in\\[m\\]}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}/\\\\kappa\\_{t}^{i,j}}.\\\n\\\nNow, computing the marginal probability velocity using ( [14]Equation 14 ‚Ä£ Theorem 2.2. ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) applied to the conditional probability velocity in ( [21]Equation 21 ‚Ä£ Theorem 2.3 (Probability velocity of conditional paths). ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) gives\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,z)=‚àëj=1mati,j‚Äãw^tj‚Äã(xi,z)+bti,j‚ÄãŒ¥z‚Äã(xi),subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßsuperscriptsubscriptùëó1ùëösubscriptsuperscriptùëéùëñùëóùë°subscriptsuperscript^ùë§ùëóùë°superscriptùë•ùëñùëßsubscriptsuperscriptùëèùëñùëóùë°subscriptùõøùëßsuperscriptùë•ùëñu^{i}\\_{t}(x^{i},z)=\\\\sum\\_{j=1}^{m}a^{i,j}\\_{t}\\\\hat{w}^{j}\\_{t}(x^{i},z)+b^{i,j}\\_{t}\\\\delta\\_{z}(x^{i}), |  | (22) |\\\n\\\nwhere the posteriors w^tjsubscriptsuperscript^ùë§ùëóùë°\\\\hat{w}^{j}\\_{t} of wjsuperscriptùë§ùëów^{j} (that are later shown to be tractable to learn) are defined by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | w^tj‚Äã(xi,z)=‚àëx0,x1‚àà\\\\gDwj‚Äã(xi\\|x0,x1)‚Äãpt‚Äã(x0,x1\\|z),superscriptsubscript^ùë§ùë°ùëósuperscriptùë•ùëñùëßsubscriptsubscriptùë•0subscriptùë•1\\\\gDsuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1ùëß\\\\hat{w}\\_{t}^{j}(x^{i},z)=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}w^{j}(x^{i}\\|x\\_{0},x\\_{1})p\\_{t}(x\\_{0},x\\_{1}\\|z), |  | (23) |\\\n\\\nwhere pt‚Äã(x0,x1\\|z)subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1ùëßp\\_{t}(x\\_{0},x\\_{1}\\|z) (defined in ( [15]Equation 15 ‚Ä£ Theorem 2.2. ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) is the posterior probability of x0,x1subscriptùë•0subscriptùë•1x\\_{0},x\\_{1} conditioned on the current state Xt=zsubscriptùëãùë°ùëßX\\_{t}=z.\\\nA useful instantiation of the general velocity in ( [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is when considering the path family in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), for which w1‚Äã(xi\\|x0,x1)=Œ¥x1‚Äã(xi)superscriptùë§1conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•1superscriptùë•ùëñw^{1}(x^{i}\\|x\\_{0},x\\_{1})=\\\\delta\\_{x\\_{1}}(x^{i}), w2‚Äã(xi\\|x0,x1)=Œ¥x0‚Äã(xi)superscriptùë§2conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•0superscriptùë•ùëñw^{2}(x^{i}\\|x\\_{0},x\\_{1})=\\\\delta\\_{x\\_{0}}(x^{i}), Œ∫ti,1=Œ∫tsuperscriptsubscriptùúÖùë°ùëñ1subscriptùúÖùë°\\\\kappa\\_{t}^{i,1}=\\\\kappa\\_{t}, Œ∫ti,2=1‚àíŒ∫tsuperscriptsubscriptùúÖùë°ùëñ21subscriptùúÖùë°\\\\kappa\\_{t}^{i,2}=1-\\\\kappa\\_{t}, Œ∫Àôt‚â•0subscriptÀôùúÖùë°0\\\\dot{\\\\kappa}\\_{t}\\\\geq 0 (\\\\ie, monotonically non-decreasing in tùë°t) and in this case ( [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) reads as\\\n\\\nuti‚Äã(xi,z)=Œ∫Àôt1‚àíŒ∫t‚Äã\\\\brac‚Äãp1\\|t‚Äã(xi\\|z)‚àíŒ¥z‚Äã(xi)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßsubscriptÀôùúÖùë°1subscriptùúÖùë°\\\\bracsubscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñùëßsubscriptùõøùëßsuperscriptùë•ùëñu^{i}\\_{t}(x^{i},z)=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}\\\\brac{p\\_{1\\|t}(x^{i}\\|z)-\\\\delta\\_{z}(x^{i})}(24)\\\n\\\nwhere we use the notation p1\\|t‚Äã(xi\\|Xt)=‚àëx0,x1Œ¥x1‚Äã(xi)‚Äãpt‚Äã(x0,x1\\|Xt)subscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°subscriptsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•1superscriptùë•ùëñsubscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1subscriptùëãùë°p\\_{1\\|t}(x^{i}\\|X\\_{t})=\\\\sum\\_{x\\_{0},x\\_{1}}\\\\delta\\_{x\\_{1}}(x^{i})p\\_{t}(x\\_{0},x\\_{1}\\|X\\_{t}) for the _probability denoiser_.\\\n\\\n|  | Continuous Flow Matching | Discrete Flow Matching |\\\n| --- | --- | --- |\\\n| Marginal prob. | pt‚Äã(x)=‚àëx0,x1‚àèi=1Npt‚Äã(xi\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)subscriptùëùùë°ùë•subscriptsubscriptùë•0subscriptùë•1superscriptsubscriptproductùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1p\\_{t}(x)=\\\\sum\\_{x\\_{0},x\\_{1}}\\\\prod\\_{i=1}^{N}p\\_{t}(x^{i}\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1}) |\\\n| Conditional prob. | pt‚Äã(xi\\|x0,x1)=Œ¥Œ∫t‚Äãx1+(1‚àíŒ∫t)‚Äãx0‚Äã(xi)subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùúÖùë°subscriptùë•11subscriptùúÖùë°subscriptùë•0superscriptùë•ùëñp\\_{t}(x^{i}\\|x\\_{0},x\\_{1})=\\\\delta\\_{\\\\kappa\\_{t}x\\_{1}+(1-\\\\kappa\\_{t})x\\_{0}}(x^{i}) | pt‚Äã(xi\\|x0,x1)=Œ∫t‚ÄãŒ¥x1‚Äã(xi)+(1‚àíŒ∫t)‚ÄãŒ¥x0‚Äã(xi)subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùúÖùë°subscriptùõøsubscriptùë•1superscriptùë•ùëñ1subscriptùúÖùë°subscriptùõøsubscriptùë•0superscriptùë•ùëñp\\_{t}(x^{i}\\|x\\_{0},x\\_{1})=\\\\kappa\\_{t}\\\\delta\\_{x\\_{1}}(x^{i})+(1-\\\\kappa\\_{t})\\\\delta\\_{x\\_{0}}(x^{i}) |\\\n| VF- _Denoiser_ | uti‚Äã(Xt)=Œ∫Àôt1‚àíŒ∫t‚Äã\\\\brac‚Äãx^1\\|ti‚Äã(Xt)‚àíXtisubscriptsuperscriptùë¢ùëñùë°subscriptùëãùë°subscriptÀôùúÖùë°1subscriptùúÖùë°\\\\bracsubscriptsuperscript^ùë•ùëñconditional1ùë°subscriptùëãùë°superscriptsubscriptùëãùë°ùëñu^{i}\\_{t}(X\\_{t})=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}\\\\brac{{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}{\\\\hat{x}}^{i}\\_{1\\|t}(X\\_{t})}-X\\_{t}^{i}} | uti‚Äã(xi,Xt)=Œ∫Àôt1‚àíŒ∫t‚Äã\\\\brac‚Äãp1\\|t‚Äã(xi\\|Xt)‚àíŒ¥Xt‚Äã(xi)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°subscriptÀôùúÖùë°1subscriptùúÖùë°\\\\bracsubscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°subscriptùõøsubscriptùëãùë°superscriptùë•ùëñu^{i}\\_{t}(x^{i},X\\_{t})=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}\\\\brac{{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}p\\_{1\\|t}(x^{i}\\|X\\_{t})}-\\\\delta\\_{X\\_{t}}(x^{i})} |\\\n| VF- _Noise-pred_ | uti‚Äã(Xt)=Œ∫ÀôtŒ∫t‚Äã\\\\brac‚ÄãXti‚àíx^0\\|ti‚Äã(Xt)subscriptsuperscriptùë¢ùëñùë°subscriptùëãùë°subscriptÀôùúÖùë°subscriptùúÖùë°\\\\bracsubscriptsuperscriptùëãùëñùë°subscriptsuperscript^ùë•ùëñconditional0ùë°subscriptùëãùë°u^{i}\\_{t}(X\\_{t})=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}\\\\brac{X^{i}\\_{t}-{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}{\\\\hat{x}}^{i}\\_{0\\|t}(X\\_{t})}} | uti‚Äã(xi,Xt)=Œ∫ÀôtŒ∫t‚Äã\\\\brac‚ÄãŒ¥Xt‚Äã(xi)‚àíp0\\|t‚Äã(xi\\|Xt)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°subscriptÀôùúÖùë°subscriptùúÖùë°\\\\bracsubscriptùõøsubscriptùëãùë°superscriptùë•ùëñsubscriptùëùconditional0ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°u^{i}\\_{t}(x^{i},X\\_{t})=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}\\\\brac{\\\\delta\\_{X\\_{t}}(x^{i})-{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}p\\_{0\\|t}(x^{i}\\|X\\_{t})}} |\\\n\\\nTable 1: Generating (marginal) velocity fields have identical form for the continuous and discrete FM when using denoiser/noise-prediction parameterization; x^1\\|t‚Äã(z)=\\\\EX1‚àºpt(‚ãÖ\\|z)‚ÄãX1{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}\\\\hat{x}\\_{1\\|t}(z)}=\\\\E\\_{X\\_{1}\\\\sim p\\_{t}(\\\\cdot\\|z)}X\\_{1} is the standard continuous denoiser (a.k.a. xùë•x-prediction) and x^0\\|t‚Äã(z)=\\\\EX0‚àºpt(‚ãÖ\\|z)‚ÄãX0{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\hat{x}\\_{0\\|t}(z)}=\\\\E\\_{X\\_{0}\\\\sim p\\_{t}(\\\\cdot\\|z)}X\\_{0} is the standard noise-prediction (a.k.a. œµitalic-œµ\\\\epsilon-prediction).\\\n\\\n#### Sampling backward in time.\\\n\\\nWe can also sample _backwards in time_ by following the sampling rule Xt‚àíhi‚àºŒ¥Xti‚Äã(‚ãÖ)‚àíh‚Äãuti‚Äã(‚ãÖ,Xt)similar-tosuperscriptsubscriptùëãùë°‚Ñéùëñsubscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésuperscriptsubscriptùë¢ùë°ùëñ‚ãÖsubscriptùëãùë°X\\_{t-h}^{i}\\\\sim\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)-hu\\_{t}^{i}(\\\\cdot,X\\_{t}). In this case ‚àíuti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß-u\\_{t}^{i}(x^{i},z) should satisfy ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")). A (backward-time) generating probability velocity can then be achieved from ( [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) with the simple change to the coefficients ati,jsubscriptsuperscriptùëéùëñùëóùë°a^{i,j}\\_{t} and bti,jsubscriptsuperscriptùëèùëñùëóùë°b^{i,j}\\_{t}, see [Section10.4]Backward-time generating probability velocity. ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). For ptsubscriptùëùùë°p\\_{t} defined with ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) the generating velocity is\\\n\\\nuti‚Äã(xi,z)=Œ∫ÀôtŒ∫t‚Äã\\\\brac‚ÄãŒ¥z‚Äã(xi)‚àíp0\\|t‚Äã(xi\\|z),subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñùëßsubscriptÀôùúÖùë°subscriptùúÖùë°\\\\bracsubscriptùõøùëßsuperscriptùë•ùëñsubscriptùëùconditional0ùë°conditionalsuperscriptùë•ùëñùëßu^{i}\\_{t}(x^{i},z)=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}\\\\brac{\\\\delta\\_{z}(x^{i})-p\\_{0\\|t}(x^{i}\\|z)},(25)\\\n\\\nwhere in this case p0\\|t‚Äã(xi\\|z)=‚àëx0,x1‚àà\\\\gDŒ¥x0‚Äã(xi)‚Äãpt‚Äã(x0,x1\\|z)subscriptùëùconditional0ùë°conditionalsuperscriptùë•ùëñùëßsubscriptsubscriptùë•0subscriptùë•1\\\\gDsubscriptùõøsubscriptùë•0superscriptùë•ùëñsubscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1ùëßp\\_{0\\|t}(x^{i}\\|z)=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}\\\\delta\\_{x\\_{0}}(x^{i})p\\_{t}(x\\_{0},x\\_{1}\\|z) is the _probability noise-prediction_.\\\n\\\nRemarkably, the generating velocity fields in [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") take the _exact same form_ as the generating (a.k.a. marginal) velocity fields in _continuous_ flow matching when parameterized via the denoiser or noise-prediction parameterizations and using the same schedulers, see [Table1]In The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [Section10.9]Continuous Flow Matching ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") for explanation of the continuous case. In [Section10.4]Backward-time generating probability velocity. ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we provide the backward-time version of Theorem [2.3]Theorem 2.3 (Probability velocity of conditional paths). ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\n#### Corrector sampling.\\\n\\\nCombining the forward-time u^tsubscript^ùë¢ùë°\\\\hat{u}\\_{t} (eq. [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) and backward-time uÀátsubscriptÀáùë¢ùë°\\\\check{u}\\_{t} (eq. [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), \\\\ie,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | u¬Øti‚Äã(xi,z)=Œ±t‚Äãu^ti‚Äã(xi,z)‚àíŒ≤t‚ÄãuÀáti‚Äã(xi,z),superscriptsubscript¬Øùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptùõºùë°superscriptsubscript^ùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptùõΩùë°superscriptsubscriptÀáùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\bar{u}\\_{t}^{i}(x^{i},z)=\\\\alpha\\_{t}\\\\hat{u}\\_{t}^{i}(x^{i},z)-\\\\beta\\_{t}\\\\check{u}\\_{t}^{i}(x^{i},z), |  | (26) |\\\n\\\nprovides a valid forward-time probability velocity field (\\\\ie, satisfies ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) for t‚àà(0,1)ùë°01t\\\\in(0,1) as long as Œ±t,Œ≤t>0subscriptùõºùë°subscriptùõΩùë°0\\\\alpha\\_{t},\\\\beta\\_{t}>0. This velocity field can be used for two types of corrector sampling: (i) When Œ±t‚àíŒ≤t=1subscriptùõºùë°subscriptùõΩùë°1\\\\alpha\\_{t}-\\\\beta\\_{t}=1 sampling with u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} leads to _corrector sampling_ where intuitively each step moves 1+Œ±t1subscriptùõºùë°1+\\\\alpha\\_{t} forward in time and ‚àíŒ±tsubscriptùõºùë°-\\\\alpha\\_{t} backwards, which allows reintroducing noise into the sampling process; and (ii) when Œ±t‚àíŒ≤t=0subscriptùõºùë°subscriptùõΩùë°0\\\\alpha\\_{t}-\\\\beta\\_{t}=0 sampling with u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} when fixing t‚àà(0,1)ùë°01t\\\\in(0,1) leads to _corrector iterations_ where limit samples distribute according to ptsubscriptùëùùë°p\\_{t}. In  [Section10.6]Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we prove:\\\n\\\n###### Theorem 2.4.\\\n\\\nFor perfectly trained posteriors and Œ±t,Œ≤t>0subscriptùõºùë°subscriptùõΩùë°0\\\\alpha\\_{t},\\\\beta\\_{t}>0, t‚àà(0,1)ùë°01t\\\\in(0,1), u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} in ( [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is a probability velocity, \\\\ie, satisfies ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), and: (i) For Œ±t‚àíŒ≤t=1subscriptùõºùë°subscriptùõΩùë°1\\\\alpha\\_{t}-\\\\beta\\_{t}=1, u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} provides a probability velocity generating ptsubscriptùëùùë°p\\_{t}; (ii) For Œ±t‚àíŒ≤t=0subscriptùõºùë°subscriptùõΩùë°0\\\\alpha\\_{t}-\\\\beta\\_{t}=0, repeatedly sampling with u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} at fixed t‚àà(0,1)ùë°01t\\\\in(0,1) and sufficiently small h‚Ñéh is guaranteed to converge to a sample from ptsubscriptùëùùë°p\\_{t}.\\\n\\\nOne simplification to ( [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) can be done in the case of paths constructed with conditional as in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), independent coupling œÄ‚Äã(x0,x1)=p‚Äã(x0)‚Äãq‚Äã(x1)ùúãsubscriptùë•0subscriptùë•1ùëùsubscriptùë•0ùëûsubscriptùë•1\\\\pi(x\\_{0},x\\_{1})=p(x\\_{0})q(x\\_{1}), and i.i.d. source p‚Äã(x0)=‚àèi=1Np‚Äã(x0i)ùëùsubscriptùë•0superscriptsubscriptproductùëñ1ùëÅùëùsuperscriptsubscriptùë•0ùëñp(x\\_{0})=\\\\prod\\_{i=1}^{N}p(x\\_{0}^{i}), \\\\eg, p‚Äã(x0i)ùëùsuperscriptsubscriptùë•0ùëñp(x\\_{0}^{i}) is uniform over \\[d\\]delimited-\\[\\]ùëë\\[d\\] or Œ¥\\\\dummy‚Äã(x0i)subscriptùõø\\\\dummysuperscriptsubscriptùë•0ùëñ\\\\delta\\_{\\\\dummy}(x\\_{0}^{i}). In this case, the backward-time formula in ( [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) take an equivalent simpler form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uÀáti‚Äã(xi,z)=Œ∫ÀôtŒ∫t‚Äã\\\\brac‚ÄãŒ¥z‚Äã(xi)‚àíp‚Äã(xi),superscriptsubscriptÀáùë¢ùë°ùëñsuperscriptùë•ùëñùëßsubscriptÀôùúÖùë°subscriptùúÖùë°\\\\bracsubscriptùõøùëßsuperscriptùë•ùëñùëùsuperscriptùë•ùëñ\\\\check{u}\\_{t}^{i}(x^{i},z)=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}\\\\brac{\\\\delta\\_{z}(x^{i})-p(x^{i})}, |  | (27) |\\\n\\\nwhich does not require estimation of the posterior p0\\|tsubscriptùëùconditional0ùë°p\\_{0\\|t}. See [Section10.5]Backward-time generating velocity for i.i.d. source ùëù‚Å¢(ùë•‚ÇÄ) and simple paths ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") for the derivation.\\\n\\\n#### Training.\\\n\\\nEquation [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") shows that for generating samples from a probabilty path pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) we require the posteriors w^tj‚Äã(xi\\|Xt)superscriptsubscript^ùë§ùë°ùëóconditionalsuperscriptùë•ùëñsubscriptùëãùë°\\\\hat{w}\\_{t}^{j}(x^{i}\\|X\\_{t}). Training such posteriors can be done by minimizing the loss\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\gL‚Äã(Œ∏)=‚àí‚àëj‚àà\\[m\\],i‚àà\\[N\\]\\\\Et,(X0,X1),Xt,Yji‚Äãlog‚Å°w^tj‚Äã(Yji\\|Xt;Œ∏),\\\\gLùúÉsubscriptformulae-sequenceùëódelimited-\\[\\]ùëöùëñdelimited-\\[\\]ùëÅsubscript\\\\Eùë°subscriptùëã0subscriptùëã1subscriptùëãùë°superscriptsubscriptùëåùëóùëñsuperscriptsubscript^ùë§ùë°ùëóconditionalsuperscriptsubscriptùëåùëóùëñsubscriptùëãùë°ùúÉ\\\\gL(\\\\theta)=-\\\\sum\\_{j\\\\in\\[m\\],i\\\\in\\[N\\]}\\\\E\\_{t,(X\\_{0},X\\_{1}),X\\_{t},Y\\_{j}^{i}}\\\\log\\\\hat{w}\\_{t}^{j}(Y\\_{j}^{i}\\|X\\_{t};\\\\theta), |  | (28) |\\\n\\\nwhere tùë°t is sampled according to some distribution in \\[0,1\\]01\\[0,1\\] (we used uniform), (X0,X1)‚àºœÄ‚Äã(X0,X1)similar-tosubscriptùëã0subscriptùëã1ùúãsubscriptùëã0subscriptùëã1(X\\_{0},X\\_{1})\\\\sim\\\\pi(X\\_{0},X\\_{1}), Xt‚àºpt‚Äã(Xt\\|X0,X1)similar-tosubscriptùëãùë°subscriptùëùùë°conditionalsubscriptùëãùë°subscriptùëã0subscriptùëã1X\\_{t}\\\\sim p\\_{t}(X\\_{t}\\|X\\_{0},X\\_{1}), and Yji‚àºwj‚Äã(Yji\\|X0,X1)similar-tosuperscriptsubscriptùëåùëóùëñsuperscriptùë§ùëóconditionalsuperscriptsubscriptùëåùëóùëñsubscriptùëã0subscriptùëã1Y\\_{j}^{i}\\\\sim w^{j}(Y\\_{j}^{i}\\|X\\_{0},X\\_{1}); Œ∏‚àà\\\\RealpùúÉsuperscript\\\\Realùëù\\\\theta\\\\in\\\\Real^{p} denotes the learnable parameters. In the common case we use in this paper of learning a single posterior, \\\\ie, the probability denoiser p1\\|tsubscriptùëùconditional1ùë°p\\_{1\\|t}, the loss takes the form \\\\gL‚Äã(Œ∏)=‚àí‚àëi‚àà\\[N\\]\\\\Et,(X0,X1),Xt‚Äãlog‚Å°p1\\|t‚Äã(X1i\\|Xt)\\\\gLùúÉsubscriptùëñdelimited-\\[\\]ùëÅsubscript\\\\Eùë°subscriptùëã0subscriptùëã1subscriptùëãùë°subscriptùëùconditional1ùë°conditionalsuperscriptsubscriptùëã1ùëñsubscriptùëãùë°\\\\gL(\\\\theta)=-\\\\sum\\_{i\\\\in\\[N\\]}\\\\E\\_{t,(X\\_{0},X\\_{1}),X\\_{t}}\\\\log p\\_{1\\|t}(X\\_{1}^{i}\\|X\\_{t}). In [Section10.7]Training ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we prove:\\\n\\\n###### Proposition 2.5.\\\n\\\nThe minimizer of \\\\gL\\\\gL\\\\gL (( [28]Equation 28 ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) is w^tj‚Äã(xi\\|Xt)superscriptsubscript^ùë§ùë°ùëóconditionalsuperscriptùë•ùëñsubscriptùëãùë°\\\\hat{w}\\_{t}^{j}(x^{i}\\|X\\_{t}) (( [23]Equation 23 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))).\\\n\\\n{NiceTabular}\\\nlcccccc\\\n\\\\CodeBefore4-6,6-6\\\n9-10\\\n\\\\BodyMethodNFELlama-2‚Üì‚Üì\\\\downarrowLlama-3‚Üì‚Üì\\\\downarrowGPT2‚Üì‚Üì\\\\downarrowEntropy\\\n\\\nData - 7.0 9.4 14.7 7.7\\\n\\\nAutoregressive 1024 31.4 54.8\\\n45.3 7.1\\\n\\\nSavinov et al. ( [2021]))200 29.545.134.75.2\\\n\\\nAustin et al. ( [2021a]))1000 697.6 768.8 837.8 7.6\\\n\\\nHan et al. ( [2022]))>>10000 73.3 203.1 99.2 4.8\\\n\\\nLou et al. ( [2023]))\\\\slashNumbers2565121024 \\\\slashNumbers38.633.727.2\\\\slashNumbers69.258.643.9\\\\slashNumbers64.353.440.5\\\\slashNumbers7.87.77.6\\\n\\\nCampbell et al. ( [2024]))\\\\slashNumbers2565121024 \\\\slashNumbers38.533.528.7 \\\\slashNumbers69.056.546.5 \\\\slashNumbers65.253.343.0 \\\\slashNumbers7.87.77.6\\\n\\\n\\\\method (( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")))\\\\slashNumbers2565121024 \\\\slashNumbers34.230.022.5 \\\\slashNumbers58.548.833.8 \\\\slashNumbers54.243.529.3 \\\\slashNumbers7.77.67.2\\\n\\\n\\\\method (( [10]Equation 10 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")))\\\\slashNumbers2565121024 \\\\slashNumbers30.027.522.3 \\\\slashNumbers48.243.531.9 \\\\slashNumbers47.741.828.1\\\n\\\\slashNumbers7.67.57.1\\\n\\\nTable 2: Generative perplexity on unconditional text generation compared to prior work.\\\n\\",
            "citations": null
          },
          "3 Related work\\": {
            "content": "\\\nIn the section we cover the most related work to ours; in [Section6]Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we cover other related work.\\\n\\\nDiscrete Flows (Campbell et al., [2024])) is probably the most related work to ours. We build upon their CTMC framework and offer the following generalizations and simplifications over their original formulation: Campbell et al.( [2024])) define a rate matrix (equivalent to our probability velocity) for generation, expressed as an expectation over the posterior, \\\\EX1i‚àºp1\\|t‚Äã(X1i\\|Xt)‚ÄãRt‚àó,i‚Äã(Xti,xi\\|X1i)subscript\\\\Esimilar-tosuperscriptsubscriptùëã1ùëñsubscriptùëùconditional1ùë°conditionalsuperscriptsubscriptùëã1ùëñsubscriptùëãùë°superscriptsubscriptùëÖùë°ùëñsuperscriptsubscriptùëãùë°ùëñconditionalsuperscriptùë•ùëñsuperscriptsubscriptùëã1ùëñ\\\\E\\_{X\\_{1}^{i}\\\\sim p\\_{1\\|t}(X\\_{1}^{i}\\|X\\_{t})}R\\_{t}^{\\*,i}(X\\_{t}^{i},x^{i}\\|X\\_{1}^{i}) where R‚àósuperscriptùëÖR^{\\*} is defined using the conditional probability path. This formulation requires computing an expectation during sampling in the general case (see their Algorithm 1) or a particular path-dependent derivation. We show, for a more general class of probability paths, there exists a unified formulation for the probability velocity in terms of the probability denoiser, \\\\ie, ( [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), or alternatively using other posteriors besides the denoiser allowing for backward-time sampling (( [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) or more elaborate path sampling (( [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))). With the probability denoiser and noise-prediction we recreate the exact same formulas as the continuous Flow Matching counterpart. Furthermore, our sampling turns out to coincides with Campbell et al.( [2024])) for the case of linear schedulers, i.e., ( [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) with Œ∫t=tsubscriptùúÖùë°ùë°\\\\kappa\\_{t}=t. However, in practice we observe that large gains in performance can be achieved by considering different paths during training and sampling. Our corrector term (( [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) also provides a unified general formula for both corrector iterations (Song et al., [2020]); Campbell et al., [2022])) and stochastic sampling of Campbell et al.( [2024])). Lastly, we opted for the term _probability velocity_ for uti‚Äã(xi,Xt)subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°u^{i}\\_{t}(x^{i},X\\_{t}) as it is not precisely a rate matrix in the state space \\\\gD√ó\\\\gD\\\\gD\\\\gD\\\\gD\\\\times\\\\gD used in CTMC since uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) for all i‚àà\\[N\\]ùëñdelimited-\\[\\]ùëÅi\\\\in\\[N\\] define multiple self-edges z‚Äã\\\\too‚Äãzùëß\\\\tooùëßz\\\\too z.\\\n\\\nMasked modeling (Ghazvininejad et al., [2019]); Chang et al., [2022])). In case of a masked model, \\\\ie, when the source distribution is p‚Äã(x)=Œ¥\\\\dummy‚Äã(x)ùëùùë•subscriptùõø\\\\dummyùë•p(x)=\\\\delta\\_{\\\\dummy}(x), we achieve an interesting connection with MaskGit showing it is actually an instance of Discrete Flow Matching with a small yet crucial change to its sampling algorithm. First, in [Section10.8]Time-independent posterior for masked modeling ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we prove that in the masked setting, the probability denoiser p1\\|tsubscriptùëùconditional1ùë°p\\_{1\\|t} is _time-independent_:\\\n\\\n###### Proposition 3.1.\\\n\\\nFor paths defined by equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") with source p‚Äã(x)=Œ¥\\\\dummy‚Äã(x)ùëùùë•subscriptùõø\\\\dummyùë•p(x)=\\\\delta\\_{\\\\dummy}(x) the posterior pt‚Äã(x0,x1\\|z)=p‚Äã(x0,x1\\|z)subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1ùëßùëùsubscriptùë•0conditionalsubscriptùë•1ùëßp\\_{t}(x\\_{0},x\\_{1}\\|z)=p(x\\_{0},x\\_{1}\\|z) is time-independent. Consequently, the probability denoiser p1\\|t‚Äã(xi\\|z)=p1‚Äã(xi\\|z)subscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñùëßsubscriptùëù1conditionalsuperscriptùë•ùëñùëßp\\_{1\\|t}(x^{i}\\|z)=p\\_{1}(x^{i}\\|z) is also time-independent.\\\n\\\nThis shows that the probability denoiser can be learned with no time dependence, similar to the unmasking probabilities in MaskGit. During sampling however, there are two main differences between our sampling and MaskGit sampling. First, unmasking of tokens in our algorithm is done according to the probability Œ¥Xt‚Äã(xi)+h‚Äãuti‚Äã(xi,Xt)subscriptùõøsubscriptùëãùë°superscriptùë•ùëñ‚Ñésubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°\\\\delta\\_{X\\_{t}}(x^{i})+hu^{i}\\_{t}(x^{i},X\\_{t}) _independently_ for each token xisuperscriptùë•ùëñx^{i}, i‚àà\\[N\\]ùëñdelimited-\\[\\]ùëÅi\\\\in\\[N\\]. This procedure is justified as it samples from the correct probability asymptotically via the derivation of the Continuity Equation [20]Equation 20 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). This is in contrast to MaskGit that prioritizes the token to be unmasked according to some _confidence_. In the experiments section we show that MaskGit‚Äôs prioritization, although has some benefit in the very low NFE regime, is actually introducing a strong bias in the sampling procedure and leads to inferior overall results. Secondly, using corrector sampling allows for reintroducing masks to already unmasked tokens in a way that is still guaranteed to produce samples from ptsubscriptùëùùë°p\\_{t}, see Theorem [2.4]Theorem 2.4. ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"); we find this to have a significant positive effect on the generation quality.\\\n\\\nDiscrete diffusion. D3PM (Austin et al., [2021a])) and Argmax flows (Hoogeboom et al., [2021])) introduced diffusion in discrete spaces by proposing a corruption process for categorical data. A later work by Campbell et al.( [2022])) introduced discrete diffusion models with continuous time, and Lou et al.( [2023])) proposed learning probability ratios, extending score matching (Song and Ermon, [2019])) to discrete spaces.\\\n\\\n{NiceTabular}\\\n\\\nlcccccc\\\n\\\\CodeBefore5-6\\\n6-7\\\n\\\\BodyMethodModel SizeNFELlama-2‚Üì‚Üì\\\\downarrowLlama-3‚Üì‚Üì\\\\downarrowEntropy\\\n\\\nLlama-3 (Reference) 8B 512 6.4 7.3 6.8\\\n\\\nLlama-2 (Reference) 7B 512 5.3 8.3 7.1\\\n\\\nAutoregressive 1.7B 512 14.3 22.3 7.2\\\n\\\nSavinov et al. ( [2021])) 1.7B 200 10.8 15.4 4.7\\\n\\\n\\\\method (U-coupling) 1.7B \\\\slashNumbersTwo256512\\\\slashNumbersTwo10.79.5 \\\\slashNumbersTwo11.210.3 \\\\slashNumbersTwo6.76.7\\\n\\\n\\\\method (C-coupling) 1.7B \\\\slashNumbersTwo256512 \\\\slashNumbersTwo10.28.9 \\\\slashNumbersTwo10.09.7 \\\\slashNumbersTwo6.86.7\\\n\\\nTable 3: Generative perplexity on conditional text generation.\\\n\\\n{NiceTabular}\\\n\\\nllcccccc\\\n\\\\CodeBefore5-7\\\n\\\\BodyMethodDataHumanEval‚Üë‚Üë\\\\uparrowMBPP (1-shot)‚Üë‚Üë\\\\uparrow\\\n\\\nPass@1 Pass@10 Pass@25 Pass@1 Pass@10 Pass@25\\\n\\\nAutoregressive Text 1.2 3.1 4.8 0.2 1.7 3.3\\\n\\\nCode 14.3 21.3 27.8 17.0 34.3 44.1\\\n\\\n\\\\method Text 1.2 2.6 4.0 0.4 1.1 3.6\\\n\\\nCode 6.7 13.4 18.0 6.7 20.6 26.5\\\n\\\n\\\\method (Oracle length)Code 11.6 18.3 20.6 13.1\\\n28.4 34.2\\\n\\\nTable 4: Execution based code generation evaluation.\\\n\\",
            "citations": null
          },
          "4 Experiments\\": {
            "content": "\\\nWe evaluate our method on the tasks of language modeling, code generation, and image generation. For language modeling, we compare the proposed method against prior work considering the widely used generative perplexity metric. We scale the models to 1.7 billion parameters and present results on coding tasks, i.e., HumanEval (Chen et al., [2021])), MBPP (Austin et al., [2021b])), demonstrating the most promising results to date in a non-autoregressive context. In image generation, we present results for a fully discrete CIFAR10 (Krizhevsky et al., [2009])). Further details of the experimental setup for each model are provided in [Section12]Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\nExperimental setup. In our experiments we used the masked source, \\\\ie, p=Œ¥\\\\dummyùëùsubscriptùõø\\\\dummyp=\\\\delta\\_{\\\\dummy}, and trained with both unconditional coupling (U-coupling, ( [4]Equation 4 ‚Ä£ 2.2 Source and target distributions ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) and conditional couplings (C-coupling, ( [5]Equation 5 ‚Ä£ 2.2 Source and target distributions ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) with the probability path defined in equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and in one case [10]Equation 10 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). We trained a probability denoiser (loss in ( [28]Equation 28 ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) and sampled using the generating velocity in ( [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) and Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). We used a particular choice of probability path scheduler Œ∫tsubscriptùúÖùë°\\\\kappa\\_{t}, as well as corrector steps defined by a scheduler Œ±tsubscriptùõºùë°\\\\alpha\\_{t} and temperature annealing. We found the choice of these schedulers to be pivotal for the model‚Äôs performance. In [Section9]Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we perform an ablation study, evaluating various scheduler choices.\\\n\\\n### 4.1 Language modeling\\\n\\\nWe experimented with our method in three settings: (i) Small model (150M parameters) - comparison to other non-autoregressive baselines in unconditional text generation; (ii) Large model (1.7B parameters) - comparison to autoregressive models in conditional text generation; and (iii) Large model (1.7B parameters) - conditional code generation. As computing exact likelihood for non-autoregressive model is a challenge, for (i),(ii) we use the generative perplexity metric ( [Section12]Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") measured with GPT2 (Radford et al., [2019])), Llama-2 (Touvron et al., [2023])), and Llama-3, and we also monitor the sentence entropy ( [Section12]Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) to measure diversity of tokens and flag repetitive sequences, which typically yield low perplexity. Throughout our experiments we noticed entropy ‚â•6absent6\\\\geq 6 usually corresponds to diverse texts. For (iii) we evaluated using the success rate of coding tasks.\\\n\\\nEvaluation against prior work. We evaluate our method against prior work on non-autoregressive modeling. For a fair comparison, all methods are trained on a 150M parameters models using the OpenWebText (Gokaslan and Cohen, [2019])) dataset. We also fix all sampling hyperparameters to the most basic settings, \\\\ie, no temperature, top probability, corrector steps, etc. For our method we tried two paths defined by equations [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [10]Equation 10 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). Results are reported in [Section2.4]Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), where our method outperforms all baselines in generative perplexity for all numbers of function evaluations (NFE).\\\n\\\nConditional text generation. In this experiment, we train both C-coupling and U-coupling 1.7B parameters \\\\method models with paths defined by ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) on a large scale data mix (Touvron et al., [2023])). [Section3]Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") presents the generative perplexity of conditional generations from our method; the conditions we used are the prefixes of the first 1000 samples in OpenWeb dataset. We also compare to existing state-of-the-art autoregressive models. Our results demonstrate that our model effectively narrows the gap in generative perplexity with autoregressive models, while maintaining an entropy comparable to the recent Llama-3 8B model. Furthermore, we note the C-coupling trained model produces slightly better perplexity in conditional tasks than the U-coupling model. In [Section14]Textual generations ‚Ä£ 13.3 Infilling ‚Ä£ 13 Code generation - qualitative examples ‚Ä£ MaskGIT (Chang et al., 2022). ‚Ä£ 12.2 Image ‚Ä£ 12 Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we present qualitative conditional samples produced by our U-coupling model.\\\n\\\nCode generation. Here we trained our basic setting of a 1.7B parameters \\\\method model with U-coupling and path as in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) on a code-focused data mix (Roziere et al., [2023])). [Section3]Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") presents results on HumanEval and MBPP (1-shot) for pass@{1,10,25}11025\\\\{1,10,25\\\\}. In [Section3]Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), ‚ÄòOracle length‚Äô evaluates the performance of our model when conditioning on the length of the solution. This is done by inserting an ‚Äòend of text‚Äô token in the same position of the ground truth solution. Our method achieves non-trivial results on both tasks, which to the best of our knowledge is the first instance of a non-autoregressive method being capable of non-trivial coding tasks. In [Section8]Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), we analyze the proposed method for code infilling, which can be achieved as our model allows non-autoregressive generation.\\\nLastly, in [Section13]Code generation - qualitative examples ‚Ä£ MaskGIT (Chang et al., 2022). ‚Ä£ 12.2 Image ‚Ä£ 12 Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we show qualitative examples of success and failure cases produced by our model on the coding tasks, and in [Section13.3]Infilling ‚Ä£ 13 Code generation - qualitative examples ‚Ä£ MaskGIT (Chang et al., 2022). ‚Ä£ 12.2 Image ‚Ä£ 12 Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we show examples of code infilling.\\\n\\\n### 4.2 Image generation\\\n\\\n![Refer to caption]Figure 3: FID vs. NFE on CIFAR10.\\\n\\\nWe performed a fully discrete image generation, without using any metric or neighboring information between color values. We trained an \\\\method model with U-coupling and path as in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) on CIFAR10 to predict discrete color value for tokens, \\\\ie, d=256ùëë256d=256, with sequence length of N=32√ó32√ó3ùëÅ32323N=32\\\\times 32\\\\times 3. For generative quality we evaluate the Fr√©chet Inception Distance (FID) (Heusel et al., [2017])). Ablations for the probability path schedulers are provided in [Figure8]In Scheduler ablation. ‚Ä£ 12.2 Image ‚Ä£ 12 Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") in the [Section12]Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\nIn [Figure3]In 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we compare our method with: (i) MaskGIT (Chang et al., [2022])); and (ii) (Campbell et al., [2024])) which coincides with our method for a linear scheduler. More details in [Section12]Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). As can be seen in the [Figure3]In 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), our method outperforms both baselines, achieving 3.633.633.63 FID at 102410241024 NFE. As discussed above, MaskGit sampling performs better for low NFE but quickly deteriorates for higher NFE. We attribute this to a bias introduced in the sampling process via the confidence mechanism.\\\n\\",
            "citations": null
          },
          "5 Conclusions and future work\\": {
            "content": "\\\nWe introduce Discrete Flow Matching, a generalization of continuous flow matching and discrete flows that provides a large design space of discrete non-autoregressive generative models. Searching within this space we were able to train large scale language models that produce generated text with an improved generative perplexity compared to current non-autoregressive methods and able to solve coding tasks at rates not achievable before with non-autoregressive models, as far as we are aware. While reducing the number of network evaluations required to generate a discrete sample compared to autoregressive models, Discrete FM still does not achieve the level of sampling efficiency achieved by its continuous counterpart, flagging an interesting future work direction. Another interesting direction is to explore the space of probability paths in ( [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) (or a generalization of which) beyond what we have done in this paper. We believe discrete non-autoregressive models have the potential to close the gap and even surpass autoregressive models as well as unlock novel applications and use cases. As our work introduces an alternative modeling paradigm to discrete sequential data such as language and code, we feel it does not introduce significant societal risks beyond those that already exist with previous large language models.\\\n\\",
            "citations": null
          },
          "6 Related works, continuation\\": {
            "content": "\\\nWe provide here some more details on relevant related works.\\\n\\\n#### Continuous diffusion and flows.\\\n\\\nAnother line of works has been exploring the use of continuous space diffusion for discrete data, typically operating in the logits space (Dieleman et al., [2022]); Li et al., [2022]); Han et al., [2022]); Lin et al., [2022]); Chen et al., [2022])). An additional body of work has been focusing on the adoption of latent diffusion-like modeling (Lovelace et al., [2022]); He et al., [2022])). Stark et al.( [2024])) proposed to learn a continuous Flow Matching on the probability simplex with Dirichlet paths.\\\n\\\n#### Autoregressive modeling.\\\n\\\nAutoregressive models have been a significant area of focus in recent years, particularly in the context of natural language processing and machine learning (Zhao et al., [2023])). Autoregressive modeling, in its most fundamental form, utilizes the chain rule to learn the joint sequence probability by breaking it down into next-token conditional probabilities. GPT-2 (Radford et al., [2019])), showcased the power of autoregressive language models in generating coherent and contextually relevant text over long passages. Its successor, GPT-3 (Brown et al., [2020])), further pushed the boundaries, demonstrating impressive performance across a range of tasks without task-specific training data. Later models were adapted to other domains such as, code (Roziere et al., [2023]); Li et al., [2023]); Chen et al., [2021])), biology (Zhang et al., [2024]); Ferruz and H√∂cker, [2022]); Madani et al., [2023])), math (Romera-Paredes et al., [2024]); Imani et al., [2023]); Ahn et al., [2024])), audio (Kreuk et al., [2022]); Copet et al., [2024]); Hassid et al., [2024])) and more.\\\n\\\n#### Masked generative modeling.\\\n\\\nMasked generative modeling proposes to mask a variable portion of the input sequence and training a model to predict this masked section.  Ghazvininejad et al.( [2019])) proposed Mask-Predict, a masked language modeling with parallel decoding.  Savinov et al.( [2021])) extended the mask-modeling approach by employing an additional loss term that incorporates rolling model predictions. MaskGIT (Chang et al., [2022])) followed a similar path, for the task of class-conditioned image synthesis,  Chang et al.( [2023])) extended this approach to high-quality textually guided image generation over low-resolution images followed by a super-resolution module. Recently, Ziv et al.( [2024])) proposed a text-to-music method, which relies on the MaskGIT foundations while observing that span masking boosts the quality of the generated sequence significantly.\\\n\\",
            "citations": null
          },
          "7 Further implementation details\\": {
            "content": "\\\n#### Safe sampling.\\\n\\\nWhen sampling according to Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") using the generating probability velocity in ( [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), an arbitrary step size h>0‚Ñé0h>0 can make some probabilities in Œ¥Xti‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,Xt)subscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésuperscriptsubscriptùë¢ùë°ùëñ‚ãÖsubscriptùëãùë°\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)+hu\\_{t}^{i}(\\\\cdot,X\\_{t}) negative and consequently require clamping and injecting further error into the sampling process that can in turn accumulate to a non-negligible global sampling error. A simple fix that guarantees a valid probability distribution while keeping the o‚Äã(h)ùëú‚Ñéo(h) sampling error at the relatively manageable price of potentially more function evaluations is using the following adaptive step size in Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"): at time t‚àà\\[0,1)ùë°01t\\\\in\\[0,1) use\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | hadaptive=min‚Å°\\\\set‚Äãh,mini‚Å°\\\\abs‚ÄãŒ∫ti,‚ÑìŒ∫Àôti,‚Ñì.subscript‚Ñéadaptive\\\\set‚Ñésubscriptùëñ\\\\abssuperscriptsubscriptùúÖùë°ùëñ‚ÑìsuperscriptsubscriptÀôùúÖùë°ùëñ‚Ñìh\\_{\\\\text{\\\\tiny adaptive}}=\\\\min\\\\set{h,\\\\min\\_{i}\\\\abs{\\\\frac{\\\\kappa\\_{t}^{i,\\\\ell}}{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}}}. |  | (29) |\\\n\\\nAs can be verified with the general probability velocity formula in ( [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), the above choice for hadaptivesubscript‚Ñéadaptiveh\\_{\\\\text{\\\\tiny adaptive}} guarantees Œ¥Xti‚Äã(‚ãÖ)+h‚Äãuti‚Äã(‚ãÖ,Xt)subscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésuperscriptsubscriptùë¢ùë°ùëñ‚ãÖsubscriptùëãùë°\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)+hu\\_{t}^{i}(\\\\cdot,X\\_{t}) is a valid PMF. As mostly used in this paper, for the probability denoiser parameterization (( [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) the adaptive step is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | hadaptive=min‚Å°\\\\set‚Äãh,1‚àíŒ∫tŒ∫Àôt.subscript‚Ñéadaptive\\\\set‚Ñé1subscriptùúÖùë°subscriptÀôùúÖùë°h\\_{\\\\text{\\\\tiny adaptive}}=\\\\min\\\\set{h,\\\\frac{1-\\\\kappa\\_{t}}{\\\\dot{\\\\kappa}\\_{t}}}. |  | (30) |\\\n\\\nWith the corrector sampling (equations [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [51]Equation 51 ‚Ä£ Proof 10.5 (Proof (Theorem 2.4).). ‚Ä£ 10.6 Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) we have the adaptive step:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | hadaptive=min‚Å°\\\\set‚Äãh,\\\\brac‚ÄãŒ±t‚ÄãŒ∫Àôt1‚àíŒ∫t+Œ≤t‚ÄãŒ∫ÀôtŒ∫t‚àí1.subscript‚Ñéadaptive\\\\set‚Ñé\\\\bracsubscriptùõºùë°subscriptÀôùúÖùë°1subscriptùúÖùë°superscriptsubscriptùõΩùë°subscriptÀôùúÖùë°subscriptùúÖùë°1h\\_{\\\\text{\\\\tiny adaptive}}=\\\\min\\\\set{h,\\\\brac{\\\\frac{\\\\alpha\\_{t}\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}+\\\\frac{\\\\beta\\_{t}\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}}^{-1}}. |  | (31) |\\\n\\\n#### Conditioning.\\\n\\\nIn our unconditional coupling (U-coupling), see ( [5]Equation 5 ‚Ä£ 2.2 Source and target distributions ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), we define the conditioning pattern based on prefixes of random length N0<NsubscriptùëÅ0ùëÅN\\_{0}<N, \\\\ie,\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | \\\\sI=(1,‚Ä¶,1‚èûN0,0,‚Ä¶,0‚èûN‚àíN0).\\\\sIsuperscript‚èû1‚Ä¶1subscriptùëÅ0superscript‚èû0‚Ä¶0ùëÅsubscriptùëÅ0\\\\sI=(\\\\overbrace{1,\\\\ldots,1}^{N\\_{0}},\\\\overbrace{0,\\\\ldots,0}^{N-N\\_{0}}). |  |\\\n\\\nDuring the training phase, we sample N0‚àºùí∞‚Äã(0,N)similar-tosubscriptùëÅ0ùí∞0ùëÅN\\_{0}\\\\sim\\\\mathcal{U}(0,N) and adjust the input sequence in accordance with the mask \\\\sI\\\\sI\\\\sI.\\\n\\\nDuring conditional sampling with Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") we replace, after each update step, the relevant tokens with the conditioned ones, \\\\ie, X~=\\\\sI‚äôY+(\\\\one‚àí\\\\sI)‚äôX~ùëãdirect-product\\\\sIùëådirect-product\\\\one\\\\sIùëã\\\\tilde{X}=\\\\sI\\\\odot Y+(\\\\one-\\\\sI)\\\\odot X, where XùëãX is the current sample, YùëåY is the condition, and \\\\sI\\\\sI\\\\sI is the condition‚Äôs mask.\\\n\\\n#### NFE bound.\\\n\\\nFor mask modeling, \\\\ie, p=Œ¥\\\\dummyùëùsubscriptùõø\\\\dummyp=\\\\delta\\_{\\\\dummy}, we have seen that the probability denoiser is time-independent (see Proposition [3.1]Proposition 3.1. ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")). Consequently, when sampling with Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and utsubscriptùë¢ùë°u\\_{t} from ( [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) without corrector sampling one is not required to recompute the forward pass p1\\|t(‚ãÖ\\|Xt)p\\_{1\\|t}(\\\\cdot\\|X\\_{t}) if Xtsubscriptùëãùë°X\\_{t} is identical to Xt‚àíhsubscriptùëãùë°‚ÑéX\\_{t-h} (\\\\ie, no \\\\dummy\\\\dummy\\\\dummy has been unmasked). This means that the NFE of Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") in this case is bounded by the number of tokens NùëÅN.\\\n\\\n#### Post training scheduler change.\\\n\\\nFor a trained posterior w^t‚Äã(xi\\|z)subscript^ùë§ùë°conditionalsuperscriptùë•ùëñùëß\\\\hat{w}\\_{t}(x^{i}\\|z) of a conditional probability path as in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) with a scheduler Œ∫tsubscriptùúÖùë°\\\\kappa\\_{t}, the velocity is given by equations [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") or [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), where w^t‚Äã(xi\\|z)subscript^ùë§ùë°conditionalsuperscriptùë•ùëñùëß\\\\hat{w}\\_{t}(x^{i}\\|z) is either p1\\|t‚Äã(xi\\|z)subscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñùëßp\\_{1\\|t}(x^{i}\\|z) or p0\\|t‚Äã(xi\\|z)subscriptùëùconditional0ùë°conditionalsuperscriptùë•ùëñùëßp\\_{0\\|t}(x^{i}\\|z) respectively. In this case, we can apply the velocities in equations [24]Equation 24 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") for sampling with any scheduler Œ∫t‚Ä≤subscriptsuperscriptùúÖ‚Ä≤ùë°\\\\kappa^{\\\\prime}\\_{t}, using the change of scheduler formula for posteriors,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | w^t‚Ä≤‚Äã(xi\\|z)=w^t‚Ä≤‚Äã(xi\\|z),superscriptsubscript^ùë§ùë°‚Ä≤conditionalsuperscriptùë•ùëñùëßsubscript^ùë§superscriptùë°‚Ä≤conditionalsuperscriptùë•ùëñùëß\\\\hat{w}\\_{t}^{\\\\prime}(x^{i}\\|z)=\\\\hat{w}\\_{t^{\\\\prime}}(x^{i}\\|z), |  | (32) |\\\n\\\nwhere w^t‚Ä≤‚Äã(xi\\|z)subscriptsuperscript^ùë§‚Ä≤ùë°conditionalsuperscriptùë•ùëñùëß\\\\hat{w}^{\\\\prime}\\_{t}(x^{i}\\|z), is the posterior of the scheduler Œ∫t‚Ä≤subscriptsuperscriptùúÖ‚Ä≤ùë°\\\\kappa^{\\\\prime}\\_{t}, t‚Ä≤=Œ∫Œ∫t‚Ä≤‚àí1superscriptùë°‚Ä≤subscriptsuperscriptùúÖ1subscriptsuperscriptùúÖ‚Ä≤ùë°t^{\\\\prime}=\\\\kappa^{-1}\\_{\\\\kappa^{\\\\prime}\\_{t}}, and Œ∫‚àí1superscriptùúÖ1\\\\kappa^{-1} is the inverse of Œ∫ùúÖ\\\\kappa. The scheduler change formula in ( [32]Equation 32 ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is proved in Proposition [10.8]Proposition 10.8. ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). We note that by Proposition [3.1]Proposition 3.1. ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), for mask modeling, \\\\ie, p=Œ¥\\\\dummyùëùsubscriptùõø\\\\dummyp=\\\\delta\\_{\\\\dummy}, the posterior w^t‚Äã(xi\\|z)subscript^ùë§ùë°conditionalsuperscriptùë•ùëñùëß\\\\hat{w}\\_{t}(x^{i}\\|z) is time independent. Hence, in that case, the posterior is not affected by a scheduler change.\\\n\\",
            "citations": null
          },
          "8 Code infilling\\": {
            "content": "\\\n![Refer to caption]Figure 4: Pass@1 and compiles@1 scores for the 1.5B parameter models as a function of the input masking rations on HumanEval.\\\n\\\nWe additionally evaluate the proposed method considering the task of code infilling. In which, we are provided with an input prompt that contains various spans of masked tokens, and our goal is to predict them based on the unmasked ones. See [Figure1]In 1 Introduction ‚Ä£ Discrete Flow Matching\") (middle and right sub-figures) for a visual example. Notice, this evaluation setup is the most similar to the training process.\\\n\\\nFor that, we randomly mask tokens with respect to several masking rations, p‚àà{0.0,0.1,0.2,‚Ä¶,1.0}ùëù0.00.10.2‚Ä¶1.0p\\\\in\\\\{0.0,0.1,0.2,\\\\dots,1.0\\\\}, from HumanEval and report both pass@1 and compiles@1 metrics. For the purpose of this analysis, we provide the oracle length for each masked span. In other words, the model predicts the masked tokens for already given maks length. Results for the 1.5B parameters models can be seen in [Figure4]In 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). As expected, both pass@1 and compiles@1 keep improving as we decrease the level of input masking. Interestingly, when considering the fully masked sequence, providing the oracle prediction length significantly improves the pass@1 scores (6.7 vs. 11.6).\\\n\\",
            "citations": null
          },
          "9 Ablations\\": {
            "content": "\\\n![Refer to caption](a) Path scheduler, cubic poly.\\\n\\\n![Refer to caption](b) Corrector scheduler ta‚Äã(1‚àít)bsuperscriptùë°ùëésuperscript1ùë°ùëèt^{a}(1-t)^{b}.\\\n\\\n![Refer to caption](c) Temperature scheduler (1‚àít)asuperscript1ùë°ùëé(1-t)^{a}.\\\n\\\n#### Train and sampling path scheduler choice (Œ∫tsubscriptùúÖùë°\\\\kappa\\_{t}).\\\n\\\nWe study how the choice of the probability path scheduler affects the model performance. For that, we consider a parametric family of cubic polynomial with parameters a,bùëéùëèa,b:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ∫t‚âú‚àí2‚Äãt3+3‚Äãt2+a‚Äã(t3‚àí2‚Äãt2+t)+b‚Äã(t3‚àít2).‚âúsubscriptùúÖùë°2superscriptùë°33superscriptùë°2ùëésuperscriptùë°32superscriptùë°2ùë°ùëèsuperscriptùë°3superscriptùë°2\\\\kappa\\_{t}\\\\triangleq-2t^{3}+3t^{2}+a(t^{3}-2t^{2}+t)+b(t^{3}-t^{2}). |  | (33) |\\\n\\\nNote that Œ∫0=0subscriptùúÖ00\\\\kappa\\_{0}=0 and Œ∫1=0subscriptùúÖ10\\\\kappa\\_{1}=0 and aùëéa and bùëèb are setting the derivative of Œ∫tsubscriptùúÖùë°\\\\kappa\\_{t} at t=0ùë°0t=0 and t=1ùë°1t=1, respectively. We visualize this Œ∫tsubscriptùúÖùë°\\\\kappa\\_{t} with choices of a,b‚àà{0,1,2}ùëéùëè012a,b\\\\in\\\\{0,1,2\\\\} in [Figure5(a)]In 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\n![Refer to caption]Figure 6: Path scheduler choice during training using various of constant temperature values.\\\n\\\nTo test the effect of path schedulers in training we have trained 150M parameters models for all choices of a,b‚àà{0,1,2,3}ùëéùëè0123a,b\\\\in\\\\{0,1,2,3\\\\}. We then generate 1000 samples from each model. The samples are computed using Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") with the path scheduler the model was trained on, and with temperature levels œÑ‚àà{0.8,0.9,1}ùúè0.80.91\\\\tau\\\\in\\\\{0.8,0.9,1\\\\}, where temperature is applied via\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p1\\|tœÑ‚Äã(xi\\|Xt)=œÑ‚àí1‚Äãlog‚Å°p1\\|t‚Äã(xi\\|Xt).subscriptsuperscriptùëùùúèconditional1ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°superscriptùúè1subscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°p^{\\\\tau}\\_{1\\|t}(x^{i}\\|X\\_{t})=\\\\tau^{-1}\\\\log p\\_{1\\|t}(x^{i}\\|X\\_{t}). |  | (34) |\\\n\\\nWe then evaluate the generative perplexity of these samples with GPT-2. [Figure6]In Train and sampling path scheduler choice (ùúÖ_ùë°). ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") shows the results. The graphs indicate that, in the context of text modality, the cubic polynomial scheduler with a‚â°0,b‚â°2formulae-sequenceùëé0ùëè2a\\\\equiv 0,b\\\\equiv 2 (equivalent to a square function) achieves the highest performance. Consequently, we exclusively used this scheduler for the language models.\\\n\\\n![Refer to caption]Figure 7: Corrector scheduler ablation.\\\n\\\n#### Corrector scheduler.\\\n\\\nIn our experiments we only applied corrector sampling to our large models (U-coupling and C-coupling; 1.7B parameters). We used the optimal path schedulers from previous section and considered the following parametric family of schedulers for the corrector sampling:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ±t=1+Œ±‚Äãta‚Äã(1‚àít)b,subscriptùõºùë°1ùõºsuperscriptùë°ùëésuperscript1ùë°ùëè\\\\alpha\\_{t}=1+\\\\alpha t^{a}(1-t)^{b}, |  | (35) |\\\n\\\nwhere, we set Œ≤t=Œ±t‚àí1subscriptùõΩùë°subscriptùõºùë°1\\\\beta\\_{t}=\\\\alpha\\_{t}-1 and generate 1000 samples using Algorithm [1]Algorithm 1 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") with parameter values a,b‚àà\\\\set‚Äã0,0.25,0.5formulae-sequenceùëéùëè\\\\set00.250.5a,b\\\\in\\\\set{0,0.25,0.5} and Œ±‚àà\\\\set‚Äã10,15,20ùõº\\\\set101520\\\\alpha\\\\in\\\\set{10,15,20}. We then evaluated generative perplexity for these samples with Llama-2, showing results in [Figure7]In Train and sampling path scheduler choice (ùúÖ_ùë°). ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"). These plots indicate that smaller values of aùëéa and bùëèb result in lower perplexity values, albeit with somewhat reduced entropy. We therefore opted for setting a=b=0.25ùëéùëè0.25a=b=0.25 that strikes a good balance between perplexity and entropy.\\\n\\\n#### Temperature scheduling.\\\n\\\nFor temperature sampling, we consider the following scheduler:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | œÑt=œÑ‚Äã(1‚àít)2.subscriptùúèùë°ùúèsuperscript1ùë°2\\\\tau\\_{t}=\\\\tau(1-t)^{2}. |  | (36) |\\\n\\",
            "citations": null
          },
          "10 Theory and proofs\\": {
            "content": "\\\n### 10.1 Computation of the discrete divergence\\\n\\\nWe present the computation of the discrete divergence in ( [18]Equation 18 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), \\\\ie,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã(pt‚Äãut)=‚àí‚àëz‚àà\\\\gDpt‚Äã(z)‚Äã\\\\brac‚Äã‚àëi=1NŒ¥z‚Äã(xi¬Ø)‚Äãuti‚Äã(xi,z).subscript\\\\divvùë•subscriptùëùùë°subscriptùë¢ùë°subscriptùëß\\\\gDsubscriptùëùùë°ùëß\\\\bracsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùëßsuperscriptùë•¬Øùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\divv\\_{x}(p\\_{t}u\\_{t})=-\\\\sum\\_{z\\\\in\\\\gD}p\\_{t}(z)\\\\brac{\\\\sum\\_{i=1}^{N}\\\\delta\\_{z}(x^{\\\\bar{i}})u\\_{t}^{i}(x^{i},z)}. |  | (37) |\\\n\\\nComputing the discrete divergence (( [18]Equation 18 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) of the flux pt‚Äãutsubscriptùëùùë°subscriptùë¢ùë°p\\_{t}u\\_{t} at a state xùë•x amounts to adding outgoing flux from xùë•x and subtracting the incoming flux into xùë•x. Using the fact that Œ¥z‚Äã(xi¬Ø)=1subscriptùõøùëßsuperscriptùë•¬Øùëñ1\\\\delta\\_{z}(x^{\\\\bar{i}})=1 if and only if z=xùëßùë•z=x or zùëßz differs from xùë•x only at the iùëñi-th token, gives:\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã(pt‚Äãut)subscript\\\\divvùë•subscriptùëùùë°subscriptùë¢ùë°\\\\displaystyle\\\\divv\\_{x}(p\\_{t}u\\_{t}) | =‚àëz‚àà\\\\gD‚àëi=1NŒ¥x‚Äã(zi¬Ø)‚Äã\\\\parrabsentsubscriptùëß\\\\gDsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùë•superscriptùëß¬Øùëñ\\\\parr\\\\displaystyle=\\\\sum\\_{z\\\\in\\\\gD}\\\\sum\\_{i=1}^{N}\\\\delta\\_{x}(z^{\\\\bar{i}})\\\\parr |  |\\\n|  |  | =pt‚Äã(x)‚Äã‚àëi=1N‚àëzi\\\\brac‚Äã‚àëzi¬ØŒ¥x‚Äã(zi¬Ø)‚èû=1‚Äãuti‚Äã(zi,x)‚àí‚àëz‚àà\\\\gD‚àëi=1NŒ¥x‚Äã(zi¬Ø)‚Äãpt‚Äã(z)‚Äãuti‚Äã(xi,z)absentsubscriptùëùùë°ùë•superscriptsubscriptùëñ1ùëÅsubscriptsuperscriptùëßùëñsuperscript‚èû\\\\bracsubscriptsuperscriptùëß¬Øùëñsubscriptùõøùë•superscriptùëß¬Øùëñabsent1subscriptsuperscriptùë¢ùëñùë°superscriptùëßùëñùë•subscriptùëß\\\\gDsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùë•superscriptùëß¬Øùëñsubscriptùëùùë°ùëßsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\displaystyle=p\\_{t}(x)\\\\sum\\_{i=1}^{N}\\\\sum\\_{z^{i}}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overbrace{\\\\brac{\\\\sum\\_{z^{\\\\bar{i}}}\\\\delta\\_{x}(z^{\\\\bar{i}})}}^{=1}}u^{i}\\_{t}(z^{i},x)-\\\\sum\\_{z\\\\in\\\\gD}\\\\sum\\_{i=1}^{N}\\\\delta\\_{x}(z^{\\\\bar{i}})p\\_{t}(z)u\\_{t}^{i}(x^{i},z) |  |\\\n|  |  | =pt‚Äã(x)‚Äã‚àëi=1N\\\\brac‚Äã‚àëziuti‚Äã(zi,x)‚èû=0‚àí‚àëz‚àà\\\\gD‚àëi=1NŒ¥x‚Äã(zi¬Ø)‚Äãpt‚Äã(z)‚Äãuti‚Äã(xi,z)‚Äã‚ñ∑ ([13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))absentsubscriptùëùùë°ùë•superscriptsubscriptùëñ1ùëÅsuperscript‚èû\\\\bracsubscriptsuperscriptùëßùëñsubscriptsuperscriptùë¢ùëñùë°superscriptùëßùëñùë•absent0subscriptùëß\\\\gDsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùë•superscriptùëß¬Øùëñsubscriptùëùùë°ùëßsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß‚ñ∑ ([13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))\\\\displaystyle=p\\_{t}(x)\\\\sum\\_{i=1}^{N}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overbrace{\\\\brac{\\\\sum\\_{z^{i}}u^{i}\\_{t}(z^{i},x)}}^{=0}}-\\\\sum\\_{z\\\\in\\\\gD}\\\\sum\\_{i=1}^{N}\\\\delta\\_{x}(z^{\\\\bar{i}})p\\_{t}(z)u\\_{t}^{i}(x^{i},z)\\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\qquad\\\\hfill$\\\\triangleright$ \\\\eqref{e:rate\\_conds}}} |  |\\\n|  |  | =‚àí‚àëz‚àà\\\\gD‚àëi=1NŒ¥x‚Äã(zi¬Ø)‚Äãpt‚Äã(z)‚Äãuti‚Äã(xi,z),absentsubscriptùëß\\\\gDsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùë•superscriptùëß¬Øùëñsubscriptùëùùë°ùëßsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\displaystyle=-\\\\sum\\_{z\\\\in\\\\gD}\\\\sum\\_{i=1}^{N}\\\\delta\\_{x}(z^{\\\\bar{i}})p\\_{t}(z)u\\_{t}^{i}(x^{i},z), |  |\\\n\\\nthat gives ( [37]Equation 37 ‚Ä£ 10.1 Computation of the discrete divergence ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) after noting that Œ¥x‚Äã(zi¬Ø)=Œ¥z‚Äã(xi¬Ø)subscriptùõøùë•superscriptùëß¬Øùëñsubscriptùõøùëßsuperscriptùë•¬Øùëñ\\\\delta\\_{x}(z^{\\\\bar{i}})=\\\\delta\\_{z}(x^{\\\\bar{i}}).\\\n\\\n### 10.2 Conditional velocities lead to marginal velocities\\\n\\\nWe provide a simple proof for Theorem [2.2]Theorem 2.2. ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), originally proved in (Campbell et al., [2024])):\\\n{reptheorem}thm:cond\\_to\\_marginal\\\nGiven a conditional probability velocity uti‚Äã(xi,Xt\\|x0,x1)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1u\\_{t}^{i}(x^{i},X\\_{t}\\|x\\_{0},x\\_{1}) generating a conditional probability path pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t}(x\\|x\\_{0},x\\_{1}), the marginal velocity defined by\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,Xt)=‚àëx0,x1‚àà\\\\gDuti‚Äã(xi,Xt\\|x0,x1)‚Äãpt‚Äã(x0,x1\\|Xt),superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°subscriptsubscriptùë•0subscriptùë•1\\\\gDsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1subscriptùëãùë°u\\_{t}^{i}(x^{i},X\\_{t})=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}u\\_{t}^{i}(x^{i},X\\_{t}\\|x\\_{0},x\\_{1})p\\_{t}(x\\_{0},x\\_{1}\\|X\\_{t}), |  | (38) |\\\n\\\ngenerates the marginal probability path pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x), where by Bayes‚Äô rule\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(x0,x1\\|Xt)=pt‚Äã(Xt\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Äã(x).subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1subscriptùëãùë°subscriptùëùùë°conditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptùëùùë°ùë•p\\_{t}(x\\_{0},x\\_{1}\\|X\\_{t})=\\\\frac{p\\_{t}(X\\_{t}\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{p\\_{t}(x)}. |  | (39) |\\\n\\\n###### Proof 10.1(Proof (Theorem [2.2]Theorem 2.2. ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))).\\\n\\\nWe start by taking the time derivative of the marginal probability path, pt‚Äã(x)=‚àëx0,x1pt‚Äã(xi\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)subscriptùëùùë°ùë•subscriptsubscriptùë•0subscriptùë•1subscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1p\\_{t}(x)=\\\\sum\\_{x\\_{0},x\\_{1}}p\\_{t}(x^{i}\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1}), as follows,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pÀôt‚Äã(x)subscriptÀôùëùùë°ùë•\\\\displaystyle\\\\dot{p}\\_{t}(x) | =‚àëx0,x1pÀôt‚Äã(x\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)absentsubscriptsubscriptùë•0subscriptùë•1subscriptÀôùëùùë°conditionalùë•subscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}}\\\\dot{p}\\_{t}(x\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1}) |  |\\\n|  |  | =‚àëx0,x1\\\\parr‚Äã‚àëzpt‚Äã(z\\|x0,x1)‚Äã\\\\brac‚Äã‚àëi=1NŒ¥z‚Äã(xi¬Ø)‚Äãuti‚Äã(xi,z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)‚Äã‚ñ∑ Continuity Equation ([16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))absentsubscriptsubscriptùë•0subscriptùë•1\\\\parrsubscriptùëßsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1\\\\bracsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùëßsuperscriptùë•¬Øùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1‚ñ∑ Continuity Equation ([16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}}\\\\parr{\\\\sum\\_{z}p\\_{t}(z\\|x\\_{0},x\\_{1})\\\\brac{\\\\sum\\_{i=1}^{N}\\\\delta\\_{z}(x^{\\\\bar{i}})u\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1})}}\\\\pi(x\\_{0},x\\_{1})\\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\qquad\\\\hfill$\\\\triangleright$ Continuity Equation (\\\\ref{e:ce})}} |  |\\\n|  |  | =‚àëzpt‚Äã(z)‚Äã\\\\brac‚Äã‚àëi=1NŒ¥z‚Äã(xi¬Ø)‚Äã\\\\parr‚Äã‚àëx0,x1uti‚Äã(xi,z\\|x0,x1)‚Äãpt‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Äã(z)absentsubscriptùëßsubscriptùëùùë°ùëß\\\\bracsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùëßsuperscriptùë•¬Øùëñ\\\\parrsubscriptsubscriptùë•0subscriptùë•1superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1subscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptùëùùë°ùëß\\\\displaystyle=\\\\sum\\_{z}{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}p\\_{t}(z)}\\\\brac{\\\\sum\\_{i=1}^{N}\\\\delta\\_{z}(x^{\\\\bar{i}})\\\\parr{\\\\sum\\_{x\\_{0},x\\_{1}}u\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1})\\\\frac{p\\_{t}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}p\\_{t}(z)}}}} |  |\\\n|  |  | =‚àëzpt‚Äã(z)‚Äã\\\\brac‚Äã‚àëi=1NŒ¥z‚Äã(xi¬Ø)‚Äãuti‚Äã(xi,z)absentsubscriptùëßsubscriptùëùùë°ùëß\\\\bracsuperscriptsubscriptùëñ1ùëÅsubscriptùõøùëßsuperscriptùë•¬Øùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëß\\\\displaystyle=\\\\sum\\_{z}p\\_{t}(z)\\\\brac{\\\\sum\\_{i=1}^{N}\\\\delta\\_{z}(x^{\\\\bar{i}})u\\_{t}^{i}(x^{i},z)} |  |\\\n|  |  | =‚àí\\\\divvx‚Äã(pt‚Äãut)absentsubscript\\\\divvùë•subscriptùëùùë°subscriptùë¢ùë°\\\\displaystyle=-\\\\divv\\_{x}(p\\_{t}u\\_{t}) |  |\\\n\\\nNow since uti‚Äã(xi,z)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñùëßu\\_{t}^{i}(x^{i},z) is a convex combinations of uti‚Äã(xi,z\\|x0,x1)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1u\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1}) and these satisfy ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) then also uti‚Äã(xi,Xt)superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°u\\_{t}^{i}(x^{i},X\\_{t}) satisfies ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")).\\\n\\\n### 10.3 Probability velocities generating conditional probability paths\\\n\\\nEquation [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") with the coefficients ati,jsubscriptsuperscriptùëéùëñùëóùë°a^{i,j}\\_{t} and btisubscriptsuperscriptùëèùëñùë°b^{i}\\_{t} are provided below,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,Xt\\|x0,x1)=‚àëj=1m\\\\brac‚ÄãŒ∫Àôti,j‚àíŒ∫ti,j‚ÄãŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚èûati,j‚Äãwj‚Äã(xi\\|x0,x1)+\\\\brac‚ÄãŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚èûbti‚ÄãŒ¥Xt‚Äã(xi),subscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1superscriptsubscriptùëó1ùëösuperscript‚èû\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìsubscriptsuperscriptùëéùëñùëóùë°superscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscript‚èû\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìsubscriptsuperscriptùëèùëñùë°subscriptùõøsubscriptùëãùë°superscriptùë•ùëñu^{i}\\_{t}(x^{i},X\\_{t}\\|x\\_{0},x\\_{1})=\\\\sum\\_{j=1}^{m}{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}\\\\overbrace{\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}-\\\\kappa\\_{t}^{i,j}\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}}^{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}a^{i,j}\\_{t}}}}w^{j}(x^{i}\\|x\\_{0},x\\_{1})+{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}\\\\overbrace{\\\\brac{\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}}^{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}b^{i}\\_{t}}}}\\\\delta\\_{X\\_{t}}(x^{i}), |  | (40) |\\\n\\\nwhere\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñì=‚Ñì‚Äã(i,t)‚Äã\\\\defe‚Äã\\\\argminj‚àà\\[m\\]‚Äã\\\\brac‚ÄãŒ∫Àôti,j/Œ∫ti,j.‚Ñì‚Ñìùëñùë°\\\\defesubscript\\\\argminùëódelimited-\\[\\]ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\ell=\\\\ell(i,t)\\\\defe\\\\argmin\\_{j\\\\in\\[m\\]}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}/\\\\kappa\\_{t}^{i,j}}. |  | (41) |\\\n\\\n{reptheorem}\\\n\\\nthm:pvf\\_of\\_p\\_t\\_cond\\\n\\[Probability velocity of conditional paths\\]\\\nA generating probability velocity for the conditional paths pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t}(x\\|x\\_{0},x\\_{1}) defined in equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") is\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,Xt\\|x0,x1)=‚àëj=1mati,j‚Äãwj‚Äã(xi\\|x0,x1)+bti‚ÄãŒ¥Xt‚Äã(xi),superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1superscriptsubscriptùëó1ùëösuperscriptsubscriptùëéùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscriptsubscriptùëèùë°ùëñsubscriptùõøsubscriptùëãùë°superscriptùë•ùëñu\\_{t}^{i}(x^{i},X\\_{t}\\|x\\_{0},x\\_{1})=\\\\sum\\_{j=1}^{m}a\\_{t}^{i,j}w^{j}(x^{i}\\|x\\_{0},x\\_{1})+b\\_{t}^{i}\\\\delta\\_{X\\_{t}}(x^{i}), |  | (42) |\\\n\\\nwith ati,j=Œ∫Àôti,j‚àíŒ∫ti,j‚ÄãŒ∫Àôti,‚Ñì/Œ∫ti,‚Ñìsuperscriptsubscriptùëéùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìa\\_{t}^{i,j}=\\\\dot{\\\\kappa}\\_{t}^{i,j}-\\\\kappa\\_{t}^{i,j}\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}/\\\\kappa\\_{t}^{i,\\\\ell}, and bti=Œ∫Àôti,‚Ñì/Œ∫ti,‚Ñìsuperscriptsubscriptùëèùë°ùëñsuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìb\\_{t}^{i}=\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}/\\\\kappa\\_{t}^{i,\\\\ell} where ‚Ñì=\\\\argminj‚àà\\[m\\]‚Äã\\\\brac‚ÄãŒ∫Àôti,j/Œ∫ti,j‚Ñìsubscript\\\\argminùëódelimited-\\[\\]ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\ell=\\\\argmin\\_{j\\\\in\\[m\\]}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}/\\\\kappa\\_{t}^{i,j}}.\\\n\\\n###### Proof 10.2(Proof (Theorem [2.3]Theorem 2.3 (Probability velocity of conditional paths). ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))).\\\n\\\nFirst, let us show that ( [40]Equation 40 ‚Ä£ 10.3 Probability velocities generating conditional probability paths ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) satisfies the conditions in ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")): Fix Xt‚àà\\\\gDsubscriptùëãùë°\\\\gDX\\_{t}\\\\in\\\\gD, and\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àëxiuti‚Äã(xi,Xt\\|x0,x1)subscriptsuperscriptùë•ùëñsubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñconditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1\\\\displaystyle\\\\sum\\_{x^{i}}u^{i}\\_{t}(x^{i},X\\_{t}\\|x\\_{0},x\\_{1}) | =‚àëxi\\\\brac‚Äã‚àëj=1m\\\\brac‚ÄãŒ∫Àôti,j‚àíŒ∫ti,j‚ÄãŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚Äãwj‚Äã(xi\\|x0,x1)+Œ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚ÄãŒ¥Xt‚Äã(xi)absentsubscriptsuperscriptùë•ùëñ\\\\bracsuperscriptsubscriptùëó1ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìsuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìsubscriptùõøsubscriptùëãùë°superscriptùë•ùëñ\\\\displaystyle=\\\\sum\\_{x^{i}}\\\\brac{\\\\sum\\_{j=1}^{m}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}-\\\\kappa\\_{t}^{i,j}\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}{w}^{j}(x^{i}\\|x\\_{0},x\\_{1})+\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}\\\\delta\\_{X\\_{t}}(x^{i})} |  |\\\n|  |  | =‚àëj=1m\\\\brac‚ÄãŒ∫Àôti,j‚àíŒ∫ti,j‚ÄãŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì+Œ∫Àôti,‚ÑìŒ∫ti,‚Ñìabsentsuperscriptsubscriptùëó1ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚ÑìsuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñì\\\\displaystyle=\\\\sum\\_{j=1}^{m}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}-\\\\kappa\\_{t}^{i,j}\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}+\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}} |  |\\\n|  |  | =‚àëj=1mŒ∫Àôti,j+Œ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚Äã\\\\parr‚Äã1‚àí‚àëj=1mŒ∫ti,j‚Äã‚ñ∑‚àëjŒ∫ti,j=1, and ‚àëjŒ∫Àôti,j=0absentsuperscriptsubscriptùëó1ùëösubscriptsuperscriptÀôùúÖùëñùëóùë°superscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñì\\\\parr1superscriptsubscriptùëó1ùëösuperscriptsubscriptùúÖùë°ùëñùëó‚ñ∑‚àëjŒ∫ti,j=1, and ‚àëjŒ∫Àôti,j=0\\\\displaystyle=\\\\sum\\_{j=1}^{m}\\\\dot{\\\\kappa}^{i,j}\\_{t}+\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}\\\\parr{1-\\\\sum\\_{j=1}^{m}\\\\kappa\\_{t}^{i,j}}\\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\qquad\\\\qquad\\\\quad\\\\hfill$\\\\triangleright$ $\\\\sum\\_{j}\\\\kappa\\_{t}^{i,j}=1$, and $\\\\sum\\_{j}\\\\dot{\\\\kappa}\\_{t}^{i,j}=0$}} |  |\\\n|  |  | =0.absent0\\\\displaystyle=0. |  |\\\n\\\nand for xi‚â†Xtisuperscriptùë•ùëñsuperscriptsubscriptùëãùë°ùëñx^{i}\\\\neq X\\_{t}^{i} we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,Xt\\|x0,x1)=‚àëj=1m\\\\brac‚ÄãŒ∫Àôti,jŒ∫ti,j‚àíŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚ÄãŒ∫ti,j‚Äãwj‚Äã(xi\\|x0,x1)‚â•0superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1superscriptsubscriptùëó1ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•10u\\_{t}^{i}(x^{i},X\\_{t}\\|x\\_{0},x\\_{1})=\\\\sum\\_{j=1}^{m}\\\\brac{\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,j}}{\\\\kappa\\_{t}^{i,j}}-\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}\\\\kappa\\_{t}^{i,j}{w}^{j}(x^{i}\\|x\\_{0},x\\_{1})\\\\geq 0 |  | (43) |\\\n\\\nsince Œ∫ti,j‚â•0superscriptsubscriptùúÖùë°ùëñùëó0\\\\kappa\\_{t}^{i,j}\\\\geq 0, w^t‚Äã(xi\\|z)‚â•0subscript^ùë§ùë°conditionalsuperscriptùë•ùëñùëß0\\\\hat{w}\\_{t}(x^{i}\\|z)\\\\geq 0, and Œ∫Àôti,jŒ∫ti,j‚àíŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚â•0superscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñì0\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,j}}{\\\\kappa\\_{t}^{i,j}}-\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}\\\\geq 0 since ‚Ñì=\\\\argminj‚àà\\[m\\]‚ÄãŒ∫Àôti,jŒ∫ti,j‚Ñìsubscript\\\\argminùëódelimited-\\[\\]ùëösuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\ell=\\\\argmin\\_{j\\\\in\\[m\\]}\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,j}}{\\\\kappa\\_{t}^{i,j}}.\\\nSecond, we show that utsubscriptùë¢ùë°u\\_{t} satisfies the Continuity Equation (( [16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))).\\\nTo that end we write ( [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) as\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | w‚Ñì‚Äã(xi\\|x0,x1)=1Œ∫ti,‚Ñì‚Äã\\\\brac‚Äãpt‚Äã(xi\\|x0,x1)‚àí‚àëj‚â†‚ÑìŒ∫ti,j‚Äãwj‚Äã(xi\\|x0,x1),superscriptùë§‚Ñìconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•11superscriptsubscriptùúÖùë°ùëñ‚Ñì\\\\bracsubscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùëó‚ÑìsuperscriptsubscriptùúÖùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1w^{\\\\ell}(x^{i}\\|x\\_{0},x\\_{1})=\\\\frac{1}{\\\\kappa\\_{t}^{i,\\\\ell}}\\\\brac{p\\_{t}(x^{i}\\|x\\_{0},x\\_{1})-\\\\sum\\_{j\\\\neq\\\\ell}\\\\kappa\\_{t}^{i,j}w^{j}(x^{i}\\|x\\_{0},x\\_{1})}, |  | (44) |\\\n\\\nwhere ‚Ñì=\\\\argminj‚àà\\[m\\]‚ÄãŒ∫Àôti,jŒ∫ti,j‚Ñìsubscript\\\\argminùëódelimited-\\[\\]ùëösuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\ell=\\\\argmin\\_{j\\\\in\\[m\\]}\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,j}}{\\\\kappa\\_{t}^{i,j}}. Now by differentiating pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t}(x\\|x\\_{0},x\\_{1}) we get\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1\\\\displaystyle p\\_{t}(x\\|x\\_{0},x\\_{1}) | =‚àèi=1Npt‚Äã(xi\\|x0,x1)absentsuperscriptsubscriptproductùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\prod\\_{i=1}^{N}p\\_{t}(x^{i}\\|x\\_{0},x\\_{1}) |  |\\\n|  | pÀôt‚Äã(x\\|x0,x1)subscriptÀôùëùùë°conditionalùë•subscriptùë•0subscriptùë•1\\\\displaystyle\\\\dot{p}\\_{t}(x\\|x\\_{0},x\\_{1}) | =‚àëi=1Npt‚Äã(xi¬Ø\\|x0,x1)‚ÄãpÀôt‚Äã(xi\\|x0,x1)absentsuperscriptsubscriptùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1subscriptÀôùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\sum\\_{i=1}^{N}p\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})\\\\dot{p}\\_{t}(x^{i}\\|x\\_{0},x\\_{1}) |  |\\\n|  |  | =‚àëi=1Npt‚Äã(xi¬Ø\\|x0,x1)‚Äã\\\\brac‚Äã‚àëj=1mŒ∫Àôti,j‚Äãwj‚Äã(xi\\|x0,x1)absentsuperscriptsubscriptùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1\\\\bracsuperscriptsubscriptùëó1ùëösuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\sum\\_{i=1}^{N}p\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})\\\\brac{\\\\sum\\_{j=1}^{m}\\\\dot{\\\\kappa}\\_{t}^{i,j}w^{j}(x^{i}\\|x\\_{0},x\\_{1})} |  |\\\n|  |  | =‚àëi=1Npt‚Äã(xi¬Ø\\|x0,x1)‚Äã\\\\brac‚Äã‚àëj‚â†‚ÑìŒ∫Àôti,j‚Äãwj‚Äã(xi\\|x0,x1)+Œ∫Àôti,‚Ñì‚Äãw‚Ñì‚Äã(xi\\|x0,x1)absentsuperscriptsubscriptùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1\\\\bracsubscriptùëó‚ÑìsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscriptsubscriptÀôùúÖùë°ùëñ‚Ñìsuperscriptùë§‚Ñìconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\sum\\_{i=1}^{N}p\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})\\\\brac{\\\\sum\\_{j\\\\neq\\\\ell}\\\\dot{\\\\kappa}\\_{t}^{i,j}w^{j}(x^{i}\\|x\\_{0},x\\_{1})+\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}w^{\\\\ell}(x^{i}\\|x\\_{0},x\\_{1})} |  |\\\n|  |  | =‚àëi=1Npt‚Äã(xi¬Ø\\|x0,x1)‚Äã\\\\brac‚Äã‚àëj=1m\\\\brac‚ÄãŒ∫Àôti,j‚àíŒ∫ti,j‚ÄãŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚èûati,j‚Äãwj‚Äã(xi\\|x0,x1)+Œ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚èûbti‚Äãpt‚Äã(xi\\|x0,x1)‚Äã‚ñ∑ ([44]Equation 44 ‚Ä£ Proof 10.2 (Proof (Theorem 2.3)). ‚Ä£ 10.3 Probability velocities generating conditional probability paths ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))absentsuperscriptsubscriptùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1\\\\bracsuperscriptsubscriptùëó1ùëösuperscript‚èû\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìsuperscriptsubscriptùëéùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscript‚èûsuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚Ñìsuperscriptsubscriptùëèùë°ùëñsubscriptùëùùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1‚ñ∑ ([44]Equation 44 ‚Ä£ Proof 10.2 (Proof (Theorem 2.3)). ‚Ä£ 10.3 Probability velocities generating conditional probability paths ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))\\\\displaystyle=\\\\sum\\_{i=1}^{N}p\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})\\\\brac{\\\\sum\\_{j=1}^{m}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overbrace{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}-\\\\kappa\\_{t}^{i,j}\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}}}^{a\\_{t}^{i,j}}}w^{j}(x^{i}\\|x\\_{0},x\\_{1})+{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overbrace{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}}^{b\\_{t}^{i}}}p\\_{t}(x^{i}\\|x\\_{0},x\\_{1})}\\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\qquad\\\\hfill$\\\\triangleright$ \\\\eqref{ae:w\\_ell\\_cond}}} |  |\\\n|  |  | =‚àëi=1N\\\\brac‚Äã‚àëj=1mati,j‚Äã\\\\brac‚Äã‚àëzŒ¥x‚Äã(zi¬Ø)‚Äãpt‚Äã(z\\|x0,x1)‚èû=pt‚Äã(xi¬Ø\\|x0,x1)‚Äãwj‚Äã(xi\\|x0,x1)+bti‚Äã\\\\brac‚Äã‚àëzŒ¥x‚Äã(zi¬Ø)‚ÄãŒ¥x‚Äã(zi)‚Äãpt‚Äã(z\\|x0,x1)‚èû=pt‚Äã(x\\|x0,x1)absentsuperscriptsubscriptùëñ1ùëÅ\\\\bracsuperscriptsubscriptùëó1ùëösuperscriptsubscriptùëéùë°ùëñùëósuperscript‚èû\\\\bracsubscriptùëßsubscriptùõøùë•superscriptùëß¬Øùëñsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1absentsubscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1superscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscriptsubscriptùëèùë°ùëñsuperscript‚èû\\\\bracsubscriptùëßsubscriptùõøùë•superscriptùëß¬Øùëñsubscriptùõøùë•superscriptùëßùëñsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1absentsubscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1\\\\displaystyle=\\\\sum\\_{i=1}^{N}\\\\brac{\\\\sum\\_{j=1}^{m}a\\_{t}^{i,j}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overbrace{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\brac{\\\\sum\\_{z}\\\\delta\\_{x}(z^{\\\\bar{i}})p\\_{t}(z\\|x\\_{0},x\\_{1})}}}^{=p\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})}}w^{j}(x^{i}\\|x\\_{0},x\\_{1})+b\\_{t}^{i}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overbrace{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\brac{\\\\sum\\_{z}\\\\delta\\_{x}(z^{\\\\bar{i}})\\\\delta\\_{x}(z^{i})p\\_{t}(z\\|x\\_{0},x\\_{1})}}}^{=p\\_{t}(x\\|x\\_{0},x\\_{1})}}} |  |\\\n|  |  | =‚àëzpt‚Äã(z\\|x0,x1)‚Äã‚àëi=1NŒ¥x‚Äã(zi¬Ø)‚Äã\\\\brac‚Äã‚àëj=1mati,j‚Äãwj‚Äã(xi\\|x0,x1)+bti‚ÄãŒ¥x‚Äã(zi)‚èûuti‚Äã(xi,z\\|x0,x1)‚Äã‚ñ∑Œ¥x‚Äã(zi)=Œ¥z‚Äã(xi),Œ¥x‚Äã(zi¬Ø)=Œ¥z‚Äã(xi¬Ø)absentsubscriptùëßsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1superscriptsubscriptùëñ1ùëÅsubscriptùõøùë•superscriptùëß¬Øùëñsuperscript‚èû\\\\bracsuperscriptsubscriptùëó1ùëösuperscriptsubscriptùëéùë°ùëñùëósuperscriptùë§ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1superscriptsubscriptùëèùë°ùëñsubscriptùõøùë•superscriptùëßùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalùëßsubscriptùë•0subscriptùë•1‚ñ∑Œ¥x(zi)=Œ¥z(xi),Œ¥x(zi¬Ø)=Œ¥z(xi¬Ø)\\\\displaystyle=\\\\sum\\_{z}{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}p\\_{t}(z\\|x\\_{0},x\\_{1})}\\\\sum\\_{i=1}^{N}\\\\delta\\_{x}(z^{\\\\bar{i}}){\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overbrace{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\brac{\\\\sum\\_{j=1}^{m}a\\_{t}^{i,j}w^{j}(x^{i}\\|x\\_{0},x\\_{1})+b\\_{t}^{i}\\\\delta\\_{x}(z^{i})}}}^{u\\_{t}^{i}(x^{i},z\\|x\\_{0},x\\_{1})}}\\\\quad\\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\hfill$\\\\triangleright$ $\\\\delta\\_{x}(z^{i})=\\\\delta\\_{z}(x^{i}),\\ \\\\delta\\_{x}(z^{\\\\bar{i}})=\\\\delta\\_{z}(x^{\\\\bar{i}})$}} |  |\\\n|  |  | =‚àí\\\\divvx(pt(‚ãÖ\\|x0,x1)ut(‚ãÖ\\|x0,x1)),\\\\displaystyle=-\\\\divv\\_{x}(p\\_{t}(\\\\cdot\\|x\\_{0},x\\_{1})u\\_{t}(\\\\cdot\\|x\\_{0},x\\_{1})), |  |\\\n\\\nas required.\\\n\\\n### 10.4 Backward-time generating probability velocity.\\\n\\\nHere we prove the equivalent of Theorem [2.3]Theorem 2.3 (Probability velocity of conditional paths). ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") for backward-time generating probability field. But first, let us justify the backward sampling formula,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Xt‚àíhi‚àºŒ¥Xti‚Äã(‚ãÖ)‚àíh‚Äãuti‚Äã(‚ãÖ,Xt).similar-tosuperscriptsubscriptùëãùë°‚Ñéùëñsubscriptùõøsuperscriptsubscriptùëãùë°ùëñ‚ãÖ‚Ñésuperscriptsubscriptùë¢ùë°ùëñ‚ãÖsubscriptùëãùë°X\\_{t-h}^{i}\\\\sim\\\\delta\\_{X\\_{t}^{i}}(\\\\cdot)-hu\\_{t}^{i}(\\\\cdot,X\\_{t}). |  | (45) |\\\n\\\nSimilar to ( [20]Equation 20 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  |  | \\\\EXt‚Äã‚àèi=1N\\\\brac‚ÄãŒ¥Xt‚Äã(xi)‚àíh‚Äãuti‚Äã(xi,Xt)=\\\\EXt‚Äã\\\\brac‚ÄãŒ¥Xt‚Äã(x)‚àíh‚Äã‚àëi=1NŒ¥Xt‚Äã(xi¬Ø)‚Äãuti‚Äã(xi,Xt)+o‚Äã(h)subscript\\\\Esubscriptùëãùë°superscriptsubscriptproductùëñ1ùëÅ\\\\bracsubscriptùõøsubscriptùëãùë°superscriptùë•ùëñ‚Ñésuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°subscript\\\\Esubscriptùëãùë°\\\\bracsubscriptùõøsubscriptùëãùë°ùë•‚Ñésuperscriptsubscriptùëñ1ùëÅsubscriptùõøsubscriptùëãùë°superscriptùë•¬Øùëñsubscriptsuperscriptùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°ùëú‚Ñé\\\\displaystyle\\\\E\\_{X\\_{t}}\\\\prod\\_{i=1}^{N}\\\\brac{\\\\delta\\_{X\\_{t}}(x^{i})-hu\\_{t}^{i}(x^{i},X\\_{t})}=\\\\E\\_{X\\_{t}}\\\\brac{\\\\delta\\_{X\\_{t}}(x)-h\\\\sum\\_{i=1}^{N}\\\\delta\\_{X\\_{t}}(x^{\\\\bar{i}})u^{i}\\_{t}(x^{i},X\\_{t})}+o(h) |  |\\\n|  |  | =pt‚Äã(x)+h‚Äã\\\\divvx‚Äã(pt‚Äãut)+o‚Äã(h)‚Äã=([16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))‚Äãpt‚Äã(x)‚àíh‚ÄãpÀôt‚Äã(x)+o‚Äã(h)=pt‚àíh‚Äã(x)+o‚Äã(h).absentsubscriptùëùùë°ùë•‚Ñésubscript\\\\divvùë•subscriptùëùùë°subscriptùë¢ùë°ùëú‚Ñé[16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")subscriptùëùùë°ùë•‚ÑésubscriptÀôùëùùë°ùë•ùëú‚Ñésubscriptùëùùë°‚Ñéùë•ùëú‚Ñé\\\\displaystyle\\\\qquad\\\\quad=p\\_{t}(x)+h\\\\divv\\_{x}(p\\_{t}u\\_{t})+o(h){\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\overset{(\\\\ref{e:ce})}{=}}p\\_{t}(x)-h\\\\dot{p}\\_{t}(x)+o(h)=p\\_{t-h}(x)+o(h). |  |\\\n\\\nTherefore if the Continuity equation holds and ‚àíutsubscriptùë¢ùë°-u\\_{t} satisfies the conditions in ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) then given Xt‚àºptsimilar-tosubscriptùëãùë°subscriptùëùùë°X\\_{t}\\\\sim p\\_{t}, ( [45]Equation 45 ‚Ä£ 10.4 Backward-time generating probability velocity. ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) provides an approximation Xt‚àíh‚àºpt‚àíh+o‚Äã(h)similar-tosubscriptùëãùë°‚Ñésubscriptùëùùë°‚Ñéùëú‚ÑéX\\_{t-h}\\\\sim p\\_{t-h}+o(h). The change to the generating probability velocity in ( [22]Equation 22 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) to accommodate reverse time sampling is to replace the argmin in ( [41]Equation 41 ‚Ä£ 10.3 Probability velocities generating conditional probability paths ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) with argmax,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚Ñì=‚Ñì‚Äã(i,t)‚âú\\\\argmaxj‚àà\\[m\\]‚Äã\\\\brac‚ÄãŒ∫Àôti,j/Œ∫ti,j.‚Ñì‚Ñìùëñùë°‚âúsubscript\\\\argmaxùëódelimited-\\[\\]ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\ell=\\\\ell(i,t)\\\\triangleq\\\\argmax\\_{j\\\\in\\[m\\]}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}/\\\\kappa\\_{t}^{i,j}}. |  | (46) |\\\n\\\nAn analogous result to Theorem [2.3]Theorem 2.3 (Probability velocity of conditional paths). ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") for backward-time sampling is therefore,\\\n\\\n###### Theorem 10.3(Probability velocity of conditional paths, backward time).\\\n\\\nThe probability velocity ‚àíutsubscriptùë¢ùë°-u\\_{t}, where utsubscriptùë¢ùë°u\\_{t} defined in ( [21]Equation 21 ‚Ä£ Theorem 2.3 (Probability velocity of conditional paths). ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) with ‚Ñì=\\\\argmaxj‚àà\\[m\\]‚Äã\\\\brac‚ÄãŒ∫Àôti,j/Œ∫ti,j‚Ñìsubscript\\\\argmaxùëódelimited-\\[\\]ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\ell=\\\\argmax\\_{j\\\\in\\[m\\]}\\\\brac{\\\\dot{\\\\kappa}\\_{t}^{i,j}/\\\\kappa\\_{t}^{i,j}} is a backward-time generating probability velocity for the conditional paths pt‚Äã(x\\|x0,x1)subscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t}(x\\|x\\_{0},x\\_{1}) defined in equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [8]Equation 8 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\n###### Proof 10.4.\\\n\\\nWe follow the proof of Theorem [2.3]Theorem 2.3 (Probability velocity of conditional paths). ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and indicate the relevant changes. First, for arbitrary Xt‚àà\\\\gDsubscriptùëãùë°\\\\gDX\\_{t}\\\\in\\\\gD,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ‚àëxiuti‚Äã(xi,Xt)=0,subscriptsuperscriptùë•ùëñsuperscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°0\\\\sum\\_{x^{i}}u\\_{t}^{i}(x^{i},X\\_{t})=0, |  | (47) |\\\n\\\nexactly using the same arguments as the forward-time case. Now,\\\nfor xi‚â†Xtisuperscriptùë•ùëñsuperscriptsubscriptùëãùë°ùëñx^{i}\\\\neq X\\_{t}^{i} we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uti‚Äã(xi,Xt\\|x0,x1)=‚àëj=1m\\\\brac‚ÄãŒ∫Àôti,jŒ∫ti,j‚àíŒ∫Àôti,‚ÑìŒ∫ti,‚Ñì‚ÄãŒ∫ti,j‚Äãwtj‚Äã(xi\\|x0,x1)‚â§0superscriptsubscriptùë¢ùë°ùëñsuperscriptùë•ùëñconditionalsubscriptùëãùë°subscriptùë•0subscriptùë•1superscriptsubscriptùëó1ùëö\\\\bracsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptÀôùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñ‚ÑìsuperscriptsubscriptùúÖùë°ùëñùëósuperscriptsubscriptùë§ùë°ùëóconditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•10u\\_{t}^{i}(x^{i},X\\_{t}\\|x\\_{0},x\\_{1})=\\\\sum\\_{j=1}^{m}\\\\brac{\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,j}}{\\\\kappa\\_{t}^{i,j}}-\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,\\\\ell}}{\\\\kappa\\_{t}^{i,\\\\ell}}}\\\\kappa\\_{t}^{i,j}w\\_{t}^{j}(x^{i}\\|x\\_{0},x\\_{1})\\\\leq 0 |  | (48) |\\\n\\\ndue to ‚Ñì‚Ñì\\\\ell being now the argmax of Œ∫Àôti,jŒ∫ti,jsuperscriptsubscriptÀôùúÖùë°ùëñùëósuperscriptsubscriptùúÖùë°ùëñùëó\\\\frac{\\\\dot{\\\\kappa}\\_{t}^{i,j}}{\\\\kappa\\_{t}^{i,j}}. Therefore ‚àíutsubscriptùë¢ùë°-u\\_{t} satisfies ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")). Lastly, we notice that the proof of the Continuity Equation follows through exactly the same also in this case.\\\n\\\n### 10.5 Backward-time generating velocity for i.i.d. source p‚Äã(x0)ùëùsubscriptùë•0p(x\\_{0}) and simple paths\\\n\\\nHere we consider the case of probability paths defined via the conditionals in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) with independent coupling œÄ‚Äã(x0,x1)=p‚Äã(x0)‚Äãq‚Äã(x1)ùúãsubscriptùë•0subscriptùë•1ùëùsubscriptùë•0ùëûsubscriptùë•1\\\\pi(x\\_{0},x\\_{1})=p(x\\_{0})q(x\\_{1}) and i.i.d. source distribution p‚Äã(x0)=‚àèi=1Np‚Äã(x0i)ùëùsubscriptùë•0superscriptsubscriptproductùëñ1ùëÅùëùsuperscriptsubscriptùë•0ùëñp(x\\_{0})=\\\\prod\\_{i=1}^{N}p(x\\_{0}^{i}), where p‚Äã(x0i)ùëùsuperscriptsubscriptùë•0ùëñp(x\\_{0}^{i}) is some PMF over \\[d\\]delimited-\\[\\]ùëë\\[d\\]. In this case one can simplify the time-backward sampling formula in ( [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) by using the following one which is equivalent (\\\\ie, their difference is divergence free and consequently generate the same probability path ptsubscriptùëùùë°p\\_{t}):\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | uÀát‚Äã(xi,Xt)=Œ∫ÀôtŒ∫t‚Äã\\\\brac‚ÄãŒ¥Xt‚Äã(xi)‚àíp‚Äã(xi).subscriptÀáùë¢ùë°superscriptùë•ùëñsubscriptùëãùë°subscriptÀôùúÖùë°subscriptùúÖùë°\\\\bracsubscriptùõøsubscriptùëãùë°superscriptùë•ùëñùëùsuperscriptùë•ùëñ\\\\check{u}\\_{t}(x^{i},X\\_{t})=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}\\\\brac{\\\\delta\\_{X\\_{t}}(x^{i})-p(x^{i})}. |  | (49) |\\\n\\\nThe benefit in this equation is that it does not require the posterior p0\\|tsubscriptùëùconditional0ùë°p\\_{0\\|t}, which needs to be learned in general cases.\\\n\\\nTo show that ( [49]Equation 49 ‚Ä£ 10.5 Backward-time generating velocity for i.i.d. source ùëù‚Å¢(ùë•‚ÇÄ) and simple paths ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is indeed a generating probability velocity it is enough to show that\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã\\\\brac‚Äãpt‚Äã\\\\parr‚ÄãuÀát‚àíuÀát‚ãÜ=0,subscript\\\\divvùë•\\\\bracsubscriptùëùùë°\\\\parrsubscriptÀáùë¢ùë°subscriptsuperscriptÀáùë¢‚ãÜùë°0\\\\divv\\_{x}\\\\brac{p\\_{t}\\\\parr{\\\\check{u}\\_{t}-\\\\check{u}^{\\\\star}\\_{t}}}=0, |  | (50) |\\\n\\\nwhere uÀát‚ãÜsubscriptsuperscriptÀáùë¢‚ãÜùë°\\\\check{u}^{\\\\star}\\_{t} is the probability velocity in ( [25]Equation 25 ‚Ä£ Sampling backward in time. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")). Let us verify using ( [19]Equation 19 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")):\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã\\\\brac‚Äãpt‚Äã\\\\parr‚ÄãuÀát‚àíuÀát‚ãÜsubscript\\\\divvùë•\\\\bracsubscriptùëùùë°\\\\parrsubscriptÀáùë¢ùë°subscriptsuperscriptÀáùë¢‚ãÜùë°\\\\displaystyle\\\\divv\\_{x}\\\\brac{p\\_{t}\\\\parr{\\\\check{u}\\_{t}-\\\\check{u}^{\\\\star}\\_{t}}} | =‚àëi,zpt‚Äã(z)‚ÄãŒ¥z‚Äã(xi¬Ø)‚Äã\\\\brac‚Äãp‚Äã(xi)‚àí‚àëx0,x1Œ¥x0‚Äã(xi)‚Äãpt‚Äã(z\\|x0,x1)‚Äãp‚Äã(x0)‚Äãq‚Äã(x1)pt‚Äã(z)‚Äã‚ñ∑œÄ‚Äã(x0,x1)=p‚Äã(x0)‚Äãq‚Äã(x1)absentsubscriptùëñùëßsubscriptùëùùë°ùëßsubscriptùõøùëßsuperscriptùë•¬Øùëñ\\\\bracùëùsuperscriptùë•ùëñsubscriptsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•0superscriptùë•ùëñsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùëùsubscriptùë•0ùëûsubscriptùë•1subscriptùëùùë°ùëß‚ñ∑œÄ(x0,x1)=p(x0)q(x1)\\\\displaystyle=\\\\sum\\_{i,z}p\\_{t}(z)\\\\delta\\_{z}(x^{\\\\bar{i}})\\\\brac{p(x^{i})-\\\\sum\\_{x\\_{0},x\\_{1}}\\\\delta\\_{x\\_{0}}(x^{i})\\\\frac{p\\_{t}(z\\|x\\_{0},x\\_{1})p(x\\_{0})q(x\\_{1})}{p\\_{t}(z)}}\\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\hfill$\\\\triangleright$ $\\\\pi(x\\_{0},x\\_{1})=p(x\\_{0})q(x\\_{1})$}} |  |\\\n|  |  | =‚àëi,zŒ¥z‚Äã(xi¬Ø)‚Äã\\\\brac‚Äãp‚Äã(xi)‚Äãpt‚Äã(z)‚àí‚àëx0,x1Œ¥x0‚Äã(xi)‚Äãpt‚Äã(z\\|x0,x1)‚Äãp‚Äã(x0)‚Äãq‚Äã(x1)absentsubscriptùëñùëßsubscriptùõøùëßsuperscriptùë•¬Øùëñ\\\\bracùëùsuperscriptùë•ùëñsubscriptùëùùë°ùëßsubscriptsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•0superscriptùë•ùëñsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùëùsubscriptùë•0ùëûsubscriptùë•1\\\\displaystyle=\\\\sum\\_{i,z}\\\\delta\\_{z}(x^{\\\\bar{i}})\\\\brac{p(x^{i})p\\_{t}(z)-\\\\sum\\_{x\\_{0},x\\_{1}}\\\\delta\\_{x\\_{0}}(x^{i})p\\_{t}(z\\|x\\_{0},x\\_{1})p(x\\_{0})q(x\\_{1})} |  |\\\n|  |  | =‚àëi,x0,x1\\\\brac‚Äãp‚Äã(xi)‚àíŒ¥x0‚Äã(xi)‚Äã\\\\parr‚Äã‚àëzŒ¥z‚Äã(xi¬Ø)‚Äãpt‚Äã(z\\|x0,x1)‚Äãp‚Äã(x0)‚Äãq‚Äã(x1)absentsubscriptùëñsubscriptùë•0subscriptùë•1\\\\bracùëùsuperscriptùë•ùëñsubscriptùõøsubscriptùë•0superscriptùë•ùëñ\\\\parrsubscriptùëßsubscriptùõøùëßsuperscriptùë•¬Øùëñsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùëùsubscriptùë•0ùëûsubscriptùë•1\\\\displaystyle=\\\\sum\\_{i,x\\_{0},x\\_{1}}\\\\brac{p(x^{i})-\\\\delta\\_{x\\_{0}}(x^{i})}\\\\parr{\\\\sum\\_{z}\\\\delta\\_{z}(x^{\\\\bar{i}})p\\_{t}(z\\|x\\_{0},x\\_{1})}p(x\\_{0})q(x\\_{1}) |  |\\\n|  |  | =‚àëi,x0,x1\\\\brac‚Äãp‚Äã(xi)‚àíŒ¥x0‚Äã(xi)‚Äãpt‚Äã(xi¬Ø\\|x0,x1)‚Äãp‚Äã(x0i¬Ø)‚Äãp‚Äã(x0i)‚Äãq‚Äã(x1)absentsubscriptùëñsubscriptùë•0subscriptùë•1\\\\bracùëùsuperscriptùë•ùëñsubscriptùõøsubscriptùë•0superscriptùë•ùëñsubscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1ùëùsubscriptsuperscriptùë•¬Øùëñ0ùëùsuperscriptsubscriptùë•0ùëñùëûsubscriptùë•1\\\\displaystyle=\\\\sum\\_{i,x\\_{0},x\\_{1}}\\\\brac{p(x^{i})-\\\\delta\\_{x\\_{0}}(x^{i})}p\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})p(x^{\\\\bar{i}}\\_{0})p(x\\_{0}^{i})q(x\\_{1}) |  |\\\n|  |  | =‚àëi,x0i¬Ø,x1\\\\parr‚Äã‚àëx0i\\\\brac‚Äãp‚Äã(xi)‚Äãp‚Äã(x0i)‚àíŒ¥x0‚Äã(xi)‚Äãp‚Äã(x0i)‚Äãpt‚Äã(xi¬Ø\\|x0,x1)‚Äãp‚Äã(x0i¬Ø)‚Äãq‚Äã(x1)absentsubscriptùëñsuperscriptsubscriptùë•0¬Øùëñsubscriptùë•1\\\\parrsubscriptsuperscriptsubscriptùë•0ùëñ\\\\bracùëùsuperscriptùë•ùëñùëùsuperscriptsubscriptùë•0ùëñsubscriptùõøsubscriptùë•0superscriptùë•ùëñùëùsuperscriptsubscriptùë•0ùëñsubscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1ùëùsubscriptsuperscriptùë•¬Øùëñ0ùëûsubscriptùë•1\\\\displaystyle=\\\\sum\\_{i,x\\_{0}^{\\\\bar{i}},x\\_{1}}\\\\parr{\\\\sum\\_{x\\_{0}^{i}}\\\\brac{p(x^{i})p(x\\_{0}^{i})-\\\\delta\\_{x\\_{0}}(x^{i})p(x\\_{0}^{i})}}p\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})p(x^{\\\\bar{i}}\\_{0})q(x\\_{1}) |  |\\\n|  |  | =0,absent0\\\\displaystyle=0, |  |\\\n\\\nwhere in the second to last equality we used the fact that the paths we are considering have the form: pt‚Äã(xi¬Ø\\|x0,x1)=‚àèj‚àà\\[N\\]‚àñi\\\\brac‚ÄãŒ∫t‚ÄãŒ¥x1‚Äã(xj)+(1‚àíŒ∫t)‚ÄãŒ¥x0‚Äã(xj)subscriptùëùùë°conditionalsuperscriptùë•¬Øùëñsubscriptùë•0subscriptùë•1subscriptproductùëódelimited-\\[\\]ùëÅùëñ\\\\bracsubscriptùúÖùë°subscriptùõøsubscriptùë•1superscriptùë•ùëó1subscriptùúÖùë°subscriptùõøsubscriptùë•0superscriptùë•ùëóp\\_{t}(x^{\\\\bar{i}}\\|x\\_{0},x\\_{1})=\\\\prod\\_{j\\\\in\\[N\\]\\\\setminus i}\\\\brac{\\\\kappa\\_{t}\\\\delta\\_{x\\_{1}}(x^{j})+(1-\\\\kappa\\_{t})\\\\delta\\_{x\\_{0}}(x^{j})}, and therefore do not depend on the iùëñi-th source token, x0isuperscriptsubscriptùë•0ùëñx\\_{0}^{i}.\\\n\\\n### 10.6 Corrector steps\\\n\\\n{reptheorem}\\\n\\\nthm:corrector\\\nFor perfectly trained posteriors and Œ±t,Œ≤t>0subscriptùõºùë°subscriptùõΩùë°0\\\\alpha\\_{t},\\\\beta\\_{t}>0, t‚àà(0,1)ùë°01t\\\\in(0,1), u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} in ( [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is a probability velocity, \\\\ie, satisfies ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), and: (i) For Œ±t‚àíŒ≤t=1subscriptùõºùë°subscriptùõΩùë°1\\\\alpha\\_{t}-\\\\beta\\_{t}=1, u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} provides a probability velocity generating ptsubscriptùëùùë°p\\_{t}; (ii) For Œ±t‚àíŒ≤t=0subscriptùõºùë°subscriptùõΩùë°0\\\\alpha\\_{t}-\\\\beta\\_{t}=0, repeatedly sampling with u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} at fixed t‚àà(0,1)ùë°01t\\\\in(0,1) and sufficiently small h‚Ñéh is guaranteed to converge to a sample from ptsubscriptùëùùë°p\\_{t}.\\\n\\\n###### Proof 10.5(Proof (Theorem [2.4]Theorem 2.4. ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")).).\\\n\\\nFirst let us write explicitly u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} from ( [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")):\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | u¬Øti‚Äã(xi,Xt)superscriptsubscript¬Øùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°\\\\displaystyle\\\\bar{u}\\_{t}^{i}(x^{i},X\\_{t}) | =Œ±t‚Äãu^ti‚Äã(xi,Xt)‚àíŒ≤t‚ÄãuÀáti‚Äã(xi,Xt)absentsubscriptùõºùë°superscriptsubscript^ùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°subscriptùõΩùë°superscriptsubscriptÀáùë¢ùë°ùëñsuperscriptùë•ùëñsubscriptùëãùë°\\\\displaystyle=\\\\alpha\\_{t}\\\\hat{u}\\_{t}^{i}(x^{i},X\\_{t})-\\\\beta\\_{t}\\\\check{u}\\_{t}^{i}(x^{i},X\\_{t}) |  |\\\n|  |  | =Œ±t‚ÄãŒ∫Àôt1‚àíŒ∫t‚Äãp1\\|t‚Äã(xi\\|Xt)+Œ≤t‚ÄãŒ∫ÀôtŒ∫t‚Äãp0\\|1‚Äã(xi\\|Xt)‚àí\\\\brac‚ÄãŒ±t‚ÄãŒ∫Àôt1‚àíŒ∫t+Œ≤t‚ÄãŒ∫ÀôtŒ∫t‚ÄãŒ¥Xt‚Äã(xi).absentsubscriptùõºùë°subscriptÀôùúÖùë°1subscriptùúÖùë°subscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°subscriptùõΩùë°subscriptÀôùúÖùë°subscriptùúÖùë°subscriptùëùconditional01conditionalsuperscriptùë•ùëñsubscriptùëãùë°\\\\bracsubscriptùõºùë°subscriptÀôùúÖùë°1subscriptùúÖùë°subscriptùõΩùë°subscriptÀôùúÖùë°subscriptùúÖùë°subscriptùõøsubscriptùëãùë°superscriptùë•ùëñ\\\\displaystyle={\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\frac{\\\\alpha\\_{t}\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}p\\_{1\\|t}(x^{i}\\|X\\_{t})+\\\\frac{\\\\beta\\_{t}\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}p\\_{0\\|1}(x^{i}\\|X\\_{t})-\\\\brac{\\\\frac{\\\\alpha\\_{t}\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}+\\\\frac{\\\\beta\\_{t}\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}}\\\\delta\\_{X\\_{t}}(x^{i})}. |  | (51) |\\\n\\\nSince ( [51]Equation 51 ‚Ä£ Proof 10.5 (Proof (Theorem 2.4).). ‚Ä£ 10.6 Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) is a sum of PMFs with coefficients that sum up to zero the first condition in ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), \\\\ie, ‚àëxiu¬Øti‚Äã(xi,Xt)=0subscriptsuperscriptùë•ùëñsubscriptsuperscript¬Øùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°0\\\\sum\\_{x^{i}}\\\\bar{u}^{i}\\_{t}(x^{i},X\\_{t})=0 holds. The second condition in ( [13]Equation 13 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) holds since for t‚àà(0,1)ùë°01t\\\\in(0,1) we have Œ±t‚ÄãŒ∫Àôt1‚àíŒ∫t,Œ≤t‚ÄãŒ∫ÀôtŒ∫t‚â•0subscriptùõºùë°subscriptÀôùúÖùë°1subscriptùúÖùë°subscriptùõΩùë°subscriptÀôùúÖùë°subscriptùúÖùë°0\\\\frac{\\\\alpha\\_{t}\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}},\\\\frac{\\\\beta\\_{t}\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}\\\\geq 0.\\\nNow,\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | \\\\divvx‚Äã(pt‚Äãu¬Øt)subscript\\\\divvùë•subscriptùëùùë°subscript¬Øùë¢ùë°\\\\displaystyle\\\\divv\\_{x}(p\\_{t}\\\\bar{u}\\_{t}) | =Œ±t‚Äã\\\\divvx‚Äã(pt‚Äãu^t)‚àíŒ≤t‚Äã\\\\divvx‚Äã(pt‚ÄãuÀát)‚ñ∑ linearity of \\\\divvabsentsubscriptùõºùë°subscript\\\\divvùë•subscriptùëùùë°subscript^ùë¢ùë°subscriptùõΩùë°subscript\\\\divvùë•subscriptùëùùë°subscriptÀáùë¢ùë°‚ñ∑ linearity of \\\\divv\\\\displaystyle=\\\\alpha\\_{t}\\\\divv\\_{x}(p\\_{t}\\\\hat{u}\\_{t})-\\\\beta\\_{t}\\\\divv\\_{x}(p\\_{t}\\\\check{u}\\_{t})\\\\qquad\\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\hfill$\\\\triangleright$ linearity of $\\\\divv$}} |  |\\\n|  |  | =‚àíŒ±t‚ÄãpÀôt‚Äã(x)+Œ≤t‚ÄãpÀôt‚Äã(x)‚ñ∑ Equation [16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")absentsubscriptùõºùë°subscriptÀôùëùùë°ùë•subscriptùõΩùë°subscriptÀôùëùùë°ùë•‚ñ∑ Equation [16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")\\\\displaystyle=-\\\\alpha\\_{t}\\\\dot{p}\\_{t}(x)+\\\\beta\\_{t}\\\\dot{p}\\_{t}(x)\\\\qquad\\\\qquad\\\\quad\\ \\ \\ \\ \\ \\ \\\\text{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\hfill$\\\\triangleright$ Equation \\\\ref{e:ce}}} |  |\\\n|  |  | =‚àí(Œ±t‚àíŒ≤t)‚ÄãpÀôt‚Äã(x).absentsubscriptùõºùë°subscriptùõΩùë°subscriptÀôùëùùë°ùë•\\\\displaystyle=-(\\\\alpha\\_{t}-\\\\beta\\_{t})\\\\dot{p}\\_{t}(x). |  | (52) |\\\n\\\nFor (i): Using ( [52]Equation 52 ‚Ä£ Proof 10.5 (Proof (Theorem 2.4).). ‚Ä£ 10.6 Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) with Œ±t‚àíŒ≤t=1subscriptŒ±tsubscriptŒ≤t1\\\\alpha\\_{t}-\\\\beta\\_{t}=1 we get that\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | \\\\divvx‚Äã(pt‚Äãu¬Øt)=‚àípÀôt‚Äã(x),subscript\\\\divvùë•subscriptùëùùë°subscript¬Øùë¢ùë°subscriptÀôùëùùë°ùë•\\\\divv\\_{x}(p\\_{t}\\\\bar{u}\\_{t})=-\\\\dot{p}\\_{t}(x), |  |\\\n\\\n\\\\ie\\\n\\\n, u¬Øtsubscript¬Øùë¢ùë°\\\\bar{u}\\_{t} satisfies the continuity equation and therefore generates ptsubscriptùëùùë°p\\_{t}.\\\n\\\nFor (ii): Setting Œ±t‚àíŒ≤t=0subscriptŒ±tsubscriptŒ≤t0\\\\alpha\\_{t}-\\\\beta\\_{t}=0 in ( [52]Equation 52 ‚Ä£ Proof 10.5 (Proof (Theorem 2.4).). ‚Ä£ 10.6 Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) we get \\\\divvx‚Äã(pt‚Äãu¬Øt)=0subscript\\\\divvxsubscriptptsubscript¬Øut0\\\\divv\\_{x}(p\\_{t}\\\\bar{u}\\_{t})=0 and therefore similar to ( [20]Equation 20 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) we have\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | pt‚Äã(x)subscriptùëùùë°ùë•\\\\displaystyle p\\_{t}(x) | =pt‚Äã(x)‚àíh‚Äã\\\\divvx‚Äã(pt‚Äãu¬Øt)absentsubscriptùëùùë°ùë•‚Ñésubscript\\\\divvùë•subscriptùëùùë°subscript¬Øùë¢ùë°\\\\displaystyle=p\\_{t}(x)-h\\\\divv\\_{x}(p\\_{t}\\\\bar{u}\\_{t}) |  |\\\n|  |  | =\\\\EXt‚Äã\\\\brac‚ÄãŒ¥Xt‚Äã(x)+h‚Äã‚àëi=1NŒ¥Xt‚Äã(xi¬Ø)‚Äãu¬Øti‚Äã(xi,Xt)absentsubscript\\\\Esubscriptùëãùë°\\\\bracsubscriptùõøsubscriptùëãùë°ùë•‚Ñésuperscriptsubscriptùëñ1ùëÅsubscriptùõøsubscriptùëãùë°superscriptùë•¬Øùëñsubscriptsuperscript¬Øùë¢ùëñùë°superscriptùë•ùëñsubscriptùëãùë°\\\\displaystyle=\\\\E\\_{X\\_{t}}\\\\brac{\\\\delta\\_{X\\_{t}}(x)+h\\\\sum\\_{i=1}^{N}\\\\delta\\_{X\\_{t}}(x^{\\\\bar{i}})\\\\bar{u}^{i}\\_{t}(x^{i},X\\_{t})} |  |\\\n|  |  | =‚àëzp‚Äã(x\\|z)‚Äãpt‚Äã(z),absentsubscriptùëßùëùconditionalùë•ùëßsubscriptùëùùë°ùëß\\\\displaystyle=\\\\sum\\_{z}p(x\\|z)p\\_{t}(z), |  | (53) |\\\n\\\nwhere using ( [51]Equation 51 ‚Ä£ Proof 10.5 (Proof (Theorem 2.4).). ‚Ä£ 10.6 Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) we have\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p‚Äã(x\\|z)ùëùconditionalùë•ùëß\\\\displaystyle p(x\\|z) | =h‚Äã‚àëi=1NŒ±t‚ÄãŒ∫Àôt1‚àíŒ∫t‚ÄãŒ¥z‚Äã(xi¬Ø)‚Äãp1\\|t‚Äã(xi\\|z)+h‚Äã‚àëi=1NŒ≤t‚ÄãŒ∫ÀôtŒ∫t‚ÄãŒ¥z‚Äã(xi¬Ø)‚Äãp0\\|1‚Äã(xi\\|z)absent‚Ñésuperscriptsubscriptùëñ1ùëÅsubscriptùõºùë°subscriptÀôùúÖùë°1subscriptùúÖùë°subscriptùõøùëßsuperscriptùë•¬Øùëñsubscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñùëß‚Ñésuperscriptsubscriptùëñ1ùëÅsubscriptùõΩùë°subscriptÀôùúÖùë°subscriptùúÖùë°subscriptùõøùëßsuperscriptùë•¬Øùëñsubscriptùëùconditional01conditionalsuperscriptùë•ùëñùëß\\\\displaystyle=h\\\\sum\\_{i=1}^{N}\\\\frac{\\\\alpha\\_{t}\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\delta\\_{z}(x^{\\\\bar{i}})p\\_{1\\|t}(x^{i}\\|z)}+h\\\\sum\\_{i=1}^{N}\\\\frac{\\\\beta\\_{t}\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\delta\\_{z}(x^{\\\\bar{i}})p\\_{0\\|1}(x^{i}\\|z)} |  |\\\n|  |  | +\\\\parr‚Äã1‚àíh‚Äã‚àëi=1N\\\\brac‚ÄãŒ±t‚ÄãŒ∫Àôt1‚àíŒ∫t+Œ≤t‚ÄãŒ∫ÀôtŒ∫t‚ÄãŒ¥z‚Äã(xi).\\\\parr1‚Ñésuperscriptsubscriptùëñ1ùëÅ\\\\bracsubscriptùõºùë°subscriptÀôùúÖùë°1subscriptùúÖùë°subscriptùõΩùë°subscriptÀôùúÖùë°subscriptùúÖùë°subscriptùõøùëßsuperscriptùë•ùëñ\\\\displaystyle+\\\\parr{1-h\\\\sum\\_{i=1}^{N}\\\\brac{\\\\frac{\\\\alpha\\_{t}\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}+\\\\frac{\\\\beta\\_{t}\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}}}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\delta\\_{z}(x^{i})}. |  |\\\n\\\nFor sufficiently small h>0‚Ñé0h>0 therefore p‚Äã(x\\|z)ùëùconditionalùë•ùëßp(x\\|z) is a convex combination of PMFs (in red) xùë•x and consequently is itself a PMF in xùë•x, that is p‚Äã(x\\|z)ùëùconditionalùë•ùëßp(x\\|z) is a probability transition matrix, and pt‚Äã(x)subscriptùëùùë°ùë•p\\_{t}(x) is its stationary distribution, \\\\ie, it is an eigenvector of p‚Äã(x\\|z)ùëùconditionalùë•ùëßp(x\\|z) with eigenvalue 111, which is maximal. To prove convergence of the iterations in ( [53]Equation 53 ‚Ä£ Proof 10.5 (Proof (Theorem 2.4).). ‚Ä£ 10.6 Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) we are left with showing that p‚Äã(x\\|z)ùëùconditionalùë•ùëßp(x\\|z) is irreducible and a-periodic, see Norris ( [1998])) (Theorem 1.8.3). Irreducibly of p‚Äã(x\\|z)ùëùconditionalùë•ùëßp(x\\|z) can be shown by connecting each two states z,z‚Ä≤ùëßsuperscriptùëß‚Ä≤z,z^{\\\\prime} by changing one token at a time, and assuming that p1\\|tsubscriptùëùconditional1ùë°p\\_{1\\|t} or p0\\|tsubscriptùëùconditional0ùë°p\\_{0\\|t} are strictly positive (which is usually the case since as at-least one of them is defined as soft-max of finite logits); a-periodicity is proved by showing p‚Äã(x\\|x)>0ùëùconditionalùë•ùë•0p(x\\|x)>0 which is true as the coefficient of Œ¥z‚Äã(x)subscriptùõøùëßùë•\\\\delta\\_{z}(x) is greater than zero for sufficiently small h>0‚Ñé0h>0. Lastly, note that the iteration in ( [53]Equation 53 ‚Ä£ Proof 10.5 (Proof (Theorem 2.4).). ‚Ä£ 10.6 Corrector steps ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")) changes one token at a time. An approximation to this sampling can be achieved using our standard parallel sampling via ( [12]Equation 12 ‚Ä£ Generating probability velocity. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), justified by ( [20]Equation 20 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")).\\\n\\\n### 10.7 Training\\\n\\\n{repproposition}\\\n\\\nprop:training\\\nThe minimizer of \\\\gL\\\\gL\\\\gL (( [28]Equation 28 ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))) is w^tj‚Äã(xi\\|Xt)superscriptsubscript^ùë§ùë°ùëóconditionalsuperscriptùë•ùëñsubscriptùëãùë°\\\\hat{w}\\_{t}^{j}(x^{i}\\|X\\_{t}) (( [23]Equation 23 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))).\\\n\\\n###### Proof 10.6(Proof (Proposition [2.5]Proposition 2.5. ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")).).\\\n\\\nIt is enough to prove the claim for m=1ùëö1m=1, with a single w‚Äã(xi\\|x0,x1)ùë§conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1w(x^{i}\\|x\\_{0},x\\_{1}).\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | \\\\gL‚Äã(Œ∏)\\\\gLùúÉ\\\\displaystyle\\\\gL(\\\\theta) | =‚àí1N‚Äã‚àëi=1N\\\\Et‚Äã‚àëx0,x1,z,yilog‚Å°w^t‚Äã(yi\\|z;Œ∏)‚Äãw‚Äã(yi\\|x0,x1)‚Äãpt‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)absent1ùëÅsuperscriptsubscriptùëñ1ùëÅsubscript\\\\Eùë°subscriptsubscriptùë•0subscriptùë•1ùëßsuperscriptùë¶ùëñsubscript^ùë§ùë°conditionalsuperscriptùë¶ùëñùëßùúÉùë§conditionalsuperscriptùë¶ùëñsubscriptùë•0subscriptùë•1subscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1\\\\displaystyle=-\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\E\\_{t}\\\\sum\\_{x\\_{0},x\\_{1},z,y^{i}}\\\\log\\\\hat{w}\\_{t}(y^{i}\\|z;\\\\theta)w(y^{i}\\|x\\_{0},x\\_{1})p\\_{t}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1}) |  |\\\n|  |  | =‚àí1N‚Äã‚àëi=1N\\\\Et‚Äã‚àëzpt‚Äã(z)‚Äã\\\\brac‚Äã‚àëyilog‚Å°w^t‚Äã(yi\\|z;Œ∏)‚Äã\\\\parr‚Äã‚àëx0,x1w‚Äã(yi\\|x0,x1)‚Äãpt‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Äã(z)absent1ùëÅsuperscriptsubscriptùëñ1ùëÅsubscript\\\\Eùë°subscriptùëßsubscriptùëùùë°ùëß\\\\bracsubscriptsuperscriptùë¶ùëñsubscript^ùë§ùë°conditionalsuperscriptùë¶ùëñùëßùúÉ\\\\parrsubscriptsubscriptùë•0subscriptùë•1ùë§conditionalsuperscriptùë¶ùëñsubscriptùë•0subscriptùë•1subscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptùëùùë°ùëß\\\\displaystyle=-\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\E\\_{t}\\\\sum\\_{z}{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}p\\_{t}(z)}\\\\brac{\\\\sum\\_{y^{i}}\\\\log\\\\hat{w}\\_{t}(y^{i}\\|z;\\\\theta)\\\\parr{\\\\sum\\_{x\\_{0},x\\_{1}}w(y^{i}\\|x\\_{0},x\\_{1})\\\\frac{p\\_{t}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{{\\\\color\\[rgb\\]{0,0,1}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,1}p\\_{t}(z)}}}} |  |\\\n|  |  | =‚àí\\\\Et,Xt‚Äã1N‚Äã‚àëi=1N\\\\brac‚Äã‚àëyilog‚Å°w^t‚Äã(yi\\|Xt;Œ∏)‚Äãw^t‚Äã(yi\\|Xt),absentsubscript\\\\Eùë°subscriptùëãùë°1ùëÅsuperscriptsubscriptùëñ1ùëÅ\\\\bracsubscriptsuperscriptùë¶ùëñsubscript^ùë§ùë°conditionalsuperscriptùë¶ùëñsubscriptùëãùë°ùúÉsubscript^ùë§ùë°conditionalsuperscriptùë¶ùëñsubscriptùëãùë°\\\\displaystyle=-\\\\E\\_{t,X\\_{t}}\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\brac{\\\\sum\\_{y^{i}}\\\\log\\\\hat{w}\\_{t}(y^{i}\\|X\\_{t};\\\\theta)\\\\hat{w}\\_{t}(y^{i}\\|X\\_{t})}, |  |\\\n\\\nthat amounts to minimizing the Cross Entropy loss between w^t‚Äã(xi\\|Xt;Œ∏)subscript^ùë§ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°ùúÉ\\\\hat{w}\\_{t}(x^{i}\\|X\\_{t};\\\\theta) and w^t‚Äã(xi\\|Xt)subscript^ùë§ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°\\\\hat{w}\\_{t}(x^{i}\\|X\\_{t}) for all i‚àà\\[N\\]ùëñdelimited-\\[\\]ùëÅi\\\\in\\[N\\], the minimizer of which satisfies w^t‚Äã(xi\\|Xt;Œ∏)‚â°w^t‚Äã(xi\\|Xt)subscript^ùë§ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°ùúÉsubscript^ùë§ùë°conditionalsuperscriptùë•ùëñsubscriptùëãùë°\\\\hat{w}\\_{t}(x^{i}\\|X\\_{t};\\\\theta)\\\\equiv\\\\hat{w}\\_{t}(x^{i}\\|X\\_{t}).\\\n\\\n### 10.8 Time-independent posterior for masked modeling\\\n\\\n{repproposition}\\\n\\\nprop:time\\_independence\\\nFor paths defined by equations [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") and [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") with source p‚Äã(x)=Œ¥\\\\dummy‚Äã(x)ùëùùë•subscriptùõø\\\\dummyùë•p(x)=\\\\delta\\_{\\\\dummy}(x) the posterior pt‚Äã(x0,x1\\|z)=p‚Äã(x0,x1\\|z)subscriptùëùùë°subscriptùë•0conditionalsubscriptùë•1ùëßùëùsubscriptùë•0conditionalsubscriptùë•1ùëßp\\_{t}(x\\_{0},x\\_{1}\\|z)=p(x\\_{0},x\\_{1}\\|z) is time-independent. Consequently, the probability denoiser p1\\|t‚Äã(xi\\|z)=p1‚Äã(xi\\|z)subscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñùëßsubscriptùëù1conditionalsuperscriptùë•ùëñùëßp\\_{1\\|t}(x^{i}\\|z)=p\\_{1}(x^{i}\\|z) is also time-independent.\\\n\\\n###### Proof 10.7(Proof (Proposition [3.1]Proposition 3.1. ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")).).\\\n\\\nFirst,\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | pt‚Äã(zi\\|x0,x1)=(1‚àíŒ∫t)‚ÄãŒ¥\\\\dummy‚Äã(zi)+Œ∫t‚ÄãŒ¥x1‚Äã(zi)={(1‚àíŒ∫t)zi=\\\\dummyŒ∫t‚ÄãŒ¥x1‚Äã(zi)zi‚â†\\\\dummysubscriptùëùùë°conditionalsuperscriptùëßùëñsubscriptùë•0subscriptùë•11subscriptùúÖùë°subscriptùõø\\\\dummysuperscriptùëßùëñsubscriptùúÖùë°subscriptùõøsubscriptùë•1superscriptùëßùëñcases1subscriptùúÖùë°superscriptùëßùëñ\\\\dummysubscriptùúÖùë°subscriptùõøsubscriptùë•1superscriptùëßùëñsuperscriptùëßùëñ\\\\dummyp\\_{t}(z^{i}\\|x\\_{0},x\\_{1})=(1-\\\\kappa\\_{t})\\\\delta\\_{\\\\dummy}(z^{i})+\\\\kappa\\_{t}\\\\delta\\_{x\\_{1}}(z^{i})=\\\\begin{cases}(1-\\\\kappa\\_{t})&z^{i}=\\\\dummy\\\\\\<br>\\\\kappa\\_{t}\\\\delta\\_{x\\_{1}}(z^{i})&z^{i}\\\\neq\\\\dummy\\\\end{cases} |  |\\\n\\\nand therefore\\\n\\\n|     |     |     |\\\n| --- | --- | --- |\\\n|  | pt‚Äã(z\\|x0,x1)=\\\\brac‚Äã‚àèi:zi=\\\\dummy(1‚àíŒ∫t)‚Äã‚àèi:zi‚â†\\\\dummyŒ∫t‚Äã‚àèi:zi‚â†\\\\dummyŒ¥x1‚Äã(zi).subscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1\\\\bracsubscriptproduct:ùëñsuperscriptùëßùëñ\\\\dummy1subscriptùúÖùë°subscriptproduct:ùëñsuperscriptùëßùëñ\\\\dummysubscriptùúÖùë°subscriptproduct:ùëñsuperscriptùëßùëñ\\\\dummysubscriptùõøsubscriptùë•1superscriptùëßùëñp\\_{t}(z\\|x\\_{0},x\\_{1})=\\\\brac{\\\\prod\\_{i:z^{i}=\\\\dummy}(1-\\\\kappa\\_{t})\\\\prod\\_{i:z^{i}\\\\neq\\\\dummy}\\\\kappa\\_{t}}\\\\prod\\_{i:z^{i}\\\\neq\\\\dummy}\\\\delta\\_{x\\_{1}}(z^{i}). |  |\\\n\\\nThe posterior now gives\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | pt‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Äã(z)subscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptùëùùë°ùëß\\\\displaystyle\\\\frac{p\\_{t}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{p\\_{t}(z)} | =\\\\brac‚Äã‚àèi=1Npt‚Äã(zi\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)‚àëx~0,x~1\\\\brac‚Äã‚àèj=1Npt‚Äã(zj\\|x~0,x~1)‚ÄãœÄ‚Äã(x~0,x~1)absent\\\\bracsuperscriptsubscriptproductùëñ1ùëÅsubscriptùëùùë°conditionalsuperscriptùëßùëñsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptsubscript~ùë•0subscript~ùë•1\\\\bracsuperscriptsubscriptproductùëó1ùëÅsubscriptùëùùë°conditionalsuperscriptùëßùëósubscript~ùë•0subscript~ùë•1ùúãsubscript~ùë•0subscript~ùë•1\\\\displaystyle=\\\\frac{\\\\brac{\\\\prod\\_{i=1}^{N}p\\_{t}(z^{i}\\|x\\_{0},x\\_{1})}\\\\pi(x\\_{0},x\\_{1})}{\\\\sum\\_{\\\\tilde{x}\\_{0},\\\\tilde{x}\\_{1}}\\\\brac{\\\\prod\\_{j=1}^{N}p\\_{t}(z^{j}\\|\\\\tilde{x}\\_{0},\\\\tilde{x}\\_{1})}\\\\pi(\\\\tilde{x}\\_{0},\\\\tilde{x}\\_{1})} |  |\\\n|  |  | =\\\\brac‚Äã‚àèi:zi=\\\\dummy(1‚àíŒ∫t)‚Äã‚àèi:zi‚â†\\\\dummyŒ∫t‚Äã\\\\brac‚Äã‚àèi:zi‚â†\\\\dummyŒ¥x1‚Äã(zi)‚ÄãœÄ‚Äã(x0,x1)‚àëx~0,x~1\\\\brac‚Äã‚àèj:zj=\\\\dummy(1‚àíŒ∫t)‚Äã‚àèj:zj‚â†\\\\dummyŒ∫t‚Äã\\\\brac‚Äã‚àèj:zj‚â†\\\\dummyŒ¥x~1‚Äã(zj)‚ÄãœÄ‚Äã(x~0,x~1)absentcancel\\\\bracsubscriptproduct:ùëñsuperscriptùëßùëñ\\\\dummy1subscriptùúÖùë°subscriptproduct:ùëñsuperscriptùëßùëñ\\\\dummysubscriptùúÖùë°\\\\bracsubscriptproduct:ùëñsuperscriptùëßùëñ\\\\dummysubscriptùõøsubscriptùë•1superscriptùëßùëñùúãsubscriptùë•0subscriptùë•1subscriptsubscript~ùë•0subscript~ùë•1cancel\\\\bracsubscriptproduct:ùëósuperscriptùëßùëó\\\\dummy1subscriptùúÖùë°subscriptproduct:ùëósuperscriptùëßùëó\\\\dummysubscriptùúÖùë°\\\\bracsubscriptproduct:ùëósuperscriptùëßùëó\\\\dummysubscriptùõøsubscript~ùë•1superscriptùëßùëóùúãsubscript~ùë•0subscript~ùë•1\\\\displaystyle=\\\\frac{{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\cancel{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\brac{\\\\prod\\_{i:z^{i}=\\\\dummy}(1-\\\\kappa\\_{t})\\\\prod\\_{i:z^{i}\\\\neq\\\\dummy}\\\\kappa\\_{t}}}}}\\\\brac{\\\\prod\\_{i:z^{i}\\\\neq\\\\dummy}\\\\delta\\_{x\\_{1}}(z^{i})}\\\\pi(x\\_{0},x\\_{1})}{\\\\sum\\_{\\\\tilde{x}\\_{0},\\\\tilde{x}\\_{1}}{\\\\color\\[rgb\\]{1,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{1,0,0}\\\\cancel{{\\\\color\\[rgb\\]{0,0,0}\\\\definecolor\\[named\\]{pgfstrokecolor}{rgb}{0,0,0}\\\\pgfsys@color@gray@stroke{0}\\\\pgfsys@color@gray@fill{0}\\\\brac{\\\\prod\\_{j:z^{j}=\\\\dummy}(1-\\\\kappa\\_{t})\\\\prod\\_{j:z^{j}\\\\neq\\\\dummy}\\\\kappa\\_{t}}}}}\\\\brac{\\\\prod\\_{j:z^{j}\\\\neq\\\\dummy}\\\\delta\\_{\\\\tilde{x}\\_{1}}(z^{j})}\\\\pi(\\\\tilde{x}\\_{0},\\\\tilde{x}\\_{1})} |  |\\\n|  |  | =p‚Äã(x0,x1\\|z).absentùëùsubscriptùë•0conditionalsubscriptùë•1ùëß\\\\displaystyle=p(x\\_{0},x\\_{1}\\|z). |  |\\\n\\\nshowing that the posterior is time-independent for dummy source distributions and convex paths. Consequently also the probability denoiser,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | p1\\|t‚Äã(xi\\|z)subscriptùëùconditional1ùë°conditionalsuperscriptùë•ùëñùëß\\\\displaystyle p\\_{1\\|t}(x^{i}\\|z) | =‚àëx0,x1Œ¥x1‚Äã(xi)‚Äãpt‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Äã(z)=‚àëx0,x1Œ¥x1‚Äã(xi)‚Äãp‚Äã(x0,x1\\|z),absentsubscriptsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•1superscriptùë•ùëñsubscriptùëùùë°conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptùëùùë°ùëßsubscriptsubscriptùë•0subscriptùë•1subscriptùõøsubscriptùë•1superscriptùë•ùëñùëùsubscriptùë•0conditionalsubscriptùë•1ùëß\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}}\\\\delta\\_{x\\_{1}}(x^{i})\\\\frac{p\\_{t}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{p\\_{t}(z)}=\\\\sum\\_{x\\_{0},x\\_{1}}\\\\delta\\_{x\\_{1}}(x^{i})p(x\\_{0},x\\_{1}\\|z), |  |\\\n\\\nis time-independent.\\\n\\\n### 10.9 Continuous Flow Matching\\\n\\\nFor completeness we provide the formulas for denoiser (xùë•x-prediction) and noise-prediction (\\\\eps\\\\eps\\\\eps-prediction) parameterizations of the generating velocity field u:\\[0,1\\]√ó\\\\RealN‚Äã\\\\too‚Äã\\\\RealN:ùë¢01superscript\\\\RealùëÅ\\\\toosuperscript\\\\RealùëÅu:\\[0,1\\]\\\\times\\\\Real^{N}\\\\too\\\\Real^{N} appearing in [Table1]In The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\nIn Continuous FM one can chose several ways to define the probability paths (Lipman et al., [2022]); Liu et al., [2022]); Albergo and Vanden-Eijnden, [2022]); Pooladian et al., [2023]); Tong et al., [2023])):\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | pt‚Äã(x)subscriptùëùùë°ùë•\\\\displaystyle p\\_{t}(x) | =‚à´pt‚Äã(x\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)‚Äãùëëx0‚Äãùëëx1absentsubscriptùëùùë°conditionalùë•subscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1differential-dsubscriptùë•0differential-dsubscriptùë•1\\\\displaystyle=\\\\int p\\_{t}(x\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})dx\\_{0}dx\\_{1} |  | (54) |\\\n|  |  | =‚à´p1\\|t‚Äã(x\\|x1)‚Äãq‚Äã(x1)‚Äãùëëx1absentsubscriptùëùconditional1ùë°conditionalùë•subscriptùë•1ùëûsubscriptùë•1differential-dsubscriptùë•1\\\\displaystyle=\\\\int p\\_{1\\|t}(x\\|x\\_{1})q(x\\_{1})dx\\_{1} |  | (55) |\\\n|  |  | =‚à´p0\\|t‚Äã(x\\|x0)‚Äãp‚Äã(x0)‚Äãùëëx0.absentsubscriptùëùconditional0ùë°conditionalùë•subscriptùë•0ùëùsubscriptùë•0differential-dsubscriptùë•0\\\\displaystyle=\\\\int p\\_{0\\|t}(x\\|x\\_{0})p(x\\_{0})dx\\_{0}. |  | (56) |\\\n\\\n#### Denoiser parameterization.\\\n\\\nThe conditional generating velocity field ut‚Äã(x\\|x1)subscriptùë¢ùë°conditionalùë•subscriptùë•1u\\_{t}(x\\|x\\_{1}) for pt‚Äã(x\\|x1)subscriptùëùùë°conditionalùë•subscriptùë•1p\\_{t}(x\\|x\\_{1}), \\\\ie, satisfy the Continuity Equation [16]Equation 16 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), takes the form (Lipman et al., [2022]))\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x\\|x1)=Œ∫Àôt1‚àíŒ∫t‚Äã(x1‚àíx),subscriptùë¢ùë°conditionalùë•subscriptùë•1subscriptÀôùúÖùë°1subscriptùúÖùë°subscriptùë•1ùë•u\\_{t}(x\\|x\\_{1})=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}(x\\_{1}-x), |  | (57) |\\\n\\\nand the marginal generating velocity field is therefore given by the marginalization with the posterior pt‚Äã(x1\\|x)subscriptùëùùë°conditionalsubscriptùë•1ùë•p\\_{t}(x\\_{1}\\|x),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x)subscriptùë¢ùë°ùë•\\\\displaystyle u\\_{t}(x) | =‚à´Œ∫Àôt1‚àíŒ∫t‚Äã(x1‚àíx)‚Äãp1\\|t‚Äã(x\\|x1)‚Äãq‚Äã(x1)pt‚Äã(x)‚Äãùëëx1absentsubscriptÀôùúÖùë°1subscriptùúÖùë°subscriptùë•1ùë•subscriptùëùconditional1ùë°conditionalùë•subscriptùë•1ùëûsubscriptùë•1subscriptùëùùë°ùë•differential-dsubscriptùë•1\\\\displaystyle=\\\\int\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}(x\\_{1}-x)\\\\frac{p\\_{1\\|t}(x\\|x\\_{1})q(x\\_{1})}{p\\_{t}(x)}dx\\_{1} |  |\\\n|  |  | =Œ∫Àôt1‚àíŒ∫t‚Äã\\\\brac‚Äãx^1\\|t‚Äã(x)‚àíx,absentsubscriptÀôùúÖùë°1subscriptùúÖùë°\\\\bracsubscript^ùë•conditional1ùë°ùë•ùë•\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{1-\\\\kappa\\_{t}}\\\\brac{\\\\hat{x}\\_{1\\|t}(x)-x}, |  |\\\n\\\nwhere\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | x^1\\|t‚Äã(x)=‚à´x1‚Äãp1\\|t‚Äã(x\\|x1)‚Äãq‚Äã(x1)pt‚Äã(x)‚Äãùëëx1=\\\\EX1‚àºpt(‚ãÖ\\|x)‚ÄãX1.\\\\hat{x}\\_{1\\|t}(x)=\\\\int x\\_{1}\\\\frac{p\\_{1\\|t}(x\\|x\\_{1})q(x\\_{1})}{p\\_{t}(x)}dx\\_{1}=\\\\E\\_{X\\_{1}\\\\sim p\\_{t}(\\\\cdot\\|x)}X\\_{1}. |  | (58) |\\\n\\\nThis shows the continuous FM denoiser parameterization of the generating velocity field in [Table1]In The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\n#### Noise-prediction parameterization.\\\n\\\nThe conditional generating velocity field for pt‚Äã(x\\|x0)subscriptùëùùë°conditionalùë•subscriptùë•0p\\_{t}(x\\|x\\_{0}) takes the form\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x\\|x0)=Œ∫ÀôtŒ∫t‚Äã(x‚àíx0),subscriptùë¢ùë°conditionalùë•subscriptùë•0subscriptÀôùúÖùë°subscriptùúÖùë°ùë•subscriptùë•0u\\_{t}(x\\|x\\_{0})=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}(x-x\\_{0}), |  | (59) |\\\n\\\nand the marginal generating velocity field in this case is given by marginalization with the posterior pt‚Äã(x0\\|x)subscriptùëùùë°conditionalsubscriptùë•0ùë•p\\_{t}(x\\_{0}\\|x),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | ut‚Äã(x)subscriptùë¢ùë°ùë•\\\\displaystyle u\\_{t}(x) | =‚à´Œ∫ÀôtŒ∫t‚Äã(x‚àíx0)‚Äãp0\\|t‚Äã(x\\|x0)‚Äãp‚Äã(x0)pt‚Äã(x)‚Äãùëëx0absentsubscriptÀôùúÖùë°subscriptùúÖùë°ùë•subscriptùë•0subscriptùëùconditional0ùë°conditionalùë•subscriptùë•0ùëùsubscriptùë•0subscriptùëùùë°ùë•differential-dsubscriptùë•0\\\\displaystyle=\\\\int\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}(x-x\\_{0})\\\\frac{p\\_{0\\|t}(x\\|x\\_{0})p(x\\_{0})}{p\\_{t}(x)}dx\\_{0} |  |\\\n|  |  | =Œ∫ÀôtŒ∫t‚Äã\\\\brac‚Äãx‚àíx^0\\|t‚Äã(x),absentsubscriptÀôùúÖùë°subscriptùúÖùë°\\\\bracùë•subscript^ùë•conditional0ùë°ùë•\\\\displaystyle=\\\\frac{\\\\dot{\\\\kappa}\\_{t}}{\\\\kappa\\_{t}}\\\\brac{x-\\\\hat{x}\\_{0\\|t}(x)}, |  |\\\n\\\nwhere\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | x^0\\|t‚Äã(x)=‚à´x0‚Äãp0\\|t‚Äã(x\\|x0)‚Äãp‚Äã(x0)pt‚Äã(x)‚Äãùëëx0=\\\\EX0‚àºpt(‚ãÖ\\|x)‚ÄãX0.\\\\hat{x}\\_{0\\|t}(x)=\\\\int x\\_{0}\\\\frac{p\\_{0\\|t}(x\\|x\\_{0})p(x\\_{0})}{p\\_{t}(x)}dx\\_{0}=\\\\E\\_{X\\_{0}\\\\sim p\\_{t}(\\\\cdot\\|x)}X\\_{0}. |  | (60) |\\\n\\\nThis shows the continuous FM noise-prediction parameterization of the generating velocity field in [Table1]In The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\").\\\n\\\n### 10.10 Scheduler change formula\\\n\\\n###### Proposition 10.8.\\\n\\\nAssume a conditional probability path as in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), then for any two schedulers Œ∫t,Œ∫t‚Ä≤subscriptùúÖùë°subscriptsuperscriptùúÖ‚Ä≤ùë°\\\\kappa\\_{t},\\\\kappa^{\\\\prime}\\_{t}, and w^t‚Äã(xi\\|z),w^t‚Ä≤‚Äã(xi\\|z)subscript^ùë§ùë°conditionalsuperscriptùë•ùëñùëßsubscriptsuperscript^ùë§‚Ä≤ùë°conditionalsuperscriptùë•ùëñùëß\\\\hat{w}\\_{t}(x^{i}\\|z),\\\\hat{w}^{\\\\prime}\\_{t}(x^{i}\\|z) their corresponding posteriors as in ( [23]Equation 23 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")),\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | w^t‚Ä≤‚Äã(xi\\|z)=w^t‚Ä≤‚Äã(xi\\|z),subscript^ùë§superscriptùë°‚Ä≤conditionalsuperscriptùë•ùëñùëßsuperscriptsubscript^ùë§ùë°‚Ä≤conditionalsuperscriptùë•ùëñùëß\\\\hat{w}\\_{t^{\\\\prime}}(x^{i}\\|z)=\\\\hat{w}\\_{t}^{\\\\prime}(x^{i}\\|z), |  | (61) |\\\n\\\nwhere t‚Ä≤=Œ∫Œ∫t‚Ä≤‚àí1superscriptùë°‚Ä≤subscriptsuperscriptùúÖ1subscriptsuperscriptùúÖ‚Ä≤ùë°t^{\\\\prime}=\\\\kappa^{-1}\\_{\\\\kappa^{\\\\prime}\\_{t}}, and Œ∫‚àí1superscriptùúÖ1\\\\kappa^{-1} is the inverse of Œ∫ùúÖ\\\\kappa.\\\n\\\n###### Proof 10.9(Proof (Proposition [10.8]Proposition 10.8. ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")).).\\\n\\\nFor a conditional probability path as in ( [9]Equation 9 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")),\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | pt‚Ä≤‚Äã(xi\\|x0,x1)subscriptùëùsuperscriptùë°‚Ä≤conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle p\\_{t^{\\\\prime}}(x^{i}\\|x\\_{0},x\\_{1}) | =‚àèi=1Npt‚Ä≤‚Äã(xi\\|x0,x1)absentsuperscriptsubscriptproductùëñ1ùëÅsubscriptùëùsuperscriptùë°‚Ä≤conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\prod\\_{i=1}^{N}p\\_{t^{\\\\prime}}(x^{i}\\|x\\_{0},x\\_{1}) |  | (62) |\\\n|  |  | =‚àèi=1N\\\\brac‚Äã(1‚àíŒ∫t‚Ä≤)‚ÄãŒ¥x0‚Äã(xi)+Œ∫t‚Ä≤‚ÄãŒ¥x1‚Äã(xi)absentsuperscriptsubscriptproductùëñ1ùëÅ\\\\brac1subscriptùúÖsuperscriptùë°‚Ä≤subscriptùõøsubscriptùë•0superscriptùë•ùëñsubscriptùúÖsuperscriptùë°‚Ä≤subscriptùõøsubscriptùë•1superscriptùë•ùëñ\\\\displaystyle=\\\\prod\\_{i=1}^{N}\\\\brac{(1-\\\\kappa\\_{t^{\\\\prime}})\\\\delta\\_{x\\_{0}}(x^{i})+\\\\kappa\\_{t^{\\\\prime}}\\\\delta\\_{x\\_{1}}(x^{i})} |  | (63) |\\\n|  |  | =‚àèi=1N\\\\brac‚Äã(1‚àíŒ∫t‚Ä≤)‚ÄãŒ¥x0‚Äã(xi)+Œ∫t‚Ä≤‚ÄãŒ¥x1‚Äã(xi)absentsuperscriptsubscriptproductùëñ1ùëÅ\\\\brac1subscriptsuperscriptùúÖ‚Ä≤ùë°subscriptùõøsubscriptùë•0superscriptùë•ùëñsubscriptsuperscriptùúÖ‚Ä≤ùë°subscriptùõøsubscriptùë•1superscriptùë•ùëñ\\\\displaystyle=\\\\prod\\_{i=1}^{N}\\\\brac{(1-\\\\kappa^{\\\\prime}\\_{t})\\\\delta\\_{x\\_{0}}(x^{i})+\\\\kappa^{\\\\prime}\\_{t}\\\\delta\\_{x\\_{1}}(x^{i})} |  | (64) |\\\n|  |  | =‚àèi=1Npt‚Ä≤‚Äã(xi\\|x0,x1)absentsuperscriptsubscriptproductùëñ1ùëÅsubscriptsuperscriptùëù‚Ä≤ùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\prod\\_{i=1}^{N}p^{\\\\prime}\\_{t}(x^{i}\\|x\\_{0},x\\_{1}) |  | (65) |\\\n|  |  | =pt‚Ä≤‚Äã(xi\\|x0,x1),absentsubscriptsuperscriptùëù‚Ä≤ùë°conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1\\\\displaystyle=p^{\\\\prime}\\_{t}(x^{i}\\|x\\_{0},x\\_{1}), |  | (66) |\\\n\\\nwhere in the 3rd equality we used Œ∫t‚Ä≤=Œ∫t‚Ä≤subscriptùúÖsuperscriptùë°‚Ä≤subscriptsuperscriptùúÖ‚Ä≤ùë°\\\\kappa\\_{t^{\\\\prime}}=\\\\kappa^{\\\\prime}\\_{t}. Thus, also for the marginal probability path as in ( [7]Equation 7 ‚Ä£ 2.3 Probability paths ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")),\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | pt‚Ä≤‚Äã(x)subscriptùëùsuperscriptùë°‚Ä≤ùë•\\\\displaystyle p\\_{t^{\\\\prime}}(x) | =‚àëx0,x1‚àà\\\\gDpt‚Ä≤‚Äã(x\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)absentsubscriptsubscriptùë•0subscriptùë•1\\\\gDsubscriptùëùsuperscriptùë°‚Ä≤conditionalùë•subscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}p\\_{t^{\\\\prime}}(x\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1}) |  | (67) |\\\n|  |  | =‚àëx0,x1‚àà\\\\gDpt‚Ä≤‚Äã(x\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)absentsubscriptsubscriptùë•0subscriptùë•1\\\\gDsubscriptsuperscriptùëù‚Ä≤ùë°conditionalùë•subscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}p^{\\\\prime}\\_{t}(x\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1}) |  | (68) |\\\n|  |  | =pt‚Ä≤‚Äã(x),absentsubscriptsuperscriptùëù‚Ä≤ùë°ùë•\\\\displaystyle=p^{\\\\prime}\\_{t}(x), |  | (69) |\\\n\\\nwhere in the 2nd equality we used pt‚Ä≤‚Äã(x\\|x0,x1)=pt‚Ä≤‚Äã(x\\|x0,x1)subscriptùëùsuperscriptùë°‚Ä≤conditionalùë•subscriptùë•0subscriptùë•1subscriptsuperscriptùëù‚Ä≤ùë°conditionalùë•subscriptùë•0subscriptùë•1p\\_{t^{\\\\prime}}(x\\|x\\_{0},x\\_{1})=p^{\\\\prime}\\_{t}(x\\|x\\_{0},x\\_{1}). Finally the change of scheduler for a posterior as defined in ( [23]Equation 23 ‚Ä£ The Continuity Equation. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")),\\\n\\\n|     |     |     |     |     |\\\n| --- | --- | --- | --- | --- |\\\n|  | w^t‚Ä≤‚Äã(xi\\|z)subscript^ùë§superscriptùë°‚Ä≤conditionalsuperscriptùë•ùëñùëß\\\\displaystyle\\\\hat{w}\\_{t^{\\\\prime}}(x^{i}\\|z) | =‚àëx0,x1‚àà\\\\gDw‚Äã(xi\\|x0,x1)‚Äãpt‚Ä≤‚Äã(x0,x1\\|z)absentsubscriptsubscriptùë•0subscriptùë•1\\\\gDùë§conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùëùsuperscriptùë°‚Ä≤subscriptùë•0conditionalsubscriptùë•1ùëß\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}w(x^{i}\\|x\\_{0},x\\_{1})p\\_{t^{\\\\prime}}(x\\_{0},x\\_{1}\\|z) |  | (70) |\\\n|  |  | =‚àëx0,x1‚àà\\\\gDw‚Äã(xi\\|x0,x1)‚Äãpt‚Ä≤‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Ä≤‚Äã(z)absentsubscriptsubscriptùë•0subscriptùë•1\\\\gDùë§conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptùëùsuperscriptùë°‚Ä≤conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptùëùsuperscriptùë°‚Ä≤ùëß\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}w(x^{i}\\|x\\_{0},x\\_{1})\\\\frac{p\\_{t^{\\\\prime}}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{p\\_{t^{\\\\prime}}(z)} |  | (71) |\\\n|  |  | =‚àëx0,x1‚àà\\\\gDw‚Äã(xi\\|x0,x1)‚Äãpt‚Ä≤‚Äã(z\\|x0,x1)‚ÄãœÄ‚Äã(x0,x1)pt‚Ä≤‚Äã(z)absentsubscriptsubscriptùë•0subscriptùë•1\\\\gDùë§conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptsuperscriptùëù‚Ä≤ùë°conditionalùëßsubscriptùë•0subscriptùë•1ùúãsubscriptùë•0subscriptùë•1subscriptsuperscriptùëù‚Ä≤ùë°ùëß\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}w(x^{i}\\|x\\_{0},x\\_{1})\\\\frac{p^{\\\\prime}\\_{t}(z\\|x\\_{0},x\\_{1})\\\\pi(x\\_{0},x\\_{1})}{p^{\\\\prime}\\_{t}(z)} |  | (72) |\\\n|  |  | =‚àëx0,x1‚àà\\\\gDw‚Äã(xi\\|x0,x1)‚Äãpt‚Ä≤‚Äã(x0,x1\\|z)absentsubscriptsubscriptùë•0subscriptùë•1\\\\gDùë§conditionalsuperscriptùë•ùëñsubscriptùë•0subscriptùë•1subscriptsuperscriptùëù‚Ä≤ùë°subscriptùë•0conditionalsubscriptùë•1ùëß\\\\displaystyle=\\\\sum\\_{x\\_{0},x\\_{1}\\\\in\\\\gD}w(x^{i}\\|x\\_{0},x\\_{1})p^{\\\\prime}\\_{t}(x\\_{0},x\\_{1}\\|z) |  | (73) |\\\n|  |  | =w^t‚Ä≤‚Äã(xi\\|z)absentsubscriptsuperscript^ùë§‚Ä≤ùë°conditionalsuperscriptùë•ùëñùëß\\\\displaystyle=\\\\hat{w}^{\\\\prime}\\_{t}(x^{i}\\|z) |  | (74) |\\\n\\\nwhere in the 3rd equality we used both pt‚Ä≤‚Äã(z\\|x0,x1)=pt‚Ä≤‚Äã(z\\|x0,x1)subscriptùëùsuperscriptùë°‚Ä≤conditionalùëßsubscriptùë•0subscriptùë•1subscriptsuperscriptùëù‚Ä≤ùë°conditionalùëßsubscriptùë•0subscriptùë•1p\\_{t^{\\\\prime}}(z\\|x\\_{0},x\\_{1})=p^{\\\\prime}\\_{t}(z\\|x\\_{0},x\\_{1}) and pt‚Ä≤‚Äã(z)=pt‚Ä≤‚Äã(z)subscriptùëùsuperscriptùë°‚Ä≤ùëßsubscriptsuperscriptùëù‚Ä≤ùë°ùëßp\\_{t^{\\\\prime}}(z)=p^{\\\\prime}\\_{t}(z).\\\n\\",
            "citations": null
          },
          "11 Inference time\\": {
            "content": "\\\nOne potential benefit of non-autoregressive decoding is improved latency due to a significantly lower number of decoding steps. To demonstrate that, we measure the average latency of the proposed method compared with the autoregressive alternative using a single A100 GPU with 808080 GB of RAM. We calculate the average latency time on the HumanEval benchmark using a batch size of 1. When considering 256 NFEs, the proposed method was found to be ‚àºsimilar-to\\\\sim2.5x faster than the autoregressive model (19.97 vs. 50.94 seconds on average per example). However, when considering 512 NFEs, both methods reach roughly the same latency. These results make sense as the number of tokens in most of the examples in HumanEval are below 512. Notice, that these results analyze latency and not model throughput. Due to the kv-caching mechanism following the autoregressive approach will result in significantly better throughput compared to the proposed approach Ziv et al.( [2024])). We leave the construction of a kv-cache mechanism to the proposed approach for future research.\\\n\\",
            "citations": null
          },
          "12 Experimental setup\\": {
            "content": "\\\n### 12.1 Text\\\n\\\n#### Data.\\\n\\\nWe use three splits of data. First is OpenWebText (Gokaslan and Cohen, [2019])). Second is the same mix used in Llama-2 (Touvron et al., [2023])), including textual and code data. For the code-focused models we use the same split used in CodeLlama (Roziere et al., [2023])). For the small models, we use OpenWebText. For the big models we use the Llama-2 and CodeLlama mixes.\\\n\\\n#### Models.\\\n\\\nWe train two sizes of models: small (150M parameters) and large (1.7B parameters). For the small model we used a DiT transformer architecture (Peebles and Xie, [2022])) with 12 layers, 12 attention heads, and hidden dimension of 768. We also used GPT2 tokenizer. The small models were trained on OpenWebText. For the large model, we use also used a DiT transformer architecture but with 48 layers, 24 attention heads, and hidden dimension of 1536 (Peebles and Xie, [2022])). For these models we used a tiktoken tokenizer. The large models were trained on the Llama-2 mix and the CodeLlama mix.\\\nFor both models we used ROPE (Su et al., [2024])) embedding with Œ∏=10000ùúÉ10000\\\\theta=10000. Models are trained with Adam optimizer with Œ≤1=0.9subscriptùõΩ10.9\\\\beta\\_{1}=0.9 and Œ≤2=0.999subscriptùõΩ20.999\\\\beta\\_{2}=0.999. We use dropout rate of 0.1. Models are trained with a warm-up of 2500 steps, with a peak learning rate of 3e-4. We train the big models with batch size of 4096 for 1.3 million iterations and the big models with batch size of 512 for 400 thousand iterations.\\\n\\\n#### Entropy metric.\\\n\\\nWe report the entropy of tokens within a sequence, averaged over all generated sequences. This intuitively quantifies the diversity of tokens within a given sequence. It‚Äôs important to note that when computing sequence entropy, tokens not present in the sequence are excluded from consideration.\\\n\\\n#### Generative perplexity metric.\\\n\\\nThe generative perplexity metric is the average likelihood of generated text evaluated with a second (usually stronger) model.\\\n\\\n### 12.2 Image\\\n\\\n#### Models.\\\n\\\nFor all our experiments on CIFAR10 we use the U-Net architecture as in Dhariwal and Nichol( [2021])), with following three changes to make it fully discrete and time independent (as we used mask modeling): (i) We replace the first layer with an embedding table of size 257√ó9625796257\\\\times 96, and we stack the channel features such that the input to the U-Net is of shape 288√ó32√ó322883232288\\\\times 32\\\\times 32. (ii) We enlarge the size of the final layer to output a tensor of shape 3√ó32√ó32√ó257332322573\\\\times 32\\\\times 32\\\\times 257. (iii) We remove the time dependency from architecture. The hyper-parameters of the architecture: channels 96 , depth 5, channels multiple \\[3,4,4\\], heads channels 64, attention resolution 16, dropout 0.4, which gives a total parameters count of 113M. We optimize the network using Adam optimizer with Œ≤1=0.9subscriptùõΩ10.9\\\\beta\\_{1}=0.9 and Œ≤2=0.999subscriptùõΩ20.999\\\\beta\\_{2}=0.999, a learning rate of 1e-4. We trained with an effective batch size pf 512 for roughly 300K iterations.\\\n\\\n#### Scheduler ablation.\\\n\\\n[Figure8]In Scheduler ablation. ‚Ä£ 12.2 Image ‚Ä£ 12 Experimental setup ‚Ä£ 11 Inference time ‚Ä£ 10.10 Scheduler change formula ‚Ä£ 10 Theory and proofs ‚Ä£ Temperature scheduling. ‚Ä£ 9 Ablations ‚Ä£ 8 Code infilling ‚Ä£ Post training scheduler change. ‚Ä£ 7 Further implementation details ‚Ä£ Masked generative modeling. ‚Ä£ 6 Related works, continuation ‚Ä£ 5 Conclusions and future work ‚Ä£ 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\") shows FID of our method with four different schedulers: Linear, Quadratic, Cubic, Cosine, both for training and evaluation. That is, for each scheduler we trained a model and evaluate FID with all four schedulers. We observe a high variance in FID between different schedulers, with the Cubic scheduler generally performing the best on both training and evaluation.\\\n\\\n![Refer to caption]Figure 8: Comparison of FID on CIFAR10 with four schedulers: Linear, Quadratic, Cubic, Cosine, for both train and evaluation. Corrector sampling is not used in this experiment (\\\\ie, Œ±t=0subscriptùõºùë°0\\\\alpha\\_{t}=0 in ( [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"))), and temperature is set to 1.\\\n\\\n#### Comparison with baselines.\\\n\\\nIn the following, we provide implementation details for producing [Figure3]In 4.2 Image generation ‚Ä£ 4 Experiments ‚Ä£ 3 Related work ‚Ä£ Training. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\"), that compares our schedulers and sampling algorithm with those employed by previous works.\\\n\\\n#### Cubic Scheduler (Ours).\\\n\\\nFor the Cubic scheduler we set the corrector scheduler as above to,\\\n\\\n|     |     |     |     |\\\n| --- | --- | --- | --- |\\\n|  | Œ±t=1+Œ±‚Äãta‚Äã(1‚àít)b,Œ≤t=Œ±t‚àí1,formulae-sequencesubscriptùõºùë°1ùõºsuperscriptùë°ùëésuperscript1ùë°ùëèsubscriptùõΩùë°subscriptùõºùë°1\\\\alpha\\_{t}=1+\\\\alpha t^{a}(1-t)^{b},\\\\quad\\\\beta\\_{t}=\\\\alpha\\_{t}-1, |  | (75) |\\\n\\\nand we search over the parameters a,b‚àà\\\\set‚Äã0,0.25,0.5,1,2,2.5,3formulae-sequenceùëéùëè\\\\set00.250.5122.53a,b\\\\in\\\\set{0,0.25,0.5,1,2,2.5,3}, and Œ±‚àà\\\\set‚Äã6,8,10,12,14ùõº\\\\set68101214\\\\alpha\\\\in\\\\set{6,8,10,12,14}. Additionally, we search over the temperature ‚àà\\\\set‚Äã1,0.9,0.8absent\\\\set10.90.8\\\\in\\\\set{1,0.9,0.8}. We find that a=2ùëé2a=2, b=0.25ùëè0.25b=0.25, Œ±=12ùõº12\\\\alpha=12 give best FID.\\\n\\\n#### Linear Scheduler (Campbell et al., [2024])).\\\n\\\nFor the linear scheduler we search over two additional hyper-parameters of the method: (i) For corrector scheduler as in ( [26]Equation 26 ‚Ä£ Corrector sampling. ‚Ä£ 2.4 Generating Probability Velocities ‚Ä£ 2 Discrete Flow Matching ‚Ä£ Discrete Flow Matching\")), we set Œ±t=1+t‚ÄãŒ∑subscriptùõºùë°1ùë°ùúÇ\\\\alpha\\_{t}=1+t\\\\eta, Œ≤t=Œ±t‚àí1subscriptùõΩùë°subscriptùõºùë°1\\\\beta\\_{t}=\\\\alpha\\_{t}-1, where Œ∑ùúÇ\\\\eta is the stochasticity parameter as in Campbell et al.( [2024])), and search over Œ∑‚àà\\\\set‚Äã0,1,2,5,10,15ùúÇ\\\\set01251015\\\\eta\\\\in\\\\set{0,1,2,5,10,15}. (ii) We search over temperature in \\\\set‚Äã1,0.9,0.8\\\\set10.90.8\\\\set{1,0.9,0.8}. Finally, we find that the best FID is a achieved by Œ∑=10ùúÇ10\\\\eta=10 and temperature 0.90.90.9.\\\n\\\n#### MaskGIT (Chang et al., [2022])).\\\n\\\nFor the MaskGIT we train and sample with the Cosine scheduler Œ∫‚Äã(t)=1‚àícos‚Å°\\\\parr‚ÄãœÄ2‚ÄãtùúÖùë°1\\\\parrùúã2ùë°\\\\kappa(t)=1-\\\\cos\\\\parr{\\\\frac{\\\\pi}{2}t} which is reported to achieve best results by Chang et al.( [2022])). For sampling we adjust the code from the re-implementation of Besnier and Chen( [2023])). In addition, we also search over the temperature in \\\\set‚Äã1,0.9,0.8,0.7,0.6,0.5\\\\set10.90.80.70.60.5\\\\set{1,0.9,0.8,0.7,0.6,0.5}, and we find the best FID is achieved by temperature 1.\\\n\\",
            "citations": null
          },
          "13 Code generation - qualitative examples\\": {
            "content": "\\\n### 13.1 Success cases\\\n\\\n[‚¨á](data:text/plain;base64,CmZyb20gdHlwaW5nIGltcG9ydCBMaXN0ClxwYXJccGFyZGVmIGJlbG93X3plcm8ob3BlcmF0aW9uczogTGlzdFtpbnRdKSAtPiBib29sOgoiIiIgWW91J3JlIGdpdmVuIGEgbGlzdCBvZiBkZXBvc2l0IGFuZCB3aXRoZHJhd2FsIG9wZXJhdGlvbnMKb24gYSBiYW5rIGFjY291bnQgdGhhdCBzdGFydHMgd2l0aAp6ZXJvIGJhbGFuY2UuIFlvdXIgdGFzayBpcyB0byBkZXRlY3QgaWYgYXQgYW55IHBvaW50IHRoZSBiYWxhbmNlCm9mIGFjY291bnQgZmFsbGxzIGJlbG93IHplcm8sIGFuZAphdCB0aGF0IHBvaW50IGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gVHJ1ZS4KT3RoZXJ3aXNlIGl0IHNob3VsZCByZXR1cm4gRmFsc2UuCj4+PiBiZWxvd196ZXJvKFsxLCAyLCAzXSkKRmFsc2UKPj4+IGJlbG93X3plcm8oWzEsIDIsIC00LCA1XSkKVHJ1ZQoiIiIK)\\\n\\\nfromtypingimportList\\\n\\\n\\par\\pardefbelow\\_zero(operations:List\\[int\\])->bool:\\\n\\\n\"\"\"You‚Äôregivenalistofdepositandwithdrawaloperations\\\n\\\nonabankaccountthatstartswith\\\n\\\nzerobalance.Yourtaskistodetectifatanypointthebalance\\\n\\\nofaccountfalllsbelowzero,and\\\n\\\natthatpointfunctionshouldreturnTrue.\\\n\\\nOtherwiseitshouldreturnFalse.\\\n\\\n>>>below\\_zero(\\[1,2,3\\])\\\n\\\nFalse\\\n\\\n>>>below\\_zero(\\[1,2,-4,5\\])\\\n\\\nTrue\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmJhbGFuY2UgPSAwCmZvciBvcGVyYXRpb24gaW4gb3BlcmF0aW9uczoKaWYgYmFsYW5jZSArIG9wZXJhdGlvbiA8IDA6CnJldHVybiBUcnVlCmJhbGFuY2UgPSBiYWxhbmNlICsgb3BlcmF0aW9uCnJldHVybiBGYWxzZQo=)\\\n\\\nbalance=0\\\n\\\nforoperationinoperations:\\\n\\\nifbalance+operation<0:\\\n\\\nreturnTrue\\\n\\\nbalance=balance+operation\\\n\\\nreturnFalse\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBlbmNvZGVfc2hpZnQoczogc3RyKToKIiIiCnJldHVybnMgZW5jb2RlZCBzdHJpbmcgYnkgc2hpZnRpbmcgZXZlcnkgY2hhcmFjdGVyIGJ5IDUgaW4gdGhlIGFscGhhYmV0LgoiIiIKcmV0dXJuICIiLmpvaW4oW2NocigoKG9yZChjaCkgKyA1IC0gb3JkKCJhIikpIFxwYXJccGFyZGVmIGRlY29kZV9zaGlmdChzOiBzdHIpOgoiIiIKdGFrZXMgYXMgaW5wdXQgc3RyaW5nIGVuY29kZWQgd2l0aCBlbmNvZGVfc2hpZnQgZnVuY3Rpb24uClJldHVybnMgZGVjb2RlZCBzdHJpbmcuCiIiIgo=)\\\n\\\ndefencode\\_shift(s:str):\\\n\\\n\"\"\"\\\n\\\nreturnsencodedstringbyshiftingeverycharacterby5inthealphabet.\\\n\\\n\"\"\"\\\n\\\nreturn\"\".join(\\[chr(((ord(ch)+5-ord(\"a\"))\\par\\pardefdecode\\_shift(s:str):\\\n\\\n\"\"\"\\\n\\\ntakesasinputstringencodedwithencode\\_shiftfunction.\\\n\\\nReturnsdecodedstring.\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmRlY29kZWQgPSBbXQpmb3IgY2ggaW4gczoKZGVjb2RlZC5hcHBlbmQoY2hyKCgob3JkKGNoKSAtIDUgLSBvcmQoImEiKSkgcmV0dXJuICIiLmpvaW4oZGVjb2RlZCkK)\\\n\\\ndecoded=\\[\\]\\\n\\\nforchins:\\\n\\\ndecoded.append(chr(((ord(ch)-5-ord(\"a\"))return\"\".join(decoded)\\\n\\\n[‚¨á](data:text/plain;base64,CmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBBbnkKXHBhclxwYXJkZWYgZmlsdGVyX2ludGVnZXJzKHZhbHVlczogTGlzdFtBbnldKSAtPiBMaXN0W2ludF06CiIiIiBGaWx0ZXIgZ2l2ZW4gbGlzdCBvZiBhbnkgcHl0aG9uIHZhbHVlcyBvbmx5IGZvciBpbnRlZ2Vycwo+Pj4gZmlsdGVyX2ludGVnZXJzKFsnYScsIDMuMTQsIDVdKQpbNV0KPj4+IGZpbHRlcl9pbnRlZ2VycyhbMSwgMiwgMywgJ2FiYycsIHt9LCBbXV0pClsxLCAyLCAzXQoiIiIK)\\\n\\\nfromtypingimportList,Any\\\n\\\n\\par\\pardeffilter\\_integers(values:List\\[Any\\])->List\\[int\\]:\\\n\\\n\"\"\"Filtergivenlistofanypythonvaluesonlyforintegers\\\n\\\n>>>filter\\_integers(\\[‚Äôa‚Äô,3.14,5\\])\\\n\\\n\\[5\\]\\\n\\\n>>>filter\\_integers(\\[1,2,3,‚Äôabc‚Äô,{},\\[\\]\\])\\\n\\\n\\[1,2,3\\]\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CnJldHVybiBbdmFsdWUgZm9yIHZhbHVlIGluIHZhbHVlcyBpZiBpc2luc3RhbmNlKHZhbHVlLCBpbnQpXQo=)\\\n\\\nreturn\\[valueforvalueinvaluesifisinstance(value,int)\\]\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBjb21tb24obDE6IGxpc3QsIGwyOiBsaXN0KToKIiIiUmV0dXJuIHNvcnRlZCB1bmlxdWUgY29tbW9uIGVsZW1lbnRzIGZvciB0d28gbGlzdHMuCj4+PiBjb21tb24oWzEsIDQsIDMsIDM0LCA2NTMsIDIsIDVdLCBbNSwgNywgMSwgNSwgOSwgNjUzLCAxMjFdKQpbMSwgNSwgNjUzXQo+Pj4gY29tbW9uKFs1LCAzLCAyLCA4XSwgWzMsIDJdKQpbMiwgM10KXHBhciIiIgo=)\\\n\\\ndefcommon(l1:list,l2:list):\\\n\\\n\"\"\"Returnsorteduniquecommonelementsfortwolists.\\\n\\\n>>>common(\\[1,4,3,34,653,2,5\\],\\[5,7,1,5,9,653,121\\])\\\n\\\n\\[1,5,653\\]\\\n\\\n>>>common(\\[5,3,2,8\\],\\[3,2\\])\\\n\\\n\\[2,3\\]\\\n\\\n\\par\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CnJldHVybiBzb3J0ZWQoc2V0KGwxKSAmIHNldChsMikpCg==)\\\n\\\nreturnsorted(set(l1)&set(l2))\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBmaWJmaWIobjogaW50KToKIiIiVGhlIEZpYkZpYiBudW1iZXIgc2VxdWVuY2UgaXMgYSBzZXF1ZW5jZSBzaW1pbGFyIHRvCnRoZSBGaWJib25hY2NpIHNlcXVuZWNlIHRoYXQncyBkZWZpbmVkIGFzIGZvbGxvd3M6CmZpYmZpYigwKSA9PSAwCmZpYmZpYigxKSA9PSAwCmZpYmZpYigyKSA9PSAxCmZpYmZpYihuKSA9PSBmaWJmaWIobi0xKSArIGZpYmZpYihuLTIpICsgZmliZmliKG4tMykuClBsZWFzZSB3cml0ZSBhIGZ1bmN0aW9uIHRvIGVmZmljaWVudGx5IGNvbXB1dGUgdGhlCm4tdGggZWxlbWVudCBvZiB0aGUgZmliZmliIG51bWJlciBzZXF1ZW5jZS4KPj4+IGZpYmZpYigxKQowCj4+PiBmaWJmaWIoNSkKNAo+Pj4gZmliZmliKDgpCjI0CiIiIgo=)\\\n\\\ndeffibfib(n:int):\\\n\\\n\"\"\"TheFibFibnumbersequenceisasequencesimilarto\\\n\\\ntheFibbonaccisequnecethat‚Äôsdefinedasfollows:\\\n\\\nfibfib(0)==0\\\n\\\nfibfib(1)==0\\\n\\\nfibfib(2)==1\\\n\\\nfibfib(n)==fibfib(n-1)+fibfib(n-2)+fibfib(n-3).\\\n\\\nPleasewriteafunctiontoefficientlycomputethe\\\n\\\nn-thelementofthefibfibnumbersequence.\\\n\\\n>>>fibfib(1)\\\n\\\n0\\\n\\\n>>>fibfib(5)\\\n\\\n4\\\n\\\n>>>fibfib(8)\\\n\\\n24\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmlmIG4gPT0gMDoKcmV0dXJuIDAKZWxpZiBuID09IDE6CnJldHVybiAwCmVsaWYgbiA9PSAyOgpyZXR1cm4gMQplbHNlOgpyZXR1cm4gZmliZmliKG4tMSkgKyBmaWJmaWIobi0yKSArIGZpYmZpYihuLTMpCg==)\\\n\\\nifn==0:\\\n\\\nreturn0\\\n\\\nelifn==1:\\\n\\\nreturn0\\\n\\\nelifn==2:\\\n\\\nreturn1\\\n\\\nelse:\\\n\\\nreturnfibfib(n-1)+fibfib(n-2)+fibfib(n-3)\\\n\\\n### 13.2 Failure cases\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBzb2x2ZShzKToKIiIiWW91IGFyZSBnaXZlbiBhIHN0cmluZyBzLgppZiBzW2ldIGlzIGEgbGV0dGVyLCByZXZlcnNlIGl0cyBjYXNlIGZyb20gbG93ZXIgdG8gdXBwZXIgb3IgdmlzZSB2ZXJzYSwKb3RoZXJ3aXNlIGtlZXAgaXQgYXMgaXQgaXMuCklmIHRoZSBzdHJpbmcgY29udGFpbnMgbm8gbGV0dGVycywgcmV2ZXJzZSB0aGUgc3RyaW5nLgpUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiB0aGUgcmVzdWx0ZWQgc3RyaW5nLgpFeGFtcGxlcwpzb2x2ZSgiMTIzNCIpID0gIjQzMjEiCnNvbHZlKCJhYiIpID0gIkFCIgpzb2x2ZSgiI2FAQyIpID0gIiNBQGMiCiIiIgo=)\\\n\\\ndefsolve(s):\\\n\\\n\"\"\"Youaregivenastrings.\\\n\\\nifs\\[i\\]isaletter,reverseitscasefromlowertoupperorviseversa,\\\n\\\notherwisekeepitasitis.\\\n\\\nIfthestringcontainsnoletters,reversethestring.\\\n\\\nThefunctionshouldreturntheresultedstring.\\\n\\\nExamples\\\n\\\nsolve(\"1234\")=\"4321\"\\\n\\\nsolve(\"ab\")=\"AB\"\\\n\\\nsolve(\"#a@C\")=\"#A@c\"\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmlmIHMgaXMgTm9uZToKcmV0dXJuICIiCmlmIGxlbihzKSA9PSAwOgpyZXR1cm4gcwojIHJlc3VsdCBzdHJpbmcKcmVzID0gc3RyKCkKIyB0byBsb3dlciBjYXNlCnMgPSBzLmxvd2VyKCkKZm9yIGkgaW4gcmFuZ2UobGVuKHMpKToKY2ggPSBzW2ldCmlmIGNoLmlzbG93ZXIoKToKcmVzLmFwcGVuZChjaCkKZWxpZiBjaC5pc3VwcGVyKCk6CnJlcy5hcHBlbmQoY2gubG93ZXIoKSkKZWxzZToKcmVzLmFwcGVuZChjaCkKcmV0dXJuIHJlcwo=)\\\n\\\nifsisNone:\\\n\\\nreturn\"\"\\\n\\\niflen(s)==0:\\\n\\\nreturns\\\n\\\n#resultstring\\\n\\\nres=str()\\\n\\\n#tolowercase\\\n\\\ns=s.lower()\\\n\\\nforiinrange(len(s)):\\\n\\\nch=s\\[i\\]\\\n\\\nifch.islower():\\\n\\\nres.append(ch)\\\n\\\nelifch.isupper():\\\n\\\nres.append(ch.lower())\\\n\\\nelse:\\\n\\\nres.append(ch)\\\n\\\nreturnres\\\n\\\n[‚¨á](data:text/plain;base64,CmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBUdXBsZQpccGFyZGVmIHJvbGxpbmdfbWF4KG51bWJlcnM6IExpc3RbaW50XSkgLT4gTGlzdFtpbnRdOgoiIiIgRnJvbSBhIGdpdmVuIGxpc3Qgb2YgaW50ZWdlcnMsIGdlbmVyYXRlIGEgbGlzdCBvZiByb2xsaW5nIG1heGltdW0gZWxlbWVudApmb3VuZCB1bnRpbCBnaXZlbiBtb21lbnQgaW4gdGhlIHNlcXVlbmNlLgo+Pj4gcm9sbGluZ19tYXgoWzEsIDIsIDMsIDIsIDMsIDQsIDJdKQpbMSwgMiwgMywgMywgMywgNCwgNF0KIiIiCg==)\\\n\\\nfromtypingimportList,Tuple\\\n\\\n\\pardefrolling\\_max(numbers:List\\[int\\])->List\\[int\\]:\\\n\\\n\"\"\"Fromagivenlistofintegers,generatealistofrollingmaximumelement\\\n\\\nfounduntilgivenmomentinthesequence.\\\n\\\n>>>rolling\\_max(\\[1,2,3,2,3,4,2\\])\\\n\\\n\\[1,2,3,3,3,4,4\\]\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,Cm1heF9udW1iZXIgPSAwCnJlc3VsdCA9IFtdCmZvciBudW1iZXIgaW4gbnVtYmVyczoKbWF4X251bWJlciA9IG1heChyZXN1bHQpCmlmIG51bWJlciA+IG1heF9udW1iZXI6CnJlc3VsdC5hcHBlbmQobnVtYmVyKQplbHNlOgpyZXN1bHQgPSBbbWF4X251bWJlcl0KcmV0dXJuIHJlc3VsdAo=)\\\n\\\nmax\\_number=0\\\n\\\nresult=\\[\\]\\\n\\\nfornumberinnumbers:\\\n\\\nmax\\_number=max(result)\\\n\\\nifnumber>max\\_number:\\\n\\\nresult.append(number)\\\n\\\nelse:\\\n\\\nresult=\\[max\\_number\\]\\\n\\\nreturnresult\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiB0cnVuY2F0ZV9udW1iZXIobnVtYmVyOiBmbG9hdCkgLT4gZmxvYXQ6CiIiIiBHaXZlbiBhIHBvc2l0aXZlIGZsb2F0aW5nIHBvaW50IG51bWJlciwgaXQgY2FuIGJlIGRlY29tcG9zZWQgaW50bwphbmQgaW50ZWdlciBwYXJ0IChsYXJnZXN0IGludGVnZXIgc21hbGxlciB0aGFuIGdpdmVuIG51bWJlcikgYW5kIGRlY2ltYWxzCihsZWZ0b3ZlciBwYXJ0IGFsd2F5cyBzbWFsbGVyIHRoYW4gMSkuClxwYXJSZXR1cm4gdGhlIGRlY2ltYWwgcGFydCBvZiB0aGUgbnVtYmVyLgo+Pj4gdHJ1bmNhdGVfbnVtYmVyKDMuNSkKMC41CiIiIgo=)\\\n\\\ndeftruncate\\_number(number:float)->float:\\\n\\\n\"\"\"Givenapositivefloatingpointnumber,itcanbedecomposedinto\\\n\\\nandintegerpart(largestintegersmallerthangivennumber)anddecimals\\\n\\\n(leftoverpartalwayssmallerthan1).\\\n\\\n\\parReturnthedecimalpartofthenumber.\\\n\\\n>>>truncate\\_number(3.5)\\\n\\\n0.5\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CnJldHVybiBtYXRoLmZsb29yKG51bWJlcikK)\\\n\\\nreturnmath.floor(number)\\\n\\\n[‚¨á](data:text/plain;base64,CmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBUdXBsZQpccGFyZGVmIHN1bV9wcm9kdWN0KG51bWJlcnM6IExpc3RbaW50XSkgLT4gVHVwbGVbaW50LCBpbnRdOgoiIiIgRm9yIGEgZ2l2ZW4gbGlzdCBvZiBpbnRlZ2VycywgcmV0dXJuIGEgdHVwbGUgY29uc2lzdGluZyBvZiBhIHN1bSBhbmQgYQpwcm9kdWN0IG9mIGFsbCB0aGUgaW50ZWdlcnMgaW4gYSBsaXN0LiBFbXB0eSBzdW0gc2hvdWxkIGJlIGVxdWFsIHRvIDAgYW5kCmVtcHR5IHByb2R1Y3Qgc2hvdWxkIGJlIGVxdWFsIHRvIDEuCj4+PiBzdW1fcHJvZHVjdChbXSkKKDAsIDEpCj4+PiBzdW1fcHJvZHVjdChbMSwgMiwgMywgNF0pCigxMCwgMjQpCiIiIgo=)\\\n\\\nfromtypingimportList,Tuple\\\n\\\n\\pardefsum\\_product(numbers:List\\[int\\])->Tuple\\[int,int\\]:\\\n\\\n\"\"\"Foragivenlistofintegers,returnatupleconsistingofasumanda\\\n\\\nproductofalltheintegersinalist.Emptysumshouldbeequalto0and\\\n\\\nemptyproductshouldbeequalto1.\\\n\\\n>>>sum\\_product(\\[\\])\\\n\\\n(0,1)\\\n\\\n>>>sum\\_product(\\[1,2,3,4\\])\\\n\\\n(10,24)\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmlmIGxlbihudW1iZXJzKSA9PSAwIG9yIG51bWJlcnNbMF0gPT0gMDoKcmV0dXJuIDAsIDEKc3VtID0gMApwcm9kdWN0ID0gMQpmb3IgbnVtIGluIG51bWJlcnM6CmlmIGFicyhudW0pICE9IDA6CnByb2R1Y3QgPSBwcm9kdWN0ICogbnVtCnN1bSArPSBudW0KcmV0dXJuIHN1bSwgcHJvZHVjdAo=)\\\n\\\niflen(numbers)==0ornumbers\\[0\\]==0:\\\n\\\nreturn0,1\\\n\\\nsum=0\\\n\\\nproduct=1\\\n\\\nfornuminnumbers:\\\n\\\nifabs(num)!=0:\\\n\\\nproduct=product\\*num\\\n\\\nsum+=num\\\n\\\nreturnsum,product\\\n\\\n[‚¨á](data:text/plain;base64,CmZyb20gdHlwaW5nIGltcG9ydCBMaXN0ClxwYXJkZWYgZmFjdG9yaXplKG46IGludCkgLT4gTGlzdFtpbnRdOgoiIiIgUmV0dXJuIGxpc3Qgb2YgcHJpbWUgZmFjdG9ycyBvZiBnaXZlbiBpbnRlZ2VyIGluIHRoZSBvcmRlciBmcm9tIHNtYWxsZXN0CnRvIGxhcmdlc3QuIEVhY2ggb2YgdGhlIGZhY3RvcnMgc2hvdWxkIGJlIGxpc3RlZCBudW1iZXIgb2YgdGltZXMgY29ycmVzcG9uZGluZwp0byBob3cgbWFueSB0aW1lcyBpdCBhcHBlYXJlcyBpbiBmYWN0b3JpemF0aW9uLiBJbnB1dCBudW1iZXIgc2hvdWxkIGJlIGVxdWFsCnRvIHRoZSBwcm9kdWN0IG9mIGFsbCBmYWN0b3JzLgo+Pj4gZmFjdG9yaXplKDgpClsyLCAyLCAyXQo+Pj4gZmFjdG9yaXplKDI1KQpbNSwgNV0KPj4+IGZhY3Rvcml6ZSg3MCkKWzIsIDUsIDddCiIiIgo=)\\\n\\\nfromtypingimportList\\\n\\\n\\pardeffactorize(n:int)->List\\[int\\]:\\\n\\\n\"\"\"Returnlistofprimefactorsofgivenintegerintheorderfromsmallest\\\n\\\ntolargest.Eachofthefactorsshouldbelistednumberoftimescorresponding\\\n\\\ntohowmanytimesitappearesinfactorization.Inputnumbershouldbeequal\\\n\\\ntotheproductofallfactors.\\\n\\\n>>>factorize(8)\\\n\\\n\\[2,2,2\\]\\\n\\\n>>>factorize(25)\\\n\\\n\\[5,5\\]\\\n\\\n>>>factorize(70)\\\n\\\n\\[2,5,7\\]\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmZhY3RvcnMgPSBbXQpmYWN0b3IgPSAxCmZvciBpIGluIHJhbmdlKDIsIG4pOgpmYWN0b3IgKj0gaQp3aGlsZSBuIGZhY3RvcnMuYXBwZW5kKGZhY3RvcikKZmFjdG9yICs9IDEKcmV0dXJuIGZhY3RvcnMK)\\\n\\\nfactors=\\[\\]\\\n\\\nfactor=1\\\n\\\nforiinrange(2,n):\\\n\\\nfactor\\*=i\\\n\\\nwhilenfactors.append(factor)\\\n\\\nfactor+=1\\\n\\\nreturnfactors\\\n\\\n[‚¨á](data:text/plain;base64,CmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBPcHRpb25hbApccGFyZGVmIGxvbmdlc3Qoc3RyaW5nczogTGlzdFtzdHJdKSAtPiBPcHRpb25hbFtzdHJdOgoiIiIgT3V0IG9mIGxpc3Qgb2Ygc3RyaW5ncywgcmV0dXJuIHRoZSBsb25nZXN0IG9uZS4gUmV0dXJuIHRoZSBmaXJzdCBvbmUgaW4KY2FzZSBvZiBtdWx0aXBsZSBzdHJpbmdzIG9mIHRoZSBzYW1lIGxlbmd0aC4gUmV0dXJuIE5vbmUgaW4gY2FzZSB0aGUgaW5wdXQKbGlzdCBpcyBlbXB0eS4KPj4+IGxvbmdlc3QoW10pClxwYXI+Pj4gbG9uZ2VzdChbJ2EnLCAnYicsICdjJ10pCidhJwo+Pj4gbG9uZ2VzdChbJ2EnLCAnYmInLCAnY2NjJ10pCidjY2MnCiIiIgo=)\\\n\\\nfromtypingimportList,Optional\\\n\\\n\\pardeflongest(strings:List\\[str\\])->Optional\\[str\\]:\\\n\\\n\"\"\"Outoflistofstrings,returnthelongestone.Returnthefirstonein\\\n\\\ncaseofmultiplestringsofthesamelength.ReturnNoneincasetheinput\\\n\\\nlistisempty.\\\n\\\n>>>longest(\\[\\])\\\n\\\n\\par>>>longest(\\[‚Äôa‚Äô,‚Äôb‚Äô,‚Äôc‚Äô\\])\\\n\\\n‚Äôa‚Äô\\\n\\\n>>>longest(\\[‚Äôa‚Äô,‚Äôbb‚Äô,‚Äôccc‚Äô\\])\\\n\\\n‚Äôccc‚Äô\\\n\\\n\"\"\"\\\n\\\n[‚¨á](data:text/plain;base64,CmxvbmcgPSAiIgpmb3Igc3RyaW5nIGluIHN0cmluZ3M6CmlmIGxlbihzdHJpbmcpID4gbGVuKGxvbmcpOgpsb25nID0gc3RyaW5nCnJldHVybiBsb25nCg==)\\\n\\\nlong=\"\"\\\n\\\nforstringinstrings:\\\n\\\niflen(string)>len(long):\\\n\\\nlong=string\\\n\\\nreturnlong\\\n\\\n### 13.3 Infilling\\\n\\\n[‚¨á](data:text/plain;base64,CmRlZiBidWJibGVTb3J0KGFycik6Cm4gPSBsZW4oYXJyKQojIG9wdGltaXplIGNvZGUsIHNvIGlmIHRoZSBhcnJheSBpcyBhbHJlYWR5IHNvcnRlZCwgaXQgZG9lc24ndCBuZWVkCiMgdG8gZ28gdGhyb3VnaCB0aGUgZW50aXJlIHByb2Nlc3MKIyBUcmF2ZXJzZSB0aHJvdWdoIGFsbCBhcnJheSBlbGVtZW50cwpmb3IgaSBpbiByYW5nZShuLTEpOgpccGFyIyByYW5nZShuKSBhbHNvIHdvcmsgYnV0IG91dGVyIGxvb3Agd2lsbAojIHJlcGVhdCBvbmUgdGltZSBtb3JlIHRoYW4gbmVlZGVkLgojIExhc3QgaSBlbGVtZW50cyBhcmUgYWxyZWFkeSBpbiBwbGFjZQo=)\\\n\\\ndefbubbleSort(arr):\\\n\\\nn=len(arr)\\\n\\\n#optimizecode,soifthearrayisalreadysorted,itdoesn‚Äôtneed\\\n\\\n#togothroughtheentireprocess\\\n\\\n#Traversethroughallarrayelements\\\n\\\nforiinrange(n-1):\\\n\\\n\\par#range(n)alsoworkbutouterloopwill\\\n\\\n#repeatonetimemorethanneeded.\\\n\\\n#Lastielementsarealreadyinplace\\\n\\\n[‚¨á](data:text/plain;base64,CnN3YXBwZWQgPSBGYWxzZQpmb3IgaiBpbiByYW5nZSgwLCBuLWktMSk6Cg==)\\\n\\\nswapped=False\\\n\\\nforjinrange(0,n-i-1):\\\n\\\n[‚¨á](data:text/plain;base64,CiMgdHJhdmVyc2UgdGhlIGFycmF5IGZyb20gMCB0byBuLWktMQojIFN3YXAgaWYgdGhlIGVsZW1lbnQgZm91bmQgaXMgZ3JlYXRlcgojIHRoYW4gdGhlIG5leHQgZWxlbWVudAppZiBhcnJbal0gPiBhcnJbaiArIDFdOgpzd2FwcGVkID0gVHJ1ZQo=)\\\n\\\n#traversethearrayfrom0ton-i-1\\\n\\\n#Swapiftheelementfoundisgreater\\\n\\\n#thanthenextelement\\\n\\\nifarr\\[j\\]>arr\\[j+1\\]:\\\n\\\nswapped=True\\\n\\\n[‚¨á](data:text/plain;base64,CmFycltqXSwgYXJyW2ogKyAxXSA9IGFycltqICsgMV0sIGFycltqXQo=)\\\n\\\narr\\[j\\],arr\\[j+1\\]=arr\\[j+1\\],arr\\[j\\]\\\n\\\n[‚¨á](data:text/plain;base64,CmlmIG5vdCBzd2FwcGVkOgojIGlmIHdlIGhhdmVuJ3QgbmVlZGVkIHRvIG1ha2UgYSBzaW5nbGUgc3dhcCwgd2UKIyBjYW4ganVzdCBleGl0IHRoZSBtYWluIGxvb3AuCnJldHVybgo=)\\\n\\\nifnotswapped:\\\n\\\n#ifwehaven‚Äôtneededtomakeasingleswap,we\\\n\\\n#canjustexitthemainloop.\\\n\\\nreturn\\\n\\\n[‚¨á](data:text/plain;base64,CiMgRnVuY3Rpb24gdG8gcGVyZm9ybSBCcmVhZHRoIEZpcnN0IFNlYXJjaCBvbiBhIGdyYXBoCiMgcmVwcmVzZW50ZWQgdXNpbmcgYWRqYWNlbmN5IGxpc3QKZGVmIGJmcyhhZGpMaXN0LCB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31zb3VyY2V9fCwgdmlzaXRlZCk6CiMgQ3JlYXRlIGEgcXVldWUgZm9yIEJGUwpxID0gZGVxdWUoKQpccGFyIyBNYXJrIHRoZSBjdXJyZW50IG5vZGUgYXMgdmlzaXRlZCBhbmQgZW5xdWV1ZSBpdAp2aXNpdGVkW3xcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fXNvdXJjZX18XSA9IFRydWUKcS5hcHBlbmQofFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9c291cmNlfXwpClxwYXIjIEl0ZXJhdGUgb3ZlciB0aGUgcXVldWUKd2hpbGUgcToKIyBEZXF1ZXVlIGEgdmVydGV4IGZyb20gcXVldWUgYW5kIHByaW50IGl0CmN1cnJlbnROb2RlID0gcS5wb3BsZWZ0KCkKcHJpbnQofFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9Y3VycmVudE5vZGV9fCwgZW5kPSIgIikKXHBhciMgR2V0IGFsbCBhZGphY2VudCB2ZXJ0aWNlcyBvZiB0aGUgZGVxdWV1ZWQgdmVydGV4CiMgSWYgYW4gYWRqYWNlbnQgaGFzIG5vdCBiZWVuIHZpc2l0ZWQsIHRoZW4gbWFyayBpdCB2aXNpdGVkIGFuZCBlbnF1ZXVlIGl0CmZvciB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31hZGphY2VudH18IGluIGFkakxpc3RbfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9Y3VycmVudE5vZGV9fF06CmlmIG5vdCB2aXNpdGVkW3xcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fWFkamFjZW50fXxdOgp2aXNpdGVkW3xcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fWFkamFjZW50fXxdID0gVHJ1ZQpxLmFwcGVuZCh8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31hZGphY2VudH18KQo=)\\\n\\\n#FunctiontoperformBreadthFirstSearchonagraph\\\n\\\n#representedusingadjacencylist\\\n\\\ndefbfs(adjList,\\|\\colorbox{pastelyellow}{\\strut{}source}\\|,visited):\\\n\\\n#CreateaqueueforBFS\\\n\\\nq=deque()\\\n\\\n\\par#Markthecurrentnodeasvisitedandenqueueit\\\n\\\nvisited\\[\\|\\colorbox{pastelyellow}{\\strut{}source}\\|\\]=True\\\n\\\nq.append(\\|\\colorbox{pastelyellow}{\\strut{}source}\\|)\\\n\\\n\\par#Iterateoverthequeue\\\n\\\nwhileq:\\\n\\\n#Dequeueavertexfromqueueandprintit\\\n\\\ncurrentNode=q.popleft()\\\n\\\nprint(\\|\\colorbox{pastelyellow}{\\strut{}currentNode}\\|,end=\"\")\\\n\\\n\\par#Getalladjacentverticesofthedequeuedvertex\\\n\\\n#Ifanadjacenthasnotbeenvisited,thenmarkitvisitedandenqueueit\\\n\\\nfor\\|\\colorbox{pastelyellow}{\\strut{}adjacent}\\|inadjList\\[\\|\\colorbox{pastelyellow}{\\strut{}currentNode}\\|\\]:\\\n\\\nifnotvisited\\[\\|\\colorbox{pastelyellow}{\\strut{}adjacent}\\|\\]:\\\n\\\nvisited\\[\\|\\colorbox{pastelyellow}{\\strut{}adjacent}\\|\\]=True\\\n\\\nq.append(\\|\\colorbox{pastelyellow}{\\strut{}adjacent}\\|)\\\n\\\n[‚¨á](data:text/plain;base64,CiMgUmV0dXJucyBpbmRleCBvZiB4IGluIGFyciBpZiBwcmVzZW50LCBlbHNlIC0xCmRlZiBiaW5hcnlfc2VhcmNoKGFyciwgfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9bG93fXwsIHxcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fWhpZ2h9fCwgeCk6ClxwYXIjIENoZWNrIGJhc2UgY2FzZQppZiB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31oaWdofXwgPj0gfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9bG93fXw6ClxwYXJ8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31taWR9fCA9ICh8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31oaWdofXwgKyB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31sb3d9fCkgLy8gMgpccGFyIyBJZiBlbGVtZW50IGlzIHByZXNlbnQgYXQgdGhlIG1pZGRsZSBpdHNlbGYKaWYgYXJyW3xcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fW1pZH18XSA9PSB4OgpyZXR1cm4gbWlkClxwYXIjIElmIGVsZW1lbnQgaXMgc21hbGxlciB0aGFuIG1pZCwgdGhlbiBpdCBjYW4gb25seQojIGJlIHByZXNlbnQgaW4gbGVmdCBzdWJhcnJheQplbGlmIGFyclt8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31taWR9fF0gPiB4OgpyZXR1cm4gYmluYXJ5X3NlYXJjaChhcnIsIHxcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fWxvd318LCB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e31taWR9fCAtIDEsIHgpClxwYXIjIEVsc2UgdGhlIGVsZW1lbnQgY2FuIG9ubHkgYmUgcHJlc2VudCBpbiByaWdodCBzdWJhcnJheQplbHNlOgpyZXR1cm4gYmluYXJ5X3NlYXJjaChhcnIsIHxcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fW1pZH18ICsgMSwgfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9aGlnaH18LCB4KQpccGFyZWxzZToKIyBFbGVtZW50IGlzIG5vdCBwcmVzZW50IGluIHRoZSBhcnJheQpyZXR1cm4gLTEK)\\\n\\\n#Returnsindexofxinarrifpresent,else-1\\\n\\\ndefbinary\\_search(arr,\\|\\colorbox{pastelyellow}{\\strut{}low}\\|,\\|\\colorbox{pastelyellow}{\\strut{}high}\\|,x):\\\n\\\n\\par#Checkbasecase\\\n\\\nif\\|\\colorbox{pastelyellow}{\\strut{}high}\\|>=\\|\\colorbox{pastelyellow}{\\strut{}low}\\|:\\\n\\\n\\par\\|\\colorbox{pastelyellow}{\\strut{}mid}\\|=(\\|\\colorbox{pastelyellow}{\\strut{}high}\\|+\\|\\colorbox{pastelyellow}{\\strut{}low}\\|)//2\\\n\\\n\\par#Ifelementispresentatthemiddleitself\\\n\\\nifarr\\[\\|\\colorbox{pastelyellow}{\\strut{}mid}\\|\\]==x:\\\n\\\nreturnmid\\\n\\\n\\par#Ifelementissmallerthanmid,thenitcanonly\\\n\\\n#bepresentinleftsubarray\\\n\\\nelifarr\\[\\|\\colorbox{pastelyellow}{\\strut{}mid}\\|\\]>x:\\\n\\\nreturnbinary\\_search(arr,\\|\\colorbox{pastelyellow}{\\strut{}low}\\|,\\|\\colorbox{pastelyellow}{\\strut{}mid}\\|-1,x)\\\n\\\n\\par#Elsetheelementcanonlybepresentinrightsubarray\\\n\\\nelse:\\\n\\\nreturnbinary\\_search(arr,\\|\\colorbox{pastelyellow}{\\strut{}mid}\\|+1,\\|\\colorbox{pastelyellow}{\\strut{}high}\\|,x)\\\n\\\n\\parelse:\\\n\\\n#Elementisnotpresentinthearray\\\n\\\nreturn-1\\\n\\\n[‚¨á](data:text/plain;base64,CiMgUHl0aG9uIHByb2dyYW0gZm9yIERpamtzdHJhJ3Mgc2luZ2xlCiMgc291cmNlIHNob3J0ZXN0IHBhdGggYWxnb3JpdGhtLiBUaGUgcHJvZ3JhbSBpcwojIGZvciBhZGphY2VuY3kgbWF0cml4IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBncmFwaApjbGFzcyBHcmFwaCgpOgpccGFyZGVmIF9faW5pdF9fKHNlbGYsIHZlcnRpY2VzKToKc2VsZi5WID0gdmVydGljZXMKc2VsZi5ncmFwaCA9IFtbMCBmb3IgY29sdW1uIGluIHJhbmdlKHZlcnRpY2VzKV0KZm9yIHJvdyBpbiByYW5nZSh2ZXJ0aWNlcyldClxwYXJkZWYgcHJpbnRTb2x1dGlvbihzZWxmLCBkaXN0KToKcHJpbnQoIlZlcnRleCBEaXN0YW5jZSBmcm9tIFNvdXJjZSIpCmZvciBub2RlIGluIHJhbmdlKHNlbGYuVik6CnByaW50KG5vZGUsICIgIiwgZGlzdFtub2RlXSkKXHBhciMgQSB1dGlsaXR5IGZ1bmN0aW9uIHRvIGZpbmQgdGhlIHZlcnRleCB3aXRoCiMgbWluaW11bSBkaXN0YW5jZSB2YWx1ZSwgZnJvbSB0aGUgc2V0IG9mIHZlcnRpY2VzCiMgbm90IHlldCBpbmNsdWRlZCBpbiBzaG9ydGVzdCBwYXRoIHRyZWUKZGVmIG1pbkRpc3RhbmNlKHNlbGYsIGRpc3QsIHNwdFNldCk6ClxwYXIjIEluaXRpYWxpemUgbWluaW11bSBkaXN0YW5jZSBmb3IgbmV4dCBub2RlCm1pbiA9IDFlNwpccGFyIyBTZWFyY2ggbm90IG5lYXJlc3QgdmVydGV4IG5vdCBpbiB0aGUKIyBzaG9ydGVzdCBwYXRoIHRyZWUKZm9yIHYgaW4gcmFuZ2Uoc2VsZi5WKToKaWYgZGlzdFt2XSA8IG1pbiBhbmQgc3B0U2V0W3ZdID09IEZhbHNlOgptaW4gPSBkaXN0W3ZdCm1pbl9pbmRleCA9IHYKXHBhcnJldHVybiBtaW5faW5kZXgKXHBhciMgRnVuY3Rpb24gdGhhdCBpbXBsZW1lbnRzIERpamtzdHJhJ3Mgc2luZ2xlIHNvdXJjZQojIHNob3J0ZXN0IHBhdGggYWxnb3JpdGhtIGZvciBhIGdyYXBoIHJlcHJlc2VudGVkCiMgdXNpbmcgYWRqYWNlbmN5IG1hdHJpeCByZXByZXNlbnRhdGlvbgpkZWYgZGlqa3N0cmEoc2VsZiwgfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9c3JjfXwpOgpccGFyfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9ZGlzdH18ID0gWzFlN10gKiBzZWxmLlYKfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e1xzdHJ1dHt9ZGlzdH18W3NyY10gPSAwCnxcY29sb3Jib3h7cGFzdGVseWVsbG93fXtcc3RydXR7fXByb2Nlc3NlZH18ID0gW0ZhbHNlXSAqIHNlbGYuVgpccGFyZm9yIGNvdXQgaW4gcmFuZ2Uoc2VsZi5WKToKXHBhciMgUGljayB0aGUgbWluaW11bSBkaXN0YW5jZSB2ZXJ0ZXggZnJvbQojIHRoZSBzZXQgb2YgdmVydGljZXMgbm90IHlldCBwcm9jZXNzZWQuCiMgdSBpcyBhbHdheXMgZXF1YWwgdG8gc3JjIGluIGZpcnN0IGl0ZXJhdGlvbgp8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317XHN0cnV0e311dn18ID0gc2VsZi5taW5EaXN0YW5jZShkaXN0LCB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317cHJvY2Vzc2VkfXwpClxwYXIjIFB1dCB0aGUgbWluaW11bSBkaXN0YW5jZSB2ZXJ0ZXggaW4gdGhlCiMgc2hvcnRlc3QgcGF0aCB0cmVlCnxcY29sb3Jib3h7cGFzdGVseWVsbG93fXtwcm9jZXNzZWR9fFt8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317dXZ9fF0gPSBUcnVlClxwYXIjIFVwZGF0ZSBkaXN0YW5jZSB2YWx1ZSBvZiB0aGUgYWRqYWNlbnQgdmVydGljZXMKIyBvZiB0aGUgcGlja2VkIHZlcnRleCBvbmx5IGlmIHRoZSBjdXJyZW50CiMgZGlzdGFuY2UgaXMgZ3JlYXRlciB0aGFuIG5ldyBkaXN0YW5jZSBhbmQKIyB0aGUgdmVydGV4IGluIG5vdCBpbiB0aGUgc2hvcnRlc3QgcGF0aCB0cmVlCmZvciB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317dn18IGluIHJhbmdlKHNlbGYuVik6CmlmIChzZWxmLmdyYXBoW3xcY29sb3Jib3h7cGFzdGVseWVsbG93fXt1dn18XVt8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317dn18XSA+IDAgYW5kCnxcY29sb3Jib3h7cGFzdGVseWVsbG93fXtwcm9jZXNzZWR9fFt8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317dXZ9fF0gPT0gRmFsc2UgYW5kCnxcY29sb3Jib3h7cGFzdGVseWVsbG93fXtkaXN0fXxbfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e3V2fXxdID4gfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e2Rpc3R9fFt8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317Y291dH18XSArIHNlbGYuZ3JhcGhbfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e3V2fXxdW3xcY29sb3Jib3h7cGFzdGVseWVsbG93fXt2fXxdKToKfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e2Rpc3R9fFt8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317dXZ9fF0gPSB8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317ZGlzdH18W3xcY29sb3Jib3h7cGFzdGVseWVsbG93fXtjb3V0fXxdICsgc2VsZi5ncmFwaFt8XGNvbG9yYm94e3Bhc3RlbHllbGxvd317dXZ9fF1bfFxjb2xvcmJveHtwYXN0ZWx5ZWxsb3d9e3Z9fF0KXHBhcnNlbGYucHJpbnRTb2x1dGlvbihkaXN0KQo=)\\\n\\\n#PythonprogramforDijkstra‚Äôssingle\\\n\\\n#sourceshortestpathalgorithm.Theprogramis\\\n\\\n#foradjacencymatrixrepresentationofthegraph\\\n\\\nclassGraph():\\\n\\\n\\pardef\\_\\_init\\_\\_(self,vertices):\\\n\\\nself.V=vertices\\\n\\\nself.graph=\\[\\[0forcolumninrange(vertices)\\]\\\n\\\nforrowinrange(vertices)\\]\\\n\\\n\\pardefprintSolution(self,dist):\\\n\\\nprint(\"VertexDistancefromSource\")\\\n\\\nfornodeinrange(self.V):\\\n\\\nprint(node,\"\",dist\\[node\\])\\\n\\\n\\par#Autilityfunctiontofindthevertexwith\\\n\\\n#minimumdistancevalue,fromthesetofvertices\\\n\\\n#notyetincludedinshortestpathtree\\\n\\\ndefminDistance(self,dist,sptSet):\\\n\\\n\\par#Initializeminimumdistancefornextnode\\\n\\\nmin=1e7\\\n\\\n\\par#Searchnotnearestvertexnotinthe\\\n\\\n#shortestpathtree\\\n\\\nforvinrange(self.V):\\\n\\\nifdist\\[v\\]<minandsptSet\\[v\\]==False:\\\n\\\nmin=dist\\[v\\]\\\n\\\nmin\\_index=v\\\n\\\n\\parreturnmin\\_index\\\n\\\n\\par#FunctionthatimplementsDijkstra‚Äôssinglesource\\\n\\\n#shortestpathalgorithmforagraphrepresented\\\n\\\n#usingadjacencymatrixrepresentation\\\n\\\ndefdijkstra(self,\\|\\colorbox{pastelyellow}{\\strut{}src}\\|):\\\n\\\n\\par\\|\\colorbox{pastelyellow}{\\strut{}dist}\\|=\\[1e7\\]\\*self.V\\\n\\\n\\|\\colorbox{pastelyellow}{\\strut{}dist}\\|\\[src\\]=0\\\n\\\n\\|\\colorbox{pastelyellow}{\\strut{}processed}\\|=\\[False\\]\\*self.V\\\n\\\n\\parforcoutinrange(self.V):\\\n\\\n\\par#Picktheminimumdistancevertexfrom\\\n\\\n#thesetofverticesnotyetprocessed.\\\n\\\n#uisalwaysequaltosrcinfirstiteration\\\n\\\n\\|\\colorbox{pastelyellow}{\\strut{}uv}\\|=self.minDistance(dist,\\|\\colorbox{pastelyellow}{processed}\\|)\\\n\\\n\\par#Puttheminimumdistancevertexinthe\\\n\\\n#shortestpathtree\\\n\\\n\\|\\colorbox{pastelyellow}{processed}\\|\\[\\|\\colorbox{pastelyellow}{uv}\\|\\]=True\\\n\\\n\\par#Updatedistancevalueoftheadjacentvertices\\\n\\\n#ofthepickedvertexonlyifthecurrent\\\n\\\n#distanceisgreaterthannewdistanceand\\\n\\\n#thevertexinnotintheshortestpathtree\\\n\\\nfor\\|\\colorbox{pastelyellow}{v}\\|inrange(self.V):\\\n\\\nif(self.graph\\[\\|\\colorbox{pastelyellow}{uv}\\|\\]\\[\\|\\colorbox{pastelyellow}{v}\\|\\]>0and\\\n\\\n\\|\\colorbox{pastelyellow}{processed}\\|\\[\\|\\colorbox{pastelyellow}{uv}\\|\\]==Falseand\\\n\\\n\\|\\colorbox{pastelyellow}{dist}\\|\\[\\|\\colorbox{pastelyellow}{uv}\\|\\]>\\|\\colorbox{pastelyellow}{dist}\\|\\[\\|\\colorbox{pastelyellow}{cout}\\|\\]+self.graph\\[\\|\\colorbox{pastelyellow}{uv}\\|\\]\\[\\|\\colorbox{pastelyellow}{v}\\|\\]):\\\n\\\n\\|\\colorbox{pastelyellow}{dist}\\|\\[\\|\\colorbox{pastelyellow}{uv}\\|\\]=\\|\\colorbox{pastelyellow}{dist}\\|\\[\\|\\colorbox{pastelyellow}{cout}\\|\\]+self.graph\\[\\|\\colorbox{pastelyellow}{uv}\\|\\]\\[\\|\\colorbox{pastelyellow}{v}\\|\\]\\\n\\\n\\parself.printSolution(dist)\\\n\\",
            "citations": null
          },
          "14 Textual generations\\": {
            "content": "\\\nWe present below example generations for the proposed method together with several baseline methods. We provide both conditional and unconditional generations. For the conditional generations, we mark the prompt in gray.\\\n\\\n### 14.1 Conditional generation.\\\n\\\nThe United States on Wednesday asked the UN Security Council to slap an oil embargo on North Korea and freeze the assets of leader Kim Jong-un, in response to Pyongyang‚Äôsresponse to the revelations it had restarted its nuclear work in March.\\\n‚ÄúWe will continue working to use maximum international pressure on North Korea to agree to the suspension of its nuclear program and reinstate sanctions,‚Äù said John Bolton, who served as National Security Advisor and Secretary of State under US President Bill Clinton.\\\n‚ÄúHere is North Korea‚Äôs response to our sanctions,‚Äù Bolton wrote in a letter to House Minority Leader Nancy Pelosi.\\\n‚ÄúWe want you to know that the international community is seriously monitoring North Korea at this time. North Korea is still complying with our requests from the past few days,‚Äù Bolton said on Monday. ‚ÄúWe have been working through the United Nations to provide the information that they gave us.‚Äù\\\nAsked to whether any international pressure will be put in place for North Korea to give up its nuclear weapons, Bolton said the United States can use maximum pressure to get North Korea to abandon its nuclear weapons if it wants.\\\n‚ÄúWe‚Äôve been working to use maximum pressure on North Korea, through the Security Council, and we will continue to do so,‚Äù said White House Deputy Press Secretary Sarah Huckabee Sanders in Washington.\\\n‚ÄúWe‚Äôre committed to taking any steps necessary to help North Korea pursue its only option for peace, including in this period,‚Äù she added.\\\nThe United States did not plan to produce any more oil at this time last year and had not planned to do so this year.\\\n‚ÄúWe believe that the North Korea approach is misguided in moving forward with its nuclear program to endanger peace and security in its homeland and neighbors in Asia,‚Äù said Bolton, adding that the US supplies its nuclear weapons.\\\n‚ÄúWe don‚Äôt want them to sell their nuclear weapons to other nations,‚Äù he said.\\\nBolton said the US would look for pressure on North Korea, which has been known to use nuclear weapons, as leverage to negotiations with the US.\\\n‚ÄúI will reiterate what I have said before. So, the US has to put pressure on North Korea. But who else is going to hold the cards? Somebody else has to hold the cards,‚Äù Mr Bolton said.\\\nBolton described what the United States is prepared to do to get North Korea to agree to give up its weapons and asks for sanctions.\\\n‚ÄúAs far as I know, we have to use the pressure the reason for putting sanctions on North Korea,‚Äù he said, adding that the US does not plan to ask the UN Security Council for sanctions alone.\\\n\\\nThe defender is available for the Maribor first leg but his club believed he should be suspended. SNS Group Celtic made an administrative blunder which saw Efe Ambrose left behindin the midfield in the Maribor department and has given him a potential three-match ban today. Although Efe Ambrose will be suspended next Friday, according to reports in Scottish media, the Celtic defender will still be fit for the Champions League first leg at Celtic Stadium in the middle of August.\\\nHowever, the Celtic club wrongly thought that Efe should only receive a three-match ban because he is available for the first leg. Although Efe Ambrose may receive a three-match ban next Friday, Efe Ambrose was part of the Celtic squad for the last match against Liverpool. However, says SNS Group Celtic he was making a tactical error and was left behind in midfield.\\\nIt is understood that Efe Ambrose did not make the final squad and only played 11 games for the club this season.\\\nEfe Ambrose made his professional debut for Celtic in 2008 but spent nine months looking for a new club to return to. With a career-high 72 Celtic appearances, Efe is among Celtic‚Äôs most capped players ever.\\\n\\\nCarl Jara aka Grain Damaged is an award-winning, professional sand sculptor from Cleveland, Ohio. Jara says he has known since high-school that he wanted to be an artist. After studyingEnglish and Art History at the Northeastern University, Jara says one semester he started carving a custom sculpture into sand molds, but didn‚Äôt know how to do it. With the help of an instructor, he found out and learned how to use rubber molds to make art. Later, he made the decision to learn how to use sand and sculpt himself. In addition to how he makes his own sculptures, Jara says he does special events for comics companies such as Stan Lee and also for institutions like local community colleges and universities. In November of this year, he won the WWHS, The Very Art Of The Very Things Cleveland competition. Afterward, he will continue carving for clients in the comics industry and looks forward to sand sculpting in Cleveland.\\\nThe Artist is professional sculptor who has been making art, for over 25 years, in various shapes and sizes.The artist says art is all about relationships and the best way to go into the heart is to create art. The artist has taught in various high schools in the Cleveland area and has taught a full time Honors Studio for High School students in grades 6, 7, and 8 time for over 20 years. Since Art is a personal form of artistic expression, he works individually in a way that allows the student that his work engages their imagination and presents ideas in ways that inform and challenge their own paths.\\\nMiguel Romano is a professional artist who worked in 3D modeling and animation in the areas of web design and production. The artist currently works as a digital artist in the ad and mass communication industries. In coming to Concrete Cleveland, he is excited to apply the 3D development and production skills he have to his work. The artist has a BFA in sculpture from Ohio University, along with an MFA in sculpture. We look forward to seeing his work very soon!\\\nDesigned and installed by Concrete This Week. He is a guy originally from Cleveland, Ohio where he pursued a career as a nurse. He then moved to the Atlanta, GA area where he returned to school with a BSN and a BS in nursing and is a licensed nurse. He is a proud sorority brother and still has extra-curricular, as well as taking music lessons and the occasional play. He is a lovely asset at Concrete Cleveland and looks forward to seeing concrete\\\n\\\n[‚óÑ] [![ar5iv homepage]] [Feeling\\\\\n\\\\\nlucky?] [Conversion\\\\\n\\\\\nreport] [Report\\\\\n\\\\\nan issue] [View original\\\\\n\\\\\non arXiv] [‚ñ∫]",
            "citations": null
          }
        },
        "abstract": "Despite Flow Matching and diffusion models having emerged as powerful\ngenerative paradigms for continuous variables such as images and videos, their\napplication to high-dimensional discrete data, such as language, is still\nlimited. In this work, we present Discrete Flow Matching, a novel discrete flow\nparadigm designed specifically for generating discrete data. Discrete Flow\nMatching offers several key contributions:(i) it works with a general family of\nprobability paths interpolating between source and target distributions; (ii)\nit allows for a generic formula for sampling from these probability paths using\nlearned posteriors such as the probability denoiser ($x$-prediction) and\nnoise-prediction ($\\epsilon$-prediction); (iii) practically, focusing on\nspecific probability paths defined with different schedulers improves\ngenerative perplexity compared to previous discrete diffusion and flow models;\nand (iv) by scaling Discrete Flow Matching models up to 1.7B parameters, we\nreach 6.7% Pass@1 and 13.4% Pass@10 on HumanEval and 6.7% Pass@1 and 20.6%\nPass@10 on 1-shot MBPP coding benchmarks. Our approach is capable of generating\nhigh-quality discrete data in a non-autoregressive fashion, significantly\nclosing the gap between autoregressive models and discrete flow models."
      },
      "bib.bib35": {
        "id": "bib.bib35",
        "citation": "Merity et al. (2016)",
        "authors": "",
        "year": "",
        "title": "Pointer sentinel mixture models, 2016.",
        "venue": "",
        "pages": "",
        "url": "https://arxiv.org/abs/1609.07843",
        "arxiv_id": "1609.07843",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "A major difficulty in language modeling is learning when to predict specific words from the immediate context. For instance, imagine a new person is introduced and two paragraphs later the context would allow one to very accurately predict this person‚Äôs name as the next word.\nFor standard neural sequence models to predict this name, they would have to encode the name, store it for many time steps in their hidden state, and then decode it when appropriate.\nAs the hidden state is limited in capacity and the optimization of such models suffer from the vanishing gradient problem, this is a lossy operation when performed over many timesteps.\nThis is especially true for rare words.\n\nModels with soft attention or memory components have been proposed to help deal with this challenge, aiming to allow for the retrieval and use of relevant previous hidden states, in effect increasing hidden state capacity and providing a path for gradients not tied to timesteps.\nEven with attention, the standard softmaxsoftmax\\\\operatorname\\*{softmax} classifier that is being used in these models often struggles to correctly predict rare or previously unknown words.\n\nPointer networks (Vinyals et al., [2015])) provide one potential solution for rare and out of vocabulary (OoV) words as a pointer network uses attention to select an element from the input as output.\nThis allows it to produce previously unseen input tokens.\nWhile pointer networks improve performance on rare words and long-term dependencies they are unable to select words that do not exist in the input.\n\n![Refer to caption]Figure 1: Illustration of the pointer sentinel-RNN mixture model.\ngùëîg is the mixture gate which uses the sentinel to dictate how much probability mass to give to the vocabulary.\n\nWe introduce a mixture model, illustrated in Fig. [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ Pointer Sentinel Mixture Models\"), that combines the advantages of standard softmaxsoftmax\\\\operatorname\\*{softmax} classifiers with those of a pointer component for effective and efficient language modeling.\nRather than relying on the RNN hidden state to decide when to use the pointer, as in the recent work of G√ºl√ßehre et al. ( [2016])), we allow the pointer component itself to decide when to use the softmaxsoftmax\\\\operatorname\\*{softmax} vocabulary through a sentinel.\nThe model improves the state of the art perplexity on the Penn Treebank. Since this commonly used dataset is small and no other freely available alternative exists that allows for learning long range dependencies, we also introduce a new benchmark dataset for language modeling called WikiText.\n\n![Refer to caption]Figure 2: Visualization of the pointer sentinel-RNN mixture model.\nThe query, produced from applying an MLP to the last output of the RNN, is used by the pointer network to identify likely matching words from the past.\nThe ‚äôdirect-product\\\\odot nodes are inner products between the query and the RNN hidden states.\nIf the pointer component is not confident, probability mass can be directed to the RNN by increasing the value of the mixture gate gùëîg via the sentinel, seen in grey.\nIf g=1ùëî1g=1 then only the RNN is used.\nIf g=0ùëî0g=0 then only the pointer is used.",
            "citations": null
          },
          "2 The Pointer Sentinel for Language Modeling": {
            "content": "Given a sequence of words w1,‚Ä¶,wN‚àí1subscriptùë§1‚Ä¶subscriptùë§ùëÅ1w\\_{1},\\\\ldots,w\\_{N-1}, our task is to predict the next word wNsubscriptùë§ùëÅw\\_{N}.\n\n### 2.1 The softmaxsoftmax\\\\operatorname\\*{softmax}-RNN Component\n\nRecurrent neural networks (RNNs) have seen widespread use for language modeling (Mikolov et al., [2010])) due to their ability to, at least in theory, retain long term dependencies. RNNs employ the chain rule to factorize the joint probabilities over a sequence of tokens:\np‚Äã(w1,‚Ä¶,wN)=‚àèi=1Np‚Äã(wi\\|w1,‚Ä¶,wi‚àí1).ùëùsubscriptùë§1‚Ä¶subscriptùë§ùëÅsubscriptsuperscriptproductùëÅùëñ1ùëùconditionalsubscriptùë§ùëñsubscriptùë§1‚Ä¶subscriptùë§ùëñ1p(w\\_{1},\\\\ldots,w\\_{N})=\\\\prod^{N}\\_{i=1}p(w\\_{i}\\|w\\_{1},\\\\ldots,w\\_{i-1}).\nMore precisely, at each time step iùëñi, we compute the RNN hidden state hisubscript‚Ñéùëñh\\_{i} according to the previous hidden state hi‚àí1subscript‚Ñéùëñ1h\\_{i-1} and the input xisubscriptùë•ùëñx\\_{i} such that hi=R‚ÄãN‚ÄãN‚Äã(xi,hi‚àí1)subscript‚ÑéùëñùëÖùëÅùëÅsubscriptùë•ùëñsubscript‚Ñéùëñ1h\\_{i}=RNN(x\\_{i},h\\_{i-1}).\nWhen all the N‚àí1ùëÅ1N-1 words have been processed by the RNN, the final state hN‚àí1subscript‚ÑéùëÅ1h\\_{N-1} is fed into a softmaxsoftmax\\\\operatorname\\*{softmax} layer which computes the probability over a vocabulary of possible words:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pvocab‚Äã(w)=softmax(U‚ÄãhN‚àí1),subscriptùëùvocabùë§softmaxùëàsubscript‚ÑéùëÅ1p\\_{\\\\text{vocab}}(w)=\\\\operatorname\\*{softmax}(Uh\\_{N-1}), |  | (1) |\n\nwhere pvocab‚àà‚ÑùVsubscriptùëùvocabsuperscript‚Ñùùëâp\\_{\\\\text{vocab}}\\\\in\\\\mathbb{R}^{V}, U‚àà‚ÑùV√óHùëàsuperscript‚ÑùùëâùêªU\\\\in\\\\mathbb{R}^{V\\\\times H}, HùêªH is the hidden size, and VùëâV the vocabulary size.\nRNNs can suffer from the vanishing gradient problem. The LSTM (Hochreiter & Schmidhuber, [1997])) architecture has been proposed to deal with this by updating the hidden state according to a set of gates.\nOur work focuses on the LSTM but can be applied to any RNN architecture that ends in a vocabulary softmaxsoftmax\\\\operatorname\\*{softmax}.\n\n### 2.2 The Pointer Network Component\n\nIn this section, we propose a modification to pointer networks for language modeling. To predict the next word in the sequence, a pointer network would select the member of the input sequence p‚Äã(w1,‚Ä¶,wN‚àí1)ùëùsubscriptùë§1‚Ä¶subscriptùë§ùëÅ1p(w\\_{1},\\\\ldots,w\\_{N-1}) with the maximal attention score as the output.\n\nThe simplest way to compute an attention score for a specific hidden state is an inner product with all the past hidden states h‚Ñéh, with each hidden state hi‚àà‚ÑùHsubscript‚Ñéùëñsuperscript‚Ñùùêªh\\_{i}\\\\in\\\\mathbb{R}^{H}.\nHowever, if we want to compute such a score for the most recent word (since this word may be repeated), we need to include the last hidden state itself in this inner product.\nTaking the inner product of a vector with itself results in the vector‚Äôs magnitude squared, meaning the attention scores would be strongly biased towards the most recent word.\nHence we project the current hidden state to a query vector qùëûq first. To produce the query qùëûq we compute\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | q=tanh‚Å°(W‚ÄãhN‚àí1+b),ùëûùëäsubscript‚ÑéùëÅ1ùëè\\\\displaystyle q=\\\\tanh(Wh\\_{N-1}+b), |  | (2) |\n\nwhere W‚àà‚ÑùH√óHùëäsuperscript‚ÑùùêªùêªW\\\\in\\\\mathbb{R}^{H\\\\times H}, b‚àà‚ÑùHùëèsuperscript‚Ñùùêªb\\\\in\\\\mathbb{R}^{H}, and q‚àà‚ÑùHùëûsuperscript‚Ñùùêªq\\\\in\\\\mathbb{R}^{H}.\nTo generate the pointer attention scores, we compute the match between the previous RNN output states hisubscript‚Ñéùëñh\\_{i} and the query qùëûq by taking the inner product, followed by a softmaxsoftmax\\\\operatorname\\*{softmax} activation function to obtain a probability distribution:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | zi=qT‚Äãhi,subscriptùëßùëñsuperscriptùëûùëásubscript‚Ñéùëñ\\\\displaystyle z\\_{i}=q^{T}h\\_{i}, |  | (3) |\n|  | a=softmax(z),ùëésoftmaxùëß\\\\displaystyle a=\\\\operatorname\\*{softmax}(z), |  | (4) |\n\nwhere z‚àà‚ÑùLùëßsuperscript‚Ñùùêøz\\\\in\\\\mathbb{R}^{L}, a‚àà‚ÑùLùëésuperscript‚Ñùùêøa\\\\in\\\\mathbb{R}^{L}, and LùêøL is the total number of hidden states.\nThe probability mass assigned to a given word is the sum of the probability mass given to all token positions where the given word appears:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pptr‚Äã(w)=‚àëi‚ààI‚Äã(w,x)ai,subscriptùëùptrùë§subscriptùëñùêºùë§ùë•subscriptùëéùëñ\\\\displaystyle p\\_{\\\\text{ptr}}(w)=\\\\sum\\_{i\\\\in I(w,x)}a\\_{i}, |  | (5) |\n\nwhere I‚Äã(w,x)ùêºùë§ùë•I(w,x) results in all positions of the word wùë§w in the input xùë•x and pptr‚àà‚ÑùVsubscriptùëùptrsuperscript‚Ñùùëâp\\_{\\\\text{ptr}}\\\\in\\\\mathbb{R}^{V}.\nThis technique, referred to as pointer sum attention, has been used for question answering (Kadlec et al., [2016])).\n\nGiven the length of the documents used in language modeling, it may not be feasible for the pointer network to evaluate an attention score for all the words back to the beginning of the dataset.\nInstead, we may elect to maintain only a window of the LùêøL most recent words for the pointer to match against.\nThe length LùêøL of the window is a hyperparameter that can be tuned on a held out dataset or by empirically analyzing how frequently a word at position tùë°t appears within the last LùêøL words.\n\nTo illustrate the advantages of this approach, consider a long article featuring two sentences _President Obama discussed the economy_ and _President Obama then flew to Prague_.\nIf the query was _Which President is the article about?_, probability mass could be applied to _Obama_ in either sentence.\nIf the question was instead _Who flew to Prague?_, only the latter occurrence of _Obama_ provides the proper context.\nThe attention sum model ensures that, as long as the entire attention probability mass is distributed on the occurrences of _Obama_, the pointer network can achieve zero loss.\nThis flexibility provides supervision without forcing the model to put mass on supervision signals that may be incorrect or lack proper context.\nThis feature becomes an important component in the pointer sentinel mixture model.\n\n### 2.3 The Pointer Sentinel Mixture Model\n\nWhile pointer networks have proven to be effective, they cannot predict output words that are not present in the input, a common scenario in language modeling.\nWe propose to resolve this by using a mixture model that combines a standard softmaxsoftmax\\\\operatorname\\*{softmax} with a pointer.\n\nOur mixture model has two base distributions: the softmaxsoftmax\\\\operatorname\\*{softmax} vocabulary of the RNN output and the positional vocabulary of the pointer model.\nWe refer to these as the RNN component and the pointer component respectively.\nTo combine the two base distributions, we use a gating function g=p‚Äã(zi=k\\|xi)ùëîùëùsubscriptùëßùëñconditionalùëòsubscriptùë•ùëñg=p(z\\_{i}=k\\|x\\_{i}) where zisubscriptùëßùëñz\\_{i} is the latent variable stating which base distribution the data point belongs to.\nAs we only have two base distributions, gùëîg can produce a scalar in the range \\[0,1\\]01\\[0,1\\].\nA value of 00 implies that only the pointer is used and 111 means only the softmaxsoftmax\\\\operatorname\\*{softmax}-RNN is used.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | p‚Äã(yi\\|xi)=g‚Äãpvocab‚Äã(yi\\|xi)+(1‚àíg)‚Äãpptr‚Äã(yi\\|xi).ùëùconditionalsubscriptùë¶ùëñsubscriptùë•ùëñùëîsubscriptùëùvocabconditionalsubscriptùë¶ùëñsubscriptùë•ùëñ1ùëîsubscriptùëùptrconditionalsubscriptùë¶ùëñsubscriptùë•ùëñ\\\\displaystyle p(y\\_{i}\\|x\\_{i})=g~{}p\\_{\\\\text{vocab}}(y\\_{i}\\|x\\_{i})+(1-g)~{}p\\_{\\\\text{ptr}}(y\\_{i}\\|x\\_{i}). |  | (6) |\n\nWhile the models could be entirely separate, we re-use many of the parameters for the softmaxsoftmax\\\\operatorname\\*{softmax}-RNN and pointer components.\nThis sharing minimizes the total number of parameters in the model and capitalizes on the pointer network‚Äôs supervision for the RNN component.\n\n### 2.4 Details of the Gating Function\n\nTo compute the new pointer sentinel gate gùëîg, we modify the pointer component. In particular, we add an additional element to zùëßz, the vector of attention scores as defined in Eq. [3]In 2.2 The Pointer Network Component ‚Ä£ 2 The Pointer Sentinel for Language Modeling ‚Ä£ Pointer Sentinel Mixture Models\"). This element is computed using an inner product between the query and the sentinel222A sentinel value is inserted at the end of a search space in order to ensure a search algorithm terminates if no matching item is found. Our sentinel value terminates the pointer search space and distributes the rest of the probability mass to the RNN vocabulary. vector s‚àà‚ÑùHùë†superscript‚Ñùùêªs\\\\in\\\\mathbb{R}^{H}. This change can be summarized by changing Eq. [4]In 2.2 The Pointer Network Component ‚Ä£ 2 The Pointer Sentinel for Language Modeling ‚Ä£ Pointer Sentinel Mixture Models\") to:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | a=softmax(\\[z;qT‚Äãs\\]).ùëésoftmaxùëßsuperscriptùëûùëáùë†a=\\\\operatorname\\*{softmax}\\\\left(\\\\left\\[z;q^{T}s\\\\right\\]\\\\right). |  | (7) |\n\nWe define a‚àà‚ÑùV+1ùëésuperscript‚Ñùùëâ1a\\\\in\\\\mathbb{R}^{V+1} to be the attention distribution over both the words in the pointer window as well as the sentinel state. We interpret the last element of this vector to be the gate value: g=a‚Äã\\[V+1\\]ùëîùëédelimited-\\[\\]ùëâ1g=a\\[V+1\\].\n\nAny probability mass assigned to gùëîg is given to the standard softmaxsoftmax\\\\operatorname\\*{softmax} vocabulary of the RNN.\nThe final updated, normalized pointer probability over the vocabulary in the window then becomes:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pptr(yi\\|xi)=11‚àíga\\[1:V\\],p\\_{\\\\text{ptr}}(y\\_{i}\\|x\\_{i})=\\\\frac{1}{1-g}\\\\;a\\[1:V\\], |  | (8) |\n\nwhere we denoted \\[1:V\\]delimited-\\[\\]:1ùëâ\\[1:V\\] to mean the first VùëâV elements of the vector.\nThe final mixture model is the same as Eq. [6]In 2.3 The Pointer Sentinel Mixture Model ‚Ä£ 2 The Pointer Sentinel for Language Modeling ‚Ä£ Pointer Sentinel Mixture Models\") but with the updated Eq. [8]In 2.4 Details of the Gating Function ‚Ä£ 2 The Pointer Sentinel for Language Modeling ‚Ä£ Pointer Sentinel Mixture Models\") for the pointer probability.\n\nThis setup encourages the model to have both components compete: use pointers whenever possible and back-off to the standard softmaxsoftmax\\\\operatorname\\*{softmax} otherwise. This competition, in particular, was crucial to obtain our best model.\nBy integrating the gating function directly into the pointer computation, it is influenced by both the RNN hidden state and the pointer window‚Äôs hidden states.\n\n### 2.5 Motivation for the Sentinel as Gating Function\n\nTo make the best decision possible regarding which component to use the gating function must have as much context as possible.\nAs we increase both the number of timesteps and the window of words for the pointer component to consider, the RNN hidden state by itself isn‚Äôt guaranteed to accurately recall the identity or order of words it has recently seen (Adi et al., [2016])).\nThis is an obvious limitation of encoding a variable length sequence into a fixed dimensionality vector.\n\nIn our task, where we may want a pointer window where the length LùêøL is in the hundreds, accurately modeling all of this information within the RNN hidden state is impractical.\nThe position of specific words is also a vital feature as relevant words eventually fall out of the pointer component‚Äôs window.\nTo correctly model this would require the RNN hidden state to store both the identity and position of each word in the pointer window.\nThis is far beyond what the fixed dimensionality hidden state of an RNN is able to accurately capture.\n\nFor this reason, we integrate the gating function directly into the pointer network by use of the sentinel.\nThe decision to back-off to the softmaxsoftmax\\\\operatorname\\*{softmax} vocabulary is then informed by both the query qùëûq, generated using the RNN hidden state hN‚àí1subscript‚ÑéùëÅ1h\\_{N-1}, and from the contents of the hidden states in the pointer window itself.\nThis allows the model to accurately query what hidden states are contained in the pointer window and avoid having to maintain state for when a word may have fallen out of the pointer window.\n\n### 2.6 Pointer Sentinel Loss Function\n\nWe minimize the cross-entropy loss of ‚àí‚àëjyi‚Äãj^‚Äãlog‚Å°p‚Äã(yi‚Äãj\\|xi)subscriptùëó^subscriptùë¶ùëñùëóùëùconditionalsubscriptùë¶ùëñùëósubscriptùë•ùëñ-\\\\sum\\_{j}\\\\hat{y\\_{ij}}\\\\log p(y\\_{ij}\\|x\\_{i}), where yi^^subscriptùë¶ùëñ\\\\hat{y\\_{i}} is a one hot encoding of the correct output.\nDuring training, as yi^^subscriptùë¶ùëñ\\\\hat{y\\_{i}} is one hot, only a single mixed probability p‚Äã(yi‚Äãj)ùëùsubscriptùë¶ùëñùëóp(y\\_{ij}) must be computed for calculating the loss.\nThis can result in a far more efficient GPU implementation.\nAt prediction time, when we want all values for p‚Äã(yi\\|xi)ùëùconditionalsubscriptùë¶ùëñsubscriptùë•ùëñp(y\\_{i}\\|x\\_{i}), a maximum of LùêøL word probabilities must be mixed, as there is a maximum of LùêøL unique words in the pointer window of length LùêøL.\nThis mixing can occur on the CPU where random access indexing is more efficient than the GPU.\n\nFollowing the pointer sum attention network, the aim is to place probability mass from the attention mechanism on the correct output yi^^subscriptùë¶ùëñ\\\\hat{y\\_{i}} if it exists in the input. In the case of our mixture model the pointer loss instead becomes:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àílog‚Å°(g+‚àëi‚ààI‚Äã(y,x)ai),ùëîsubscriptùëñùêºùë¶ùë•subscriptùëéùëñ\\\\displaystyle-\\\\log\\\\left(g+\\\\sum\\_{i\\\\in I(y,x)}a\\_{i}\\\\right), |  | (9) |\n\nwhere I‚Äã(y,x)ùêºùë¶ùë•I(y,x) results in all positions of the correct output yùë¶y in the input xùë•x.\nThe gate gùëîg may be assigned all probability mass if, for instance, the correct output yi^^subscriptùë¶ùëñ\\\\hat{y\\_{i}} exists only in the softmaxsoftmax\\\\operatorname\\*{softmax}-RNN vocabulary.\nFurthermore, there is no penalty if the model places the entire probability mass, on any of the instances of the correct word in the input window.\nIf the pointer component places the entirety of the probability mass on the gate gùëîg, the pointer network incurs no penalty and the loss is entirely determined by the loss of the softmaxsoftmax\\\\operatorname\\*{softmax}-RNN component.\n\n### 2.7 Parameters and Computation Time\n\nThe pointer sentinel-LSTM mixture model results in a relatively minor increase in parameters and computation time, especially when compared to the size of the models required to achieve similar performance using standard LSTM models.\n\nThe only two additional parameters required by the model are those required for computing qùëûq, specifically W‚àà‚ÑùH√óHùëäsuperscript‚ÑùùêªùêªW\\\\in\\\\mathbb{R}^{H\\\\times H} and b‚àà‚ÑùHùëèsuperscript‚Ñùùêªb\\\\in\\\\mathbb{R}^{H}, and the sentinel vector embedding, s‚àà‚ÑùHùë†superscript‚Ñùùêªs\\\\in\\\\mathbb{R}^{H}.\nThis is independent of the depth of the RNN as the the pointer component only interacts with the output of the final RNN layer.\nThe additional H2+2‚ÄãHsuperscriptùêª22ùêªH^{2}+2H parameters are minor compared to a single LSTM layer‚Äôs 8‚ÄãH2+4‚ÄãH8superscriptùêª24ùêª8H^{2}+4H parameters.\nMost state of the art models also require multiple LSTM layers.\n\nIn terms of additional computation, a pointer sentinel-LSTM of window size LùêøL only requires computing the query qùëûq (a linear layer with tanh\\\\tanh activation), a total of LùêøL parallelizable inner product calculations, and the attention scores for the LùêøL resulting scalars via the softmaxsoftmax\\\\operatorname\\*{softmax} function.\n\n|  | Penn Treebank | WikiText-2 | WikiText-103 |\n| --- | --- | --- | --- |\n|  | Train | Valid | Test | Train | Valid | Test | Train | Valid | Test |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Articles | - | - | - | 600 | 60 | 60 | 28,475 | 60 | 60 |\n| Tokens | 929,590 | 73,761 | 82,431 | 2,088,628 | 217,646 | 245,569 | 103,227,021 | 217,646 | 245,569 |\n| Vocab size | 10,000 | 33,278 | 267,735 |\n| OoV rate | 4.8% | 2.6% | 0.4% |\n\nTable 1: Statistics of the Penn Treebank, WikiText-2, and WikiText-103. The out of vocabulary (OoV) rate notes what percentage of tokens have been replaced by an ‚ü®u‚Äãn‚Äãk‚ü©delimited-‚ü®‚ü©ùë¢ùëõùëò\\\\langle unk\\\\rangle token. The token count includes newlines which add to the structure of the WikiText datasets.",
            "citations": null
          },
          "3 Related Work": {
            "content": "Considerable research has been dedicated to the task of language modeling, from traditional machine learning techniques such as n-grams to neural sequence models in deep learning.\n\nMixture models composed of various knowledge sources have been proposed in the past for language modeling.\nRosenfeld ( [1996])) uses a maximum entropy model to combine a variety of information sources to improve language modeling on news text and speech.\nThese information sources include complex overlapping n-gram distributions and n-gram caches that aim to capture rare words.\nThe n-gram cache could be considered similar in some ways to our model‚Äôs pointer network, where rare or contextually relevant words are stored for later use.\n\nBeyond n-grams, neural sequence models such as recurrent neural networks have been shown to achieve state of the art results (Mikolov et al., [2010])).\nA variety of RNN regularization methods have been explored, including a number of dropout variations (Zaremba et al., [2014]); Gal, [2015])) which prevent overfitting of complex LSTM language models.\nOther work has improved language modeling performance by modifying the RNN architecture to better handle increased recurrence depth (Zilly et al., [2016])).\n\nIn order to increase capacity and minimize the impact of vanishing gradients, some language and translation models have also added a soft attention or memory component (Bahdanau et al., [2015]); Sukhbaatar et al., [2015]); Cheng et al., [2016]); Kumar et al., [2016]); Xiong et al., [2016]); Ahn et al., [2016])).\nThese mechanisms allow for the retrieval and use of relevant previous hidden states.\nSoft attention mechanisms need to first encode the relevant word into a state vector and then decode it again, even if the output word is identical to the input word used to compute that hidden state or memory.\nA drawback to soft attention is that if, for instance, _January_ and _March_ are both equally attended candidates, the attention mechanism may blend the two vectors, resulting in a context vector closest to _February_(Kadlec et al., [2016])).\nEven with attention, the standard softmaxsoftmax\\\\operatorname\\*{softmax} classifier being used in these models often struggles to correctly predict rare or previously unknown words.\n\nAttention-based pointer mechanisms were introduced in Vinyals et al. ( [2015])) where the pointer network is able to select elements from the input as output.\nIn the above example, only _January_ or _March_ would be available as options, as _February_ does not appear in the input.\nThe use of pointer networks have been shown to help with geometric problems (Vinyals et al., [2015])), code generation (Ling et al., [2016])), summarization (Gu et al., [2016]); G√ºl√ßehre et al., [2016])), question answering (Kadlec et al., [2016])).\nWhile pointer networks improve performance on rare words and long-term dependencies they are unable to select words that do not exist in the input.\n\nG√ºl√ßehre et al. ( [2016])) introduce a pointer softmaxsoftmax\\\\operatorname\\*{softmax} model that can generate output from either the vocabulary softmaxsoftmax\\\\operatorname\\*{softmax} of an RNN or the location softmaxsoftmax\\\\operatorname\\*{softmax} of the pointer network.\nNot only does this allow for producing OoV words which are not in the input, the pointer softmaxsoftmax\\\\operatorname\\*{softmax} model is able to better deal with rare and unknown words than a model only featuring an RNN softmaxsoftmax\\\\operatorname\\*{softmax}.\nRather than constructing a mixture model as in our work, they use a switching network to decide which component to use.\nFor neural machine translation, the switching network is conditioned on the representation of the context of the source text and the hidden state of the decoder.\nThe pointer network is not used as a source of information for switching network as in our model.\nThe pointer and RNN softmaxsoftmax\\\\operatorname\\*{softmax} are scaled according to the switching network and the word or location with the highest final attention score is selected for output.\nAlthough this approach uses both a pointer and RNN component, it is not a mixture model and does not combine the probabilities for a word if it occurs in both the pointer location softmaxsoftmax\\\\operatorname\\*{softmax} and the RNN vocabulary softmaxsoftmax\\\\operatorname\\*{softmax}.\nIn our model the word probability is a mix of both the RNN and pointer components, allowing for better predictions when the context may be ambiguous.\n\nExtending this concept further, the latent predictor network (Ling et al., [2016])) generates an output sequence conditioned on an arbitrary number of base models where each base model may have differing granularity.\nIn their task of code generation, the output could be produced one character at a time using a standard softmaxsoftmax\\\\operatorname\\*{softmax} or instead copy entire words from referenced text fields using a pointer network.\nAs opposed to G√ºl√ßehre et al. ( [2016])), all states which produce the same output are merged by summing their probabilities.\nTheir model however requires a more complex training process involving the forward-backward algorithm for Semi-Markov models to prevent an exponential explosion in potential paths.",
            "citations": null
          },
          "4 WikiText - A Benchmark for Language Modeling": {
            "content": "We first describe the most commonly used language modeling dataset and its pre-processing in order to then motivate the need for a new benchmark dataset.\n\n### 4.1 Penn Treebank\n\nIn order to compare our model to the many recent neural language models, we conduct word-level prediction experiments on the Penn Treebank (PTB) dataset (Marcus et al., [1993])), pre-processed by Mikolov et al. ( [2010])).\nThe dataset consists of 929k training words, 73k validation words, and 82k test words.\nAs part of the pre-processing performed by Mikolov et al. ( [2010])), words were lower-cased, numbers were replaced with N, newlines were replaced with ‚ü®e‚Äão‚Äãs‚ü©delimited-‚ü®‚ü©ùëíùëúùë†\\\\langle eos\\\\rangle, and all other punctuation was removed.\nThe vocabulary is the most frequent 10k words with the rest of the tokens being replaced by an ‚ü®u‚Äãn‚Äãk‚ü©delimited-‚ü®‚ü©ùë¢ùëõùëò\\\\langle unk\\\\rangle token.\nFor full statistics, refer to Table [1]Table 1 ‚Ä£ 2.7 Parameters and Computation Time ‚Ä£ 2 The Pointer Sentinel for Language Modeling ‚Ä£ Pointer Sentinel Mixture Models\").\n\n### 4.2 Reasons for a New Dataset\n\nWhile the processed version of the PTB above has been frequently used for language modeling, it has many limitations.\nThe tokens in PTB are all lower case, stripped of any punctuation, and limited to a vocabulary of only 10k words.\nThese limitations mean that the PTB is unrealistic for real language use, especially when far larger vocabularies with many rare words are involved. Fig. [3]Figure 3 ‚Ä£ 4.2 Reasons for a New Dataset ‚Ä£ 4 WikiText - A Benchmark for Language Modeling ‚Ä£ Pointer Sentinel Mixture Models\") illustrates this using a Zipfian plot over the training partition of the PTB.\nThe curve stops abruptly when hitting the 10k vocabulary.\nGiven that accurately predicting rare words, such as named entities, is an important task for many applications, the lack of a long tail for the vocabulary is problematic.\n\n![Refer to caption]\n\n![Refer to caption]\n\nFigure 3: Zipfian plot over the training partition in Penn Treebank and WikiText-2 datasets.\nNotice the severe drop on the Penn Treebank when the vocabulary hits 104superscript10410^{4}.\nTwo thirds of the vocabulary in WikiText-2 are past the vocabulary cut-off of the Penn Treebank.\n\nOther larger scale language modeling datasets exist. Unfortunately, they either have restrictive licensing which prevents widespread use or have randomized sentence ordering (Chelba et al., [2013])) which is unrealistic for most language use and prevents the effective learning and evaluation of longer term dependencies. Hence, we constructed a language modeling dataset using text extracted from Wikipedia and will make this available to the community.\n\n### 4.3 Construction and Pre-processing\n\nWe selected articles only fitting the _Good_ or _Featured_ article criteria specified by editors on Wikipedia.\nThese articles have been reviewed by humans and are considered well written, factually accurate, broad in coverage, neutral in point of view, and stable. This resulted in 23,805 Good articles and 4,790 Featured articles.\nThe text for each article was extracted using the Wikipedia API.\nExtracting the raw text from Wikipedia mark-up is nontrivial due to the large number of macros in use.\nThese macros are used extensively and include metric conversion, abbreviations, language notation, and date handling.\n\nOnce extracted, specific sections which primarily featured lists were removed by default.\nOther minor bugs, such as sort keys and Edit buttons that leaked in from the HTML, were also removed.\nMathematical formulae and LaTeX code, were replaced with ‚ü®f‚Äão‚Äãr‚Äãm‚Äãu‚Äãl‚Äãa‚ü©delimited-‚ü®‚ü©ùëìùëúùëüùëöùë¢ùëôùëé\\\\langle formula\\\\rangle tokens.\nNormalization and tokenization were performed using the Moses tokenizer (Koehn et al., [2007])), slightly augmented to further split numbers (8,600 ‚Üí‚Üí\\\\rightarrow 8 @,@ 600) and with some additional minor fixes.\nFollowing Chelba et al. ( [2013])) a vocabulary was constructed by discarding all words with a count below 3.\nWords outside of the vocabulary were mapped to the ‚ü®u‚Äãn‚Äãk‚ü©delimited-‚ü®‚ü©ùë¢ùëõùëò\\\\langle unk\\\\rangle token, also a part of the vocabulary.\n\nTo ensure the dataset is immediately usable by existing language modeling tools, we have provided the dataset in the same format and following the same conventions as that of the PTB dataset above.\n\n### 4.4 Statistics\n\nThe full WikiText dataset is over 103 million words in size, a hundred times larger than the PTB.\nIt is also a tenth the size of the One Billion Word Benchmark (Chelba et al., [2013])), one of the largest publicly available language modeling benchmarks, whilst consisting of articles that allow for the capture and usage of longer term dependencies as might be found in many real world tasks.\n\nThe dataset is available in two different sizes: WikiText-2 and WikiText-103.\nBoth feature punctuation, original casing, a larger vocabulary, and numbers.\nWikiText-2 is two times the size of the Penn Treebank dataset.\nWikiText-103 features all extracted articles.\nBoth datasets use the same articles for validation and testing with the only difference being the vocabularies.\nFor full statistics, refer to Table [1]Table 1 ‚Ä£ 2.7 Parameters and Computation Time ‚Ä£ 2 The Pointer Sentinel for Language Modeling ‚Ä£ Pointer Sentinel Mixture Models\").",
            "citations": null
          },
          "5 Experiments": {
            "content": "### 5.1 Training Details\n\nAs the pointer sentinel mixture model uses the outputs of the RNN from up to LùêøL timesteps back, this presents a challenge for training.\nIf we do not regenerate the stale historical outputs of the RNN when we update the gradients, backpropagation through these stale outputs may result in incorrect gradient updates.\nIf we do regenerate all stale outputs of the RNN, the training process is far slower.\nAs we can make no theoretical guarantees on the impact of stale outputs on gradient updates, we opt to regenerate the window of RNN outputs used by the pointer component after each gradient update.\n\nWe also use truncated backpropagation through time (BPTT) in a different manner to many other RNN language models.\nTruncated BPTT allows for practical time-efficient training of RNN models but has fundamental trade-offs that are rarely discussed.\n\nAlgorithm 1 Calculate truncated BPTT where every k1subscriptùëò1k\\_{1} timesteps we run back propagation for k2subscriptùëò2k\\_{2} timesteps\n\nfor t = 1 to t = T do\n\n     Run the RNN for one step, computing htsubscript‚Ñéùë°h\\_{t} and ztsubscriptùëßùë°z\\_{t}\n\niftùë°tdividesk1subscriptùëò1k\\_{1}then\n\n        Run BPTT from tùë°t down to t‚àík2ùë°subscriptùëò2t-k\\_{2}\n\nendif\n\nendfor\n\nFor running truncated BPTT, BPTT is run for k2subscriptùëò2k\\_{2} timesteps every k1subscriptùëò1k\\_{1} timesteps, as seen in Algorithm [1]Algorithm 1 ‚Ä£ 5.1 Training Details ‚Ä£ 5 Experiments ‚Ä£ Pointer Sentinel Mixture Models\").\nFor many RNN language modeling training schemes, k1=k2subscriptùëò1subscriptùëò2k\\_{1}=k\\_{2}, meaning that every kùëòk timesteps truncated BPTT is performed for the kùëòk previous timesteps.\nThis results in only a single RNN output receiving backpropagation for kùëòk timesteps, with the other extreme being that the first token receives backpropagation for 00 timesteps.\nThis issue is compounded by the fact that most language modeling code split the data temporally such that the boundaries are always the same.\nAs such, most words in the training data will never experience a full backpropagation for kùëòk timesteps.\n\nIn our task, the pointer component always looks LùêøL timesteps into the past if LùêøL past timesteps are available.\nWe select k1=1subscriptùëò11k\\_{1}=1 and k2=Lsubscriptùëò2ùêøk\\_{2}=L such that for each timestep we perform backpropagation for LùêøL timesteps and advance one timestep at a time.\nOnly the loss for the final predicted word is used for backpropagation through the window.\n\n### 5.2 Model Details\n\nOur experimental setup reflects that of Zaremba et al. ( [2014])) and Gal ( [2015])).\nWe increased the number of timesteps used during training from 35 to 100, matching the length of the window LùêøL.\nBatch size was increased to 32 from 20.\nWe also halve the learning rate when validation perplexity is worse than the previous iteration, stopping training when validation perplexity fails to improve for three epochs or when 64 epochs are reached.\nThe gradients are rescaled if their global norm exceeds 1 (Pascanu et al., [2013b])).333The highly aggressive clipping is likely due to the increased BPTT length. Even with such clipping early batches may experience excessively high perplexity, though this settles rapidly.\nWe evaluate the medium model configuration which features a hidden size of H=650ùêª650H=650 and a two layer LSTM.\nWe compare against the large model configuration which features a hidden size of 1500 and a two layer LSTM.\n\nWe produce results for two model types, an LSTM model that uses dropout regularization and the pointer sentinel-LSTM model.\nThe variants of dropout used were zoneout (Krueger et al., [2016])) and variational inference based dropout (Gal, [2015])).\nZoneout, which stochastically forces some recurrent units to maintain their previous values, was used for the recurrent connections within the LSTM.\nVariational inference based dropout, where the dropout mask for a layer is locked across timesteps, was used on the input to each RNN layer and also on the output of the final RNN layer.\nWe used a value of 0.5 for both dropout connections.\n\n### 5.3 Comparison over Penn Treebank\n\nTable [2]Table 2 ‚Ä£ 5.3 Comparison over Penn Treebank ‚Ä£ 5 Experiments ‚Ä£ Pointer Sentinel Mixture Models\") compares the pointer sentinel-LSTM to a variety of other models on the Penn Treebank dataset.\nThe pointer sentinel-LSTM achieves the lowest perplexity, followed by the recent Recurrent Highway Networks (Zilly et al., [2016])).\nThe medium pointer sentinel-LSTM model also achieves lower perplexity than the large LSTM models.\nNote that the best performing large variational LSTM model uses computationally intensive Monte Carlo (MC) dropout averaging.\nMonte Carlo dropout averaging is a general improvement for any sequence model that uses dropout but comes at a greatly increased test time cost.\nIn Gal ( [2015])) it requires rerunning the test model with 100010001000 different dropout masks.\nThe pointer sentinel-LSTM is able to achieve these results with far fewer parameters than other models with comparable performance, specifically with less than a third the parameters used in the large variational LSTM models.\n\nWe also test a variational LSTM that uses zoneout, which serves as the RNN component of our pointer sentinel-LSTM mixture.\nThis variational LSTM model performs BPTT for the same length LùêøL as the pointer sentinel-LSTM, where L=100ùêø100L=100 timesteps.\nThe results for this model ablation are worse than that of Gal ( [2015]))‚Äôs variational LSTM without Monte Carlo dropout averaging.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Model | Parameters | Validation | Test |\n| Mikolov & Zweig ( [2012])) \\- KN-5 | 2M‚Ä° | ‚àí- | 141.2141.2141.2 |\n| Mikolov & Zweig ( [2012])) \\- KN5 + cache | 2M‚Ä° | ‚àí- | 125.7125.7125.7 |\n| Mikolov & Zweig ( [2012])) \\- RNN | 6M‚Ä° | ‚àí- | 124.7124.7124.7 |\n| Mikolov & Zweig ( [2012])) \\- RNN-LDA | 7M‚Ä° | ‚àí- | 113.7113.7113.7 |\n| Mikolov & Zweig ( [2012])) \\- RNN-LDA + KN-5 + cache | 9M‚Ä° | ‚àí- | 92.092.092.0 |\n| Pascanu et al. ( [2013a])) \\- Deep RNN | 6M | ‚àí- | 107.5107.5107.5 |\n| Cheng et al. ( [2014])) \\- Sum-Prod Net | 5M‚Ä° | ‚àí- | 100.0100.0100.0 |\n| Zaremba et al. ( [2014])) \\- LSTM (medium) | 20M | 86.286.286.2 | 82.782.782.7 |\n| Zaremba et al. ( [2014])) \\- LSTM (large) | 66M | 82.282.282.2 | 78.478.478.4 |\n| Gal ( [2015])) \\- Variational LSTM (medium, untied) | 20M | 81.9¬±0.2plus-or-minus81.90.281.9\\\\pm 0.2 | 79.7¬±0.1plus-or-minus79.70.179.7\\\\pm 0.1 |\n| Gal ( [2015])) \\- Variational LSTM (medium, untied, MC) | 20M | ‚àí- | 78.6¬±0.1plus-or-minus78.60.178.6\\\\pm 0.1 |\n| Gal ( [2015])) \\- Variational LSTM (large, untied) | 66M | 77.9¬±0.3plus-or-minus77.90.377.9\\\\pm 0.3 | 75.2¬±0.2plus-or-minus75.20.275.2\\\\pm 0.2 |\n| Gal ( [2015])) \\- Variational LSTM (large, untied, MC) | 66M | ‚àí- | 73.4¬±0.0plus-or-minus73.40.073.4\\\\pm 0.0 |\n| Kim et al. ( [2016])) \\- CharCNN | 19M | ‚àí- | 78.978.978.9 |\n| Zilly et al. ( [2016])) \\- Variational RHN | 32M | 72.872.872.8 | 71.371.371.3 |\n| Zoneout + Variational LSTM (medium) | 20M | 84.484.484.4 | 80.680.680.6 |\n| Pointer Sentinel-LSTM (medium) | 21M | 72.472.472.4 | 70.970.9\\\\mathbf{70.9} |\n\nTable 2: Single model perplexity on validation and test sets for the Penn Treebank language modeling task.\nFor our models and the models of Zaremba et al. ( [2014])) and Gal ( [2015])), medium and large refer to a 650 and 1500 units two layer LSTM respectively.\nThe medium pointer sentinel-LSTM model achieves lower perplexity than the large LSTM model of Gal ( [2015])) while using a third of the parameters and without using the computationally expensive Monte Carlo (MC) dropout averaging at test time.\nParameter numbers with ‚Ä°‚Ä°\\\\ddagger are estimates based upon our understanding of the model and with reference to Kim et al. ( [2016])).\n\n### 5.4 Comparison over WikiText-2\n\nAs WikiText-2 is being introduced in this dataset, there are no existing baselines.\nWe provide two baselines to compare the pointer sentinel-LSTM against: our variational LSTM using zoneout and the medium variational LSTM used in Gal ( [2015])).444https://github.com/yaringal/BayesianRNN\nAttempts to run the Gal ( [2015])) large model variant, a two layer LSTM with hidden size 1500, resulted in out of memory errors on a 12GB K80 GPU, likely due to the increased vocabulary size.\nWe chose the best hyperparameters from PTB experiments for all models.\n\nTable [3]Table 3 ‚Ä£ 5.4 Comparison over WikiText-2 ‚Ä£ 5 Experiments ‚Ä£ Pointer Sentinel Mixture Models\") shows a similar gain made by the pointer sentinel-LSTM over the variational LSTM models.\nThe variational LSTM from Gal ( [2015])) again beats out the variational LSTM used as a base for our experiments.\n\n| Model | Parameters | Validation | Test |\n| --- | --- | --- | --- |\n| Variational LSTM implementation from Gal ( [2015])) | 20M | 101.7101.7101.7 | 96.396.396.3 |\n| --- | --- | --- | --- |\n| Zoneout + Variational LSTM | 20M | 108.7108.7108.7 | 100.9100.9100.9 |\n| Pointer Sentinel-LSTM | 21M | 84.884.884.8 | 80.880.8\\\\mathbf{80.8} |\n\nTable 3: Single model perplexity on validation and test sets for the WikiText-2 language modeling task.\nAll compared models use a two layer LSTM with a hidden size of 650 and the same hyperparameters as the best performing Penn Treebank model.",
            "citations": null
          },
          "6 Analysis": {
            "content": "### 6.1 Impact on Rare Words\n\nA hypothesis as to why the pointer sentinel-LSTM can outperform an LSTM is that the pointer component allows the model to effectively reproduce rare words.\nAn RNN may be able to better use the hidden state capacity by deferring to the pointer component.\nThe pointer component may also allow for a sharper selection of a single word than may be possible using only the softmaxsoftmax\\\\operatorname\\*{softmax}.\n\nFigure [4]Figure 4 ‚Ä£ 6.1 Impact on Rare Words ‚Ä£ 6 Analysis ‚Ä£ Pointer Sentinel Mixture Models\") shows the improvement of perplexity when comparing the LSTM to the pointer sentinel-LSTM with words split across buckets according to frequency. It shows that the pointer sentinel-LSTM has stronger improvements as words become rarer.\nEven on the Penn Treebank, where there is a relative absence of rare words due to only selecting the most frequent 10k words, we can see the pointer sentinel-LSTM mixture model provides a direct benefit.\n\nWhile the improvements are largest on rare words, we can see that the pointer sentinel-LSTM is still helpful on relatively frequent words.\nThis may be the pointer component directly selecting the word or through the pointer supervision signal improving the RNN by allowing gradients to flow directly to other occurrences of the word in that window.\n\n![Refer to caption]Figure 4:\nMean difference in log perplexity on PTB when using the pointer sentinel-LSTM compared to the LSTM model.\nWords were sorted by frequency and split into equal sized buckets.\n\n### 6.2 Qualitative Analysis of Pointer Usage\n\nIn a qualitative analysis, we visualized the gate use and pointer attention for a variety of examples in the validation set, focusing on predictions where the gate primarily used the pointer component.\nThese visualizations are available in the supplementary material.\n\nAs expected, the pointer component is heavily used for rare names such as _Seidman_ (23 times in training), _Iverson_ (7 times in training), and _Rosenthal_ (3 times in training).\n\nThe pointer component was also heavily used when it came to other named entity names such as companies like _Honeywell_ (8 times in training) and _Integrated_ (41 times in training, though due to lowercasing of words this includes _integrated circuits_, _fully integrated_, and other generic usage).\n\nSurprisingly, the pointer component was also used for many frequent tokens.\nFor selecting the unit of measurement (tons, kilograms, ‚Ä¶) or the short scale of numbers (thousands, millions, billions, ‚Ä¶), the pointer would refer to previous recent usage.\nThis is to be expected, especially when phrases are of the form _increased from N tons to N tons_.\nThe model can even be found relying on a mixture of the softmaxsoftmax\\\\operatorname\\*{softmax} and the pointer for predicting certain frequent verbs such as said.\n\nFinally, the pointer component can be seen pointing to words at the very end of the 100 word window (position 97), a far longer horizon than the 35 steps that most language models truncate their backpropagation training to.\nThis illustrates why the gating function must be integrated into the pointer component.\nIf the gating function could only use the RNN hidden state, it would need to be wary of words that were near the tail of the pointer, especially if it was not able to accurately track exactly how long it was since seeing a word.\nBy integrating the gating function into the pointer component, we avoid the RNN hidden state having to maintain this intensive bookkeeping.",
            "citations": null
          },
          "7 Conclusion": {
            "content": "We introduced the pointer sentinel mixture model and the WikiText language modeling dataset.\nThis model achieves state of the art results in language modeling over the Penn Treebank while using few additional parameters and little additional computational complexity at prediction time.\n\nWe have also motivated the need to move from Penn Treebank to a new language modeling dataset for long range dependencies, providing WikiText-2 and WikiText-103 as potential options.\nWe hope this new dataset can serve as a platform to improve handling of rare words and the usage of long term dependencies in language modeling.",
            "citations": null
          }
        },
        "abstract": "Recent neural network sequence models with softmax classifiers have achieved\ntheir best language modeling performance only with very large hidden states and\nlarge vocabularies. Even then they struggle to predict rare or unseen words\neven if the context makes the prediction unambiguous. We introduce the pointer\nsentinel mixture architecture for neural sequence models which has the ability\nto either reproduce a word from the recent context or produce a word from a\nstandard softmax classifier. Our pointer sentinel-LSTM model achieves state of\nthe art language modeling performance on the Penn Treebank (70.9 perplexity)\nwhile using far fewer parameters than a standard softmax LSTM. In order to\nevaluate how well language models can exploit longer contexts and deal with\nmore realistic vocabularies and larger corpora we also introduce the freely\navailable WikiText corpus."
      },
      "bib.bib40": {
        "id": "bib.bib40",
        "citation": "Paperno et al. (2016)",
        "authors": "",
        "year": "",
        "title": "The lambada dataset: Word prediction requiring a broad discourse context, 2016.",
        "venue": "",
        "pages": "",
        "url": "https://arxiv.org/abs/1606.06031",
        "arxiv_id": "1606.06031",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "The recent spurt of powerful end-to-end-trained neural networks for\nNatural Language Processing\n\\[ [Hermann et al., 2015]), [Rockt√§schel et al., 2016]), [Weston et al., 2015]), a.o.\\] has\nsparked interest in tasks to measure the progress they are bringing\nabout in genuine language understanding. Special care must be taken in\nevaluating such systems, since their effectiveness at picking\nstatistical generalizations from large corpora can lead to the\nillusion that they are reaching a deeper degree of understanding than\nthey really are. For example, the end-to-end system of\n?), trained on large conversational datasets,\nproduces dialogues such as the following:\n\n\\\\ex\n\n.\nHuman: what is your job?\n\nMachine: i‚Äôm a lawyer\n\nHuman: what do you do?\n\nMachine: i‚Äôm a doctor\n\nSeparately, the system responses are appropriate for the respective\nquestions. However, when taken together, they are incoherent. The\nsystem behaviour is somewhat parrot-like. It can locally produce\nperfectly sensible language fragments, but it fails to take\nthe meaning of the _broader discourse context_ into account. Much research\neffort has consequently focused on designing systems able to keep\ninformation from the broader context into memory, and possibly even\nperform simple forms of reasoning about it\n\\[ [Hermann et al., 2015]), [Hochreiter and\\\\\nSchmidhuber, 1997]), [Ji et al., 2015]), [Mikolov et al., 2015]), [Sordoni et al., 2015]), [Sukhbaatar et al., 2015]), [Wang and Cho, 2015]), a.o.\\].\n\nIn this paper, we introduce the LAMBADA dataset (LAnguage\nModeling Broadened to Account for\nDiscourse Aspects). LAMBADA proposes a word\nprediction task where the target item is _difficult to guess_\n(for English speakers) when only the sentence in which it appears is\navailable, but becomes _easy_ when a broader context is\npresented. Consider Example [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") in Figure\n[1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\"). The sentence Do you honestly think\nthat I would want you to have a \\_‚Äã\\_‚Äã\\_\\_\\_\\_\\\\\\_\\\\\\_\\\\\\_? has a multitude of\npossible continuations, but the broad context clearly\nindicates that the missing word is miscarriage.\n\nLAMBADA casts language understanding in the classic word prediction\nframework of language modeling. We can thus use it to test several\nexisting language modeling architectures, including systems\nwith capacity to hold longer-term contextual memories. In our\npreliminary experiments, none of these models came even remotely\nclose to human performance, confirming that LAMBADA is a\nchallenging benchmark for research on automated models of natural\nlanguage understanding.\n\n\\\\ex\n\n.\n\nContext:\n\n‚ÄúYes, I thought I was going to lose the baby.‚Äù ‚ÄúI was scared too,‚Äù\nhe stated, sincerity flooding his eyes. ‚ÄúYou were ?‚Äù ‚ÄúYes, of\ncourse. Why do you even ask?‚Äù ‚ÄúThis baby wasn‚Äôt exactly planned\nfor.‚Äù\n\nTarget sentence:\n\n‚ÄúDo you honestly think that I would want you to have a \\_\\_\\_\\_\\_ ?‚Äù\n\nTarget word:\n\nmiscarriage\n\n\\\\ex\n\n.\n\nContext:\n\n‚ÄúWhy?‚Äù ‚ÄúI would have thought you‚Äôd find him rather dry,‚Äù she said. ‚ÄúI don‚Äôt know about that,‚Äù said Gabriel. ‚ÄúHe was a great craftsman,‚Äù said Heather. ‚ÄúThat he was,‚Äù said Flannery.\n\nTarget sentence:\n\n‚ÄúAnd Polish, to boot,‚Äù said \\_\\_\\_\\_\\_.\n\nTarget word:\n\nGabriel\n\n\\\\ex\n\n.\n\nContext:\n\nPreston had been the last person to wear those chains, and I knew what I‚Äôd see and feel if they were slipped onto my skin-the Reaper‚Äôs unending hatred of me. I‚Äôd felt enough of that emotion already in the amphitheater. I didn‚Äôt want to feel anymore. ‚ÄúDon‚Äôt put those on me,‚Äù I whispered. ‚ÄúPlease.‚Äù\n\nTarget sentence:\n\nSergei looked at me, surprised by my low, raspy please, but he put down the \\_\\_\\_\\_\\_.\n\nTarget word:\n\nchains\n\n\\\\ex\n\n.\n\nContext:\n\nThey tuned, discussed for a moment, then struck up a lively jig. Everyone joined in, turning the courtyard into an even more chaotic scene, people now dancing in circles, swinging and spinning in circles, everyone making up their own dance steps. I felt my feet tapping, my body wanting to move.\n\nTarget sentence:\n\nAside from writing, I ‚Äôve always loved \\_\\_\\_\\_\\_.\n\nTarget word:\n\ndancing\n\n\\\\ex\n\n.\n\nContext:\n\nHe shook his head, took a step back and\nheld his hands up as he tried to smile without losing a cigarette.\n‚ÄúYes you can,‚Äù Julia said in a reassuring voice. ‚ÄúI ‚Äôve already\nfocused on my friend. You just have to click the shutter, on top,\nhere.‚Äù\n\nTarget sentence:\n\nHe nodded sheepishly, through his cigarette away and took the \\_\\_\\_\\_\\_.\n\nTarget word:\n\ncamera\n\n\\\\ex\n\n.\n\nContext:\n\nIn my palm is a clear stone, and inside it is a small ivory statuette. A guardian angel. ‚ÄúFigured if you‚Äôre going to be out at night getting hit by cars, you might as well have some backup.‚Äù I look at him, feeling stunned. Like this is some sort of sign.\n\nTarget sentence:\n\nBut as I stare at Harlin, his mouth curved in a confident grin, I don‚Äôt care about \\_\\_\\_\\_\\_.\n\nTarget word:\n\nsigns\n\n\\\\ex\n\n.\n\nContext:\n\nBoth its sun-speckled shade and the cool grass beneath were a welcome\nrespite after the stifling kitchen, and I was glad to relax against\nthe tree‚Äôs rough, brittle bark and begin my breakfast of buttery,\ntoasted bread and fresh fruit. Even the water was tasty, it was so clean and cold.\n\nTarget sentence:\n\nIt almost made up for the lack of \\_\\_\\_\\_\\_.\n\nTarget word:\n\ncoffee\n\n\\\\ex\n\n.\n\nContext:\n\nMy wife refused to allow me to come to Hong Kong when the plague was at its height and ‚Äì‚Äù ‚ÄúYour wife, Johanne? You are married at last ?‚Äù Johanne grinned. ‚ÄúWell, when a man gets to my age, he starts to need a few home comforts.\n\nTarget sentence:\n\nAfter my dear mother passed away\nten years ago now, I became \\_\\_\\_\\_\\_.\n\nTarget word:\n\nlonely\n\n\\\\ex\n\n.\n\nContext:\n\n‚ÄúAgain, he left that up to you. However, he was adamant in his\ndesire that it remain a private ceremony. He asked me to make sure,\nfor instance, that no information be given to the newspaper regarding\nhis death, not even an obituary.\n\nTarget sentence:\n\nI got the sense that he didn‚Äôt want anyone, aside from the three of\nus, to know that he‚Äôd even \\_\\_\\_\\_\\_.\n\nTarget word:\n\ndied\n\n\\\\ex\n\n.\n\nContext:\n\nThe battery on Logan‚Äôs radio must have been on the way out. So he told himself. There was no other explanation beyond Cygan and the staff at the White House having been overrun. Lizzie opened her eyes with a flutter. They had been on the icy road for an hour without incident.\n\nTarget sentence:\n\nJack was happy to do all of the \\_\\_\\_\\_\\_.\n\nTarget word:\n\ndriving\n\nFigure 1: Examples of LAMBADA passages. Underlined words highlight when the target word (or its lemma) occurs in the context.",
            "citations": null
          },
          "2 Related datasets": {
            "content": "The CNN/Daily Mail (CNNDM) benchmark recently introduced by\n?) is closely related to LAMBADA. CNNDM\nincludes a large set of online articles that are published together\nwith short summaries of their main points. The task is to guess a\nnamed entity that has been removed from one such summary. Although the\ndata are not normed by subjects, it is unlikely that the missing named\nentity can be guessed from the short summary alone, and thus, like in\nLAMBADA, models need to look at the broader context (the\narticle). Differences between the two datasets include text genres\n(news vs. novels; see Section [3.1]Data collection11footnote 1Further technical details are provided in the Supplementary Material (SM): http://clic.cimec.unitn.it/lambada/ ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")) and the fact\nthat missing items in CNNDM are limited to named entities. Most\nimportantly, the two datasets require models to perform different\nkinds of inferences over broader passages. For CNNDM, models must be\nable to _summarize_ the articles, in order to make sense of the\nsentence containing the missing word, whereas in LAMBADA the last\nsentence is not a summary of the broader passage, but a\n_continuation_ of the same story. Thus, in order to succeed,\nmodels must instead understand what is a plausible development of a\nnarrative fragment or a dialogue.\n\nAnother related benchmark, CBT, has been introduced by\n?). Like LAMBADA, CBT is a collection of book\nexcerpts, with one word randomly removed from the last sentence in a\nsequence of 21 sentences. While there are other design differences,\nthe crucial distinction between CBT and LAMBADA is that the CBT\npassages were not filtered to be human-guessable in the broader\ncontext only. Indeed, according to the post-hoc analysis of a sample\nof CBT passages reported by Hill and colleagues, in a large proportion\nof cases in which annotators could guess the missing word from the\nbroader context, they could also guess it from the last sentence\nalone. At the same time, in about one fifth of the cases, the\nannotators could not guess the word even when the broader context was\ngiven. Thus, only a small portion of the CBT passages are really\nprobing the model‚Äôs ability to understand the broader context, which is\ninstead the focus of LAMBADA.\n\nThe idea of a book excerpt completion task was originally introduced\nin the MSRCC dataset \\[ [Zweig and Burges, 2011])\\]. However, the latter\nlimited context to single sentences, not attempting to measure\nbroader passage understanding.\n\nOf course, text understanding can be tested through other tasks,\nincluding entailment detection \\[ [Bowman et al., 2015])\\], answering\nquestions about a text \\[ [Richardson et al., 2013]), [Weston et al., 2015])\\]\nand measuring inter-clause coherence \\[ [Yin and Sch√ºtze, 2015])\\]. While\ndifferent tasks can provide complementary insights into the models‚Äô\nabilities, we find word prediction particularly attractive because of\nits naturalness (it‚Äôs easy to norm the data with non-expert humans)\nand simplicity. Models just need to be trained to predict the most\nlikely word given the previous context, following the classic\nlanguage modeling paradigm, which is a much simpler setup than the one\nrequired, say, to determine whether two sentences entail each\nother. Moreover, models can have access to virtually unlimited amounts\nof training data, as all that is required to train a language model is\nraw text. On a more general methodological level, word prediction has\nthe potential to probe almost any aspect of text understanding,\nincluding but not limited to traditional narrower tasks such as\nentailment, co-reference resolution or word sense disambiguation.",
            "citations": null
          },
          "3 The LAMBADA dataset": {
            "content": "### 3.1 Data collection111Further technical details are provided in the Supplementary Material (SM): http://clic.cimec.unitn.it/lambada/\n\nLAMBADA consists of _passages_ composed of a _context_ (on average 4.6 sentences) and a\n_target sentence_. The context size is the minimum number of complete sentences before the target sentence such that they cumulatively contain at least 50 tokens (this size was chosen in a pilot study). The task is to guess the last word of the target\nsentence (the _target word_). The constraint that the target word be\nthe last word of the sentence, while not necessary for our research\ngoal, makes the task more natural for human subjects.\n\nThe LAMBADA data come from the Book Corpus \\[ [Zhu et al., 2015])\\]. The fact that it contains\nunpublished novels minimizes the potential usefulness of\ngeneral world knowledge and external resources for the task, in contrast to other kinds of texts like news data, Wikipedia text, or famous\nnovels. The corpus, after duplicate removal and filtering out of\npotentially offensive material with a stop word list, contains 5,325 novels and 465 million words. We\nrandomly divided the novels into equally-sized training and\ndevelopment+testing partitions. We built the LAMBADA dataset from the\nlatter, with the idea that models tackling LAMBADA should be trained\non raw text from the training partition, composed of 2662 novels and encompassing more than\n200M words. Because novels are\npre-assigned to one of the two partitions only, LAMBADA passages\nare self-contained and cannot be solved by exploiting the knowledge in the remainder of the\nnovels, for example background information about the characters involved or the properties of the fictional world in a given novel. The same novel-based division method is used\nto further split LAMBADA data between development and testing.\n\nTo reduce time and cost of dataset collection, we filtered out\npassages that are relatively easy for standard language models, since\nsuch cases are likely to be guessable based on local context alone. We\nused a combination of four language models, chosen by availability\nand/or ease of training: a pre-trained recurrent neural network (RNN)\n\\[ [Mikolov et al., 2011])\\] and three models trained on the Book Corpus (a\nstandard 4-gram model, a RNN and a feed-forward\nmodel; see SM for details, and note that these are different from the\nmodels we evaluated on LAMBADA as described in Section\n[4]Modeling experiments ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") below). Any passage whose target word had\nprobability ‚â•\\\\geq0.00175 according to any of the language models was\nexcluded.\n\nA random sample of the remaining passages were then evaluated by\nhuman subjects through the CrowdFlower crowdsourcing\nservice333http://www.crowdflower.com\nin three steps. For a given passage,\n\n1. 1.\n\n\none human subject guessed the target word based on the whole passage (comprising the context and the target sentence); if the\nguess was right,\n\n2. 2.\n\n\na second subject guessed the target word based on the whole passage; if that guess was also right,\n\n3. 3.\n\n\nmore subjects tried to guess the target word based on the target\nsentence only, until the word was guessed or the number of\nunsuccessful guesses reached 10; if no subject was able to guess the\ntarget word, the passage was added to the LAMBADA dataset.\n\n\nThe subjects in step 3 were allowed 3 guesses per sentence, to\nmaximize the chances of catching cases where the target words were\nguessable from the sentence alone. Step 2 was added based on a pilot\nstudy that revealed that, while step 3 was enough to ensure that the\ndata could not be guessed with the local context only, step 1 alone\ndid not ensure that the data were easy given the discourse context\n(its output includes a mix of cases ranging from obvious to relatively\ndifficult, guessed by an especially able or lucky step-1 subject).\nWe made sure that it was not possible for the same subject\nto judge the same item in both passage and sentence conditions\n(details in SM).\n\nIn the crowdsourcing pipeline, 84‚Äì86% items were discarded at step 1, an additional 6‚Äì7% at step 2 and another 3‚Äì5% at step 3. Only about one in 25 input examples passed all the selection steps.\n\nSubjects were paid $0.22 per page in steps 1 and 2 (with 10 passages\nper page) and $0.15 per page in step 3 (with 20 sentences per\npage). Overall, each item in the resulting dataset costed $1.24 on\naverage. Alternative designs, such as having step 3 before step 2 or\nbefore step 1, were found to be more expensive. Cost considerations also precluded us from using more subjects at stage 1, which could in principle improve the quality of filtering at this step.\n\nNote that the criteria for passage inclusion were very strict: We\nrequired two consecutive subjects to exactly match the missing word,\nand we made sure that no subject (out of ten) was able to provide it\nbased on local context only, even when given 3 guesses. An\nalternative to this perfect-match approach would have been to include\npassages where broad-context subjects provided other plausible or synonymous\ncontinuations. However, it is very challenging, both practically and methodologically, to\ndetermine which answers other than the original fit the passage well,\nespecially when the goal is to distinguish between items that are\nsolvable in broad-discourse context and those where the local context\nis enough. Theoretically, substitutability in context could be tested with manual annotation by multiple additional raters, but this would not be financially or practically feasible for a dataset of this scale (human annotators received over 200,000 passages at stage 1). For this reason we went for the strict hit-or-miss approach,\nkeeping only items that can be unambiguously determined by human\nsubjects.\n\n### 3.2 Dataset statistics\n\nThe LAMBADA dataset consists of 10,022 passages, divided into 4,869\ndevelopment and 5,153 test passages (extracted from 1,331 and 1,332\ndisjoint novels, respectively). The average passage consists of 4.6 sentences in the context plus 1 target sentence, for a total length of 75.4 tokens (dev)\n/ 75 tokens (test). Examples of\npassages in the dataset are given in\nFigure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\").\n\nThe training data for language models to be tested on LAMBADA include\nthe full text of 2,662 novels (disjoint from those in dev+test),\ncomprising 203 million words.\nNote that the training data consists of text from the same domain as\nthe dev+test passages, in large amounts but not filtered in the same\nway. This is partially motivated by economic considerations (recall\nthat each data point costs $1.24 on average), but, more importantly,\nit is justified by the intended use of LAMBADA as a tool to evaluate\ngeneral-purpose models in terms of how they fare on broad-context\nunderstanding (just like our subjects could predict the missing words\nusing their more general text understanding abilities), not as a\nresource to develop _ad-hoc_ models only meant to predict the\nfinal word in the sort of passages encountered in LAMBADA. The\ndevelopment data can be used to fine-tune models to the specifics of\nthe LAMBADA passages.\n\n|     |     |     |\n| --- | --- | --- |\n| ![Refer to caption] | ![Refer to caption] | ![Refer to caption] |\n| (a) | (b) | (c) |\n\nFigure 2: (a) Target word in or not in context; (b) Target word POS\ndistribution in LAMBADA vs. data presented to human\nsubjects (input) and items guessed with sentence context only\n(PN=proper noun, CN=common noun, V=verb, J=adjective,\nR=adverb, O=other); (c)\nTarget word POS distribution of LAMBADA passages where the lemma of\nthe target word is not in the context (categories as in (b)).\n\n### 3.3 Dataset analysis\n\nOur analysis of the LAMBADA data suggests that, in order for the\ntarget word to be predictable in a broad context only, it must be\nstrongly cued in the broader discourse. Indeed, it is typical for\nLAMBADA items that the target word (or its lemma) occurs in the\ncontext. Figure [2]Figure 2 ‚Ä£ 3.2 Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")(a) compares the LAMBADA items to\na random 5000-item sample from the input data,\nthat is, the passages that\nwere presented to human subjects in the filtering phase (we sampled\nfrom all passages passing the automated filters described in Section\n[3.1]Data collection11footnote 1Further technical details are provided in the Supplementary Material (SM): http://clic.cimec.unitn.it/lambada/ ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") above, including those that made it to LAMBADA).\nThe figure shows that when subjects guessed the word (only) in the\nbroad context, often the word itself occurred in the context: More\nthan 80% of LAMBADA passages include the target word in the context,\nwhile in the input data that was the case for less than 15% of the\npassages. To guess the right word, however, subjects must still put\ntheir linguistic and general cognitive skills to good use, as shown by\nthe examples featuring the target word in the context reported in\nFigure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\").\n\nFigure [2]Figure 2 ‚Ä£ 3.2 Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")(b) shows that most target words in LAMBADA are\nproper nouns (48%), followed by common nouns (37%) and, at a\ndistance, verbs (7.7%). In fact, proper nouns are hugely\nover-represented in LAMBADA, while the other categories are\nunder-represented, compared to the POS distribution in the input.\nA variety of factors converges in making proper nouns easy\nfor subjects in the LAMBADA task. In particular, when the context\nclearly demands a referential expression, the constraint that the\nblank be filled by a single word excludes other possibilities such as\nnoun phrases with articles, and there are reasons to suspect that\nco-reference is easier than other discourse phenomena in our task (see\nbelow). However, although co-reference seems to play a big role,\nonly 0.3% of target words are pronouns.\n\nCommon nouns are still pretty frequent in LAMBADA, constituting over one\nthird of the data. Qualitative analysis reveals a mixture of\nphenomena. Co-reference is again quite common (see\nExample [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") in Figure [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")),\nsometimes as ‚Äúpartial‚Äù co-reference facilitated by\nbridging mechanisms (shutter‚Äìcamera; Example [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\"))\nor through the presence of a near synonym (‚Äòlose the\nbaby‚Äô‚Äìmiscarriage; Example [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")). However, we also\noften find other phenomena, such as\nthe inference of prototypical participants\nin an event. For instance, if the passage describes someone having\nbreakfast together with typical food and beverages (see Example\n[1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")), subjects can\nguess the target word _coffee_ without it having been explicitly\nmentioned.\n\nIn contrast, verbs, adjectives, and adverbs are rare in LAMBADA. Many\nof those items can be guessed with local sentence context only,\nas shown in Figure [2]Figure 2 ‚Ä£ 3.2 Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")(b), which also reports the POS\ndistribution of the set of items that\nwere guessed by subjects based on the target-sentence context only\n(step 3 in Section [3.1]Data collection11footnote 1Further technical details are provided in the Supplementary Material (SM): http://clic.cimec.unitn.it/lambada/ ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")). Note a\nhigher proportion of verbs, adjectives and adverbs in the latter\nset in Figure [2]Figure 2 ‚Ä£ 3.2 Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")(b). While end-of-sentence context skews input distribution in favour of nouns,\nsubject filtering does show a clear differential effect for nouns vs. other POSs.\nManual inspection reveals that broad context is not necessary to guess items like frequent verbs (ask, answer, call), adjectives, and closed-class adverbs (now, too, well),\nas well as time-related adverbs (quickly, recently). In\nthese cases, the sentence context suffices, so few of them end\nup in LAMBADA (although of course there are exceptions, such as\nExample [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\"), where\nthe target word is an adjective). This contrasts with other types of\nopen-class adverbs (e.g., innocently, confidently), which are\ngenerally hard to guess with both local and broad context. The low proportion of these kinds of adverbs and of verbs among guessed\nitems in general suggests that tracking event-related phenomena (such\nas script-like sequences of events) is harder for subjects than\nco-referential phenomena, at least as framed in the LAMBADA task.\nFurther research is needed to probe this hypothesis.\n\nFurthermore, we observe that, while explicit mention in the preceding\ndiscourse context is critical for proper nouns, the other categories\ncan often be guessed without having been explicitly introduced. This\nis shown in Figure [2]Figure 2 ‚Ä£ 3.2 Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")(c), which depicts the POS\ndistribution of LAMBADA items for which the lemma of the target word\nis not in the context (corresponding to about 16% of LAMBADA in\ntotal).444The apparent 1% of out-of-context proper nouns shown\nin Figure [2]Figure 2 ‚Ä£ 3.2 Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")(c) is due to lemmatization mistakes\n(fictional characters for which the lemmatizer did not recognize a\nlink between singular and plural forms, e.g., Wynn ‚Äì Wynns). A\nmanual check confirmed that all proper noun target words in LAMBADA\nare indeed also present in the context. Qualitative analysis of items with verbs and adjectives as targets\nsuggests that the target word, although not present in\nthe passage, is still strongly implied by the context. In about one\nthird of the cases examined, the missing word is ‚Äúalmost there‚Äù.\nFor instance, the passage contains a word with the same root but a\ndifferent part of speech (e.g., death‚Äìdied in\nExample [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")), or a synonymous expression (as mentioned\nabove for ‚Äúmiscarriage‚Äù; we find the same phenomenon for verbs,\ne.g., ‚Äòdeprived you of water‚Äô‚Äìdehydrated).\n\nIn other cases, correct prediction requires more complex discourse\ninference, including guessing prototypical participants of a scene\n(as in the _coffee_ example above), actions or events\nstrongly suggested by the discourse (see Examples [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")\nand [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\"), where the mention of an icy road helps in\npredicting the target driving), or qualitative properties of\nparticipants or situations (see Example [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")). Of course,\nthe same kind of discourse reasoning takes place when the target word\nis already present in the context (cf. Examples [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") and [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")). The presence of the\nword in context does not make the reasoning unnecessary (the task\nremains challenging), but facilitates the inference.\n\nAs a final observation, intriguingly, the LAMBADA items contain\n(quoted) direct speech significantly more often than the input items\noverall (71% of LAMBADA items vs. 61% of items in the input sample),\nsee, e.g., Examples [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") and [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\"). Further\nanalysis is needed to investigate in what way more dialogic discourse\nmight facilitate the prediction of the final target word.\n\nIn sum, LAMBADA contains a myriad of\nphenomena that, besides making it challenging from the text\nunderstanding perspective, are of great interest to the broad Computational\nLinguistics community. To return to Example [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\"), solving it requires a\ncombination of linguistic skills ranging from (morpho)phonology (the plausible\ntarget word _abortion_ is ruled out by the indefinite determiner\n_a_) through morphosyntax (the slot should be filled by a common\nsingular noun) to pragmatics (understanding what the male participant\nis inferring from the female participant‚Äôs words), in addition to\ngeneral reasoning skills. It is not surprising, thus, that LAMBADA is\nso challenging for current models, as we show next.",
            "citations": null
          },
          "4 Modeling experiments": {
            "content": "#### Computational methods\n\nWe tested several existing language models and baselines on\nLAMBADA. We implemented a simple RNN\\[ [Elman, 1990])\\], a\nLong Short-Term Memory network (LSTM)\n\\[ [Hochreiter and\\\\\nSchmidhuber, 1997])\\], a traditional statistical\nN-Gram language model \\[ [Stolcke, 2002])\\] with and without\ncache, and a Memory Network\\[ [Sukhbaatar et al., 2015])\\]. We remark that at least LSTM, Memory\nNetwork and, to a certain extent, the cache N-Gram model have, among\ntheir supposed benefits, the ability to take broader contexts into\naccount. Note moreover that variants of RNNs and LSTMs are at the\nstate of the art when tested on standard language modeling benchmarks\n\\[ [Mikolov, 2014])\\]. Our Memory Network implementation is similar to\nthe one with which ?) reached the best results\non the CBT data set (see Section [2]Related datasets ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") above). While\nwe could not re-implement the models that performed best on CNNDM (see\nagain Section [2]Related datasets ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")), our LSTM is architecturally\nsimilar to the Deep LSTM Reader of ?), which\nachieved respectable performance on that data set. Most importantly,\nwe will show below that most of our models reach impressive\nperformance when tested on a more standard language modeling data set\nsourced from the same corpus used to build LAMBADA. This\ncontrol set was constructed by randomly sampling 5K passages\nof the same shape and size as the ones used to build LAMBADA from the\nsame test novels, but without filtering them in any way. Based\non the control set results, to be discussed below, we can reasonably\nclaim that the models we are testing on LAMBADA are very good at\nstandard language modeling, and their low performance on the latter\ncannot be attributed to poor quality.\n\nIn order to test for strong biases in the data, we constructed\nSup-CBOW, a baseline model weakly tailored to the task at\nhand, consisting of a simple neural network that takes as input a\nbag-of-word representation of the passage and attempts to predict the\nfinal word. The input representation comes from adding pre-trained\nCBOW vectors \\[ [Mikolov et al., 2013])\\] of the words in the\npassage.555http://clic.cimec.unitn.it/composes/semantic-vectors.html\nWe also considered an unsupervised variant (Unsup-CBOW) where\nthe target word is predicted by cosine similarity between the passage\nvector and the target word vector. Finally, we evaluated several\nvariations of a random guessing baseline differing in terms of the\nword pool to sample from. The guessed word could be picked from: the\nfull vocabulary, the words that appear in the current passage and a\nrandom uppercased word from the passage. The latter baseline aims at\nexploiting the potential bias that proper names account for a\nconsistent portion of the LAMBADA data (see Figure [2]Figure 2 ‚Ä£ 3.2 Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")\nabove).\n\nNote that LAMBADA was designed to challenge language models with\nharder-than-average examples where broad context understanding is\ncrucial. However, the average case should not be disregarded either, since we\nwant language models to be able to handle both cases. For this\nreason, we trained the models entirely on unsupervised data and expect\nfuture work to follow similar principles. Concretely, we trained the\nmodels, as is standard practice, on predicting each upcoming word\ngiven the previous context, using the LAMBADA training data (see\nSection [3.2]Dataset statistics ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\") above) as input corpus. The only exception to this procedure was Sup-CBOW where\nwe extracted from the training novels similar-shaped passages to those\nin LAMBADA and trained the model on them (about 9M\npassages). Again, the goal of this model was only to test for\npotential biases in the data and not to provide a full account for the\nphenomena we are testing. We restricted the vocabulary of the models\nto the 60K most frequent words in the training set (covering 95%percent9595\\\\% of\nthe target words in the development set). The model hyperparameters were tuned on their accuracy in the\ndevelopment set. The same trained models were tested on the LAMBADA\nand the control sets. See SM for the tuning\ndetails.\n\n| Data | Method | Acc. | Ppl. | Rank |\n| LAMBADA | _baselines_ |\n| Random vocabulary word | 00 | 600006000060000 | 300263002630026 |\n| Random word from passage | 1.61.61.6 | - | - |\n| Random capitalized word from passage | 7.37.37.3 | - | - |\n| Unsup-CBOW | 00 | 570405704057040 | 163521635216352 |\n| Sup-CBOW | 00 | 475874758747587 | 466046604660 |\n| _models_ |\n| N-Gram | 0.10.10.1 | 312531253125 | 993993993 |\n| N-Gram w/cache | 0.10.10.1 | 768768768 | 878787 |\n| RNN | 00 | 147251472514725 | 783178317831 |\n|  | LSTM | 00 | 535753575357 | 324324324 |\n|  | Memory Network | 00 | 163181631816318 | 846846846 |\n| Control | _baselines_ |\n| Random vocabulary word | 00 | 600006000060000 | 304533045330453 |\n| Random word from passage | 00 | - | - |\n| Random capitalized word from passage | 00 | - | - |\n| Unsup-CBOW | 00 | 551905519055190 | 129501295012950 |\n| Sup-CBOW | 3.53.53.5 | 234423442344 | 259259259 |\n| _models_ |\n| N-Gram | 19.119.119.1 | 285285285 | 171717 |\n| N-Gram w/cache | 19.119.119.1 | 270270270 | 181818 |\n| RNN | 15.415.415.4 | 277277277 | 242424 |\n|  | LSTM | 21.921.921.9 | 149149149 | 121212 |\n|  | Memory Network | 8.58.58.5 | 566566566 | 464646 |\n\nTable 1: Results of computational methods. Accuracy is expressed in percentage.\n\n#### Results\n\nResults of models and baselines are reported in Table [1]Table 1 ‚Ä£ Computational methods ‚Ä£ 4 Modeling experiments ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\"). Note that the measure\nof interest for LAMBADA is the average success of a model at\npredicting the target word, i.e., accuracy (unlike in standard\nlanguage modeling, we know that the missing LAMBADA words can be\nprecisely predicted by humans, so good models should be able to\naccomplish the same feat, rather than just assigning a high\nprobability to them). However, as we observe a bottoming effect with\naccuracy, we also report perplexity and median rank of correct word,\nto better compare the models.\n\nAs anticipated above, and in line with what we expected, all our\nmodels have very good performance when called to perform a standard\nlanguage modeling task on the control set. Indeed, 3 of the models\n(the N-Gram models and LSTM) can guess the right word in about 1/5 of\nthe cases.\n\nThe situation drastically changes if we look at the LAMBADA results,\nwhere all models are performing very badly. Indeed, no model is even\nable to compete with the simple heuristics of picking a random word\nfrom the passage, and, especially, a random capitalized word (easily a\nproper noun). At the same time, the low performance of the latter\nheuristic in absolute terms (7% accuracy) shows that, despite the\nbias in favour of names in the passage, simply relying on this will\nnot suffice to obtain good performance on LAMBADA, and models should\nrather pursue deeper forms of analysis of the broader context (the\nSup-CBOW baseline, attempting to directly exploit the passage in a\nshallow way, performs very poorly). This confirms again that the\ndifficulty of LAMBADA relies mainly on accounting for the information\navailable in a broader context and not on the task of predicting the\nexact word missing.\n\nIn comparative terms (and focusing on perplexity and rank, given the uniformly low accuracy results) we\nobserve a stronger performance of the traditional N-Gram models over\nthe neural-network-based ones, possibly pointing to the difficulty of\ntuning the latter properly. In particular, the best relative\nperformance on LAMBADA is achieved by N-Gram w/cache, which takes\npassage statistics into account. While even this model is effectively\nunable to guess the right word, it achieves a respectable\nperplexity of 768.\n\nWe recognize, of course, that the evaluation we performed is very\npreliminary, and it must only be taken as a proof-of-concept study of\nthe difficulty of LAMBADA. Better results might be obtained simply by\nperforming more extensive tuning, by adding more sophisticated\nmechanisms such as attention \\[ [Bahdanau et al., 2014])\\], and so\nforth. Still, we would be surprised if minor modifications of the\nmodels we tested led to human-level performance on the task.\n\nWe also note that, because of the way we have constructed LAMBADA,\nstandard language models are bound to fail on it by design: one of our\nfirst filters (see Section [3.1]Data collection11footnote 1Further technical details are provided in the Supplementary Material (SM): http://clic.cimec.unitn.it/lambada/ ‚Ä£ 3 The LAMBADA dataset ‚Ä£ The LAMBADA dataset: Word prediction requiring a broad discourse context Denis and Germ√°n share first authorship. Marco, Gemma, and Raquel share senior authorship.\")) was to choose\npassages where a number of simple language models were failing to\npredict the upcoming word. However, future research should find ways\naround this inherent difficulty. After all, humans were still able to\nsolve this task, so a model that claims to have good language understanding\nability should be able to succeed on it as well.",
            "citations": null
          },
          "5 Conclusion": {
            "content": "This paper introduced the new LAMBADA dataset, aimed at testing language\nmodels on their ability to take a broad discourse context into account\nwhen predicting a word. A number of linguistic phenomena make the\ntarget words in LAMBADA easy to guess by human subjects when they can\nlook at the whole passages they come from, but nearly impossible if\nonly the last sentence is considered. Our preliminary experiments\nsuggest that even some cutting-edge neural network approaches that are\nin principle able to track long-distance effects are far from passing the LAMBADA challenge.\n\nWe hope the computational community will be stimulated to develop\nnovel language models that are genuinely capturing the non-local\nphenomena that LAMBADA reflects. To promote research in this\ndirection, we plan to announce a public competition based on the\nLAMBADA data.666The development set of LAMBADA, along with the training corpus, can be downloaded at http://clic.cimec.unitn.it/lambada/. The\ntest set will be made available at the time of the competition.\n\nOur own hunch is that, despite the initially disappointing results of\nthe ‚Äúvanilla‚Äù Memory Network we tested, the ability to store\ninformation in a longer-term memory will be a crucial component of\nsuccessful models, coupled with the ability to perform some kind of\nreasoning about what‚Äôs stored in memory, in order to retrieve the\nright information from it.\n\nOn a more general note, we believe that leveraging human performance\non word prediction is a very promising strategy to construct\nbenchmarks for computational models that are supposed to capture\nvarious aspects of human text understanding. The influence of broad\ncontext as explored by LAMBADA is only one example of this\nidea.",
            "citations": null
          }
        },
        "abstract": "We introduce LAMBADA, a dataset to evaluate the capabilities of computational\nmodels for text understanding by means of a word prediction task. LAMBADA is a\ncollection of narrative passages sharing the characteristic that human subjects\nare able to guess their last word if they are exposed to the whole passage, but\nnot if they only see the last sentence preceding the target word. To succeed on\nLAMBADA, computational models cannot simply rely on local context, but must be\nable to keep track of information in the broader discourse. We show that\nLAMBADA exemplifies a wide range of linguistic phenomena, and that none of\nseveral state-of-the-art language models reaches accuracy above 1% on this\nnovel benchmark. We thus propose LAMBADA as a challenging test set, meant to\nencourage the development of new models capable of genuine understanding of\nbroad context in natural language text."
      }
    },
    "key_map": {
      "2303.08797": "bib.bib1",
      "2108.07258": "bib.bib3",
      "2402.04997": "bib.bib5",
      "1312.3005": "bib.bib7",
      "1707.08819": "bib.bib8",
      "2309.15807": "bib.bib9",
      "2407.15595": "bib.bib19",
      "1609.07843": "bib.bib35",
      "1606.06031": "bib.bib40"
    }
  }
}