{
  "title": "DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes",
  "abstract": "LiDAR scene generation has been developing rapidly recently. However,\nexisting methods primarily focus on generating static and single-frame scenes,\noverlooking the inherently dynamic nature of real-world driving environments.\nIn this work, we introduce DynamicCity, a novel 4D LiDAR generation framework\ncapable of generating large-scale, high-quality LiDAR scenes that capture the\ntemporal evolution of dynamic environments. DynamicCity mainly consists of two\nkey models. 1) A VAE model for learning HexPlane as the compact 4D\nrepresentation. Instead of using naive averaging operations, DynamicCity\nemploys a novel Projection Module to effectively compress 4D LiDAR features\ninto six 2D feature maps for HexPlane construction, which significantly\nenhances HexPlane fitting quality (up to 12.56 mIoU gain). Furthermore, we\nutilize an Expansion & Squeeze Strategy to reconstruct 3D feature volumes in\nparallel, which improves both network training efficiency and reconstruction\naccuracy than naively querying each 3D point (up to 7.05 mIoU gain, 2.06x\ntraining speedup, and 70.84% memory reduction). 2) A DiT-based diffusion model\nfor HexPlane generation. To make HexPlane feasible for DiT generation, a Padded\nRollout Operation is proposed to reorganize all six feature planes of the\nHexPlane as a squared 2D feature map. In particular, various conditions could\nbe introduced in the diffusion or sampling process, supporting versatile 4D\ngeneration applications, such as trajectory- and command-driven generation,\ninpainting, and layout-conditioned generation. Extensive experiments on the\nCarlaSC and Waymo datasets demonstrate that DynamicCity significantly\noutperforms existing state-of-the-art 4D LiDAR generation methods across\nmultiple metrics. The code will be released to facilitate future research.",
  "paper_id": "http://arxiv.org/abs/2410.18084v1",
  "markdown_content": "# ![[Uncaptioned image]](https://ar5iv.org/html/2410.18084/assets/x1.png)DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\n\nHengwei Bian1,2,\nLingdong Kong1,3\nHaozhe Xie4\nLiang Pan1,‚Ä†,‚Ä°\nYu Qiao1\nZiwei Liu4\n\n1Shanghai AI Laboratory ‚ÄÉ  2Carnegie Mellon University ‚ÄÉ  3National University of Singapore\n\n4S-Lab, Nanyang Technological University\nWork done during an internship at Shanghai AI Laboratory. ‚ÄÉ‚Ä† Corresponding author. ‚ÄÉ‚Ä° Project lead.\n\n###### Abstract\n\nLiDAR scene generation has been developing rapidly recently. However, existing methods primarily focus on generating static and single-frame scenes, overlooking the inherently dynamic nature of real-world driving environments. In this work, we introduce DynamicCity, a novel 4D LiDAR generation framework capable of generating large-scale, high-quality LiDAR scenes that capture the temporal evolution of dynamic environments. DynamicCity mainly consists of two key models. 1) A VAE model for learning HexPlane as the compact 4D representation. Instead of using naive averaging operations, DynamicCity employs a novel Projection Module to effectively compress 4D LiDAR features into six 2D feature maps for HexPlane construction, which significantly enhances HexPlane fitting quality (up to 12.5612.56\\\\mathbf{12.56} mIoU gain). Furthermore, we utilize an Expansion & Squeeze Strategy to reconstruct 3D feature volumes in parallel, which improves both network training efficiency and reconstruction accuracy than naively querying each 3D point (up to 7.057.05\\\\mathbf{7.05} mIoU gain, 2.06‚Äãùê±2.06ùê±\\\\mathbf{2.06x} training speedup, and 70.84%percent70.84\\\\mathbf{70.84\\\\%} memory reduction). 2) A DiT-based diffusion model for HexPlane generation. To make HexPlane feasible for DiT generation, a Padded Rollout Operation is proposed to reorganize all six feature planes of the HexPlane as a squared 2D feature map. In particular, various conditions could be introduced in the diffusion or sampling process, supporting versatile 4D generation applications, such as trajectory- and command-driven generation, inpainting, and layout-conditioned generation. Extensive experiments on the CarlaSC and Waymo datasets demonstrate that DynamicCity significantly outperforms existing state-of-the-art 4D LiDAR generation methods across multiple metrics. The code will be released to facilitate future research.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x2.png)Figure 1: Dynamic LiDAR scene generation fromDynamicCity.\nWe introduce a new LiDAR generation model that generates diverse 4D scenes of large spatial scales (80√ó80√ó6.4‚Äãmeter380806.4superscriptmeter380\\\\times 80\\\\times 6.4~{}\\\\text{meter}^{3}) and long sequential modeling (up to 128128128 frames), enabling a diverse set of downstream applications.\nFor more examples, kindly refer to our Project Page: [https://dynamic-city.github.io](https://dynamic-city.github.io/ \"\").\n\n## 1 Introduction\n\nLiDAR scene generation has garnered growing attention recently, which could benefit various related applications, such as robotics and autonomous driving. Compared to its 3D object generation counterpart, generating LiDAR scenes remains an under-explored field, with many new research challenges such as the presence of numerous moving objects, large-scale scenes, and long temporal sequences (Huang et al., [2021](https://ar5iv.org/html/2410.18084#bib.bib15 \"\"); Xu et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib46 \"\")). For example, in autonomous driving scenarios, a LiDAR scene typically comprises multiple objects from various categories, such as vehicles, pedestrians, and vegetation, captured over a long sequence ( _e.g._, 200200200 frames) spanning a large area ( _e.g._, 80√ó80√ó6.4‚Äãmeters380806.4superscriptmeters380\\\\times 80\\\\times 6.4~{}\\\\text{meters}^{3}). Although in its early stage, LiDAR scene generation holds great potential to enhance the understanding of the 3D world, with wide-reaching and profound implications.\n\nDue to the complexity of LiDAR data, many efficient learning frameworks have been introduced for large-scale 3D scene generation. ùí≥3superscriptùí≥3\\\\mathcal{X}^{3}(Ren et al., [2024b](https://ar5iv.org/html/2410.18084#bib.bib30 \"\")) utilizes a hierarchical voxel diffusion model to generate large outdoor 3D scenes based on VDB data structure. PDD (Liu et al., [2023a](https://ar5iv.org/html/2410.18084#bib.bib18 \"\")) introduces a pyramid discrete diffusion model to progressively generate high-quality 3D scenes. SemCity (Lee et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib17 \"\")) resolves outdoor scene generation by leveraging a triplane diffusion model. Despite achieving impressive LiDAR scene generation, these approaches primarily focus on generating static and single-frame 3D scenes with semantics, and hence fail to effectively capture the dynamic nature of outdoor environments. Recently, a few works (Zheng et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib47 \"\"); Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) have explored 4D LiDAR generation. However, generating high-quality long-sequence 4D LiDAR scenes is still a challenging and open problem (Nakashima & Kurazume, [2021](https://ar5iv.org/html/2410.18084#bib.bib21 \"\"); Nakashima et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib23 \"\")).\n\nIn this work, we propose a novel 4D LiDAR generation framework, DynamicCity, enabling generating large-scale, high-quality dynamic LiDAR scenes. DynamicCity mainly consists of two stages: 1) a VAE network for learning compact 4D representations, _i.e._, HexPlanes (Cao & Johnson, [2023](https://ar5iv.org/html/2410.18084#bib.bib7 \"\"); Fridovich-Keil et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib11 \"\")); 2) a HexPlane Generation model based on DiT (Peebles & Xie, [2023](https://ar5iv.org/html/2410.18084#bib.bib26 \"\")).\n\nVAE for 4D LiDAR.\nGiven a set of 4D LiDAR scenes, DynamicCity first encodes the scene as a 3D feature volume sequence with a 3D backbone. Afterward, we propose a novel Projection Module based on transformer operations to compress the feature volume sequence into six 2D feature maps. In particular, the proposed projection module significantly enhances HexPlane fitting performance, offering an improvement of up to 12.56%percent12.56\\\\mathbf{12.56\\\\%}mIoU compared to conventional averaging operations. After constructing the HexPlane based on the projected six feature planes, we employ an Expansion & Squeeze Strategy (ESS) to decode the HexPlane into multiple 3D feature volumes in parallel. Compared to individually querying each point, ESS further improves HexPlane fitting quality (with up to 7.05%percent7.05\\\\mathbf{7.05\\\\%} mIoU gain), significantly accelerates training speed (by up to 2.06‚Äãùê±2.06ùê±\\\\mathbf{2.06x}), and substantially reduces memory usage (by up to a relative 70.84%percent70.84\\\\mathbf{70.84\\\\%} memory reduction).\n\nDiT for HexPlane.\nUsing the encoded HexPlane, we use a DiT-based framework for generating HexPlane, enabling 4D LiDAR generation. Training a DiT with token sequences naively generated from HexPlane may not achieve optimal quality, as it could overlook spatial and temporal relationships among tokens. Therefore, we introduce the Padded Rollout Operation (PRO), which reorganizes the six feature planes into a square feature map, providing an efficient way to model both spatial and temporal relationships within the token sequence. Leveraging the DiT framework, DynamicCity seamlessly incorporates various conditions to guide the 4D generation process, enabling a wide range of applications including hexplane-conditional generation, trajectory-guided generation, command-driven scene generation, layout-conditioned generation, and dynamic scene inpainting.\n\nOur contributions can be summarized as follows:\n\n- ‚Ä¢\n\n\nWe propose DynamicCity, a high-quality, large-scale 4D LiDAR scene generation framework consisting of a tailored VAE for HexPlane fitting and a DiT-based network for HexPlane generation, which supports various downstream applications.\n\n- ‚Ä¢\n\n\nIn the VAE architecture, DynamicCity employs a novel Projection Module to benefit in encoding 4D LiDAR scenes into compact HexPlanes, significantly improving HexPlane fitting quality. Following, an Expansion &\\\\& Squeeze Strategy is introduced to decode the HexPlanes for reconstruction, which improves both fitting efficiency and accuracy.\n\n- ‚Ä¢\n\n\nBuilding on fitted HexPlanes, we design a Padded Rollout Operation to reorganize HexPlane features into a masked 2D square feature map, enabling compatibility with DiT training.\n\n- ‚Ä¢\n\n\nExtensive experimental results demonstrate that DynamicCity achieves significantly better 4D reconstruction and generation performance than previous SoTA methods across all evaluation metrics, including generation quality, training speed, and memory usage.\n\n\n## 2 Related Work\n\n3D Object Generation has been a central focus in machine learning, with diffusion models playing a significant role in generating realistic 3D structures. Many techniques utilize 2D diffusion mechanisms to synthesize 3D outputs, covering tasks like text-to-3D object generation (Ma et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib20 \"\")), image-to-3D transformations (Wu et al., [2024a](https://ar5iv.org/html/2410.18084#bib.bib43 \"\")), and 3D editing (Rojas et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib31 \"\")). Meanwhile, recent methods bypass the reliance on 2D intermediaries by generating 3D outputs directly in three-dimensional space, utilizing explicit (Alliegro et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib1 \"\")), implicit (Liu et al., [2023b](https://ar5iv.org/html/2410.18084#bib.bib19 \"\")), triplane (Wu et al., [2024b](https://ar5iv.org/html/2410.18084#bib.bib44 \"\")), and latent representations (Ren et al., [2024b](https://ar5iv.org/html/2410.18084#bib.bib30 \"\")). Although these methods demonstrate impressive 3D object generation, they primarily focus on small-scale, isolated objects rather than large-scale, scene-level generation (Hong et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib13 \"\"); Lee et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib17 \"\")). This limitation underscores the need for methods capable of generating complete 3D scenes with complex spatial relationships.\n\nLiDAR Scene Generation extends the scope to larger, more complex environments. Earlier works used VQ-VAE (Zyrianov et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib48 \"\")) and GAN-based models (Caccia et al., [2019](https://ar5iv.org/html/2410.18084#bib.bib5 \"\"); Nakashima et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib23 \"\")) to generate LiDAR scenes. However, recent advancements have shifted towards diffusion models (Xiong et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib45 \"\"); Ran et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib27 \"\"); Nakashima & Kurazume, [2024](https://ar5iv.org/html/2410.18084#bib.bib22 \"\"); Zyrianov et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib48 \"\"); Hu et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib14 \"\"); Nunes et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib24 \"\")), which better handle the complexities of expansive outdoor scenes. For example, (Lee et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib17 \"\")) utilize voxel grids to represent large-scale scenes but often face challenges with empty spaces like skies and fields. While some recent works incorporate temporal dynamics to extend single-frame generation to sequences (Zheng et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib47 \"\"); Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")), they often lack the ability to fully capture the dynamic nature of 4D environments. Thus, these methods typically remain limited to short temporal horizons or struggle with realistic dynamic object modeling, highlighting the gap in generating high-fidelity 4D LiDAR scenes.\n\n4D Generation represents a leap forward, aiming to capture the temporal evolution of scenes. Prior works often leverage video diffusion models (Singer et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib35 \"\"); Blattmann et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib4 \"\")) to generate dynamic sequences (Singer et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib36 \"\")), with some extending to multi-view (Shi et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib33 \"\")) and single-image settings (Rombach et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib32 \"\")) to enhance 3D consistency. In the context of video-conditional generation, approaches such as (Jiang et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib16 \"\"); Ren et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib28 \"\"); [2024a](https://ar5iv.org/html/2410.18084#bib.bib29 \"\")) incorporate image priors for guiding generation processes. While these methods capture certain dynamic aspects, they lack the ability to generate long-term, high-resolution 4D LiDAR scenes with versatile applications. Our method, DynamicCity, fills this gap by introducing a novel 4D generation framework that efficiently captures large-scale dynamic environments, supports diverse generation tasks ( _e.g._, trajectory-guided (Bahmani et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib2 \"\")), command-driven generation), and offers substantial improvements in scene fidelity and temporal modeling.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x3.png)Figure 2: Pipeline of dynamic LiDAR scene generation. Our DynamicCity framework consists of two key procedures: (a) Encoding HexPlane with an VAE architecture ( _cf._ Sec. [4.1](https://ar5iv.org/html/2410.18084#S4.SS1 \"4.1 VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")), and (b) 4D Scene Generation with HexPlane DiT ( _cf._ Sec. [4.2](https://ar5iv.org/html/2410.18084#S4.SS2 \"4.2 Diffusion Transformer for HexPlane ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")).\n\n## 3 Preliminaries\n\nHexPlane(Cao & Johnson, [2023](https://ar5iv.org/html/2410.18084#bib.bib7 \"\"); Fridovich-Keil et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib11 \"\")) is an explicit and structured representation designed for efficient modeling of dynamic 3D scenes, leveraging feature planes to encode spacetime data. A dynamic 3D scene is represented as six 2D feature planes, each aligned with one of the major planes in the 4D spacetime grid. These planes are represented as ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\], comprising a Spatial TriPlane (Chan et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib8 \"\")) with ùí´x‚Äãysubscriptùí´ùë•ùë¶\\\\mathcal{P}\\_{xy}, ùí´x‚Äãzsubscriptùí´ùë•ùëß\\\\mathcal{P}\\_{xz}, and ùí´y‚Äãzsubscriptùí´ùë¶ùëß\\\\mathcal{P}\\_{yz}, and a Spatial-Time TriPlane with ùí´t‚Äãxsubscriptùí´ùë°ùë•\\\\mathcal{P}\\_{tx}, ùí´t‚Äãysubscriptùí´ùë°ùë¶\\\\mathcal{P}\\_{ty}, and ùí´t‚Äãzsubscriptùí´ùë°ùëß\\\\mathcal{P}\\_{tz}. To query the HexPlane at a point ùê©=(t,x,y,z)ùê©ùë°ùë•ùë¶ùëß\\\\mathbf{p}=(t,x,y,z), features are extracted from the corresponding coordinates on each of the six planes and fused into a comprehensive representation. This fused feature vector is then passed through a lightweight network to predict scene attributes for ùê©ùê©\\\\mathbf{p}.\n\nDiffusion Transformers (DiT) (Peebles & Xie, [2023](https://ar5iv.org/html/2410.18084#bib.bib26 \"\")) are diffusion-based generative models using transformers to gradually convert Gaussian noise into data samples through denoising steps. The forward diffusion adds Gaussian noise over time, with a noised sample at step tùë°t given by\nùê±t=Œ±t‚Äãùê±0+1‚àíŒ±t‚Äãœµ,œµ‚àºùí©‚Äã(ùüé,ùêà)formulae-sequencesubscriptùê±ùë°subscriptùõºùë°subscriptùê±01subscriptùõºùë°italic-œµsimilar-toitalic-œµùí©0ùêà\\\\mathbf{x}\\_{t}=\\\\sqrt{\\\\alpha\\_{t}}\\\\mathbf{x}\\_{0}+\\\\sqrt{1-\\\\alpha\\_{t}}\\\\mathbf{\\\\epsilon},\\\\quad\\\\epsilon\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}),\nwhere Œ±tsubscriptùõºùë°\\\\alpha\\_{t} controls the noise schedule. The reverse diffusion, using a neural network œµŒ∏subscriptitalic-œµùúÉ\\\\epsilon\\_{\\\\theta}, aims to denoise ùê±tsubscriptùê±ùë°\\\\mathbf{x}\\_{t} to recover ùê±0subscriptùê±0\\\\mathbf{x}\\_{0}, expressed as:\nùê±t‚àí1=1Œ±t‚Äã(ùê±t‚àí1‚àíŒ±t‚ÄãœµŒ∏‚Äã(ùê±t,t))subscriptùê±ùë°11subscriptùõºùë°subscriptùê±ùë°1subscriptùõºùë°subscriptitalic-œµùúÉsubscriptùê±ùë°ùë°\\\\mathbf{x}\\_{t-1}=\\\\frac{1}{\\\\sqrt{\\\\alpha\\_{t}}}(\\\\mathbf{x}\\_{t}-\\\\sqrt{1-\\\\alpha\\_{t}}\\\\epsilon\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)).\nNew samples are generated by repeating this reverse process.\n\n## 4 Our Approach\n\nDynamicCity strives to generate dynamic 3D LiDAR scenes with semantic information, which mainly consists of a VAE for 4D LiDAR encoding using HexPlane (Cao & Johnson, [2023](https://ar5iv.org/html/2410.18084#bib.bib7 \"\"); Fridovich-Keil et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib11 \"\")) (Sec. [4.1](https://ar5iv.org/html/2410.18084#S4.SS1 \"4.1 VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")), and a DiT for HexPlane generation (Sec. [4.2](https://ar5iv.org/html/2410.18084#S4.SS2 \"4.2 Diffusion Transformer for HexPlane ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")). Given a 4D LiDAR scene, _i.e._, a dynamic 3D LiDAR sequence ùêê‚àà‚ÑùT√óX√óY√óZ√óCùêêsuperscript‚Ñùùëáùëãùëåùëçùê∂\\\\mathbf{Q}\\\\in\\\\mathbb{R}^{T\\\\times X\\\\times Y\\\\times Z\\\\times C}, where TùëáT, XùëãX, YùëåY, ZùëçZ, and Cùê∂C denote the sequence length, height, width, depth, and channel size, respectively, the VAE first aims to encode an efficient 4D representation, HexPlane ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\], which is then decoded for reconstructing 4D scenes with semantics. After obtaining HexPlane embeddings, DynamicCity leverages a DiT-based framework for 4D LiDAR generation. Diverse conditions could be introduced into the generation process, facilitating a range of downstream applications (Sec. [4.3](https://ar5iv.org/html/2410.18084#S4.SS3 \"4.3 Downstream Applications ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")). The overview of the proposed DynamicCity pipeline is illustrated in Fig. [2](https://ar5iv.org/html/2410.18084#S2.F2 \"Figure 2 ‚Ä£ 2 Related Work ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\").\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x4.png)Figure 3: VAE for Encoding 4D LiDAR Scenes.\nWe use HexPlane ‚Ñã‚Ñã\\\\mathcal{H} as the 4D representation.\nfŒ∏subscriptùëìùúÉf\\_{\\\\theta} and gœïsubscriptùëîitalic-œïg\\_{\\\\phi} are convolution-based networks with downsampling and upsampling operations, respectively.\nh‚Äã(‚ãÖ)‚Ñé‚ãÖh(\\\\cdot) denotes the projection network based on transformer modules.\n\n### 4.1 VAE for 4D LiDAR Scenes\n\nEncoding HexPlane.\nAs shown in Fig. [3](https://ar5iv.org/html/2410.18084#S4.F3 \"Figure 3 ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the VAE could encode a 4D LiDAR scene ùêêùêê\\\\mathbf{Q} as a HexPlane ‚Ñã‚Ñã\\\\mathcal{H}. It first utilizes a shared 3D convolutional feature extractor ùíáŒ∏‚Äã(‚ãÖ)subscriptùíáùúÉ‚ãÖ\\\\bm{f}\\_{\\\\theta}(\\\\cdot) to extract and downsample features from each LiDAR frame, resulting in a feature volume sequence ùí≥t‚Äãx‚Äãy‚Äãz‚àà‚ÑùT√óX√óY√óZ√óCsubscriptùí≥ùë°ùë•ùë¶ùëßsuperscript‚Ñùùëáùëãùëåùëçùê∂\\\\mathcal{X}\\_{txyz}\\\\in\\\\mathbb{R}^{T\\\\times X\\\\times Y\\\\times Z\\\\times C}.\n\nTo encode and compress ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz} into compact 2D feature maps of ‚Ñã‚Ñã\\\\mathcal{H}, we propose a novel Projection Module with multiple projection networks ùíâ‚Äã(‚ãÖ)ùíâ‚ãÖ\\\\bm{h}(\\\\cdot). To project a high-dimensional feature input ùí≥in‚àà‚ÑùDk1√óDk2√ó‚ãØ√óDkn√óDr1√óDr2√ó‚ãØ√óDrm√óCsubscriptùí≥insuperscript‚Ñùsuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõsuperscriptsubscriptùê∑r1superscriptsubscriptùê∑r2‚ãØsuperscriptsubscriptùê∑rùëöùê∂\\\\mathcal{X}\\_{\\\\text{in}}\\\\in\\\\mathbb{R}^{{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}}\\\\times{D\\_{\\\\text{r}}^{1}\\\\times D\\_{\\\\text{r}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{r}}^{m}}\\\\times C} as a lower-dimensional feature output ùí≥out‚àà‚ÑùDk1√óDk2√ó‚ãØ√óDkn√óCsubscriptùí≥outsuperscript‚Ñùsuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõùê∂\\\\mathcal{X}\\_{\\\\text{out}}\\\\in\\\\mathbb{R}^{{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}}\\\\times C}, the projection network ùíâSr‚Äã(‚ãÖ)subscriptùíâsubscriptùëÜr‚ãÖ\\\\bm{h}\\_{S\\_{\\\\text{r}}}(\\\\cdot) first reshapes ùí≥i‚Äãnsubscriptùí≥ùëñùëõ\\\\mathcal{X}\\_{in} into a 3-dimensional feature ùí≥Sk‚ÄãSr‚Ä≤‚àà‚ÑùSk√óSr√óCsubscriptsuperscriptùí≥‚Ä≤subscriptùëÜksubscriptùëÜrsuperscript‚ÑùsubscriptùëÜksubscriptùëÜrùê∂\\\\mathcal{X}^{\\\\prime}\\_{S\\_{\\\\text{k}}S\\_{\\\\text{r}}}\\\\in\\\\mathbb{R}^{S\\_{\\\\text{k}}\\\\times S\\_{\\\\text{r}}\\\\times C} by grouping the dimensions into the two new dimensions, _i.e._, SksubscriptùëÜkS\\_{\\\\text{k}} the dimension that will be kept, and SrsubscriptùëÜrS\\_{\\\\text{r}} the dimension that will be reduced, where Sk=Dk1√óDk2√ó‚ãØ√óDknsubscriptùëÜksuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõS\\_{\\\\text{k}}=D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}, and Sr=Dr1√óDr2√ó‚ãØ√óDrmsubscriptùëÜrsuperscriptsubscriptùê∑r1superscriptsubscriptùê∑r2‚ãØsuperscriptsubscriptùê∑rùëöS\\_{\\\\text{r}}=D\\_{\\\\text{r}}^{1}\\\\times D\\_{\\\\text{r}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{r}}^{m}. Afterward, ùíâSr‚Äã(‚ãÖ)subscriptùíâsubscriptùëÜr‚ãÖ\\\\bm{h}\\_{S\\_{\\\\text{r}}}(\\\\cdot) utilizes a transformer-based operation to project the reshaped feature ùí≥Sk‚ÄãSr‚Ä≤subscriptsuperscriptùí≥‚Ä≤subscriptùëÜksubscriptùëÜr\\\\mathcal{X}^{\\\\prime}\\_{S\\_{\\\\text{k}}S\\_{\\\\text{r}}} to ùí≥Sk‚Ä≤‚Ä≤‚àà‚ÑùSk√óCsubscriptsuperscriptùí≥‚Ä≤‚Ä≤subscriptùëÜksuperscript‚ÑùsubscriptùëÜkùê∂\\\\mathcal{X}^{\\\\prime\\\\prime}\\_{S\\_{\\\\text{k}}}\\\\in\\\\mathbb{R}^{S\\_{\\\\text{k}}\\\\times C}, which is then reshaped to the expected lower-dimensional feature output ùí≥outsubscriptùí≥out\\\\mathcal{X}\\_{\\\\text{out}}. Formally, the projection network is formulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùí≥out{Dk1√óDk2√ó‚ãØ√óDkn}√óC=ùíâSr‚Äã(ùí≥in{Dk1√óDk2√ó‚ãØ√óDkn}√ó{Dr1√óDr2√ó‚ãØ√óDrm}√óC),superscriptsubscriptùí≥outsuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõùê∂subscriptùíâsubscriptùëÜrsuperscriptsubscriptùí≥insuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõsuperscriptsubscriptùê∑r1superscriptsubscriptùê∑r2‚ãØsuperscriptsubscriptùê∑rùëöùê∂\\\\mathcal{X}\\_{\\\\text{out}}^{\\\\{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}\\\\}\\\\times C}=\\\\bm{h}\\_{S\\_{\\\\text{r}}}(\\\\mathcal{X}\\_{\\\\text{in}}^{\\\\{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}\\\\}\\\\times\\\\{D\\_{\\\\text{r}}^{1}\\\\times D\\_{\\\\text{r}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{r}}^{m}\\\\}\\\\times C})~{}, |  | (1) |\n\nwhere their feature dimensions are added as the upscript for ùí≥insuperscriptùí≥in\\\\mathcal{X}^{\\\\text{in}} and ùí≥outsuperscriptùí≥out\\\\mathcal{X}^{\\\\text{out}}, respectively.\n\nTo construct the spatial feature planes ùí´x‚Äãysubscriptùí´ùë•ùë¶\\\\mathcal{P}\\_{xy}, ùí´x‚Äãzsubscriptùí´ùë•ùëß\\\\mathcal{P}\\_{xz}, and ùí´y‚Äãzsubscriptùí´ùë¶ùëß\\\\mathcal{P}\\_{yz}, the Projection Module first generate the XYZ Feature Volume ùí≥x‚Äãy‚Äãz=ùíât‚Äã(ùí≥t‚Äãx‚Äãy‚Äãz)subscriptùí≥ùë•ùë¶ùëßsubscriptùíâùë°subscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{xyz}=\\\\bm{h}\\_{t}(\\\\mathcal{X}\\_{txyz}). Rather than directly access the heavy feature volume sequence ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz}, ùíâz‚Äã(‚ãÖ)subscriptùíâùëß‚ãÖ\\\\bm{h}\\_{z}(\\\\cdot), ùíây‚Äã(‚ãÖ)subscriptùíâùë¶‚ãÖ\\\\bm{h}\\_{y}(\\\\cdot), and ùíâx‚Äã(‚ãÖ)subscriptùíâùë•‚ãÖ\\\\bm{h}\\_{x}(\\\\cdot) are applied to ùí≥x‚Äãy‚Äãzsubscriptùí≥ùë•ùë¶ùëß\\\\mathcal{X}\\_{xyz} for reducing the spatial dimensions of ùí≥x‚Äãy‚Äãzsubscriptùí≥ùë•ùë¶ùëß\\\\mathcal{X}\\_{xyz} along the z-axis, y-axis, and x-axis, respectively. The temporal feature planes ùí´t‚Äãx,ùí´t‚Äãy,subscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty}, and ùí´t‚Äãzsubscriptùí´ùë°ùëß\\\\mathcal{P}\\_{tz} are directly obtained from ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz} by simultaneously removing two spatial dimensions with ùíâz‚Äãy‚Äã(‚ãÖ),ùíâx‚Äãz‚Äã(‚ãÖ)subscriptùíâùëßùë¶‚ãÖsubscriptùíâùë•ùëß‚ãÖ\\\\bm{h}\\_{zy}(\\\\cdot),\\\\bm{h}\\_{xz}(\\\\cdot), and ùíâx‚Äãy‚Äã(‚ãÖ)subscriptùíâùë•ùë¶‚ãÖ\\\\bm{h}\\_{xy}(\\\\cdot), respectively. Consequently, we could construct the HexPlane ‚Ñã‚Ñã\\\\mathcal{H} based on the encoded six feature planes, including ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,subscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty}, and ùí´t‚Äãzsubscriptùí´ùë°ùëß\\\\mathcal{P}\\_{tz}.\n\nDecoding HexPlane.\nBased on the HexPlane ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\], we employ an Expansion & Squeeze Strategy (ESS), which could efficiently recover the feature volume sequence by decoding the feature planes in parallel for 4D LiDAR scene reconstruction. ESS first duplicates and expands each feature plane ùí´ùí´\\\\mathcal{P} to match the shape of ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz}, resulting in the list of six feature volume sequences: {ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPy‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãx,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãz}superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë¶ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë•superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùëß\\\\{\\\\mathcal{X}\\_{txyz}^{{P}\\_{xy}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{xz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{yz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tx}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{ty}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tz}}\\\\}. Afterward, ESS squeezes the corresponding six expanded feature volumes with Hadamard Product:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤=‚àèHadamard{ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPy‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãx,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãz}.subscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëßsubscriptproductHadamardsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë¶ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë•superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùëß\\\\mathcal{X}^{\\\\prime}\\_{txyz}=\\\\prod\\_{\\\\text{Hadamard}}{\\\\{\\\\mathcal{X}\\_{txyz}^{{P}\\_{xy}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{xz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{yz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tx}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{ty}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tz}}\\\\}}~{}. |  | (2) |\n\nSubsequently, the convolutional network gœï‚Äã(‚ãÖ)subscriptùëîitalic-œï‚ãÖg\\_{\\\\phi}(\\\\cdot) is employed to upsample the volumes for generating dense semantic predictions ùêê‚Ä≤superscriptùêê‚Ä≤\\\\mathbf{Q}^{\\\\prime}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùêê‚Ä≤=gœï‚Äã(Concat‚Äã(ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤,PE‚Äã(Pos‚Äã(ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤)))),superscriptùêê‚Ä≤subscriptùëîitalic-œïConcatsubscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëßPEPossubscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëß\\\\mathbf{Q}^{\\\\prime}=g\\_{\\\\phi}(\\\\texttt{Concat}(\\\\mathcal{X}^{\\\\prime}\\_{txyz},\\\\texttt{PE}(\\\\texttt{Pos}(\\\\mathcal{X}^{\\\\prime}\\_{txyz}))))~{}, |  | (3) |\n\nwhere Concat‚Äã(‚ãÖ)Concat‚ãÖ\\\\texttt{Concat}(\\\\cdot) and PE‚Äã(‚ãÖ)PE‚ãÖ\\\\texttt{PE}(\\\\cdot) denote the concatenation and sinusoidal positional encoding, respectively. Pos‚Äã(‚ãÖ)Pos‚ãÖ\\\\texttt{Pos}(\\\\cdot) returns the 4D position ùê©ùê©\\\\mathbf{p} of each voxel within the 4D feature volume ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤subscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëß\\\\mathcal{X}^{\\\\prime}\\_{txyz}.\n\nOptimization.\nThe VAE is trained with a combined loss ‚ÑíVAEsubscript‚ÑíVAE\\\\mathcal{L}\\_{\\\\text{VAE}}, including a cross-entropy loss, a Lov√°sz-softmax loss (Berman et al., [2018](https://ar5iv.org/html/2410.18084#bib.bib3 \"\")), and a Kullback-Leibler (KL) divergence loss:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíVAE=‚ÑíCE‚Äã(ùêê,ùêê‚Ä≤)+Œ±‚Äã‚ÑíLov‚Äã(ùêê,ùêê‚Ä≤)+Œ≤‚Äã‚ÑíKL‚Äã(‚Ñã,ùí©‚Äã(ùüé,ùêà)),subscript‚ÑíVAEsubscript‚ÑíCEùêêsuperscriptùêê‚Ä≤ùõºsubscript‚ÑíLovùêêsuperscriptùêê‚Ä≤ùõΩsubscript‚ÑíKL‚Ñãùí©0ùêà\\\\mathcal{L}\\_{\\\\text{VAE}}=\\\\mathcal{L}\\_{\\\\text{CE}}(\\\\mathbf{Q},\\\\mathbf{Q}^{\\\\prime})+\\\\alpha\\\\mathcal{L}\\_{\\\\text{Lov}}(\\\\mathbf{Q},\\\\mathbf{Q}^{\\\\prime})+\\\\beta\\\\mathcal{L}\\_{\\\\text{KL}}(\\\\mathcal{H},\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}))~{}, |  | (4) |\n\nwhere ‚ÑíCEsubscript‚ÑíCE\\\\mathcal{L}\\_{\\\\text{CE}} is the cross-entropy loss between the input ùêêùêê\\\\mathbf{Q} and prediction ùêê‚Ä≤superscriptùêê‚Ä≤\\\\mathbf{Q}^{\\\\prime}, ‚ÑíLovsubscript‚ÑíLov\\\\mathcal{L}\\_{\\\\text{Lov}} is the Lov√°sz-softmax loss, and ‚ÑíKLsubscript‚ÑíKL\\\\mathcal{L}\\_{\\\\text{KL}} represents the KL divergence between the latent representation ‚Ñã‚Ñã\\\\mathcal{H} and the prior Gaussian distribution ùí©‚Äã(ùüé,ùêà)ùí©0ùêà\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}). Note that the KL divergence is computed for each feature plane of ‚Ñã‚Ñã\\\\mathcal{H} individually, and the term ‚ÑíKLsubscript‚ÑíKL\\\\mathcal{L}\\_{\\\\text{KL}} refers to the combined divergence over all six planes.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x5.png)Figure 4: Padded Rollout\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x6.png)Figure 5: Condition Injection for DiT\n\n### 4.2 Diffusion Transformer for HexPlane\n\nAfter training the VAE, 4D semantic scenes can be embedded as HexPlane ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\]. Building upon ‚Ñã‚Ñã\\\\mathcal{H}, we aim to leverage a DiT (Peebles & Xie, [2023](https://ar5iv.org/html/2410.18084#bib.bib26 \"\")) model DœÑsubscriptùê∑ùúèD\\_{\\\\tau} to generate novel HexPlane, which could be further decoded as novel 4D scenes (see Fig. [2](https://ar5iv.org/html/2410.18084#S2.F2 \"Figure 2 ‚Ä£ 2 Related Work ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")(b)). However, training a DiT using token sequences naively generated from each feature plane of HexPlane could not guarantee high generation quality, mainly due to the absence of modeling spatial and temporal relations among the tokens.\n\nPadded Rollout Operation.\nGiven that the feature planes of HexPlane may share spatial or temporal dimensions, we employ the Padded Rollout Operation (PRO) to systematically arrange all six planes into a unified square feature map, incorporating zero paddings in the uncovered corner areas. As shown in Fig. [5](https://ar5iv.org/html/2410.18084#S4.F5 \"Figure 5 ‚Ä£ 4.1 VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the dimension of the 2D square feature map is (XdX+ZdZ+TdT)ùëãsubscriptùëëùëãùëçsubscriptùëëùëçùëásubscriptùëëùëá(\\\\frac{X}{d\\_{X}}+\\\\frac{Z}{d\\_{Z}}+\\\\frac{T}{d\\_{T}}), which minimizes the area for padding, where dXsubscriptùëëùëãd\\_{X}, dZsubscriptùëëùëçd\\_{Z}, and dTsubscriptùëëùëád\\_{T} represent the downsampling rates along the X, Z, and T axes, respectively. Subsequently, we follow DiT to first ‚Äúpatchify‚Äù the constructed 2D feature map, converting it into a sequence of N=((XdX+ZdZ+TdT)/p)2ùëÅsuperscriptùëãsubscriptùëëùëãùëçsubscriptùëëùëçùëásubscriptùëëùëáùëù2N=((\\\\frac{X}{d\\_{X}}+\\\\frac{Z}{d\\_{Z}}+\\\\frac{T}{d\\_{T}})/p)^{2} tokens, where pùëùp is the patch size, chosen so each token holds information from one feature plane. Following patchification, we apply the frequency-based positional embeddings to all tokens similar to DiT. Note that tokens corresponding to padding areas are excluded from the diffusion process. Consequently, the proposed PRO offers an efficient method for modeling spatial and temporal relationships within the token sequence.\n\nConditional Generation.\nDiT enables conditional generation through the use of Classifier-Free Guidance (CFG) (Ho & Salimans, [2022](https://ar5iv.org/html/2410.18084#bib.bib12 \"\")).\nTo incorporate conditions into the generation process, we designed two branches for condition insertion (see Fig. [5](https://ar5iv.org/html/2410.18084#S4.F5 \"Figure 5 ‚Ä£ 4.1 VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")).\nFor any condition cùëêc, we use the adaLN-Zero technique from DiT, generating scale and shift parameters from cùëêc and injecting them before and after the attention and feed-forward layers.\nTo handle the complexity of image-based conditions, we add a cross-attention block to better integrate the image condition into the DiT block.\n\n### 4.3 Downstream Applications\n\nBeyond unconditional 4D scene generation, we explore novel applications of DynamicCity through conditional generation and HexPlane manipulation.\n\nFirst, we showcase versatile uses of image conditions in the conditional generation pipeline: 1) HexPlane: By autoregressively generating the HexPlane, we extend scene duration beyond temporal constraints. 2) Layout: We control vehicle placement and dynamics in 4D scenes using conditions learned from bird‚Äôs-eye view sketches.\n\nTo manage ego vehicle motion, we introduce two numerical conditioning methods: 3) Command: Controls general ego vehicle motion via instructions. 4) Trajectory: Enables fine-grained control through specific trajectory inputs.\n\nInspired by SemCity (Lee et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib17 \"\")), we also manipulate the HexPlane during sampling to: 5) Inpaint: Edit 4D scenes by masking HexPlane regions and guiding sampling with the masked areas. For more details, kindly refer to Sec. [A.5](https://ar5iv.org/html/2410.18084#A1.SS5 \"A.5 Downstream Applications ‚Ä£ Appendix A A Additional Implementation Details ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") in the Appendix.\n\nTable 1: Comparisons of 4D Scene Reconstruction. We report the mIoU scores of OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) and our DynamicCity framework on the CarlaSC, Occ3D-Waymo, and Occ3D-nuScenes datasets, respectively, under different resolutions and sequence lengths. Symbol ‚Ä† denotes score reported in the OccSora paper. Other scores are reproduced using the official code.\n\n| Dataset | #Classes | Resolution | #Frames | OccSora | Ours |\n| --- | --- | --- | --- | --- | --- |\n| (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) | (DynamicCity) |\n| --- | --- |\n| CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) | 10 | 128√ó\\\\times128√ó\\\\times8 | 4 | 41.01% | 79.61% (+38.6%) |\n| 10 | 128√ó\\\\times128√ó\\\\times8 | 8 | 39.91% | 76.18% (+36.3%) |\n| 10 | 128√ó\\\\times128√ó\\\\times8 | 16 | 33.40% | 74.22% (+40.8%) |\n| 10 | 128√ó\\\\times128√ó\\\\times8 | 32 | 28.91% | 59.31% (+30.4%) |\n| Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) | 9 | 200√ó\\\\times200√ó\\\\times16 | 16 | 36.38% | 68.18% (+31.8%) |\n| Occ3D-nuScenes(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) | 11 | 200√ó\\\\times200√ó\\\\times16 | 16 | 13.70% | 56.93% (+43.2%) |\n| 11 | 200√ó\\\\times200√ó\\\\times16 | 32 | 13.51% | 42.60% (+29.1%) |\n| 17 | 200√ó\\\\times200√ó\\\\times16 | 32 | 13.41% | 40.79% (+27.3%) |\n| 17 | 200√ó\\\\times200√ó\\\\times16 | 32 | 27.40%‚Ä† | 40.79% (+13.4%) |\n\nTable 2: Comparisons of 4D Scene Generation. We report the Inception Score (IS), Fr√©chet Inception Distance (FID), Kernel Inception Distance (KID), and the Precision (P) and Recall (R) rates of SemCity (Lee et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib17 \"\")), OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")), and our DynamicCity framework on the CarlaSC and Occ3D-Waymo datasets, respectively, in both the 2D and 3D spaces.\n\n| Dataset | Method | #Frames | Metric2D2D{}^{{\\\\color\\[rgb\\]{0.890625,0.421875,0.76171875}\\\\textbf{2D}}} | Metric3D3D{}^{{\\\\color\\[rgb\\]{0.5,0.625,0.8828125}\\\\textbf{3D}}} |\n| --- | --- | --- | --- | --- |\n| IS2D‚Üë‚Üë\\\\uparrow | FID2D‚Üì‚Üì\\\\downarrow | KID2D‚Üì‚Üì\\\\downarrow | P2D‚Üë‚Üë\\\\uparrow | R2D‚Üë‚Üë\\\\uparrow | IS3D‚Üë‚Üë\\\\uparrow | FID3D‚Üì‚Üì\\\\downarrow | KID3D‚Üì‚Üì\\\\downarrow | P3D‚Üë‚Üë\\\\uparrow | R3D‚Üë‚Üë\\\\uparrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) | OccSora | 16 | 2.492 | 25.08 | 0.013 | 0.115 | 0.008 | 2.257 | 1559 | 52.72 | 0.380 | 0.151 |\n| Ours | 2.498 | 10.95 | 0.002 | 0.238 | 0.066 | 2.331 | 354.2 | 19.10 | 0.460 | 0.170 |\n| Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) | OccSora | 16 | 1.926 | 82.43 | 0.094 | 0.227 | 0.014 | 3.129 | 3140 | 12.20 | 0.384 | 0.001 |\n| Ours | 1.945 | 7.138 | 0.003 | 0.617 | 0.096 | 3.206 | 1806 | 77.71 | 0.494 | 0.026 |\n\n## 5 Experiments\n\n### 5.1 Experimental Details\n\nDatasets.\nWe train the proposed model on the 1Occ3D-Waymo, 2Occ3D-nuScenes, and 3CarlaSC datasets. The former two from Occ3D(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) are derived from Waymo(Sun et al., [2020](https://ar5iv.org/html/2410.18084#bib.bib37 \"\")) and nuScenes(Caesar et al., [2020](https://ar5iv.org/html/2410.18084#bib.bib6 \"\")), where LiDAR point clouds have been completed and voxelized to form occupancy data. Each occupancy scene has a resolution of 200√ó200√ó1620020016200\\\\times 200\\\\times 16, covering a region centered on the ego vehicle, extending 404040 meters in all directions and 6.46.46.4 meters vertically. The CarlaSC dataset (Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) is a synthetic occupancy dataset, with a scene resolution of 128√ó128√ó81281288128\\\\times 128\\\\times 8, covering a region 25.625.625.6 meters around the ego vehicle, with a height of 333 meters.\n\nImplementation Details.\nOur experiments are conducted using eight NVIDIA A100-80G GPUs. The global batch size used for training the VAE is 888, while the global batch size for training the DiT is 128128128. Our latent HexPlane ‚Ñã‚Ñã\\\\mathcal{H} is compressed to half the size of the input ùêêùêê\\\\mathbf{Q} in each dimension, with the latent channels C=16ùê∂16C=16. The weight for the Lov√°sz-softmax and KL terms are set to 111 and 0.0050.0050.005, respectively. The learning rate for the VAE is 10‚àí3superscript10310^{-3}, while the learning rate for the DiT is 10‚àí4superscript10410^{-4}.\n\nEvaluation Metrics.\nThe mean intersection over union (mIoU) metric is used to evaluate the reconstruction results of VAE. For DiT, Inception Score, FID, KID, Precision, and Recall are calculated for evaluation. Specifically, we follow prior work (Lee et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib17 \"\"); Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) by rendering 3D scenes into 2D images and utilizing conventional 2D evaluation pipelines for assessment. Additionally, we train the 3D Encoder to directly extract features from the 3D data and calculate the metrics. For more details, kindly refer to Sec. [A.2](https://ar5iv.org/html/2410.18084#A1.SS2 \"A.2 DiT Evaluation Metrics ‚Ä£ Appendix A A Additional Implementation Details ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") in the Appendix.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x7.png)Figure 6: Dynamic Scene Generation Results. We provide unconditional generation scenes from the 111st, 888th, and 161616th frames on Occ3D-Waymo (Left) and CarlaSC (Right), respectively. Kindly refer to the Appendix for complete sequential scenes and longer temporal modeling examples.\n\n### 5.2 4D Scene Reconstruction & Generation\n\nReconstruction.\nTo evaluate the effectiveness of the proposed VAE in encoding the 4D LiDAR sequence, we compare it with OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) using the CarlaSC, Occ3D-Waymo, and Occ3D-nuScenes datasets. As shown in Tab. [1](https://ar5iv.org/html/2410.18084#S4.T1 \"Table 1 ‚Ä£ 4.3 Downstream Applications ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), DynamicCity outperforms OccSora on these datasets, achieving mIoU improvements of 38.6%, 31.8%, and 43.2% respectively, when the input number of frames is 16. These results highlight the superior performance of the proposed VAE.\n\nGeneration.\nTo demonstrate the effectiveness of DynamicCity in 4D scene generation, we compare the generation results with OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) on the Occ3D-Waymo and CarlaSC datasets. As shown in Tab. [2](https://ar5iv.org/html/2410.18084#S4.T2 \"Table 2 ‚Ä£ 4.3 Downstream Applications ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the proposed method outperforms OccSora in terms of perceptual metrics in both 2D and 3D spaces. These results show that our model excels in both generation quality and diversity. Fig. [6](https://ar5iv.org/html/2410.18084#S5.F6 \"Figure 6 ‚Ä£ 5.1 Experimental Details ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") and Fig. [15](https://ar5iv.org/html/2410.18084#A3.F15 \"Figure 15 ‚Ä£ C.6 Comparisons with OccSora ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") show the 4D scene generation results, demonstrating that our model is capable of generating large dynamic scenes in both real-world and synthetic datasets. Our model not only exhibits the ability to generate moving scenes with static semantics shifting as a whole, but it is also capable of generating dynamic elements such as vehicles and pedestrians.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x8.png)Figure 7: Dynamic Scene Generation Applications. We demonstrate the capability of our model on a diverse set of downstream tasks. We show the 111st, 888th, and 161616th frames for simplicity. Kindly refer to the Appendix for complete sequential scenes and longer temporal modeling examples.\n\nApplications.\nFig. [7](https://ar5iv.org/html/2410.18084#S5.F7 \"Figure 7 ‚Ä£ 5.2 4D Scene Reconstruction & Generation ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") presents the results of our downstream applications. In tasks that involve inserting conditions into the DiT, such as command-conditional generation, trajectory-conditional generation, and layout-conditional generation, our model demonstrates the ability to generate reasonable scenes and dynamic elements while following the prompt to a certain extent. Additionally, the inpainting method proves that our HexPlane has explicit spatial meaning, enabling direct modifications within the scene by editing the HexPlane during inference.\n\n### 5.3 Ablation Studies\n\nWe conduct ablation studies to demonstrate the effectiveness of the components of DynamicCity.\n\nTable 3: Ablation Study on VAE Network Structures. We report the mIoU scores, training time (second-per-iteration), and training-time memory consumption (VRAM) of different Encoder and Decoder configurations on CarlaSC and Occ3D-Waymo, respectively. Note that ‚ÄúESS‚Äù denotes ‚ÄúExpansion & Squeeze‚Äù. The best and second-best values are in bold and underlined.\n\n| Encoder | Decoder | CarlaSC | Occ3D-Waymo |\n| --- | --- | --- | --- |\n| mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow | mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow |\n| --- | --- | --- | --- | --- | --- |\n| Average Pooling | Query | 60.97% | 0.236 | 12.46 | 49.37% | 1.563 | 69.66 |\n| Average Pooling | ESS | 68.02% | 0.143 | 4.27 | 55.72% | 0.758 | 20.31 |\n| Projection | Query | 68.73% | 0.292 | 13.59 | 61.93% | 2.128 | 73.15 |\n| Projection | ESS | 74.22% | 0.205 | 5.92 | 62.57% | 1.316 | 25.92 |\n\nTable 4: Ablation Study on HexPlane Downsampling (D.S.) Rates. We report the compression ratios (C.R.), mIoU scores, training speed (seconds per iteration), and training-time memory consumption on CarlaSC and Occ3D-Waymo. The best and second-best values are in bold and underlined.\n\n| D.S. Rates | CarlaSC | Occ3D-Waymo |\n| --- | --- | --- |\n| dTsubscriptùëëTd\\_{\\\\text{T}} | dXsubscriptùëëXd\\_{\\\\text{X}} | dYsubscriptùëëYd\\_{\\\\text{Y}} | dZsubscriptùëëZd\\_{\\\\text{Z}} | C.R.‚Üë‚Üë\\\\uparrow | mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow | C.R.‚Üë‚Üë\\\\uparrow | mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | 1 | 1 | 1 | 5.78% | 84.67% | 1.149 | 21.63 | Out-of-Memory | >80 |\n| 1 | 2 | 2 | 1 | 17.96% | 76.05% | 0.289 | 8.49 | 38.42% | 63.30% | 1.852 | 32.82 |\n| 2 | 2 | 2 | 2 | 23.14% | 74.22% | 0.205 | 5.92 | 48.25% | 62.37% | 0.935 | 24.9 |\n| 2 | 4 | 4 | 2 | 71.86% | 65.15% | 0.199 | 4.00 | 153.69% | 58.13% | 0.877 | 22.30 |\n\nTable 5: Ablation Study on Organizing HexPlane as Image Tokens. We report the Inception Score (IS), Fr√©chet Inception Distance (FID), Kernel Inception Distance (KID), and the Precision (P) and Recall (R) rates on CarlaSC. The best values are highlighted in bold.\n\n| Method | Metric2D2D{}^{{\\\\color\\[rgb\\]{0.890625,0.421875,0.76171875}\\\\textbf{2D}}} | Metric3D3D{}^{{\\\\color\\[rgb\\]{0.5,0.625,0.8828125}\\\\textbf{3D}}} |\n| --- | --- | --- |\n| IS2D‚Üë‚Üë\\\\uparrow | FID2D‚Üì‚Üì\\\\downarrow | KID2D‚Üì‚Üì\\\\downarrow | P2D‚Üë‚Üë\\\\uparrow | R2D‚Üë‚Üë\\\\uparrow | IS3D‚Üë‚Üë\\\\uparrow | FID3D‚Üì‚Üì\\\\downarrow | KID3D‚Üì‚Üì\\\\downarrow | P3D‚Üë‚Üë\\\\uparrow | R3D‚Üë‚Üë\\\\uparrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Direct Unfold | 2.496 | 205.0 | 0.248 | 0.000 | 0.000 | 2.269 | 9110 | 723.7 | 0.173 | 0.043 |\n| Vertical Concatenation | 2.476 | 12.79 | 0.003 | 0.191 | 0.042 | 2.305 | 623.2 | 26.67 | 0.424 | 0.159 |\n| Padded Rollout | 2.498 | 10.96 | 0.002 | 0.238 | 0.066 | 2.331 | 354.2 | 19.10 | 0.460 | 0.170 |\n\nVAE.\nThe effectiveness of the VAE is driven by two key innovations: Projection Module and Expansion & Squeeze Strategy (ESS). As shown in Tab. [3](https://ar5iv.org/html/2410.18084#S5.T3 \"Table 3 ‚Ä£ 5.3 Ablation Studies ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the proposed Projection Module substantially improves HexPlane fitting performance, delivering up to a 12.56% increase in mIoU compared to traditional averaging operations. Additionally, compared to querying each point individually, ESS enhances HexPlane fitting quality with up to a 7.05% mIoU improvement, significantly boosts training speed by up to 2.06x, and reduces memory usage by a substantial 70.84%.\n\nHexPlane Dimensions.\nThe dimensions of HexPlane have a direct impact on both training efficiency and reconstruction quality. Tab. [4](https://ar5iv.org/html/2410.18084#S5.T4 \"Table 4 ‚Ä£ 5.3 Ablation Studies ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") provides a comparison of various downsample rates applied to the original HexPlane dimensions, which are 16 √ó\\\\times 128 √ó\\\\times 128 √ó\\\\times 8 for CarlaSC and 16 √ó\\\\times 200 √ó\\\\times 200 √ó\\\\times 16 for Occ3D-Waymo. As the downsampling rates increase, both the compression rate and training efficiency improve significantly, but the reconstruction quality, measured by mIoU, decreases.\nTo achieve the optimal balance between training efficiency and reconstruction quality, we select a downsampling rate of dT=dX=dY=dZ=2subscriptùëëTsubscriptùëëXsubscriptùëëYsubscriptùëëZ2d\\_{\\\\text{T}}=d\\_{\\\\text{X}}=d\\_{\\\\text{Y}}=d\\_{\\\\text{Z}}=2.\n\nPadded Rollout Operation.\nWe compare the Padded Rollout Operation with different strategies for obtaining image tokens: 1) Direct Unfold: directly unfolding the six planes into patches and concatenating them; 2) Vertical Concat: vertically concatenating the six planes without aligning dimensions during the rollout process. As shown in Tab. [5](https://ar5iv.org/html/2410.18084#S5.T5 \"Table 5 ‚Ä£ 5.3 Ablation Studies ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), Padded Rollout Operation (PRO) efficiently models spatial and temporal relationships in the token sequence, achieving optimal generation quality.\n\n## 6 Conclusion\n\nWe present DynamicCity, a framework for high-quality 4D LiDAR scene generation that captures the temporal dynamics of real-world environments. Our method introduces HexPlane, a compact 4D representation generated using a VAE with a Projection Module, alongside an Expansion & Squeeze Strategy to enhance reconstruction efficiency and accuracy. Additionally, our Masked Rollout Operation reorganizes HexPlane features for DiT-based diffusion, enabling versatile 4D scene generation. Extensive experiments demonstrate that DynamicCity surpasses state-of-the-art methods in both reconstruction and generation, offering significant improvements in quality, training speed, and memory efficiency. DynamicCity paves the way for future research in dynamic scene generation.\n\n## References\n\n- Alliegro et al. (2023)\nAntonio Alliegro, Yawar Siddiqui, Tatiana Tommasi, and Matthias Nie√üner.\n\nPolydiff: Generating 3d polygonal meshes with diffusion models.\n\n_arXiv preprint arXiv:2312.11417_, 2023.\n\n- Bahmani et al. (2024)\nSherwin Bahmani, Xian Liu, Yifan Wang, Ivan Skorokhodov, Victor Rong, Ziwei Liu, Xihui Liu, Jeong Joon Park, Sergey Tulyakov, Gordon Wetzstein, Andrea Tagliasacchi, and David B. Lindell.\n\nTc4d: Trajectory-conditioned text-to-4d generation.\n\n_arXiv preprint arXiv:2403.17920_, 2024.\n\n- Berman et al. (2018)\nMaxim Berman, Amal Rannen Triki, and Matthew B Blaschko.\n\nThe lov√°sz-softmax loss: A tractable surrogate for the optimization of the intersection-over-union measure in neural networks.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  4413‚Äì4421, 2018.\n\n- Blattmann et al. (2023)\nAndreas Blattmann, Robin Rombach, Huan Ling, Tim Dockhorn, Seung Wook Kim, Sanja Fidler, and Karsten Kreis.\n\nAlign your latents: High-resolution video synthesis with latent diffusion models.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  22563‚Äì22575, 2023.\n\n- Caccia et al. (2019)\nLucas Caccia, Herke van Hoof, Aaron Courville, and Joelle Pineau.\n\nDeep generative modeling of lidar data.\n\nIn _IEEE/RSJ International Conference on Intelligent Robots and Systems_, pp.  5034‚Äì5040, 2019.\n\n- Caesar et al. (2020)\nHolger Caesar, Varun Bankiti, Alex H Lang, Sourabh Vora, Venice Erin Liong, Qiang Xu, Anush Krishnan, Yu Pan, Giancarlo Baldan, and Oscar Beijbom.\n\nnuscenes: A multimodal dataset for autonomous driving.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  11621‚Äì11631, 2020.\n\n- Cao & Johnson (2023)\nAng Cao and Justin Johnson.\n\nHexplane: A fast representation for dynamic scenes.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  130‚Äì141, 2023.\n\n- Chan et al. (2022)\nEric R Chan, Connor Z Lin, Matthew A Chan, Koki Nagano, Boxiao Pan, Shalini De Mello, Orazio Gallo, Leonidas J Guibas, Jonathan Tremblay, Sameh Khamis, et al.\n\nEfficient geometry-aware 3d generative adversarial networks.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  16123‚Äì16133, 2022.\n\n- Choy et al. (2019)\nChristopher Choy, JunYoung Gwak, and Silvio Savarese.\n\n4d spatio-temporal convnets: Minkowski convolutional neural networks.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  3075‚Äì3084, 2019.\n\n- Dao et al. (2022)\nTri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, and Christopher R√©.\n\nFlashattention: Fast and memory-efficient exact attention with io-awareness.\n\nIn _Advances in Neural Information Processing Systems_, volume 35, pp.  16344‚Äì16359, 2022.\n\n- Fridovich-Keil et al. (2023)\nSara Fridovich-Keil, Giacomo Meanti, Frederik Rahb√¶k Warburg, Benjamin Recht, and Angjoo Kanazawa.\n\nK-planes: Explicit radiance fields in space, time, and appearance.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  12479‚Äì12488, 2023.\n\n- Ho & Salimans (2022)\nJonathan Ho and Tim Salimans.\n\nClassifier-free diffusion guidance.\n\n_arXiv preprint arXiv:2207.12598_, 2022.\n\n- Hong et al. (2024)\nFangzhou Hong, Lingdong Kong, Hui Zhou, Xinge Zhu, Hongsheng Li, and Ziwei Liu.\n\nUnified 3d and 4d panoptic segmentation via dynamic shifting networks.\n\n_IEEE Transactions on Pattern Analysis and Machine Intelligence_, 46(5):3480‚Äì3495, 2024.\n\n- Hu et al. (2024)\nQianjiang Hu, Zhimin Zhang, and Wei Hu.\n\nRangeldm: Fast realistic lidar point cloud generation.\n\nIn _European Conference on Computer Vision_, pp.  115‚Äì135, 2024.\n\n- Huang et al. (2021)\nSiyuan Huang, Yichen Xie, Song-Chun Zhu, and Yixin Zhu.\n\nSpatio-temporal self-supervised representation learning for 3d point clouds.\n\nIn _IEEE/CVF International Conference on Computer Vision_, pp.  6535‚Äì6545, 2021.\n\n- Jiang et al. (2023)\nYanqin Jiang, Li Zhang, Jin Gao, Weimin Hu, and Yao Yao.\n\nConsistent4d: Consistent 360¬∞ dynamic object generation from monocular video.\n\n_arXiv preprint arXiv:2311.02848_, 2023.\n\n- Lee et al. (2024)\nJumin Lee, Sebin Lee, Changho Jo, Woobin Im, Juhyeong Seon, and Sung-Eui Yoon.\n\nSemcity: Semantic scene generation with triplane diffusion.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  28337‚Äì28347, 2024.\n\n- Liu et al. (2023a)\nYuheng Liu, Xinke Li, Xueting Li, Lu Qi, Chongshou Li, and Ming-Hsuan Yang.\n\nPyramid diffusion for fine 3d large scene generation.\n\n_arXiv preprint arXiv:2311.12085_, 2023a.\n\n- Liu et al. (2023b)\nZhen Liu, Yao Feng, Michael J. Black, Derek Nowrouzezahrai, Liam Paull, and Weiyang Liu.\n\nMeshdiffusion: Score-based generative 3d mesh modeling.\n\nIn _International Conference on Learning Representations_, 2023b.\n\n- Ma et al. (2024)\nZhiyuan Ma, Yuxiang Wei, Yabin Zhang, Xiangyu Zhu, Zhen Lei, and Lei Zhang.\n\nScaledreamer: Scalable text-to-3d synthesis with asynchronous score distillation.\n\nIn _European Conference on Computer Vision_, pp.  1‚Äì19, 2024.\n\n- Nakashima & Kurazume (2021)\nKazuto Nakashima and Ryo Kurazume.\n\nLearning to drop points for lidar scan synthesis.\n\nIn _IEEE/RSJ International Conference on Intelligent Robots and Systems_, pp.  222‚Äì229, 2021.\n\n- Nakashima & Kurazume (2024)\nKazuto Nakashima and Ryo Kurazume.\n\nLidar data synthesis with denoising diffusion probabilistic models.\n\nIn _IEEE International Conference on Robotics and Automation_, pp.  14724‚Äì14731, 2024.\n\n- Nakashima et al. (2023)\nKazuto Nakashima, Yumi Iwashita, and Ryo Kurazume.\n\nGenerative range imaging for learning scene priors of 3d lidar data.\n\nIn _IEEE/CVF Winter Conference on Applications of Computer Vision_, pp.  1256‚Äì1266, 2023.\n\n- Nunes et al. (2024)\nLucas Nunes, Rodrigo Marcuzzi, Benedikt Mersch, Jens Behley, and Cyrill Stachniss.\n\nScaling diffusion models to real-world 3d lidar scene completion.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  14770‚Äì14780, 2024.\n\n- Paszke et al. (2019)\nAdam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al.\n\nPytorch: An imperative style, high-performance deep learning library.\n\n_Advances in Neural Information Processing Systems_, 32:8026‚Äì8037, 2019.\n\n- Peebles & Xie (2023)\nWilliam Peebles and Saining Xie.\n\nScalable diffusion models with transformers.\n\nIn _IEEE/CVF International Conference on Computer Vision_, pp.  4195‚Äì4205, 2023.\n\n- Ran et al. (2024)\nHaoxi Ran, Vitor Guizilini, and Yue Wang.\n\nTowards realistic scene generation with lidar diffusion models.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  14738‚Äì14748, 2024.\n\n- Ren et al. (2023)\nJiawei Ren, Liang Pan, Jiaxiang Tang, Chi Zhang, Ang Cao, Gang Zeng, and Ziwei Liu.\n\nDreamgaussian4d: Generative 4d gaussian splatting.\n\n_arXiv preprint arXiv:2312.17142_, 2023.\n\n- Ren et al. (2024a)\nJiawei Ren, Kevin Xie, Ashkan Mirzaei, Hanxue Liang, Xiaohui Zeng, Karsten Kreis, Ziwei Liu, Antonio Torralba, Sanja Fidler, Seung Wook Kim, and Huan Ling.\n\nL4gm: Large 4d gaussian reconstruction model.\n\n_arXiv preprint arXiv:2406.10324_, 2024a.\n\n- Ren et al. (2024b)\nXuanchi Ren, Jiahui Huang, Xiaohui Zeng, Ken Museth, Sanja Fidler, and Francis Williams.\n\nXcube: Large-scale 3d generative modeling using sparse voxel hierarchies.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  4209‚Äì4219, 2024b.\n\n- Rojas et al. (2024)\nSara Rojas, Julien Philip, Kai Zhang, Sai Bi, Fujun Luan, Bernard Ghanem, and Kalyan Sunkavall.\n\nDatenerf: Depth-aware text-based editing of nerfs.\n\n_arXiv preprint arXiv:2404.04526_, 2024.\n\n- Rombach et al. (2022)\nRobin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bj√∂rn Ommer.\n\nHigh-resolution image synthesis with latent diffusion models.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  10684‚Äì10695, 2022.\n\n- Shi et al. (2023)\nYichun Shi, Peng Wang, Jianglong Ye, Mai Long, Kejie Li, and Xiao Yang.\n\nMvdream: Multi-view diffusion for 3d generation.\n\n_arXiv preprint arXiv:2308.16512_, 2023.\n\n- Simonyan & Zisserman (2015)\nKaren Simonyan and Andrew Zisserman.\n\nVery deep convolutional networks for large-scale image recognition.\n\n_arXiv preprint arXiv:1409.1556_, 2015.\n\n- Singer et al. (2022)\nUriel Singer, Adam Polyak, Thomas Hayes, Xi Yin, Jie An, Songyang Zhang, Qiyuan Hu, Harry Yang, Oron Ashual, Oran Gafni, Devi Parikh, Sonal Gupta, and Yaniv Taigman.\n\nMake-a-video: Text-to-video generation without text-video data.\n\nIn _International Conference on Learning Representations_, 2022.\n\n- Singer et al. (2023)\nUriel Singer, Shelly Sheynin, Adam Polyak, Oron Ashual, Iurii Makarov, Filippos Kokkinos, Naman Goyal, Andrea Vedaldi, Devi Parikh, Justin Johnson, and Yaniv Taigman.\n\nText-to-4d dynamic scene generation.\n\n_arXiv preprint arXiv:2301.11280_, 2023.\n\n- Sun et al. (2020)\nPei Sun, Henrik Kretzschmar, Xerxes Dotiwalla, Aurelien Chouard, Vijaysai Patnaik, Paul Tsui, James Guo, Yin Zhou, Yuning Chai, Benjamin Caine, Vijay Vasudevan, Wei Han, Jiquan Ngiam, Hang Zhao, Aleksei Timofeev, Scott Ettinger, Maxim Krivokon, Amy Gao, Aditya Joshi, Yu Zhang, Jonathon Shlens, Zhifeng Chen, and Dragomir Anguelov.\n\nScalability in perception for autonomous driving: Waymo open dataset.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  2446‚Äì2454, 2020.\n\n- Szegedy et al. (2015)\nChristian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n\nRethinking the inception architecture for computer vision.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  2818‚Äì2826, 2015.\n\n- Tang et al. (2020)\nHaotian Tang, Zhijian Liu, Shengyu Zhao, Yujun Lin, Ji Lin, Hanrui Wang, and Song Han.\n\nSearching efficient 3d architectures with sparse point-voxel convolution.\n\nIn _European Conference on Computer Vision_, pp.  685‚Äì702, 2020.\n\n- Tian et al. (2023)\nXiaoyu Tian, Tao Jiang, Longfei Yun, Yucheng Mao, Huitong Yang, Yue Wang, Yilun Wang, and Hang Zhao.\n\nOcc3d: A large-scale 3d occupancy prediction benchmark for autonomous driving.\n\nIn _Advances in Neural Information Processing Systems_, volume 36, pp.  64318‚Äì64330, 2023.\n\n- Wang et al. (2024)\nLening Wang, Wenzhao Zheng, Yilong Ren, Han Jiang, Zhiyong Cui, Haiyang Yu, and Jiwen Lu.\n\nOccsora: 4d occupancy generation models as world simulators for autonomous driving.\n\n_arXiv preprint arXiv:2405.20337_, 2024.\n\n- Wilson et al. (2022)\nJoey Wilson, Jingyu Song, Yuewei Fu, Arthur Zhang, Andrew Capodieci, Paramsothy Jayakumar, Kira Barton, and Maani Ghaffari.\n\nMotionsc: Data set and network for real-time semantic mapping in dynamic environments.\n\n_IEEE Robotics and Automation Letters_, 7(3):8439‚Äì8446, 2022.\n\n- Wu et al. (2024a)\nKailu Wu, Fangfu Liu, Zhihan Cai, Runjie Yan, Hanyang Wang, Yating Hu, Yueqi Duan, and Kaisheng Ma.\n\nUnique3d: High-quality and efficient 3d mesh generation from a single image.\n\n_arXiv preprint arXiv:2405.20343_, 2024a.\n\n- Wu et al. (2024b)\nShuang Wu, Youtian Lin, Feihu Zhang, Yifei Zeng, Jingxi Xu, Philip Torr, Xun Cao, and Yao Yao.\n\nDirect3d: Scalable image-to-3d generation via 3d latent diffusion transformer.\n\n_arXiv preprint arXiv:2405.14832_, 2024b.\n\n- Xiong et al. (2023)\nYuwen Xiong, Wei-Chiu Ma, Jingkang Wang, and Raquel Urtasun.\n\nUltralidar: Learning compact representations for lidar completion and generation.\n\n_arXiv preprint arXiv:2311.01448_, 2023.\n\n- Xu et al. (2024)\nXiang Xu, Lingdong Kong, Hui Shuai, Wenwei Zhang, Liang Pan, Kai Chen, Ziwei Liu, and Qingshan Liu.\n\n4d contrastive superflows are dense 3d representation learners.\n\nIn _European Conference on Computer Vision_, pp.  58‚Äì80, 2024.\n\n- Zheng et al. (2024)\nZehan Zheng, Fan Lu, Weiyi Xue, Guang Chen, and Changjun Jiang.\n\nLidar4d: Dynamic neural fields for novel space-time view lidar synthesis.\n\nIn _IEEE/CVF Conference on Computer Vision and Pattern Recognition_, pp.  5145‚Äì5154, 2024.\n\n- Zyrianov et al. (2022)\nVlas Zyrianov, Xiyue Zhu, and Shenlong Wang.\n\nLearning to generate realistic lidar point clouds.\n\nIn _European Conference on Computer Vision_, pp.  17‚Äì35, 2022.\n\n\n## Appendix\n\nIn this appendix, we supplement the following materials to support the findings and conclusions drawn in the main body of this paper.\n\n\\\\startcontents\n\n\\[appendices\\]\n\\\\printcontents\\[appendices\\]l1\n\n## Appendix A A Additional Implementation Details\n\nIn this section, we provide additional implementation details to assist in reproducing this work. Specifically, we elaborate on the details of the datasets, DiT evaluation metrics, the specifics of our generation models, and discussions on the downstream applications.\n\n### A.1 Datasets\n\nOur experiments primarily utilize two datasets: Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) and CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")). Additionally, we also evaluate our VAE on Occ3D-nuScenes(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")).\n\nThe Occ3D-Waymo dataset is derived from real-world Waymo Open Dataset (Sun et al., [2020](https://ar5iv.org/html/2410.18084#bib.bib37 \"\")) data, where occupancy sequences are obtained through multi-frame fusion and voxelization processes. Similarly, Occ3D-nuScenes is generated from the real-world nuScenes (Caesar et al., [2020](https://ar5iv.org/html/2410.18084#bib.bib6 \"\")) dataset using the same fusion and voxelization operations. On the other hand, the CarlaSC dataset is generated from simulated scenes and sensor data, yielding occupancy sequences.\n\nUsing these different datasets demonstrates the effectiveness of our method on both real-world and synthetic data. To ensure consistency in the experimental setup, we select 111111 commonly used semantic categories and map the original categories from both datasets to these 111111 categories. The detailed semantic label mappings are provided in Tab. [6](https://ar5iv.org/html/2410.18084#A1.T6 \"Table 6 ‚Ä£ A.1 Datasets ‚Ä£ Appendix A A Additional Implementation Details ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\").\n\nTable 6: Summary of Semantic Label Mappings. We unify the semantic classes between the CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")), Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")), and Occ3D-nuScenes(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) datasets for semantic scene generation.\n\n| Class | CarlaSC | Occ3D-Waymo | Occ3D-nuScenes |\n| --- | --- | --- | --- |\n| ‚ñ†‚ñ†\\\\blacksquare  Building | Building | Building | Manmade |\n| ‚ñ†‚ñ†\\\\blacksquare  Barrier | Barrier, Wall, Guardrail | - | Barrier |\n| ‚ñ†‚ñ†\\\\blacksquare  Other | Other, Sky, Bridge, Rail track, Static, Dynamic, Water | General Object | General Object |\n| ‚ñ†‚ñ†\\\\blacksquare  Pedestrian | Pedestrian | Pedestrian | Pedestrian |\n| ‚ñ†‚ñ†\\\\blacksquare  Pole | Pole, Traffic sign, Traffic light | Sign, Traffic light, Pole, Construction Cone | Traffic cone |\n| ‚ñ†‚ñ†\\\\blacksquare  Road | Road, Roadlines | Road | Drivable surface |\n| ‚ñ†‚ñ†\\\\blacksquare  Ground | Ground, Terrain | - | Other flat, Terrain |\n| ‚ñ†‚ñ†\\\\blacksquare  Sidewalk | Sidewalk | Sidewalk | Sidewalk |\n| ‚ñ†‚ñ†\\\\blacksquare  Vegetation | Vegetation | Vegetation, Tree trunk | Vegetation |\n| ‚ñ†‚ñ†\\\\blacksquare  Vehicle | Vehicle | Vehicle | Bus, Car, Construction vehicle, Trailer, Truck |\n| ‚ñ†‚ñ†\\\\blacksquare  Bicycle | - | Bicyclist, Bicycle, Motorcycle | Bicycle, Motorcycle |\n\n- ‚Ä¢\n\n\nOcc3D-Waymo. This dataset contains 798798798 training scenes, with each scene lasting approximately 202020 seconds and sampled at a frequency of 101010 Hz. This dataset includes 15 semantic categories. We use volumes with a resolution of 200√ó200√ó1620020016200\\\\times 200\\\\times 16 from this dataset.\n\n- ‚Ä¢\n\n\nCarlaSC. This dataset contains 666 training scenes, each duplicated into Light, Medium, and Heavy based on traffic density. Each scene lasts approximately 180180180 seconds and is sampled at a frequency of 101010 Hz. This dataset contains 222222 semantic categories, and the scene resolution is 128√ó128√ó81281288128\\\\times 128\\\\times 8.\n\n- ‚Ä¢\n\n\nOcc3D-nuScenes. This dataset contains 600600600 scenes, with each scene lasting approximately 202020 seconds and sampled at a frequency of 222 Hz. Compared to Occ3D-Waymo and CarlaSC, Occ3D-nuScenes has fewer total frames and more variation between scenes. This dataset includes 171717 semantic categories, with a resolution of 200√ó200√ó1620020016200\\\\times 200\\\\times 16.\n\n\n### A.2 DiT Evaluation Metrics\n\nInception Score (IS).\nThis metric evaluates the quality and diversity of generated samples using a pre-trained Inception model as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | IS=exp‚Å°(ùîºùêê‚àºpg‚Äã\\[DKL‚Äã(p‚Äã(y\\|ùêê)‚à•p‚Äã(y))\\]),ISsubscriptùîºsimilar-toùêêsubscriptùëùùëîdelimited-\\[\\]subscriptùê∑KLconditionalùëùconditionalùë¶ùêêùëùùë¶\\\\text{IS}=\\\\exp\\\\left(\\\\mathbb{E}\\_{\\\\mathbf{Q}\\\\sim p\\_{g}}\\\\left\\[D\\_{\\\\mathrm{KL}}(p(y\\|\\\\mathbf{Q})\\\\parallel p(y))\\\\right\\]\\\\right)~{}, |  | (5) |\n\nwhere pgsubscriptùëùùëîp\\_{g} represents the distribution of generated samples. p‚Äã(y\\|ùêê)ùëùconditionalùë¶ùêêp(y\\|\\\\mathbf{Q}) is the conditional label distribution given by the Inception model for a generated sample ùêêùêê\\\\mathbf{Q}. p‚Äã(y)=‚à´p‚Äã(y\\|ùêê)‚Äãpg‚Äã(ùêê)‚Äãùëëùêêùëùùë¶ùëùconditionalùë¶ùêêsubscriptùëùùëîùêêdifferential-dùêêp(y)=\\\\int p(y\\|\\\\mathbf{Q})p\\_{g}(\\\\mathbf{Q})\\\\,d\\\\mathbf{Q} is the marginal distribution over all generated samples. DKL‚Äã(p‚Äã(y\\|ùêê)‚à•p‚Äã(y))subscriptùê∑KLconditionalùëùconditionalùë¶ùêêùëùùë¶D\\_{\\\\mathrm{KL}}(p(y\\|\\\\mathbf{Q})\\\\parallel p(y)) is the Kullback-Leibler divergence, defined as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | DKL‚Äã(p‚Äã(y\\|ùêê)‚à•p‚Äã(y))=‚àëip‚Äã(yi\\|ùêê)‚Äãlog‚Å°p‚Äã(yi\\|ùêê)p‚Äã(yi).subscriptùê∑KLconditionalùëùconditionalùë¶ùêêùëùùë¶subscriptùëñùëùconditionalsubscriptùë¶ùëñùêêùëùconditionalsubscriptùë¶ùëñùêêùëùsubscriptùë¶ùëñD\\_{\\\\mathrm{KL}}(p(y\\|\\\\mathbf{Q})\\\\parallel p(y))=\\\\sum\\_{i}p(y\\_{i}\\|\\\\mathbf{Q})\\\\log\\\\frac{p(y\\_{i}\\|\\\\mathbf{Q})}{p(y\\_{i})}~{}. |  | (6) |\n\nFr√©chet Inception Distance (FID).\nThis metric measures the distance between the feature distributions of real and generated samples:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | FID=‚ÄñŒºr‚àíŒºg‚Äñ2+Tr‚Äã(Œ£r+Œ£g‚àí2‚Äã(Œ£r‚ÄãŒ£g)1/2),FIDsuperscriptnormsubscriptùúáùëüsubscriptùúáùëî2TrsubscriptŒ£ùëüsubscriptŒ£ùëî2superscriptsubscriptŒ£ùëüsubscriptŒ£ùëî12\\\\text{FID}=\\\\\\|\\\\mu\\_{r}-\\\\mu\\_{g}\\\\\\|^{2}+\\\\mathrm{Tr}\\\\left(\\\\Sigma\\_{r}+\\\\Sigma\\_{g}-2(\\\\Sigma\\_{r}\\\\Sigma\\_{g})^{1/2}\\\\right)~{}, |  | (7) |\n\nwhere Œºrsubscriptùúáùëü\\\\mu\\_{r} and Œ£rsubscriptŒ£ùëü\\\\Sigma\\_{r} are the mean and covariance matrix of features from real samples. Œºgsubscriptùúáùëî\\\\mu\\_{g} and Œ£gsubscriptŒ£ùëî\\\\Sigma\\_{g} are the mean and covariance matrix of features from generated samples. TrTr\\\\mathrm{Tr} denotes the trace of a matrix.\n\nKernel Inception Distance (KID).\nThis metric uses the squared Maximum Mean Discrepancy (MMD) with a polynomial kernel as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | KID=MMD2‚Äã(œï‚Äã(ùêêr),œï‚Äã(ùêêg)),KIDsuperscriptMMD2italic-œïsubscriptùêêùëüitalic-œïsubscriptùêêùëî\\\\text{KID}=\\\\text{MMD}^{2}(\\\\phi(\\\\mathbf{Q}\\_{r}),\\\\phi(\\\\mathbf{Q}\\_{g}))~{}, |  | (8) |\n\nwhere œï‚Äã(ùêêr)italic-œïsubscriptùêêùëü\\\\phi(\\\\mathbf{Q}\\_{r}) and œï‚Äã(ùêêg)italic-œïsubscriptùêêùëî\\\\phi(\\\\mathbf{Q}\\_{g}) represent the features of real and generated samples extracted from the Inception model.\n\nMMD with a polynomial kernel k‚Äã(x,y)=(x‚ä§‚Äãy+c)dùëòùë•ùë¶superscriptsuperscriptùë•topùë¶ùëêùëëk(x,y)=(x^{\\\\top}y+c)^{d} is calculated as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | MMD2‚Äã(X,Y)=1m‚Äã(m‚àí1)‚Äã‚àëi‚â†jk‚Äã(xi,xj)+1n‚Äã(n‚àí1)‚Äã‚àëi‚â†jk‚Äã(yi,yj)‚àí2m‚Äãn‚Äã‚àëi,jk‚Äã(xi,yj),superscriptMMD2ùëãùëå1ùëöùëö1subscriptùëñùëóùëòsubscriptùë•ùëñsubscriptùë•ùëó1ùëõùëõ1subscriptùëñùëóùëòsubscriptùë¶ùëñsubscriptùë¶ùëó2ùëöùëõsubscriptùëñùëóùëòsubscriptùë•ùëñsubscriptùë¶ùëó\\\\text{MMD}^{2}(X,Y)=\\\\frac{1}{m(m-1)}\\\\sum\\_{i\\\\neq j}k(x\\_{i},x\\_{j})+\\\\frac{1}{n(n-1)}\\\\sum\\_{i\\\\neq j}k(y\\_{i},y\\_{j})-\\\\frac{2}{mn}\\\\sum\\_{i,j}k(x\\_{i},y\\_{j})~{}, |  | (9) |\n\nwhere X={ùêê1,‚Ä¶,ùêêm}ùëãsubscriptùêê1‚Ä¶subscriptùêêùëöX=\\\\{\\\\mathbf{Q}\\_{1},\\\\ldots,\\\\mathbf{Q}\\_{m}\\\\} and Y={ùê≤1,‚Ä¶,ùê≤n}ùëåsubscriptùê≤1‚Ä¶subscriptùê≤ùëõY=\\\\{\\\\mathbf{y}\\_{1},\\\\ldots,\\\\mathbf{y}\\_{n}\\\\} are sets of features from real and generated samples.\n\nPrecision.\nThis metric measures the fraction of generated samples that lie within the real data distribution as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Precision=1N‚Äã‚àëi=1NùïÄ‚Äã((ùêüg‚àíŒºr)‚ä§‚ÄãŒ£r‚àí1‚Äã(ùêüg‚àíŒºr)‚â§œá2),Precision1ùëÅsuperscriptsubscriptùëñ1ùëÅùïÄsuperscriptsubscriptùêüùëîsubscriptùúáùëütopsuperscriptsubscriptŒ£ùëü1subscriptùêüùëîsubscriptùúáùëüsuperscriptùúí2\\\\text{Precision}=\\\\frac{1}{N}\\\\sum\\_{i=1}^{N}\\\\mathbb{I}\\\\left((\\\\mathbf{f}\\_{g}-\\\\mu\\_{r})^{\\\\top}\\\\Sigma\\_{r}^{-1}(\\\\mathbf{f}\\_{g}-\\\\mu\\_{r})\\\\leq\\\\chi^{2}\\\\right)~{}, |  | (10) |\n\nwhere ùêügsubscriptùêüùëî\\\\mathbf{f}\\_{g} is a generated sample in the feature space. Œºrsubscriptùúáùëü\\\\mu\\_{r} and Œ£rsubscriptŒ£ùëü\\\\Sigma\\_{r} are the mean and covariance of the real data distribution. ùïÄ‚Äã(‚ãÖ)ùïÄ‚ãÖ\\\\mathbb{I}(\\\\cdot) is the indicator function. œá2superscriptùúí2\\\\chi^{2} is a threshold based on the chi-squared distribution.\n\nRecall.\nThis metric measures the fraction of real samples that lie within the generated data distribution as follows:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Recall=1M‚Äã‚àëj=1MùïÄ‚Äã((ùêür‚àíŒºg)‚ä§‚ÄãŒ£g‚àí1‚Äã(ùêür‚àíŒºg)‚â§œá2),Recall1ùëÄsuperscriptsubscriptùëó1ùëÄùïÄsuperscriptsubscriptùêüùëüsubscriptùúáùëîtopsuperscriptsubscriptŒ£ùëî1subscriptùêüùëüsubscriptùúáùëîsuperscriptùúí2\\\\text{Recall}=\\\\frac{1}{M}\\\\sum\\_{j=1}^{M}\\\\mathbb{I}\\\\left((\\\\mathbf{f}\\_{r}-\\\\mu\\_{g})^{\\\\top}\\\\Sigma\\_{g}^{-1}(\\\\mathbf{f}\\_{r}-\\\\mu\\_{g})\\\\leq\\\\chi^{2}\\\\right)~{}, |  | (11) |\n\nwhere: ùêürsubscriptùêüùëü\\\\mathbf{f}\\_{r} is a real sample in the feature space. Œºgsubscriptùúáùëî\\\\mu\\_{g} and Œ£gsubscriptŒ£ùëî\\\\Sigma\\_{g} are the mean and covariance of the generated data distribution. ùïÄ‚Äã(‚ãÖ)ùïÄ‚ãÖ\\\\mathbb{I}(\\\\cdot) is the indicator function. œá2superscriptùúí2\\\\chi^{2} is a threshold based on the chi-squared distribution.\n\n2D Evaluations.\nWe render 3D scenes as 2D images for 2D evaluations. To ensure fair comparisons, we use the same semantic colormap and camera settings across all experiments. A pre-trained InceptionV3 (Szegedy et al., [2015](https://ar5iv.org/html/2410.18084#bib.bib38 \"\")) model is used to compute the Inception Score (IS), Fr√©chet Inception Distance (FID), and Kernel Inception Distance (KID) scores, while Precision and Recall are computed using a pre-trained VGG-16 (Simonyan & Zisserman, [2015](https://ar5iv.org/html/2410.18084#bib.bib34 \"\")) model.\n\n3D Evaluations.\nFor 3D data, we trained a MinkowskiUNet (Choy et al., [2019](https://ar5iv.org/html/2410.18084#bib.bib9 \"\")) as an autoencoder. We adopt the latest implementation from SPVNAS (Tang et al., [2020](https://ar5iv.org/html/2410.18084#bib.bib39 \"\")), which supports optimized sparse convolution operations. The features were extracted by applying average pooling to the output of the final downsampling block.\n\n### A.3 Model Details\n\nGeneral Training Details.\nWe implement both the VAE and DiT models using PyTorch (Paszke et al., [2019](https://ar5iv.org/html/2410.18084#bib.bib25 \"\")).\nWe utilize PyTorch‚Äôs mixed precision and replace all attention mechanisms with FlashAttention (Dao et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib10 \"\")) to accelerate training and reduce memory usage.\nAdamW is used as the optimizer for all models.\n\nWe train the VAE with a learning rate of 10‚àí3superscript10310^{-3}, running for 202020 epochs on Occ3D-Waymo and 100100100 epochs on CarlaSC. The DiT is trained with a learning rate of 10‚àí4superscript10410^{-4}, and the EMA rate for DiT is set to 0.99990.99990.9999.\n\nVAE.\nOur encoder projects the 4D input ùêêùêê\\\\mathbf{Q} into a HexPlane, where each dimension is a compressed version of the original 4D input. First, a 3D CNN is applied to each frame for feature extraction and downsampling, with dimensionality reduction applied only to the spatial dimensions (XùëãX, YùëåY, ZùëçZ). Next, the Projection Module projects the 4D features into the HexPlane. Each small transformer within the Projection Module consists of two layers, and the attention mechanism has two heads. Each head has a dimensionality of 161616, with a dropout rate of 0.10.10.1. Afterward, we further downsample the TùëáT dimension to half of its original size.\n\nDuring decoding, we first use three small transpose CNNs to restore the TùëáT dimension, then use an ESS module to restore the 4D features. Finally, we apply a 3D CNN to recover the spatial dimensions and generate point-wise predictions.\n\nDiffusion.\nWe set the patch size pùëùp to 222 for our DiT models. The Waymo DiT model has a hidden size of 768768768, 181818 DiT blocks, and 121212 attention heads. The CarlaSC DiT model has a hidden size of 384384384, 161616 DiT blocks, and 888 attention heads.\n\n### A.4 Classifier-Free Guidance\n\nClassifier-Free Guidance (CFG) (Ho & Salimans, [2022](https://ar5iv.org/html/2410.18084#bib.bib12 \"\")) could improve the performance of conditional generative models without relying on an external classifier.\nSpecifically, during training, the model simultaneously learns both conditional generation p‚Äã(x\\|c)ùëùconditionalùë•ùëêp(x\\|c) and unconditional generation p‚Äã(x)ùëùùë•p(x), and guidance during sampling is provided by the following equation:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | x^t=(1+w)‚ãÖx^t‚Äã(c)‚àíw‚ãÖx^t‚Äã(‚àÖ),subscript^ùë•ùë°‚ãÖ1ùë§subscript^ùë•ùë°ùëê‚ãÖùë§subscript^ùë•ùë°\\\\hat{x}\\_{t}=(1+w)\\\\cdot\\\\hat{x}\\_{t}(c)-w\\\\cdot\\\\hat{x}\\_{t}(\\\\emptyset)~{}, |  | (12) |\n\nwhere x^t‚Äã(c)subscript^ùë•ùë°ùëê\\\\hat{x}\\_{t}(c) is the result conditioned on cùëêc, x^t‚Äã(‚àÖ)subscript^ùë•ùë°\\\\hat{x}\\_{t}(\\\\emptyset) is the unconditioned result, and wùë§w is a weight parameter controlling the strength of the conditional guidance. By adjusting wùë§w, an appropriate balance between the accuracy and diversity of the generated scenes can be achieved.\n\n### A.5 Downstream Applications\n\nThis section provides a comprehensive explanation of five tasks to demonstrate the capability of our 4D scene generation model across various scenarios.\n\nHexPlane.\nSince our model is based on Latent Diffusion Models, it is inherently constrained to generate results that match the latent space dimensions, limiting the temporal length of unconditionally generated sequences. We argue that a robust 4D generation model should not be restricted to producing only short sequences. Instead of increasing latent space size, we leverage CFG to generate sequences in an auto-regressive manner. By conditioning each new 4D sequence on the previous one, we sequentially extend the temporal dimension. This iterative process significantly extends sequence length, enabling long-term generation, and allows conditioning on any real-world 4D scene to predict the next sequence using the DiT model.\n\nWe condition our DiT by using the HexPlane from TùëáT frames earlier. For any condition HexPlane, we apply patch embedding and positional encoding operations to obtain condition tokens. These tokens, combined with other conditions, are fed into the adaLN-Zero and Cross-Attention branches to influence the main branch.\n\nLayout.\nTo control object placement in the scene, we train a model capable of generating vehicle dynamics based on a bird‚Äôs-eye view sketch. We apply semantic filtering to the bird‚Äôs-eye view of the input scene, marking regions with vehicles as 111 and regions without vehicles as 00. Pooling this binary image provides layout information as a T√óH√óWùëáùêªùëäT\\\\times H\\\\times W tensor from the bird‚Äôs-eye perspective. The layout is padded to match the size of the HexPlane, ensuring that the positional encoding of the bird‚Äôs-eye layout aligns with the X‚ÄãYùëãùëåXY plane. DiT learns the correspondence between the layout and vehicle semantics using the same conditional injection method applied to the HexPlane.\n\nCommand.\nWhile we have developed effective methods to control the HexPlane in both temporal and spatial dimensions, a critical aspect of 4D autonomous driving scenarios is the motion of the ego vehicle. To address this, we define four commands: STATIC, FORWARD, TURN LEFT, and TURN RIGHT, and annotate our training data by analyzing ego vehicle poses. During training, we follow the traditional DiT approach of injecting class labels, where the commands are embedded and fed into the model via adaLN-Zero.\n\nTrajectory.\nFor more fine-grained control of the ego vehicle‚Äôs motion, we extend the command-based conditioning into a trajectory condition branch. For any 4D scene, the X‚ÄãYùëãùëåXY coordinates of the trajectory traj‚àà‚ÑùT√ó2trajsuperscript‚Ñùùëá2\\\\text{traj}\\\\in\\\\mathbb{R}^{T\\\\times 2} are passed through an MLP and injected into the adaLN-Zero branch.\n\nInpaint.\nWe demonstrate that our model can handle versatile applications by training a conditional DiT for the previous tasks. Extending our exploration of downstream applications, and inspired by (Lee et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib17 \"\")), we leverage the 2D structure of our latent space and the explicit modeling of each dimension to highlight our model‚Äôs ability to perform inpainting on 4D scenes. During DiT sampling, we define a 2D mask m‚àà‚ÑùX√óYùëösuperscript‚Ñùùëãùëåm\\\\in\\\\mathbb{R}^{X\\\\times Y} on the X‚ÄãYùëãùëåXY plane, which is extended across all dimensions to mask specific regions of the HexPlane.\n\nAt each step of the diffusion process, we apply noise to the input ‚Ñãinsuperscript‚Ñãin\\\\mathcal{H}^{\\\\text{in}} and update the HexPlane using the following formula:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñãt=m‚äô‚Ñãt+(1‚àím)‚äô‚Ñãtin,subscript‚Ñãùë°direct-productùëösubscript‚Ñãùë°direct-product1ùëösuperscriptsubscript‚Ñãùë°in\\\\mathcal{H}\\_{t}=m\\\\odot\\\\mathcal{H}\\_{t}+(1-m)\\\\odot\\\\mathcal{H}\\_{t}^{\\\\text{in}}~{}, |  | (13) |\n\nwhere ‚äôdirect-product\\\\odot denotes the element-wise product. This process inpaints the masked regions while preserving the unmasked areas of the scene, enabling partial scene modification, such as turning an empty street into one with heavy traffic.\n\n## Appendix B B Additional Quantitative Results\n\nIn this section, we present additional quantitative results to demonstrate the effectiveness of our VAE in accurately reconstructing 4D scenes.\n\n### B.1 Per-Class Generation Results\n\nWe include the class-wise IoU scores of OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) and our proposed DynamicCity framework on CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")). As shown in Tab. [7](https://ar5iv.org/html/2410.18084#A2.T7 \"Table 7 ‚Ä£ B.1 Per-Class Generation Results ‚Ä£ Appendix B B Additional Quantitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), our results demonstrate higher IoU across all classes, indicating that our VAE reconstruction achieves minimal information loss. Additionally, our model does not exhibit significantly low IoU for any specific class, proving its ability to effectively handle class imbalance.\n\nTable 7: Comparisons of Per-Class IoU Scores. We compared the performance of OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")), and our DynamicCity framework on CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) across 101010 semantic classes. The scene resolution is 128√ó128√ó81281288128\\\\times 128\\\\times 8. The sequence lengths are 444, 888, 161616, and 323232, respectively.\n\n| Method | mIoU | Building | Barrier | Other | Pedestrian | Pole | Road | Ground | Sidewalk | Vegetation | Vehicle |\n| Resolution: 128√ó128√ó81281288128\\\\times 128\\\\times 8    Sequence Length: 444 |\n| OccSora | 41.009 | 38.861 | 10.616 | 6.637 | 19.191 | 21.825 | 93.910 | 61.357 | 86.671 | 15.685 | 55.340 |\n| Ours | 79.604 | 76.364 | 31.354 | 68.898 | 93.436 | 87.962 | 98.617 | 87.014 | 95.129 | 68.700 | 88.569 |\n| Improv. | 38.595 | 37.503 | 20.738 | 62.261 | 74.245 | 66.137 | 4.707 | 25.657 | 8.458 | 53.015 | 33.229 |\n| Resolution: 128√ó128√ó81281288128\\\\times 128\\\\times 8    Sequence Length: 888 |\n| OccSora | 39.910 | 33.001 | 3.260 | 5.659 | 19.224 | 19.357 | 93.038 | 57.335 | 85.551 | 30.899 | 51.776 |\n| Ours | 76.181 | 70.874 | 50.025 | 52.433 | 87.958 | 85.866 | 97.513 | 83.074 | 93.944 | 58.626 | 81.498 |\n| Improv. | 36.271 | 37.873 | 46.765 | 46.774 | 68.734 | 66.509 | 4.475 | 25.739 | 8.393 | 27.727 | 29.722 |\n| Resolution: 128√ó128√ó81281288128\\\\times 128\\\\times 8    Sequence Length: 161616 |\n| OccSora | 33.404 | 19.264 | 2.205 | 3.454 | 11.781 | 9.165 | 92.054 | 50.077 | 82.594 | 18.078 | 45.363 |\n| Ours | 74.223 | 66.852 | 51.901 | 49.844 | 79.410 | 82.369 | 96.937 | 84.484 | 94.082 | 58.217 | 78.134 |\n| Improv. | 40.819 | 47.588 | 49.696 | 46.390 | 67.629 | 73.204 | 4.883 | 34.407 | 11.488 | 40.139 | 32.771 |\n| Resolution: 128√ó128√ó81281288128\\\\times 128\\\\times 8    Sequence Length: 323232 |\n| OccSora | 28.911 | 16.565 | 1.413 | 0.944 | 6.200 | 4.150 | 91.466 | 43.399 | 78.614 | 11.007 | 35.353 |\n| Ours | 59.308 | 52.036 | 25.521 | 29.382 | 56.811 | 57.876 | 94.792 | 78.390 | 89.955 | 46.080 | 62.234 |\n| Improv. | 30.397 | 35.471 | 24.108 | 28.438 | 50.611 | 53.726 | 3.326 | 34.991 | 11.341 | 35.073 | 26.881 |\n\n## Appendix C C Additional Qualitative Results\n\nIn this section, we provide additional qualitative results on the Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) and CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) datasets to demonstrate the effectiveness of our approach.\n\n### C.1 Unconditional Dynamic Scene Generation\n\nFirst, we present full unconditional generation results in Fig. [8](https://ar5iv.org/html/2410.18084#A3.F8 \"Figure 8 ‚Ä£ C.1 Unconditional Dynamic Scene Generation ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") and [9](https://ar5iv.org/html/2410.18084#A3.F9 \"Figure 9 ‚Ä£ C.1 Unconditional Dynamic Scene Generation ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"). These results demonstrate that our generated scenes are of high quality, realistic, and contain significant detail, capturing both the overall scene dynamics and the movement of objects within the scenes.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x9.png)Figure 8: Unconditional Dynamic Scene Generation Results. We provide qualitative examples of a total of 161616 consectutive frames generated by DynamicCity on the Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x10.png)Figure 9: Unconditional Dynamic Scene Generation Results. We provide qualitative examples of a total of 161616 consectutive frames generated by DynamicCity on the CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n### C.2 HexPlane-Guided Generation\n\nWe show results for our HexPlane conditional generation in Fig. [10](https://ar5iv.org/html/2410.18084#A3.F10 \"Figure 10 ‚Ä£ C.2 HexPlane-Guided Generation ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"). Although the sequences are generated in groups of 16 due to the settings of our VAE, we successfully generate a long sequence by conditioning on the previous one. The result contains 64 frames, comprising four sequences, and depicts a T-intersection with many cars parked along the roadside. This result demonstrates strong temporal consistency across sequences, proving that our framework can effectively predict the next sequence based on the current one.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x11.png)Figure 10: HexPlane-Guided Generation Results. We provide qualitative examples of a total of 646464 consectutive frames generated by DynamicCity on the Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n### C.3 Layout-Guided Generation\n\nThe layout conditional generation result is presented in Fig. [11](https://ar5iv.org/html/2410.18084#A3.F11 \"Figure 11 ‚Ä£ C.3 Layout-Guided Generation ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"). First, we observe that the layout closely matches the semantic positions in the generated result. Additionally, as the layout changes, the positions of the vehicles in the scene also change accordingly, demonstrating that our model effectively captures the condition and influences both the overall scene layout and vehicle placement.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x12.png)Figure 11: Layout-Guided Generation Results. We provide qualitative examples of a total of 161616 consectutive frames generated by DynamicCity on the Occ3D-Waymo(Tian et al., [2023](https://ar5iv.org/html/2410.18084#bib.bib40 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n### C.4 Command- & Trajectory-Guided Generation\n\nWe present command conditional generation in Fig. [12](https://ar5iv.org/html/2410.18084#A3.F12 \"Figure 12 ‚Ä£ C.4 Command- & Trajectory-Guided Generation ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") and trajectory conditional generation in Fig. [13](https://ar5iv.org/html/2410.18084#A3.F13 \"Figure 13 ‚Ä£ C.4 Command- & Trajectory-Guided Generation ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"). These results show that when we input a command, such as \"right turn,\" or a sequence of XY-plane coordinates, our model can effectively control the motion of the ego vehicle and the relative motion of the entire scene based on these movement trends.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x13.png)Figure 12: Command-Guided Scene Generation Results. We provide qualitative examples of a total of 161616 consectutive frames generated under the command RIGHT by DynamicCity on the CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x14.png)Figure 13: Trajectory-Guided Scene Generation Results. We provide qualitative examples of a total of 161616 consectutive frames generated by DynamicCity on the CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n### C.5 Dynamic Inpainting\n\nWe present the full inpainting results in Fig. [14](https://ar5iv.org/html/2410.18084#A3.F14 \"Figure 14 ‚Ä£ C.5 Dynamic Inpainting ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"). The results show that our model successfully regenerates the inpainted regions while ensuring that the areas outside the inpainted regions remain consistent with the original scene. Furthermore, the inpainted areas seamlessly blend into the original scene, exhibiting realistic placement and dynamics.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x15.png)Figure 14: Dynamic Inpainting Results. We provide qualitative examples of a total of 161616 consectutive frames generated by DynamicCity on the CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n### C.6 Comparisons with OccSora\n\nWe compare our qualitative results with OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) in Fig. [15](https://ar5iv.org/html/2410.18084#A3.F15 \"Figure 15 ‚Ä£ C.6 Comparisons with OccSora ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), using a similar scene. It is evident that our result presents a realistic dynamic scene, with straight roads and complete objects and environments. In contrast, OccSora‚Äôs result displays unreasonable semantics, such as a pedestrian in the middle of the road, broken vehicles, and a lack of dynamic elements. This comparison highlights the effectiveness of our method.\n\n![Refer to caption](https://ar5iv.org/html/2410.18084/assets/x16.png)Figure 15: Comparisons of Dynamic Scene Generation. We provide qualitative examples of a total of 161616 consectutive frames generated by OccSora (Wang et al., [2024](https://ar5iv.org/html/2410.18084#bib.bib41 \"\")) and our proposed DynamicCity framework on the CarlaSC(Wilson et al., [2022](https://ar5iv.org/html/2410.18084#bib.bib42 \"\")) dataset. Best viewed in colors and zoomed-in for additional details.\n\n## Appendix D D Potential Societal Impact & Limitations\n\nIn this section, we elaborate on the potential positive and negative societal impact of this work, as well as the broader impact and some potential limitations.\n\n### D.1 Societal Impact\n\nOur approach‚Äôs ability to generate high-quality 4D LiDAR scenes holds the potential to significantly impact various domains, particularly autonomous driving, robotics, urban planning, and smart city development. By creating realistic, large-scale dynamic scenes, our model can aid in developing more robust and safe autonomous systems. These systems can be better trained and evaluated against diverse scenarios, including rare but critical edge cases like unexpected pedestrian movements or complex traffic patterns, which are difficult to capture in real-world datasets. This contribution can lead to safer autonomous vehicles, reducing traffic accidents, and improving traffic efficiency, ultimately benefiting society by enhancing transportation systems.\n\nIn addition to autonomous driving, DynamicCity can be valuable for developing virtual reality (VR) environments and augmented reality (AR) applications, enabling more realistic 3D simulations that could be used in various industries, including entertainment, training, and education. These advancements could help improve skill development in driving schools, emergency response training, and urban planning scenarios, fostering a safer and more informed society.\n\nDespite these positive outcomes, the technology could be misused. The ability to generate realistic dynamic scenes might be exploited to create misleading or fake data, potentially undermining trust in autonomous systems or spreading misinformation about the capabilities of such technologies. However, we do not foresee any direct harmful impact from the intended use of this work, and ethical guidelines and responsible practices can mitigate potential risks.\n\n### D.2 Broader Impact\n\nOur approach‚Äôs contribution to 4D LiDAR scene generation stands to advance the fields of autonomous driving, robotics, and even urban planning. By providing a scalable solution for generating diverse and dynamic LiDAR scenes, it enables researchers and engineers to develop more sophisticated models capable of handling real-world complexity. This has the potential to accelerate progress in autonomous systems, making them safer, more reliable, and adaptable to a wide range of environments. For example, researchers can use DynamicCity to generate synthetic training data, supplementing real-world data, which is often expensive and time-consuming to collect, especially in dynamic and high-risk scenarios.\n\nThe broader impact also extends to lowering entry barriers for smaller research institutions and startups that may not have access to vast amounts of real-world LiDAR data. By offering a means to generate realistic and dynamic scenes, DynamicCity democratizes access to high-quality data for training and validating machine learning models, thereby fostering innovation across the autonomous driving and robotics communities.\n\nHowever, it is crucial to emphasize that synthetic data should be used responsibly. As our model generates highly realistic scenes, there is a risk that reliance on synthetic data could lead to models that fail to generalize effectively in real-world settings, especially if the generated scenes do not capture the full diversity or rare conditions found in real environments. Hence, it‚Äôs important to complement synthetic data with real-world data and ensure transparency when using synthetic data in model training and evaluation.\n\n### D.3 Known Limitations\n\nDespite the strengths of DynamicCity, several limitations should be acknowledged. First, our model‚Äôs ability to generate extremely long sequences is still constrained by computational resources, leading to potential challenges in accurately modeling scenarios that span extensive periods. While we employ techniques to extend temporal modeling, there may be degradation in scene quality or consistency when attempting to generate sequences beyond a certain length, particularly in complex traffic scenarios.\n\nSecond, the generalization capability of DynamicCity depends on the diversity and representativeness of the training datasets. If the training data does not cover certain environmental conditions, object categories, or dynamic behaviors, the generated scenes might lack these aspects, resulting in incomplete or less realistic dynamic LiDAR data. This could limit the model‚Äôs effectiveness in handling unseen or rare scenarios, which are critical for validating the robustness of autonomous systems.\n\nThird, while our model demonstrates strong performance in generating dynamic scenes, it may face challenges in highly congested or intricate traffic environments, where multiple objects interact closely with rapid, unpredictable movements. In such cases, DynamicCity might struggle to capture the fine-grained details and interactions accurately, leading to less realistic scene generation.\n\nLastly, the reliance on pre-defined semantic categories means that any variations or new object types not included in the training set might be inadequately represented in the generated scenes. Addressing these limitations would require integrating more diverse training data, improving the model‚Äôs adaptability, and refining techniques for longer sequence generation.\n\n## Appendix E E Public Resources Used\n\nIn this section, we acknowledge the public resources used, during the course of this work.\n\n### E.1 Public Datasets Used\n\n- ‚Ä¢\n\n\nnuScenes111 [https://www.nuscenes.org/nuscenes](https://www.nuscenes.org/nuscenes \"\") CC BY-NC-SA 4.0\n\n- ‚Ä¢\n\n\nnuScenes-devkit222 [https://github.com/nutonomy/nuscenes-devkit](https://github.com/nutonomy/nuscenes-devkit \"\") Apache License 2.0\n\n- ‚Ä¢\n\n\nWaymo Open Dataset333 [https://waymo.com/open](https://waymo.com/open \"\") Waymo Dataset License\n\n- ‚Ä¢\n\n\nCarlaSC444 [https://umich-curly.github.io/CarlaSC.github.io](https://umich-curly.github.io/CarlaSC.github.io \"\"). MIT License\n\n- ‚Ä¢\n\n\nOcc3D555 [https://tsinghua-mars-lab.github.io/Occ3D](https://tsinghua-mars-lab.github.io/Occ3D \"\"). MIT License\n\n\n### E.2 Public Implementations Used\n\n- ‚Ä¢\n\n\nSemCity666 [https://github.com/zoomin-lee/SemCity](https://github.com/zoomin-lee/SemCity \"\"). Unknown\n\n- ‚Ä¢\n\n\nOccSora777 [https://github.com/wzzheng/OccSora](https://github.com/wzzheng/OccSora \"\"). Apache License 2.0\n\n- ‚Ä¢\n\n\nMinkowskiEngine888 [https://github.com/NVIDIA/MinkowskiEngine](https://github.com/NVIDIA/MinkowskiEngine \"\"). MIT License\n\n- ‚Ä¢\n\n\nTorchSparse999 [https://github.com/mit-han-lab/torchsparse](https://github.com/mit-han-lab/torchsparse \"\"). MIT License\n\n- ‚Ä¢\n\n\nSPVNAS101010 [https://github.com/mit-han-lab/spvnas](https://github.com/mit-han-lab/spvnas \"\"). MIT License\n\n- ‚Ä¢\n\n\nspconv111111 [https://github.com/traveller59/spconv](https://github.com/traveller59/spconv \"\"). Apache License 2.0\n\n\n[‚óÑ](https://ar5iv.org/html/2410.18083) [![ar5iv homepage](https://ar5iv.org/assets/ar5iv.png)](https://ar5iv.org/) [Feeling\\\\\n\\\\\nlucky?](https://ar5iv.org/feeling_lucky) [Conversion\\\\\n\\\\\nreport](https://ar5iv.org/log/2410.18084) [Report\\\\\n\\\\\nan issue](https://github.com/dginev/ar5iv/issues/new?template=improve-article--arxiv-id-.md&title=Improve+article+2410.18084) [View original\\\\\n\\\\\non arXiv](https://arxiv.org/abs/2410.18084) [‚ñ∫](https://ar5iv.org/html/2410.18086)",
  "sections": {
    "1 Introduction": {
      "content": "LiDAR scene generation has garnered growing attention recently, which could benefit various related applications, such as robotics and autonomous driving. Compared to its 3D object generation counterpart, generating LiDAR scenes remains an under-explored field, with many new research challenges such as the presence of numerous moving objects, large-scale scenes, and long temporal sequences (Huang et al., [2021]; Xu et al., [2024]). For example, in autonomous driving scenarios, a LiDAR scene typically comprises multiple objects from various categories, such as vehicles, pedestrians, and vegetation, captured over a long sequence ( _e.g._, 200200200 frames) spanning a large area ( _e.g._, 80√ó80√ó6.4‚Äãmeters380806.4superscriptmeters380\\\\times 80\\\\times 6.4~{}\\\\text{meters}^{3}). Although in its early stage, LiDAR scene generation holds great potential to enhance the understanding of the 3D world, with wide-reaching and profound implications.\n\nDue to the complexity of LiDAR data, many efficient learning frameworks have been introduced for large-scale 3D scene generation. ùí≥3superscriptùí≥3\\\\mathcal{X}^{3}(Ren et al., [2024b]) utilizes a hierarchical voxel diffusion model to generate large outdoor 3D scenes based on VDB data structure. PDD (Liu et al., [2023a]) introduces a pyramid discrete diffusion model to progressively generate high-quality 3D scenes. SemCity (Lee et al., [2024]) resolves outdoor scene generation by leveraging a triplane diffusion model. Despite achieving impressive LiDAR scene generation, these approaches primarily focus on generating static and single-frame 3D scenes with semantics, and hence fail to effectively capture the dynamic nature of outdoor environments. Recently, a few works (Zheng et al., [2024]; Wang et al., [2024]) have explored 4D LiDAR generation. However, generating high-quality long-sequence 4D LiDAR scenes is still a challenging and open problem (Nakashima & Kurazume, [2021]; Nakashima et al., [2023]).\n\nIn this work, we propose a novel 4D LiDAR generation framework, DynamicCity, enabling generating large-scale, high-quality dynamic LiDAR scenes. DynamicCity mainly consists of two stages: 1) a VAE network for learning compact 4D representations, _i.e._, HexPlanes (Cao & Johnson, [2023]; Fridovich-Keil et al., [2023]); 2) a HexPlane Generation model based on DiT (Peebles & Xie, [2023]).\n\nVAE for 4D LiDAR.\nGiven a set of 4D LiDAR scenes, DynamicCity first encodes the scene as a 3D feature volume sequence with a 3D backbone. Afterward, we propose a novel Projection Module based on transformer operations to compress the feature volume sequence into six 2D feature maps. In particular, the proposed projection module significantly enhances HexPlane fitting performance, offering an improvement of up to 12.56%percent12.56\\\\mathbf{12.56\\\\%}mIoU compared to conventional averaging operations. After constructing the HexPlane based on the projected six feature planes, we employ an Expansion & Squeeze Strategy (ESS) to decode the HexPlane into multiple 3D feature volumes in parallel. Compared to individually querying each point, ESS further improves HexPlane fitting quality (with up to 7.05%percent7.05\\\\mathbf{7.05\\\\%} mIoU gain), significantly accelerates training speed (by up to 2.06‚Äãùê±2.06ùê±\\\\mathbf{2.06x}), and substantially reduces memory usage (by up to a relative 70.84%percent70.84\\\\mathbf{70.84\\\\%} memory reduction).\n\nDiT for HexPlane.\nUsing the encoded HexPlane, we use a DiT-based framework for generating HexPlane, enabling 4D LiDAR generation. Training a DiT with token sequences naively generated from HexPlane may not achieve optimal quality, as it could overlook spatial and temporal relationships among tokens. Therefore, we introduce the Padded Rollout Operation (PRO), which reorganizes the six feature planes into a square feature map, providing an efficient way to model both spatial and temporal relationships within the token sequence. Leveraging the DiT framework, DynamicCity seamlessly incorporates various conditions to guide the 4D generation process, enabling a wide range of applications including hexplane-conditional generation, trajectory-guided generation, command-driven scene generation, layout-conditioned generation, and dynamic scene inpainting.\n\nOur contributions can be summarized as follows:\n\n- ‚Ä¢\n\n\nWe propose DynamicCity, a high-quality, large-scale 4D LiDAR scene generation framework consisting of a tailored VAE for HexPlane fitting and a DiT-based network for HexPlane generation, which supports various downstream applications.\n\n- ‚Ä¢\n\n\nIn the VAE architecture, DynamicCity employs a novel Projection Module to benefit in encoding 4D LiDAR scenes into compact HexPlanes, significantly improving HexPlane fitting quality. Following, an Expansion &\\\\& Squeeze Strategy is introduced to decode the HexPlanes for reconstruction, which improves both fitting efficiency and accuracy.\n\n- ‚Ä¢\n\n\nBuilding on fitted HexPlanes, we design a Padded Rollout Operation to reorganize HexPlane features into a masked 2D square feature map, enabling compatibility with DiT training.\n\n- ‚Ä¢\n\n\nExtensive experimental results demonstrate that DynamicCity achieves significantly better 4D reconstruction and generation performance than previous SoTA methods across all evaluation metrics, including generation quality, training speed, and memory usage.",
      "citations": [
        {
          "start_pos": 394,
          "end_pos": 414,
          "text": "Huang et al., [2021]",
          "paper_id": "bib.bib15",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 416,
          "end_pos": 433,
          "text": "Xu et al., [2024]",
          "paper_id": "bib.bib46",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1113,
          "end_pos": 1132,
          "text": "Ren et al., [2024b]",
          "paper_id": "bib.bib30",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1250,
          "end_pos": 1269,
          "text": "Liu et al., [2023a]",
          "paper_id": "bib.bib18",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1376,
          "end_pos": 1394,
          "text": "Lee et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1727,
          "end_pos": 1747,
          "text": "Zheng et al., [2024]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1749,
          "end_pos": 1768,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1909,
          "end_pos": 1937,
          "text": "Nakashima & Kurazume, [2021]",
          "paper_id": "bib.bib21",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1939,
          "end_pos": 1963,
          "text": "Nakashima et al., [2023]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2232,
          "end_pos": 2253,
          "text": "Cao & Johnson, [2023]",
          "paper_id": "bib.bib7",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2265,
          "end_pos": 2284,
          "text": "Keil et al., [2023]",
          "paper_id": "bib.bib11",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2332,
          "end_pos": 2353,
          "text": "Peebles & Xie, [2023]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "2 Related Work": {
      "content": "3D Object Generation has been a central focus in machine learning, with diffusion models playing a significant role in generating realistic 3D structures. Many techniques utilize 2D diffusion mechanisms to synthesize 3D outputs, covering tasks like text-to-3D object generation (Ma et al., [2024]), image-to-3D transformations (Wu et al., [2024a]), and 3D editing (Rojas et al., [2024]). Meanwhile, recent methods bypass the reliance on 2D intermediaries by generating 3D outputs directly in three-dimensional space, utilizing explicit (Alliegro et al., [2023]), implicit (Liu et al., [2023b]), triplane (Wu et al., [2024b]), and latent representations (Ren et al., [2024b]). Although these methods demonstrate impressive 3D object generation, they primarily focus on small-scale, isolated objects rather than large-scale, scene-level generation (Hong et al., [2024]; Lee et al., [2024]). This limitation underscores the need for methods capable of generating complete 3D scenes with complex spatial relationships.\n\nLiDAR Scene Generation extends the scope to larger, more complex environments. Earlier works used VQ-VAE (Zyrianov et al., [2022]) and GAN-based models (Caccia et al., [2019]; Nakashima et al., [2023]) to generate LiDAR scenes. However, recent advancements have shifted towards diffusion models (Xiong et al., [2023]; Ran et al., [2024]; Nakashima & Kurazume, [2024]; Zyrianov et al., [2022]; Hu et al., [2024]; Nunes et al., [2024]), which better handle the complexities of expansive outdoor scenes. For example, (Lee et al., [2024]) utilize voxel grids to represent large-scale scenes but often face challenges with empty spaces like skies and fields. While some recent works incorporate temporal dynamics to extend single-frame generation to sequences (Zheng et al., [2024]; Wang et al., [2024]), they often lack the ability to fully capture the dynamic nature of 4D environments. Thus, these methods typically remain limited to short temporal horizons or struggle with realistic dynamic object modeling, highlighting the gap in generating high-fidelity 4D LiDAR scenes.\n\n4D Generation represents a leap forward, aiming to capture the temporal evolution of scenes. Prior works often leverage video diffusion models (Singer et al., [2022]; Blattmann et al., [2023]) to generate dynamic sequences (Singer et al., [2023]), with some extending to multi-view (Shi et al., [2023]) and single-image settings (Rombach et al., [2022]) to enhance 3D consistency. In the context of video-conditional generation, approaches such as (Jiang et al., [2023]; Ren et al., [2023]; [2024a])) incorporate image priors for guiding generation processes. While these methods capture certain dynamic aspects, they lack the ability to generate long-term, high-resolution 4D LiDAR scenes with versatile applications. Our method, DynamicCity, fills this gap by introducing a novel 4D generation framework that efficiently captures large-scale dynamic environments, supports diverse generation tasks ( _e.g._, trajectory-guided (Bahmani et al., [2024]), command-driven generation), and offers substantial improvements in scene fidelity and temporal modeling.\n\n![Refer to caption]Figure 2: Pipeline of dynamic LiDAR scene generation. Our DynamicCity framework consists of two key procedures: (a) Encoding HexPlane with an VAE architecture ( _cf._ Sec. [4.1]VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")), and (b) 4D Scene Generation with HexPlane DiT ( _cf._ Sec. [4.2]Diffusion Transformer for HexPlane ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")).",
      "citations": [
        {
          "start_pos": 279,
          "end_pos": 296,
          "text": "Ma et al., [2024]",
          "paper_id": "bib.bib20",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 328,
          "end_pos": 346,
          "text": "Wu et al., [2024a]",
          "paper_id": "bib.bib43",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 365,
          "end_pos": 385,
          "text": "Rojas et al., [2024]",
          "paper_id": "bib.bib31",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 537,
          "end_pos": 560,
          "text": "Alliegro et al., [2023]",
          "paper_id": "bib.bib1",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib2",
            "bib.bib12"
          ]
        },
        {
          "start_pos": 573,
          "end_pos": 592,
          "text": "Liu et al., [2023b]",
          "paper_id": "bib.bib19",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 605,
          "end_pos": 623,
          "text": "Wu et al., [2024b]",
          "paper_id": "bib.bib44",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 654,
          "end_pos": 673,
          "text": "Ren et al., [2024b]",
          "paper_id": "bib.bib30",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 847,
          "end_pos": 866,
          "text": "Hong et al., [2024]",
          "paper_id": "bib.bib13",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 868,
          "end_pos": 886,
          "text": "Lee et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1122,
          "end_pos": 1145,
          "text": "Zyrianov et al., [2022]",
          "paper_id": "bib.bib48",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1169,
          "end_pos": 1190,
          "text": "Caccia et al., [2019]",
          "paper_id": "bib.bib5",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib1",
            "bib.bib2",
            "bib.bib12"
          ]
        },
        {
          "start_pos": 1192,
          "end_pos": 1216,
          "text": "Nakashima et al., [2023]",
          "paper_id": "bib.bib23",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1312,
          "end_pos": 1332,
          "text": "Xiong et al., [2023]",
          "paper_id": "bib.bib45",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1334,
          "end_pos": 1352,
          "text": "Ran et al., [2024]",
          "paper_id": "bib.bib27",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1354,
          "end_pos": 1382,
          "text": "Nakashima & Kurazume, [2024]",
          "paper_id": "bib.bib22",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1384,
          "end_pos": 1407,
          "text": "Zyrianov et al., [2022]",
          "paper_id": "bib.bib48",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1409,
          "end_pos": 1426,
          "text": "Hu et al., [2024]",
          "paper_id": "bib.bib14",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1428,
          "end_pos": 1448,
          "text": "Nunes et al., [2024]",
          "paper_id": "bib.bib24",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1531,
          "end_pos": 1549,
          "text": "Lee et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1772,
          "end_pos": 1792,
          "text": "Zheng et al., [2024]",
          "paper_id": "bib.bib47",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1794,
          "end_pos": 1813,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2235,
          "end_pos": 2256,
          "text": "Singer et al., [2022]",
          "paper_id": "bib.bib35",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2258,
          "end_pos": 2282,
          "text": "Blattmann et al., [2023]",
          "paper_id": "bib.bib4",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2315,
          "end_pos": 2336,
          "text": "Singer et al., [2023]",
          "paper_id": "bib.bib36",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2374,
          "end_pos": 2392,
          "text": "Shi et al., [2023]",
          "paper_id": "bib.bib33",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2421,
          "end_pos": 2443,
          "text": "Rombach et al., [2022]",
          "paper_id": "bib.bib32",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2540,
          "end_pos": 2560,
          "text": "Jiang et al., [2023]",
          "paper_id": "bib.bib16",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2562,
          "end_pos": 2580,
          "text": "Ren et al., [2023]",
          "paper_id": "bib.bib28",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3020,
          "end_pos": 3042,
          "text": "Bahmani et al., [2024]",
          "paper_id": "bib.bib2",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib5",
            "bib.bib1",
            "bib.bib12"
          ]
        }
      ]
    },
    "3 Preliminaries": {
      "content": "HexPlane(Cao & Johnson, [2023]; Fridovich-Keil et al., [2023]) is an explicit and structured representation designed for efficient modeling of dynamic 3D scenes, leveraging feature planes to encode spacetime data. A dynamic 3D scene is represented as six 2D feature planes, each aligned with one of the major planes in the 4D spacetime grid. These planes are represented as ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\], comprising a Spatial TriPlane (Chan et al., [2022]) with ùí´x‚Äãysubscriptùí´ùë•ùë¶\\\\mathcal{P}\\_{xy}, ùí´x‚Äãzsubscriptùí´ùë•ùëß\\\\mathcal{P}\\_{xz}, and ùí´y‚Äãzsubscriptùí´ùë¶ùëß\\\\mathcal{P}\\_{yz}, and a Spatial-Time TriPlane with ùí´t‚Äãxsubscriptùí´ùë°ùë•\\\\mathcal{P}\\_{tx}, ùí´t‚Äãysubscriptùí´ùë°ùë¶\\\\mathcal{P}\\_{ty}, and ùí´t‚Äãzsubscriptùí´ùë°ùëß\\\\mathcal{P}\\_{tz}. To query the HexPlane at a point ùê©=(t,x,y,z)ùê©ùë°ùë•ùë¶ùëß\\\\mathbf{p}=(t,x,y,z), features are extracted from the corresponding coordinates on each of the six planes and fused into a comprehensive representation. This fused feature vector is then passed through a lightweight network to predict scene attributes for ùê©ùê©\\\\mathbf{p}.\n\nDiffusion Transformers (DiT) (Peebles & Xie, [2023]) are diffusion-based generative models using transformers to gradually convert Gaussian noise into data samples through denoising steps. The forward diffusion adds Gaussian noise over time, with a noised sample at step tùë°t given by\nùê±t=Œ±t‚Äãùê±0+1‚àíŒ±t‚Äãœµ,œµ‚àºùí©‚Äã(ùüé,ùêà)formulae-sequencesubscriptùê±ùë°subscriptùõºùë°subscriptùê±01subscriptùõºùë°italic-œµsimilar-toitalic-œµùí©0ùêà\\\\mathbf{x}\\_{t}=\\\\sqrt{\\\\alpha\\_{t}}\\\\mathbf{x}\\_{0}+\\\\sqrt{1-\\\\alpha\\_{t}}\\\\mathbf{\\\\epsilon},\\\\quad\\\\epsilon\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}),\nwhere Œ±tsubscriptùõºùë°\\\\alpha\\_{t} controls the noise schedule. The reverse diffusion, using a neural network œµŒ∏subscriptitalic-œµùúÉ\\\\epsilon\\_{\\\\theta}, aims to denoise ùê±tsubscriptùê±ùë°\\\\mathbf{x}\\_{t} to recover ùê±0subscriptùê±0\\\\mathbf{x}\\_{0}, expressed as:\nùê±t‚àí1=1Œ±t‚Äã(ùê±t‚àí1‚àíŒ±t‚ÄãœµŒ∏‚Äã(ùê±t,t))subscriptùê±ùë°11subscriptùõºùë°subscriptùê±ùë°1subscriptùõºùë°subscriptitalic-œµùúÉsubscriptùê±ùë°ùë°\\\\mathbf{x}\\_{t-1}=\\\\frac{1}{\\\\sqrt{\\\\alpha\\_{t}}}(\\\\mathbf{x}\\_{t}-\\\\sqrt{1-\\\\alpha\\_{t}}\\\\epsilon\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)).\nNew samples are generated by repeating this reverse process.",
      "citations": [
        {
          "start_pos": 9,
          "end_pos": 30,
          "text": "Cao & Johnson, [2023]",
          "paper_id": "bib.bib7",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 42,
          "end_pos": 61,
          "text": "Keil et al., [2023]",
          "paper_id": "bib.bib11",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 645,
          "end_pos": 664,
          "text": "Chan et al., [2022]",
          "paper_id": "bib.bib8",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1280,
          "end_pos": 1301,
          "text": "Peebles & Xie, [2023]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "4 Our Approach": {
      "content": "DynamicCity strives to generate dynamic 3D LiDAR scenes with semantic information, which mainly consists of a VAE for 4D LiDAR encoding using HexPlane (Cao & Johnson, [2023]; Fridovich-Keil et al., [2023]) (Sec. [4.1]VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")), and a DiT for HexPlane generation (Sec. [4.2]Diffusion Transformer for HexPlane ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")). Given a 4D LiDAR scene, _i.e._, a dynamic 3D LiDAR sequence ùêê‚àà‚ÑùT√óX√óY√óZ√óCùêêsuperscript‚Ñùùëáùëãùëåùëçùê∂\\\\mathbf{Q}\\\\in\\\\mathbb{R}^{T\\\\times X\\\\times Y\\\\times Z\\\\times C}, where TùëáT, XùëãX, YùëåY, ZùëçZ, and Cùê∂C denote the sequence length, height, width, depth, and channel size, respectively, the VAE first aims to encode an efficient 4D representation, HexPlane ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\], which is then decoded for reconstructing 4D scenes with semantics. After obtaining HexPlane embeddings, DynamicCity leverages a DiT-based framework for 4D LiDAR generation. Diverse conditions could be introduced into the generation process, facilitating a range of downstream applications (Sec. [4.3]Downstream Applications ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")). The overview of the proposed DynamicCity pipeline is illustrated in Fig. [2]Figure 2 ‚Ä£ 2 Related Work ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\").\n\n![Refer to caption]Figure 3: VAE for Encoding 4D LiDAR Scenes.\nWe use HexPlane ‚Ñã‚Ñã\\\\mathcal{H} as the 4D representation.\nfŒ∏subscriptùëìùúÉf\\_{\\\\theta} and gœïsubscriptùëîitalic-œïg\\_{\\\\phi} are convolution-based networks with downsampling and upsampling operations, respectively.\nh‚Äã(‚ãÖ)‚Ñé‚ãÖh(\\\\cdot) denotes the projection network based on transformer modules.\n\n### 4.1 VAE for 4D LiDAR Scenes\n\nEncoding HexPlane.\nAs shown in Fig. [3]Figure 3 ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the VAE could encode a 4D LiDAR scene ùêêùêê\\\\mathbf{Q} as a HexPlane ‚Ñã‚Ñã\\\\mathcal{H}. It first utilizes a shared 3D convolutional feature extractor ùíáŒ∏‚Äã(‚ãÖ)subscriptùíáùúÉ‚ãÖ\\\\bm{f}\\_{\\\\theta}(\\\\cdot) to extract and downsample features from each LiDAR frame, resulting in a feature volume sequence ùí≥t‚Äãx‚Äãy‚Äãz‚àà‚ÑùT√óX√óY√óZ√óCsubscriptùí≥ùë°ùë•ùë¶ùëßsuperscript‚Ñùùëáùëãùëåùëçùê∂\\\\mathcal{X}\\_{txyz}\\\\in\\\\mathbb{R}^{T\\\\times X\\\\times Y\\\\times Z\\\\times C}.\n\nTo encode and compress ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz} into compact 2D feature maps of ‚Ñã‚Ñã\\\\mathcal{H}, we propose a novel Projection Module with multiple projection networks ùíâ‚Äã(‚ãÖ)ùíâ‚ãÖ\\\\bm{h}(\\\\cdot). To project a high-dimensional feature input ùí≥in‚àà‚ÑùDk1√óDk2√ó‚ãØ√óDkn√óDr1√óDr2√ó‚ãØ√óDrm√óCsubscriptùí≥insuperscript‚Ñùsuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõsuperscriptsubscriptùê∑r1superscriptsubscriptùê∑r2‚ãØsuperscriptsubscriptùê∑rùëöùê∂\\\\mathcal{X}\\_{\\\\text{in}}\\\\in\\\\mathbb{R}^{{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}}\\\\times{D\\_{\\\\text{r}}^{1}\\\\times D\\_{\\\\text{r}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{r}}^{m}}\\\\times C} as a lower-dimensional feature output ùí≥out‚àà‚ÑùDk1√óDk2√ó‚ãØ√óDkn√óCsubscriptùí≥outsuperscript‚Ñùsuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõùê∂\\\\mathcal{X}\\_{\\\\text{out}}\\\\in\\\\mathbb{R}^{{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}}\\\\times C}, the projection network ùíâSr‚Äã(‚ãÖ)subscriptùíâsubscriptùëÜr‚ãÖ\\\\bm{h}\\_{S\\_{\\\\text{r}}}(\\\\cdot) first reshapes ùí≥i‚Äãnsubscriptùí≥ùëñùëõ\\\\mathcal{X}\\_{in} into a 3-dimensional feature ùí≥Sk‚ÄãSr‚Ä≤‚àà‚ÑùSk√óSr√óCsubscriptsuperscriptùí≥‚Ä≤subscriptùëÜksubscriptùëÜrsuperscript‚ÑùsubscriptùëÜksubscriptùëÜrùê∂\\\\mathcal{X}^{\\\\prime}\\_{S\\_{\\\\text{k}}S\\_{\\\\text{r}}}\\\\in\\\\mathbb{R}^{S\\_{\\\\text{k}}\\\\times S\\_{\\\\text{r}}\\\\times C} by grouping the dimensions into the two new dimensions, _i.e._, SksubscriptùëÜkS\\_{\\\\text{k}} the dimension that will be kept, and SrsubscriptùëÜrS\\_{\\\\text{r}} the dimension that will be reduced, where Sk=Dk1√óDk2√ó‚ãØ√óDknsubscriptùëÜksuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõS\\_{\\\\text{k}}=D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}, and Sr=Dr1√óDr2√ó‚ãØ√óDrmsubscriptùëÜrsuperscriptsubscriptùê∑r1superscriptsubscriptùê∑r2‚ãØsuperscriptsubscriptùê∑rùëöS\\_{\\\\text{r}}=D\\_{\\\\text{r}}^{1}\\\\times D\\_{\\\\text{r}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{r}}^{m}. Afterward, ùíâSr‚Äã(‚ãÖ)subscriptùíâsubscriptùëÜr‚ãÖ\\\\bm{h}\\_{S\\_{\\\\text{r}}}(\\\\cdot) utilizes a transformer-based operation to project the reshaped feature ùí≥Sk‚ÄãSr‚Ä≤subscriptsuperscriptùí≥‚Ä≤subscriptùëÜksubscriptùëÜr\\\\mathcal{X}^{\\\\prime}\\_{S\\_{\\\\text{k}}S\\_{\\\\text{r}}} to ùí≥Sk‚Ä≤‚Ä≤‚àà‚ÑùSk√óCsubscriptsuperscriptùí≥‚Ä≤‚Ä≤subscriptùëÜksuperscript‚ÑùsubscriptùëÜkùê∂\\\\mathcal{X}^{\\\\prime\\\\prime}\\_{S\\_{\\\\text{k}}}\\\\in\\\\mathbb{R}^{S\\_{\\\\text{k}}\\\\times C}, which is then reshaped to the expected lower-dimensional feature output ùí≥outsubscriptùí≥out\\\\mathcal{X}\\_{\\\\text{out}}. Formally, the projection network is formulated as:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùí≥out{Dk1√óDk2√ó‚ãØ√óDkn}√óC=ùíâSr‚Äã(ùí≥in{Dk1√óDk2√ó‚ãØ√óDkn}√ó{Dr1√óDr2√ó‚ãØ√óDrm}√óC),superscriptsubscriptùí≥outsuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõùê∂subscriptùíâsubscriptùëÜrsuperscriptsubscriptùí≥insuperscriptsubscriptùê∑k1superscriptsubscriptùê∑k2‚ãØsuperscriptsubscriptùê∑kùëõsuperscriptsubscriptùê∑r1superscriptsubscriptùê∑r2‚ãØsuperscriptsubscriptùê∑rùëöùê∂\\\\mathcal{X}\\_{\\\\text{out}}^{\\\\{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}\\\\}\\\\times C}=\\\\bm{h}\\_{S\\_{\\\\text{r}}}(\\\\mathcal{X}\\_{\\\\text{in}}^{\\\\{D\\_{\\\\text{k}}^{1}\\\\times D\\_{\\\\text{k}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{k}}^{n}\\\\}\\\\times\\\\{D\\_{\\\\text{r}}^{1}\\\\times D\\_{\\\\text{r}}^{2}\\\\times\\\\cdots\\\\times D\\_{\\\\text{r}}^{m}\\\\}\\\\times C})~{}, |  | (1) |\n\nwhere their feature dimensions are added as the upscript for ùí≥insuperscriptùí≥in\\\\mathcal{X}^{\\\\text{in}} and ùí≥outsuperscriptùí≥out\\\\mathcal{X}^{\\\\text{out}}, respectively.\n\nTo construct the spatial feature planes ùí´x‚Äãysubscriptùí´ùë•ùë¶\\\\mathcal{P}\\_{xy}, ùí´x‚Äãzsubscriptùí´ùë•ùëß\\\\mathcal{P}\\_{xz}, and ùí´y‚Äãzsubscriptùí´ùë¶ùëß\\\\mathcal{P}\\_{yz}, the Projection Module first generate the XYZ Feature Volume ùí≥x‚Äãy‚Äãz=ùíât‚Äã(ùí≥t‚Äãx‚Äãy‚Äãz)subscriptùí≥ùë•ùë¶ùëßsubscriptùíâùë°subscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{xyz}=\\\\bm{h}\\_{t}(\\\\mathcal{X}\\_{txyz}). Rather than directly access the heavy feature volume sequence ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz}, ùíâz‚Äã(‚ãÖ)subscriptùíâùëß‚ãÖ\\\\bm{h}\\_{z}(\\\\cdot), ùíây‚Äã(‚ãÖ)subscriptùíâùë¶‚ãÖ\\\\bm{h}\\_{y}(\\\\cdot), and ùíâx‚Äã(‚ãÖ)subscriptùíâùë•‚ãÖ\\\\bm{h}\\_{x}(\\\\cdot) are applied to ùí≥x‚Äãy‚Äãzsubscriptùí≥ùë•ùë¶ùëß\\\\mathcal{X}\\_{xyz} for reducing the spatial dimensions of ùí≥x‚Äãy‚Äãzsubscriptùí≥ùë•ùë¶ùëß\\\\mathcal{X}\\_{xyz} along the z-axis, y-axis, and x-axis, respectively. The temporal feature planes ùí´t‚Äãx,ùí´t‚Äãy,subscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty}, and ùí´t‚Äãzsubscriptùí´ùë°ùëß\\\\mathcal{P}\\_{tz} are directly obtained from ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz} by simultaneously removing two spatial dimensions with ùíâz‚Äãy‚Äã(‚ãÖ),ùíâx‚Äãz‚Äã(‚ãÖ)subscriptùíâùëßùë¶‚ãÖsubscriptùíâùë•ùëß‚ãÖ\\\\bm{h}\\_{zy}(\\\\cdot),\\\\bm{h}\\_{xz}(\\\\cdot), and ùíâx‚Äãy‚Äã(‚ãÖ)subscriptùíâùë•ùë¶‚ãÖ\\\\bm{h}\\_{xy}(\\\\cdot), respectively. Consequently, we could construct the HexPlane ‚Ñã‚Ñã\\\\mathcal{H} based on the encoded six feature planes, including ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,subscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty}, and ùí´t‚Äãzsubscriptùí´ùë°ùëß\\\\mathcal{P}\\_{tz}.\n\nDecoding HexPlane.\nBased on the HexPlane ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\], we employ an Expansion & Squeeze Strategy (ESS), which could efficiently recover the feature volume sequence by decoding the feature planes in parallel for 4D LiDAR scene reconstruction. ESS first duplicates and expands each feature plane ùí´ùí´\\\\mathcal{P} to match the shape of ùí≥t‚Äãx‚Äãy‚Äãzsubscriptùí≥ùë°ùë•ùë¶ùëß\\\\mathcal{X}\\_{txyz}, resulting in the list of six feature volume sequences: {ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPy‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãx,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãz}superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë¶ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë•superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùëß\\\\{\\\\mathcal{X}\\_{txyz}^{{P}\\_{xy}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{xz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{yz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tx}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{ty}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tz}}\\\\}. Afterward, ESS squeezes the corresponding six expanded feature volumes with Hadamard Product:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤=‚àèHadamard{ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPx‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPy‚Äãz,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãx,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãy,ùí≥t‚Äãx‚Äãy‚ÄãzPt‚Äãz}.subscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëßsubscriptproductHadamardsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë•ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë¶ùëßsuperscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë•superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùë¶superscriptsubscriptùí≥ùë°ùë•ùë¶ùëßsubscriptùëÉùë°ùëß\\\\mathcal{X}^{\\\\prime}\\_{txyz}=\\\\prod\\_{\\\\text{Hadamard}}{\\\\{\\\\mathcal{X}\\_{txyz}^{{P}\\_{xy}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{xz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{yz}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tx}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{ty}},\\\\mathcal{X}\\_{txyz}^{{P}\\_{tz}}\\\\}}~{}. |  | (2) |\n\nSubsequently, the convolutional network gœï‚Äã(‚ãÖ)subscriptùëîitalic-œï‚ãÖg\\_{\\\\phi}(\\\\cdot) is employed to upsample the volumes for generating dense semantic predictions ùêê‚Ä≤superscriptùêê‚Ä≤\\\\mathbf{Q}^{\\\\prime}:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùêê‚Ä≤=gœï‚Äã(Concat‚Äã(ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤,PE‚Äã(Pos‚Äã(ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤)))),superscriptùêê‚Ä≤subscriptùëîitalic-œïConcatsubscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëßPEPossubscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëß\\\\mathbf{Q}^{\\\\prime}=g\\_{\\\\phi}(\\\\texttt{Concat}(\\\\mathcal{X}^{\\\\prime}\\_{txyz},\\\\texttt{PE}(\\\\texttt{Pos}(\\\\mathcal{X}^{\\\\prime}\\_{txyz}))))~{}, |  | (3) |\n\nwhere Concat‚Äã(‚ãÖ)Concat‚ãÖ\\\\texttt{Concat}(\\\\cdot) and PE‚Äã(‚ãÖ)PE‚ãÖ\\\\texttt{PE}(\\\\cdot) denote the concatenation and sinusoidal positional encoding, respectively. Pos‚Äã(‚ãÖ)Pos‚ãÖ\\\\texttt{Pos}(\\\\cdot) returns the 4D position ùê©ùê©\\\\mathbf{p} of each voxel within the 4D feature volume ùí≥t‚Äãx‚Äãy‚Äãz‚Ä≤subscriptsuperscriptùí≥‚Ä≤ùë°ùë•ùë¶ùëß\\\\mathcal{X}^{\\\\prime}\\_{txyz}.\n\nOptimization.\nThe VAE is trained with a combined loss ‚ÑíVAEsubscript‚ÑíVAE\\\\mathcal{L}\\_{\\\\text{VAE}}, including a cross-entropy loss, a Lov√°sz-softmax loss (Berman et al., [2018]), and a Kullback-Leibler (KL) divergence loss:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑíVAE=‚ÑíCE‚Äã(ùêê,ùêê‚Ä≤)+Œ±‚Äã‚ÑíLov‚Äã(ùêê,ùêê‚Ä≤)+Œ≤‚Äã‚ÑíKL‚Äã(‚Ñã,ùí©‚Äã(ùüé,ùêà)),subscript‚ÑíVAEsubscript‚ÑíCEùêêsuperscriptùêê‚Ä≤ùõºsubscript‚ÑíLovùêêsuperscriptùêê‚Ä≤ùõΩsubscript‚ÑíKL‚Ñãùí©0ùêà\\\\mathcal{L}\\_{\\\\text{VAE}}=\\\\mathcal{L}\\_{\\\\text{CE}}(\\\\mathbf{Q},\\\\mathbf{Q}^{\\\\prime})+\\\\alpha\\\\mathcal{L}\\_{\\\\text{Lov}}(\\\\mathbf{Q},\\\\mathbf{Q}^{\\\\prime})+\\\\beta\\\\mathcal{L}\\_{\\\\text{KL}}(\\\\mathcal{H},\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}))~{}, |  | (4) |\n\nwhere ‚ÑíCEsubscript‚ÑíCE\\\\mathcal{L}\\_{\\\\text{CE}} is the cross-entropy loss between the input ùêêùêê\\\\mathbf{Q} and prediction ùêê‚Ä≤superscriptùêê‚Ä≤\\\\mathbf{Q}^{\\\\prime}, ‚ÑíLovsubscript‚ÑíLov\\\\mathcal{L}\\_{\\\\text{Lov}} is the Lov√°sz-softmax loss, and ‚ÑíKLsubscript‚ÑíKL\\\\mathcal{L}\\_{\\\\text{KL}} represents the KL divergence between the latent representation ‚Ñã‚Ñã\\\\mathcal{H} and the prior Gaussian distribution ùí©‚Äã(ùüé,ùêà)ùí©0ùêà\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}). Note that the KL divergence is computed for each feature plane of ‚Ñã‚Ñã\\\\mathcal{H} individually, and the term ‚ÑíKLsubscript‚ÑíKL\\\\mathcal{L}\\_{\\\\text{KL}} refers to the combined divergence over all six planes.\n\n![Refer to caption]Figure 4: Padded Rollout\n\n![Refer to caption]Figure 5: Condition Injection for DiT\n\n### 4.2 Diffusion Transformer for HexPlane\n\nAfter training the VAE, 4D semantic scenes can be embedded as HexPlane ‚Ñã=\\[ùí´x‚Äãy,ùí´x‚Äãz,ùí´y‚Äãz,ùí´t‚Äãx,ùí´t‚Äãy,ùí´t‚Äãz\\]‚Ñãsubscriptùí´ùë•ùë¶subscriptùí´ùë•ùëßsubscriptùí´ùë¶ùëßsubscriptùí´ùë°ùë•subscriptùí´ùë°ùë¶subscriptùí´ùë°ùëß\\\\mathcal{H}=\\[\\\\mathcal{P}\\_{xy},\\\\mathcal{P}\\_{xz},\\\\mathcal{P}\\_{yz},\\\\mathcal{P}\\_{tx},\\\\mathcal{P}\\_{ty},\\\\mathcal{P}\\_{tz}\\]. Building upon ‚Ñã‚Ñã\\\\mathcal{H}, we aim to leverage a DiT (Peebles & Xie, [2023]) model DœÑsubscriptùê∑ùúèD\\_{\\\\tau} to generate novel HexPlane, which could be further decoded as novel 4D scenes (see Fig. [2]Figure 2 ‚Ä£ 2 Related Work ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")(b)). However, training a DiT using token sequences naively generated from each feature plane of HexPlane could not guarantee high generation quality, mainly due to the absence of modeling spatial and temporal relations among the tokens.\n\nPadded Rollout Operation.\nGiven that the feature planes of HexPlane may share spatial or temporal dimensions, we employ the Padded Rollout Operation (PRO) to systematically arrange all six planes into a unified square feature map, incorporating zero paddings in the uncovered corner areas. As shown in Fig. [5]Figure 5 ‚Ä£ 4.1 VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the dimension of the 2D square feature map is (XdX+ZdZ+TdT)ùëãsubscriptùëëùëãùëçsubscriptùëëùëçùëásubscriptùëëùëá(\\\\frac{X}{d\\_{X}}+\\\\frac{Z}{d\\_{Z}}+\\\\frac{T}{d\\_{T}}), which minimizes the area for padding, where dXsubscriptùëëùëãd\\_{X}, dZsubscriptùëëùëçd\\_{Z}, and dTsubscriptùëëùëád\\_{T} represent the downsampling rates along the X, Z, and T axes, respectively. Subsequently, we follow DiT to first ‚Äúpatchify‚Äù the constructed 2D feature map, converting it into a sequence of N=((XdX+ZdZ+TdT)/p)2ùëÅsuperscriptùëãsubscriptùëëùëãùëçsubscriptùëëùëçùëásubscriptùëëùëáùëù2N=((\\\\frac{X}{d\\_{X}}+\\\\frac{Z}{d\\_{Z}}+\\\\frac{T}{d\\_{T}})/p)^{2} tokens, where pùëùp is the patch size, chosen so each token holds information from one feature plane. Following patchification, we apply the frequency-based positional embeddings to all tokens similar to DiT. Note that tokens corresponding to padding areas are excluded from the diffusion process. Consequently, the proposed PRO offers an efficient method for modeling spatial and temporal relationships within the token sequence.\n\nConditional Generation.\nDiT enables conditional generation through the use of Classifier-Free Guidance (CFG) (Ho & Salimans, [2022]).\nTo incorporate conditions into the generation process, we designed two branches for condition insertion (see Fig. [5]Figure 5 ‚Ä£ 4.1 VAE for 4D LiDAR Scenes ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\")).\nFor any condition cùëêc, we use the adaLN-Zero technique from DiT, generating scale and shift parameters from cùëêc and injecting them before and after the attention and feed-forward layers.\nTo handle the complexity of image-based conditions, we add a cross-attention block to better integrate the image condition into the DiT block.\n\n### 4.3 Downstream Applications\n\nBeyond unconditional 4D scene generation, we explore novel applications of DynamicCity through conditional generation and HexPlane manipulation.\n\nFirst, we showcase versatile uses of image conditions in the conditional generation pipeline: 1) HexPlane: By autoregressively generating the HexPlane, we extend scene duration beyond temporal constraints. 2) Layout: We control vehicle placement and dynamics in 4D scenes using conditions learned from bird‚Äôs-eye view sketches.\n\nTo manage ego vehicle motion, we introduce two numerical conditioning methods: 3) Command: Controls general ego vehicle motion via instructions. 4) Trajectory: Enables fine-grained control through specific trajectory inputs.\n\nInspired by SemCity (Lee et al., [2024]), we also manipulate the HexPlane during sampling to: 5) Inpaint: Edit 4D scenes by masking HexPlane regions and guiding sampling with the masked areas. For more details, kindly refer to Sec. [A.5]A.5 Downstream Applications ‚Ä£ Appendix A A Additional Implementation Details ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") in the Appendix.\n\nTable 1: Comparisons of 4D Scene Reconstruction. We report the mIoU scores of OccSora (Wang et al., [2024]) and our DynamicCity framework on the CarlaSC, Occ3D-Waymo, and Occ3D-nuScenes datasets, respectively, under different resolutions and sequence lengths. Symbol ‚Ä† denotes score reported in the OccSora paper. Other scores are reproduced using the official code.\n\n| Dataset | #Classes | Resolution | #Frames | OccSora | Ours |\n| --- | --- | --- | --- | --- | --- |\n| (Wang et al., [2024]) | (DynamicCity) |\n| --- | --- |\n| CarlaSC(Wilson et al., [2022]) | 10 | 128√ó\\\\times128√ó\\\\times8 | 4 | 41.01% | 79.61% (+38.6%) |\n| 10 | 128√ó\\\\times128√ó\\\\times8 | 8 | 39.91% | 76.18% (+36.3%) |\n| 10 | 128√ó\\\\times128√ó\\\\times8 | 16 | 33.40% | 74.22% (+40.8%) |\n| 10 | 128√ó\\\\times128√ó\\\\times8 | 32 | 28.91% | 59.31% (+30.4%) |\n| Occ3D-Waymo(Tian et al., [2023]) | 9 | 200√ó\\\\times200√ó\\\\times16 | 16 | 36.38% | 68.18% (+31.8%) |\n| Occ3D-nuScenes(Tian et al., [2023]) | 11 | 200√ó\\\\times200√ó\\\\times16 | 16 | 13.70% | 56.93% (+43.2%) |\n| 11 | 200√ó\\\\times200√ó\\\\times16 | 32 | 13.51% | 42.60% (+29.1%) |\n| 17 | 200√ó\\\\times200√ó\\\\times16 | 32 | 13.41% | 40.79% (+27.3%) |\n| 17 | 200√ó\\\\times200√ó\\\\times16 | 32 | 27.40%‚Ä† | 40.79% (+13.4%) |\n\nTable 2: Comparisons of 4D Scene Generation. We report the Inception Score (IS), Fr√©chet Inception Distance (FID), Kernel Inception Distance (KID), and the Precision (P) and Recall (R) rates of SemCity (Lee et al., [2024]), OccSora (Wang et al., [2024]), and our DynamicCity framework on the CarlaSC and Occ3D-Waymo datasets, respectively, in both the 2D and 3D spaces.\n\n| Dataset | Method | #Frames | Metric2D2D{}^{{\\\\color\\[rgb\\]{0.890625,0.421875,0.76171875}\\\\textbf{2D}}} | Metric3D3D{}^{{\\\\color\\[rgb\\]{0.5,0.625,0.8828125}\\\\textbf{3D}}} |\n| --- | --- | --- | --- | --- |\n| IS2D‚Üë‚Üë\\\\uparrow | FID2D‚Üì‚Üì\\\\downarrow | KID2D‚Üì‚Üì\\\\downarrow | P2D‚Üë‚Üë\\\\uparrow | R2D‚Üë‚Üë\\\\uparrow | IS3D‚Üë‚Üë\\\\uparrow | FID3D‚Üì‚Üì\\\\downarrow | KID3D‚Üì‚Üì\\\\downarrow | P3D‚Üë‚Üë\\\\uparrow | R3D‚Üë‚Üë\\\\uparrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| CarlaSC(Wilson et al., [2022]) | OccSora | 16 | 2.492 | 25.08 | 0.013 | 0.115 | 0.008 | 2.257 | 1559 | 52.72 | 0.380 | 0.151 |\n| Ours | 2.498 | 10.95 | 0.002 | 0.238 | 0.066 | 2.331 | 354.2 | 19.10 | 0.460 | 0.170 |\n| Occ3D-Waymo(Tian et al., [2023]) | OccSora | 16 | 1.926 | 82.43 | 0.094 | 0.227 | 0.014 | 3.129 | 3140 | 12.20 | 0.384 | 0.001 |\n| Ours | 1.945 | 7.138 | 0.003 | 0.617 | 0.096 | 3.206 | 1806 | 77.71 | 0.494 | 0.026 |",
      "citations": [
        {
          "start_pos": 152,
          "end_pos": 173,
          "text": "Cao & Johnson, [2023]",
          "paper_id": "bib.bib7",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 185,
          "end_pos": 204,
          "text": "Keil et al., [2023]",
          "paper_id": "bib.bib11",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 10601,
          "end_pos": 10622,
          "text": "Berman et al., [2018]",
          "paper_id": "bib.bib3",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 12282,
          "end_pos": 12303,
          "text": "Peebles & Xie, [2023]",
          "paper_id": "bib.bib26",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 14315,
          "end_pos": 14336,
          "text": "Ho & Salimans, [2022]",
          "paper_id": "bib.bib12",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": [
            "bib.bib2",
            "bib.bib5",
            "bib.bib1"
          ]
        },
        {
          "start_pos": 15666,
          "end_pos": 15684,
          "text": "Lee et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 16130,
          "end_pos": 16149,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 16515,
          "end_pos": 16534,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 16578,
          "end_pos": 16599,
          "text": "Wilson et al., [2022]",
          "paper_id": "bib.bib42",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 16873,
          "end_pos": 16892,
          "text": "Tian et al., [2023]",
          "paper_id": "bib.bib40",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 16976,
          "end_pos": 16995,
          "text": "Tian et al., [2023]",
          "paper_id": "bib.bib40",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 17466,
          "end_pos": 17484,
          "text": "Lee et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 17496,
          "end_pos": 17515,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 18102,
          "end_pos": 18123,
          "text": "Wilson et al., [2022]",
          "paper_id": "bib.bib42",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 18324,
          "end_pos": 18343,
          "text": "Tian et al., [2023]",
          "paper_id": "bib.bib40",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "5 Experiments": {
      "content": "### 5.1 Experimental Details\n\nDatasets.\nWe train the proposed model on the 1Occ3D-Waymo, 2Occ3D-nuScenes, and 3CarlaSC datasets. The former two from Occ3D(Tian et al., [2023]) are derived from Waymo(Sun et al., [2020]) and nuScenes(Caesar et al., [2020]), where LiDAR point clouds have been completed and voxelized to form occupancy data. Each occupancy scene has a resolution of 200√ó200√ó1620020016200\\\\times 200\\\\times 16, covering a region centered on the ego vehicle, extending 404040 meters in all directions and 6.46.46.4 meters vertically. The CarlaSC dataset (Wilson et al., [2022]) is a synthetic occupancy dataset, with a scene resolution of 128√ó128√ó81281288128\\\\times 128\\\\times 8, covering a region 25.625.625.6 meters around the ego vehicle, with a height of 333 meters.\n\nImplementation Details.\nOur experiments are conducted using eight NVIDIA A100-80G GPUs. The global batch size used for training the VAE is 888, while the global batch size for training the DiT is 128128128. Our latent HexPlane ‚Ñã‚Ñã\\\\mathcal{H} is compressed to half the size of the input ùêêùêê\\\\mathbf{Q} in each dimension, with the latent channels C=16ùê∂16C=16. The weight for the Lov√°sz-softmax and KL terms are set to 111 and 0.0050.0050.005, respectively. The learning rate for the VAE is 10‚àí3superscript10310^{-3}, while the learning rate for the DiT is 10‚àí4superscript10410^{-4}.\n\nEvaluation Metrics.\nThe mean intersection over union (mIoU) metric is used to evaluate the reconstruction results of VAE. For DiT, Inception Score, FID, KID, Precision, and Recall are calculated for evaluation. Specifically, we follow prior work (Lee et al., [2024]; Wang et al., [2024]) by rendering 3D scenes into 2D images and utilizing conventional 2D evaluation pipelines for assessment. Additionally, we train the 3D Encoder to directly extract features from the 3D data and calculate the metrics. For more details, kindly refer to Sec. [A.2]A.2 DiT Evaluation Metrics ‚Ä£ Appendix A A Additional Implementation Details ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") in the Appendix.\n\n![Refer to caption]Figure 6: Dynamic Scene Generation Results. We provide unconditional generation scenes from the 111st, 888th, and 161616th frames on Occ3D-Waymo (Left) and CarlaSC (Right), respectively. Kindly refer to the Appendix for complete sequential scenes and longer temporal modeling examples.\n\n### 5.2 4D Scene Reconstruction & Generation\n\nReconstruction.\nTo evaluate the effectiveness of the proposed VAE in encoding the 4D LiDAR sequence, we compare it with OccSora (Wang et al., [2024]) using the CarlaSC, Occ3D-Waymo, and Occ3D-nuScenes datasets. As shown in Tab. [1]Table 1 ‚Ä£ 4.3 Downstream Applications ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), DynamicCity outperforms OccSora on these datasets, achieving mIoU improvements of 38.6%, 31.8%, and 43.2% respectively, when the input number of frames is 16. These results highlight the superior performance of the proposed VAE.\n\nGeneration.\nTo demonstrate the effectiveness of DynamicCity in 4D scene generation, we compare the generation results with OccSora (Wang et al., [2024]) on the Occ3D-Waymo and CarlaSC datasets. As shown in Tab. [2]Table 2 ‚Ä£ 4.3 Downstream Applications ‚Ä£ 4 Our Approach ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the proposed method outperforms OccSora in terms of perceptual metrics in both 2D and 3D spaces. These results show that our model excels in both generation quality and diversity. Fig. [6]Figure 6 ‚Ä£ 5.1 Experimental Details ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") and Fig. [15]Figure 15 ‚Ä£ C.6 Comparisons with OccSora ‚Ä£ Appendix C C Additional Qualitative Results ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") show the 4D scene generation results, demonstrating that our model is capable of generating large dynamic scenes in both real-world and synthetic datasets. Our model not only exhibits the ability to generate moving scenes with static semantics shifting as a whole, but it is also capable of generating dynamic elements such as vehicles and pedestrians.\n\n![Refer to caption]Figure 7: Dynamic Scene Generation Applications. We demonstrate the capability of our model on a diverse set of downstream tasks. We show the 111st, 888th, and 161616th frames for simplicity. Kindly refer to the Appendix for complete sequential scenes and longer temporal modeling examples.\n\nApplications.\nFig. [7]Figure 7 ‚Ä£ 5.2 4D Scene Reconstruction & Generation ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") presents the results of our downstream applications. In tasks that involve inserting conditions into the DiT, such as command-conditional generation, trajectory-conditional generation, and layout-conditional generation, our model demonstrates the ability to generate reasonable scenes and dynamic elements while following the prompt to a certain extent. Additionally, the inpainting method proves that our HexPlane has explicit spatial meaning, enabling direct modifications within the scene by editing the HexPlane during inference.\n\n### 5.3 Ablation Studies\n\nWe conduct ablation studies to demonstrate the effectiveness of the components of DynamicCity.\n\nTable 3: Ablation Study on VAE Network Structures. We report the mIoU scores, training time (second-per-iteration), and training-time memory consumption (VRAM) of different Encoder and Decoder configurations on CarlaSC and Occ3D-Waymo, respectively. Note that ‚ÄúESS‚Äù denotes ‚ÄúExpansion & Squeeze‚Äù. The best and second-best values are in bold and underlined.\n\n| Encoder | Decoder | CarlaSC | Occ3D-Waymo |\n| --- | --- | --- | --- |\n| mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow | mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow |\n| --- | --- | --- | --- | --- | --- |\n| Average Pooling | Query | 60.97% | 0.236 | 12.46 | 49.37% | 1.563 | 69.66 |\n| Average Pooling | ESS | 68.02% | 0.143 | 4.27 | 55.72% | 0.758 | 20.31 |\n| Projection | Query | 68.73% | 0.292 | 13.59 | 61.93% | 2.128 | 73.15 |\n| Projection | ESS | 74.22% | 0.205 | 5.92 | 62.57% | 1.316 | 25.92 |\n\nTable 4: Ablation Study on HexPlane Downsampling (D.S.) Rates. We report the compression ratios (C.R.), mIoU scores, training speed (seconds per iteration), and training-time memory consumption on CarlaSC and Occ3D-Waymo. The best and second-best values are in bold and underlined.\n\n| D.S. Rates | CarlaSC | Occ3D-Waymo |\n| --- | --- | --- |\n| dTsubscriptùëëTd\\_{\\\\text{T}} | dXsubscriptùëëXd\\_{\\\\text{X}} | dYsubscriptùëëYd\\_{\\\\text{Y}} | dZsubscriptùëëZd\\_{\\\\text{Z}} | C.R.‚Üë‚Üë\\\\uparrow | mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow | C.R.‚Üë‚Üë\\\\uparrow | mIoU‚Üë‚Üë\\\\uparrow | Time (s)‚Üì‚Üì\\\\downarrow | VRAM (G)‚Üì‚Üì\\\\downarrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1 | 1 | 1 | 1 | 5.78% | 84.67% | 1.149 | 21.63 | Out-of-Memory | >80 |\n| 1 | 2 | 2 | 1 | 17.96% | 76.05% | 0.289 | 8.49 | 38.42% | 63.30% | 1.852 | 32.82 |\n| 2 | 2 | 2 | 2 | 23.14% | 74.22% | 0.205 | 5.92 | 48.25% | 62.37% | 0.935 | 24.9 |\n| 2 | 4 | 4 | 2 | 71.86% | 65.15% | 0.199 | 4.00 | 153.69% | 58.13% | 0.877 | 22.30 |\n\nTable 5: Ablation Study on Organizing HexPlane as Image Tokens. We report the Inception Score (IS), Fr√©chet Inception Distance (FID), Kernel Inception Distance (KID), and the Precision (P) and Recall (R) rates on CarlaSC. The best values are highlighted in bold.\n\n| Method | Metric2D2D{}^{{\\\\color\\[rgb\\]{0.890625,0.421875,0.76171875}\\\\textbf{2D}}} | Metric3D3D{}^{{\\\\color\\[rgb\\]{0.5,0.625,0.8828125}\\\\textbf{3D}}} |\n| --- | --- | --- |\n| IS2D‚Üë‚Üë\\\\uparrow | FID2D‚Üì‚Üì\\\\downarrow | KID2D‚Üì‚Üì\\\\downarrow | P2D‚Üë‚Üë\\\\uparrow | R2D‚Üë‚Üë\\\\uparrow | IS3D‚Üë‚Üë\\\\uparrow | FID3D‚Üì‚Üì\\\\downarrow | KID3D‚Üì‚Üì\\\\downarrow | P3D‚Üë‚Üë\\\\uparrow | R3D‚Üë‚Üë\\\\uparrow |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Direct Unfold | 2.496 | 205.0 | 0.248 | 0.000 | 0.000 | 2.269 | 9110 | 723.7 | 0.173 | 0.043 |\n| Vertical Concatenation | 2.476 | 12.79 | 0.003 | 0.191 | 0.042 | 2.305 | 623.2 | 26.67 | 0.424 | 0.159 |\n| Padded Rollout | 2.498 | 10.96 | 0.002 | 0.238 | 0.066 | 2.331 | 354.2 | 19.10 | 0.460 | 0.170 |\n\nVAE.\nThe effectiveness of the VAE is driven by two key innovations: Projection Module and Expansion & Squeeze Strategy (ESS). As shown in Tab. [3]Table 3 ‚Ä£ 5.3 Ablation Studies ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), the proposed Projection Module substantially improves HexPlane fitting performance, delivering up to a 12.56% increase in mIoU compared to traditional averaging operations. Additionally, compared to querying each point individually, ESS enhances HexPlane fitting quality with up to a 7.05% mIoU improvement, significantly boosts training speed by up to 2.06x, and reduces memory usage by a substantial 70.84%.\n\nHexPlane Dimensions.\nThe dimensions of HexPlane have a direct impact on both training efficiency and reconstruction quality. Tab. [4]Table 4 ‚Ä£ 5.3 Ablation Studies ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\") provides a comparison of various downsample rates applied to the original HexPlane dimensions, which are 16 √ó\\\\times 128 √ó\\\\times 128 √ó\\\\times 8 for CarlaSC and 16 √ó\\\\times 200 √ó\\\\times 200 √ó\\\\times 16 for Occ3D-Waymo. As the downsampling rates increase, both the compression rate and training efficiency improve significantly, but the reconstruction quality, measured by mIoU, decreases.\nTo achieve the optimal balance between training efficiency and reconstruction quality, we select a downsampling rate of dT=dX=dY=dZ=2subscriptùëëTsubscriptùëëXsubscriptùëëYsubscriptùëëZ2d\\_{\\\\text{T}}=d\\_{\\\\text{X}}=d\\_{\\\\text{Y}}=d\\_{\\\\text{Z}}=2.\n\nPadded Rollout Operation.\nWe compare the Padded Rollout Operation with different strategies for obtaining image tokens: 1) Direct Unfold: directly unfolding the six planes into patches and concatenating them; 2) Vertical Concat: vertically concatenating the six planes without aligning dimensions during the rollout process. As shown in Tab. [5]Table 5 ‚Ä£ 5.3 Ablation Studies ‚Ä£ 5 Experiments ‚Ä£ DynamicCity: Large-Scale LiDAR Generation from Dynamic Scenes\"), Padded Rollout Operation (PRO) efficiently models spatial and temporal relationships in the token sequence, achieving optimal generation quality.",
      "citations": [
        {
          "start_pos": 155,
          "end_pos": 174,
          "text": "Tian et al., [2023]",
          "paper_id": "bib.bib40",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 199,
          "end_pos": 217,
          "text": "Sun et al., [2020]",
          "paper_id": "bib.bib37",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 232,
          "end_pos": 253,
          "text": "Caesar et al., [2020]",
          "paper_id": "bib.bib6",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 567,
          "end_pos": 588,
          "text": "Wilson et al., [2022]",
          "paper_id": "bib.bib42",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1612,
          "end_pos": 1630,
          "text": "Lee et al., [2024]",
          "paper_id": "bib.bib17",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 1632,
          "end_pos": 1651,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 2554,
          "end_pos": 2573,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        },
        {
          "start_pos": 3140,
          "end_pos": 3159,
          "text": "Wang et al., [2024]",
          "paper_id": "bib.bib41",
          "single_citation": null,
          "citation_type": null,
          "nearest_citations": null
        }
      ]
    },
    "6 Conclusion": {
      "content": "We present DynamicCity, a framework for high-quality 4D LiDAR scene generation that captures the temporal dynamics of real-world environments. Our method introduces HexPlane, a compact 4D representation generated using a VAE with a Projection Module, alongside an Expansion & Squeeze Strategy to enhance reconstruction efficiency and accuracy. Additionally, our Masked Rollout Operation reorganizes HexPlane features for DiT-based diffusion, enabling versatile 4D scene generation. Extensive experiments demonstrate that DynamicCity surpasses state-of-the-art methods in both reconstruction and generation, offering significant improvements in quality, training speed, and memory efficiency. DynamicCity paves the way for future research in dynamic scene generation.",
      "citations": []
    }
  },
  "references": {
    "data": {
      "bib.bib1": {
        "id": "bib.bib1",
        "citation": "Alliegro et al. (2023)",
        "authors": "",
        "year": "",
        "title": "Polydiff: Generating 3d polygonal meshes with diffusion models.",
        "venue": "arXiv preprint arXiv:2312.11417",
        "pages": "",
        "url": "",
        "arxiv_id": "2312.11417",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Creating 3D content is a challenging task with a wide range of applications in movies, video games, design modeling, robotics, and virtual reality.\nCurrently, generating high-fidelity 3D shapes and scenes, requires extensive effort from skilled 3D artists who manually craft them.\nThis labor-intensive process can largely benefit from the assistance of learning-based generative models, which can streamline and enhance the creation workflow.\n\nIn the context of 3D shape modeling, the focus is primarily on surfaces composed of polygons, favored for their suitability in visualization, editing, and texturing. Modern graphics pipelines are optimized for mesh processing, but meshes present unique complexities for generative machine learning models as they are non-Euclidean structured and irregular.\nThey consist of vertices freely positioned in 3D space and faces of varying sizes, with the number of both vertices and faces being variable. This irregularity poses additional challenges for deep learning methods, which are typically designed to operate on regular, grid-based data structures as images.\n\nExisting works navigate these challenges by adopting alternate representations more suitable to learning methods, such as voxels \\[ [33]), [35])\\], point clouds \\[ [14]), [23]), [34])\\], and distance fields \\[ [29]), [6])\\]. However, adapting data to fit these formats often leads to a loss of the unique characteristics intrinsic to the original mesh representation, _e.g_. lack of sharp edges and planar surfaces. Additionally, the outputs from these methods usually require conversion back into meshes for downstream 3D content consumption. This conversion, typically done through postprocessing steps like marching cubes \\[ [21])\\] or other isosurface extraction methods, often results in over-tessellated or over-smoothed outputs, thus unable to achieve the quality of compact and high-fidelity meshes created by experts.\n\nTo this end, we propose PolyDiff (see Figure [1]Fig. 1 ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\")), a method that directly generates 3D shapes as polygonal meshes using Denoising Diffusion Probabilistic Models \\[ [30]), [16])\\]. In our approach, meshes are represented as triangle soups with discrete coordinates. During the noising phase, these coordinates are incrementally corrupted with categorical noise. We train a denoising transformer to reverse this noise on the categorical labels at any diffusion timestep. For inference, novel meshes can be generated by starting with fully noised triangle soups and applying the denoising process iteratively over a fixed number of steps. This discrete diffusion process aligns well with the inherently discrete characteristics of polygonal meshes. PolyDiff produces meshes that are not only cleaner but also more varied than those generated by existing state-of-the-art methods, showing an average FID gain of 18.2 and JSD gain of 5.8 with respect to the best-performing baseline.\n\nTo sum up, our contributions are as follows:\n\n- ‚Ä¢\n\n\nWe introduce a novel formulation for mesh generation, adapting discrete denoising diffusion models to operate on mesh data.\nThis is achieved by representing meshes as a quantized triangle soup, a comprehensive data structure encapsulating both the vertices and the faces of the 3D mesh.\n\n- ‚Ä¢\n\n\nOur method is evaluated on the task of unconditional mesh generation, where it outperforms current state-of-the-art approaches by producing significantly cleaner and more coherent results.",
            "citations": null
          },
          "2 Related Work": {
            "content": "Generative models have witnessed significant improvements in the past few years, especially thanks to the development of Denoising Diffusion Probabilistic Models (DDPMs) \\[ [30]), [16])\\]. Rather than learning to generate samples in a single forward pass as in the case of variational autoencoders (VAE, \\[ [19])\\]) and generative adversarial networks (GAN, \\[ [13])\\]), diffusion models exploit iterative denoising. A gradual corruption turns the data distribution into noise and then a model is trained to revert this process with multiple steps, each of which reconstructs a small amount of the information that the corruption removed. The success of these models has been particularly evident in boosting image generation quality \\[ [9]), [27])\\] and supporting techniques in visual computing \\[ [26])\\].\n\nThe largest part of the literature on DDPMs focuses on Gaussian diffusion processes (the noise is an isotropic Gaussian distribution) that operate in continuous state spaces. This prevents their application on discrete data as text and structural data as graphs with categorical nodes and edge attributes.\nOne of the initial formulations employing discrete state spaces for text applications was introduced in \\[ [2])\\]: this approach involved novel corruption processes to shape data generation and incorporated auxiliary losses to stabilize the training process.\nAn equivariant denoising diffusion model that operates on atom coordinates and categorical features was also defined in \\[ [17])\\] to generate molecules in the 3D space.\nMore recently, DiGress \\[ [32])\\] proposed to progressively edit graphs with a specific type of noise that consists of adding or removing edges and changing their categorical attributes.\nIn \\[ [28])\\], structured geometry data as floorplans are generated through a diffusion model that combines continuous and discrete denoising: it reorders the position of a set of polygonal elements that come with specific inter-relations. A guided noise injection was also proposed in\n\\[ [5])\\] to better control the positioning of each element in the set of polygons. The focus for those works is on 2D data and their application to 3D is not straightforward.\n\nEarly work on 3D shape generation leverages autoencoder architectures, with the seminal work AtlasNet \\[ [14])\\] proposing to deform primitive surface elements into a 3D shape and mainly building on point clouds.\nDDPMs have been also extended to 3D shape generation starting from point clouds, where the points are considered as particles that are diffused to a noise distribution under heat. Specifically, the authors of \\[ [23])\\] modeled the reverse diffusion process as a Markov chain conditioned on shape latent that follows a prior distribution parameterized via normalizing flows, and the training objective was derived from the variational bound of the likelihood of point clouds.\nAnother pioneering work proposed to combine a denoising diffusion model with the point-voxel 3D shape representation for unconditional shape generation and multiple 3D completion from a partial observation \\[ [35])\\].\nThe method in \\[ [34])\\] improved over the previous ones by operating on point clouds that are first mapped into regularized latent spaces and then fed to a diffusion model. The latent representation is hierarchical and combines global shape with point-structured information.\n\nIn literature, meshes are often regarded as a secondary output derived through post-processing techniques, such as the application of marching cubes \\[ [21])\\] on implicit functions.\nDiscretizing the 3D space is an alternative strategy to generate meshes. Specifically, the authors of \\[ [20])\\] proposed to train a diffusion model on a tetrahedral grid structure where each vertex has a Sign Distance Field (SDF) value. The grid is deformable and thus capable of capturing finer geometric details than what could be done with marching cubes as already discussed in \\[ [12])\\]. Still, the learning process passes through multiview RGBD images rather than directly building on raw mesh data structures and requires ad-hoc regularization terms to obtain reasonable results.\n\nOnly a few methods proposed to generate directly 3D meshes directly but none of them leverage DDPMs.\nBSP-Net \\[ [7])\\] learns instead an implicit field from point coordinates and a shape feature vector. It exploits plane equations corresponding to binary partitions of space, and their final grouping results in shapes with a markedly cuboidal and fragmented appearance.\nPolyGen \\[ [24])\\] employs an autoregressive approach for 3D mesh generation. The process involves two consecutive stages: the first stage unconditionally models mesh vertices, while the second stage models mesh faces based on the input vertices.\nHowever, the two-stage generation process of PolyGen might restrict the model‚Äôs flexibility as it does not seamlessly align with the inherent characteristics of 3D meshes, particularly the intricate interplay between mesh vertices and their topological arrangement into faces.\nIn contrast, our PolyDiff represents 3D meshes using a quantized triangle soup data structure and seamlessly models the joint distribution of mesh vertices and faces in a single stage.",
            "citations": null
          },
          "3 Background": {
            "content": "Diffusion Models. DDPMs are based on two main components: a noise model, and a denoising neural network. The noise model qùëûq is progressively applied to the sample ùê±0subscriptùê±0\\\\mathbf{x}\\_{0}, corrupting it into a sequence of increasingly noisy latent variables ùê±1:T=ùê±1,ùê±2,‚Ä¶,ùê±tsubscriptùê±:1ùëásubscriptùê±1subscriptùê±2‚Ä¶subscriptùê±ùë°\\\\mathbf{x}\\_{1:T}=\\\\mathbf{x}\\_{1},\\\\mathbf{x}\\_{2},\\\\ldots,\\\\mathbf{x}\\_{t}. The process is Markovian so it holds q‚Äã(ùê±1:T\\|ùê±0)=‚àèt=1Tq‚Äã(ùê±t\\|ùê±t‚àí1)ùëûconditionalsubscriptùê±:1ùëásubscriptùê±0superscriptsubscriptproductùë°1ùëáùëûconditionalsubscriptùê±ùë°subscriptùê±ùë°1q(\\\\mathbf{x}\\_{1:T}\\|\\\\mathbf{x}\\_{0})=\\\\prod\\_{t=1}^{T}q(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t-1}). The denoising network parametrized by Œ∏ùúÉ\\\\theta will learn to reverse the process so that pŒ∏‚Äã(ùê±0:T)=p‚Äã(ùê±T)‚Äã‚àèt=1Tp‚Äã(ùê±t‚àí1\\|ùê±t)subscriptùëùùúÉsubscriptùê±:0ùëáùëùsubscriptùê±ùëásuperscriptsubscriptproductùë°1ùëáùëùconditionalsubscriptùê±ùë°1subscriptùê±ùë°p\\_{\\\\theta}(\\\\mathbf{x}\\_{0:T})=p(\\\\mathbf{x}\\_{T})\\\\prod\\_{t=1}^{T}p(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t}).\n\nThe loss used to evaluate how well the output of the generative model pŒ∏‚Äã(ùê±0)subscriptùëùùúÉsubscriptùê±0p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}) fits the data distribution q‚Äã(ùê±0)ùëûsubscriptùê±0q(\\\\mathbf{x}\\_{0}) is based on a variational upper bound for the negative log-likelihood of the data ùê±ùê±\\\\mathbf{x}:\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  |  | ‚Ñívlb=ùîºq‚Äã\\[DKL‚Äã(q‚Äã(ùê±T\\|ùê±0)‚à•pŒ∏‚Äã(ùê±T))\\]subscript‚Ñívlbsubscriptùîºùëûdelimited-\\[\\]subscriptùê∑KLconditionalùëûconditionalsubscriptùê±ùëásubscriptùê±0subscriptùëùùúÉsubscriptùê±ùëá\\\\displaystyle\\\\mathcal{L}\\_{\\\\text{vlb}}=\\\\mathbb{E}\\_{q}\\[D\\_{\\\\text{KL}}(q(\\\\mathbf{x}\\_{T}\\|\\\\mathbf{x}\\_{0})\\\\parallel p\\_{\\\\theta}(\\\\mathbf{x}\\_{T}))\\] |  |\n|  |  | +ùîºq\\[‚àët=2TDKL(q(ùê±t‚àí1\\|ùê±t,ùê±0)‚à•pŒ∏(ùê±t‚àí1\\|ùê±t,t))\\]\\\\displaystyle+\\\\mathbb{E}\\_{q}\\[\\\\sum\\_{t=2}^{T}D\\_{\\\\text{KL}}(q(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t},\\\\mathbf{x}\\_{0})\\\\parallel p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t},t))\\] |  |\n|  |  | ‚àílog‚Å°pŒ∏‚Äã(ùê±0\\|ùê±1),subscriptùëùùúÉconditionalsubscriptùê±0subscriptùê±1\\\\displaystyle-\\\\log p\\_{\\\\theta}(\\\\mathbf{x}\\_{0}\\|\\\\mathbf{x}\\_{1}), |  | (1) |\n\nwhere ùîºq‚Äã(‚ãÖ)subscriptùîºùëû‚ãÖ\\\\mathbb{E}\\_{q}(\\\\cdot) denotes the expectation over the joint distribution q‚Äã(ùê±0:T)ùëûsubscriptùê±:0ùëáq(\\\\mathbf{x}\\_{0:T}).\n\nHowever, this model can be difficult to train as reconstructing the whole chain of variables to turn back some noise ùê±Tsubscriptùê±ùëá\\\\mathbf{x}\\_{T} into a realistic sample requires applying the network recursively. The training becomes efficient only under specific conditions which are all satisfied when the noise is Gaussian.\nMore specifically, if the transition probability in the forward process is formalized as a Gaussian distribution\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | q‚Äã(ùê±t\\|ùê±t‚àí1)=ùí©‚Äã(ùê±t;1‚àíŒ≤t‚Äãùê±t‚àí1,Œ≤t‚Äãùêà),ùëûconditionalsubscriptùê±ùë°subscriptùê±ùë°1ùí©subscriptùê±ùë°1subscriptùõΩùë°subscriptùê±ùë°1subscriptùõΩùë°ùêàq(\\\\mathbf{x}\\_{t}\\|\\\\mathbf{x}\\_{t-1})=\\\\mathcal{N}(\\\\mathbf{x}\\_{t};\\\\sqrt{1-\\\\beta\\_{t}}\\\\mathbf{x}\\_{t-1},\\\\beta\\_{t}\\\\mathbf{I}), |  | (2) |\n\nwith {Œ≤t‚àà(0,1)}t=1TsuperscriptsubscriptsubscriptùõΩùë°01ùë°1ùëá\\\\{\\\\beta\\_{t}\\\\in(0,1)\\\\}\\_{t=1}^{T} defining the noise schedule,\nand similarly it holds for the reverse process\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pŒ∏‚Äã(ùê±t‚àí1\\|ùê±t)=ùí©‚Äã(ùê±t‚àí1;ŒºŒ∏‚Äã(ùê±t,t),Œ£Œ∏‚Äã(ùê±t,t)),subscriptùëùùúÉconditionalsubscriptùê±ùë°1subscriptùê±ùë°ùí©subscriptùê±ùë°1subscriptùúáùúÉsubscriptùê±ùë°ùë°subscriptŒ£ùúÉsubscriptùê±ùë°ùë°p\\_{\\\\theta}(\\\\mathbf{x}\\_{t-1}\\|\\\\mathbf{x}\\_{t})=\\\\mathcal{N}(\\\\mathbf{x}\\_{t-1};\\\\mu\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t),\\\\Sigma\\_{\\\\theta}(\\\\mathbf{x}\\_{t},t)), |  | (3) |\n\nthen the KL divergence terms in the loss are tractable and can be computed analytically.\nFurthermore, via a simple re-parametrization the learning objective reduces to minimizing the L2 loss between the predicted noise vector and the ground truth applied noise.\n\nDiscrete Diffusion Models.\nIn the discrete data domain, each element xtd=1,‚Ä¶,Dsuperscriptsubscriptùë•ùë°ùëë1‚Ä¶ùê∑x\\_{t}^{d=1,\\\\ldots,D} of the vector ùê±tsubscriptùê±ùë°\\\\mathbf{x}\\_{t} represents a discrete random variable that can assume one value among Cùê∂C distinct categories \\[ [2]), [17]), [32])\\]. Here, the forward transition probability from state iùëñi to state jùëój can be represented by matrices \\[ùêêt\\]i,j=q‚Äã(xt=j\\|xt‚àí1=i)subscriptdelimited-\\[\\]subscriptùêêùë°ùëñùëóùëûsubscriptùë•ùë°conditionalùëósubscriptùë•ùë°1ùëñ\\[\\\\mathbf{Q}\\_{t}\\]\\_{i,j}=q(x\\_{t}=j\\|x\\_{t-1}=i). Moreover, by denoting the one-hot version of xtdsubscriptsuperscriptùë•ùëëùë°x^{d}\\_{t} with the row vector ùíôtdsubscriptsuperscriptùíôùëëùë°\\\\bm{x}^{d}\\_{t}, we can write\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | q‚Äã(ùíôtd\\|ùíôt‚àí1d)=Cat‚Äã(ùíôtd;ùíë=ùíôt‚àí1d‚Äãùêêt),ùëûconditionalsuperscriptsubscriptùíôùë°ùëësuperscriptsubscriptùíôùë°1ùëëCatsuperscriptsubscriptùíôùë°ùëëùíësuperscriptsubscriptùíôùë°1ùëësubscriptùêêùë°q(\\\\bm{x}\\_{t}^{d}\\|\\\\bm{x}\\_{t-1}^{d})=\\\\texttt{Cat}(\\\\bm{x}\\_{t}^{d};\\\\bm{p}=\\\\bm{x}\\_{t-1}^{d}\\\\mathbf{Q}\\_{t}), |  | (4) |\n\nwhere Cat‚Äã(ùíôtd;ùê©)Catsubscriptsuperscriptùíôùëëùë°ùê©\\\\texttt{Cat}(\\\\bm{x}^{d}\\_{t};\\\\mathbf{p}) is a categorical distribution over the one-hot vector ùíôtdsubscriptsuperscriptùíôùëëùë°\\\\bm{x}^{d}\\_{t}, with probabilities given by the row vector ùê©ùê©\\\\mathbf{p}. Here, ùíôt‚àí1d‚Äãùêêtsuperscriptsubscriptùíôùë°1ùëësubscriptùêêùë°\\\\bm{x}\\_{t-1}^{d}\\\\mathbf{Q}\\_{t} should be understood as a row vector-matrix product, and the transition matrix ùêêtsubscriptùêêùë°\\\\mathbf{Q}\\_{t} is applied on each element ùíôtdsuperscriptsubscriptùíôùë°ùëë\\\\bm{x}\\_{t}^{d} independently, with qùëûq that factorizes on these higher dimensions as well.\n\nIn the following, we will drop the superscript dùëëd for simplicity, and write q‚Äã(ùíôt\\|ùíôt‚àí1)ùëûconditionalsubscriptùíôùë°subscriptùíôùë°1q(\\\\bm{x}\\_{t}\\|\\\\bm{x}\\_{t-1}) to refer to a single dùëëd-th element of ùê±tsubscriptùê±ùë°\\\\mathbf{x}\\_{t} and ùê±t‚àí1subscriptùê±ùë°1\\\\mathbf{x}\\_{t-1}. Starting from ùíô0subscriptùíô0\\\\bm{x}\\_{0}, the following tùë°t-step marginal is\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | q‚Äã(ùíôt\\|ùíô0)=Cat‚Äã(ùíôt;ùê©=ùíô0‚Äãùêê¬Øt),ùëûconditionalsubscriptùíôùë°subscriptùíô0Catsubscriptùíôùë°ùê©subscriptùíô0subscript¬Øùêêùë°q(\\\\bm{x}\\_{t}\\|\\\\bm{x}\\_{0})=\\\\texttt{Cat}(\\\\bm{x}\\_{t};\\\\mathbf{p}=\\\\bm{x}\\_{0}\\\\overline{\\\\mathbf{Q}}\\_{t}), |  | (5) |\n\nwith ùêê¬Øt=ùêê1‚Äãùêê2‚Äã‚ãØ‚Äãùêêtsubscript¬Øùêêùë°subscriptùêê1subscriptùêê2‚ãØsubscriptùêêùë°\\\\overline{\\\\mathbf{Q}}\\_{t}=\\\\mathbf{Q}\\_{1}\\\\mathbf{Q}\\_{2}\\\\cdots\\\\mathbf{Q}\\_{t}, and the posterior at time t‚àí1ùë°1t-1 is\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | q(ùíôt‚àí1\\|\\\\displaystyle q(\\\\bm{x}\\_{t-1}\\| | ùíôt,ùíô0)=q‚Äã(ùíôt\\|ùíôt‚àí1,ùíô0)‚Äãq‚Äã(ùíôt‚àí1\\|ùíô0)q‚Äã(ùíôt\\|ùíô0)\\\\displaystyle\\\\bm{x}\\_{t},\\\\bm{x}\\_{0})=\\\\frac{q(\\\\bm{x}\\_{t}\\|\\\\bm{x}\\_{t-1},\\\\bm{x}\\_{0})q(\\\\bm{x}\\_{t-1}\\|\\\\bm{x}\\_{0})}{q(\\\\bm{x}\\_{t}\\|\\\\bm{x}\\_{0})} |  |\n|  | =CatabsentCat\\\\displaystyle=\\\\texttt{Cat} | (ùíôt‚àí1;ùê©=ùíôt‚Äãùêêt‚ä§‚äôùíô0‚Äãùêê¬Øt‚àí1ùíô0‚Äãùêê¬Øt‚Äãùíôt‚ä§),subscriptùíôùë°1ùê©direct-productsubscriptùíôùë°superscriptsubscriptùêêùë°topsubscriptùíô0subscript¬Øùêêùë°1subscriptùíô0subscript¬Øùêêùë°superscriptsubscriptùíôùë°top\\\\displaystyle\\\\left(\\\\bm{x}\\_{t-1};\\\\mathbf{p}=\\\\frac{\\\\bm{x}\\_{t}\\\\mathbf{Q}\\_{t}^{\\\\top}\\\\odot\\\\bm{x}\\_{0}\\\\overline{\\\\mathbf{Q}}\\_{t-1}}{\\\\bm{x}\\_{0}\\\\overline{\\\\mathbf{Q}}\\_{t}\\\\bm{x}\\_{t}^{\\\\top}}\\\\right), |  | (6) |\n\nwhere ‚äôdirect-product\\\\odot is element-wise multiplication.\nConsidering the Markov property of the forward noise process, it holds q‚Äã(ùíôt\\|ùíôt‚àí1,ùíô0)=q‚Äã(ùíôt\\|ùíôt‚àí1)ùëûconditionalsubscriptùíôùë°subscriptùíôùë°1subscriptùíô0ùëûconditionalsubscriptùíôùë°subscriptùíôùë°1q(\\\\bm{x}\\_{t}\\|\\\\bm{x}\\_{t-1},\\\\bm{x}\\_{0})=q(\\\\bm{x}\\_{t}\\|\\\\bm{x}\\_{t-1}). By factorizing the reverse denoising process so that it is conditionally independent over the d=1,‚Ä¶,Dùëë1‚Ä¶ùê∑d=1,\\\\ldots,D elements, the KL divergence between qùëûq and pŒ∏subscriptùëùùúÉp\\_{\\\\theta} can be computed by summing over all possible values of each random variable.\nWith a uniform transition matrix ùêêtsubscriptùêêùë°\\\\mathbf{Q}\\_{t}, the corresponding ùêê¬Øtsubscript¬Øùêêùë°\\\\overline{\\\\mathbf{Q}}\\_{t} is easy to compute and the diffusion model training runs efficiently.\nIt is also possible to substitute the variational upper bound in Eq. ( [3]Background ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\")) with a cross-entropy loss function which imposes a slightly stronger form of supervision, comparing the model‚Äôs predicted probability of each category against the clean input.",
            "citations": null
          },
          "4 PolyDiff": {
            "content": "Data Representation.\nWe tailor DDPMs for mesh generation and operate on its irregular data representation.\nEach mesh consists of a set of 3D vertices and a set of kùëòk-sided faces.\nMore formally, we indicate the set of vertices of a mesh as V={vi\\|i=1,‚Ä¶,n}ùëâconditional-setsubscriptùë£ùëñùëñ1‚Ä¶ùëõV=\\\\{v\\_{i}\\|i=1,\\\\ldots,n\\\\} and the set of faces as F={fj\\|j=1,‚Ä¶,m}ùêπconditional-setsubscriptùëìùëóùëó1‚Ä¶ùëöF=\\\\{f\\_{j}\\|j=1,\\\\ldots,m\\\\}.\nEach face comprises kùëòk indices to the set VùëâV and defines a single polygon. In this work, we focus on triangle meshes (k=3ùëò3k=3) but our approach can seamlessly extend to the domain of quadrangular meshes.\n\nFor a given triangle mesh, each vertex v‚àà‚Ñù3ùë£superscript‚Ñù3v\\\\in\\\\mathbb{R}^{3} is represented by a triplet of Euclidean coordinates\nvi=(xi,yi,zi)subscriptùë£ùëñsubscriptùë•ùëñsubscriptùë¶ùëñsubscriptùëßùëñv\\_{i}=(x\\_{i},y\\_{i},z\\_{i}), while each face f‚àà‚Ñ§3ùëìsuperscript‚Ñ§3f\\\\in\\\\mathbb{Z}^{3} by a triplet of vertex-indices fj=(i1,i2,i3)subscriptùëìùëósubscriptùëñ1subscriptùëñ2subscriptùëñ3f\\_{j}=(i\\_{1},i\\_{2},i\\_{3}).\nBy quantizing the space with 2Nsuperscript2ùëÅ2^{N} bins for each coordinate, the vertex set changes into V~={v~i=(Z‚Äã(xi),Z‚Äã(yi),Z‚Äã(zi))‚à£i=1,‚Ä¶,n}~ùëâconditional-setsubscript~ùë£ùëñùëçsubscriptùë•ùëñùëçsubscriptùë¶ùëñùëçsubscriptùëßùëñùëñ1‚Ä¶ùëõ\\\\tilde{V}=\\\\{\\\\tilde{v}\\_{i}=(Z(x\\_{i}),Z(y\\_{i}),Z(z\\_{i}))\\\\mid i=1,\\\\ldots,n\\\\} where Z:‚Ñù‚Üí{0,‚Ä¶,2N‚àí1}:ùëç‚Üí‚Ñù0‚Ä¶superscript2ùëÅ1Z:\\\\mathbb{R}\\\\rightarrow\\\\{0,\\\\ldots,2^{N}-1\\\\}. Thus, a mesh is represented by a _quantized triangle soup_ T‚àà‚Ñ§m√ó3√ó3ùëásuperscript‚Ñ§ùëö33T\\\\in\\\\mathbb{Z}^{m\\\\times 3\\\\times 3}.\n\nVertices and faces jointly determine the 3D object‚Äôs geometry and surface characteristics, with their interplay being vital to the mesh‚Äôs structure. Modeling them independently could result in geometric inconsistencies.\nOur quantized triangle soup representation offers a simple yet comprehensive way to encode the complete mesh geometry.\n\n![Refer to caption]Figure 2: PolyDiff represents meshes as quantized triangle soups. Each mesh face is composed of three vertices, with each vertex being represented by a triplet of discrete coordinate values.\nFor each mesh, the noising process incrementally alters the categorical values of the vertex coordinates over several timesteps.\nThe noised version of the mesh is input to a transformer network which is tasked with predicting the clean, uncorrupted mesh at any given timestep.\nThe training is driven by a cross-entropy loss between the network‚Äôs predicted vertex coordinates and those of the original, uncorrupted mesh.\n\nNoising Process.\nStarting from a set of SùëÜS meshes, we employ a discrete denoising diffusion model to learn the categorical distribution of the triangle soup data Tssubscriptùëáùë†T\\_{s} with s=1,‚Ä¶,Sùë†1‚Ä¶ùëÜs=1,\\\\ldots,S. It operates through a step-by-step modification of the discrete vertex coordinate values.\nIn forward diffusion, Tssubscriptùëáùë†T\\_{s} is subjected to a progressive introduction of noise across a sequence of timesteps. Noise perturbation leads to modifications in the categorical values corresponding to the quantized coordinates of the vertex triplets.\n\nDenoising Process. In reverse diffusion, a deep neural network is trained to predict the correct categorical value of the coordinates starting from the intermediate noised representation Tstsuperscriptsubscriptùëáùë†ùë°T\\_{s}^{t} at the timestep tùë°t.\nAt the core of the denoising network (Figure [2]Fig. 2 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\")) we employ a Vision Transformer (ViT \\[ [10])\\]), originally designed for diffusion-based image synthesis applications \\[ [3])\\].\nAt the timestep tùë°t of the reverse diffusion process, the denoising network takes as input the noisy mesh representation Tstsuperscriptsubscriptùëáùë†ùë°T\\_{s}^{t} and outputs the estimated denoised version Tst‚àí1superscriptsubscriptùëáùë†ùë°1T\\_{s}^{t-1}.\nThe process initiates with the transformation of the categorical values in Tstsuperscriptsubscriptùëáùë†ùë°T\\_{s}^{t} into continuous high-dimensional features, yielding an embedded tensor ùíØs,e‚Äãm‚ÄãbtsuperscriptsubscriptùíØùë†ùëíùëöùëèùë°\\\\mathcal{T}\\_{s,emb}^{t} with dimensions ‚Ñùm√ó3√ó3√óDsuperscript‚Ñùùëö33ùê∑\\\\mathbb{R}^{m\\\\times 3\\\\times 3\\\\times D}.\nAfter undergoing positional encoding and linear projection, these high-dimensional features are aggregated per face,\nresulting in a condensed matrix ‚Ñ±stsuperscriptsubscript‚Ñ±ùë†ùë°\\\\mathcal{F}\\_{s}^{t} in ‚Ñùm√óCsuperscript‚Ñùùëöùê∂\\\\mathbb{R}^{m\\\\times C}. This matrix is finally fed to the transformer alongside the diffusion timestep tùë°t and the object-category label to predict the configuration of the denoised mesh Tst‚àí1superscriptsubscriptùëáùë†ùë°1T\\_{s}^{t-1}.\n\nLoss Function.\nAs a loss function, we adopt the cross entropy computed between the predicted denoised mesh version and the original uncorrupted Tssubscriptùëáùë†T\\_{s}.\n\nWe denote the cross-entropy loss at each 3D vertex of the mesh as ‚Ñív=‚àí‚àëh=13‚àëc=02N‚àí1ph,c‚Äãlog‚Å°(p^h,c)superscript‚Ñíùë£superscriptsubscript‚Ñé13superscriptsubscriptùëê0superscript2ùëÅ1subscriptùëù‚Ñéùëêsubscript^ùëù‚Ñéùëê\\\\mathcal{L}^{v}=-\\\\sum\\_{h=1}^{3}\\\\sum\\_{c=0}^{2^{N}-1}p\\_{h,c}\\\\log(\\\\hat{p}\\_{h,c}),\nwhere h‚Ñéh ranges over the three coordinates of the vertex, pùëùp represents the ground truth one-hot distribution of quantized vertex coordinates extracted from Tssubscriptùëáùë†T\\_{s}, and p^^ùëù\\\\hat{p} denotes the predicted probabilities of denoised coordinates across the 2Nsuperscript2ùëÅ2^{N} quantized bins.\nConsequently, the overall loss is expressed as:\n\n|     |     |     |\n| --- | --- | --- |\n|  | ‚Ñíce=‚àëj=1m‚àëk=13‚Ñíj,kv,subscript‚Ñícesuperscriptsubscriptùëó1ùëösuperscriptsubscriptùëò13subscriptsuperscript‚Ñíùë£ùëóùëò\\\\mathcal{L}\\_{\\\\text{ce}}=\\\\sum\\_{j=1}^{m}\\\\sum\\_{k=1}^{3}{\\\\mathcal{L}^{v}\\_{j,k}}~{}, |  |\n\nAs a result, we formalize the task of mesh generation as a classification problem that can be scaled up with modern learning frameworks.\n\nImplementation Details.\nOur model is implemented in PyTorch and trained for a maximum of 2000 epochs on 8 NVIDIA A100 GPUs, with a batch size of 128 for each GPU. The training process spans 4 days.\nWe employ AdamW \\[ [22])\\] optimizer with a learning rate of 5e-4. The learning rate is modulated using a cosine annealing schedule throughout the training. Additionally, we incorporate a warmup phase during the initial 200 epochs.\nIn our experiments, we use 1000 diffusion timesteps and adopt a cosine noise schedule \\[ [25])\\].\nDuring training, all meshes are normalized such that the length of the long diagonal of the mesh bounding box is equal to 1. After normalization, the vertices undergo an 8-bit quantization process.\nWe train our model on multiple augmented versions of each 3D training model, obtained by varying the planar decimation angle.\nAdditionally, we apply random scaling by independently sampling scaling factors for each axis within the range of \\[0.75,1.25\\]0.751.25\\[0.75,1.25\\].\nIn the training phase, we learn a unique embedding for each object category, which is fed into the diffusion model as a conditioning. This approach allows us to produce examples that match a specific category during the inference stage.\n\n| Category | Model | MMD (‚Üì‚Üì\\\\downarrow) | COV (%, ‚Üë‚Üë\\\\uparrow) | 1-NNA (%, ‚Üì‚Üì\\\\downarrow) | JSD (‚Üì‚Üì\\\\downarrow) | FID (‚Üì‚Üì\\\\downarrow) |\n| --- | --- | --- | --- | --- | --- | --- |\n| Chair | AtlasNet \\[ [14])\\] | 18.08 | 22.42 | 83.03 | 54.87 | 209.48 |\n| BSPNet \\[ [7])\\] | 16.26 | 33.45 | 75.21 | 22.81 | 73.86 |\n| PolyGen \\[ [24])\\] | 23.74 | 37.09 | 86.61 | 71.26 | 48.27 |\n| PolyDiff | 18.57 | 49.58 | 58.67 | 14.69 | 41.07 |\n| Train | 16.01 | 53.58 | 50.36 | 11.60 | 11.00 |\n| Table | AtlasNet \\[ [14])\\] | 18.16 | 20.36 | 86.28 | 34.31 | 186.05 |\n| BSPNet \\[ [7])\\] | 15.33 | 33.43 | 76.35 | 20.97 | 63.57 |\n| PolyGen \\[ [24])\\] | 19.19 | 40.92 | 74.10 | 56.56 | 46.15 |\n| PolyDiff | 15.16 | 50.60 | 57.14 | 13.12 | 26.17 |\n| Train | 13.59 | 56.69 | 47.26 | 10.90 | 10.79 |\n| Bench | AtlasNet \\[ [14])\\] | 11.05 | 35.06 | 72.99 | 123.58 | 222.90 |\n| BSPNet \\[ [7])\\] | 10.33 | 36.21 | 73.28 | 101.99 | 85.69 |\n| PolyGen \\[ [24])\\] | 16.21 | 41.95 | 80.46 | 143.60 | 81.90 |\n| PolyDiff | 11.44 | 43.68 | 61.49 | 86.60 | 49.72 |\n| Train | 9.83 | 51.72 | 49.14 | 70.11 | 44.80 |\n| Display | AtlasNet \\[ [14])\\] | 14.12 | 43.54 | 67.01 | 74.49 | 197.60 |\n| BSPNet \\[ [7])\\] | 13.35 | 38.78 | 68.71 | 61.09 | 76.82 |\n| PolyGen \\[ [24])\\] | 17.61 | 44.90 | 62.93 | 81.59 | 56.03 |\n| PolyDiff | 15.28 | 45.58 | 56.80 | 69.02 | 42.60 |\n| Train | 13.36 | 60.54 | 45.92 | 59.84 | 28.15 |\n\nTable 1: Quantitative evaluation of the performance of PolyDiff with respect to PolyGen, BSPNet, and AtlasNet. We recall that only PolyGen directly works on mesh vertices and faces as PolyDiff.\n‚ÄòTrain‚Äô refers to the metrics computed using the training samples rather than the generated data.\nOur PolyDiff outperforms prior state-of-the-art both on the point cloud metrics and perceptual quality.\n\n| Chair | Diffusion steps | MMD (‚Üì‚Üì\\\\downarrow) | COV (%, ‚Üë‚Üë\\\\uparrow) | 1-NNA (%, ‚Üì‚Üì\\\\downarrow) | JSD (‚Üì‚Üì\\\\downarrow) |\n| PolyDiff Small | 300 | 19.36 | 51.39 | 64.00 | 16.98 |\n| 500 | 19.83 | 47.88 | 64.91 | 17.83 |\n| 1000 | 19.55 | 49.70 | 64.42 | 14.65 |\n|  | 2000 | 20.69 | 50.91 | 68.48 | 19.85 |\n| PolyDiff | 300 | 19.04 | 52.24 | 60.97 | 15.11 |\n| 500 | 18.67 | 52.48 | 59.82 | 14.47 |\n| 1000 | 18.96 | 50.67 | 60.30 | 14.33 |\n|  | 2000 | 19.97 | 49.94 | 64.06 | 16.69 |\n| Continuous Diff. | 1000 | 23.33 | 34.55 | 75.58 | 85.49 |\n| Train | - | 16.01 | 53.58 | 50.36 | 11.60 |\n\nTable 2: Analysis of the impact of the number of diffusion steps and denoising network model size for the Chair category.\nAdditionally, we conduct a comparative analysis between our discrete diffusion approach (PolyDiff) and continuous diffusion applied to 3D triangle soups.![Refer to caption]Figure 3: Novel shape generation vs nearest neighbor retrieval. Each row shows one sample generated by our PolyDiff (left, blue mesh) and the top-3 nearest neighbors (green) from the training set based on the Chamfer distance. The examples show that our method can generate novel shapes.![Refer to caption]Figure 4: Qualitative comparison of generated meshes. The instances generated by PolyDiff are noticeably cleaner and more realistic than those of the competitors that show small or overlapping triangles, artifacts, and missing parts.![Refer to caption]Figure 5: Qualitative comparison between our PolyDiff discrete diffusion model and a variant that employs standard continuous Gaussian noise. The continuous version exhibits noticeably poorer performance, affirming our hypothesis that discrete diffusion is better suited to the inherently discrete characteristics of mesh data.",
            "citations": null
          },
          "5 Experiments": {
            "content": "We evaluate PolyDiff for unconditional generation of 3D meshes.\nIn the following, we detail our experimental setup before presenting and discussing the results of our method.\n\n### 5.1 Experimental Setup\n\nDataset.\nWe use the ShapeNet \\[ [4])\\] dataset, focusing on four categories: chairs, benches, displays, and tables. The meshes are pre-processed via planar decimation which reduces the number of vertices and faces while combining thin, elongated triangles.\nAll the instances are elaborated in this way at 30 different angles, ranging from 1 to 60 degrees, to produce multiple decimated versions of the original mesh.\nWe then calculate the Hausdorff Distance for each produced version compared to the original one to identify and discard cases where the decimation process had negatively impacted the model‚Äôs integrity.\nFinally, we assembled a diverse collection of 3D models, comprising 2746 chairs, 576 benches, 487 displays, and 3340 tables.\nEach unique model in this collection comes with a variety of augmented versions given by the variation of the decimation angle.\nWe allocated 90% of the models to the training set and the remaining 10% to the testing set, maintaining this ratio across all object categories.\nThe models that did not meet our criteria post-decimation are set aside for validation purposes. The maximum number of faces is set to 800.\n\nEvaluation Metrics.\nAssessing the quality of unconditional generation is challenging due to the absence of a one-to-one mapping between generated samples and ground truth data.\nFollowing the methodology of previous studies \\[ [23]), [35]), [34]), [1])\\], we assess the quality of our synthesized shapes using four metrics: Minimum Matching Distance (MMD), Coverage (COV), 1-Nearest-Neighbor Accuracy (1-NNA) and the Jensen-Shannon Divergence (JSD).\nThe MMD score measures the fidelity of the generated samples and the COV score detects mode-collapse.\nThe 1-NNA metric uses a nearest-neighbor classifier to differentiate between generated and reference samples.\nThe JSD score measures the divergence between the point distributions of the generated set and the reference set.\nFor MMD and JSD, a lower score indicates better performance. Conversely, for COV, a higher score denotes better coverage, and for 1-NNA, a rate of 50% represents the optimal value.\nMMD and JSD scores are multiplied by a factor of 103superscript10310^{3}.\nAll these metrics are computed on 2048-dim point clouds uniformly sampled from meshes in the generated set and a reference test set. Point clouds are normalized into a bounding box of \\[‚àí1,1\\]3superscript113\\[-1,1\\]^{3}, so that the metrics focus on the shape of the 3D object rather than scale. As a point-set distance metric we adopt the Chamfer distance \\[ [11])\\].\nAdditionally, we consider the Frechet Inception Distances (FID) \\[ [15])\\].\nFID is calculated using views rendered from the meshes and serves as an indicator of the quality of the generated surfaces.\nFor each mesh, we render eight views from distinct camera positions uniformly spaced across the surface of a sphere.\nThe FID score is computed using features extracted from each view with an Inception-v3 model pre-trained on the ImageNet \\[ [8])\\] dataset.\n\n### 5.2 Results\n\nComparison to the state of the art. We evaluate the unconditional generation abilities of PolyDiff comparing it with AtlasNet \\[ [14])\\], BSPNet \\[ [7])\\], and PolyGen \\[ [24])\\].\nFor AtlasNet and BSPNet, both of which are based on autoencoder (AE) architectures, we adopt the methodology described in \\[ [1])\\] and fit a family of Gaussian Mixture Models (GMMs) on the latent space learned by the AE.\nWe then sample latent codes from this GMM-fitted distribution and pass them to the decoder component of the AE to generate a mesh.\nWe generate 1,000 examples for each category across all methods and then compute the generative metrics with the test set of our dataset as a reference.\nWe also consider calculating these metrics by comparing the training samples, instead of the generated data, with the reference test set. The results of this approach are presented and labeled as ‚ÄòTrain‚Äô in the tables.\nThe quantitative results are presented in Table [1]Table 1 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\") and show that PolyDiff achieves improved performance over the competitors in all shape categories and all metrics except MMD, according to which PolyDiff behaves slightly worse than BSPNet, but similarly to AtlasNet and always better than PolyGen which is the only competitor directly working on mesh vertices and faces like PolyDiff.\nWe remark that the reliability of MMD has been questioned in the past as it lacks sensitivity to low-quality results \\[ [34])\\]. Table [1]Table 1 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\") also presents the FID metric which captures the perceptual quality of our synthesized shapes and confirms the advantage of PolyDiff over the other methods.\n\nAs a qualitative evaluation, in Figure [4]Fig. 4 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\") we conduct a comparative analysis of the generated meshes, spanning across all categories and methods.\nThe meshes generated by AtlasNet are over-triangulated and often exhibit self-intersecting issues. In comparison to our method, AtlasNet also appears to have difficulties in accurately defining thin structures, such as chairs‚Äô legs or armrests.\nBSPNet generates meshes by combining convex pieces to form the final mesh. The generated meshes often have a blocky appearance and, at times, exhibit an unnatural triangulation pattern.\nThe meshes produced by PolyGen are often incomplete, this happens because of the autoregressive network employed which often produces an End Of Sequence token prematurely.\nIn contrast to PolyGen, our method demonstrates superior capability in generating 3D shapes that are both more coherent and cohesive. This advancement stems from our distinct approach of joint learning the vertices and faces of the mesh by utilizing a quantized triangle soup data structure as input to our discrete diffusion model.\n\nArchitecture and Design Choices.\nThe transformer architecture is a core component of our model and its capacity might impact the performance. To investigate this aspect we train PolyDiff on the chair category and compare the results obtained by our default U-ViT-Mid with those of the U-ViT-Small version \\[ [3])\\]. The results in Table [2]Table 2 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\") show that the architecture dimensionality minimally affects the results with the major difference visible only on the 1-NNA metric (52.82 vs 64.42). It is also interesting to note that the number of diffusion steps can be efficiently kept small (500-1000) as increasing it may be detrimental.\n\nWe designed PolyDiff to adopt discrete diffusion as it perfectly suits the discrete nature of the mesh data structure.\nTo validate this hypothesis we also design a model that shares the same denoising network as PolyDiff but differs in its use of a standard Gaussian diffusion process instead of a discrete diffusion process.\nA comparative analysis of these two models, specifically for the chair category, is presented in Table [2]Table 2 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\").\nHere, PolyDiff, operating with 1000 diffusion steps, demonstrates superior performance over its continuous diffusion counterpart.\nThis superiority is particularly notable in terms of the JSD metric. Additionally, we include qualitative results in Figure [5]Fig. 5 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\") where we compare samples generated with Continuous Diffusion objective (left) and Discrete Diffusion objective (right).\nNotably, the meshes produced using the continuous diffusion objective exhibit inconsistent triangles that fail to align properly with one another, leading to a poor-quality output mesh. These experiments further validate our hypothesis of adopting a discrete diffusion process for PolyDiff.\n\nNovel Shape Synthesis. To explore the degree of novelty generation of PolyDiff we show in Figure [3]Fig. 3 ‚Ä£ 4 PolyDiff ‚Ä£ PolyDiff: Generating 3D Polygonal Meshes with Diffusion Models\") our synthesized meshes in comparison to the top three nearest neighbors by Chamfer Distance from the training set.\nThe results confirm that our method is not simply memorizing train samples and can generate novel shapes.",
            "citations": null
          },
          "6 Limitations": {
            "content": "While PolyDiff demonstrates notable advancements in unconditional mesh generation, it does have its limitations.\nWhile we have shown PolyDiff to be effective at generative meshes of single objects, the generation of scene-level meshes remains yet to be explored.\nAdditionally, the sampling process in diffusion models is inherently slower compared to feedforward methods, which is an area that could benefit from further optimization.\nBetter sampling techniques \\[ [18])\\] and improved formulations \\[ [31])\\] can be adopted to speed up sampling.",
            "citations": null
          },
          "7 Conclusion": {
            "content": "In this paper, we have introduced a novel probabilistic generative model tailored for polygonal 3D meshes.\nOur method embraces the discrete nature of 3D meshes and employs a discrete diffusion model to learn the joint distribution of mesh vertices and faces.\nOur comprehensive analysis shows that PolyDiff achieves state-of-the-art performance in the unconditional mesh generation task, demonstrating an average improvement of 18.2 and 5.8 for FID and JSD metrics, respectively, compared to previous methods.\nOur approach can be employed to directly learn from human-crafted mesh data distributions, allowing for the generation of novel and diverse 3D meshes similar to those produced by skilled designers.\nThis ability holds the potential to significantly diminish the 3D artists‚Äô workload, unleashing creative possibilities that were previously untapped.\n\nAcknowledgements.\nThis study was carried out within the FAIR - Future Artificial Intelligence Research and received funding from the European Union Next-GenerationEU (PIANO NAZIONALE DI RIPRESA E RESILIENZA (PNRR) ‚Äì MISSIONE 4 COMPONENTE 2, INVESTIMENTO 1.3 ‚Äì D.D. 1555 11/10/2022, PE00000013).\nThis work was supported by the ERC Starting Grant Scan2CAD (804724).\nFurther, we extend our appreciation for the travel support provided by ELISE (GA No. 951847).",
            "citations": null
          }
        },
        "abstract": "We introduce PolyDiff, the first diffusion-based approach capable of directly\ngenerating realistic and diverse 3D polygonal meshes. In contrast to methods\nthat use alternate 3D shape representations (e.g. implicit representations),\nour approach is a discrete denoising diffusion probabilistic model that\noperates natively on the polygonal mesh data structure. This enables learning\nof both the geometric properties of vertices and the topological\ncharacteristics of faces. Specifically, we treat meshes as quantized triangle\nsoups, progressively corrupted with categorical noise in the forward diffusion\nphase. In the reverse diffusion phase, a transformer-based denoising network is\ntrained to revert the noising process, restoring the original mesh structure.\nAt inference, new meshes can be generated by applying this denoising network\niteratively, starting with a completely noisy triangle soup. Consequently, our\nmodel is capable of producing high-quality 3D polygonal meshes, ready for\nintegration into downstream 3D workflows. Our extensive experimental analysis\nshows that PolyDiff achieves a significant advantage (avg. FID and JSD\nimprovement of 18.2 and 5.8 respectively) over current state-of-the-art\nmethods."
      },
      "bib.bib2": {
        "id": "bib.bib2",
        "citation": "Bahmani et al. (2024)",
        "authors": "",
        "year": "",
        "title": "Tc4d: Trajectory-conditioned text-to-4d generation.",
        "venue": "arXiv preprint arXiv:2403.17920",
        "pages": "",
        "url": "",
        "arxiv_id": "2403.17920",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "Recent advances in video generation models \\[ [11]), [93]), [9]), [77]), [33]), [10]), [95]), [99])\\] enable the synthesis of dynamic visual content with unprecedented fidelity.\nThese advances have promoted the rapid development of techniques for 3D video generation (see Fig. [1]Figure 1 ‚Ä£ 1 Introduction ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\")), which use supervision from video generation models to produce animated 3D scenes, often with input conditions, e.g., video \\[ [39])\\], image \\[ [71])\\], or text prompt \\[ [78])\\].\nWith applications including visual effects, virtual reality, and industrial design, realistic and controllable generation of 4D content has broad potential impact.\n\n![Refer to caption]Figure 1: Scenes generated using trajectory-conditioned 4D generation (TC4D). We show scenes consisting of multiple dynamic objects generated with text prompts and composited together.\nThe scene is shown for different viewpoints (panels) and at different time steps (horizontal dimension).\nMotion is synthesized by animating the scene bounding box along a provided trajectory using a rigid transformation, and we optimize for local deformations that are consistent with the trajectory using supervision from a video diffusion model. Overall, our approach improves the amount and realism of motion in generated 4D scenes.\n\nAlthough methods for 4D generation show immense promise, they are yet limited in the quality and realism of synthesized motion effects.\nSpecifically, these methods animate a volumetric scene representation via learned deformation \\[ [50]), [71]), [108])\\] or appearance changes predicted by a neural representation \\[ [115]), [116]), [39]), [4])\\] or generative model \\[ [63])\\].\nSince the scene is confined to a particular region‚Äîe.g., a 3D bounding box containing the volumetric representation‚Äîthe synthesized motion is highly local, and the magnitude of motion is typically much smaller than the scale of the scene itself.\nFor example, existing techniques can synthesize characters that walk in place, gesticulate, or sway, but they cannot move around a scene or exhibit global motion effects in general.\nOverall, there is a stark contrast in realism between motion effects synthesized with video generation models and existing techniques for 4D generation (see Fig. [2]Figure 2 ‚Ä£ 1 Introduction ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\")).\n\nTo address this limitation, we consider the specific problem of text-to-4D generation with both local and global motion, where global motions occur at scales larger than the bounding box of an object.\nAs existing architectures are incompatible with synthesizing global motion, we require a new motion representation that facilitates learning motion at coarse and fine scales.\nAdditionally, depicting global motion requires a large number of video frames, but current open-source video models typically output only a few tens of frames \\[ [9])\\].\nThus, we require a solution that decouples the temporal resolution and duration of generated 4D scenes from the output size constraints of the video generation model used for supervision.\n\nOur solution to this problem uses trajectory conditioning for 4D generation (TC4D)‚Äîa form of coarse-scale motion guidance that enables a novel decomposition of global and local motion effects.\nSpecifically, we first use a text-to-3D model \\[ [4])\\] to generate a static scene.\nThen, we model global motion by animating the bounding box of an object using a rigid transformation along a 3D trajectory.\nWe parameterize the trajectory using a spline specified by a user.\nAfter fixing the global motion, we use supervision from a video diffusion model to learn local motion that is consistent with the global motion along the trajectory.\n\nWe model local motion along the trajectory by optimizing a time-varying deformation field based on a trajectory-aware version of video score distillation sampling (VSDS) \\[ [78])\\].\nThat is, we apply VSDS to arbitrarily long trajectories by stochastically sampling segments of the trajectory and supervising a deformation model that is used to animate the scene.\nWe observe that the quality of synthesized motion effects using the deformation model is highly dependent on the diffusion time steps used with VSDS; sampling early timesteps introduces relatively no motion, but sampling later time steps leads to unrealistic, high-frequency jitter.\nTo address this issue, we introduce an annealing procedure that gradually modifies the interval of sampled diffusion time steps during optimization to achieve temporally consistent motion.\nAltogether, trajectory conditioning enables coherent synthesis of local and global scene animation, dramatically improving the amount and realism of motion in generated 4D scenes.\n\nIn summary, we make the following contributions.\n\n- ‚Ä¢\n\n\nWe introduce the task of 4D synthesis with global motion and propose a novel solution based on trajectory conditioning that decouples motion into global and local components.\n\n- ‚Ä¢\n\n\nWe demonstrate novel applications in text-to-4D generation with global motion, including 4D generation from arbitrary trajectories and compositional 4D scene synthesis.\n\n- ‚Ä¢\n\n\nWe conduct an extensive evaluation of the approach, including ablation and user studies, and we demonstrate state-of-the-art results for text-to-4D generation.\n\n\n![Refer to caption]Figure 2: Comparing text-to-video and text-to-4D generation.\nExisting methods for video generation (e.g., VideoCrafter2 \\[ [14])\\]) create realistic objects with motion at both global and local scales. For example, a generated unicorn or corgi moves across the camera field of view (global motion) in concert with the animation of its legs and body (local motion). However, existing text-to-4D methods \\[ [4])\\] only generate a limited amount of motion on the spot and do not learn global motion in 3D space.",
            "citations": null
          },
          "2 Related Work": {
            "content": "This section reviews the most relevant areas of our work: text-to-video, text-to-3D, and text-to-4D generative models. For a comprehensive overview of recent advances in diffusion models and 4D generation, we refer readers to \\[ [66])\\] and \\[ [111])\\].\n\n#### 2.0.1 Text-to-video generation.\n\nOur work builds on the advancements in 2D image and video generative models, particularly focusing on text-to-video generation and its challenges, as highlighted by recent literature \\[ [8]), [66])\\]. Earlier works favored GANs \\[ [79]), [2])\\], but the trend has shifted towards diffusion models for their superior performance in video generation \\[ [11]), [54])\\]. However, most existing text-to-video models still exhibit a significant quality gap with text-to-image models due to dataset and computational constraints.\nHybrid training approaches combining image and video datasets have been explored to overcome these limitations, employing techniques for enhancing spatial and temporal resolution through pixel-space and latent space upsampling \\[ [7]), [95]), [104]), [33]), [28]), [32]), [96]), [117])\\].\nThe emergence of transformer-based autoregressive models signifies a leap forward, enabling the creation of videos of arbitrary lengths \\[ [86]), [11]), [57]), [59])\\].\nRecent efforts have also focused on fine-tuning text-to-image models for video data and decoupling content and motion generation for enhanced quality and flexibility \\[ [10]), [77]), [99]), [28]), [9])\\]. Additionally, research aimed at increasing video generation controllability has shown promising results, allowing for explicit manipulation of various video aspects \\[ [98]), [92]), [75]), [106]), [6])\\].\n\nDespite advancements, high-quality video synthesis remains challenging, with a notable quality disparity between open-source models and top-performing proprietary ones \\[ [1]), [93])\\]. Although the recent open-source SVD \\[ [9])\\] can synthesize high-quality videos from image through meticulous data curation, we use VideoCrafter2 \\[ [14])\\] for our experiments due to its support for text conditioning.\n\n#### 2.0.2 Text-to-3D generation.\n\nEarly works on 3D generation leveraged the development of GAN algorithms to create realistic 3D objects of single categories, e.g., human or animal faces, cars, etc. These 3D GAN approaches \\[ [19]), [12]), [62]), [74]), [3])\\], however, were limited in the class of scenes they could generate and thus were not suitable for text-based generation.\nInitial attempts at data-driven, text-conditioned methods used CLIP-based supervision \\[ [70])\\], which enabled synthesis or editing of 3D assets \\[ [15]), [36]), [73]), [37]), [25]), [90])\\]. These techniques evolved into the most recent approaches, which optimize a mesh or radiance field based on Score Distillation Sampling (SDS) and its variants using pre-trained diffusion models \\[ [67]), [97]), [48]), [16]), [47]), [91]), [46]), [31]), [107]), [53]), [110]), [40]), [43]), [80])\\]. These SDS-based methods are improving, generating increasingly high-quality 3D assets.\nThe quality of generated 3D structures has been further improved by applying diffusion models that consider multiple viewpoints \\[ [49]), [52]), [76]), [21]), [51]), [41]), [88]), [34]), [81])\\].\nThese models alleviate the so-called ‚ÄùJanus‚Äù problem, where objects are generated with extra heads, limbs, etc.\nAlternatively, recent advancements have seen a shift towards using diffusion or transformer models to lift an input 2D image into a 3D representation for novel-view synthesis \\[ [13]), [83]), [26]), [55]), [109]), [84]), [69]), [56]), [89])\\]. Other recent works \\[ [35]), [44]), [103]), [102]), [113]), [30]), [38]), [101]), [82]), [85]), [68])\\] consider feed-forward 3D generation methods by first generating novel view images and converting them into 3D using transformer architectures.\nAnother line of work models compositional 3D scenes \\[ [65]), [18]), [5]), [17]), [87]), [20]), [118]), [23]), [114])\\] by decomposing the scene into objects.\nWhile producing impressive results, these techniques do not support generating 4D scenes, i.e., their generated objects/scenes are static.\nWe adapt MVDream \\[ [76])\\] and ProlificDreamer \\[ [97])\\] to obtain an initial high-quality and static 3D model, which we animate along a trajectory using supervision from a video diffusion model.\n\n#### 2.0.3 4D generation.\n\nOur research aligns closely with SDS-based 4D generation methodologies that are initialized with a 3D model and subsequently animate it using text-to-video supervision.\nWithin the last year, significant progress from initial results in 4D generation \\[ [78])\\] has been made by a slew of recent methods \\[ [71]), [50]), [4]), [116]), [24]), [105]), [39]), [105])\\].\nThese techniques have notably enhanced both geometry and appearance by integrating supervision from various text-to-image models.\nMore recent endeavors \\[ [71]), [115]), [108]), [63]), [116]), [50]), [24]), [112])\\] have employed similar SDS-based strategies for image or video-conditioned 4D generation.\nStill, all of these approaches yield 4D scenes that remain stationary at a single location and are limited to short and small motions, such as swaying or turning.\nOur objective, however, is to generate large-scale motions that more accurately mimic real-world movements.",
            "citations": null
          },
          "3 Trajectory-Conditioned Text-to-4D Generation": {
            "content": "![Refer to caption]Figure 3: Overview of TC4D. Our method takes as input a pre-trained 3D scene generated using supervision from a 2D and/or 3D diffusion model. We animate the scene through a decomposition of motion at global and local scales. Motion at the global scale is incorporated via rigid transformation of the bounding box containing the object representation along a given spline trajectory ùíØùíØ\\\\mathcal{T} at steps tùë°t. We align local motion to the trajectory by optimizing a separate deformation model that warps the underlying volumetric representation based on supervision from a text-to-video model. The output is an animated 3D scene with motion that is more realistic and greater in magnitude than previous techniques.\n\nOur method generates a 4D scene given an input text prompt and trajectory.\nWe assume that an initial static 3D scene can be generated by adapting existing approaches for text-to-3D generation \\[ [76]), [97]), [4])\\], and we incorporate global and local motion effects using trajectory conditioning and trajectory-aware video score distillation sampling (VSDS).\nTrajectory conditioning rigidly transforms the scene along a given path, and we parameterize local motions using a deformation model conditioned on the trajectory position.\nAn overview of the method is shown in Fig. [3]Figure 3 ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\"), and we describe each component as follows.\n\n### 3.1 4D Scene Representation\n\nWe represent a 4D scene using a deformable 3D neural radiance field (NeRF) \\[ [61]), [45]), [60])\\] parameterized by a neural representation ùí©3Dsubscriptùí©3D\\\\mathcal{N}\\_{\\\\text{3D}}.\nThis representation models appearance and geometry within a unit-length bounding box ùîπ=\\[0,1\\]3ùîπsuperscript013\\\\mathbb{B}=\\\\left\\[0,1\\\\right\\]^{3} as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | (ùêú,œÉ)=ùí©3D‚Äã(ùê±c),ùê±c‚ààùîπ,formulae-sequenceùêúùúésubscriptùí©3Dsubscriptùê±ùëêsubscriptùê±ùëêùîπ(\\\\mathbf{c},\\\\sigma)=\\\\mathcal{N}\\_{\\\\text{3D}}(\\\\mathbf{x}\\_{c}),\\\\;\\\\mathbf{x}\\_{c}\\\\in\\\\mathbb{B}, |  | (1) |\n\nwhere ùêúùêú\\\\mathbf{c} and œÉùúé\\\\sigma are the radiance and density used for volume rendering \\[ [60])\\].\nThe representation captures the canonical pose at t=t0ùë°subscriptùë°0t=t\\_{0} (without loss of generality we assume t0=0subscriptùë°00t\\_{0}=0), and it models motion of the scene at subsequent steps.\nThe 4D scene at any step 0<t‚â§10ùë°10<t\\\\leq 1 can be represented by warping the sampling rays with a time-varying deformation field ‚Ñ±‚Äã(‚ãÖ,t)‚Ñ±‚ãÖùë°\\\\mathcal{F}(\\\\cdot,t) to the canonical pose, _i.e_.,\nùí©4D‚Äã(ùê±,t)=ùí©3D‚Äã(‚Ñ±‚Äã(ùê±,t))subscriptùí©4Dùê±ùë°subscriptùí©3D‚Ñ±ùê±ùë°\\\\mathcal{N}\\_{\\\\textrm{4D}}\\\\left(\\\\mathbf{x},t\\\\right)=\\\\mathcal{N}\\_{\\\\textrm{3D}}\\\\left(\\\\mathcal{F}\\\\left(\\\\mathbf{x},t\\\\right)\\\\right).\n\nIn this paper, we decompose the deformation ‚Ñ±‚Ñ±\\\\mathcal{F} into a global and local term.\nThe global motion is parameterized using a time-dependent rigid transformation ‚Ñõ:(ùê±,t)‚Ü¶ùê±d:‚Ñõmaps-toùê±ùë°subscriptùê±d\\\\mathcal{R}:(\\\\mathbf{x},t)\\\\mapsto\\\\mathbf{x}\\_{\\\\text{d}} that applies rotation, translation and scaling at time tùë°t.\nThe local motion is given by a deformation field ùíü:(ùê±d,t)‚Ü¶ùê±c:ùíümaps-tosubscriptùê±dùë°subscriptùê±ùëê\\\\mathcal{D}:(\\\\mathbf{x}\\_{\\\\text{d}},t)\\\\mapsto\\\\mathbf{x}\\_{c} that maps an input coordinate ùê±d‚ààùîπsubscriptùê±dùîπ\\\\mathbf{x}\\_{\\\\text{d}}\\\\in\\\\mathbb{B} in a deformed space to the coordinate in canonical ( _i.e_., non-deformed) space ùê±c‚ààùîπsubscriptùê±cùîπ\\\\mathbf{x}\\_{\\\\text{c}}\\\\in\\\\mathbb{B}.\nComposing the global and local motions, the 4D scene can be represented as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùí©4D‚Äã(ùê±,t)=ùí©3D‚Äã(ùíü‚àò‚Ñõ‚Äã(ùê±,t)).subscriptùí©4Dùê±ùë°subscriptùí©3Dùíü‚Ñõùê±ùë°\\\\mathcal{N}\\_{\\\\textrm{4D}}\\\\left(\\\\mathbf{x},t\\\\right)=\\\\mathcal{N}\\_{\\\\textrm{3D}}\\\\left(\\\\mathcal{D}\\\\circ\\\\mathcal{R}\\\\left(\\\\mathbf{x},t\\\\right)\\\\right). |  | (2) |\n\nWe describe the implementation of global and local motion operators in the next sections.\n\n### 3.2 Modeling Global Motion with Trajectory Conditioning\n\nOur proposed motion decomposition enables using a straightforward model for global motion ‚Ñõ‚Ñõ\\\\mathcal{R}, by simply applying a rigid transformation to the bounding box ùîπùîπ\\\\mathbb{B} along a trajectory ùíØùíØ\\\\mathcal{T}.\nA holistic model of motion without this decomposition‚Äî _e.g_. through deformation alone‚Äîwould be intractable.\nThe scene bounding box would need to encompass the entire range of motion (inefficient in terms of computation and memory), and we would need to optimize long-range deformations, which is highly challenging.\n\nIn practice, the trajectory is parameterized as a cubic spline {ùíØ‚Äã(t)\\|t‚àà\\[0,1\\]}conditional-setùíØùë°ùë°01\\\\left\\\\{\\\\mathcal{T}\\\\left(t\\\\right)\\|t\\\\in\\[0,1\\]\\\\right\\\\} and ùíØ‚Äã(0)=ùüéùíØ00\\\\mathcal{T}(0)=\\\\mathbf{0} ( _i.e_., the trajectory starts at the origin).\nWe assume the 3D control points are provided by a user.\nThis parametric curve defines the translation and the rotation of the bounding box ùîπùîπ\\\\mathbb{B},\nand the resulting global motion can be expressed as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñõ‚Äã(ùê±,t)=ùêë‚Äã(ùêß^,ùíØ‚Ä≤)‚Äãùê±+ùíØ‚Äã(t).‚Ñõùê±ùë°ùêë^ùêßsuperscriptùíØ‚Ä≤ùê±ùíØùë°\\\\mathcal{R}(\\\\mathbf{x},t)=\\\\mathbf{R}(\\\\mathbf{\\\\hat{n}},\\\\mathcal{T}^{\\\\prime})\\\\,\\\\mathbf{x}+\\\\mathcal{T}(t). |  | (3) |\n\nHere, ùêëùêë\\\\mathbf{R} is the rotation matrix that maps from the trajectory‚Äôs tangent vector to the canonical bounding box orientation.\nSpecifically, it maps the gradient of the trajectory ùíØ‚Ä≤=d‚ÄãùíØ/d‚ÄãtsuperscriptùíØ‚Ä≤dùíØdùë°\\\\mathcal{T}^{\\\\prime}=\\\\mathrm{d}\\\\mathcal{T}/\\\\mathrm{d}t to the normal of the bounding box‚Äôs ‚Äúfront‚Äù face ùêß^^ùêß\\\\mathbf{\\\\hat{n}} while keeping the vertical component of the gradient perpendicular to the ground plane.\nThen, ùíØ‚Äã(t)ùíØùë°\\\\mathcal{T}\\\\left(t\\\\right) is the translation vector that maps back to the canonical bounding box location.\n\n### 3.3 Modeling Local Motion with Trajectory-Aware VSDS\n\nWe capture local motion by optimizing the deformation model with guidance from a trajectory-aware verison of VSDS using a text-to-video diffusion model.\nTo regularize the generated deformation field we use a smoothness penalty, and we introduce a motion annealing technique, which empirically improves realism and temporal consistency.\n\n#### 3.3.1 Video score distillation sampling (VSDS).\n\nFor completeness, we briefly review the principle of VSDS, and refer the interested reader to Singer et al. \\[ [78])\\] for a more detailed description.\nIntuitively this procedure queries a video diffusion model to see how it adds structure to a video rendered from our representation.\nThen, this signal is used to backpropagate gradients into the model to reconstruct the 4D scene.\n\nSpecifically, a video sequence ùêØùêØ\\\\mathbf{v} is rendered from the 4D representation parameterized with Œ∏ùúÉ\\\\theta.\nThen, noise œµbold-italic-œµ\\\\boldsymbol{\\\\epsilon} is added to the video according to a diffusion process; the amount of noise is governed by the diffusion timestep tdsubscriptùë°dt\\_{\\\\text{d}} such that td=0subscriptùë°d0t\\_{\\\\text{d}}=0 yields a noise-free sequence and the maximum timestep (td=1subscriptùë°d1t\\_{\\\\text{d}}=1) gives zero-mean Gaussian noise.\nThe diffusion model, conditioned on a text embedding ùê≤ùê≤\\\\mathbf{y}, predicts the noise added to the video œµ^‚Äã(ùêØtd;td,ùê≤)bold-^bold-italic-œµsubscriptùêØsubscriptùë°dsubscriptùë°dùê≤{\\\\boldsymbol{\\\\hat{\\\\epsilon}}}(\\\\mathbf{v}\\_{t\\_{\\\\text{d}}};t\\_{\\\\text{d}},\\\\mathbf{y}), and this is used to calculate the score distillation sampling gradient ‚àáŒ∏‚Ñí4Dsubscript‚àáùúÉsubscript‚Ñí4D\\\\nabla\\_{\\\\theta}\\\\mathcal{L}\\_{\\\\text{4D}} used to optimize the 4D representation \\[ [67])\\].\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚àáŒ∏‚Ñí4D=ùîºtd,œµ‚Äã\\[(œµ^‚Äã(ùêØtd;td,ùê≤)‚àíœµ)‚Äã‚àÇùêØ‚àÇŒ∏\\].subscript‚àáùúÉsubscript‚Ñí4Dsubscriptùîºsubscriptùë°ùëëbold-italic-œµdelimited-\\[\\]bold-^bold-italic-œµsubscriptùêØsubscriptùë°ùëësubscriptùë°ùëëùê≤bold-italic-œµùêØùúÉ\\\\nabla\\_{\\\\theta}\\\\mathcal{L}\\_{\\\\text{4D}}=\\\\mathbb{E}\\_{t\\_{d},\\\\boldsymbol{\\\\epsilon}}\\\\left\\[\\\\left(\\\\boldsymbol{\\\\hat{\\\\epsilon}}(\\\\mathbf{v}\\_{t\\_{d}};t\\_{d},\\\\mathbf{y})-\\\\boldsymbol{\\\\epsilon}\\\\right)\\\\frac{\\\\partial\\\\mathbf{v}}{\\\\partial\\\\theta}\\\\right\\]. |  | (4) |\n\nHere, the expectation ùîºùîº\\\\mathbb{E} is taken over all timesteps and noise realizations, and ‚àÇùêØ‚àÇŒ∏ùêØùúÉ\\\\frac{\\\\partial\\\\mathbf{v}}{\\\\partial\\\\theta} is the gradient of the generated video w.r.t. the 4D representation parameters Œ∏ùúÉ\\\\theta.\nIn our case, we freeze the parameters of ùí©3Dsubscriptùí©3D\\\\mathcal{N}\\_{\\\\text{3D}} and optimize the parameters of the deformation model ùíüùíü\\\\mathcal{D} to learn local motion.\n\n#### 3.3.2 Incorporating the trajectory.\n\nOne challenge with using VSDS to generate dynamic objects along a trajectory is that the pretrained video diffusion models generate a finite number of NùëÅN frames and thus can only represent limited range of motion.\nNaively sampling NùëÅN timesteps across a long trajectory would require the diffusion model to represent long-range motion, different from its training data.\n\nInstead, we divide the trajectory into segments of length Œî‚ÄãtŒîùë°\\\\Delta t that roughly align with the intrinsic motion scale of the video diffusion model‚Äîthat is, the range of motion typically exhibited in generated video samples.\nAssuming the intrinsic motion scale MùêØsubscriptùëÄùêØM\\_{\\\\mathbf{v}} of the video model is known, and given the total length of the trajectory LùêøL, we approximate the segment length as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | Œî‚Äãt=max‚Å°(MùêØL,1).Œîùë°subscriptùëÄùêØùêø1\\\\Delta t=\\\\max\\\\left(\\\\frac{M\\_{\\\\mathbf{v}}}{L},1\\\\right). |  | (5) |\n\nIn practice, we determine MùêØsubscriptùëÄùêØM\\_{\\\\mathbf{v}} based on an empirical evaluation across multiple scene categories (see supplement for additional details).\n\nOur trajectory-aware VSDS thus consists of three steps:\n(1) we sample random start times t0‚àà\\[0,1‚àíŒî‚Äãt\\]subscriptùë°001Œîùë°t\\_{0}\\\\in\\[0,1-\\\\Delta t\\] along the trajectory, and evenly sample NùëÅN frame times as tn=t0+n‚ÄãŒî‚Äãt/(N‚àí1)subscriptùë°ùëõsubscriptùë°0ùëõŒîùë°ùëÅ1t\\_{n}=t\\_{0}+n\\\\Delta t/(N-1) for 0‚â§n‚â§N‚àí10ùëõùëÅ10\\\\leq n\\\\leq N-1; (2) we compute the corresponding scene representation from ùí©4Dsubscriptùí©4D\\\\mathcal{N}\\_{\\\\text{4D}} using Eq. [2]Equation 2 ‚Ä£ 3.1 4D Scene Representation ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\"); (3) we render videos and optimize the deformation model using Eq. [4]Equation 4 ‚Ä£ 3.3.1 Video score distillation sampling (VSDS). ‚Ä£ 3.3 Modeling Local Motion with Trajectory-Aware VSDS ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\").\nWe summarize the entire optimization procedure Algorithm [1]Algorithm 1 ‚Ä£ 3.3.2 Incorporating the trajectory. ‚Ä£ 3.3 Modeling Local Motion with Trajectory-Aware VSDS ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\").\n\nAlgorithm 1 TC4D\n\nRequire:\n\nùí©3Dsubscriptùí©3D\\\\mathcal{N}\\_{\\\\text{3D}}‚ñ∑‚ñ∑\\\\triangleright optimized 3D neural representation\n\nùíØùíØ\\\\mathcal{T}‚ñ∑‚ñ∑\\\\triangleright trajectory parameterized with a spline\n\nùíüùíü\\\\mathcal{D}‚ñ∑‚ñ∑\\\\triangleright initial local deformation model parameterized with Œ∏ùúÉ\\\\theta\n\nOutput:\n\nùíü‚àósuperscriptùíü\\\\mathcal{D}^{\\*}‚ñ∑‚ñ∑\\\\triangleright optimized local deformation model\n\n1:determine Œî‚ÄãtŒîùë°\\\\Delta t\n\n2:sample t0subscriptùë°0t\\_{0} and trajectory steps\ntn,‚ÄÑ0‚â§n‚â§N‚àí1subscriptùë°ùëõ‚ÄÑ0ùëõùëÅ1t\\_{n},\\\\;0\\\\leq n\\\\leq N-1\n\n3:sample points along rendering rays ùê±ùê±\\\\mathbf{x}\n\n4:apply rigid transform and local deformation (Eq. [2]Equation 2 ‚Ä£ 3.1 4D Scene Representation ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\"))\nùê±c=ùíü‚àò‚Ñõ‚Äã(ùê±,tn)subscriptùê±cùíü‚Ñõùê±subscriptùë°ùëõ\\\\mathbf{x}\\_{\\\\text{c}}=\\\\mathcal{D}\\\\circ\\\\mathcal{R}(\\\\mathbf{x},t\\_{n})\n\n5:volume render video from ùí©3D‚Äã(ùê±c)subscriptùí©3Dsubscriptùê±c\\\\mathcal{N}\\_{\\\\text{3D}}(\\\\mathbf{x}\\_{\\\\text{c}}) and render deformation video from ùíü‚Äã(ùê±,t)ùíüùê±ùë°\\\\mathcal{D}(\\\\mathbf{x},t)\n\n6:calculate ‚àáŒ∏‚Ñí4Dsubscript‚àáùúÉsubscript‚Ñí4D\\\\nabla\\_{\\\\theta}\\\\mathcal{L}\\_{\\\\text{4D}} and ‚àáŒ∏‚Ñísmoothsubscript‚àáùúÉsubscript‚Ñísmooth\\\\nabla\\_{\\\\theta}\\\\mathcal{L}\\_{\\\\text{smooth}} from Eq. [4]Equation 4 ‚Ä£ 3.3.1 Video score distillation sampling (VSDS). ‚Ä£ 3.3 Modeling Local Motion with Trajectory-Aware VSDS ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\") and Eq. [6]Equation 6 ‚Ä£ 3.4 Implementation details ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\")\n\n7:update ùíüùíü\\\\mathcal{D}\n\n8:repeat 1-7\n\n### 3.4 Implementation details\n\nFollowing prior work \\[ [116]), [4])\\], we use hash-encoded feature grids to encode the 3D NeRF ùí©3Dsubscriptùí©3D\\\\mathcal{N}\\_{\\\\text{3D}} and the local deformation field ùíüùíü\\\\mathcal{D}. ùí©3Dsubscriptùí©3D\\\\mathcal{N}\\_{\\\\text{3D}}, is optimized using the hybrid SDS proposed by Bahmani _et al_.\\[ [4])\\], which incorporates supervision from a combination of pre-trained image diffusion models \\[ [76]), [97])\\] to generate a static 3D scene with high-quality appearance and 3D structure.\n\nOnce trained, we freeze ùí©3Dsubscriptùí©3D\\\\mathcal{N}\\_{\\\\text{3D}} and optimize the local deformation field ùíüùíü\\\\mathcal{D} using the trajectory-aware VSDS gradient and an additional smoothness loss.\nFor ease of optimization, we let ùíüùíü\\\\mathcal{D} represent the offset ùêù=ùê±d‚àíùê±cùêùsubscriptùê±dsubscriptùê±c\\\\mathbf{d}=\\\\mathbf{x}\\_{\\\\text{d}}-\\\\mathbf{x}\\_{\\\\text{c}} and initialize it to a small value.\nFollowing Zheng et al. \\[ [116])\\], we apply volume rendering to create videos of the 3D displacement and compute the penalty as\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚Ñísmooth=Œª‚Äã‚àëùê©,n‚à•ùêùx‚à•22+‚à•ùêùy‚à•22+‚à•ùêùt‚à•22,subscript‚ÑísmoothùúÜsubscriptùê©ùëõsuperscriptsubscriptdelimited-‚à•‚à•subscriptùêùùë•22superscriptsubscriptdelimited-‚à•‚à•subscriptùêùùë¶22superscriptsubscriptdelimited-‚à•‚à•subscriptùêùùë°22\\\\mathcal{L}\\_{\\\\text{smooth}}=\\\\lambda\\\\sum\\\\limits\\_{\\\\mathbf{p},n}\\\\lVert\\\\mathbf{d}\\_{x}\\\\rVert\\_{2}^{2}+\\\\lVert\\\\mathbf{d}\\_{y}\\\\rVert\\_{2}^{2}+\\\\lVert\\\\mathbf{d}\\_{t}\\\\rVert\\_{2}^{2}, |  | (6) |\n\nwhere the summation is over all pixels ùê©ùê©\\\\mathbf{p}, video frames nùëõn, ŒªùúÜ\\\\lambda is a hyperparameter, and ùêùx/y/tsubscriptùêùùë•ùë¶ùë°\\\\mathbf{d}\\_{x/y/t} represents a finite-difference approximation to spatial and temporal derivatives in the 3D displacement video sequence.\n\nAdditionally, we find that VSDS gradients for diffusion timesteps where td‚âà1subscriptùë°d1t\\_{\\\\text{d}}\\\\approx 1 introduce jittery, high-frequency motion into the deformation field.\nWe address this issue by annealing the sampling interval of the diffusion timesteps during the course of optimization, which improves the temporal coherence of local motion.\nAt the start of training we sample compute ‚àá‚Ñí4D‚àásubscript‚Ñí4D\\\\nabla\\\\mathcal{L}\\_{\\\\text{4D}} by uniformly sampling td‚àà\\[0.02,0.98\\]subscriptùë°ùëë0.020.98t\\_{d}\\\\in\\[0.02,0.98\\].\nThis interval is linearly decayed during training to td‚àà\\[0.02,0.5\\]subscriptùë°ùëë0.020.5t\\_{d}\\\\in\\[0.02,0.5\\].\n\nThe model is trained using the Adam optimizer \\[ [42])\\] for 10000 iterations, which we find is sufficient to ensure robust and repeatable convergence.",
            "citations": null
          },
          "4 Experiments": {
            "content": "Motion quality is extremely difficult to visualize.\nIn this manuscript, we focus on presenting a detailed analysis from our quantitative evaluation and include only the most representative visual examples.\nWe highly encourage the readers to check the videos in the supplemental material for a conclusive quality assessment.\n\n### 4.1 Metrics\n\nSince there is no automated metric for 4D generation, we evaluate TC4D with a user study.\nThe method is compared quantitatively and qualitatively to a modified version of 4D-fy \\[ [4])\\].\nThat is, we animate the output of 4D-fy by rigidly transforming it to follow the same trajectory as used for TC4D.\nIn total we provide comparisons using 33 scenes generated from different text prompts, and we conduct an extensive ablation study on a subset of these text prompts.\nWe note that text-to-4D generation remains a computationally expensive procedure; our evaluation uses a similar number of text prompts as previous work (e.g., 28 \\[ [78])\\], or 17 \\[ [4])\\]).\n\n![Refer to caption]Figure 4: Comparison of TC4D and 4D-fy.\nWe show two generated scenes of ‚Äúbatman riding a camel‚Äù and ‚Äúa deer walking‚Äù. Each panel contains images rendered from a single viewpoint from two steps along the same trajectory. While 4D-fy produces mostly static results (which we rigidly transform along the trajectory), TC4D learns coherent motion and produces a walking animation. Please also refer to the video results in the supplement.\n\nWe recruit a total of 20 human evaluators and show the evaluators two video clips generated using the same text prompt with TC4D and 4D-fy.\nWe ask the evaluators to specify their overall preference and their preference in terms of appearance quality (AQ), 3D structure quality (SQ), motion quality (MQ), motion amount (MA), text alignment (TA) (see the supplement for the detailed protocol for the study). The results of the user study are shown in Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\") and we include further details in the supplement.\nEach row of the table reports the percentage of evaluations which ranked T4CD over 4D-fy or the ablated approach, _i.e_., a percentage above 50% indicates T4CD is preferred.\nStatistically significant results (p<0.05ùëù0.05p<0.05) are indicated based on a œá2superscriptùúí2\\\\chi^{2} test.\n\nTable 1: Quantitative results. We compare TC4D to the output of 4D-fy animated along the trajectory using a rigid transformation. The methods are evaluated in a user study in which participants indicate their preference (or no preference) based on appearance quality (AQ), 3D structure quality (SQ), motion quality (MQ), motion amount (MA), text alignment (TA), and overall preference (Overall). We also conduct ablations using a subset of the text prompts. The percentages indicate preference for TC4D vs. the alternative method (in each row), _i.e_., >50% indicates ours is preferred. All results are statistically significant (p<0.05ùëù0.05p<0.05) except those indicated with an asterisk.\n\n|  | Human Preference (Ours vs. Method) |\n| Method | AQ | SQ | MQ | MA | TA | Overall |\n| 4D-fy | 55% | 52\\*% | 89% | 92% | 81% | 85% |\n| Ablation Study |  |  |\n| w/o local deformation | 59%\\* | 57%\\* | 98% | 98% | 86% | 97% |\n| w/o trajectory | 56%\\* | 61% | 80% | 85% | 79% | 84% |\n| w/o traj. training | 61% | 56%\\* | 87% | 92% | 79% | 89% |\n| w/o traj.-aware VSDS | 62% | 59%\\* | 84% | 84% | 74% | 85% |\n| w/o smooth. penalty | 58%\\* | 60%\\* | 73% | 69% | 63% | 74% |\n| w/o timestep annealing | 63% | 65% | 84% | 83% | 73% | 84% |\n\n### 4.2 Results\n\nWe visualize the generated 4D scenes by rendering and compositing images along the trajectory from multiple camera viewpoints in Fig. [4]Figure 4 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\").\nTC4D shows significantly more motion and also more realistic motion than 4D-fy‚Äîthis is especially noticeable for scenes in which TC4D synthesizes walking animations that are coherent with the trajectory, but 4D-fy produces only a small amount of relatively incoherent motion.\nIn the user study, participants indicated a statistically significant preference for results from TC4D for all metrics except structure quality.\nIn terms of overall preference, 85% of comparisons were in favor of T4CD.\nWe refer the reader to the video clips included in the supplement, which provide a clear visualization of the advantages of the proposed approach.\n\n### 4.3 Ablation Study\n\nWe assess the impact of various design choices for TC4D through an extensive ablation study.\nThe results are evaluated in the user study (Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\")), and we show qualitative results for the ablated methods on multiple scenes in video clips included in the supplement. To allow for fairer comparison between the methods, we initialize each method with the same static model for a given prompt. This generally led to similar appearance and 3D structure across all methods, which is why many of the quantitative results for appearance quality and 3D structure quality in Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\") do not indicate a statistically significant preference.\nWe discuss each of the ablations in the following.\n\n##### Local deformation.\n\nRemoving the local deformation model reduces the method to rigid transformation of a static pre-trained 3D scene along a spline (i.e., with ùí©4D‚Äã(ùê±,t)=ùí©3D‚Äã(‚Ñõ‚Äã(ùê±,t))subscriptùí©4Dùê±ùë°subscriptùí©3D‚Ñõùê±ùë°\\\\mathcal{N}\\_{\\\\text{4D}}(\\\\mathbf{x},t)=\\\\mathcal{N}\\_{\\\\text{3D}}(\\\\mathcal{R}(\\\\mathbf{x},t))).\nThis ablated method produces unrealistic and completely rigid motion.\nIt is indicated in Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\") as ‚Äúw/o local deformation‚Äù.\nThe results show that the participants perceive less and lower quality motion (see MA and MQ columns respectively), and they overwhelmingly prefer including the deformation motion component.\n\n##### Trajectory (training and rendering).\n\nAlternatively, entirely removing the trajectory reduces the method to the conventional text-to-4D generation setting with deformation-based motion.\nThat is, we have ùí©4D=ùí©3D‚Äã(ùíü‚Äã(ùê±,t))subscriptùí©4Dsubscriptùí©3Dùíüùê±ùë°\\\\mathcal{N}\\_{\\\\text{4D}}=\\\\mathcal{N}\\_{\\\\text{3D}}(\\\\mathcal{D}(\\\\mathbf{x},t)).\nThis experiment is indicated in Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\") as ‚Äúw/o local trajectory‚Äù.\nWhile the method still learns to incorporate some motion without the trajectory, we find that the trajectory is key to producing more complex animations such as walking.\nThis leads to a clear advantage of our method in the user study not only for metrics related to motion (MQ and MA), but also affect the text alignment (TA) and overall preference (last column).\n\n##### Trajectory (training).\n\nSimilar to the 4D-fy baseline, we can omit the trajectory at the training stage and animate the scene via rigid transformation after training.\nThis experiment is indicated in Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\") as ‚Äúw/o traj. training‚Äù.\nIn this experiment, since the synthesized motion is agnostic to the trajectory, the resulting animations are less coherent than when incorporating the trajectory into the training procedure.\nSpecifically, only a smaller range of motion is visible.\nUser study participants prefer TC4D over this ablation by a significant margin.\n\n##### Trajectory-aware VSDS.\n\nWe use trajectory-aware VSDS to ensure that all regions of the trajectory receive adequate supervision from the text-to-video model.\nSpecifically, this procedure involves breaking the trajectory down into segments, and then sampling one segment for which we render the video clips used to compute the VSDS gradients.\nWe ablate this component by rendering video frames from a specific camera viewpoint sampled at equal steps tùë°t along the entire trajectory.\nThen the VSDS gradients are computed using the resulting video.\nOverall, we find this approach results in too coarse a sampling of the trajectory and fails to synthesize smooth motion.\nThis effect can be most clearly seen in the video clips included in the supplement.\nIn Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\"), this method is indicated as ‚Äúw/o traj.-aware VSDS‚Äù. Most users are in favor of our method for higher motion quality.\n\n##### Smoothness penalty.\n\nWe assess the impact of removing the smoothness penalty from the deformation field (Eq. [6]Equation 6 ‚Ä£ 3.4 Implementation details ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\")).\nThis regularization term, proposed by Zheng et al. \\[ [116])\\], helps to dampen high-frequency displacements in the deformation field and leads to smoother motion.\nAs the row ‚Äúw/o smooth penalty‚Äù shows in Table [1]Table 1 ‚Ä£ 4.1 Metrics ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\"), the responses from user study participants indicate that removing this penalty has only a modest negative effect, especially compared to the timestep annealing ablation, which we discuss next.\n\n##### Diffusion timestep annealing.\n\nScheduling the sampling of the diffusion timesteps during training with VSDS provides another form of motion regularization in our method.\nSpecifically, we reduce the sampling of large diffusion timesteps as we train, and we find that this produces smoother, more realistic motion.\nAs we show in the last row of Table [4.2]Results ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\"), ‚Äúw/o timestep annealing‚Äù,\nremoving this procedure entirely (and keeping the smoothness penalty) negatively impacts the users‚Äô preference.\nIn the supplement, we show that this method produces jittery animations and noticeable high-frequency deformation.\n\n##### Effect of scale.\n\nFinally, we evaluate the effect of combining scaling with the rigid transformation used to define the trajectory.\nThat is, we modify Eq. [3]Equation 3 ‚Ä£ 3.2 Modeling Global Motion with Trajectory Conditioning ‚Ä£ 3 Trajectory-Conditioned Text-to-4D Generation ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\") to incorporate a time-dependent term ùíÆ‚Äã(t)‚àà‚Ñù+3ùíÆùë°superscriptsubscript‚Ñù3\\\\mathcal{S}(t)\\\\in\\\\mathbb{R}\\_{+}^{3}, which scales the bounding box along each axis:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ‚ÑõùíÆ‚Äã(ùê±,t)=ùíÆ‚Äã(t)‚äôùêë‚Äã(ùêß^,ùíØ‚Ä≤)‚Äãùê±+ùíØ‚Äã(t),subscript‚ÑõùíÆùê±ùë°direct-productùíÆùë°ùêë^ùêßsuperscriptùíØ‚Ä≤ùê±ùíØùë°\\\\mathcal{R}\\_{\\\\mathcal{S}}(\\\\mathbf{x},t)=\\\\mathcal{S}(t)\\\\odot\\\\mathbf{R}(\\\\mathbf{\\\\hat{n}},\\\\mathcal{T}^{\\\\prime})\\\\,\\\\mathbf{x}+\\\\mathcal{T}(t), |  | (7) |\n\nwhere ‚äôdirect-product\\\\odot indicates Hadamard product.\n\nWe demonstrate this approach on a scene consisting of a column of fire that is generated with the text prompt, ‚Äúa flame getting larger‚Äù (Fig. [5]Figure 5 ‚Ä£ Effect of scale. ‚Ä£ 4.3 Ablation Study ‚Ä£ 4 Experiments ‚Ä£ TC4D: Trajectory-Conditioned Text-to-4D Generation\")).\nGenerating this scene without the trajectory and without bounding box scaling results in a flame that has little variation in size.\nAlternatively, we animate the flame along an upwards trajectory, but this approach simply translates the generated scene rather than changing the size.\nCombining translation and scaling in the vertical dimension allows us to keep the center of the bounding box at a consistent location, and with this technique, the generated flame appears to grow in size.\nOverall, adding the scaling term offers additional flexibility in the types of scenes that can be generated with trajectory conditioning.\n\n\\\\floatbox\n\n\\[\\\\capbeside\\\\thisfloatsetupcapbesideposition=right,top,capbesidewidth=5.5cm\\]figure\\[\\\\FBwidth\\]\n\n![Refer to caption]\n\nFigure 5: Trajectory with scale. We demonstrate adding a scale term to the trajectory for a scene generated with the text prompt ‚Äúa flame getting larger‚Äù. We compare generating the scene without a trajectory or scale (top), with an upwards trajectory only (middle), and with both a trajectory and scale (bottom), the last of which yields a convincing result.",
            "citations": null
          },
          "5 Conclusion": {
            "content": "Overall our work takes important steps in making motion synthesis for text-to-4D models more realistic and expressive. Our framework enables scene-scale motion of entities within compositional 4D scenes with trajectory conditioning, achieving meaningful improvement over prior works that show motions at fixed locations. The proposed factorized motion model opens several avenues for future work.\nIn particular, we envision extensions to generate scenes with multiple interacting objects, adding motion to existing in-the-wild 3D assets, and synthesis of motion across unbounded, large-scale scenes.\nOur current approach assumes that the initial layout and trajectory are given, but it may also be possible to optimize or generate the layouts and trajectories in an end-to-end fashion.\nAn ultimate holistic approach would include an end-to-end pipeline for synthesizing both initial objects and their trajectories for compositional 4D scene generation, which we continue to explore.\nFinally, designing automated text-to-4D metrics by temporally extending text-to-3D metrics \\[ [100])\\] is an important direction for future work.\n\n##### Ethics statement.\n\nOur approach can automatically generate realistic, animated 3D scenes; such techniques can be misused to promulgate realistic fake content for the purposes of misinformation.\nWe condemn misuse of generative models in this fashion and emphasize the importance of research to thwart such efforts (see, e.g., Masood et al. \\[ [58])\\] for an extended discussion of this topic).\nIt is to note, however, that the current level of 4D generation technology still allows humans to easily identify the generated content. In the future, we expect quality improvements such that generated 4D scenes could become indistinguishable from real content. The literature on fake content detection \\[ [29]), [22]), [94])\\] claims that it is easy for now to spot generated content. We fully support the development of algorithms for detection of generated content to help prevent potential misuse of generative AI technologies.",
            "citations": null
          },
          "6 Acknowledgements": {
            "content": "This work was supported by the Natural Sciences and Engineering Research Council of Canada (NSERC) Discovery Grant program, the Digital Research Alliance of Canada, and by the Advanced Research Computing at Simon Fraser University. It was also supported by Snap Inc. and a Swiss Postdoc Mobility fellowship.",
            "citations": null
          }
        },
        "abstract": "Recent techniques for text-to-4D generation synthesize dynamic 3D scenes\nusing supervision from pre-trained text-to-video models. However, existing\nrepresentations for motion, such as deformation models or time-dependent neural\nrepresentations, are limited in the amount of motion they can generate-they\ncannot synthesize motion extending far beyond the bounding box used for volume\nrendering. The lack of a more flexible motion model contributes to the gap in\nrealism between 4D generation methods and recent, near-photorealistic video\ngeneration models. Here, we propose TC4D: trajectory-conditioned text-to-4D\ngeneration, which factors motion into global and local components. We represent\nthe global motion of a scene's bounding box using rigid transformation along a\ntrajectory parameterized by a spline. We learn local deformations that conform\nto the global trajectory using supervision from a text-to-video model. Our\napproach enables the synthesis of scenes animated along arbitrary trajectories,\ncompositional scene generation, and significant improvements to the realism and\namount of generated motion, which we evaluate qualitatively and through a user\nstudy. Video results can be viewed on our website:\nhttps://sherwinbahmani.github.io/tc4d."
      },
      "bib.bib5": {
        "id": "bib.bib5",
        "citation": "Caccia et al. (2019)",
        "authors": "",
        "year": "",
        "title": "Deep generative modeling of lidar data.",
        "venue": "IEEE/RSJ International Conference on Intelligent Robots and Systems",
        "pages": "",
        "url": "",
        "arxiv_id": "1812.01180",
        "doi": null,
        "sections": {},
        "abstract": "Building models capable of generating structured output is a key challenge\nfor AI and robotics. While generative models have been explored on many types\nof data, little work has been done on synthesizing lidar scans, which play a\nkey role in robot mapping and localization. In this work, we show that one can\nadapt deep generative models for this task by unravelling lidar scans into a 2D\npoint map. Our approach can generate high quality samples, while simultaneously\nlearning a meaningful latent representation of the data. We demonstrate\nsignificant improvements against state-of-the-art point cloud generation\nmethods. Furthermore, we propose a novel data representation that augments the\n2D signal with absolute positional information. We show that this helps\nrobustness to noisy and imputed input; the learned model can recover the\nunderlying lidar scan from seemingly uninformative data"
      },
      "bib.bib12": {
        "id": "bib.bib12",
        "citation": "Ho & Salimans (2022)",
        "authors": "",
        "year": "",
        "title": "Classifier-free diffusion guidance.",
        "venue": "arXiv preprint arXiv:2207.12598",
        "pages": "",
        "url": "",
        "arxiv_id": "2207.12598",
        "doi": null,
        "sections": {
          "1 Introduction": {
            "content": "|     |     |     |     |\n| --- | --- | --- | --- |\n|  |  |  |  |\n\nFigure 1: Classifier-free guidance on the malamute class for a 64x64 ImageNet diffusion model. Left to right: increasing amounts of classifier-free guidance, starting from non-guided samples on the left.![Refer to caption]Figure 2: The effect of guidance on a mixture of three Gaussians, each mixture component representing data conditioned on a class. The leftmost plot is the non-guided marginal density. Left to right are densities of mixtures of normalized guided conditionals with increasing guidance strength.\n\nDiffusion models have recently emerged as an expressive and flexible family of generative models, delivering competitive sample quality and likelihood scores on image and audio synthesis tasks (Sohl-Dickstein et al., [2015]); Song & Ermon, [2019]); Ho et al., [2020]); Song et al., [2021b]); Kingma et al., [2021]); Song et al., [2021a])). These models have delivered audio synthesis performance rivaling the quality of autoregressive models with substantially fewer inference steps (Chen et al., [2021]); Kong et al., [2021])), and they have delivered ImageNet generation results outperforming BigGAN-deep (Brock et al., [2019])) and VQ-VAE-2 (Razavi et al., [2019])) in terms of FID score and classification accuracy score (Ho et al., [2021]); Dhariwal & Nichol, [2021])).\n\nDhariwal & Nichol ( [2021])) proposed _classifier guidance_, a technique to boost the sample quality of a diffusion model using an extra trained classifier. Prior to classifier guidance, it was not known how to generate ‚Äúlow temperature‚Äù samples from a diffusion model similar to those produced by truncated BigGAN (Brock et al., [2019])) or low temperature Glow (Kingma & Dhariwal, [2018])): naive attempts, such as scaling the model score vectors or decreasing the amount of Gaussian noise added during diffusion sampling, are ineffective (Dhariwal & Nichol, [2021])). Classifier guidance instead mixes a diffusion model‚Äôs score estimate with the input gradient of the log probability of a classifier. By varying the strength of the classifier gradient, [Dhariwal & Nichol]) can trade off Inception score (Salimans et al., [2016])) and FID score (Heusel et al., [2017])) (or precision and recall) in a manner similar to varying the truncation parameter of BigGAN.\n\nWe are interested in whether classifier guidance can be performed without a classifier. Classifier guidance complicates the diffusion model training pipeline because it requires training an extra classifier, and this classifier must be trained on noisy data so it is generally not possible to plug in a pre-trained classifier. Furthermore, because classifier guidance mixes a score estimate with a classifier gradient during sampling, classifier-guided diffusion sampling can be interpreted as attempting to confuse an image classifier with a gradient-based adversarial attack. This raises the question of whether classifier guidance is successful at boosting classifier-based metrics such as FID and Inception score (IS) simply because it is adversarial against such classifiers. Stepping in direction of classifier gradients also bears some resemblance to GAN training, particularly with nonparameteric generators; this also raises the question of whether classifier-guided diffusion models perform well on classifier-based metrics because they are beginning to resemble GANs, which are already known to perform well on such metrics.\n\nTo resolve these questions, we present _classifier-free guidance_, our guidance method which avoids any classifier entirely. Rather than sampling in the direction of the gradient of an image classifier, classifier-free guidance instead mixes the score estimates of a conditional diffusion model and a jointly trained unconditional diffusion model. By sweeping over the mixing weight, we attain a FID/IS tradeoff similar to that attained by classifier guidance. Our classifier-free guidance results demonstrate that pure generative diffusion models are capable of synthesizing extremely high fidelity samples possible with other types of generative models.",
            "citations": null
          },
          "2 Background": {
            "content": "We train diffusion models in continuous time (Song et al., [2021b]); Chen et al., [2021]); Kingma et al., [2021])): letting ùê±‚àºp‚Äã(ùê±)similar-toùê±ùëùùê±\\\\mathbf{x}\\\\sim p(\\\\mathbf{x}) and ùê≥={ùê≥Œª\\|Œª‚àà\\[Œªmin,Œªmax\\]}ùê≥conditional-setsubscriptùê≥ùúÜùúÜsubscriptùúÜminsubscriptùúÜmax\\\\mathbf{z}=\\\\{\\\\mathbf{z}\\_{\\\\lambda}\\\\,\\|\\\\,\\\\lambda\\\\in\\[\\\\lambda\\_{\\\\mathrm{min}},\\\\lambda\\_{\\\\mathrm{max}}\\]\\\\} for hyperparameters Œªmin<Œªmax‚àà‚ÑùsubscriptùúÜminsubscriptùúÜmax‚Ñù\\\\lambda\\_{\\\\mathrm{min}}<\\\\lambda\\_{\\\\mathrm{max}}\\\\in\\\\mathbb{R}, the forward process q‚Äã(ùê≥\\|ùê±)ùëûconditionalùê≥ùê±q(\\\\mathbf{z}\\|\\\\mathbf{x}) is the variance-preserving Markov process (Sohl-Dickstein et al., [2015])):\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n|  | q‚Äã(ùê≥Œª\\|ùê±)ùëûconditionalsubscriptùê≥ùúÜùê±\\\\displaystyle q(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{x}) | =ùí©‚Äã(Œ±Œª‚Äãùê±,œÉŒª2‚Äãùêà),where‚ÄãŒ±Œª2=1/(1+e‚àíŒª),œÉŒª2=1‚àíŒ±Œª2formulae-sequenceabsentùí©subscriptùõºùúÜùê±superscriptsubscriptùúéùúÜ2ùêàformulae-sequencewheresuperscriptsubscriptùõºùúÜ211superscriptùëíùúÜsuperscriptsubscriptùúéùúÜ21superscriptsubscriptùõºùúÜ2\\\\displaystyle=\\\\mathcal{N}(\\\\alpha\\_{\\\\lambda}\\\\mathbf{x},\\\\sigma\\_{\\\\lambda}^{2}\\\\mathbf{I}),\\ \\\\text{where}\\ \\\\alpha\\_{\\\\lambda}^{2}=1/(1+e^{-\\\\lambda}),\\ \\\\sigma\\_{\\\\lambda}^{2}=1-\\\\alpha\\_{\\\\lambda}^{2} |  | (1) |\n|  | q‚Äã(ùê≥Œª\\|ùê≥Œª‚Ä≤)ùëûconditionalsubscriptùê≥ùúÜsubscriptùê≥superscriptùúÜ‚Ä≤\\\\displaystyle q(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{z}\\_{\\\\lambda^{\\\\prime}}) | =ùí©‚Äã((Œ±Œª/Œ±Œª‚Ä≤)‚Äãùê≥Œª‚Ä≤,œÉŒª\\|Œª‚Ä≤2‚Äãùêà),where‚ÄãŒª<Œª‚Ä≤,œÉŒª\\|Œª‚Ä≤2=(1‚àíeŒª‚àíŒª‚Ä≤)‚ÄãœÉŒª2formulae-sequenceabsentùí©subscriptùõºùúÜsubscriptùõºsuperscriptùúÜ‚Ä≤subscriptùê≥superscriptùúÜ‚Ä≤superscriptsubscriptùúéconditionalùúÜsuperscriptùúÜ‚Ä≤2ùêàformulae-sequencewhereùúÜsuperscriptùúÜ‚Ä≤subscriptsuperscriptùúé2conditionalùúÜsuperscriptùúÜ‚Ä≤1superscriptùëíùúÜsuperscriptùúÜ‚Ä≤superscriptsubscriptùúéùúÜ2\\\\displaystyle=\\\\mathcal{N}((\\\\alpha\\_{\\\\lambda}/\\\\alpha\\_{\\\\lambda^{\\\\prime}})\\\\mathbf{z}\\_{\\\\lambda^{\\\\prime}},\\\\sigma\\_{\\\\lambda\\|\\\\lambda^{\\\\prime}}^{2}\\\\mathbf{I}),\\ \\\\text{where}\\ \\\\lambda<\\\\lambda^{\\\\prime},\\ \\\\sigma^{2}\\_{\\\\lambda\\|\\\\lambda^{\\\\prime}}=(1-e^{\\\\lambda-\\\\lambda^{\\\\prime}})\\\\sigma\\_{\\\\lambda}^{2} |  | (2) |\n\nWe will use the notation p‚Äã(ùê≥)ùëùùê≥p(\\\\mathbf{z}) (or p‚Äã(ùê≥Œª)ùëùsubscriptùê≥ùúÜp(\\\\mathbf{z}\\_{\\\\lambda})) to denote the marginal of ùê≥ùê≥\\\\mathbf{z} (or ùê≥Œªsubscriptùê≥ùúÜ\\\\mathbf{z}\\_{\\\\lambda}) when ùê±‚àºp‚Äã(ùê±)similar-toùê±ùëùùê±\\\\mathbf{x}\\\\sim p(\\\\mathbf{x}) and ùê≥‚àºq‚Äã(ùê≥\\|ùê±)similar-toùê≥ùëûconditionalùê≥ùê±\\\\mathbf{z}\\\\sim q(\\\\mathbf{z}\\|\\\\mathbf{x}). Note that Œª=log‚Å°Œ±Œª2/œÉŒª2ùúÜsuperscriptsubscriptùõºùúÜ2superscriptsubscriptùúéùúÜ2\\\\lambda=\\\\log\\\\alpha\\_{\\\\lambda}^{2}/\\\\sigma\\_{\\\\lambda}^{2}, so ŒªùúÜ\\\\lambda can be interpreted as the log signal-to-noise ratio of ùê≥Œªsubscriptùê≥ùúÜ\\\\mathbf{z}\\_{\\\\lambda}, and the forward process runs in the direction of decreasing ŒªùúÜ\\\\lambda.\n\nConditioned on ùê±ùê±\\\\mathbf{x}, the forward process can be described in reverse by the transitions\nq‚Äã(ùê≥Œª‚Ä≤\\|ùê≥Œª,ùê±)=ùí©‚Äã(ùùÅ~Œª‚Ä≤\\|Œª‚Äã(ùê≥Œª,ùê±),œÉ~Œª‚Ä≤\\|Œª2‚Äãùêà)ùëûconditionalsubscriptùê≥superscriptùúÜ‚Ä≤subscriptùê≥ùúÜùê±ùí©subscript~ùùÅconditionalsuperscriptùúÜ‚Ä≤ùúÜsubscriptùê≥ùúÜùê±subscriptsuperscript~ùúé2conditionalsuperscriptùúÜ‚Ä≤ùúÜùêàq(\\\\mathbf{z}\\_{\\\\lambda^{\\\\prime}}\\|\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{x})=\\\\mathcal{N}(\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{x}),\\\\tilde{\\\\sigma}^{2}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda}\\\\mathbf{I}),\nwhere\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùùÅ~Œª‚Ä≤\\|Œª‚Äã(ùê≥Œª,ùê±)=eŒª‚àíŒª‚Ä≤‚Äã(Œ±Œª‚Ä≤/Œ±Œª)‚Äãùê≥Œª+(1‚àíeŒª‚àíŒª‚Ä≤)‚ÄãŒ±Œª‚Ä≤‚Äãùê±,œÉ~Œª‚Ä≤\\|Œª2=(1‚àíeŒª‚àíŒª‚Ä≤)‚ÄãœÉŒª‚Ä≤2formulae-sequencesubscript~ùùÅconditionalsuperscriptùúÜ‚Ä≤ùúÜsubscriptùê≥ùúÜùê±superscriptùëíùúÜsuperscriptùúÜ‚Ä≤subscriptùõºsuperscriptùúÜ‚Ä≤subscriptùõºùúÜsubscriptùê≥ùúÜ1superscriptùëíùúÜsuperscriptùúÜ‚Ä≤subscriptùõºsuperscriptùúÜ‚Ä≤ùê±subscriptsuperscript~ùúé2conditionalsuperscriptùúÜ‚Ä≤ùúÜ1superscriptùëíùúÜsuperscriptùúÜ‚Ä≤superscriptsubscriptùúésuperscriptùúÜ‚Ä≤2\\\\displaystyle\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{x})=e^{\\\\lambda-\\\\lambda^{\\\\prime}}(\\\\alpha\\_{\\\\lambda^{\\\\prime}}/\\\\alpha\\_{\\\\lambda})\\\\mathbf{z}\\_{\\\\lambda}+(1-e^{\\\\lambda-\\\\lambda^{\\\\prime}})\\\\alpha\\_{\\\\lambda^{\\\\prime}}\\\\mathbf{x},\\\\quad\\\\tilde{\\\\sigma}^{2}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda}=(1-e^{\\\\lambda-\\\\lambda^{\\\\prime}})\\\\sigma\\_{\\\\lambda^{\\\\prime}}^{2} |  | (3) |\n\nThe reverse process generative model starts from pŒ∏‚Äã(ùê≥Œªmin)=ùí©‚Äã(ùüé,ùêà)subscriptùëùùúÉsubscriptùê≥subscriptùúÜminùí©0ùêàp\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda\\_{\\\\mathrm{min}}})=\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}). We specify the transitions:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | pŒ∏‚Äã(ùê≥Œª‚Ä≤\\|ùê≥Œª)=ùí©‚Äã(ùùÅ~Œª‚Ä≤\\|Œª‚Äã(ùê≥Œª,ùê±Œ∏‚Äã(ùê≥Œª)),(œÉ~Œª‚Ä≤\\|Œª2)1‚àív‚Äã(œÉŒª\\|Œª‚Ä≤2)v)subscriptùëùùúÉconditionalsubscriptùê≥superscriptùúÜ‚Ä≤subscriptùê≥ùúÜùí©subscript~ùùÅconditionalsuperscriptùúÜ‚Ä≤ùúÜsubscriptùê≥ùúÜsubscriptùê±ùúÉsubscriptùê≥ùúÜsuperscriptsubscriptsuperscript~ùúé2conditionalsuperscriptùúÜ‚Ä≤ùúÜ1ùë£superscriptsubscriptsuperscriptùúé2conditionalùúÜsuperscriptùúÜ‚Ä≤ùë£\\\\displaystyle p\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda^{\\\\prime}}\\|\\\\mathbf{z}\\_{\\\\lambda})=\\\\mathcal{N}(\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{x}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})),(\\\\tilde{\\\\sigma}^{2}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda})^{1-v}(\\\\sigma^{2}\\_{\\\\lambda\\|\\\\lambda^{\\\\prime}})^{v}) |  | (4) |\n\nDuring sampling, we apply this transition along an increasing sequence Œªmin=Œª1<‚ãØ<ŒªT=ŒªmaxsubscriptùúÜminsubscriptùúÜ1‚ãØsubscriptùúÜùëásubscriptùúÜmax\\\\lambda\\_{\\\\mathrm{min}}=\\\\lambda\\_{1}<\\\\cdots<\\\\lambda\\_{T}=\\\\lambda\\_{\\\\mathrm{max}} for TùëáT timesteps; in other words, we follow the discrete time ancestral sampler of Sohl-Dickstein et al. ( [2015])); Ho et al. ( [2020])). If the model ùê±Œ∏subscriptùê±ùúÉ\\\\mathbf{x}\\_{\\\\theta} is correct, then as T‚Üí‚àû‚ÜíùëáT\\\\rightarrow\\\\infty, we obtain samples from an SDE whose sample paths are distributed as p‚Äã(ùê≥)ùëùùê≥p(\\\\mathbf{z})(Song et al., [2021b])), and we use pŒ∏‚Äã(ùê≥)subscriptùëùùúÉùê≥p\\_{\\\\theta}(\\\\mathbf{z}) to denote the continuous time model distribution.\nThe variance is a log-space interpolation of œÉ~Œª‚Ä≤\\|Œª2subscriptsuperscript~ùúé2conditionalsuperscriptùúÜ‚Ä≤ùúÜ\\\\tilde{\\\\sigma}^{2}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda} and œÉŒª\\|Œª‚Ä≤2subscriptsuperscriptùúé2conditionalùúÜsuperscriptùúÜ‚Ä≤\\\\sigma^{2}\\_{\\\\lambda\\|\\\\lambda^{\\\\prime}} as suggested by Nichol & Dhariwal ( [2021])); we found it effective to use a constant hyperparameter vùë£v rather than learned ùê≥Œªsubscriptùê≥ùúÜ\\\\mathbf{z}\\_{\\\\lambda}-dependent vùë£v. Note that the variances simplify to œÉ~Œª‚Ä≤\\|Œª2subscriptsuperscript~ùúé2conditionalsuperscriptùúÜ‚Ä≤ùúÜ\\\\tilde{\\\\sigma}^{2}\\_{\\\\lambda^{\\\\prime}\\|\\\\lambda} as Œª‚Ä≤‚ÜíŒª‚ÜísuperscriptùúÜ‚Ä≤ùúÜ\\\\lambda^{\\\\prime}\\\\rightarrow\\\\lambda, so vùë£v has an effect only when sampling with non-infinitesimal timesteps as done in practice.\n\nThe reverse process mean comes from an estimate ùê±Œ∏‚Äã(ùê≥Œª)‚âàùê±subscriptùê±ùúÉsubscriptùê≥ùúÜùê±\\\\mathbf{x}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})\\\\approx\\\\mathbf{x} plugged into q‚Äã(ùê≥Œª‚Ä≤\\|ùê≥Œª,ùê±)ùëûconditionalsubscriptùê≥superscriptùúÜ‚Ä≤subscriptùê≥ùúÜùê±q(\\\\mathbf{z}\\_{\\\\lambda^{\\\\prime}}\\|\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{x})(Ho et al., [2020]); Kingma et al., [2021])) (ùê±Œ∏subscriptùê±ùúÉ\\\\mathbf{x}\\_{\\\\theta} also receives ŒªùúÜ\\\\lambda as input, but we suppress this to keep our notation clean). We parameterize ùê±Œ∏subscriptùê±ùúÉ\\\\mathbf{x}\\_{\\\\theta} in terms of œµbold-italic-œµ{\\\\boldsymbol{\\\\epsilon}}-prediction (Ho et al., [2020])): ùê±Œ∏‚Äã(ùê≥Œª)=(ùê≥Œª‚àíœÉŒª‚ÄãœµŒ∏‚Äã(ùê≥Œª))/Œ±Œªsubscriptùê±ùúÉsubscriptùê≥ùúÜsubscriptùê≥ùúÜsubscriptùúéùúÜsubscriptbold-italic-œµùúÉsubscriptùê≥ùúÜsubscriptùõºùúÜ\\\\mathbf{x}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})=(\\\\mathbf{z}\\_{\\\\lambda}-\\\\sigma\\_{\\\\lambda}{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}))/\\\\alpha\\_{\\\\lambda}, and we train on the objective\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | ùîºœµ,Œª‚Äã\\[‚ÄñœµŒ∏‚Äã(ùê≥Œª)‚àíœµ‚Äñ22\\]subscriptùîºbold-italic-œµùúÜdelimited-\\[\\]subscriptsuperscriptnormsubscriptbold-italic-œµùúÉsubscriptùê≥ùúÜbold-italic-œµ22\\\\displaystyle\\\\mathbb{E}\\_{{\\\\boldsymbol{\\\\epsilon}},\\\\lambda}\\\\!\\\\left\\[\\\\\\|{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})-{\\\\boldsymbol{\\\\epsilon}}\\\\\\|^{2}\\_{2}\\\\right\\] |  | (5) |\n\nwhere œµ‚àºùí©‚Äã(ùüé,ùêà)similar-tobold-italic-œµùí©0ùêà{\\\\boldsymbol{\\\\epsilon}}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I}), ùê≥Œª=Œ±Œª‚Äãùê±+œÉŒª‚Äãœµsubscriptùê≥ùúÜsubscriptùõºùúÜùê±subscriptùúéùúÜbold-italic-œµ\\\\mathbf{z}\\_{\\\\lambda}=\\\\alpha\\_{\\\\lambda}\\\\mathbf{x}+\\\\sigma\\_{\\\\lambda}{\\\\boldsymbol{\\\\epsilon}}, and ŒªùúÜ\\\\lambda is drawn from a distribution p‚Äã(Œª)ùëùùúÜp(\\\\lambda) over \\[Œªmin,Œªmax\\]subscriptùúÜminsubscriptùúÜmax\\[\\\\lambda\\_{\\\\mathrm{min}},\\\\lambda\\_{\\\\mathrm{max}}\\]. This objective is denoising score matching (Vincent, [2011]); Hyv√§rinen & Dayan, [2005])) over multiple noise scales (Song & Ermon, [2019])), and when p‚Äã(Œª)ùëùùúÜp(\\\\lambda) is uniform, the objective is proportional to the variational lower bound on the marginal log likelihood of the latent variable model ‚à´pŒ∏‚Äã(ùê±\\|ùê≥)‚ÄãpŒ∏‚Äã(ùê≥)‚Äãùëëùê≥subscriptùëùùúÉconditionalùê±ùê≥subscriptùëùùúÉùê≥differential-dùê≥\\\\int p\\_{\\\\theta}(\\\\mathbf{x}\\|\\\\mathbf{z})p\\_{\\\\theta}(\\\\mathbf{z})d\\\\mathbf{z}, ignoring the term for the unspecified decoder pŒ∏‚Äã(ùê±\\|ùê≥)subscriptùëùùúÉconditionalùê±ùê≥p\\_{\\\\theta}(\\\\mathbf{x}\\|\\\\mathbf{z}) and for the prior at ùê≥Œªminsubscriptùê≥subscriptùúÜmin\\\\mathbf{z}\\_{\\\\lambda\\_{\\\\mathrm{min}}}(Kingma et al., [2021])).\n\nIf p‚Äã(Œª)ùëùùúÜp(\\\\lambda) is not uniform, the objective can be interpreted as weighted variational lower bound whose weighting can be tuned for sample quality (Ho et al., [2020]); Kingma et al., [2021])). We use a p‚Äã(Œª)ùëùùúÜp(\\\\lambda) inspired by the discrete time cosine noise schedule of Nichol & Dhariwal ( [2021])): we sample ŒªùúÜ\\\\lambda via Œª=‚àí2‚Äãlog‚Å°tan‚Å°(a‚Äãu+b)ùúÜ2ùëéùë¢ùëè\\\\lambda=-2\\\\log\\\\tan(au+b) for uniformly distributed u‚àà\\[0,1\\]ùë¢01u\\\\in\\[0,1\\], where b=arctan‚Å°(e‚àíŒªmax/2)ùëèsuperscriptùëísubscriptùúÜmax2b=\\\\arctan(e^{-\\\\lambda\\_{\\\\mathrm{max}}/2}) and a=arctan‚Å°(e‚àíŒªmin/2)‚àíbùëésuperscriptùëísubscriptùúÜmin2ùëèa=\\\\arctan(e^{-\\\\lambda\\_{\\\\mathrm{min}}/2})-b. This represents a hyperbolic secant distribution modified to be supported on a bounded interval. For finite timestep generation, we use ŒªùúÜ\\\\lambda values corresponding to uniformly spaced u‚àà\\[0,1\\]ùë¢01u\\\\in\\[0,1\\], and the final generated sample is ùê±Œ∏‚Äã(ùê≥Œªmax)subscriptùê±ùúÉsubscriptùê≥subscriptùúÜmax\\\\mathbf{x}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda\\_{\\\\mathrm{max}}}).\n\nBecause the loss for œµŒ∏‚Äã(ùê≥Œª)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}) is denoising score matching for all ŒªùúÜ\\\\lambda,\nthe score œµŒ∏‚Äã(ùê≥Œª)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}) learned by our model estimates the gradient of the log-density of the distribution of our noisy data ùê≥Œªsubscriptùê≥ùúÜ\\\\mathbf{z}\\_{\\\\lambda}, that is œµŒ∏‚Äã(ùê≥Œª)‚âà‚àíœÉŒª‚Äã‚àáùê≥Œªlog‚Å°p‚Äã(ùê≥Œª)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜsubscriptùúéùúÜsubscript‚àásubscriptùê≥ùúÜùëùsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})\\\\approx-\\\\sigma\\_{\\\\lambda}\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\\\log p(\\\\mathbf{z}\\_{\\\\lambda}); note, however, that because we use unconstrained neural networks to\ndefine œµŒ∏subscriptbold-italic-œµùúÉ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}, there need not exist any scalar potential whose gradient is œµŒ∏subscriptbold-italic-œµùúÉ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}. Sampling from the learned diffusion model resembles using Langevin diffusion to sample from a sequence of distributions p‚Äã(ùê≥Œª)ùëùsubscriptùê≥ùúÜp(\\\\mathbf{z}\\_{\\\\lambda}) that converges to the conditional distribution p‚Äã(ùê±)ùëùùê±p(\\\\mathbf{x}) of the original data ùê±ùê±\\\\mathbf{x}.\n\nIn the case of conditional generative modeling, the data ùê±ùê±\\\\mathbf{x} is drawn jointly with conditioning information ùêúùêú\\\\mathbf{c}, i.e. a class label for class-conditional image generation. The only modification to the model is that the reverse process function approximator receives ùêúùêú\\\\mathbf{c} as input, as in œµŒ∏‚Äã(ùê≥Œª,ùêú)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}).",
            "citations": null
          },
          "3 Guidance": {
            "content": "An interesting property of certain generative models, such as GANs and flow-based models, is the ability to perform truncated or low temperature sampling by decreasing the variance or range of noise inputs to the generative model at sampling time. The intended effect is to decrease the diversity of the samples while increasing the quality of each individual sample. Truncation in BigGAN (Brock et al., [2019])), for example, yields a tradeoff curve between FID score and Inception score for low and high amounts of truncation, respectively. Low temperature sampling in Glow (Kingma & Dhariwal, [2018])) has a similar effect.\n\nUnfortunately, straightforward attempts of implementing truncation or low temperature sampling in diffusion models are ineffective. For example, scaling model scores or decreasing the variance of Gaussian noise in the reverse process cause the diffusion model to generate blurry, low quality samples (Dhariwal & Nichol, [2021])).\n\n### 3.1 Classifier guidance\n\nTo obtain a truncation-like effect in diffusion models, Dhariwal & Nichol ( [2021])) introduce _classifier guidance_, where the diffusion score œµŒ∏‚Äã(ùê≥Œª,ùêú)‚âà‚àíœÉŒª‚Äã‚àáùê≥Œªlog‚Å°p‚Äã(ùê≥Œª\\|ùêú)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêúsubscriptùúéùúÜsubscript‚àásubscriptùê≥ùúÜùëùconditionalsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})\\\\approx-\\\\sigma\\_{\\\\lambda}\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\\\log p(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c}) is modified to include the gradient of the log likelihood of an auxiliary classifier model pŒ∏‚Äã(ùêú\\|ùê≥Œª)subscriptùëùùúÉconditionalùêúsubscriptùê≥ùúÜp\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda}) as follows:\n\n|     |     |     |\n| --- | --- | --- |\n|  | œµ~Œ∏‚Äã(ùê≥Œª,ùêú)=œµŒ∏‚Äã(ùê≥Œª,ùêú)‚àíw‚ÄãœÉŒª‚Äã‚àáùê≥Œªlog‚Å°pŒ∏‚Äã(ùêú\\|ùê≥Œª)‚âà‚àíœÉŒª‚Äã‚àáùê≥Œª\\[log‚Å°p‚Äã(ùê≥Œª\\|ùêú)+w‚Äãlog‚Å°pŒ∏‚Äã(ùêú\\|ùê≥Œª)\\],subscript~bold-italic-œµùúÉsubscriptùê≥ùúÜùêúsubscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêúùë§subscriptùúéùúÜsubscript‚àásubscriptùê≥ùúÜsubscriptùëùùúÉconditionalùêúsubscriptùê≥ùúÜsubscriptùúéùúÜsubscript‚àásubscriptùê≥ùúÜùëùconditionalsubscriptùê≥ùúÜùêúùë§subscriptùëùùúÉconditionalùêúsubscriptùê≥ùúÜ\\\\tilde{{\\\\boldsymbol{\\\\epsilon}}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})={\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})-w\\\\sigma\\_{\\\\lambda}\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\\\log p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})\\\\approx-\\\\sigma\\_{\\\\lambda}\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\[\\\\log p(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})+w\\\\log p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})\\], |  |\n\nwhere wùë§w is a parameter that controls the strength of the classifier guidance. This modified score œµ~Œ∏‚Äã(ùê≥Œª,ùêú)subscript~bold-italic-œµùúÉsubscriptùê≥ùúÜùêú\\\\tilde{{\\\\boldsymbol{\\\\epsilon}}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}) is then used in place of œµŒ∏‚Äã(ùê≥Œª,ùêú)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}) when sampling from the diffusion model, resulting in approximate samples from the distribution\n\n|     |     |     |\n| --- | --- | --- |\n|  | p~Œ∏‚Äã(ùê≥Œª\\|ùêú)‚àùpŒ∏‚Äã(ùê≥Œª\\|ùêú)‚ÄãpŒ∏‚Äã(ùêú\\|ùê≥Œª)w.proportional-tosubscript~ùëùùúÉconditionalsubscriptùê≥ùúÜùêúsubscriptùëùùúÉconditionalsubscriptùê≥ùúÜùêúsubscriptùëùùúÉsuperscriptconditionalùêúsubscriptùê≥ùúÜùë§\\\\tilde{p}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})\\\\propto p\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})^{w}. |  |\n\nThe effect is that of up-weighting the probability of data for which the classifier pŒ∏‚Äã(ùêú\\|ùê≥Œª)subscriptùëùùúÉconditionalùêúsubscriptùê≥ùúÜp\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda}) assigns high likelihood to the correct label: data that can be classified well scores high on the Inception score of perceptual quality (Salimans et al., [2016])), which rewards generative models for this by design. [Dhariwal & Nichol])\ntherefore find that by setting w>0ùë§0w>0 they can improve the Inception score of their diffusion model, at the expense of decreased diversity in their samples.\n\n[Figure2]In 1 Introduction ‚Ä£ Classifier-Free Diffusion Guidance\") illustrates the effect of numerically solved guidance p~Œ∏‚Äã(ùê≥Œª\\|ùêú)‚àùpŒ∏‚Äã(ùê≥Œª\\|ùêú)‚ÄãpŒ∏‚Äã(ùêú\\|ùê≥Œª)wproportional-tosubscript~ùëùùúÉconditionalsubscriptùê≥ùúÜùêúsubscriptùëùùúÉconditionalsubscriptùê≥ùúÜùêúsubscriptùëùùúÉsuperscriptconditionalùêúsubscriptùê≥ùúÜùë§\\\\tilde{p}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})\\\\propto p\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})^{w} on a toy 2D example of three classes, in which the conditional distribution for each class is an isotropic Gaussian. The form of each conditional upon applying guidance is markedly non-Gaussian. As guidance strength is increased, each conditional places probability mass farther away from other classes and towards directions of high confidence given by logistic regression, and most of the mass becomes concentrated in smaller regions. This behavior can be seen as a simplistic manifestation of the Inception score boost and sample diversity decrease that occur when classifier guidance strength is increased in an ImageNet model.\n\nApplying classifier guidance with weight w+1ùë§1w+1 to an unconditional model would theoretically lead to the same result as applying classifier guidance with weight wùë§w to a conditional model, because pŒ∏‚Äã(ùê≥Œª\\|ùêú)‚ÄãpŒ∏‚Äã(ùêú\\|ùê≥Œª)w‚àùpŒ∏‚Äã(ùê≥Œª)‚ÄãpŒ∏‚Äã(ùêú\\|ùê≥Œª)w+1proportional-tosubscriptùëùùúÉconditionalsubscriptùê≥ùúÜùêúsubscriptùëùùúÉsuperscriptconditionalùêúsubscriptùê≥ùúÜùë§subscriptùëùùúÉsubscriptùê≥ùúÜsubscriptùëùùúÉsuperscriptconditionalùêúsubscriptùê≥ùúÜùë§1p\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})^{w}\\\\propto p\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})^{w+1}; or in terms of scores,\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œµŒ∏‚Äã(ùê≥Œª)‚àí(w+1)‚ÄãœÉŒª‚Äã‚àáùê≥Œªlog‚Å°pŒ∏‚Äã(ùêú\\|ùê≥Œª)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùë§1subscriptùúéùúÜsubscript‚àásubscriptùê≥ùúÜsubscriptùëùùúÉconditionalùêúsubscriptùê≥ùúÜ\\\\displaystyle{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})-(w+1)\\\\sigma\\_{\\\\lambda}\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\\\log p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda}) | ‚âà‚àíœÉŒª‚Äã‚àáùê≥Œª\\[log‚Å°p‚Äã(ùê≥Œª)+(w+1)‚Äãlog‚Å°pŒ∏‚Äã(ùêú\\|ùê≥Œª)\\]absentsubscriptùúéùúÜsubscript‚àásubscriptùê≥ùúÜùëùsubscriptùê≥ùúÜùë§1subscriptùëùùúÉconditionalùêúsubscriptùê≥ùúÜ\\\\displaystyle\\\\approx-\\\\sigma\\_{\\\\lambda}\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\[\\\\log p(\\\\mathbf{z}\\_{\\\\lambda})+(w+1)\\\\log p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})\\] |  |\n|  |  | =‚àíœÉŒª‚Äã‚àáùê≥Œª\\[log‚Å°p‚Äã(ùê≥Œª\\|ùêú)+w‚Äãlog‚Å°pŒ∏‚Äã(ùêú\\|ùê≥Œª)\\],absentsubscriptùúéùúÜsubscript‚àásubscriptùê≥ùúÜùëùconditionalsubscriptùê≥ùúÜùêúùë§subscriptùëùùúÉconditionalùêúsubscriptùê≥ùúÜ\\\\displaystyle=-\\\\sigma\\_{\\\\lambda}\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\[\\\\log p(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})+w\\\\log p\\_{\\\\theta}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})\\], |  |\n\nbut interestingly, [Dhariwal & Nichol]) obtain their best results when applying classifier guidance to an already class-conditional model, as opposed to applying guidance to an unconditional model. For this reason, we will stay in the setup of guiding an already conditional model.\n\n### 3.2 Classifier-free guidance\n\nWhile classifier guidance successfully trades off IS and FID as expected from truncation or low temperature sampling, it is nonetheless reliant on gradients from an image classifier and we seek to eliminate the classifier for the reasons stated in [Section1]Introduction ‚Ä£ Classifier-Free Diffusion Guidance\"). Here, we describe _classifier-free guidance_, which achieves the same effect without such gradients. Classifier-free guidance is an alternative method of modifying œµŒ∏‚Äã(ùê≥Œª,ùêú)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}) to have the same effect as classifier guidance, but without a classifier. [Algorithms1]In 3.2 Classifier-free guidance ‚Ä£ 3 Guidance ‚Ä£ Classifier-Free Diffusion Guidance\") and [2]Algorithm 2 ‚Ä£ 3.2 Classifier-free guidance ‚Ä£ 3 Guidance ‚Ä£ Classifier-Free Diffusion Guidance\") describe training and sampling with classifier-free guidance in detail.\n\nAlgorithm 1 Joint training a diffusion model with classifier-free guidance\n\n1:puncondsubscriptùëùuncondp\\_{\\\\mathrm{uncond}}: probability of unconditional training\n\n2:repeat\n\n3:(ùê±,ùêú)‚àºp‚Äã(ùê±,ùêú)similar-toùê±ùêúùëùùê±ùêú(\\\\mathbf{x},\\\\mathbf{c})\\\\sim p(\\\\mathbf{x},\\\\mathbf{c})‚ñ∑‚ñ∑\\\\triangleright Sample data with conditioning from the dataset\n\n4:ùêú‚Üê‚àÖ‚Üêùêú\\\\mathbf{c}\\\\leftarrow\\\\varnothing with probability puncondsubscriptùëùuncondp\\_{\\\\mathrm{uncond}}‚ñ∑‚ñ∑\\\\triangleright Randomly discard conditioning to train unconditionally\n\n5:Œª‚àºp‚Äã(Œª)similar-toùúÜùëùùúÜ\\\\lambda\\\\sim p(\\\\lambda)‚ñ∑‚ñ∑\\\\triangleright Sample log SNR value\n\n6:œµ‚àºùí©‚Äã(ùüé,ùêà)similar-tobold-italic-œµùí©0ùêà{\\\\boldsymbol{\\\\epsilon}}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I})\n\n7:ùê≥Œª=Œ±Œª‚Äãùê±+œÉŒª‚Äãœµsubscriptùê≥ùúÜsubscriptùõºùúÜùê±subscriptùúéùúÜbold-italic-œµ\\\\mathbf{z}\\_{\\\\lambda}=\\\\alpha\\_{\\\\lambda}\\\\mathbf{x}+\\\\sigma\\_{\\\\lambda}{\\\\boldsymbol{\\\\epsilon}}‚ñ∑‚ñ∑\\\\triangleright Corrupt data to the sampled log SNR value\n\n8:     Take gradient step on ‚àáŒ∏‚ÄñœµŒ∏‚Äã(ùê≥Œª,ùêú)‚àíœµ‚Äñ2subscript‚àáùúÉsuperscriptnormsubscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêúbold-italic-œµ2\\\\nabla\\_{\\\\theta}\\\\left\\\\\\|{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})-{\\\\boldsymbol{\\\\epsilon}}\\\\right\\\\\\|^{2}‚ñ∑‚ñ∑\\\\triangleright Optimization of denoising model\n\n9:until converged\n\nAlgorithm 2 Conditional sampling with classifier-free guidance\n\n1:wùë§w: guidance strength\n\n2:ùêúùêú\\\\mathbf{c}: conditioning information for conditional sampling\n\n3:Œª1,‚Ä¶,ŒªTsubscriptùúÜ1‚Ä¶subscriptùúÜùëá\\\\lambda\\_{1},\\\\dotsc,\\\\lambda\\_{T}: increasing log SNR sequence with Œª1=ŒªminsubscriptùúÜ1subscriptùúÜmin\\\\lambda\\_{1}=\\\\lambda\\_{\\\\mathrm{min}}, ŒªT=ŒªmaxsubscriptùúÜùëásubscriptùúÜmax\\\\lambda\\_{T}=\\\\lambda\\_{\\\\mathrm{max}}\n\n4:ùê≥1‚àºùí©‚Äã(ùüé,ùêà)similar-tosubscriptùê≥1ùí©0ùêà\\\\mathbf{z}\\_{1}\\\\sim\\\\mathcal{N}(\\\\mathbf{0},\\\\mathbf{I})\n\n5:fort=1,‚Ä¶,Tùë°1‚Ä¶ùëát=1,\\\\dotsc,Tdo‚ñ∑‚ñ∑\\\\!\\\\!\\\\triangleright Form the classifier-free guided score at log SNR ŒªtsubscriptùúÜùë°\\\\lambda\\_{t}\n\n6:œµ~t=(1+w)‚ÄãœµŒ∏‚Äã(ùê≥t,ùêú)‚àíw‚ÄãœµŒ∏‚Äã(ùê≥t)subscript~bold-italic-œµùë°1ùë§subscriptbold-italic-œµùúÉsubscriptùê≥ùë°ùêúùë§subscriptbold-italic-œµùúÉsubscriptùê≥ùë°\\\\tilde{{\\\\boldsymbol{\\\\epsilon}}}\\_{t}=(1+w){\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{t},\\\\mathbf{c})-w{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{t})‚ñ∑‚ñ∑\\\\!\\\\!\\\\triangleright Sampling step (could be replaced by another sampler, e.g. DDIM)\n\n7:ùê±~t=(ùê≥t‚àíœÉŒªt‚Äãœµ~t)/Œ±Œªtsubscript~ùê±ùë°subscriptùê≥ùë°subscriptùúésubscriptùúÜùë°subscript~bold-italic-œµùë°subscriptùõºsubscriptùúÜùë°\\\\tilde{\\\\mathbf{x}}\\_{t}=(\\\\mathbf{z}\\_{t}-\\\\sigma\\_{\\\\lambda\\_{t}}\\\\tilde{\\\\boldsymbol{\\\\epsilon}}\\_{t})/\\\\alpha\\_{\\\\lambda\\_{t}}\n\n8:ùê≥t+1‚àºùí©‚Äã(ùùÅ~Œªt+1\\|Œªt‚Äã(ùê≥t,ùê±~t),(œÉ~Œªt+1\\|Œªt2)1‚àív‚Äã(œÉŒªt\\|Œªt+12)v)similar-tosubscriptùê≥ùë°1ùí©subscript~ùùÅconditionalsubscriptùúÜùë°1subscriptùúÜùë°subscriptùê≥ùë°subscript~ùê±ùë°superscriptsubscriptsuperscript~ùúé2conditionalsubscriptùúÜùë°1subscriptùúÜùë°1ùë£superscriptsubscriptsuperscriptùúé2conditionalsubscriptùúÜùë°subscriptùúÜùë°1ùë£\\\\mathbf{z}\\_{t+1}\\\\sim\\\\mathcal{N}(\\\\tilde{\\\\boldsymbol{\\\\mu}}\\_{\\\\lambda\\_{t+1}\\|\\\\lambda\\_{t}}(\\\\mathbf{z}\\_{t},\\\\tilde{\\\\mathbf{x}}\\_{t}),(\\\\tilde{\\\\sigma}^{2}\\_{\\\\lambda\\_{t+1}\\|\\\\lambda\\_{t}})^{1-v}(\\\\sigma^{2}\\_{\\\\lambda\\_{t}\\|\\\\lambda\\_{t+1}})^{v}) if t<Tùë°ùëát<T else ùê≥t+1=ùê±~tsubscriptùê≥ùë°1subscript~ùê±ùë°\\\\mathbf{z}\\_{t+1}=\\\\tilde{\\\\mathbf{x}}\\_{t}\n\n9:endfor\n\n10:returnùê≥T+1subscriptùê≥ùëá1\\\\mathbf{z}\\_{T+1}\n\nInstead of training a separate classifier model, we choose to train an unconditional denoising diffusion model pŒ∏‚Äã(ùê≥)subscriptùëùùúÉùê≥p\\_{\\\\theta}(\\\\mathbf{z}) parameterized through a score estimator œµŒ∏‚Äã(ùê≥Œª)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}) together with the conditional model pŒ∏‚Äã(ùê≥\\|ùêú)subscriptùëùùúÉconditionalùê≥ùêúp\\_{\\\\theta}(\\\\mathbf{z}\\|\\\\mathbf{c}) parameterized through œµŒ∏‚Äã(ùê≥Œª,ùêú)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}). We use a single neural network to parameterize both models, where for the unconditional model we can simply input a null token ‚àÖ\\\\varnothing for the class identifier ùêúùêú\\\\mathbf{c} when predicting the score, i.e. œµŒ∏‚Äã(ùê≥Œª)=œµŒ∏‚Äã(ùê≥Œª,ùêú=‚àÖ)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜsubscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda})={\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}=\\\\varnothing). We jointly train the unconditional and conditional models simply by randomly setting ùêúùêú\\\\mathbf{c} to the unconditional class identifier ‚àÖ\\\\varnothing with some probability puncondsubscriptùëùuncondp\\_{\\\\mathrm{uncond}}, set as a hyperparameter. (It would certainly be possible to train separate models instead of jointly training them together, but we choose joint training because it is extremely simple to implement, does not complicate the training pipeline, and does not increase the total number of parameters.)\nWe then perform sampling using the following linear combination of the conditional and unconditional score estimates:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|  | œµ~Œ∏‚Äã(ùê≥Œª,ùêú)=(1+w)‚ÄãœµŒ∏‚Äã(ùê≥Œª,ùêú)‚àíw‚ÄãœµŒ∏‚Äã(ùê≥Œª)subscript~bold-italic-œµùúÉsubscriptùê≥ùúÜùêú1ùë§subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêúùë§subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜ\\\\displaystyle\\\\tilde{{\\\\boldsymbol{\\\\epsilon}}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})=(1+w){\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})-w{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}) |  | (6) |\n\n[Eq.6]In 3.2 Classifier-free guidance ‚Ä£ 3 Guidance ‚Ä£ Classifier-Free Diffusion Guidance\") has no classifier gradient present, so taking a step in the œµ~Œ∏subscript~bold-italic-œµùúÉ\\\\tilde{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta} direction cannot be interpreted as a gradient-based adversarial attack on an image classifier. Furthermore, œµ~Œ∏subscript~bold-italic-œµùúÉ\\\\tilde{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta} is constructed from score estimates that are non-conservative vector fields due to the use of unconstrained neural networks, so there in general cannot exist a scalar potential such as a classifier log likelihood for which œµ~Œ∏subscript~bold-italic-œµùúÉ\\\\tilde{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta} is the classifier-guided score.\n\nDespite the fact that there in general may not exist a classifier for which [Eq.6]In 3.2 Classifier-free guidance ‚Ä£ 3 Guidance ‚Ä£ Classifier-Free Diffusion Guidance\") is the classifier-guided score, it is in fact inspired by the gradient of an implicit classifier pi‚Äã(ùêú\\|ùê≥Œª)‚àùp‚Äã(ùê≥Œª\\|ùêú)/p‚Äã(ùê≥Œª)proportional-tosuperscriptùëùùëñconditionalùêúsubscriptùê≥ùúÜùëùconditionalsubscriptùê≥ùúÜùêúùëùsubscriptùê≥ùúÜp^{i}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})\\\\propto p(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c})/p(\\\\mathbf{z}\\_{\\\\lambda}). If we had access to exact scores œµ‚àó‚Äã(ùê≥Œª,ùêú)superscriptbold-italic-œµsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}) and œµ‚àó‚Äã(ùê≥Œª)superscriptbold-italic-œµsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda}) (of p‚Äã(ùê≥Œª\\|ùêú)ùëùconditionalsubscriptùê≥ùúÜùêúp(\\\\mathbf{z}\\_{\\\\lambda}\\|\\\\mathbf{c}) and p‚Äã(ùê≥Œª)ùëùsubscriptùê≥ùúÜp(\\\\mathbf{z}\\_{\\\\lambda}), respectively), then the gradient of this implicit classifier would be ‚àáùê≥Œªlog‚Å°pi‚Äã(ùêú\\|ùê≥Œª)=‚àí1œÉŒª‚Äã\\[œµ‚àó‚Äã(ùê≥Œª,ùêú)‚àíœµ‚àó‚Äã(ùê≥Œª)\\]subscript‚àásubscriptùê≥ùúÜsuperscriptùëùùëñconditionalùêúsubscriptùê≥ùúÜ1subscriptùúéùúÜdelimited-\\[\\]superscriptbold-italic-œµsubscriptùê≥ùúÜùêúsuperscriptbold-italic-œµsubscriptùê≥ùúÜ\\\\nabla\\_{\\\\mathbf{z}\\_{\\\\lambda}}\\\\log p^{i}(\\\\mathbf{c}\\|\\\\mathbf{z}\\_{\\\\lambda})=-\\\\frac{1}{\\\\sigma\\_{\\\\lambda}}\\[{\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})-{\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda})\\], and classifier guidance with this implicit classifier would modify the score estimate into œµ~‚àó‚Äã(ùê≥Œª,ùêú)=(1+w)‚Äãœµ‚àó‚Äã(ùê≥Œª,ùêú)‚àíw‚Äãœµ‚àó‚Äã(ùê≥Œª)superscript~bold-italic-œµsubscriptùê≥ùúÜùêú1ùë§superscriptbold-italic-œµsubscriptùê≥ùúÜùêúùë§superscriptbold-italic-œµsubscriptùê≥ùúÜ\\\\tilde{{\\\\boldsymbol{\\\\epsilon}}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})=(1+w){\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})-w{\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda}). Note the resemblance to [Eq.6]In 3.2 Classifier-free guidance ‚Ä£ 3 Guidance ‚Ä£ Classifier-Free Diffusion Guidance\"), but also note that œµ~‚àó‚Äã(ùê≥Œª,ùêú)superscript~bold-italic-œµsubscriptùê≥ùúÜùêú\\\\tilde{{\\\\boldsymbol{\\\\epsilon}}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}) differs fundamentally from œµ~Œ∏‚Äã(ùê≥Œª,ùêú)subscript~bold-italic-œµùúÉsubscriptùê≥ùúÜùêú\\\\tilde{{\\\\boldsymbol{\\\\epsilon}}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}). The former is constructed from the scaled classifier gradient œµ‚àó‚Äã(ùê≥Œª,ùêú)‚àíœµ‚àó‚Äã(ùê≥Œª)superscriptbold-italic-œµsubscriptùê≥ùúÜùêúsuperscriptbold-italic-œµsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})-{\\\\boldsymbol{\\\\epsilon}}^{\\*}(\\\\mathbf{z}\\_{\\\\lambda}); the latter is constructed from the estimate œµŒ∏‚Äã(ùê≥Œª,ùêú)‚àíœµŒ∏‚Äã(ùê≥Œª)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêúsubscriptbold-italic-œµùúÉsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c})-{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}), and this expression is not in general the (scaled) gradient of any classifier, again because the score estimates are the outputs of unconstrained neural networks.\n\nIt is not obvious a priori that inverting a generative model using Bayes‚Äô rule yields a good classifier that provides a useful guidance signal. For example, Grandvalet & Bengio ( [2004])) find that discriminative models generally outperform implicit classifiers derived from generative models, even in artificial cases where the specification of those generative models exactly matches the data distribution. In cases such as ours, where we expect the model to be misspecified, classifiers derived by Bayes‚Äô rule can be inconsistent (Gr√ºnwald & Langford, [2007])) and we lose all guarantees on their performance. Nevertheless, in [Section4]Experiments ‚Ä£ Classifier-Free Diffusion Guidance\"), we show empirically that classifier-free guidance is able to trade off FID and IS in the same way as classifier guidance. In [Section5]Discussion ‚Ä£ Classifier-Free Diffusion Guidance\") we discuss the implications of classifier-free guidance in relation to classifier guidance.",
            "citations": null
          },
          "4 Experiments": {
            "content": "![Refer to caption]Figure 3: Classifier-free guidance on 128x128 ImageNet. Left: non-guided samples, right: classifier-free guided samples with w=3.0ùë§3.0w=3.0. Interestingly, strongly guided samples such as these display saturated colors. See [Fig.8]In Appendix A Samples ‚Ä£ Classifier-Free Diffusion Guidance\") for more.\n\nWe train diffusion models with classifier-free guidance on area-downsampled class-conditional ImageNet (Russakovsky et al., [2015])), the standard setting for studying tradeoffs between FID and Inception scores starting from the BigGAN paper (Brock et al., [2019])).\n\nThe purpose of our experiments is to serve as a proof of concept to demonstrate that classifier-free guidance is able to attain a FID/IS tradeoff similar to classifier guidance and to understand the behavior of classifier-free guidance, not necessarily to push sample quality metrics to state of the art on these benchmarks. For this purpose, we use the same model architectures and hyperparameters as the guided diffusion models of Dhariwal & Nichol ( [2021])) (apart from continuous time training as specified in [Section2]Background ‚Ä£ Classifier-Free Diffusion Guidance\")); those hyperparameter settings were tuned for classifier guidance and hence may be suboptimal for classifier-free guidance. Furthermore, since we amortize the conditional and unconditional models into the same architecture without an extra classifier, we in fact are using less model capacity than previous work. Nevertheless, our classifier-free guided models still produce competitive sample quality metrics and sometimes outperform prior work, as can be seen in the following sections.\n\n### 4.1 Varying the classifier-free guidance strength\n\nHere we experimentally verify the main claim of this paper: that classifier-free guidance is able to trade off IS and FID in a manner like classifier guidance or GAN truncation.\nWe apply our proposed classifier-free guidance to 64√ó64646464\\\\times 64 and 128√ó128128128128\\\\times 128 class-conditional ImageNet generation.\nIn [Table1]In 4.1 Varying the classifier-free guidance strength ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\") and [Fig.4]In 4.1 Varying the classifier-free guidance strength ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\"), we show sample quality effects of sweeping over the guidance strength wùë§w on our 64√ó64646464\\\\times 64 ImageNet models; [Table2]In 4.3 Varying the number of sampling steps ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\") and [Fig.5]In 4.3 Varying the number of sampling steps ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\") show the same for our 128√ó128128128128\\\\times 128 models.\nWe consider w‚àà{0,0.1,0.2,‚Ä¶,4}ùë§00.10.2‚Ä¶4w\\\\in\\\\{0,0.1,0.2,\\\\ldots,4\\\\} and calculate FID and Inception Scores with 50000 samples for each value following the procedures of Heusel et al. ( [2017])) and Salimans et al. ( [2016])). All models used log SNR endpoints Œªmin=‚àí20subscriptùúÜmin20\\\\lambda\\_{\\\\mathrm{min}}=-20 and Œªmax=20subscriptùúÜmax20\\\\lambda\\_{\\\\mathrm{max}}=20. The 64√ó64646464\\\\times 64 models used sampler noise interpolation coefficient v=0.3ùë£0.3v=0.3 and were trained for 400 thousand steps; the 128√ó128128128128\\\\times 128 models used v=0.2ùë£0.2v=0.2 and were trained for 2.7 million steps.\n\nWe obtain the best FID results with a small amount of guidance (w=0.1ùë§0.1w=0.1 or w=0.3ùë§0.3w=0.3, depending on the dataset) and the best IS result with strong guidance (w‚â•4ùë§4w\\\\geq 4). Between these two extremes we see a clear trade-off between these two metrics of perceptual quality, with FID monotonically decreasing and IS monotonically increasing with wùë§w. Our results compare favorably to Dhariwal & Nichol ( [2021])) and Ho et al. ( [2021])), and in fact our 128√ó128128128128\\\\times 128 results are the state of the art in the literature. At w=0.3ùë§0.3w=0.3, our model‚Äôs FID score on 128√ó128128128128\\\\times 128 ImageNet outperforms the classifier-guided ADM-G, and at w=4.0ùë§4.0w=4.0, our model outperforms BigGAN-deep at both FID and IS when BigGAN-deep is evaluated its best-IS truncation level.\n\n[Figures1]In 1 Introduction ‚Ä£ Classifier-Free Diffusion Guidance\"), [6]Figure 6 ‚Ä£ Appendix A Samples ‚Ä£ Classifier-Free Diffusion Guidance\"), [3]Figure 3 ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\"), [7]Figure 7 ‚Ä£ Appendix A Samples ‚Ä£ Classifier-Free Diffusion Guidance\") and [8]Figure 8 ‚Ä£ Appendix A Samples ‚Ä£ Classifier-Free Diffusion Guidance\") show randomly generated samples from our model for different levels of guidance: here we clearly see that increasing classifier-free guidance strength has the expected effect of decreasing sample variety and increasing individual sample fidelity.\n\n| Model | FID (‚Üì‚Üì\\\\downarrow) | IS (‚Üë‚Üë\\\\uparrow) |\n| ADM (Dhariwal & Nichol, [2021])) | 2.07 | - |\n| CDM (Ho et al., [2021])) | 1.48 | 67.95 |\n| Ours | puncond=0.1/0.2/0.5subscriptùëùuncond0.10.20.5p\\_{\\\\mathrm{uncond}}=0.1/0.2/0.5 |\n| w=0.0ùë§0.0w=0.0 | 1.8 / 1.8 / 2.21 | 53.71 / 52.9 / 47.61 |\n| w=0.1ùë§0.1w=0.1 | 1.55 / 1.62 / 1.91 | 66.11 / 64.58 / 56.1 |\n| w=0.2ùë§0.2w=0.2 | 2.04 / 2.1 / 2.08 | 78.91 / 76.99 / 65.6 |\n| w=0.3ùë§0.3w=0.3 | 3.03 / 2.93 / 2.65 | 92.8 / 88.64 / 74.92 |\n| w=0.4ùë§0.4w=0.4 | 4.3 / 4 / 3.44 | 106.2 / 101.11 / 84.27 |\n| w=0.5ùë§0.5w=0.5 | 5.74 / 5.19 / 4.34 | 119.3 / 112.15 / 92.95 |\n| w=0.6ùë§0.6w=0.6 | 7.19 / 6.48 / 5.27 | 131.1 / 122.13 / 102 |\n| w=0.7ùë§0.7w=0.7 | 8.62 / 7.73 / 6.23 | 141.8 / 131.6 / 109.8 |\n| w=0.8ùë§0.8w=0.8 | 10.08 / 8.9 / 7.25 | 151.6 / 140.82 / 116.9 |\n| w=0.9ùë§0.9w=0.9 | 11.41 / 10.09 / 8.21 | 161 / 150.26 / 124.6 |\n| w=1.0ùë§1.0w=1.0 | 12.6 / 11.21 / 9.13 | 170.1 / 158.29 / 131.1 |\n| w=2.0ùë§2.0w=2.0 | 21.03 / 18.79 / 16.16 | 225.5 / 212.98 / 183 |\n| w=3.0ùë§3.0w=3.0 | 24.83 / 22.36 / 19.75 | 250.4 / 237.65 / 208.9 |\n| w=4.0ùë§4.0w=4.0 | 26.22 / 23.84 / 21.48 | 260.2 / 248.97 / 225.1 |\n\nTable 1: ImageNet 64x64 results (w=0.0ùë§0.0w=0.0 refers to non-guided models).50505010010010015015015020020020025025025000101010202020ISFIDpuncond=0.1subscriptùëùuncond0.1p\\_{\\\\mathrm{uncond}}=0.1puncond=0.2subscriptùëùuncond0.2p\\_{\\\\mathrm{uncond}}=0.2puncond=0.5subscriptùëùuncond0.5p\\_{\\\\mathrm{uncond}}=0.5Figure 4: IS/FID curves over guidance strengths for ImageNet 64x64 models. Each curve represents a model with unconditional training probability puncondsubscriptùëùuncondp\\_{\\\\mathrm{uncond}}. Accompanies [Table1]In 4.1 Varying the classifier-free guidance strength ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\").\n\n### 4.2 Varying the unconditional training probability\n\nThe main hyperparameter of classifier-free guidance at training time is puncondsubscriptùëùuncondp\\_{\\\\mathrm{uncond}}, the probability of training on unconditional generation during joint training of the conditional and unconditional diffusion models. Here, we study the effect of training models on varying puncondsubscriptùëùuncondp\\_{\\\\mathrm{uncond}} on 64√ó64646464\\\\times 64 ImageNet.\n\n[Table1]In 4.1 Varying the classifier-free guidance strength ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\") and [Fig.4]In 4.1 Varying the classifier-free guidance strength ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\") show the effects of puncondsubscriptùëùuncondp\\_{\\\\mathrm{uncond}} on sample quality. We trained models with puncond‚àà{0.1,0.2,0.5}subscriptùëùuncond0.10.20.5p\\_{\\\\mathrm{uncond}}\\\\in\\\\{0.1,0.2,0.5\\\\}, all for 400 thousand training steps, and evaluated sample quality across various guidance strengths. We find puncond=0.5subscriptùëùuncond0.5p\\_{\\\\mathrm{uncond}}=0.5 consistently performs worse than puncond‚àà{0.1,0.2}subscriptùëùuncond0.10.2p\\_{\\\\mathrm{uncond}}\\\\in\\\\{0.1,0.2\\\\} across the entire IS/FID frontier; puncond‚àà{0.1,0.2}subscriptùëùuncond0.10.2p\\_{\\\\mathrm{uncond}}\\\\in\\\\{0.1,0.2\\\\} perform about equally as well as each other.\n\nBased on these findings, we conclude that only a relatively small portion of the model capacity of the diffusion model needs to be dedicated to the unconditional generation task in order to produce classifier-free guided scores effective for sample quality. Interestingly, for classifier guidance, [Dhariwal & Nichol]) report that relatively small classifiers with little capacity are sufficient for effective classifier guided sampling, mirroring this phenomenon that we found with classifier-free guided models.\n\n### 4.3 Varying the number of sampling steps\n\nSince the number of sampling steps TùëáT is known to have a major impact on the sample quality of a diffusion model, here we study the effect of varying TùëáT on our 128√ó128128128128\\\\times 128 ImageNet model. [Table2]In 4.3 Varying the number of sampling steps ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\") and [Fig.5]In 4.3 Varying the number of sampling steps ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\") show the effect of varying T‚àà{128,256,1024}ùëá1282561024T\\\\in\\\\{128,256,1024\\\\} over a range of guidance strengths. As expected, sample quality improves when TùëáT is increased, and for this model T=256ùëá256T=256 attains a good balance between sample quality and sampling speed.\n\nNote that T=256ùëá256T=256 is approximately the same number of sampling steps used by ADM-G  (Dhariwal & Nichol, [2021])), which is outperformed by our model. However, it is important to note that each sampling step for our method requires evaluating the denoising model twice, once for the conditional œµŒ∏‚Äã(ùê≥Œª,ùêú)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜùêú{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda},\\\\mathbf{c}) and once for the unconditional œµŒ∏‚Äã(ùê≥Œª)subscriptbold-italic-œµùúÉsubscriptùê≥ùúÜ{\\\\boldsymbol{\\\\epsilon}}\\_{\\\\theta}(\\\\mathbf{z}\\_{\\\\lambda}). Because we used the same model architecture as ADM-G, the fair comparison in terms of sampling speed would be our T=128ùëá128T=128 setting, which underperforms compared to ADM-G in terms of FID score.\n\n| Model | FID (‚Üì‚Üì\\\\downarrow) | IS (‚Üë‚Üë\\\\uparrow) |\n| BigGAN-deep, max IS (Brock et al., [2019])) | 25 | 253 |\n| BigGAN-deep (Brock et al., [2019])) | 5.7 | 124.5 |\n| CDM (Ho et al., [2021])) | 3.52 | 128.8 |\n| LOGAN (Wu et al., [2019])) | 3.36 | 148.2 |\n| ADM-G (Dhariwal & Nichol, [2021])) | 2.97 | - |\n| Ours | T=128/256/1024ùëá1282561024T=128/256/1024 |\n| w=0.0ùë§0.0w=0.0 | 8.11 / 7.27 / 7.22 | 81.46 / 82.45 / 81.54 |\n| w=0.1ùë§0.1w=0.1 | 5.31 / 4.53 / 4.5 | 105.01 / 106.12 / 104.67 |\n| w=0.2ùë§0.2w=0.2 | 3.7 / 3.03 / 3 | 130.79 / 132.54 / 130.09 |\n| w=0.3ùë§0.3w=0.3 | 3.04 / 2.43 / 2.43 | 156.09 / 158.47 / 156 |\n| w=0.4ùë§0.4w=0.4 | 3.02 / 2.49 / 2.48 | 183.01 / 183.41 / 180.88 |\n| w=0.5ùë§0.5w=0.5 | 3.43 / 2.98 / 2.96 | 206.94 / 207.98 / 204.31 |\n| w=0.6ùë§0.6w=0.6 | 4.09 / 3.76 / 3.73 | 227.72 / 228.83 / 226.76 |\n| w=0.7ùë§0.7w=0.7 | 4.96 / 4.67 / 4.69 | 247.92 / 249.25 / 247.89 |\n| w=0.8ùë§0.8w=0.8 | 5.93 / 5.74 / 5.71 | 265.54 / 267.99 / 265.52 |\n| w=0.9ùë§0.9w=0.9 | 6.89 / 6.8 / 6.81 | 280.19 / 283.41 / 281.14 |\n| w=1.0ùë§1.0w=1.0 | 7.88 / 7.86 / 7.8 | 295.29 / 297.98 / 294.56 |\n| w=2.0ùë§2.0w=2.0 | 15.9 / 15.93 / 15.75 | 378.56 / 377.37 / 373.18 |\n| w=3.0ùë§3.0w=3.0 | 19.77 / 19.77 / 19.56 | 409.16 / 407.44 / 405.68 |\n| w=4.0ùë§4.0w=4.0 | 21.55 / 21.53 / 21.45 | 422.29 / 421.03 / 419.06 |\n\nTable 2: ImageNet 128x128 results (w=0.0ùë§0.0w=0.0 refers to non-guided models).505050100100100150150150200200200250250250300300300350350350400400400450450450101010202020ISFIDT=128ùëá128T=128T=256ùëá256T=256T=512ùëá512T=512Figure 5: IS/FID curves over guidance strengths for ImageNet 128x128 models. Each curve represents sampling with a different number of timesteps TùëáT. Accompanies [Table2]In 4.3 Varying the number of sampling steps ‚Ä£ 4 Experiments ‚Ä£ Classifier-Free Diffusion Guidance\").",
            "citations": null
          },
          "5 Discussion": {
            "content": "The most practical advantage of our classifier-free guidance method is its extreme simplicity: it is only a one-line change of code during training‚Äîto randomly drop out the conditioning‚Äîand during sampling‚Äîto mix the conditional and unconditional score estimates. Classifier guidance, by contrast, complicates the training pipeline since it requires training an extra classifier. This classifier must be trained on noisy ùê≥Œªsubscriptùê≥ùúÜ\\\\mathbf{z}\\_{\\\\lambda}, so it is not possible to plug in a standard pre-trained classifier.\n\nSince classifier-free guidance is able to trade off IS and FID like classifier guidance without needing an extra trained classifier, we have demonstrated that guidance can be performed with a pure generative model.\nFurthermore, our diffusion models are parameterized by unconstrained neural networks and therefore their score estimates do not necessarily form conservative vector fields, unlike classifier gradients (Salimans & Ho, [2021])). Therefore, our classifier-free guided sampler follows step directions that do not resemble classifier gradients at all and thus cannot be interpreted as a gradient-based adversarial attack on a classifier, and hence our results show that boosting the classifier-based IS and FID metrics can be accomplished with pure generative models with a sampling procedure that is not adversarial against image classifiers using classifier gradients.\n\nWe also have arrived at an intuitive explanation for how guidance works: it decreases the unconditional likelihood of the sample while increasing the conditional likelihood. Classifier-free guidance accomplishes this by decreasing the unconditional likelihood with a _negative_ score term, which to our knowledge has not yet been explored and may find uses in other applications.\n\nClassifier-free guidance as presented here relies on training an unconditional model, but in some cases this can be avoided. If the class distribution is known and there are only a few classes, we can use the fact that ‚àëùêúp‚Äã(ùê±\\|ùêú)‚Äãp‚Äã(ùêú)=p‚Äã(ùê±)subscriptùêúùëùconditionalùê±ùêúùëùùêúùëùùê±\\\\sum\\_{\\\\mathbf{c}}p(\\\\mathbf{x}\\|\\\\mathbf{c})p(\\\\mathbf{c})=p(\\\\mathbf{x}) to obtain an unconditional score from conditional scores without explicitly training for the unconditional score. Of course, this would require as many forward passes as there are possible values of ùêúùêú\\\\mathbf{c} and would be inefficient for high dimensional conditioning.\n\nA potential disadvantage of classifier-free guidance is sampling speed. Generally, classifiers can be smaller and faster than generative models, so classifier guided sampling may be faster than classifier-free guidance because the latter needs to run two forward passes of the diffusion model, one for conditional score and another for the unconditional score. The necessity to run multiple passes of the diffusion model might be mitigated by changing the architecture to inject conditioning late in the network, but we leave this exploration for future work.\n\nFinally, any guidance method that increases sample fidelity at the expense of diversity must face the question of whether decreased diversity is acceptable. There may be negative impacts in deployed models, since sample diversity is important to maintain in applications where certain parts of the data are underrepresented in the context of the rest of the data. It would be an interesting avenue of future work to try to boost sample quality while maintaining sample diversity.",
            "citations": null
          },
          "6 Conclusion": {
            "content": "We have presented classifier-free guidance, a method to increase sample quality while decreasing sample diversity in diffusion models. Classifier-free guidance can be thought of as classifier guidance without a classifier, and our results showing the effectiveness of classifier-free guidance confirm that pure generative diffusion models are capable of maximizing classifier-based sample quality metrics while entirely avoiding classifier gradients. We look forward to further explorations of classifier-free guidance in a wider variety of settings and data modalities.",
            "citations": null
          },
          "7 Acknowledgements": {
            "content": "We thank Ben Poole and Mohammad Norouzi for discussions.",
            "citations": null
          }
        },
        "abstract": "Classifier guidance is a recently introduced method to trade off mode\ncoverage and sample fidelity in conditional diffusion models post training, in\nthe same spirit as low temperature sampling or truncation in other types of\ngenerative models. Classifier guidance combines the score estimate of a\ndiffusion model with the gradient of an image classifier and thereby requires\ntraining an image classifier separate from the diffusion model. It also raises\nthe question of whether guidance can be performed without a classifier. We show\nthat guidance can be indeed performed by a pure generative model without such a\nclassifier: in what we call classifier-free guidance, we jointly train a\nconditional and an unconditional diffusion model, and we combine the resulting\nconditional and unconditional score estimates to attain a trade-off between\nsample quality and diversity similar to that obtained using classifier\nguidance."
      }
    },
    "key_map": {
      "2312.11417": "bib.bib1",
      "2403.17920": "bib.bib2",
      "1812.01180": "bib.bib5",
      "2207.12598": "bib.bib12"
    }
  }
}